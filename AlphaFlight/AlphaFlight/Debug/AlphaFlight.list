
AlphaFlight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e590  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800e770  0800e770  0000f770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e830  0800e830  0001015c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e830  0800e830  0000f830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e838  0800e838  0001015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e838  0800e838  0000f838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e83c  0800e83c  0000f83c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000015c  20000000  0800e840  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023b8  2000015c  0800e99c  0001015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002514  0800e99c  00010514  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001015c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000250d5  00000000  00000000  0001018c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000524f  00000000  00000000  00035261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fd0  00000000  00000000  0003a4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001895  00000000  00000000  0003c480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a2b  00000000  00000000  0003dd15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029390  00000000  00000000  00067740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee8f3  00000000  00000000  00090ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017f3c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b50  00000000  00000000  0017f408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00187f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000015c 	.word	0x2000015c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e758 	.word	0x0800e758

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000160 	.word	0x20000160
 800021c:	0800e758 	.word	0x0800e758

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002e4:	f000 b988 	b.w	80005f8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	468e      	mov	lr, r1
 8000308:	4604      	mov	r4, r0
 800030a:	4688      	mov	r8, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d962      	bls.n	80003dc <__udivmoddi4+0xdc>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	b14e      	cbz	r6, 8000330 <__udivmoddi4+0x30>
 800031c:	f1c6 0320 	rsb	r3, r6, #32
 8000320:	fa01 f806 	lsl.w	r8, r1, r6
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	40b7      	lsls	r7, r6
 800032a:	ea43 0808 	orr.w	r8, r3, r8
 800032e:	40b4      	lsls	r4, r6
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	fa1f fc87 	uxth.w	ip, r7
 8000338:	fbb8 f1fe 	udiv	r1, r8, lr
 800033c:	0c23      	lsrs	r3, r4, #16
 800033e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000342:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000346:	fb01 f20c 	mul.w	r2, r1, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x62>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000354:	f080 80ea 	bcs.w	800052c <__udivmoddi4+0x22c>
 8000358:	429a      	cmp	r2, r3
 800035a:	f240 80e7 	bls.w	800052c <__udivmoddi4+0x22c>
 800035e:	3902      	subs	r1, #2
 8000360:	443b      	add	r3, r7
 8000362:	1a9a      	subs	r2, r3, r2
 8000364:	b2a3      	uxth	r3, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000372:	fb00 fc0c 	mul.w	ip, r0, ip
 8000376:	459c      	cmp	ip, r3
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x8e>
 800037a:	18fb      	adds	r3, r7, r3
 800037c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000380:	f080 80d6 	bcs.w	8000530 <__udivmoddi4+0x230>
 8000384:	459c      	cmp	ip, r3
 8000386:	f240 80d3 	bls.w	8000530 <__udivmoddi4+0x230>
 800038a:	443b      	add	r3, r7
 800038c:	3802      	subs	r0, #2
 800038e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000392:	eba3 030c 	sub.w	r3, r3, ip
 8000396:	2100      	movs	r1, #0
 8000398:	b11d      	cbz	r5, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40f3      	lsrs	r3, r6
 800039c:	2200      	movs	r2, #0
 800039e:	e9c5 3200 	strd	r3, r2, [r5]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d905      	bls.n	80003b6 <__udivmoddi4+0xb6>
 80003aa:	b10d      	cbz	r5, 80003b0 <__udivmoddi4+0xb0>
 80003ac:	e9c5 0100 	strd	r0, r1, [r5]
 80003b0:	2100      	movs	r1, #0
 80003b2:	4608      	mov	r0, r1
 80003b4:	e7f5      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003b6:	fab3 f183 	clz	r1, r3
 80003ba:	2900      	cmp	r1, #0
 80003bc:	d146      	bne.n	800044c <__udivmoddi4+0x14c>
 80003be:	4573      	cmp	r3, lr
 80003c0:	d302      	bcc.n	80003c8 <__udivmoddi4+0xc8>
 80003c2:	4282      	cmp	r2, r0
 80003c4:	f200 8105 	bhi.w	80005d2 <__udivmoddi4+0x2d2>
 80003c8:	1a84      	subs	r4, r0, r2
 80003ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ce:	2001      	movs	r0, #1
 80003d0:	4690      	mov	r8, r2
 80003d2:	2d00      	cmp	r5, #0
 80003d4:	d0e5      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003d6:	e9c5 4800 	strd	r4, r8, [r5]
 80003da:	e7e2      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f000 8090 	beq.w	8000502 <__udivmoddi4+0x202>
 80003e2:	fab2 f682 	clz	r6, r2
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f040 80a4 	bne.w	8000534 <__udivmoddi4+0x234>
 80003ec:	1a8a      	subs	r2, r1, r2
 80003ee:	0c03      	lsrs	r3, r0, #16
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	b280      	uxth	r0, r0
 80003f6:	b2bc      	uxth	r4, r7
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000406:	fb04 f20c 	mul.w	r2, r4, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x11e>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x11c>
 8000416:	429a      	cmp	r2, r3
 8000418:	f200 80e0 	bhi.w	80005dc <__udivmoddi4+0x2dc>
 800041c:	46c4      	mov	ip, r8
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	fbb3 f2fe 	udiv	r2, r3, lr
 8000424:	fb0e 3312 	mls	r3, lr, r2, r3
 8000428:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800042c:	fb02 f404 	mul.w	r4, r2, r4
 8000430:	429c      	cmp	r4, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x144>
 8000434:	18fb      	adds	r3, r7, r3
 8000436:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x142>
 800043c:	429c      	cmp	r4, r3
 800043e:	f200 80ca 	bhi.w	80005d6 <__udivmoddi4+0x2d6>
 8000442:	4602      	mov	r2, r0
 8000444:	1b1b      	subs	r3, r3, r4
 8000446:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800044a:	e7a5      	b.n	8000398 <__udivmoddi4+0x98>
 800044c:	f1c1 0620 	rsb	r6, r1, #32
 8000450:	408b      	lsls	r3, r1
 8000452:	fa22 f706 	lsr.w	r7, r2, r6
 8000456:	431f      	orrs	r7, r3
 8000458:	fa0e f401 	lsl.w	r4, lr, r1
 800045c:	fa20 f306 	lsr.w	r3, r0, r6
 8000460:	fa2e fe06 	lsr.w	lr, lr, r6
 8000464:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000468:	4323      	orrs	r3, r4
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	fa1f fc87 	uxth.w	ip, r7
 8000472:	fbbe f0f9 	udiv	r0, lr, r9
 8000476:	0c1c      	lsrs	r4, r3, #16
 8000478:	fb09 ee10 	mls	lr, r9, r0, lr
 800047c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000480:	fb00 fe0c 	mul.w	lr, r0, ip
 8000484:	45a6      	cmp	lr, r4
 8000486:	fa02 f201 	lsl.w	r2, r2, r1
 800048a:	d909      	bls.n	80004a0 <__udivmoddi4+0x1a0>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000492:	f080 809c 	bcs.w	80005ce <__udivmoddi4+0x2ce>
 8000496:	45a6      	cmp	lr, r4
 8000498:	f240 8099 	bls.w	80005ce <__udivmoddi4+0x2ce>
 800049c:	3802      	subs	r0, #2
 800049e:	443c      	add	r4, r7
 80004a0:	eba4 040e 	sub.w	r4, r4, lr
 80004a4:	fa1f fe83 	uxth.w	lr, r3
 80004a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ac:	fb09 4413 	mls	r4, r9, r3, r4
 80004b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b8:	45a4      	cmp	ip, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x1ce>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004c2:	f080 8082 	bcs.w	80005ca <__udivmoddi4+0x2ca>
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d97f      	bls.n	80005ca <__udivmoddi4+0x2ca>
 80004ca:	3b02      	subs	r3, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004d2:	eba4 040c 	sub.w	r4, r4, ip
 80004d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004da:	4564      	cmp	r4, ip
 80004dc:	4673      	mov	r3, lr
 80004de:	46e1      	mov	r9, ip
 80004e0:	d362      	bcc.n	80005a8 <__udivmoddi4+0x2a8>
 80004e2:	d05f      	beq.n	80005a4 <__udivmoddi4+0x2a4>
 80004e4:	b15d      	cbz	r5, 80004fe <__udivmoddi4+0x1fe>
 80004e6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ea:	eb64 0409 	sbc.w	r4, r4, r9
 80004ee:	fa04 f606 	lsl.w	r6, r4, r6
 80004f2:	fa22 f301 	lsr.w	r3, r2, r1
 80004f6:	431e      	orrs	r6, r3
 80004f8:	40cc      	lsrs	r4, r1
 80004fa:	e9c5 6400 	strd	r6, r4, [r5]
 80004fe:	2100      	movs	r1, #0
 8000500:	e74f      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000502:	fbb1 fcf2 	udiv	ip, r1, r2
 8000506:	0c01      	lsrs	r1, r0, #16
 8000508:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800050c:	b280      	uxth	r0, r0
 800050e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000512:	463b      	mov	r3, r7
 8000514:	4638      	mov	r0, r7
 8000516:	463c      	mov	r4, r7
 8000518:	46b8      	mov	r8, r7
 800051a:	46be      	mov	lr, r7
 800051c:	2620      	movs	r6, #32
 800051e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000522:	eba2 0208 	sub.w	r2, r2, r8
 8000526:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052a:	e766      	b.n	80003fa <__udivmoddi4+0xfa>
 800052c:	4601      	mov	r1, r0
 800052e:	e718      	b.n	8000362 <__udivmoddi4+0x62>
 8000530:	4610      	mov	r0, r2
 8000532:	e72c      	b.n	800038e <__udivmoddi4+0x8e>
 8000534:	f1c6 0220 	rsb	r2, r6, #32
 8000538:	fa2e f302 	lsr.w	r3, lr, r2
 800053c:	40b7      	lsls	r7, r6
 800053e:	40b1      	lsls	r1, r6
 8000540:	fa20 f202 	lsr.w	r2, r0, r2
 8000544:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000548:	430a      	orrs	r2, r1
 800054a:	fbb3 f8fe 	udiv	r8, r3, lr
 800054e:	b2bc      	uxth	r4, r7
 8000550:	fb0e 3318 	mls	r3, lr, r8, r3
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb08 f904 	mul.w	r9, r8, r4
 800055e:	40b0      	lsls	r0, r6
 8000560:	4589      	cmp	r9, r1
 8000562:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000566:	b280      	uxth	r0, r0
 8000568:	d93e      	bls.n	80005e8 <__udivmoddi4+0x2e8>
 800056a:	1879      	adds	r1, r7, r1
 800056c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000570:	d201      	bcs.n	8000576 <__udivmoddi4+0x276>
 8000572:	4589      	cmp	r9, r1
 8000574:	d81f      	bhi.n	80005b6 <__udivmoddi4+0x2b6>
 8000576:	eba1 0109 	sub.w	r1, r1, r9
 800057a:	fbb1 f9fe 	udiv	r9, r1, lr
 800057e:	fb09 f804 	mul.w	r8, r9, r4
 8000582:	fb0e 1119 	mls	r1, lr, r9, r1
 8000586:	b292      	uxth	r2, r2
 8000588:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800058c:	4542      	cmp	r2, r8
 800058e:	d229      	bcs.n	80005e4 <__udivmoddi4+0x2e4>
 8000590:	18ba      	adds	r2, r7, r2
 8000592:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000596:	d2c4      	bcs.n	8000522 <__udivmoddi4+0x222>
 8000598:	4542      	cmp	r2, r8
 800059a:	d2c2      	bcs.n	8000522 <__udivmoddi4+0x222>
 800059c:	f1a9 0102 	sub.w	r1, r9, #2
 80005a0:	443a      	add	r2, r7
 80005a2:	e7be      	b.n	8000522 <__udivmoddi4+0x222>
 80005a4:	45f0      	cmp	r8, lr
 80005a6:	d29d      	bcs.n	80004e4 <__udivmoddi4+0x1e4>
 80005a8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b0:	3801      	subs	r0, #1
 80005b2:	46e1      	mov	r9, ip
 80005b4:	e796      	b.n	80004e4 <__udivmoddi4+0x1e4>
 80005b6:	eba7 0909 	sub.w	r9, r7, r9
 80005ba:	4449      	add	r1, r9
 80005bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c4:	fb09 f804 	mul.w	r8, r9, r4
 80005c8:	e7db      	b.n	8000582 <__udivmoddi4+0x282>
 80005ca:	4673      	mov	r3, lr
 80005cc:	e77f      	b.n	80004ce <__udivmoddi4+0x1ce>
 80005ce:	4650      	mov	r0, sl
 80005d0:	e766      	b.n	80004a0 <__udivmoddi4+0x1a0>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e6fd      	b.n	80003d2 <__udivmoddi4+0xd2>
 80005d6:	443b      	add	r3, r7
 80005d8:	3a02      	subs	r2, #2
 80005da:	e733      	b.n	8000444 <__udivmoddi4+0x144>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	443b      	add	r3, r7
 80005e2:	e71c      	b.n	800041e <__udivmoddi4+0x11e>
 80005e4:	4649      	mov	r1, r9
 80005e6:	e79c      	b.n	8000522 <__udivmoddi4+0x222>
 80005e8:	eba1 0109 	sub.w	r1, r1, r9
 80005ec:	46c4      	mov	ip, r8
 80005ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f2:	fb09 f804 	mul.w	r8, r9, r4
 80005f6:	e7c4      	b.n	8000582 <__udivmoddi4+0x282>

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <CRSF_Init>:

CRSF_Data_t crsf_data = {0};  // Struct instance to hold CRSF channel data
static UART_HandleTypeDef *crsf_huart;  // Pointer to UART handler
static uint8_t crsf_rx_buffer[CRSF_BUFFER_SIZE];  // DMA buffer

void CRSF_Init(UART_HandleTypeDef *huart) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
    crsf_huart = huart;
 8000604:	4a06      	ldr	r2, [pc, #24]	@ (8000620 <CRSF_Init+0x24>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_DMA(crsf_huart, crsf_rx_buffer, CRSF_BUFFER_SIZE);  // Start UART DMA
 800060a:	4b05      	ldr	r3, [pc, #20]	@ (8000620 <CRSF_Init+0x24>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2240      	movs	r2, #64	@ 0x40
 8000610:	4904      	ldr	r1, [pc, #16]	@ (8000624 <CRSF_Init+0x28>)
 8000612:	4618      	mov	r0, r3
 8000614:	f007 fd1c 	bl	8008050 <HAL_UART_Receive_DMA>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000198 	.word	0x20000198
 8000624:	2000019c 	.word	0x2000019c

08000628 <CRSF_GetRxCount>:

// Get received byte count in DMA buffer
static uint16_t CRSF_GetRxCount() {
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
    return CRSF_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(crsf_huart->hdmarx);
 800062c:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <CRSF_GetRxCount+0x20>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	b29b      	uxth	r3, r3
 8000638:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800063c:	b29b      	uxth	r3, r3
}
 800063e:	4618      	mov	r0, r3
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	20000198 	.word	0x20000198

0800064c <CRSF_DecodeChannels>:

// Decode CRSF channel data
static void CRSF_DecodeChannels(uint8_t *data) {
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
    crsf_data.channels[0]  = (data[0] | data[1] << 8) & 0x07FF;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	b21a      	sxth	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	3301      	adds	r3, #1
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	b21b      	sxth	r3, r3
 8000662:	021b      	lsls	r3, r3, #8
 8000664:	b21b      	sxth	r3, r3
 8000666:	4313      	orrs	r3, r2
 8000668:	b21b      	sxth	r3, r3
 800066a:	b29b      	uxth	r3, r3
 800066c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000670:	b29a      	uxth	r2, r3
 8000672:	4b7d      	ldr	r3, [pc, #500]	@ (8000868 <CRSF_DecodeChannels+0x21c>)
 8000674:	801a      	strh	r2, [r3, #0]
    crsf_data.channels[1]  = (data[1] >> 3 | data[2] << 5) & 0x07FF;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	3301      	adds	r3, #1
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	08db      	lsrs	r3, r3, #3
 800067e:	b2db      	uxtb	r3, r3
 8000680:	b21a      	sxth	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	3302      	adds	r3, #2
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	b21b      	sxth	r3, r3
 800068a:	015b      	lsls	r3, r3, #5
 800068c:	b21b      	sxth	r3, r3
 800068e:	4313      	orrs	r3, r2
 8000690:	b21b      	sxth	r3, r3
 8000692:	b29b      	uxth	r3, r3
 8000694:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000698:	b29a      	uxth	r2, r3
 800069a:	4b73      	ldr	r3, [pc, #460]	@ (8000868 <CRSF_DecodeChannels+0x21c>)
 800069c:	805a      	strh	r2, [r3, #2]
    crsf_data.channels[2]  = (data[2] >> 6 | data[3] << 2 | data[4] << 10) & 0x07FF;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	3302      	adds	r3, #2
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	099b      	lsrs	r3, r3, #6
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	b21a      	sxth	r2, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	3303      	adds	r3, #3
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	b21b      	sxth	r3, r3
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	b21b      	sxth	r3, r3
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b21a      	sxth	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	3304      	adds	r3, #4
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	b21b      	sxth	r3, r3
 80006c2:	029b      	lsls	r3, r3, #10
 80006c4:	b21b      	sxth	r3, r3
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b21b      	sxth	r3, r3
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	4b65      	ldr	r3, [pc, #404]	@ (8000868 <CRSF_DecodeChannels+0x21c>)
 80006d4:	809a      	strh	r2, [r3, #4]
    crsf_data.channels[3]  = (data[4] >> 1 | data[5] << 7) & 0x07FF;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	3304      	adds	r3, #4
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	085b      	lsrs	r3, r3, #1
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	b21a      	sxth	r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	3305      	adds	r3, #5
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	b21b      	sxth	r3, r3
 80006ea:	01db      	lsls	r3, r3, #7
 80006ec:	b21b      	sxth	r3, r3
 80006ee:	4313      	orrs	r3, r2
 80006f0:	b21b      	sxth	r3, r3
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	4b5b      	ldr	r3, [pc, #364]	@ (8000868 <CRSF_DecodeChannels+0x21c>)
 80006fc:	80da      	strh	r2, [r3, #6]
    crsf_data.channels[4]  = (data[5] >> 4 | data[6] << 4) & 0x07FF;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3305      	adds	r3, #5
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	091b      	lsrs	r3, r3, #4
 8000706:	b2db      	uxtb	r3, r3
 8000708:	b21a      	sxth	r2, r3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	3306      	adds	r3, #6
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	b21b      	sxth	r3, r3
 8000712:	011b      	lsls	r3, r3, #4
 8000714:	b21b      	sxth	r3, r3
 8000716:	4313      	orrs	r3, r2
 8000718:	b21b      	sxth	r3, r3
 800071a:	b29b      	uxth	r3, r3
 800071c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000720:	b29a      	uxth	r2, r3
 8000722:	4b51      	ldr	r3, [pc, #324]	@ (8000868 <CRSF_DecodeChannels+0x21c>)
 8000724:	811a      	strh	r2, [r3, #8]
    crsf_data.channels[5]  = (data[6] >> 7 | data[7] << 1 | data[8] << 9) & 0x07FF;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	3306      	adds	r3, #6
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	09db      	lsrs	r3, r3, #7
 800072e:	b2db      	uxtb	r3, r3
 8000730:	b21a      	sxth	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	3307      	adds	r3, #7
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	b21b      	sxth	r3, r3
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	b21b      	sxth	r3, r3
 800073e:	4313      	orrs	r3, r2
 8000740:	b21a      	sxth	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	3308      	adds	r3, #8
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	b21b      	sxth	r3, r3
 800074a:	025b      	lsls	r3, r3, #9
 800074c:	b21b      	sxth	r3, r3
 800074e:	4313      	orrs	r3, r2
 8000750:	b21b      	sxth	r3, r3
 8000752:	b29b      	uxth	r3, r3
 8000754:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000758:	b29a      	uxth	r2, r3
 800075a:	4b43      	ldr	r3, [pc, #268]	@ (8000868 <CRSF_DecodeChannels+0x21c>)
 800075c:	815a      	strh	r2, [r3, #10]
    crsf_data.channels[6]  = (data[8] >> 2 | data[9] << 6) & 0x07FF;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	3308      	adds	r3, #8
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	089b      	lsrs	r3, r3, #2
 8000766:	b2db      	uxtb	r3, r3
 8000768:	b21a      	sxth	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	3309      	adds	r3, #9
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	b21b      	sxth	r3, r3
 8000772:	019b      	lsls	r3, r3, #6
 8000774:	b21b      	sxth	r3, r3
 8000776:	4313      	orrs	r3, r2
 8000778:	b21b      	sxth	r3, r3
 800077a:	b29b      	uxth	r3, r3
 800077c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000780:	b29a      	uxth	r2, r3
 8000782:	4b39      	ldr	r3, [pc, #228]	@ (8000868 <CRSF_DecodeChannels+0x21c>)
 8000784:	819a      	strh	r2, [r3, #12]
    crsf_data.channels[7]  = (data[9] >> 5 | data[10] << 3) & 0x07FF;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	3309      	adds	r3, #9
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	095b      	lsrs	r3, r3, #5
 800078e:	b2db      	uxtb	r3, r3
 8000790:	b21a      	sxth	r2, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	330a      	adds	r3, #10
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	b21b      	sxth	r3, r3
 800079a:	00db      	lsls	r3, r3, #3
 800079c:	b21b      	sxth	r3, r3
 800079e:	4313      	orrs	r3, r2
 80007a0:	b21b      	sxth	r3, r3
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000868 <CRSF_DecodeChannels+0x21c>)
 80007ac:	81da      	strh	r2, [r3, #14]
    crsf_data.channels[8]  = (data[11] | data[12] << 8) & 0x07FF;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	330b      	adds	r3, #11
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	b21a      	sxth	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	330c      	adds	r3, #12
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	b21b      	sxth	r3, r3
 80007be:	021b      	lsls	r3, r3, #8
 80007c0:	b21b      	sxth	r3, r3
 80007c2:	4313      	orrs	r3, r2
 80007c4:	b21b      	sxth	r3, r3
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	4b26      	ldr	r3, [pc, #152]	@ (8000868 <CRSF_DecodeChannels+0x21c>)
 80007d0:	821a      	strh	r2, [r3, #16]
    crsf_data.channels[9]  = (data[12] >> 3 | data[13] << 5) & 0x07FF;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	330c      	adds	r3, #12
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	08db      	lsrs	r3, r3, #3
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	b21a      	sxth	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	330d      	adds	r3, #13
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	015b      	lsls	r3, r3, #5
 80007e8:	b21b      	sxth	r3, r3
 80007ea:	4313      	orrs	r3, r2
 80007ec:	b21b      	sxth	r3, r3
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000868 <CRSF_DecodeChannels+0x21c>)
 80007f8:	825a      	strh	r2, [r3, #18]
    crsf_data.channels[10] = (data[13] >> 6 | data[14] << 2 | data[15] << 10) & 0x07FF;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	330d      	adds	r3, #13
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	099b      	lsrs	r3, r3, #6
 8000802:	b2db      	uxtb	r3, r3
 8000804:	b21a      	sxth	r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	330e      	adds	r3, #14
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	b21b      	sxth	r3, r3
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	b21b      	sxth	r3, r3
 8000812:	4313      	orrs	r3, r2
 8000814:	b21a      	sxth	r2, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	330f      	adds	r3, #15
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	b21b      	sxth	r3, r3
 800081e:	029b      	lsls	r3, r3, #10
 8000820:	b21b      	sxth	r3, r3
 8000822:	4313      	orrs	r3, r2
 8000824:	b21b      	sxth	r3, r3
 8000826:	b29b      	uxth	r3, r3
 8000828:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800082c:	b29a      	uxth	r2, r3
 800082e:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <CRSF_DecodeChannels+0x21c>)
 8000830:	829a      	strh	r2, [r3, #20]
    crsf_data.channels[11] = (data[15] >> 1 | data[16] << 7) & 0x07FF;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	330f      	adds	r3, #15
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	b2db      	uxtb	r3, r3
 800083c:	b21a      	sxth	r2, r3
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	3310      	adds	r3, #16
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b21b      	sxth	r3, r3
 8000846:	01db      	lsls	r3, r3, #7
 8000848:	b21b      	sxth	r3, r3
 800084a:	4313      	orrs	r3, r2
 800084c:	b21b      	sxth	r3, r3
 800084e:	b29b      	uxth	r3, r3
 8000850:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000854:	b29a      	uxth	r2, r3
 8000856:	4b04      	ldr	r3, [pc, #16]	@ (8000868 <CRSF_DecodeChannels+0x21c>)
 8000858:	82da      	strh	r2, [r3, #22]
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	20000178 	.word	0x20000178

0800086c <CRSF_Process>:

// Process CRSF data in main loop
void CRSF_Process() {
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
    uint16_t bytes_received = CRSF_GetRxCount();
 8000872:	f7ff fed9 	bl	8000628 <CRSF_GetRxCount>
 8000876:	4603      	mov	r3, r0
 8000878:	80bb      	strh	r3, [r7, #4]
    if (bytes_received < 3) return;  // Not enough data for a CRSF packet
 800087a:	88bb      	ldrh	r3, [r7, #4]
 800087c:	2b02      	cmp	r3, #2
 800087e:	d92b      	bls.n	80008d8 <CRSF_Process+0x6c>

    for (uint16_t i = 0; i < bytes_received - 2; i++) {
 8000880:	2300      	movs	r3, #0
 8000882:	80fb      	strh	r3, [r7, #6]
 8000884:	e022      	b.n	80008cc <CRSF_Process+0x60>
        if (crsf_rx_buffer[i] == 0xEA) {  // Start of an RC packet
 8000886:	88fb      	ldrh	r3, [r7, #6]
 8000888:	4a15      	ldr	r2, [pc, #84]	@ (80008e0 <CRSF_Process+0x74>)
 800088a:	5cd3      	ldrb	r3, [r2, r3]
 800088c:	2bea      	cmp	r3, #234	@ 0xea
 800088e:	d11a      	bne.n	80008c6 <CRSF_Process+0x5a>
            uint8_t length = crsf_rx_buffer[i + 1];
 8000890:	88fb      	ldrh	r3, [r7, #6]
 8000892:	3301      	adds	r3, #1
 8000894:	4a12      	ldr	r2, [pc, #72]	@ (80008e0 <CRSF_Process+0x74>)
 8000896:	5cd3      	ldrb	r3, [r2, r3]
 8000898:	70fb      	strb	r3, [r7, #3]
            if (length <= (bytes_received - i - 2)) {  // Check if full packet is available
 800089a:	88ba      	ldrh	r2, [r7, #4]
 800089c:	88fb      	ldrh	r3, [r7, #6]
 800089e:	1ad3      	subs	r3, r2, r3
 80008a0:	1e5a      	subs	r2, r3, #1
 80008a2:	78fb      	ldrb	r3, [r7, #3]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	dd0e      	ble.n	80008c6 <CRSF_Process+0x5a>
                uint8_t type = crsf_rx_buffer[i + 2];
 80008a8:	88fb      	ldrh	r3, [r7, #6]
 80008aa:	3302      	adds	r3, #2
 80008ac:	4a0c      	ldr	r2, [pc, #48]	@ (80008e0 <CRSF_Process+0x74>)
 80008ae:	5cd3      	ldrb	r3, [r2, r3]
 80008b0:	70bb      	strb	r3, [r7, #2]
                if (type == 0x16) {  // RC Channel Data
 80008b2:	78bb      	ldrb	r3, [r7, #2]
 80008b4:	2b16      	cmp	r3, #22
 80008b6:	d106      	bne.n	80008c6 <CRSF_Process+0x5a>
                    CRSF_DecodeChannels(&crsf_rx_buffer[i + 3]);  // Extract channel values
 80008b8:	88fb      	ldrh	r3, [r7, #6]
 80008ba:	3303      	adds	r3, #3
 80008bc:	4a08      	ldr	r2, [pc, #32]	@ (80008e0 <CRSF_Process+0x74>)
 80008be:	4413      	add	r3, r2
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fec3 	bl	800064c <CRSF_DecodeChannels>
    for (uint16_t i = 0; i < bytes_received - 2; i++) {
 80008c6:	88fb      	ldrh	r3, [r7, #6]
 80008c8:	3301      	adds	r3, #1
 80008ca:	80fb      	strh	r3, [r7, #6]
 80008cc:	88fa      	ldrh	r2, [r7, #6]
 80008ce:	88bb      	ldrh	r3, [r7, #4]
 80008d0:	3b02      	subs	r3, #2
 80008d2:	429a      	cmp	r2, r3
 80008d4:	dbd7      	blt.n	8000886 <CRSF_Process+0x1a>
 80008d6:	e000      	b.n	80008da <CRSF_Process+0x6e>
    if (bytes_received < 3) return;  // Not enough data for a CRSF packet
 80008d8:	bf00      	nop
                }
            }
        }
    }
}
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	2000019c 	.word	0x2000019c

080008e4 <HAL_UART_RxCpltCallback>:
    if (channel >= NUM_CHANNELS) return 1500;  // Return midpoint if out of range
    return 988 + ((crsf_data.channels[channel] * 988) / 2047);  // Scale to 1000-2000µs
}

// Optional: Restart DMA when transmission is complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
    if (huart == crsf_huart) {
 80008ec:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <HAL_UART_RxCpltCallback+0x2c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d108      	bne.n	8000908 <HAL_UART_RxCpltCallback+0x24>
        CRSF_Process();
 80008f6:	f7ff ffb9 	bl	800086c <CRSF_Process>
        HAL_UART_Receive_DMA(crsf_huart, crsf_rx_buffer, CRSF_BUFFER_SIZE);  // Restart DMA
 80008fa:	4b05      	ldr	r3, [pc, #20]	@ (8000910 <HAL_UART_RxCpltCallback+0x2c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2240      	movs	r2, #64	@ 0x40
 8000900:	4904      	ldr	r1, [pc, #16]	@ (8000914 <HAL_UART_RxCpltCallback+0x30>)
 8000902:	4618      	mov	r0, r3
 8000904:	f007 fba4 	bl	8008050 <HAL_UART_Receive_DMA>
    }
}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000198 	.word	0x20000198
 8000914:	2000019c 	.word	0x2000019c

08000918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b090      	sub	sp, #64	@ 0x40
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800091e:	f000 fd31 	bl	8001384 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000922:	f001 fb9c 	bl	800205e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000926:	f000 f85f 	bl	80009e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800092a:	f000 fc59 	bl	80011e0 <MX_GPIO_Init>
  MX_DMA_Init();
 800092e:	f000 fbfd 	bl	800112c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000932:	f000 fb3b 	bl	8000fac <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000936:	f000 fb69 	bl	800100c <MX_USART2_UART_Init>
  MX_SDMMC1_SD_Init();
 800093a:	f000 f955 	bl	8000be8 <MX_SDMMC1_SD_Init>
  MX_USART6_UART_Init();
 800093e:	f000 fbc5 	bl	80010cc <MX_USART6_UART_Init>
  MX_SPI1_Init();
 8000942:	f000 f973 	bl	8000c2c <MX_SPI1_Init>
  MX_I2C1_Init();
 8000946:	f000 f90f 	bl	8000b68 <MX_I2C1_Init>
  MX_SPI2_Init();
 800094a:	f000 f9ad 	bl	8000ca8 <MX_SPI2_Init>
  MX_TIM1_Init();
 800094e:	f000 f9e9 	bl	8000d24 <MX_TIM1_Init>
  MX_UART4_Init();
 8000952:	f000 fafb 	bl	8000f4c <MX_UART4_Init>
  MX_USART3_UART_Init();
 8000956:	f000 fb89 	bl	800106c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800095a:	f000 f8b3 	bl	8000ac4 <MX_ADC1_Init>
  MX_TIM6_Init();
 800095e:	f000 fabf 	bl	8000ee0 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 8000962:	f00c fcab 	bl	800d2bc <MX_USB_DEVICE_Init>
  MX_FATFS_Init();
 8000966:	f00a fab3 	bl	800aed0 <MX_FATFS_Init>
  MX_TIM2_Init();
 800096a:	f000 fa6b 	bl	8000e44 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  CRSF_Init(&huart1);
 800096e:	481b      	ldr	r0, [pc, #108]	@ (80009dc <main+0xc4>)
 8000970:	f7ff fe44 	bl	80005fc <CRSF_Init>
	  /*CRSF_Process();
	  	uint16_t ch0 = CRSF_GetChannel(0);
	  	printf("Ch 0: %d\n", ch0);*/

	  	char message[64];
	  	snprintf(message, sizeof(message), "Hello, World!");
 8000974:	463b      	mov	r3, r7
 8000976:	4a1a      	ldr	r2, [pc, #104]	@ (80009e0 <main+0xc8>)
 8000978:	2140      	movs	r1, #64	@ 0x40
 800097a:	4618      	mov	r0, r3
 800097c:	f00d fae6 	bl	800df4c <sniprintf>
	  	CDC_Transmit_FS((uint8_t *)message, strlen(message));
 8000980:	463b      	mov	r3, r7
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fc4c 	bl	8000220 <strlen>
 8000988:	4603      	mov	r3, r0
 800098a:	b29a      	uxth	r2, r3
 800098c:	463b      	mov	r3, r7
 800098e:	4611      	mov	r1, r2
 8000990:	4618      	mov	r0, r3
 8000992:	f00c fd51 	bl	800d438 <CDC_Transmit_FS>
	  	//printf("Read at: %ld\n", __HAL_TIM_GET_COUNTER(&htim2));

	  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000996:	2201      	movs	r2, #1
 8000998:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800099c:	4811      	ldr	r0, [pc, #68]	@ (80009e4 <main+0xcc>)
 800099e:	f002 fd29 	bl	80033f4 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009a8:	480e      	ldr	r0, [pc, #56]	@ (80009e4 <main+0xcc>)
 80009aa:	f002 fd23 	bl	80033f4 <HAL_GPIO_WritePin>
	  	HAL_Delay(1000);
 80009ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009b2:	f001 fbb1 	bl	8002118 <HAL_Delay>
	  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009bc:	4809      	ldr	r0, [pc, #36]	@ (80009e4 <main+0xcc>)
 80009be:	f002 fd19 	bl	80033f4 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009c8:	4806      	ldr	r0, [pc, #24]	@ (80009e4 <main+0xcc>)
 80009ca:	f002 fd13 	bl	80033f4 <HAL_GPIO_WritePin>
	  	HAL_Delay(1000);
 80009ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009d2:	f001 fba1 	bl	8002118 <HAL_Delay>
  {
 80009d6:	bf00      	nop
 80009d8:	e7cc      	b.n	8000974 <main+0x5c>
 80009da:	bf00      	nop
 80009dc:	20000590 	.word	0x20000590
 80009e0:	0800e770 	.word	0x0800e770
 80009e4:	40020400 	.word	0x40020400

080009e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b094      	sub	sp, #80	@ 0x50
 80009ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ee:	f107 0320 	add.w	r3, r7, #32
 80009f2:	2230      	movs	r2, #48	@ 0x30
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f00d fade 	bl	800dfb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8000abc <SystemClock_Config+0xd4>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a10:	4a2a      	ldr	r2, [pc, #168]	@ (8000abc <SystemClock_Config+0xd4>)
 8000a12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a16:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a18:	4b28      	ldr	r3, [pc, #160]	@ (8000abc <SystemClock_Config+0xd4>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a24:	4b26      	ldr	r3, [pc, #152]	@ (8000ac0 <SystemClock_Config+0xd8>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a25      	ldr	r2, [pc, #148]	@ (8000ac0 <SystemClock_Config+0xd8>)
 8000a2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a2e:	6013      	str	r3, [r2, #0]
 8000a30:	4b23      	ldr	r3, [pc, #140]	@ (8000ac0 <SystemClock_Config+0xd8>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a40:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a46:	2302      	movs	r3, #2
 8000a48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a4a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a50:	2304      	movs	r3, #4
 8000a52:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000a54:	23d8      	movs	r3, #216	@ 0xd8
 8000a56:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000a5c:	2309      	movs	r3, #9
 8000a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a60:	f107 0320 	add.w	r3, r7, #32
 8000a64:	4618      	mov	r0, r3
 8000a66:	f004 f8eb 	bl	8004c40 <HAL_RCC_OscConfig>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a70:	f000 fcb4 	bl	80013dc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a74:	f004 f894 	bl	8004ba0 <HAL_PWREx_EnableOverDrive>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a7e:	f000 fcad 	bl	80013dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a82:	230f      	movs	r3, #15
 8000a84:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a86:	2302      	movs	r3, #2
 8000a88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a8e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	2107      	movs	r1, #7
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f004 fb71 	bl	8005188 <HAL_RCC_ClockConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000aac:	f000 fc96 	bl	80013dc <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000ab0:	f004 fc56 	bl	8005360 <HAL_RCC_EnableCSS>
}
 8000ab4:	bf00      	nop
 8000ab6:	3750      	adds	r7, #80	@ 0x50
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40007000 	.word	0x40007000

08000ac4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aca:	463b      	mov	r3, r7
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ad6:	4b21      	ldr	r3, [pc, #132]	@ (8000b5c <MX_ADC1_Init+0x98>)
 8000ad8:	4a21      	ldr	r2, [pc, #132]	@ (8000b60 <MX_ADC1_Init+0x9c>)
 8000ada:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000adc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b5c <MX_ADC1_Init+0x98>)
 8000ade:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ae2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b5c <MX_ADC1_Init+0x98>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aea:	4b1c      	ldr	r3, [pc, #112]	@ (8000b5c <MX_ADC1_Init+0x98>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000af0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b5c <MX_ADC1_Init+0x98>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000af6:	4b19      	ldr	r3, [pc, #100]	@ (8000b5c <MX_ADC1_Init+0x98>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000afe:	4b17      	ldr	r3, [pc, #92]	@ (8000b5c <MX_ADC1_Init+0x98>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b04:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <MX_ADC1_Init+0x98>)
 8000b06:	4a17      	ldr	r2, [pc, #92]	@ (8000b64 <MX_ADC1_Init+0xa0>)
 8000b08:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b0a:	4b14      	ldr	r3, [pc, #80]	@ (8000b5c <MX_ADC1_Init+0x98>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b10:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <MX_ADC1_Init+0x98>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b16:	4b11      	ldr	r3, [pc, #68]	@ (8000b5c <MX_ADC1_Init+0x98>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <MX_ADC1_Init+0x98>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b24:	480d      	ldr	r0, [pc, #52]	@ (8000b5c <MX_ADC1_Init+0x98>)
 8000b26:	f001 fb1b 	bl	8002160 <HAL_ADC_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b30:	f000 fc54 	bl	80013dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000b34:	230a      	movs	r3, #10
 8000b36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b40:	463b      	mov	r3, r7
 8000b42:	4619      	mov	r1, r3
 8000b44:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <MX_ADC1_Init+0x98>)
 8000b46:	f001 fb4f 	bl	80021e8 <HAL_ADC_ConfigChannel>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b50:	f000 fc44 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	200001dc 	.word	0x200001dc
 8000b60:	40012000 	.word	0x40012000
 8000b64:	0f000001 	.word	0x0f000001

08000b68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bdc <MX_I2C1_Init+0x74>)
 8000b6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000be0 <MX_I2C1_Init+0x78>)
 8000b70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000b72:	4b1a      	ldr	r3, [pc, #104]	@ (8000bdc <MX_I2C1_Init+0x74>)
 8000b74:	4a1b      	ldr	r2, [pc, #108]	@ (8000be4 <MX_I2C1_Init+0x7c>)
 8000b76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b78:	4b18      	ldr	r3, [pc, #96]	@ (8000bdc <MX_I2C1_Init+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b7e:	4b17      	ldr	r3, [pc, #92]	@ (8000bdc <MX_I2C1_Init+0x74>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b84:	4b15      	ldr	r3, [pc, #84]	@ (8000bdc <MX_I2C1_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b8a:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <MX_I2C1_Init+0x74>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b90:	4b12      	ldr	r3, [pc, #72]	@ (8000bdc <MX_I2C1_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b96:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <MX_I2C1_Init+0x74>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <MX_I2C1_Init+0x74>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ba2:	480e      	ldr	r0, [pc, #56]	@ (8000bdc <MX_I2C1_Init+0x74>)
 8000ba4:	f002 fc40 	bl	8003428 <HAL_I2C_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bae:	f000 fc15 	bl	80013dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4809      	ldr	r0, [pc, #36]	@ (8000bdc <MX_I2C1_Init+0x74>)
 8000bb6:	f002 fcd3 	bl	8003560 <HAL_I2CEx_ConfigAnalogFilter>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bc0:	f000 fc0c 	bl	80013dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <MX_I2C1_Init+0x74>)
 8000bc8:	f002 fd15 	bl	80035f6 <HAL_I2CEx_ConfigDigitalFilter>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bd2:	f000 fc03 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000224 	.word	0x20000224
 8000be0:	40005400 	.word	0x40005400
 8000be4:	20404768 	.word	0x20404768

08000be8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000bec:	4b0d      	ldr	r3, [pc, #52]	@ (8000c24 <MX_SDMMC1_SD_Init+0x3c>)
 8000bee:	4a0e      	ldr	r2, [pc, #56]	@ (8000c28 <MX_SDMMC1_SD_Init+0x40>)
 8000bf0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <MX_SDMMC1_SD_Init+0x3c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <MX_SDMMC1_SD_Init+0x3c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000bfe:	4b09      	ldr	r3, [pc, #36]	@ (8000c24 <MX_SDMMC1_SD_Init+0x3c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000c04:	4b07      	ldr	r3, [pc, #28]	@ (8000c24 <MX_SDMMC1_SD_Init+0x3c>)
 8000c06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c0a:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c0c:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <MX_SDMMC1_SD_Init+0x3c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000c12:	4b04      	ldr	r3, [pc, #16]	@ (8000c24 <MX_SDMMC1_SD_Init+0x3c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000278 	.word	0x20000278
 8000c28:	40012c00 	.word	0x40012c00

08000c2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca0 <MX_SPI1_Init+0x74>)
 8000c32:	4a1c      	ldr	r2, [pc, #112]	@ (8000ca4 <MX_SPI1_Init+0x78>)
 8000c34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca0 <MX_SPI1_Init+0x74>)
 8000c38:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <MX_SPI1_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c44:	4b16      	ldr	r3, [pc, #88]	@ (8000ca0 <MX_SPI1_Init+0x74>)
 8000c46:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000c4a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ca0 <MX_SPI1_Init+0x74>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c52:	4b13      	ldr	r3, [pc, #76]	@ (8000ca0 <MX_SPI1_Init+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c58:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <MX_SPI1_Init+0x74>)
 8000c5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c5e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <MX_SPI1_Init+0x74>)
 8000c62:	2228      	movs	r2, #40	@ 0x28
 8000c64:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <MX_SPI1_Init+0x74>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <MX_SPI1_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca0 <MX_SPI1_Init+0x74>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c78:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <MX_SPI1_Init+0x74>)
 8000c7a:	2207      	movs	r2, #7
 8000c7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <MX_SPI1_Init+0x74>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c84:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <MX_SPI1_Init+0x74>)
 8000c86:	2208      	movs	r2, #8
 8000c88:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c8a:	4805      	ldr	r0, [pc, #20]	@ (8000ca0 <MX_SPI1_Init+0x74>)
 8000c8c:	f006 f9ab 	bl	8006fe6 <HAL_SPI_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c96:	f000 fba1 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	200002fc 	.word	0x200002fc
 8000ca4:	40013000 	.word	0x40013000

08000ca8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000cac:	4b1b      	ldr	r3, [pc, #108]	@ (8000d1c <MX_SPI2_Init+0x74>)
 8000cae:	4a1c      	ldr	r2, [pc, #112]	@ (8000d20 <MX_SPI2_Init+0x78>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d1c <MX_SPI2_Init+0x74>)
 8000cb4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000cb8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000cba:	4b18      	ldr	r3, [pc, #96]	@ (8000d1c <MX_SPI2_Init+0x74>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000cc0:	4b16      	ldr	r3, [pc, #88]	@ (8000d1c <MX_SPI2_Init+0x74>)
 8000cc2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000cc6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cc8:	4b14      	ldr	r3, [pc, #80]	@ (8000d1c <MX_SPI2_Init+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cce:	4b13      	ldr	r3, [pc, #76]	@ (8000d1c <MX_SPI2_Init+0x74>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000cd4:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <MX_SPI2_Init+0x74>)
 8000cd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cda:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <MX_SPI2_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d1c <MX_SPI2_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <MX_SPI2_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cee:	4b0b      	ldr	r3, [pc, #44]	@ (8000d1c <MX_SPI2_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000cf4:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <MX_SPI2_Init+0x74>)
 8000cf6:	2207      	movs	r2, #7
 8000cf8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cfa:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <MX_SPI2_Init+0x74>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d00:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <MX_SPI2_Init+0x74>)
 8000d02:	2208      	movs	r2, #8
 8000d04:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d06:	4805      	ldr	r0, [pc, #20]	@ (8000d1c <MX_SPI2_Init+0x74>)
 8000d08:	f006 f96d 	bl	8006fe6 <HAL_SPI_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000d12:	f000 fb63 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000360 	.word	0x20000360
 8000d20:	40003800 	.word	0x40003800

08000d24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b096      	sub	sp, #88	@ 0x58
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d2a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d36:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]
 8000d46:	615a      	str	r2, [r3, #20]
 8000d48:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	222c      	movs	r2, #44	@ 0x2c
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f00d f931 	bl	800dfb8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d56:	4b39      	ldr	r3, [pc, #228]	@ (8000e3c <MX_TIM1_Init+0x118>)
 8000d58:	4a39      	ldr	r2, [pc, #228]	@ (8000e40 <MX_TIM1_Init+0x11c>)
 8000d5a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d5c:	4b37      	ldr	r3, [pc, #220]	@ (8000e3c <MX_TIM1_Init+0x118>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d62:	4b36      	ldr	r3, [pc, #216]	@ (8000e3c <MX_TIM1_Init+0x118>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d68:	4b34      	ldr	r3, [pc, #208]	@ (8000e3c <MX_TIM1_Init+0x118>)
 8000d6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d6e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d70:	4b32      	ldr	r3, [pc, #200]	@ (8000e3c <MX_TIM1_Init+0x118>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d76:	4b31      	ldr	r3, [pc, #196]	@ (8000e3c <MX_TIM1_Init+0x118>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d7c:	4b2f      	ldr	r3, [pc, #188]	@ (8000e3c <MX_TIM1_Init+0x118>)
 8000d7e:	2280      	movs	r2, #128	@ 0x80
 8000d80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d82:	482e      	ldr	r0, [pc, #184]	@ (8000e3c <MX_TIM1_Init+0x118>)
 8000d84:	f006 fa31 	bl	80071ea <HAL_TIM_PWM_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000d8e:	f000 fb25 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d92:	2300      	movs	r3, #0
 8000d94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d96:	2300      	movs	r3, #0
 8000d98:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d9e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000da2:	4619      	mov	r1, r3
 8000da4:	4825      	ldr	r0, [pc, #148]	@ (8000e3c <MX_TIM1_Init+0x118>)
 8000da6:	f006 fff9 	bl	8007d9c <HAL_TIMEx_MasterConfigSynchronization>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000db0:	f000 fb14 	bl	80013dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000db4:	2360      	movs	r3, #96	@ 0x60
 8000db6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dd0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4818      	ldr	r0, [pc, #96]	@ (8000e3c <MX_TIM1_Init+0x118>)
 8000dda:	f006 fa5d 	bl	8007298 <HAL_TIM_PWM_ConfigChannel>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000de4:	f000 fafa 	bl	80013dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dfc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e00:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4807      	ldr	r0, [pc, #28]	@ (8000e3c <MX_TIM1_Init+0x118>)
 8000e1e:	f007 f84b 	bl	8007eb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000e28:	f000 fad8 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e2c:	4803      	ldr	r0, [pc, #12]	@ (8000e3c <MX_TIM1_Init+0x118>)
 8000e2e:	f000 fd3d 	bl	80018ac <HAL_TIM_MspPostInit>

}
 8000e32:	bf00      	nop
 8000e34:	3758      	adds	r7, #88	@ 0x58
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200003c4 	.word	0x200003c4
 8000e40:	40010000 	.word	0x40010000

08000e44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b088      	sub	sp, #32
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e4a:	f107 0310 	add.w	r3, r7, #16
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e62:	4b1e      	ldr	r3, [pc, #120]	@ (8000edc <MX_TIM2_Init+0x98>)
 8000e64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8000e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000edc <MX_TIM2_Init+0x98>)
 8000e6c:	226b      	movs	r2, #107	@ 0x6b
 8000e6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e70:	4b1a      	ldr	r3, [pc, #104]	@ (8000edc <MX_TIM2_Init+0x98>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e76:	4b19      	ldr	r3, [pc, #100]	@ (8000edc <MX_TIM2_Init+0x98>)
 8000e78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7e:	4b17      	ldr	r3, [pc, #92]	@ (8000edc <MX_TIM2_Init+0x98>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e84:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <MX_TIM2_Init+0x98>)
 8000e86:	2280      	movs	r2, #128	@ 0x80
 8000e88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e8a:	4814      	ldr	r0, [pc, #80]	@ (8000edc <MX_TIM2_Init+0x98>)
 8000e8c:	f006 f956 	bl	800713c <HAL_TIM_Base_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e96:	f000 faa1 	bl	80013dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ea0:	f107 0310 	add.w	r3, r7, #16
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480d      	ldr	r0, [pc, #52]	@ (8000edc <MX_TIM2_Init+0x98>)
 8000ea8:	f006 fb0a 	bl	80074c0 <HAL_TIM_ConfigClockSource>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000eb2:	f000 fa93 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4806      	ldr	r0, [pc, #24]	@ (8000edc <MX_TIM2_Init+0x98>)
 8000ec4:	f006 ff6a 	bl	8007d9c <HAL_TIMEx_MasterConfigSynchronization>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ece:	f000 fa85 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	3720      	adds	r7, #32
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000410 	.word	0x20000410

08000ee0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ef0:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <MX_TIM6_Init+0x64>)
 8000ef2:	4a15      	ldr	r2, [pc, #84]	@ (8000f48 <MX_TIM6_Init+0x68>)
 8000ef4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000ef6:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <MX_TIM6_Init+0x64>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efc:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <MX_TIM6_Init+0x64>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000f02:	4b10      	ldr	r3, [pc, #64]	@ (8000f44 <MX_TIM6_Init+0x64>)
 8000f04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f08:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <MX_TIM6_Init+0x64>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f10:	480c      	ldr	r0, [pc, #48]	@ (8000f44 <MX_TIM6_Init+0x64>)
 8000f12:	f006 f913 	bl	800713c <HAL_TIM_Base_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f1c:	f000 fa5e 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f20:	2300      	movs	r3, #0
 8000f22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <MX_TIM6_Init+0x64>)
 8000f2e:	f006 ff35 	bl	8007d9c <HAL_TIMEx_MasterConfigSynchronization>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000f38:	f000 fa50 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2000045c 	.word	0x2000045c
 8000f48:	40001000 	.word	0x40001000

08000f4c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f50:	4b14      	ldr	r3, [pc, #80]	@ (8000fa4 <MX_UART4_Init+0x58>)
 8000f52:	4a15      	ldr	r2, [pc, #84]	@ (8000fa8 <MX_UART4_Init+0x5c>)
 8000f54:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000f56:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <MX_UART4_Init+0x58>)
 8000f58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f5c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <MX_UART4_Init+0x58>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <MX_UART4_Init+0x58>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa4 <MX_UART4_Init+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <MX_UART4_Init+0x58>)
 8000f72:	220c      	movs	r2, #12
 8000f74:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f76:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa4 <MX_UART4_Init+0x58>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <MX_UART4_Init+0x58>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f82:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <MX_UART4_Init+0x58>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <MX_UART4_Init+0x58>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f8e:	4805      	ldr	r0, [pc, #20]	@ (8000fa4 <MX_UART4_Init+0x58>)
 8000f90:	f007 f810 	bl	8007fb4 <HAL_UART_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000f9a:	f000 fa1f 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000508 	.word	0x20000508
 8000fa8:	40004c00 	.word	0x40004c00

08000fac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fb0:	4b14      	ldr	r3, [pc, #80]	@ (8001004 <MX_USART1_UART_Init+0x58>)
 8000fb2:	4a15      	ldr	r2, [pc, #84]	@ (8001008 <MX_USART1_UART_Init+0x5c>)
 8000fb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fb6:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <MX_USART1_UART_Init+0x58>)
 8000fb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <MX_USART1_UART_Init+0x58>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001004 <MX_USART1_UART_Init+0x58>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <MX_USART1_UART_Init+0x58>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <MX_USART1_UART_Init+0x58>)
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <MX_USART1_UART_Init+0x58>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fdc:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <MX_USART1_UART_Init+0x58>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fe2:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <MX_USART1_UART_Init+0x58>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <MX_USART1_UART_Init+0x58>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fee:	4805      	ldr	r0, [pc, #20]	@ (8001004 <MX_USART1_UART_Init+0x58>)
 8000ff0:	f006 ffe0 	bl	8007fb4 <HAL_UART_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ffa:	f000 f9ef 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000590 	.word	0x20000590
 8001008:	40011000 	.word	0x40011000

0800100c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001010:	4b14      	ldr	r3, [pc, #80]	@ (8001064 <MX_USART2_UART_Init+0x58>)
 8001012:	4a15      	ldr	r2, [pc, #84]	@ (8001068 <MX_USART2_UART_Init+0x5c>)
 8001014:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001016:	4b13      	ldr	r3, [pc, #76]	@ (8001064 <MX_USART2_UART_Init+0x58>)
 8001018:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800101c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800101e:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <MX_USART2_UART_Init+0x58>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001024:	4b0f      	ldr	r3, [pc, #60]	@ (8001064 <MX_USART2_UART_Init+0x58>)
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800102a:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <MX_USART2_UART_Init+0x58>)
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001030:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <MX_USART2_UART_Init+0x58>)
 8001032:	220c      	movs	r2, #12
 8001034:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001036:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <MX_USART2_UART_Init+0x58>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800103c:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <MX_USART2_UART_Init+0x58>)
 800103e:	2200      	movs	r2, #0
 8001040:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001042:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <MX_USART2_UART_Init+0x58>)
 8001044:	2200      	movs	r2, #0
 8001046:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <MX_USART2_UART_Init+0x58>)
 800104a:	2200      	movs	r2, #0
 800104c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800104e:	4805      	ldr	r0, [pc, #20]	@ (8001064 <MX_USART2_UART_Init+0x58>)
 8001050:	f006 ffb0 	bl	8007fb4 <HAL_UART_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800105a:	f000 f9bf 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000618 	.word	0x20000618
 8001068:	40004400 	.word	0x40004400

0800106c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001070:	4b14      	ldr	r3, [pc, #80]	@ (80010c4 <MX_USART3_UART_Init+0x58>)
 8001072:	4a15      	ldr	r2, [pc, #84]	@ (80010c8 <MX_USART3_UART_Init+0x5c>)
 8001074:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001076:	4b13      	ldr	r3, [pc, #76]	@ (80010c4 <MX_USART3_UART_Init+0x58>)
 8001078:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800107c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800107e:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <MX_USART3_UART_Init+0x58>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001084:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <MX_USART3_UART_Init+0x58>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800108a:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <MX_USART3_UART_Init+0x58>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001090:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <MX_USART3_UART_Init+0x58>)
 8001092:	220c      	movs	r2, #12
 8001094:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001096:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <MX_USART3_UART_Init+0x58>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800109c:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <MX_USART3_UART_Init+0x58>)
 800109e:	2200      	movs	r2, #0
 80010a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010a2:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <MX_USART3_UART_Init+0x58>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <MX_USART3_UART_Init+0x58>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010ae:	4805      	ldr	r0, [pc, #20]	@ (80010c4 <MX_USART3_UART_Init+0x58>)
 80010b0:	f006 ff80 	bl	8007fb4 <HAL_UART_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80010ba:	f000 f98f 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200006a0 	.word	0x200006a0
 80010c8:	40004800 	.word	0x40004800

080010cc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80010d0:	4b14      	ldr	r3, [pc, #80]	@ (8001124 <MX_USART6_UART_Init+0x58>)
 80010d2:	4a15      	ldr	r2, [pc, #84]	@ (8001128 <MX_USART6_UART_Init+0x5c>)
 80010d4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80010d6:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <MX_USART6_UART_Init+0x58>)
 80010d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010dc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80010de:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <MX_USART6_UART_Init+0x58>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <MX_USART6_UART_Init+0x58>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <MX_USART6_UART_Init+0x58>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <MX_USART6_UART_Init+0x58>)
 80010f2:	220c      	movs	r2, #12
 80010f4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <MX_USART6_UART_Init+0x58>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80010fc:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <MX_USART6_UART_Init+0x58>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001102:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <MX_USART6_UART_Init+0x58>)
 8001104:	2200      	movs	r2, #0
 8001106:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001108:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <MX_USART6_UART_Init+0x58>)
 800110a:	2200      	movs	r2, #0
 800110c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800110e:	4805      	ldr	r0, [pc, #20]	@ (8001124 <MX_USART6_UART_Init+0x58>)
 8001110:	f006 ff50 	bl	8007fb4 <HAL_UART_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800111a:	f000 f95f 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000728 	.word	0x20000728
 8001128:	40011400 	.word	0x40011400

0800112c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001132:	4b2a      	ldr	r3, [pc, #168]	@ (80011dc <MX_DMA_Init+0xb0>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	4a29      	ldr	r2, [pc, #164]	@ (80011dc <MX_DMA_Init+0xb0>)
 8001138:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800113c:	6313      	str	r3, [r2, #48]	@ 0x30
 800113e:	4b27      	ldr	r3, [pc, #156]	@ (80011dc <MX_DMA_Init+0xb0>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800114a:	4b24      	ldr	r3, [pc, #144]	@ (80011dc <MX_DMA_Init+0xb0>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	4a23      	ldr	r2, [pc, #140]	@ (80011dc <MX_DMA_Init+0xb0>)
 8001150:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001154:	6313      	str	r3, [r2, #48]	@ 0x30
 8001156:	4b21      	ldr	r3, [pc, #132]	@ (80011dc <MX_DMA_Init+0xb0>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	200c      	movs	r0, #12
 8001168:	f001 fb69 	bl	800283e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800116c:	200c      	movs	r0, #12
 800116e:	f001 fb82 	bl	8002876 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	2100      	movs	r1, #0
 8001176:	200d      	movs	r0, #13
 8001178:	f001 fb61 	bl	800283e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800117c:	200d      	movs	r0, #13
 800117e:	f001 fb7a 	bl	8002876 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	2010      	movs	r0, #16
 8001188:	f001 fb59 	bl	800283e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800118c:	2010      	movs	r0, #16
 800118e:	f001 fb72 	bl	8002876 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	2039      	movs	r0, #57	@ 0x39
 8001198:	f001 fb51 	bl	800283e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800119c:	2039      	movs	r0, #57	@ 0x39
 800119e:	f001 fb6a 	bl	8002876 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2100      	movs	r1, #0
 80011a6:	203a      	movs	r0, #58	@ 0x3a
 80011a8:	f001 fb49 	bl	800283e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80011ac:	203a      	movs	r0, #58	@ 0x3a
 80011ae:	f001 fb62 	bl	8002876 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2100      	movs	r1, #0
 80011b6:	203b      	movs	r0, #59	@ 0x3b
 80011b8:	f001 fb41 	bl	800283e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80011bc:	203b      	movs	r0, #59	@ 0x3b
 80011be:	f001 fb5a 	bl	8002876 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	2046      	movs	r0, #70	@ 0x46
 80011c8:	f001 fb39 	bl	800283e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80011cc:	2046      	movs	r0, #70	@ 0x46
 80011ce:	f001 fb52 	bl	8002876 <HAL_NVIC_EnableIRQ>

}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800

080011e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	@ 0x28
 80011e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001374 <MX_GPIO_Init+0x194>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a5e      	ldr	r2, [pc, #376]	@ (8001374 <MX_GPIO_Init+0x194>)
 80011fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b5c      	ldr	r3, [pc, #368]	@ (8001374 <MX_GPIO_Init+0x194>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800120e:	4b59      	ldr	r3, [pc, #356]	@ (8001374 <MX_GPIO_Init+0x194>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a58      	ldr	r2, [pc, #352]	@ (8001374 <MX_GPIO_Init+0x194>)
 8001214:	f043 0304 	orr.w	r3, r3, #4
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b56      	ldr	r3, [pc, #344]	@ (8001374 <MX_GPIO_Init+0x194>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	4b53      	ldr	r3, [pc, #332]	@ (8001374 <MX_GPIO_Init+0x194>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	4a52      	ldr	r2, [pc, #328]	@ (8001374 <MX_GPIO_Init+0x194>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6313      	str	r3, [r2, #48]	@ 0x30
 8001232:	4b50      	ldr	r3, [pc, #320]	@ (8001374 <MX_GPIO_Init+0x194>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	4b4d      	ldr	r3, [pc, #308]	@ (8001374 <MX_GPIO_Init+0x194>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	4a4c      	ldr	r2, [pc, #304]	@ (8001374 <MX_GPIO_Init+0x194>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	6313      	str	r3, [r2, #48]	@ 0x30
 800124a:	4b4a      	ldr	r3, [pc, #296]	@ (8001374 <MX_GPIO_Init+0x194>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001256:	4b47      	ldr	r3, [pc, #284]	@ (8001374 <MX_GPIO_Init+0x194>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a46      	ldr	r2, [pc, #280]	@ (8001374 <MX_GPIO_Init+0x194>)
 800125c:	f043 0308 	orr.w	r3, r3, #8
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
 8001262:	4b44      	ldr	r3, [pc, #272]	@ (8001374 <MX_GPIO_Init+0x194>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_R_GPIO_Port, RGB_R_Pin, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	2108      	movs	r1, #8
 8001272:	4841      	ldr	r0, [pc, #260]	@ (8001378 <MX_GPIO_Init+0x198>)
 8001274:	f002 f8be 	bl	80033f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BARO_CS_GPIO_Port, BARO_CS_Pin, GPIO_PIN_SET);
 8001278:	2201      	movs	r2, #1
 800127a:	2110      	movs	r1, #16
 800127c:	483e      	ldr	r0, [pc, #248]	@ (8001378 <MX_GPIO_Init+0x198>)
 800127e:	f002 f8b9 	bl	80033f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GYRO_CS_Pin|ACCEL_CS_Pin|CS_EXT_3_Pin|CS_EXT_2_Pin
 8001282:	2201      	movs	r2, #1
 8001284:	213b      	movs	r1, #59	@ 0x3b
 8001286:	483d      	ldr	r0, [pc, #244]	@ (800137c <MX_GPIO_Init+0x19c>)
 8001288:	f002 f8b4 	bl	80033f4 <HAL_GPIO_WritePin>
                          |CS_EXT_1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SERVO1_Pin|SERVO2_Pin|SERVO3_Pin|SERVO4_Pin
 800128c:	2200      	movs	r2, #0
 800128e:	f24d 3104 	movw	r1, #54020	@ 0xd304
 8001292:	483a      	ldr	r0, [pc, #232]	@ (800137c <MX_GPIO_Init+0x19c>)
 8001294:	f002 f8ae 	bl	80033f4 <HAL_GPIO_WritePin>
                          |RGB_B_Pin|RGB_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SERVO7_Pin|SEVO5_Pin|SERVO6_Pin, GPIO_PIN_RESET);
 8001298:	2200      	movs	r2, #0
 800129a:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800129e:	4838      	ldr	r0, [pc, #224]	@ (8001380 <MX_GPIO_Init+0x1a0>)
 80012a0:	f002 f8a8 	bl	80033f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RGB_R_Pin */
  GPIO_InitStruct.Pin = RGB_R_Pin;
 80012a4:	2308      	movs	r3, #8
 80012a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RGB_R_GPIO_Port, &GPIO_InitStruct);
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	4619      	mov	r1, r3
 80012ba:	482f      	ldr	r0, [pc, #188]	@ (8001378 <MX_GPIO_Init+0x198>)
 80012bc:	f001 fee6 	bl	800308c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CD_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 80012c0:	2310      	movs	r3, #16
 80012c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	4619      	mov	r1, r3
 80012d2:	482b      	ldr	r0, [pc, #172]	@ (8001380 <MX_GPIO_Init+0x1a0>)
 80012d4:	f001 feda 	bl	800308c <HAL_GPIO_Init>

  /*Configure GPIO pin : BARO_CS_Pin */
  GPIO_InitStruct.Pin = BARO_CS_Pin;
 80012d8:	2310      	movs	r3, #16
 80012da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012dc:	2301      	movs	r3, #1
 80012de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BARO_CS_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4619      	mov	r1, r3
 80012ee:	4822      	ldr	r0, [pc, #136]	@ (8001378 <MX_GPIO_Init+0x198>)
 80012f0:	f001 fecc 	bl	800308c <HAL_GPIO_Init>

  /*Configure GPIO pins : GYRO_CS_Pin ACCEL_CS_Pin CS_EXT_3_Pin CS_EXT_2_Pin
                           CS_EXT_1_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin|ACCEL_CS_Pin|CS_EXT_3_Pin|CS_EXT_2_Pin
 80012f4:	233b      	movs	r3, #59	@ 0x3b
 80012f6:	617b      	str	r3, [r7, #20]
                          |CS_EXT_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012fc:	2301      	movs	r3, #1
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	481c      	ldr	r0, [pc, #112]	@ (800137c <MX_GPIO_Init+0x19c>)
 800130c:	f001 febe 	bl	800308c <HAL_GPIO_Init>

  /*Configure GPIO pins : SERVO1_Pin SERVO2_Pin SERVO3_Pin SERVO4_Pin */
  GPIO_InitStruct.Pin = SERVO1_Pin|SERVO2_Pin|SERVO3_Pin|SERVO4_Pin;
 8001310:	f24d 0304 	movw	r3, #53252	@ 0xd004
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001316:	2301      	movs	r3, #1
 8001318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	4814      	ldr	r0, [pc, #80]	@ (800137c <MX_GPIO_Init+0x19c>)
 800132a:	f001 feaf 	bl	800308c <HAL_GPIO_Init>

  /*Configure GPIO pins : SERVO7_Pin SEVO5_Pin SERVO6_Pin */
  GPIO_InitStruct.Pin = SERVO7_Pin|SEVO5_Pin|SERVO6_Pin;
 800132e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001334:	2301      	movs	r3, #1
 8001336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133c:	2303      	movs	r3, #3
 800133e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	480e      	ldr	r0, [pc, #56]	@ (8001380 <MX_GPIO_Init+0x1a0>)
 8001348:	f001 fea0 	bl	800308c <HAL_GPIO_Init>

  /*Configure GPIO pins : RGB_B_Pin RGB_G_Pin */
  GPIO_InitStruct.Pin = RGB_B_Pin|RGB_G_Pin;
 800134c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	4805      	ldr	r0, [pc, #20]	@ (800137c <MX_GPIO_Init+0x19c>)
 8001366:	f001 fe91 	bl	800308c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800136a:	bf00      	nop
 800136c:	3728      	adds	r7, #40	@ 0x28
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800
 8001378:	40020800 	.word	0x40020800
 800137c:	40020400 	.word	0x40020400
 8001380:	40020000 	.word	0x40020000

08001384 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800138a:	463b      	mov	r3, r7
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001396:	f001 fa89 	bl	80028ac <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800139a:	2301      	movs	r3, #1
 800139c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800139e:	2300      	movs	r3, #0
 80013a0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80013a6:	231f      	movs	r3, #31
 80013a8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80013aa:	2387      	movs	r3, #135	@ 0x87
 80013ac:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80013b2:	2300      	movs	r3, #0
 80013b4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80013b6:	2301      	movs	r3, #1
 80013b8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80013ba:	2301      	movs	r3, #1
 80013bc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80013c6:	463b      	mov	r3, r7
 80013c8:	4618      	mov	r0, r3
 80013ca:	f001 faa7 	bl	800291c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80013ce:	2004      	movs	r0, #4
 80013d0:	f001 fa84 	bl	80028dc <HAL_MPU_Enable>

}
 80013d4:	bf00      	nop
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e0:	b672      	cpsid	i
}
 80013e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <Error_Handler+0x8>

080013e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013ee:	4b0f      	ldr	r3, [pc, #60]	@ (800142c <HAL_MspInit+0x44>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f2:	4a0e      	ldr	r2, [pc, #56]	@ (800142c <HAL_MspInit+0x44>)
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013fa:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <HAL_MspInit+0x44>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001406:	4b09      	ldr	r3, [pc, #36]	@ (800142c <HAL_MspInit+0x44>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140a:	4a08      	ldr	r2, [pc, #32]	@ (800142c <HAL_MspInit+0x44>)
 800140c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001410:	6453      	str	r3, [r2, #68]	@ 0x44
 8001412:	4b06      	ldr	r3, [pc, #24]	@ (800142c <HAL_MspInit+0x44>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001416:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800

08001430 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	@ 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a15      	ldr	r2, [pc, #84]	@ (80014a4 <HAL_ADC_MspInit+0x74>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d123      	bne.n	800149a <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001452:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <HAL_ADC_MspInit+0x78>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001456:	4a14      	ldr	r2, [pc, #80]	@ (80014a8 <HAL_ADC_MspInit+0x78>)
 8001458:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800145c:	6453      	str	r3, [r2, #68]	@ 0x44
 800145e:	4b12      	ldr	r3, [pc, #72]	@ (80014a8 <HAL_ADC_MspInit+0x78>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800146a:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <HAL_ADC_MspInit+0x78>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	4a0e      	ldr	r2, [pc, #56]	@ (80014a8 <HAL_ADC_MspInit+0x78>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	6313      	str	r3, [r2, #48]	@ 0x30
 8001476:	4b0c      	ldr	r3, [pc, #48]	@ (80014a8 <HAL_ADC_MspInit+0x78>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = VBAT_SENSE_Pin;
 8001482:	2301      	movs	r3, #1
 8001484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001486:	2303      	movs	r3, #3
 8001488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBAT_SENSE_GPIO_Port, &GPIO_InitStruct);
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	4619      	mov	r1, r3
 8001494:	4805      	ldr	r0, [pc, #20]	@ (80014ac <HAL_ADC_MspInit+0x7c>)
 8001496:	f001 fdf9 	bl	800308c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800149a:	bf00      	nop
 800149c:	3728      	adds	r7, #40	@ 0x28
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40012000 	.word	0x40012000
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40020800 	.word	0x40020800

080014b0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b0aa      	sub	sp, #168	@ 0xa8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	2280      	movs	r2, #128	@ 0x80
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f00c fd71 	bl	800dfb8 <memset>
  if(hi2c->Instance==I2C1)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a21      	ldr	r2, [pc, #132]	@ (8001560 <HAL_I2C_MspInit+0xb0>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d13b      	bne.n	8001558 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014e4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014e6:	2300      	movs	r3, #0
 80014e8:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	4618      	mov	r0, r3
 80014f0:	f004 f89c 	bl	800562c <HAL_RCCEx_PeriphCLKConfig>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80014fa:	f7ff ff6f 	bl	80013dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fe:	4b19      	ldr	r3, [pc, #100]	@ (8001564 <HAL_I2C_MspInit+0xb4>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	4a18      	ldr	r2, [pc, #96]	@ (8001564 <HAL_I2C_MspInit+0xb4>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	6313      	str	r3, [r2, #48]	@ 0x30
 800150a:	4b16      	ldr	r3, [pc, #88]	@ (8001564 <HAL_I2C_MspInit+0xb4>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001516:	23c0      	movs	r3, #192	@ 0xc0
 8001518:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800151c:	2312      	movs	r3, #18
 800151e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001528:	2303      	movs	r3, #3
 800152a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800152e:	2304      	movs	r3, #4
 8001530:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001534:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001538:	4619      	mov	r1, r3
 800153a:	480b      	ldr	r0, [pc, #44]	@ (8001568 <HAL_I2C_MspInit+0xb8>)
 800153c:	f001 fda6 	bl	800308c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001540:	4b08      	ldr	r3, [pc, #32]	@ (8001564 <HAL_I2C_MspInit+0xb4>)
 8001542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001544:	4a07      	ldr	r2, [pc, #28]	@ (8001564 <HAL_I2C_MspInit+0xb4>)
 8001546:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800154a:	6413      	str	r3, [r2, #64]	@ 0x40
 800154c:	4b05      	ldr	r3, [pc, #20]	@ (8001564 <HAL_I2C_MspInit+0xb4>)
 800154e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001550:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001558:	bf00      	nop
 800155a:	37a8      	adds	r7, #168	@ 0xa8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40005400 	.word	0x40005400
 8001564:	40023800 	.word	0x40023800
 8001568:	40020400 	.word	0x40020400

0800156c <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b0aa      	sub	sp, #168	@ 0xa8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	2280      	movs	r2, #128	@ 0x80
 800158a:	2100      	movs	r1, #0
 800158c:	4618      	mov	r0, r3
 800158e:	f00c fd13 	bl	800dfb8 <memset>
  if(hsd->Instance==SDMMC1)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a34      	ldr	r2, [pc, #208]	@ (8001668 <HAL_SD_MspInit+0xfc>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d161      	bne.n	8001660 <HAL_SD_MspInit+0xf4>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 800159c:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 80015a0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4618      	mov	r0, r3
 80015b4:	f004 f83a 	bl	800562c <HAL_RCCEx_PeriphCLKConfig>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 80015be:	f7ff ff0d 	bl	80013dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80015c2:	4b2a      	ldr	r3, [pc, #168]	@ (800166c <HAL_SD_MspInit+0x100>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c6:	4a29      	ldr	r2, [pc, #164]	@ (800166c <HAL_SD_MspInit+0x100>)
 80015c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ce:	4b27      	ldr	r3, [pc, #156]	@ (800166c <HAL_SD_MspInit+0x100>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015da:	4b24      	ldr	r3, [pc, #144]	@ (800166c <HAL_SD_MspInit+0x100>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	4a23      	ldr	r2, [pc, #140]	@ (800166c <HAL_SD_MspInit+0x100>)
 80015e0:	f043 0304 	orr.w	r3, r3, #4
 80015e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e6:	4b21      	ldr	r3, [pc, #132]	@ (800166c <HAL_SD_MspInit+0x100>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	f003 0304 	and.w	r3, r3, #4
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f2:	4b1e      	ldr	r3, [pc, #120]	@ (800166c <HAL_SD_MspInit+0x100>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	4a1d      	ldr	r2, [pc, #116]	@ (800166c <HAL_SD_MspInit+0x100>)
 80015f8:	f043 0308 	orr.w	r3, r3, #8
 80015fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fe:	4b1b      	ldr	r3, [pc, #108]	@ (800166c <HAL_SD_MspInit+0x100>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800160a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800160e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001624:	230c      	movs	r3, #12
 8001626:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800162e:	4619      	mov	r1, r3
 8001630:	480f      	ldr	r0, [pc, #60]	@ (8001670 <HAL_SD_MspInit+0x104>)
 8001632:	f001 fd2b 	bl	800308c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001636:	2304      	movs	r3, #4
 8001638:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001648:	2303      	movs	r3, #3
 800164a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800164e:	230c      	movs	r3, #12
 8001650:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001654:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001658:	4619      	mov	r1, r3
 800165a:	4806      	ldr	r0, [pc, #24]	@ (8001674 <HAL_SD_MspInit+0x108>)
 800165c:	f001 fd16 	bl	800308c <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8001660:	bf00      	nop
 8001662:	37a8      	adds	r7, #168	@ 0xa8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40012c00 	.word	0x40012c00
 800166c:	40023800 	.word	0x40023800
 8001670:	40020800 	.word	0x40020800
 8001674:	40020c00 	.word	0x40020c00

08001678 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08c      	sub	sp, #48	@ 0x30
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 031c 	add.w	r3, r7, #28
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a3c      	ldr	r2, [pc, #240]	@ (8001788 <HAL_SPI_MspInit+0x110>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d128      	bne.n	80016ec <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800169a:	4b3c      	ldr	r3, [pc, #240]	@ (800178c <HAL_SPI_MspInit+0x114>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169e:	4a3b      	ldr	r2, [pc, #236]	@ (800178c <HAL_SPI_MspInit+0x114>)
 80016a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016a6:	4b39      	ldr	r3, [pc, #228]	@ (800178c <HAL_SPI_MspInit+0x114>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016ae:	61bb      	str	r3, [r7, #24]
 80016b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b2:	4b36      	ldr	r3, [pc, #216]	@ (800178c <HAL_SPI_MspInit+0x114>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	4a35      	ldr	r2, [pc, #212]	@ (800178c <HAL_SPI_MspInit+0x114>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016be:	4b33      	ldr	r3, [pc, #204]	@ (800178c <HAL_SPI_MspInit+0x114>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80016ca:	23e0      	movs	r3, #224	@ 0xe0
 80016cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d6:	2303      	movs	r3, #3
 80016d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016da:	2305      	movs	r3, #5
 80016dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	f107 031c 	add.w	r3, r7, #28
 80016e2:	4619      	mov	r1, r3
 80016e4:	482a      	ldr	r0, [pc, #168]	@ (8001790 <HAL_SPI_MspInit+0x118>)
 80016e6:	f001 fcd1 	bl	800308c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 80016ea:	e049      	b.n	8001780 <HAL_SPI_MspInit+0x108>
  else if(hspi->Instance==SPI2)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a28      	ldr	r2, [pc, #160]	@ (8001794 <HAL_SPI_MspInit+0x11c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d144      	bne.n	8001780 <HAL_SPI_MspInit+0x108>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016f6:	4b25      	ldr	r3, [pc, #148]	@ (800178c <HAL_SPI_MspInit+0x114>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	4a24      	ldr	r2, [pc, #144]	@ (800178c <HAL_SPI_MspInit+0x114>)
 80016fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001700:	6413      	str	r3, [r2, #64]	@ 0x40
 8001702:	4b22      	ldr	r3, [pc, #136]	@ (800178c <HAL_SPI_MspInit+0x114>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001706:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800170e:	4b1f      	ldr	r3, [pc, #124]	@ (800178c <HAL_SPI_MspInit+0x114>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	4a1e      	ldr	r2, [pc, #120]	@ (800178c <HAL_SPI_MspInit+0x114>)
 8001714:	f043 0304 	orr.w	r3, r3, #4
 8001718:	6313      	str	r3, [r2, #48]	@ 0x30
 800171a:	4b1c      	ldr	r3, [pc, #112]	@ (800178c <HAL_SPI_MspInit+0x114>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	f003 0304 	and.w	r3, r3, #4
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001726:	4b19      	ldr	r3, [pc, #100]	@ (800178c <HAL_SPI_MspInit+0x114>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	4a18      	ldr	r2, [pc, #96]	@ (800178c <HAL_SPI_MspInit+0x114>)
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	6313      	str	r3, [r2, #48]	@ 0x30
 8001732:	4b16      	ldr	r3, [pc, #88]	@ (800178c <HAL_SPI_MspInit+0x114>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800173e:	2306      	movs	r3, #6
 8001740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001742:	2302      	movs	r3, #2
 8001744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174a:	2303      	movs	r3, #3
 800174c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800174e:	2305      	movs	r3, #5
 8001750:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001752:	f107 031c 	add.w	r3, r7, #28
 8001756:	4619      	mov	r1, r3
 8001758:	480f      	ldr	r0, [pc, #60]	@ (8001798 <HAL_SPI_MspInit+0x120>)
 800175a:	f001 fc97 	bl	800308c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800175e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176c:	2303      	movs	r3, #3
 800176e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001770:	2305      	movs	r3, #5
 8001772:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	4619      	mov	r1, r3
 800177a:	4808      	ldr	r0, [pc, #32]	@ (800179c <HAL_SPI_MspInit+0x124>)
 800177c:	f001 fc86 	bl	800308c <HAL_GPIO_Init>
}
 8001780:	bf00      	nop
 8001782:	3730      	adds	r7, #48	@ 0x30
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40013000 	.word	0x40013000
 800178c:	40023800 	.word	0x40023800
 8001790:	40020000 	.word	0x40020000
 8001794:	40003800 	.word	0x40003800
 8001798:	40020800 	.word	0x40020800
 800179c:	40020400 	.word	0x40020400

080017a0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a22      	ldr	r2, [pc, #136]	@ (8001838 <HAL_TIM_PWM_MspInit+0x98>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d13d      	bne.n	800182e <HAL_TIM_PWM_MspInit+0x8e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017b2:	4b22      	ldr	r3, [pc, #136]	@ (800183c <HAL_TIM_PWM_MspInit+0x9c>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b6:	4a21      	ldr	r2, [pc, #132]	@ (800183c <HAL_TIM_PWM_MspInit+0x9c>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017be:	4b1f      	ldr	r3, [pc, #124]	@ (800183c <HAL_TIM_PWM_MspInit+0x9c>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream3;
 80017ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001840 <HAL_TIM_PWM_MspInit+0xa0>)
 80017cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001844 <HAL_TIM_PWM_MspInit+0xa4>)
 80017ce:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80017d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001840 <HAL_TIM_PWM_MspInit+0xa0>)
 80017d2:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80017d6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017d8:	4b19      	ldr	r3, [pc, #100]	@ (8001840 <HAL_TIM_PWM_MspInit+0xa0>)
 80017da:	2240      	movs	r2, #64	@ 0x40
 80017dc:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017de:	4b18      	ldr	r3, [pc, #96]	@ (8001840 <HAL_TIM_PWM_MspInit+0xa0>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80017e4:	4b16      	ldr	r3, [pc, #88]	@ (8001840 <HAL_TIM_PWM_MspInit+0xa0>)
 80017e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017ea:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017ec:	4b14      	ldr	r3, [pc, #80]	@ (8001840 <HAL_TIM_PWM_MspInit+0xa0>)
 80017ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80017f2:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017f4:	4b12      	ldr	r3, [pc, #72]	@ (8001840 <HAL_TIM_PWM_MspInit+0xa0>)
 80017f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017fa:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 80017fc:	4b10      	ldr	r3, [pc, #64]	@ (8001840 <HAL_TIM_PWM_MspInit+0xa0>)
 80017fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001802:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001804:	4b0e      	ldr	r3, [pc, #56]	@ (8001840 <HAL_TIM_PWM_MspInit+0xa0>)
 8001806:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800180a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800180c:	4b0c      	ldr	r3, [pc, #48]	@ (8001840 <HAL_TIM_PWM_MspInit+0xa0>)
 800180e:	2200      	movs	r2, #0
 8001810:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001812:	480b      	ldr	r0, [pc, #44]	@ (8001840 <HAL_TIM_PWM_MspInit+0xa0>)
 8001814:	f001 f8c2 	bl	800299c <HAL_DMA_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 800181e:	f7ff fddd 	bl	80013dc <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a06      	ldr	r2, [pc, #24]	@ (8001840 <HAL_TIM_PWM_MspInit+0xa0>)
 8001826:	625a      	str	r2, [r3, #36]	@ 0x24
 8001828:	4a05      	ldr	r2, [pc, #20]	@ (8001840 <HAL_TIM_PWM_MspInit+0xa0>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40010000 	.word	0x40010000
 800183c:	40023800 	.word	0x40023800
 8001840:	200004a8 	.word	0x200004a8
 8001844:	40026458 	.word	0x40026458

08001848 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001858:	d10c      	bne.n	8001874 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800185a:	4b12      	ldr	r3, [pc, #72]	@ (80018a4 <HAL_TIM_Base_MspInit+0x5c>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	4a11      	ldr	r2, [pc, #68]	@ (80018a4 <HAL_TIM_Base_MspInit+0x5c>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6413      	str	r3, [r2, #64]	@ 0x40
 8001866:	4b0f      	ldr	r3, [pc, #60]	@ (80018a4 <HAL_TIM_Base_MspInit+0x5c>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001872:	e010      	b.n	8001896 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM6)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a0b      	ldr	r2, [pc, #44]	@ (80018a8 <HAL_TIM_Base_MspInit+0x60>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d10b      	bne.n	8001896 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800187e:	4b09      	ldr	r3, [pc, #36]	@ (80018a4 <HAL_TIM_Base_MspInit+0x5c>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001882:	4a08      	ldr	r2, [pc, #32]	@ (80018a4 <HAL_TIM_Base_MspInit+0x5c>)
 8001884:	f043 0310 	orr.w	r3, r3, #16
 8001888:	6413      	str	r3, [r2, #64]	@ 0x40
 800188a:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <HAL_TIM_Base_MspInit+0x5c>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188e:	f003 0310 	and.w	r3, r3, #16
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
}
 8001896:	bf00      	nop
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40001000 	.word	0x40001000

080018ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b088      	sub	sp, #32
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a11      	ldr	r2, [pc, #68]	@ (8001910 <HAL_TIM_MspPostInit+0x64>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d11c      	bne.n	8001908 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <HAL_TIM_MspPostInit+0x68>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	4a10      	ldr	r2, [pc, #64]	@ (8001914 <HAL_TIM_MspPostInit+0x68>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018da:	4b0e      	ldr	r3, [pc, #56]	@ (8001914 <HAL_TIM_MspPostInit+0x68>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DSHOT_PIN_Pin;
 80018e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f4:	2303      	movs	r3, #3
 80018f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018f8:	2301      	movs	r3, #1
 80018fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DSHOT_PIN_GPIO_Port, &GPIO_InitStruct);
 80018fc:	f107 030c 	add.w	r3, r7, #12
 8001900:	4619      	mov	r1, r3
 8001902:	4805      	ldr	r0, [pc, #20]	@ (8001918 <HAL_TIM_MspPostInit+0x6c>)
 8001904:	f001 fbc2 	bl	800308c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001908:	bf00      	nop
 800190a:	3720      	adds	r7, #32
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40010000 	.word	0x40010000
 8001914:	40023800 	.word	0x40023800
 8001918:	40020000 	.word	0x40020000

0800191c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b0b2      	sub	sp, #200	@ 0xc8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001934:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001938:	2280      	movs	r2, #128	@ 0x80
 800193a:	2100      	movs	r1, #0
 800193c:	4618      	mov	r0, r3
 800193e:	f00c fb3b 	bl	800dfb8 <memset>
  if(huart->Instance==UART4)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a89      	ldr	r2, [pc, #548]	@ (8001b6c <HAL_UART_MspInit+0x250>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d16b      	bne.n	8001a24 <HAL_UART_MspInit+0x108>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800194c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001950:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001952:	2300      	movs	r3, #0
 8001954:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001956:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800195a:	4618      	mov	r0, r3
 800195c:	f003 fe66 	bl	800562c <HAL_RCCEx_PeriphCLKConfig>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001966:	f7ff fd39 	bl	80013dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800196a:	4b81      	ldr	r3, [pc, #516]	@ (8001b70 <HAL_UART_MspInit+0x254>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196e:	4a80      	ldr	r2, [pc, #512]	@ (8001b70 <HAL_UART_MspInit+0x254>)
 8001970:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001974:	6413      	str	r3, [r2, #64]	@ 0x40
 8001976:	4b7e      	ldr	r3, [pc, #504]	@ (8001b70 <HAL_UART_MspInit+0x254>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800197e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001982:	4b7b      	ldr	r3, [pc, #492]	@ (8001b70 <HAL_UART_MspInit+0x254>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	4a7a      	ldr	r2, [pc, #488]	@ (8001b70 <HAL_UART_MspInit+0x254>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6313      	str	r3, [r2, #48]	@ 0x30
 800198e:	4b78      	ldr	r3, [pc, #480]	@ (8001b70 <HAL_UART_MspInit+0x254>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800199a:	2303      	movs	r3, #3
 800199c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a0:	2302      	movs	r3, #2
 80019a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ac:	2303      	movs	r3, #3
 80019ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80019b2:	2308      	movs	r3, #8
 80019b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b8:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80019bc:	4619      	mov	r1, r3
 80019be:	486d      	ldr	r0, [pc, #436]	@ (8001b74 <HAL_UART_MspInit+0x258>)
 80019c0:	f001 fb64 	bl	800308c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80019c4:	4b6c      	ldr	r3, [pc, #432]	@ (8001b78 <HAL_UART_MspInit+0x25c>)
 80019c6:	4a6d      	ldr	r2, [pc, #436]	@ (8001b7c <HAL_UART_MspInit+0x260>)
 80019c8:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80019ca:	4b6b      	ldr	r3, [pc, #428]	@ (8001b78 <HAL_UART_MspInit+0x25c>)
 80019cc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80019d0:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019d2:	4b69      	ldr	r3, [pc, #420]	@ (8001b78 <HAL_UART_MspInit+0x25c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019d8:	4b67      	ldr	r3, [pc, #412]	@ (8001b78 <HAL_UART_MspInit+0x25c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019de:	4b66      	ldr	r3, [pc, #408]	@ (8001b78 <HAL_UART_MspInit+0x25c>)
 80019e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019e4:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019e6:	4b64      	ldr	r3, [pc, #400]	@ (8001b78 <HAL_UART_MspInit+0x25c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019ec:	4b62      	ldr	r3, [pc, #392]	@ (8001b78 <HAL_UART_MspInit+0x25c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80019f2:	4b61      	ldr	r3, [pc, #388]	@ (8001b78 <HAL_UART_MspInit+0x25c>)
 80019f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019f8:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019fa:	4b5f      	ldr	r3, [pc, #380]	@ (8001b78 <HAL_UART_MspInit+0x25c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a00:	4b5d      	ldr	r3, [pc, #372]	@ (8001b78 <HAL_UART_MspInit+0x25c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001a06:	485c      	ldr	r0, [pc, #368]	@ (8001b78 <HAL_UART_MspInit+0x25c>)
 8001a08:	f000 ffc8 	bl	800299c <HAL_DMA_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001a12:	f7ff fce3 	bl	80013dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a57      	ldr	r2, [pc, #348]	@ (8001b78 <HAL_UART_MspInit+0x25c>)
 8001a1a:	675a      	str	r2, [r3, #116]	@ 0x74
 8001a1c:	4a56      	ldr	r2, [pc, #344]	@ (8001b78 <HAL_UART_MspInit+0x25c>)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8001a22:	e20a      	b.n	8001e3a <HAL_UART_MspInit+0x51e>
  else if(huart->Instance==USART1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a55      	ldr	r2, [pc, #340]	@ (8001b80 <HAL_UART_MspInit+0x264>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	f040 80b2 	bne.w	8001b94 <HAL_UART_MspInit+0x278>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a30:	2340      	movs	r3, #64	@ 0x40
 8001a32:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a34:	2300      	movs	r3, #0
 8001a36:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a38:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f003 fdf5 	bl	800562c <HAL_RCCEx_PeriphCLKConfig>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <HAL_UART_MspInit+0x130>
      Error_Handler();
 8001a48:	f7ff fcc8 	bl	80013dc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a4c:	4b48      	ldr	r3, [pc, #288]	@ (8001b70 <HAL_UART_MspInit+0x254>)
 8001a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a50:	4a47      	ldr	r2, [pc, #284]	@ (8001b70 <HAL_UART_MspInit+0x254>)
 8001a52:	f043 0310 	orr.w	r3, r3, #16
 8001a56:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a58:	4b45      	ldr	r3, [pc, #276]	@ (8001b70 <HAL_UART_MspInit+0x254>)
 8001a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a5c:	f003 0310 	and.w	r3, r3, #16
 8001a60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a64:	4b42      	ldr	r3, [pc, #264]	@ (8001b70 <HAL_UART_MspInit+0x254>)
 8001a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a68:	4a41      	ldr	r2, [pc, #260]	@ (8001b70 <HAL_UART_MspInit+0x254>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a70:	4b3f      	ldr	r3, [pc, #252]	@ (8001b70 <HAL_UART_MspInit+0x254>)
 8001a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a7c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a90:	2303      	movs	r3, #3
 8001a92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a96:	2307      	movs	r3, #7
 8001a98:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4834      	ldr	r0, [pc, #208]	@ (8001b74 <HAL_UART_MspInit+0x258>)
 8001aa4:	f001 faf2 	bl	800308c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001aa8:	4b36      	ldr	r3, [pc, #216]	@ (8001b84 <HAL_UART_MspInit+0x268>)
 8001aaa:	4a37      	ldr	r2, [pc, #220]	@ (8001b88 <HAL_UART_MspInit+0x26c>)
 8001aac:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001aae:	4b35      	ldr	r3, [pc, #212]	@ (8001b84 <HAL_UART_MspInit+0x268>)
 8001ab0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001ab4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ab6:	4b33      	ldr	r3, [pc, #204]	@ (8001b84 <HAL_UART_MspInit+0x268>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001abc:	4b31      	ldr	r3, [pc, #196]	@ (8001b84 <HAL_UART_MspInit+0x268>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ac2:	4b30      	ldr	r3, [pc, #192]	@ (8001b84 <HAL_UART_MspInit+0x268>)
 8001ac4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ac8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aca:	4b2e      	ldr	r3, [pc, #184]	@ (8001b84 <HAL_UART_MspInit+0x268>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ad0:	4b2c      	ldr	r3, [pc, #176]	@ (8001b84 <HAL_UART_MspInit+0x268>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001ad6:	4b2b      	ldr	r3, [pc, #172]	@ (8001b84 <HAL_UART_MspInit+0x268>)
 8001ad8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001adc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001ade:	4b29      	ldr	r3, [pc, #164]	@ (8001b84 <HAL_UART_MspInit+0x268>)
 8001ae0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ae4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ae6:	4b27      	ldr	r3, [pc, #156]	@ (8001b84 <HAL_UART_MspInit+0x268>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001aec:	4825      	ldr	r0, [pc, #148]	@ (8001b84 <HAL_UART_MspInit+0x268>)
 8001aee:	f000 ff55 	bl	800299c <HAL_DMA_Init>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 8001af8:	f7ff fc70 	bl	80013dc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a21      	ldr	r2, [pc, #132]	@ (8001b84 <HAL_UART_MspInit+0x268>)
 8001b00:	675a      	str	r2, [r3, #116]	@ 0x74
 8001b02:	4a20      	ldr	r2, [pc, #128]	@ (8001b84 <HAL_UART_MspInit+0x268>)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001b08:	4b20      	ldr	r3, [pc, #128]	@ (8001b8c <HAL_UART_MspInit+0x270>)
 8001b0a:	4a21      	ldr	r2, [pc, #132]	@ (8001b90 <HAL_UART_MspInit+0x274>)
 8001b0c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001b0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001b8c <HAL_UART_MspInit+0x270>)
 8001b10:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b14:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b16:	4b1d      	ldr	r3, [pc, #116]	@ (8001b8c <HAL_UART_MspInit+0x270>)
 8001b18:	2240      	movs	r2, #64	@ 0x40
 8001b1a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b8c <HAL_UART_MspInit+0x270>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b22:	4b1a      	ldr	r3, [pc, #104]	@ (8001b8c <HAL_UART_MspInit+0x270>)
 8001b24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b28:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b2a:	4b18      	ldr	r3, [pc, #96]	@ (8001b8c <HAL_UART_MspInit+0x270>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b30:	4b16      	ldr	r3, [pc, #88]	@ (8001b8c <HAL_UART_MspInit+0x270>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8001b36:	4b15      	ldr	r3, [pc, #84]	@ (8001b8c <HAL_UART_MspInit+0x270>)
 8001b38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b3c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001b3e:	4b13      	ldr	r3, [pc, #76]	@ (8001b8c <HAL_UART_MspInit+0x270>)
 8001b40:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b44:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b46:	4b11      	ldr	r3, [pc, #68]	@ (8001b8c <HAL_UART_MspInit+0x270>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001b4c:	480f      	ldr	r0, [pc, #60]	@ (8001b8c <HAL_UART_MspInit+0x270>)
 8001b4e:	f000 ff25 	bl	800299c <HAL_DMA_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_UART_MspInit+0x240>
      Error_Handler();
 8001b58:	f7ff fc40 	bl	80013dc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a0b      	ldr	r2, [pc, #44]	@ (8001b8c <HAL_UART_MspInit+0x270>)
 8001b60:	671a      	str	r2, [r3, #112]	@ 0x70
 8001b62:	4a0a      	ldr	r2, [pc, #40]	@ (8001b8c <HAL_UART_MspInit+0x270>)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001b68:	e167      	b.n	8001e3a <HAL_UART_MspInit+0x51e>
 8001b6a:	bf00      	nop
 8001b6c:	40004c00 	.word	0x40004c00
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40020000 	.word	0x40020000
 8001b78:	200007b0 	.word	0x200007b0
 8001b7c:	40026040 	.word	0x40026040
 8001b80:	40011000 	.word	0x40011000
 8001b84:	20000810 	.word	0x20000810
 8001b88:	40026440 	.word	0x40026440
 8001b8c:	20000870 	.word	0x20000870
 8001b90:	400264b8 	.word	0x400264b8
  else if(huart->Instance==USART2)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4aaa      	ldr	r2, [pc, #680]	@ (8001e44 <HAL_UART_MspInit+0x528>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d16a      	bne.n	8001c74 <HAL_UART_MspInit+0x358>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b9e:	2380      	movs	r3, #128	@ 0x80
 8001ba0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ba6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001baa:	4618      	mov	r0, r3
 8001bac:	f003 fd3e 	bl	800562c <HAL_RCCEx_PeriphCLKConfig>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_UART_MspInit+0x29e>
      Error_Handler();
 8001bb6:	f7ff fc11 	bl	80013dc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bba:	4ba3      	ldr	r3, [pc, #652]	@ (8001e48 <HAL_UART_MspInit+0x52c>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	4aa2      	ldr	r2, [pc, #648]	@ (8001e48 <HAL_UART_MspInit+0x52c>)
 8001bc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bc6:	4ba0      	ldr	r3, [pc, #640]	@ (8001e48 <HAL_UART_MspInit+0x52c>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bce:	623b      	str	r3, [r7, #32]
 8001bd0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd2:	4b9d      	ldr	r3, [pc, #628]	@ (8001e48 <HAL_UART_MspInit+0x52c>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	4a9c      	ldr	r2, [pc, #624]	@ (8001e48 <HAL_UART_MspInit+0x52c>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bde:	4b9a      	ldr	r3, [pc, #616]	@ (8001e48 <HAL_UART_MspInit+0x52c>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	61fb      	str	r3, [r7, #28]
 8001be8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bea:	230c      	movs	r3, #12
 8001bec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c02:	2307      	movs	r3, #7
 8001c04:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c08:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	488f      	ldr	r0, [pc, #572]	@ (8001e4c <HAL_UART_MspInit+0x530>)
 8001c10:	f001 fa3c 	bl	800308c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001c14:	4b8e      	ldr	r3, [pc, #568]	@ (8001e50 <HAL_UART_MspInit+0x534>)
 8001c16:	4a8f      	ldr	r2, [pc, #572]	@ (8001e54 <HAL_UART_MspInit+0x538>)
 8001c18:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001c1a:	4b8d      	ldr	r3, [pc, #564]	@ (8001e50 <HAL_UART_MspInit+0x534>)
 8001c1c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c20:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c22:	4b8b      	ldr	r3, [pc, #556]	@ (8001e50 <HAL_UART_MspInit+0x534>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c28:	4b89      	ldr	r3, [pc, #548]	@ (8001e50 <HAL_UART_MspInit+0x534>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c2e:	4b88      	ldr	r3, [pc, #544]	@ (8001e50 <HAL_UART_MspInit+0x534>)
 8001c30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c34:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c36:	4b86      	ldr	r3, [pc, #536]	@ (8001e50 <HAL_UART_MspInit+0x534>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c3c:	4b84      	ldr	r3, [pc, #528]	@ (8001e50 <HAL_UART_MspInit+0x534>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001c42:	4b83      	ldr	r3, [pc, #524]	@ (8001e50 <HAL_UART_MspInit+0x534>)
 8001c44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c48:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c4a:	4b81      	ldr	r3, [pc, #516]	@ (8001e50 <HAL_UART_MspInit+0x534>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c50:	4b7f      	ldr	r3, [pc, #508]	@ (8001e50 <HAL_UART_MspInit+0x534>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c56:	487e      	ldr	r0, [pc, #504]	@ (8001e50 <HAL_UART_MspInit+0x534>)
 8001c58:	f000 fea0 	bl	800299c <HAL_DMA_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_UART_MspInit+0x34a>
      Error_Handler();
 8001c62:	f7ff fbbb 	bl	80013dc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a79      	ldr	r2, [pc, #484]	@ (8001e50 <HAL_UART_MspInit+0x534>)
 8001c6a:	675a      	str	r2, [r3, #116]	@ 0x74
 8001c6c:	4a78      	ldr	r2, [pc, #480]	@ (8001e50 <HAL_UART_MspInit+0x534>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001c72:	e0e2      	b.n	8001e3a <HAL_UART_MspInit+0x51e>
  else if(huart->Instance==USART3)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a77      	ldr	r2, [pc, #476]	@ (8001e58 <HAL_UART_MspInit+0x53c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d16c      	bne.n	8001d58 <HAL_UART_MspInit+0x43c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c82:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c84:	2300      	movs	r3, #0
 8001c86:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c88:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f003 fccd 	bl	800562c <HAL_RCCEx_PeriphCLKConfig>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <HAL_UART_MspInit+0x380>
      Error_Handler();
 8001c98:	f7ff fba0 	bl	80013dc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c9c:	4b6a      	ldr	r3, [pc, #424]	@ (8001e48 <HAL_UART_MspInit+0x52c>)
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca0:	4a69      	ldr	r2, [pc, #420]	@ (8001e48 <HAL_UART_MspInit+0x52c>)
 8001ca2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ca6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ca8:	4b67      	ldr	r3, [pc, #412]	@ (8001e48 <HAL_UART_MspInit+0x52c>)
 8001caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb4:	4b64      	ldr	r3, [pc, #400]	@ (8001e48 <HAL_UART_MspInit+0x52c>)
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb8:	4a63      	ldr	r2, [pc, #396]	@ (8001e48 <HAL_UART_MspInit+0x52c>)
 8001cba:	f043 0302 	orr.w	r3, r3, #2
 8001cbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc0:	4b61      	ldr	r3, [pc, #388]	@ (8001e48 <HAL_UART_MspInit+0x52c>)
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ccc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001cd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ce6:	2307      	movs	r3, #7
 8001ce8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cec:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	485a      	ldr	r0, [pc, #360]	@ (8001e5c <HAL_UART_MspInit+0x540>)
 8001cf4:	f001 f9ca 	bl	800308c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001cf8:	4b59      	ldr	r3, [pc, #356]	@ (8001e60 <HAL_UART_MspInit+0x544>)
 8001cfa:	4a5a      	ldr	r2, [pc, #360]	@ (8001e64 <HAL_UART_MspInit+0x548>)
 8001cfc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001cfe:	4b58      	ldr	r3, [pc, #352]	@ (8001e60 <HAL_UART_MspInit+0x544>)
 8001d00:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d04:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d06:	4b56      	ldr	r3, [pc, #344]	@ (8001e60 <HAL_UART_MspInit+0x544>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d0c:	4b54      	ldr	r3, [pc, #336]	@ (8001e60 <HAL_UART_MspInit+0x544>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d12:	4b53      	ldr	r3, [pc, #332]	@ (8001e60 <HAL_UART_MspInit+0x544>)
 8001d14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d18:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d1a:	4b51      	ldr	r3, [pc, #324]	@ (8001e60 <HAL_UART_MspInit+0x544>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d20:	4b4f      	ldr	r3, [pc, #316]	@ (8001e60 <HAL_UART_MspInit+0x544>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001d26:	4b4e      	ldr	r3, [pc, #312]	@ (8001e60 <HAL_UART_MspInit+0x544>)
 8001d28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d2c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d2e:	4b4c      	ldr	r3, [pc, #304]	@ (8001e60 <HAL_UART_MspInit+0x544>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d34:	4b4a      	ldr	r3, [pc, #296]	@ (8001e60 <HAL_UART_MspInit+0x544>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001d3a:	4849      	ldr	r0, [pc, #292]	@ (8001e60 <HAL_UART_MspInit+0x544>)
 8001d3c:	f000 fe2e 	bl	800299c <HAL_DMA_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_UART_MspInit+0x42e>
      Error_Handler();
 8001d46:	f7ff fb49 	bl	80013dc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a44      	ldr	r2, [pc, #272]	@ (8001e60 <HAL_UART_MspInit+0x544>)
 8001d4e:	675a      	str	r2, [r3, #116]	@ 0x74
 8001d50:	4a43      	ldr	r2, [pc, #268]	@ (8001e60 <HAL_UART_MspInit+0x544>)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001d56:	e070      	b.n	8001e3a <HAL_UART_MspInit+0x51e>
  else if(huart->Instance==USART6)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a42      	ldr	r2, [pc, #264]	@ (8001e68 <HAL_UART_MspInit+0x54c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d16b      	bne.n	8001e3a <HAL_UART_MspInit+0x51e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001d62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001d66:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d6e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d72:	4618      	mov	r0, r3
 8001d74:	f003 fc5a 	bl	800562c <HAL_RCCEx_PeriphCLKConfig>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <HAL_UART_MspInit+0x466>
      Error_Handler();
 8001d7e:	f7ff fb2d 	bl	80013dc <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001d82:	4b31      	ldr	r3, [pc, #196]	@ (8001e48 <HAL_UART_MspInit+0x52c>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d86:	4a30      	ldr	r2, [pc, #192]	@ (8001e48 <HAL_UART_MspInit+0x52c>)
 8001d88:	f043 0320 	orr.w	r3, r3, #32
 8001d8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d8e:	4b2e      	ldr	r3, [pc, #184]	@ (8001e48 <HAL_UART_MspInit+0x52c>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d92:	f003 0320 	and.w	r3, r3, #32
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d9a:	4b2b      	ldr	r3, [pc, #172]	@ (8001e48 <HAL_UART_MspInit+0x52c>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	4a2a      	ldr	r2, [pc, #168]	@ (8001e48 <HAL_UART_MspInit+0x52c>)
 8001da0:	f043 0304 	orr.w	r3, r3, #4
 8001da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da6:	4b28      	ldr	r3, [pc, #160]	@ (8001e48 <HAL_UART_MspInit+0x52c>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001db2:	23c0      	movs	r3, #192	@ 0xc0
 8001db4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	2302      	movs	r3, #2
 8001dba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001dca:	2308      	movs	r3, #8
 8001dcc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4825      	ldr	r0, [pc, #148]	@ (8001e6c <HAL_UART_MspInit+0x550>)
 8001dd8:	f001 f958 	bl	800308c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001ddc:	4b24      	ldr	r3, [pc, #144]	@ (8001e70 <HAL_UART_MspInit+0x554>)
 8001dde:	4a25      	ldr	r2, [pc, #148]	@ (8001e74 <HAL_UART_MspInit+0x558>)
 8001de0:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001de2:	4b23      	ldr	r3, [pc, #140]	@ (8001e70 <HAL_UART_MspInit+0x554>)
 8001de4:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001de8:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dea:	4b21      	ldr	r3, [pc, #132]	@ (8001e70 <HAL_UART_MspInit+0x554>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001df0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e70 <HAL_UART_MspInit+0x554>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001df6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e70 <HAL_UART_MspInit+0x554>)
 8001df8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dfc:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8001e70 <HAL_UART_MspInit+0x554>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e04:	4b1a      	ldr	r3, [pc, #104]	@ (8001e70 <HAL_UART_MspInit+0x554>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8001e0a:	4b19      	ldr	r3, [pc, #100]	@ (8001e70 <HAL_UART_MspInit+0x554>)
 8001e0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e10:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e12:	4b17      	ldr	r3, [pc, #92]	@ (8001e70 <HAL_UART_MspInit+0x554>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e18:	4b15      	ldr	r3, [pc, #84]	@ (8001e70 <HAL_UART_MspInit+0x554>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001e1e:	4814      	ldr	r0, [pc, #80]	@ (8001e70 <HAL_UART_MspInit+0x554>)
 8001e20:	f000 fdbc 	bl	800299c <HAL_DMA_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_UART_MspInit+0x512>
      Error_Handler();
 8001e2a:	f7ff fad7 	bl	80013dc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a0f      	ldr	r2, [pc, #60]	@ (8001e70 <HAL_UART_MspInit+0x554>)
 8001e32:	675a      	str	r2, [r3, #116]	@ 0x74
 8001e34:	4a0e      	ldr	r2, [pc, #56]	@ (8001e70 <HAL_UART_MspInit+0x554>)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001e3a:	bf00      	nop
 8001e3c:	37c8      	adds	r7, #200	@ 0xc8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40004400 	.word	0x40004400
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40020000 	.word	0x40020000
 8001e50:	200008d0 	.word	0x200008d0
 8001e54:	40026088 	.word	0x40026088
 8001e58:	40004800 	.word	0x40004800
 8001e5c:	40020400 	.word	0x40020400
 8001e60:	20000930 	.word	0x20000930
 8001e64:	40026028 	.word	0x40026028
 8001e68:	40011400 	.word	0x40011400
 8001e6c:	40020800 	.word	0x40020800
 8001e70:	20000990 	.word	0x20000990
 8001e74:	40026428 	.word	0x40026428

08001e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001e7c:	f003 fbba 	bl	80055f4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <NMI_Handler+0x8>

08001e84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e88:	bf00      	nop
 8001e8a:	e7fd      	b.n	8001e88 <HardFault_Handler+0x4>

08001e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e90:	bf00      	nop
 8001e92:	e7fd      	b.n	8001e90 <MemManage_Handler+0x4>

08001e94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e98:	bf00      	nop
 8001e9a:	e7fd      	b.n	8001e98 <BusFault_Handler+0x4>

08001e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ea0:	bf00      	nop
 8001ea2:	e7fd      	b.n	8001ea0 <UsageFault_Handler+0x4>

08001ea4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ed2:	f000 f901 	bl	80020d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001ee0:	4802      	ldr	r0, [pc, #8]	@ (8001eec <DMA1_Stream1_IRQHandler+0x10>)
 8001ee2:	f000 fe69 	bl	8002bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000930 	.word	0x20000930

08001ef0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001ef4:	4802      	ldr	r0, [pc, #8]	@ (8001f00 <DMA1_Stream2_IRQHandler+0x10>)
 8001ef6:	f000 fe5f 	bl	8002bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	200007b0 	.word	0x200007b0

08001f04 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001f08:	4802      	ldr	r0, [pc, #8]	@ (8001f14 <DMA1_Stream5_IRQHandler+0x10>)
 8001f0a:	f000 fe55 	bl	8002bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	200008d0 	.word	0x200008d0

08001f18 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001f1c:	4802      	ldr	r0, [pc, #8]	@ (8001f28 <DMA2_Stream1_IRQHandler+0x10>)
 8001f1e:	f000 fe4b 	bl	8002bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000990 	.word	0x20000990

08001f2c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f30:	4802      	ldr	r0, [pc, #8]	@ (8001f3c <DMA2_Stream2_IRQHandler+0x10>)
 8001f32:	f000 fe41 	bl	8002bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000810 	.word	0x20000810

08001f40 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001f44:	4802      	ldr	r0, [pc, #8]	@ (8001f50 <DMA2_Stream3_IRQHandler+0x10>)
 8001f46:	f000 fe37 	bl	8002bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	200004a8 	.word	0x200004a8

08001f54 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f58:	4802      	ldr	r0, [pc, #8]	@ (8001f64 <OTG_FS_IRQHandler+0x10>)
 8001f5a:	f001 fcd0 	bl	80038fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20001eec 	.word	0x20001eec

08001f68 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001f6c:	4802      	ldr	r0, [pc, #8]	@ (8001f78 <DMA2_Stream7_IRQHandler+0x10>)
 8001f6e:	f000 fe23 	bl	8002bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000870 	.word	0x20000870

08001f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f84:	4a14      	ldr	r2, [pc, #80]	@ (8001fd8 <_sbrk+0x5c>)
 8001f86:	4b15      	ldr	r3, [pc, #84]	@ (8001fdc <_sbrk+0x60>)
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f90:	4b13      	ldr	r3, [pc, #76]	@ (8001fe0 <_sbrk+0x64>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d102      	bne.n	8001f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f98:	4b11      	ldr	r3, [pc, #68]	@ (8001fe0 <_sbrk+0x64>)
 8001f9a:	4a12      	ldr	r2, [pc, #72]	@ (8001fe4 <_sbrk+0x68>)
 8001f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f9e:	4b10      	ldr	r3, [pc, #64]	@ (8001fe0 <_sbrk+0x64>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d207      	bcs.n	8001fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fac:	f00c f81c 	bl	800dfe8 <__errno>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fba:	e009      	b.n	8001fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fbc:	4b08      	ldr	r3, [pc, #32]	@ (8001fe0 <_sbrk+0x64>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fc2:	4b07      	ldr	r3, [pc, #28]	@ (8001fe0 <_sbrk+0x64>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	4a05      	ldr	r2, [pc, #20]	@ (8001fe0 <_sbrk+0x64>)
 8001fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fce:	68fb      	ldr	r3, [r7, #12]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20040000 	.word	0x20040000
 8001fdc:	00000400 	.word	0x00000400
 8001fe0:	200009f0 	.word	0x200009f0
 8001fe4:	20002518 	.word	0x20002518

08001fe8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fec:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <SystemInit+0x20>)
 8001fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ff2:	4a05      	ldr	r2, [pc, #20]	@ (8002008 <SystemInit+0x20>)
 8001ff4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ff8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800200c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002044 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 8002010:	f7ff ffea 	bl	8001fe8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002014:	480c      	ldr	r0, [pc, #48]	@ (8002048 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002016:	490d      	ldr	r1, [pc, #52]	@ (800204c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002018:	4a0d      	ldr	r2, [pc, #52]	@ (8002050 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800201a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800201c:	e002      	b.n	8002024 <LoopCopyDataInit>

0800201e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800201e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002022:	3304      	adds	r3, #4

08002024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002028:	d3f9      	bcc.n	800201e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800202a:	4a0a      	ldr	r2, [pc, #40]	@ (8002054 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800202c:	4c0a      	ldr	r4, [pc, #40]	@ (8002058 <LoopFillZerobss+0x22>)
  movs r3, #0
 800202e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002030:	e001      	b.n	8002036 <LoopFillZerobss>

08002032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002034:	3204      	adds	r2, #4

08002036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002038:	d3fb      	bcc.n	8002032 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800203a:	f00b ffdb 	bl	800dff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800203e:	f7fe fc6b 	bl	8000918 <main>
  bx  lr    
 8002042:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002044:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800204c:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8002050:	0800e840 	.word	0x0800e840
  ldr r2, =_sbss
 8002054:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8002058:	20002514 	.word	0x20002514

0800205c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800205c:	e7fe      	b.n	800205c <ADC_IRQHandler>

0800205e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002062:	2003      	movs	r0, #3
 8002064:	f000 fbe0 	bl	8002828 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002068:	200f      	movs	r0, #15
 800206a:	f000 f805 	bl	8002078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800206e:	f7ff f9bb 	bl	80013e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002080:	4b12      	ldr	r3, [pc, #72]	@ (80020cc <HAL_InitTick+0x54>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4b12      	ldr	r3, [pc, #72]	@ (80020d0 <HAL_InitTick+0x58>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	4619      	mov	r1, r3
 800208a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800208e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002092:	fbb2 f3f3 	udiv	r3, r2, r3
 8002096:	4618      	mov	r0, r3
 8002098:	f000 fbfb 	bl	8002892 <HAL_SYSTICK_Config>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e00e      	b.n	80020c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b0f      	cmp	r3, #15
 80020aa:	d80a      	bhi.n	80020c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ac:	2200      	movs	r2, #0
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80020b4:	f000 fbc3 	bl	800283e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020b8:	4a06      	ldr	r2, [pc, #24]	@ (80020d4 <HAL_InitTick+0x5c>)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	e000      	b.n	80020c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20000000 	.word	0x20000000
 80020d0:	20000008 	.word	0x20000008
 80020d4:	20000004 	.word	0x20000004

080020d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020dc:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <HAL_IncTick+0x20>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	461a      	mov	r2, r3
 80020e2:	4b06      	ldr	r3, [pc, #24]	@ (80020fc <HAL_IncTick+0x24>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4413      	add	r3, r2
 80020e8:	4a04      	ldr	r2, [pc, #16]	@ (80020fc <HAL_IncTick+0x24>)
 80020ea:	6013      	str	r3, [r2, #0]
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	20000008 	.word	0x20000008
 80020fc:	200009f4 	.word	0x200009f4

08002100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return uwTick;
 8002104:	4b03      	ldr	r3, [pc, #12]	@ (8002114 <HAL_GetTick+0x14>)
 8002106:	681b      	ldr	r3, [r3, #0]
}
 8002108:	4618      	mov	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	200009f4 	.word	0x200009f4

08002118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002120:	f7ff ffee 	bl	8002100 <HAL_GetTick>
 8002124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002130:	d005      	beq.n	800213e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002132:	4b0a      	ldr	r3, [pc, #40]	@ (800215c <HAL_Delay+0x44>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4413      	add	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800213e:	bf00      	nop
 8002140:	f7ff ffde 	bl	8002100 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	429a      	cmp	r2, r3
 800214e:	d8f7      	bhi.n	8002140 <HAL_Delay+0x28>
  {
  }
}
 8002150:	bf00      	nop
 8002152:	bf00      	nop
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000008 	.word	0x20000008

08002160 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e031      	b.n	80021da <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217a:	2b00      	cmp	r3, #0
 800217c:	d109      	bne.n	8002192 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff f956 	bl	8001430 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002196:	f003 0310 	and.w	r3, r3, #16
 800219a:	2b00      	cmp	r3, #0
 800219c:	d116      	bne.n	80021cc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021a2:	4b10      	ldr	r3, [pc, #64]	@ (80021e4 <HAL_ADC_Init+0x84>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	f043 0202 	orr.w	r2, r3, #2
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f970 	bl	8002494 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021be:	f023 0303 	bic.w	r3, r3, #3
 80021c2:	f043 0201 	orr.w	r2, r3, #1
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80021ca:	e001      	b.n	80021d0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	ffffeefd 	.word	0xffffeefd

080021e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x1c>
 8002200:	2302      	movs	r3, #2
 8002202:	e136      	b.n	8002472 <HAL_ADC_ConfigChannel+0x28a>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b09      	cmp	r3, #9
 8002212:	d93a      	bls.n	800228a <HAL_ADC_ConfigChannel+0xa2>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800221c:	d035      	beq.n	800228a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68d9      	ldr	r1, [r3, #12]
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	b29b      	uxth	r3, r3
 800222a:	461a      	mov	r2, r3
 800222c:	4613      	mov	r3, r2
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	4413      	add	r3, r2
 8002232:	3b1e      	subs	r3, #30
 8002234:	2207      	movs	r2, #7
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43da      	mvns	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	400a      	ands	r2, r1
 8002242:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a8d      	ldr	r2, [pc, #564]	@ (8002480 <HAL_ADC_ConfigChannel+0x298>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d10a      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68d9      	ldr	r1, [r3, #12]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	061a      	lsls	r2, r3, #24
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002262:	e035      	b.n	80022d0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68d9      	ldr	r1, [r3, #12]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	b29b      	uxth	r3, r3
 8002274:	4618      	mov	r0, r3
 8002276:	4603      	mov	r3, r0
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4403      	add	r3, r0
 800227c:	3b1e      	subs	r3, #30
 800227e:	409a      	lsls	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002288:	e022      	b.n	80022d0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6919      	ldr	r1, [r3, #16]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	b29b      	uxth	r3, r3
 8002296:	461a      	mov	r2, r3
 8002298:	4613      	mov	r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4413      	add	r3, r2
 800229e:	2207      	movs	r2, #7
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43da      	mvns	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	400a      	ands	r2, r1
 80022ac:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6919      	ldr	r1, [r3, #16]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	b29b      	uxth	r3, r3
 80022be:	4618      	mov	r0, r3
 80022c0:	4603      	mov	r3, r0
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	4403      	add	r3, r0
 80022c6:	409a      	lsls	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b06      	cmp	r3, #6
 80022d6:	d824      	bhi.n	8002322 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	3b05      	subs	r3, #5
 80022ea:	221f      	movs	r2, #31
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43da      	mvns	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	400a      	ands	r2, r1
 80022f8:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	b29b      	uxth	r3, r3
 8002306:	4618      	mov	r0, r3
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	3b05      	subs	r3, #5
 8002314:	fa00 f203 	lsl.w	r2, r0, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002320:	e04c      	b.n	80023bc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b0c      	cmp	r3, #12
 8002328:	d824      	bhi.n	8002374 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	3b23      	subs	r3, #35	@ 0x23
 800233c:	221f      	movs	r2, #31
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43da      	mvns	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	400a      	ands	r2, r1
 800234a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	b29b      	uxth	r3, r3
 8002358:	4618      	mov	r0, r3
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	3b23      	subs	r3, #35	@ 0x23
 8002366:	fa00 f203 	lsl.w	r2, r0, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	631a      	str	r2, [r3, #48]	@ 0x30
 8002372:	e023      	b.n	80023bc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	3b41      	subs	r3, #65	@ 0x41
 8002386:	221f      	movs	r2, #31
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43da      	mvns	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	400a      	ands	r2, r1
 8002394:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	4618      	mov	r0, r3
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	3b41      	subs	r3, #65	@ 0x41
 80023b0:	fa00 f203 	lsl.w	r2, r0, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a30      	ldr	r2, [pc, #192]	@ (8002484 <HAL_ADC_ConfigChannel+0x29c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d10a      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x1f4>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80023ce:	d105      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80023d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002488 <HAL_ADC_ConfigChannel+0x2a0>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4a2c      	ldr	r2, [pc, #176]	@ (8002488 <HAL_ADC_ConfigChannel+0x2a0>)
 80023d6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80023da:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a28      	ldr	r2, [pc, #160]	@ (8002484 <HAL_ADC_ConfigChannel+0x29c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d10f      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x21e>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2b12      	cmp	r3, #18
 80023ec:	d10b      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80023ee:	4b26      	ldr	r3, [pc, #152]	@ (8002488 <HAL_ADC_ConfigChannel+0x2a0>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	4a25      	ldr	r2, [pc, #148]	@ (8002488 <HAL_ADC_ConfigChannel+0x2a0>)
 80023f4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80023f8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80023fa:	4b23      	ldr	r3, [pc, #140]	@ (8002488 <HAL_ADC_ConfigChannel+0x2a0>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	4a22      	ldr	r2, [pc, #136]	@ (8002488 <HAL_ADC_ConfigChannel+0x2a0>)
 8002400:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002404:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a1e      	ldr	r2, [pc, #120]	@ (8002484 <HAL_ADC_ConfigChannel+0x29c>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d12b      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x280>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a1a      	ldr	r2, [pc, #104]	@ (8002480 <HAL_ADC_ConfigChannel+0x298>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d003      	beq.n	8002422 <HAL_ADC_ConfigChannel+0x23a>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b11      	cmp	r3, #17
 8002420:	d122      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002422:	4b19      	ldr	r3, [pc, #100]	@ (8002488 <HAL_ADC_ConfigChannel+0x2a0>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	4a18      	ldr	r2, [pc, #96]	@ (8002488 <HAL_ADC_ConfigChannel+0x2a0>)
 8002428:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800242c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800242e:	4b16      	ldr	r3, [pc, #88]	@ (8002488 <HAL_ADC_ConfigChannel+0x2a0>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	4a15      	ldr	r2, [pc, #84]	@ (8002488 <HAL_ADC_ConfigChannel+0x2a0>)
 8002434:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002438:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a10      	ldr	r2, [pc, #64]	@ (8002480 <HAL_ADC_ConfigChannel+0x298>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d111      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002444:	4b11      	ldr	r3, [pc, #68]	@ (800248c <HAL_ADC_ConfigChannel+0x2a4>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a11      	ldr	r2, [pc, #68]	@ (8002490 <HAL_ADC_ConfigChannel+0x2a8>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	0c9a      	lsrs	r2, r3, #18
 8002450:	4613      	mov	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800245a:	e002      	b.n	8002462 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	3b01      	subs	r3, #1
 8002460:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1f9      	bne.n	800245c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	10000012 	.word	0x10000012
 8002484:	40012000 	.word	0x40012000
 8002488:	40012300 	.word	0x40012300
 800248c:	20000000 	.word	0x20000000
 8002490:	431bde83 	.word	0x431bde83

08002494 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800249c:	4b78      	ldr	r3, [pc, #480]	@ (8002680 <ADC_Init+0x1ec>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	4a77      	ldr	r2, [pc, #476]	@ (8002680 <ADC_Init+0x1ec>)
 80024a2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80024a6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80024a8:	4b75      	ldr	r3, [pc, #468]	@ (8002680 <ADC_Init+0x1ec>)
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	4973      	ldr	r1, [pc, #460]	@ (8002680 <ADC_Init+0x1ec>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6859      	ldr	r1, [r3, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	021a      	lsls	r2, r3, #8
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80024e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6859      	ldr	r1, [r3, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800250a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6899      	ldr	r1, [r3, #8]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002522:	4a58      	ldr	r2, [pc, #352]	@ (8002684 <ADC_Init+0x1f0>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d022      	beq.n	800256e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002536:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6899      	ldr	r1, [r3, #8]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002558:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6899      	ldr	r1, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	e00f      	b.n	800258e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800257c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800258c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0202 	bic.w	r2, r2, #2
 800259c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6899      	ldr	r1, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	005a      	lsls	r2, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d01b      	beq.n	80025f4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80025da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6859      	ldr	r1, [r3, #4]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	3b01      	subs	r3, #1
 80025e8:	035a      	lsls	r2, r3, #13
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	e007      	b.n	8002604 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002602:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002612:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	3b01      	subs	r3, #1
 8002620:	051a      	lsls	r2, r3, #20
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002638:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6899      	ldr	r1, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002646:	025a      	lsls	r2, r3, #9
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800265e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6899      	ldr	r1, [r3, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	029a      	lsls	r2, r3, #10
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	609a      	str	r2, [r3, #8]
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	40012300 	.word	0x40012300
 8002684:	0f000001 	.word	0x0f000001

08002688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002698:	4b0b      	ldr	r3, [pc, #44]	@ (80026c8 <__NVIC_SetPriorityGrouping+0x40>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026a4:	4013      	ands	r3, r2
 80026a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026b0:	4b06      	ldr	r3, [pc, #24]	@ (80026cc <__NVIC_SetPriorityGrouping+0x44>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026b6:	4a04      	ldr	r2, [pc, #16]	@ (80026c8 <__NVIC_SetPriorityGrouping+0x40>)
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	60d3      	str	r3, [r2, #12]
}
 80026bc:	bf00      	nop
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	e000ed00 	.word	0xe000ed00
 80026cc:	05fa0000 	.word	0x05fa0000

080026d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026d4:	4b04      	ldr	r3, [pc, #16]	@ (80026e8 <__NVIC_GetPriorityGrouping+0x18>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	0a1b      	lsrs	r3, r3, #8
 80026da:	f003 0307 	and.w	r3, r3, #7
}
 80026de:	4618      	mov	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	db0b      	blt.n	8002716 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	f003 021f 	and.w	r2, r3, #31
 8002704:	4907      	ldr	r1, [pc, #28]	@ (8002724 <__NVIC_EnableIRQ+0x38>)
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	2001      	movs	r0, #1
 800270e:	fa00 f202 	lsl.w	r2, r0, r2
 8002712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	e000e100 	.word	0xe000e100

08002728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	6039      	str	r1, [r7, #0]
 8002732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002738:	2b00      	cmp	r3, #0
 800273a:	db0a      	blt.n	8002752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	b2da      	uxtb	r2, r3
 8002740:	490c      	ldr	r1, [pc, #48]	@ (8002774 <__NVIC_SetPriority+0x4c>)
 8002742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002746:	0112      	lsls	r2, r2, #4
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	440b      	add	r3, r1
 800274c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002750:	e00a      	b.n	8002768 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	b2da      	uxtb	r2, r3
 8002756:	4908      	ldr	r1, [pc, #32]	@ (8002778 <__NVIC_SetPriority+0x50>)
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	3b04      	subs	r3, #4
 8002760:	0112      	lsls	r2, r2, #4
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	440b      	add	r3, r1
 8002766:	761a      	strb	r2, [r3, #24]
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	e000e100 	.word	0xe000e100
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800277c:	b480      	push	{r7}
 800277e:	b089      	sub	sp, #36	@ 0x24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f1c3 0307 	rsb	r3, r3, #7
 8002796:	2b04      	cmp	r3, #4
 8002798:	bf28      	it	cs
 800279a:	2304      	movcs	r3, #4
 800279c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3304      	adds	r3, #4
 80027a2:	2b06      	cmp	r3, #6
 80027a4:	d902      	bls.n	80027ac <NVIC_EncodePriority+0x30>
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3b03      	subs	r3, #3
 80027aa:	e000      	b.n	80027ae <NVIC_EncodePriority+0x32>
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43da      	mvns	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	401a      	ands	r2, r3
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	fa01 f303 	lsl.w	r3, r1, r3
 80027ce:	43d9      	mvns	r1, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d4:	4313      	orrs	r3, r2
         );
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3724      	adds	r7, #36	@ 0x24
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027f4:	d301      	bcc.n	80027fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027f6:	2301      	movs	r3, #1
 80027f8:	e00f      	b.n	800281a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002824 <SysTick_Config+0x40>)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3b01      	subs	r3, #1
 8002800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002802:	210f      	movs	r1, #15
 8002804:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002808:	f7ff ff8e 	bl	8002728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800280c:	4b05      	ldr	r3, [pc, #20]	@ (8002824 <SysTick_Config+0x40>)
 800280e:	2200      	movs	r2, #0
 8002810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002812:	4b04      	ldr	r3, [pc, #16]	@ (8002824 <SysTick_Config+0x40>)
 8002814:	2207      	movs	r2, #7
 8002816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	e000e010 	.word	0xe000e010

08002828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7ff ff29 	bl	8002688 <__NVIC_SetPriorityGrouping>
}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800283e:	b580      	push	{r7, lr}
 8002840:	b086      	sub	sp, #24
 8002842:	af00      	add	r7, sp, #0
 8002844:	4603      	mov	r3, r0
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	607a      	str	r2, [r7, #4]
 800284a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002850:	f7ff ff3e 	bl	80026d0 <__NVIC_GetPriorityGrouping>
 8002854:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	68b9      	ldr	r1, [r7, #8]
 800285a:	6978      	ldr	r0, [r7, #20]
 800285c:	f7ff ff8e 	bl	800277c <NVIC_EncodePriority>
 8002860:	4602      	mov	r2, r0
 8002862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002866:	4611      	mov	r1, r2
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff ff5d 	bl	8002728 <__NVIC_SetPriority>
}
 800286e:	bf00      	nop
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	4603      	mov	r3, r0
 800287e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff ff31 	bl	80026ec <__NVIC_EnableIRQ>
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff ffa2 	bl	80027e4 <SysTick_Config>
 80028a0:	4603      	mov	r3, r0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80028b0:	f3bf 8f5f 	dmb	sy
}
 80028b4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80028b6:	4b07      	ldr	r3, [pc, #28]	@ (80028d4 <HAL_MPU_Disable+0x28>)
 80028b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ba:	4a06      	ldr	r2, [pc, #24]	@ (80028d4 <HAL_MPU_Disable+0x28>)
 80028bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028c0:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80028c2:	4b05      	ldr	r3, [pc, #20]	@ (80028d8 <HAL_MPU_Disable+0x2c>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	605a      	str	r2, [r3, #4]
}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	e000ed00 	.word	0xe000ed00
 80028d8:	e000ed90 	.word	0xe000ed90

080028dc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80028e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002914 <HAL_MPU_Enable+0x38>)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80028ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002918 <HAL_MPU_Enable+0x3c>)
 80028f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f2:	4a09      	ldr	r2, [pc, #36]	@ (8002918 <HAL_MPU_Enable+0x3c>)
 80028f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028f8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80028fa:	f3bf 8f4f 	dsb	sy
}
 80028fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002900:	f3bf 8f6f 	isb	sy
}
 8002904:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	e000ed90 	.word	0xe000ed90
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	785a      	ldrb	r2, [r3, #1]
 8002928:	4b1b      	ldr	r3, [pc, #108]	@ (8002998 <HAL_MPU_ConfigRegion+0x7c>)
 800292a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800292c:	4b1a      	ldr	r3, [pc, #104]	@ (8002998 <HAL_MPU_ConfigRegion+0x7c>)
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	4a19      	ldr	r2, [pc, #100]	@ (8002998 <HAL_MPU_ConfigRegion+0x7c>)
 8002932:	f023 0301 	bic.w	r3, r3, #1
 8002936:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002938:	4a17      	ldr	r2, [pc, #92]	@ (8002998 <HAL_MPU_ConfigRegion+0x7c>)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	7b1b      	ldrb	r3, [r3, #12]
 8002944:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	7adb      	ldrb	r3, [r3, #11]
 800294a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800294c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	7a9b      	ldrb	r3, [r3, #10]
 8002952:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002954:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	7b5b      	ldrb	r3, [r3, #13]
 800295a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800295c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	7b9b      	ldrb	r3, [r3, #14]
 8002962:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002964:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	7bdb      	ldrb	r3, [r3, #15]
 800296a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800296c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	7a5b      	ldrb	r3, [r3, #9]
 8002972:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002974:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	7a1b      	ldrb	r3, [r3, #8]
 800297a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800297c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	7812      	ldrb	r2, [r2, #0]
 8002982:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002984:	4a04      	ldr	r2, [pc, #16]	@ (8002998 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002986:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002988:	6113      	str	r3, [r2, #16]
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	e000ed90 	.word	0xe000ed90

0800299c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029a8:	f7ff fbaa 	bl	8002100 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e099      	b.n	8002aec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0201 	bic.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029d8:	e00f      	b.n	80029fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029da:	f7ff fb91 	bl	8002100 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b05      	cmp	r3, #5
 80029e6:	d908      	bls.n	80029fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2220      	movs	r2, #32
 80029ec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2203      	movs	r2, #3
 80029f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e078      	b.n	8002aec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1e8      	bne.n	80029da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	4b38      	ldr	r3, [pc, #224]	@ (8002af4 <HAL_DMA_Init+0x158>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d107      	bne.n	8002a64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f023 0307 	bic.w	r3, r3, #7
 8002a7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d117      	bne.n	8002abe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00e      	beq.n	8002abe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 fa77 	bl	8002f94 <DMA_CheckFifoParam>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d008      	beq.n	8002abe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2240      	movs	r2, #64	@ 0x40
 8002ab0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002aba:	2301      	movs	r3, #1
 8002abc:	e016      	b.n	8002aec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 fa2e 	bl	8002f28 <DMA_CalcBaseAndBitshift>
 8002acc:	4603      	mov	r3, r0
 8002ace:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad4:	223f      	movs	r2, #63	@ 0x3f
 8002ad6:	409a      	lsls	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	e010803f 	.word	0xe010803f

08002af8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
 8002b04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_DMA_Start_IT+0x26>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e048      	b.n	8002bb0 <HAL_DMA_Start_IT+0xb8>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d137      	bne.n	8002ba2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2202      	movs	r2, #2
 8002b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	68b9      	ldr	r1, [r7, #8]
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 f9c0 	bl	8002ecc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b50:	223f      	movs	r2, #63	@ 0x3f
 8002b52:	409a      	lsls	r2, r3
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f042 0216 	orr.w	r2, r2, #22
 8002b66:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695a      	ldr	r2, [r3, #20]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002b76:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d007      	beq.n	8002b90 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0208 	orr.w	r2, r2, #8
 8002b8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0201 	orr.w	r2, r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	e005      	b.n	8002bae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002baa:	2302      	movs	r3, #2
 8002bac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002bc4:	4b8e      	ldr	r3, [pc, #568]	@ (8002e00 <HAL_DMA_IRQHandler+0x248>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a8e      	ldr	r2, [pc, #568]	@ (8002e04 <HAL_DMA_IRQHandler+0x24c>)
 8002bca:	fba2 2303 	umull	r2, r3, r2, r3
 8002bce:	0a9b      	lsrs	r3, r3, #10
 8002bd0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be2:	2208      	movs	r2, #8
 8002be4:	409a      	lsls	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d01a      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d013      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0204 	bic.w	r2, r2, #4
 8002c0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c10:	2208      	movs	r2, #8
 8002c12:	409a      	lsls	r2, r3
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c1c:	f043 0201 	orr.w	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c28:	2201      	movs	r2, #1
 8002c2a:	409a      	lsls	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d012      	beq.n	8002c5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00b      	beq.n	8002c5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c46:	2201      	movs	r2, #1
 8002c48:	409a      	lsls	r2, r3
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c52:	f043 0202 	orr.w	r2, r3, #2
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c5e:	2204      	movs	r2, #4
 8002c60:	409a      	lsls	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4013      	ands	r3, r2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d012      	beq.n	8002c90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00b      	beq.n	8002c90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c7c:	2204      	movs	r2, #4
 8002c7e:	409a      	lsls	r2, r3
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c88:	f043 0204 	orr.w	r2, r3, #4
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c94:	2210      	movs	r2, #16
 8002c96:	409a      	lsls	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d043      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d03c      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb2:	2210      	movs	r2, #16
 8002cb4:	409a      	lsls	r2, r3
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d018      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d108      	bne.n	8002ce8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d024      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	4798      	blx	r3
 8002ce6:	e01f      	b.n	8002d28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d01b      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	4798      	blx	r3
 8002cf8:	e016      	b.n	8002d28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d107      	bne.n	8002d18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0208 	bic.w	r2, r2, #8
 8002d16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	409a      	lsls	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 808f 	beq.w	8002e58 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0310 	and.w	r3, r3, #16
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 8087 	beq.w	8002e58 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d4e:	2220      	movs	r2, #32
 8002d50:	409a      	lsls	r2, r3
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b05      	cmp	r3, #5
 8002d60:	d136      	bne.n	8002dd0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0216 	bic.w	r2, r2, #22
 8002d70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695a      	ldr	r2, [r3, #20]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d103      	bne.n	8002d92 <HAL_DMA_IRQHandler+0x1da>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d007      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0208 	bic.w	r2, r2, #8
 8002da0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da6:	223f      	movs	r2, #63	@ 0x3f
 8002da8:	409a      	lsls	r2, r3
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d07e      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	4798      	blx	r3
        }
        return;
 8002dce:	e079      	b.n	8002ec4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d01d      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10d      	bne.n	8002e08 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d031      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	4798      	blx	r3
 8002dfc:	e02c      	b.n	8002e58 <HAL_DMA_IRQHandler+0x2a0>
 8002dfe:	bf00      	nop
 8002e00:	20000000 	.word	0x20000000
 8002e04:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d023      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	4798      	blx	r3
 8002e18:	e01e      	b.n	8002e58 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10f      	bne.n	8002e48 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0210 	bic.w	r2, r2, #16
 8002e36:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d032      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d022      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2205      	movs	r2, #5
 8002e70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0201 	bic.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	3301      	adds	r3, #1
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d307      	bcc.n	8002ea0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f2      	bne.n	8002e84 <HAL_DMA_IRQHandler+0x2cc>
 8002e9e:	e000      	b.n	8002ea2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ea0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d005      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	4798      	blx	r3
 8002ec2:	e000      	b.n	8002ec6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ec4:	bf00      	nop
    }
  }
}
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002ee8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2b40      	cmp	r3, #64	@ 0x40
 8002ef8:	d108      	bne.n	8002f0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f0a:	e007      	b.n	8002f1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	60da      	str	r2, [r3, #12]
}
 8002f1c:	bf00      	nop
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	3b10      	subs	r3, #16
 8002f38:	4a13      	ldr	r2, [pc, #76]	@ (8002f88 <DMA_CalcBaseAndBitshift+0x60>)
 8002f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3e:	091b      	lsrs	r3, r3, #4
 8002f40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f42:	4a12      	ldr	r2, [pc, #72]	@ (8002f8c <DMA_CalcBaseAndBitshift+0x64>)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4413      	add	r3, r2
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d908      	bls.n	8002f68 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f90 <DMA_CalcBaseAndBitshift+0x68>)
 8002f5e:	4013      	ands	r3, r2
 8002f60:	1d1a      	adds	r2, r3, #4
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f66:	e006      	b.n	8002f76 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4b08      	ldr	r3, [pc, #32]	@ (8002f90 <DMA_CalcBaseAndBitshift+0x68>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	aaaaaaab 	.word	0xaaaaaaab
 8002f8c:	0800e7e0 	.word	0x0800e7e0
 8002f90:	fffffc00 	.word	0xfffffc00

08002f94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d11f      	bne.n	8002fee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	d856      	bhi.n	8003062 <DMA_CheckFifoParam+0xce>
 8002fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8002fbc <DMA_CheckFifoParam+0x28>)
 8002fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fba:	bf00      	nop
 8002fbc:	08002fcd 	.word	0x08002fcd
 8002fc0:	08002fdf 	.word	0x08002fdf
 8002fc4:	08002fcd 	.word	0x08002fcd
 8002fc8:	08003063 	.word	0x08003063
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d046      	beq.n	8003066 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fdc:	e043      	b.n	8003066 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002fe6:	d140      	bne.n	800306a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fec:	e03d      	b.n	800306a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ff6:	d121      	bne.n	800303c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d837      	bhi.n	800306e <DMA_CheckFifoParam+0xda>
 8002ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8003004 <DMA_CheckFifoParam+0x70>)
 8003000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003004:	08003015 	.word	0x08003015
 8003008:	0800301b 	.word	0x0800301b
 800300c:	08003015 	.word	0x08003015
 8003010:	0800302d 	.word	0x0800302d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	73fb      	strb	r3, [r7, #15]
      break;
 8003018:	e030      	b.n	800307c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d025      	beq.n	8003072 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800302a:	e022      	b.n	8003072 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003030:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003034:	d11f      	bne.n	8003076 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800303a:	e01c      	b.n	8003076 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d903      	bls.n	800304a <DMA_CheckFifoParam+0xb6>
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b03      	cmp	r3, #3
 8003046:	d003      	beq.n	8003050 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003048:	e018      	b.n	800307c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	73fb      	strb	r3, [r7, #15]
      break;
 800304e:	e015      	b.n	800307c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003054:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00e      	beq.n	800307a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	73fb      	strb	r3, [r7, #15]
      break;
 8003060:	e00b      	b.n	800307a <DMA_CheckFifoParam+0xe6>
      break;
 8003062:	bf00      	nop
 8003064:	e00a      	b.n	800307c <DMA_CheckFifoParam+0xe8>
      break;
 8003066:	bf00      	nop
 8003068:	e008      	b.n	800307c <DMA_CheckFifoParam+0xe8>
      break;
 800306a:	bf00      	nop
 800306c:	e006      	b.n	800307c <DMA_CheckFifoParam+0xe8>
      break;
 800306e:	bf00      	nop
 8003070:	e004      	b.n	800307c <DMA_CheckFifoParam+0xe8>
      break;
 8003072:	bf00      	nop
 8003074:	e002      	b.n	800307c <DMA_CheckFifoParam+0xe8>
      break;   
 8003076:	bf00      	nop
 8003078:	e000      	b.n	800307c <DMA_CheckFifoParam+0xe8>
      break;
 800307a:	bf00      	nop
    }
  } 
  
  return status; 
 800307c:	7bfb      	ldrb	r3, [r7, #15]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop

0800308c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800308c:	b480      	push	{r7}
 800308e:	b089      	sub	sp, #36	@ 0x24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003096:	2300      	movs	r3, #0
 8003098:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800309a:	2300      	movs	r3, #0
 800309c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800309e:	2300      	movs	r3, #0
 80030a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80030a6:	2300      	movs	r3, #0
 80030a8:	61fb      	str	r3, [r7, #28]
 80030aa:	e169      	b.n	8003380 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80030ac:	2201      	movs	r2, #1
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	4013      	ands	r3, r2
 80030be:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	f040 8158 	bne.w	800337a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d005      	beq.n	80030e2 <HAL_GPIO_Init+0x56>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d130      	bne.n	8003144 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	2203      	movs	r2, #3
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43db      	mvns	r3, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4013      	ands	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4313      	orrs	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003118:	2201      	movs	r2, #1
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4013      	ands	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	091b      	lsrs	r3, r3, #4
 800312e:	f003 0201 	and.w	r2, r3, #1
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	2b03      	cmp	r3, #3
 800314e:	d017      	beq.n	8003180 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	2203      	movs	r2, #3
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 0303 	and.w	r3, r3, #3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d123      	bne.n	80031d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	08da      	lsrs	r2, r3, #3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3208      	adds	r2, #8
 8003194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	220f      	movs	r2, #15
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4013      	ands	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	08da      	lsrs	r2, r3, #3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3208      	adds	r2, #8
 80031ce:	69b9      	ldr	r1, [r7, #24]
 80031d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	2203      	movs	r2, #3
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4013      	ands	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 0203 	and.w	r2, r3, #3
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4313      	orrs	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 80b2 	beq.w	800337a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003216:	4b60      	ldr	r3, [pc, #384]	@ (8003398 <HAL_GPIO_Init+0x30c>)
 8003218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321a:	4a5f      	ldr	r2, [pc, #380]	@ (8003398 <HAL_GPIO_Init+0x30c>)
 800321c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003220:	6453      	str	r3, [r2, #68]	@ 0x44
 8003222:	4b5d      	ldr	r3, [pc, #372]	@ (8003398 <HAL_GPIO_Init+0x30c>)
 8003224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003226:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800322a:	60fb      	str	r3, [r7, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800322e:	4a5b      	ldr	r2, [pc, #364]	@ (800339c <HAL_GPIO_Init+0x310>)
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	089b      	lsrs	r3, r3, #2
 8003234:	3302      	adds	r3, #2
 8003236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800323a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	220f      	movs	r2, #15
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a52      	ldr	r2, [pc, #328]	@ (80033a0 <HAL_GPIO_Init+0x314>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d02b      	beq.n	80032b2 <HAL_GPIO_Init+0x226>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a51      	ldr	r2, [pc, #324]	@ (80033a4 <HAL_GPIO_Init+0x318>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d025      	beq.n	80032ae <HAL_GPIO_Init+0x222>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a50      	ldr	r2, [pc, #320]	@ (80033a8 <HAL_GPIO_Init+0x31c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d01f      	beq.n	80032aa <HAL_GPIO_Init+0x21e>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a4f      	ldr	r2, [pc, #316]	@ (80033ac <HAL_GPIO_Init+0x320>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d019      	beq.n	80032a6 <HAL_GPIO_Init+0x21a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a4e      	ldr	r2, [pc, #312]	@ (80033b0 <HAL_GPIO_Init+0x324>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d013      	beq.n	80032a2 <HAL_GPIO_Init+0x216>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a4d      	ldr	r2, [pc, #308]	@ (80033b4 <HAL_GPIO_Init+0x328>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d00d      	beq.n	800329e <HAL_GPIO_Init+0x212>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a4c      	ldr	r2, [pc, #304]	@ (80033b8 <HAL_GPIO_Init+0x32c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d007      	beq.n	800329a <HAL_GPIO_Init+0x20e>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a4b      	ldr	r2, [pc, #300]	@ (80033bc <HAL_GPIO_Init+0x330>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d101      	bne.n	8003296 <HAL_GPIO_Init+0x20a>
 8003292:	2307      	movs	r3, #7
 8003294:	e00e      	b.n	80032b4 <HAL_GPIO_Init+0x228>
 8003296:	2308      	movs	r3, #8
 8003298:	e00c      	b.n	80032b4 <HAL_GPIO_Init+0x228>
 800329a:	2306      	movs	r3, #6
 800329c:	e00a      	b.n	80032b4 <HAL_GPIO_Init+0x228>
 800329e:	2305      	movs	r3, #5
 80032a0:	e008      	b.n	80032b4 <HAL_GPIO_Init+0x228>
 80032a2:	2304      	movs	r3, #4
 80032a4:	e006      	b.n	80032b4 <HAL_GPIO_Init+0x228>
 80032a6:	2303      	movs	r3, #3
 80032a8:	e004      	b.n	80032b4 <HAL_GPIO_Init+0x228>
 80032aa:	2302      	movs	r3, #2
 80032ac:	e002      	b.n	80032b4 <HAL_GPIO_Init+0x228>
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <HAL_GPIO_Init+0x228>
 80032b2:	2300      	movs	r3, #0
 80032b4:	69fa      	ldr	r2, [r7, #28]
 80032b6:	f002 0203 	and.w	r2, r2, #3
 80032ba:	0092      	lsls	r2, r2, #2
 80032bc:	4093      	lsls	r3, r2
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80032c4:	4935      	ldr	r1, [pc, #212]	@ (800339c <HAL_GPIO_Init+0x310>)
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	089b      	lsrs	r3, r3, #2
 80032ca:	3302      	adds	r3, #2
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032d2:	4b3b      	ldr	r3, [pc, #236]	@ (80033c0 <HAL_GPIO_Init+0x334>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	43db      	mvns	r3, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4013      	ands	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032f6:	4a32      	ldr	r2, [pc, #200]	@ (80033c0 <HAL_GPIO_Init+0x334>)
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032fc:	4b30      	ldr	r3, [pc, #192]	@ (80033c0 <HAL_GPIO_Init+0x334>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	43db      	mvns	r3, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4013      	ands	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	4313      	orrs	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003320:	4a27      	ldr	r2, [pc, #156]	@ (80033c0 <HAL_GPIO_Init+0x334>)
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003326:	4b26      	ldr	r3, [pc, #152]	@ (80033c0 <HAL_GPIO_Init+0x334>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	43db      	mvns	r3, r3
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4013      	ands	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	4313      	orrs	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800334a:	4a1d      	ldr	r2, [pc, #116]	@ (80033c0 <HAL_GPIO_Init+0x334>)
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003350:	4b1b      	ldr	r3, [pc, #108]	@ (80033c0 <HAL_GPIO_Init+0x334>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	43db      	mvns	r3, r3
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4013      	ands	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003374:	4a12      	ldr	r2, [pc, #72]	@ (80033c0 <HAL_GPIO_Init+0x334>)
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	3301      	adds	r3, #1
 800337e:	61fb      	str	r3, [r7, #28]
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	2b0f      	cmp	r3, #15
 8003384:	f67f ae92 	bls.w	80030ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003388:	bf00      	nop
 800338a:	bf00      	nop
 800338c:	3724      	adds	r7, #36	@ 0x24
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40023800 	.word	0x40023800
 800339c:	40013800 	.word	0x40013800
 80033a0:	40020000 	.word	0x40020000
 80033a4:	40020400 	.word	0x40020400
 80033a8:	40020800 	.word	0x40020800
 80033ac:	40020c00 	.word	0x40020c00
 80033b0:	40021000 	.word	0x40021000
 80033b4:	40021400 	.word	0x40021400
 80033b8:	40021800 	.word	0x40021800
 80033bc:	40021c00 	.word	0x40021c00
 80033c0:	40013c00 	.word	0x40013c00

080033c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	460b      	mov	r3, r1
 80033ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	887b      	ldrh	r3, [r7, #2]
 80033d6:	4013      	ands	r3, r2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d002      	beq.n	80033e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033dc:	2301      	movs	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]
 80033e0:	e001      	b.n	80033e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033e2:	2300      	movs	r3, #0
 80033e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	460b      	mov	r3, r1
 80033fe:	807b      	strh	r3, [r7, #2]
 8003400:	4613      	mov	r3, r2
 8003402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003404:	787b      	ldrb	r3, [r7, #1]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800340a:	887a      	ldrh	r2, [r7, #2]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003410:	e003      	b.n	800341a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003412:	887b      	ldrh	r3, [r7, #2]
 8003414:	041a      	lsls	r2, r3, #16
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	619a      	str	r2, [r3, #24]
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
	...

08003428 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e08b      	b.n	8003552 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d106      	bne.n	8003454 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7fe f82e 	bl	80014b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2224      	movs	r2, #36	@ 0x24
 8003458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0201 	bic.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003478:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003488:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d107      	bne.n	80034a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800349e:	609a      	str	r2, [r3, #8]
 80034a0:	e006      	b.n	80034b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80034ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d108      	bne.n	80034ca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034c6:	605a      	str	r2, [r3, #4]
 80034c8:	e007      	b.n	80034da <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6859      	ldr	r1, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	4b1d      	ldr	r3, [pc, #116]	@ (800355c <HAL_I2C_Init+0x134>)
 80034e6:	430b      	orrs	r3, r1
 80034e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68da      	ldr	r2, [r3, #12]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691a      	ldr	r2, [r3, #16]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	69d9      	ldr	r1, [r3, #28]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a1a      	ldr	r2, [r3, #32]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2220      	movs	r2, #32
 800353e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	02008000 	.word	0x02008000

08003560 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b20      	cmp	r3, #32
 8003574:	d138      	bne.n	80035e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800357c:	2b01      	cmp	r3, #1
 800357e:	d101      	bne.n	8003584 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003580:	2302      	movs	r3, #2
 8003582:	e032      	b.n	80035ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2224      	movs	r2, #36	@ 0x24
 8003590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0201 	bic.w	r2, r2, #1
 80035a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6819      	ldr	r1, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0201 	orr.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	e000      	b.n	80035ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035e8:	2302      	movs	r3, #2
  }
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b085      	sub	sp, #20
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b20      	cmp	r3, #32
 800360a:	d139      	bne.n	8003680 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003612:	2b01      	cmp	r3, #1
 8003614:	d101      	bne.n	800361a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003616:	2302      	movs	r3, #2
 8003618:	e033      	b.n	8003682 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2224      	movs	r2, #36	@ 0x24
 8003626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0201 	bic.w	r2, r2, #1
 8003638:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003648:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	021b      	lsls	r3, r3, #8
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	4313      	orrs	r3, r2
 8003652:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0201 	orr.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	e000      	b.n	8003682 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003680:	2302      	movs	r3, #2
  }
}
 8003682:	4618      	mov	r0, r3
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b086      	sub	sp, #24
 8003692:	af02      	add	r7, sp, #8
 8003694:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e108      	b.n	80038b2 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d106      	bne.n	80036c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f00a f816 	bl	800d6ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2203      	movs	r2, #3
 80036c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036ce:	d102      	bne.n	80036d6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f006 f9b7 	bl	8009a4e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6818      	ldr	r0, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	7c1a      	ldrb	r2, [r3, #16]
 80036e8:	f88d 2000 	strb.w	r2, [sp]
 80036ec:	3304      	adds	r3, #4
 80036ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036f0:	f006 f86e 	bl	80097d0 <USB_CoreInit>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d005      	beq.n	8003706 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2202      	movs	r2, #2
 80036fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e0d5      	b.n	80038b2 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2100      	movs	r1, #0
 800370c:	4618      	mov	r0, r3
 800370e:	f006 f9af 	bl	8009a70 <USB_SetCurrentMode>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d005      	beq.n	8003724 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2202      	movs	r2, #2
 800371c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0c6      	b.n	80038b2 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003724:	2300      	movs	r3, #0
 8003726:	73fb      	strb	r3, [r7, #15]
 8003728:	e04a      	b.n	80037c0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800372a:	7bfa      	ldrb	r2, [r7, #15]
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	4613      	mov	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	4413      	add	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	440b      	add	r3, r1
 8003738:	3315      	adds	r3, #21
 800373a:	2201      	movs	r2, #1
 800373c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800373e:	7bfa      	ldrb	r2, [r7, #15]
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	4413      	add	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	3314      	adds	r3, #20
 800374e:	7bfa      	ldrb	r2, [r7, #15]
 8003750:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003752:	7bfa      	ldrb	r2, [r7, #15]
 8003754:	7bfb      	ldrb	r3, [r7, #15]
 8003756:	b298      	uxth	r0, r3
 8003758:	6879      	ldr	r1, [r7, #4]
 800375a:	4613      	mov	r3, r2
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	4413      	add	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	440b      	add	r3, r1
 8003764:	332e      	adds	r3, #46	@ 0x2e
 8003766:	4602      	mov	r2, r0
 8003768:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800376a:	7bfa      	ldrb	r2, [r7, #15]
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	4613      	mov	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	4413      	add	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	440b      	add	r3, r1
 8003778:	3318      	adds	r3, #24
 800377a:	2200      	movs	r2, #0
 800377c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800377e:	7bfa      	ldrb	r2, [r7, #15]
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	4613      	mov	r3, r2
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	4413      	add	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	440b      	add	r3, r1
 800378c:	331c      	adds	r3, #28
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003792:	7bfa      	ldrb	r2, [r7, #15]
 8003794:	6879      	ldr	r1, [r7, #4]
 8003796:	4613      	mov	r3, r2
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	4413      	add	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	440b      	add	r3, r1
 80037a0:	3320      	adds	r3, #32
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037a6:	7bfa      	ldrb	r2, [r7, #15]
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	4613      	mov	r3, r2
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	440b      	add	r3, r1
 80037b4:	3324      	adds	r3, #36	@ 0x24
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
 80037bc:	3301      	adds	r3, #1
 80037be:	73fb      	strb	r3, [r7, #15]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	791b      	ldrb	r3, [r3, #4]
 80037c4:	7bfa      	ldrb	r2, [r7, #15]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d3af      	bcc.n	800372a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ca:	2300      	movs	r3, #0
 80037cc:	73fb      	strb	r3, [r7, #15]
 80037ce:	e044      	b.n	800385a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037d0:	7bfa      	ldrb	r2, [r7, #15]
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	4613      	mov	r3, r2
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	4413      	add	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80037e2:	2200      	movs	r2, #0
 80037e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037e6:	7bfa      	ldrb	r2, [r7, #15]
 80037e8:	6879      	ldr	r1, [r7, #4]
 80037ea:	4613      	mov	r3, r2
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	4413      	add	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	440b      	add	r3, r1
 80037f4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80037f8:	7bfa      	ldrb	r2, [r7, #15]
 80037fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037fc:	7bfa      	ldrb	r2, [r7, #15]
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	4613      	mov	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	4413      	add	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	440b      	add	r3, r1
 800380a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800380e:	2200      	movs	r2, #0
 8003810:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003812:	7bfa      	ldrb	r2, [r7, #15]
 8003814:	6879      	ldr	r1, [r7, #4]
 8003816:	4613      	mov	r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	4413      	add	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	440b      	add	r3, r1
 8003820:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003828:	7bfa      	ldrb	r2, [r7, #15]
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	4413      	add	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800383e:	7bfa      	ldrb	r2, [r7, #15]
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	4613      	mov	r3, r2
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	4413      	add	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	440b      	add	r3, r1
 800384c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003854:	7bfb      	ldrb	r3, [r7, #15]
 8003856:	3301      	adds	r3, #1
 8003858:	73fb      	strb	r3, [r7, #15]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	791b      	ldrb	r3, [r3, #4]
 800385e:	7bfa      	ldrb	r2, [r7, #15]
 8003860:	429a      	cmp	r2, r3
 8003862:	d3b5      	bcc.n	80037d0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6818      	ldr	r0, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	7c1a      	ldrb	r2, [r3, #16]
 800386c:	f88d 2000 	strb.w	r2, [sp]
 8003870:	3304      	adds	r3, #4
 8003872:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003874:	f006 f948 	bl	8009b08 <USB_DevInit>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d005      	beq.n	800388a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2202      	movs	r2, #2
 8003882:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e013      	b.n	80038b2 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	7b1b      	ldrb	r3, [r3, #12]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d102      	bne.n	80038a6 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f001 f959 	bl	8004b58 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f007 f999 	bl	800abe2 <USB_DevDisconnect>

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b082      	sub	sp, #8
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d101      	bne.n	80038d0 <HAL_PCD_Start+0x16>
 80038cc:	2302      	movs	r3, #2
 80038ce:	e012      	b.n	80038f6 <HAL_PCD_Start+0x3c>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4618      	mov	r0, r3
 80038de:	f006 f8a5 	bl	8009a2c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f007 f95a 	bl	800aba0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80038fe:	b590      	push	{r4, r7, lr}
 8003900:	b08d      	sub	sp, #52	@ 0x34
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f007 fa18 	bl	800ad4a <USB_GetMode>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	f040 84b9 	bne.w	8004294 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f007 f97c 	bl	800ac24 <USB_ReadInterrupts>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 84af 	beq.w	8004292 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	0a1b      	lsrs	r3, r3, #8
 800393e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f007 f969 	bl	800ac24 <USB_ReadInterrupts>
 8003952:	4603      	mov	r3, r0
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b02      	cmp	r3, #2
 800395a:	d107      	bne.n	800396c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695a      	ldr	r2, [r3, #20]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f002 0202 	and.w	r2, r2, #2
 800396a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f007 f957 	bl	800ac24 <USB_ReadInterrupts>
 8003976:	4603      	mov	r3, r0
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	2b10      	cmp	r3, #16
 800397e:	d161      	bne.n	8003a44 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	699a      	ldr	r2, [r3, #24]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0210 	bic.w	r2, r2, #16
 800398e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	f003 020f 	and.w	r2, r3, #15
 800399c:	4613      	mov	r3, r2
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	4413      	add	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	4413      	add	r3, r2
 80039ac:	3304      	adds	r3, #4
 80039ae:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80039b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039ba:	d124      	bne.n	8003a06 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80039c2:	4013      	ands	r3, r2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d035      	beq.n	8003a34 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	091b      	lsrs	r3, r3, #4
 80039d0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80039d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	461a      	mov	r2, r3
 80039da:	6a38      	ldr	r0, [r7, #32]
 80039dc:	f006 ff8e 	bl	800a8fc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	68da      	ldr	r2, [r3, #12]
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	091b      	lsrs	r3, r3, #4
 80039e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039ec:	441a      	add	r2, r3
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	695a      	ldr	r2, [r3, #20]
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039fe:	441a      	add	r2, r3
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	615a      	str	r2, [r3, #20]
 8003a04:	e016      	b.n	8003a34 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003a0c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003a10:	d110      	bne.n	8003a34 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a18:	2208      	movs	r2, #8
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	6a38      	ldr	r0, [r7, #32]
 8003a1e:	f006 ff6d 	bl	800a8fc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	695a      	ldr	r2, [r3, #20]
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	091b      	lsrs	r3, r3, #4
 8003a2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a2e:	441a      	add	r2, r3
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699a      	ldr	r2, [r3, #24]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0210 	orr.w	r2, r2, #16
 8003a42:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f007 f8eb 	bl	800ac24 <USB_ReadInterrupts>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a54:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a58:	f040 80a7 	bne.w	8003baa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f007 f8f0 	bl	800ac4a <USB_ReadDevAllOutEpInterrupt>
 8003a6a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003a6c:	e099      	b.n	8003ba2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 808e 	beq.w	8003b96 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a80:	b2d2      	uxtb	r2, r2
 8003a82:	4611      	mov	r1, r2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f007 f914 	bl	800acb2 <USB_ReadDevOutEPInterrupt>
 8003a8a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00c      	beq.n	8003ab0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003aa8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 fece 	bl	800484c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00c      	beq.n	8003ad4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	2308      	movs	r3, #8
 8003aca:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003acc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 ffa4 	bl	8004a1c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	f003 0310 	and.w	r3, r3, #16
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d008      	beq.n	8003af0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae0:	015a      	lsls	r2, r3, #5
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aea:	461a      	mov	r2, r3
 8003aec:	2310      	movs	r3, #16
 8003aee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d030      	beq.n	8003b5c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b02:	2b80      	cmp	r3, #128	@ 0x80
 8003b04:	d109      	bne.n	8003b1a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	69fa      	ldr	r2, [r7, #28]
 8003b10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b14:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b18:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	78db      	ldrb	r3, [r3, #3]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d108      	bne.n	8003b4a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	4619      	mov	r1, r3
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f009 fef5 	bl	800d934 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4c:	015a      	lsls	r2, r3, #5
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	4413      	add	r3, r2
 8003b52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b56:	461a      	mov	r2, r3
 8003b58:	2302      	movs	r3, #2
 8003b5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	f003 0320 	and.w	r3, r3, #32
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d008      	beq.n	8003b78 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b68:	015a      	lsls	r2, r3, #5
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b72:	461a      	mov	r2, r3
 8003b74:	2320      	movs	r3, #32
 8003b76:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d009      	beq.n	8003b96 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b84:	015a      	lsls	r2, r3, #5
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b8e:	461a      	mov	r2, r3
 8003b90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b94:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b98:	3301      	adds	r3, #1
 8003b9a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b9e:	085b      	lsrs	r3, r3, #1
 8003ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f47f af62 	bne.w	8003a6e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f007 f838 	bl	800ac24 <USB_ReadInterrupts>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003bbe:	f040 80db 	bne.w	8003d78 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f007 f859 	bl	800ac7e <USB_ReadDevAllInEpInterrupt>
 8003bcc:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003bd2:	e0cd      	b.n	8003d70 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 80c2 	beq.w	8003d64 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	4611      	mov	r1, r2
 8003bea:	4618      	mov	r0, r3
 8003bec:	f007 f87f 	bl	800acee <USB_ReadDevInEPInterrupt>
 8003bf0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d057      	beq.n	8003cac <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	2201      	movs	r2, #1
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	43db      	mvns	r3, r3
 8003c16:	69f9      	ldr	r1, [r7, #28]
 8003c18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	2301      	movs	r3, #1
 8003c30:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	799b      	ldrb	r3, [r3, #6]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d132      	bne.n	8003ca0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c3e:	4613      	mov	r3, r2
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	4413      	add	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	3320      	adds	r3, #32
 8003c4a:	6819      	ldr	r1, [r3, #0]
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c50:	4613      	mov	r3, r2
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	4413      	add	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4403      	add	r3, r0
 8003c5a:	331c      	adds	r3, #28
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4419      	add	r1, r3
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c64:	4613      	mov	r3, r2
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	4413      	add	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4403      	add	r3, r0
 8003c6e:	3320      	adds	r3, #32
 8003c70:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d113      	bne.n	8003ca0 <HAL_PCD_IRQHandler+0x3a2>
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	4413      	add	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	3324      	adds	r3, #36	@ 0x24
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d108      	bne.n	8003ca0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6818      	ldr	r0, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c98:	461a      	mov	r2, r3
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	f007 f888 	bl	800adb0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f009 fdbf 	bl	800d82a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d008      	beq.n	8003cc8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb8:	015a      	lsls	r2, r3, #5
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	2308      	movs	r3, #8
 8003cc6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	f003 0310 	and.w	r3, r3, #16
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d008      	beq.n	8003ce4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cde:	461a      	mov	r2, r3
 8003ce0:	2310      	movs	r3, #16
 8003ce2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d008      	beq.n	8003d00 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf0:	015a      	lsls	r2, r3, #5
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	2340      	movs	r3, #64	@ 0x40
 8003cfe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d023      	beq.n	8003d52 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003d0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d0c:	6a38      	ldr	r0, [r7, #32]
 8003d0e:	f006 f86b 	bl	8009de8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d14:	4613      	mov	r3, r2
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	4413      	add	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	3310      	adds	r3, #16
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	4413      	add	r3, r2
 8003d22:	3304      	adds	r3, #4
 8003d24:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	78db      	ldrb	r3, [r3, #3]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d108      	bne.n	8003d40 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2200      	movs	r2, #0
 8003d32:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	4619      	mov	r1, r3
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f009 fe0c 	bl	800d958 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	2302      	movs	r3, #2
 8003d50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003d5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 fce8 	bl	8004734 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d66:	3301      	adds	r3, #1
 8003d68:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6c:	085b      	lsrs	r3, r3, #1
 8003d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f47f af2e 	bne.w	8003bd4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f006 ff51 	bl	800ac24 <USB_ReadInterrupts>
 8003d82:	4603      	mov	r3, r0
 8003d84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d8c:	d122      	bne.n	8003dd4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	69fa      	ldr	r2, [r7, #28]
 8003d98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d9c:	f023 0301 	bic.w	r3, r3, #1
 8003da0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d108      	bne.n	8003dbe <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003db4:	2100      	movs	r1, #0
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f009 ff8a 	bl	800dcd0 <HAL_PCDEx_LPM_Callback>
 8003dbc:	e002      	b.n	8003dc4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f009 fdaa 	bl	800d918 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695a      	ldr	r2, [r3, #20]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003dd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f006 ff23 	bl	800ac24 <USB_ReadInterrupts>
 8003dde:	4603      	mov	r3, r0
 8003de0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003de4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003de8:	d112      	bne.n	8003e10 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d102      	bne.n	8003e00 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f009 fd66 	bl	800d8cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695a      	ldr	r2, [r3, #20]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003e0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f006 ff05 	bl	800ac24 <USB_ReadInterrupts>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e24:	d121      	bne.n	8003e6a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	695a      	ldr	r2, [r3, #20]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003e34:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d111      	bne.n	8003e64 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e4e:	089b      	lsrs	r3, r3, #2
 8003e50:	f003 020f 	and.w	r2, r3, #15
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f009 ff37 	bl	800dcd0 <HAL_PCDEx_LPM_Callback>
 8003e62:	e002      	b.n	8003e6a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f009 fd31 	bl	800d8cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f006 fed8 	bl	800ac24 <USB_ReadInterrupts>
 8003e74:	4603      	mov	r3, r0
 8003e76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e7e:	f040 80b7 	bne.w	8003ff0 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	69fa      	ldr	r2, [r7, #28]
 8003e8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e90:	f023 0301 	bic.w	r3, r3, #1
 8003e94:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2110      	movs	r1, #16
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f005 ffa3 	bl	8009de8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ea6:	e046      	b.n	8003f36 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003eba:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ecc:	0151      	lsls	r1, r2, #5
 8003ece:	69fa      	ldr	r2, [r7, #28]
 8003ed0:	440a      	add	r2, r1
 8003ed2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ed6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003eda:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ee8:	461a      	mov	r2, r3
 8003eea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003eee:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f00:	0151      	lsls	r1, r2, #5
 8003f02:	69fa      	ldr	r2, [r7, #28]
 8003f04:	440a      	add	r2, r1
 8003f06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f0a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f0e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f12:	015a      	lsls	r2, r3, #5
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f20:	0151      	lsls	r1, r2, #5
 8003f22:	69fa      	ldr	r2, [r7, #28]
 8003f24:	440a      	add	r2, r1
 8003f26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f2a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003f2e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f32:	3301      	adds	r3, #1
 8003f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	791b      	ldrb	r3, [r3, #4]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d3b2      	bcc.n	8003ea8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	69fa      	ldr	r2, [r7, #28]
 8003f4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f50:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003f54:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	7bdb      	ldrb	r3, [r3, #15]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d016      	beq.n	8003f8c <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f68:	69fa      	ldr	r2, [r7, #28]
 8003f6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f6e:	f043 030b 	orr.w	r3, r3, #11
 8003f72:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f7e:	69fa      	ldr	r2, [r7, #28]
 8003f80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f84:	f043 030b 	orr.w	r3, r3, #11
 8003f88:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f8a:	e015      	b.n	8003fb8 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f92:	695a      	ldr	r2, [r3, #20]
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	f242 032b 	movw	r3, #8235	@ 0x202b
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	69fa      	ldr	r2, [r7, #28]
 8003fae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fb2:	f043 030b 	orr.w	r3, r3, #11
 8003fb6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	69fa      	ldr	r2, [r7, #28]
 8003fc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fc6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003fca:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6818      	ldr	r0, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f006 fee8 	bl	800adb0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	695a      	ldr	r2, [r3, #20]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003fee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f006 fe15 	bl	800ac24 <USB_ReadInterrupts>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004000:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004004:	d123      	bne.n	800404e <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f006 feac 	bl	800ad68 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f005 ff60 	bl	8009eda <USB_GetDevSpeed>
 800401a:	4603      	mov	r3, r0
 800401c:	461a      	mov	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681c      	ldr	r4, [r3, #0]
 8004026:	f001 fab1 	bl	800558c <HAL_RCC_GetHCLKFreq>
 800402a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004030:	461a      	mov	r2, r3
 8004032:	4620      	mov	r0, r4
 8004034:	f005 fc58 	bl	80098e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f009 fc1e 	bl	800d87a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	695a      	ldr	r2, [r3, #20]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800404c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4618      	mov	r0, r3
 8004054:	f006 fde6 	bl	800ac24 <USB_ReadInterrupts>
 8004058:	4603      	mov	r3, r0
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	2b08      	cmp	r3, #8
 8004060:	d10a      	bne.n	8004078 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f009 fbfb 	bl	800d85e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695a      	ldr	r2, [r3, #20]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f002 0208 	and.w	r2, r2, #8
 8004076:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4618      	mov	r0, r3
 800407e:	f006 fdd1 	bl	800ac24 <USB_ReadInterrupts>
 8004082:	4603      	mov	r3, r0
 8004084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004088:	2b80      	cmp	r3, #128	@ 0x80
 800408a:	d123      	bne.n	80040d4 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800408c:	6a3b      	ldr	r3, [r7, #32]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004098:	2301      	movs	r3, #1
 800409a:	627b      	str	r3, [r7, #36]	@ 0x24
 800409c:	e014      	b.n	80040c8 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040a2:	4613      	mov	r3, r2
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	4413      	add	r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	440b      	add	r3, r1
 80040ac:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d105      	bne.n	80040c2 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80040b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	4619      	mov	r1, r3
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 fb08 	bl	80046d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c4:	3301      	adds	r3, #1
 80040c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	791b      	ldrb	r3, [r3, #4]
 80040cc:	461a      	mov	r2, r3
 80040ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d3e4      	bcc.n	800409e <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f006 fda3 	bl	800ac24 <USB_ReadInterrupts>
 80040de:	4603      	mov	r3, r0
 80040e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040e8:	d13c      	bne.n	8004164 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040ea:	2301      	movs	r3, #1
 80040ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80040ee:	e02b      	b.n	8004148 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80040f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004104:	4613      	mov	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	4413      	add	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	3318      	adds	r3, #24
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d115      	bne.n	8004142 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004116:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004118:	2b00      	cmp	r3, #0
 800411a:	da12      	bge.n	8004142 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004120:	4613      	mov	r3, r2
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	4413      	add	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	440b      	add	r3, r1
 800412a:	3317      	adds	r3, #23
 800412c:	2201      	movs	r2, #1
 800412e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004132:	b2db      	uxtb	r3, r3
 8004134:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004138:	b2db      	uxtb	r3, r3
 800413a:	4619      	mov	r1, r3
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 fac8 	bl	80046d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004144:	3301      	adds	r3, #1
 8004146:	627b      	str	r3, [r7, #36]	@ 0x24
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	791b      	ldrb	r3, [r3, #4]
 800414c:	461a      	mov	r2, r3
 800414e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004150:	4293      	cmp	r3, r2
 8004152:	d3cd      	bcc.n	80040f0 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695a      	ldr	r2, [r3, #20]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004162:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f006 fd5b 	bl	800ac24 <USB_ReadInterrupts>
 800416e:	4603      	mov	r3, r0
 8004170:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004174:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004178:	d156      	bne.n	8004228 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800417a:	2301      	movs	r3, #1
 800417c:	627b      	str	r3, [r7, #36]	@ 0x24
 800417e:	e045      	b.n	800420c <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004190:	6879      	ldr	r1, [r7, #4]
 8004192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004194:	4613      	mov	r3, r2
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	4413      	add	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d12e      	bne.n	8004206 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80041a8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	da2b      	bge.n	8004206 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80041ba:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80041be:	429a      	cmp	r2, r3
 80041c0:	d121      	bne.n	8004206 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041c6:	4613      	mov	r3, r2
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	4413      	add	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	440b      	add	r3, r1
 80041d0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80041d4:	2201      	movs	r2, #1
 80041d6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10a      	bne.n	8004206 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	69fa      	ldr	r2, [r7, #28]
 80041fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004202:	6053      	str	r3, [r2, #4]
            break;
 8004204:	e008      	b.n	8004218 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004208:	3301      	adds	r3, #1
 800420a:	627b      	str	r3, [r7, #36]	@ 0x24
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	791b      	ldrb	r3, [r3, #4]
 8004210:	461a      	mov	r2, r3
 8004212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004214:	4293      	cmp	r3, r2
 8004216:	d3b3      	bcc.n	8004180 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695a      	ldr	r2, [r3, #20]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004226:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4618      	mov	r0, r3
 800422e:	f006 fcf9 	bl	800ac24 <USB_ReadInterrupts>
 8004232:	4603      	mov	r3, r0
 8004234:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004238:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800423c:	d10a      	bne.n	8004254 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f009 fb9c 	bl	800d97c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695a      	ldr	r2, [r3, #20]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004252:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4618      	mov	r0, r3
 800425a:	f006 fce3 	bl	800ac24 <USB_ReadInterrupts>
 800425e:	4603      	mov	r3, r0
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b04      	cmp	r3, #4
 8004266:	d115      	bne.n	8004294 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	f003 0304 	and.w	r3, r3, #4
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f009 fb8c 	bl	800d998 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6859      	ldr	r1, [r3, #4]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	430a      	orrs	r2, r1
 800428e:	605a      	str	r2, [r3, #4]
 8004290:	e000      	b.n	8004294 <HAL_PCD_IRQHandler+0x996>
      return;
 8004292:	bf00      	nop
    }
  }
}
 8004294:	3734      	adds	r7, #52	@ 0x34
 8004296:	46bd      	mov	sp, r7
 8004298:	bd90      	pop	{r4, r7, pc}

0800429a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b082      	sub	sp, #8
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
 80042a2:	460b      	mov	r3, r1
 80042a4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d101      	bne.n	80042b4 <HAL_PCD_SetAddress+0x1a>
 80042b0:	2302      	movs	r3, #2
 80042b2:	e012      	b.n	80042da <HAL_PCD_SetAddress+0x40>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	78fa      	ldrb	r2, [r7, #3]
 80042c0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	78fa      	ldrb	r2, [r7, #3]
 80042c8:	4611      	mov	r1, r2
 80042ca:	4618      	mov	r0, r3
 80042cc:	f006 fc42 	bl	800ab54 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b084      	sub	sp, #16
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	4608      	mov	r0, r1
 80042ec:	4611      	mov	r1, r2
 80042ee:	461a      	mov	r2, r3
 80042f0:	4603      	mov	r3, r0
 80042f2:	70fb      	strb	r3, [r7, #3]
 80042f4:	460b      	mov	r3, r1
 80042f6:	803b      	strh	r3, [r7, #0]
 80042f8:	4613      	mov	r3, r2
 80042fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80042fc:	2300      	movs	r3, #0
 80042fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004300:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004304:	2b00      	cmp	r3, #0
 8004306:	da0f      	bge.n	8004328 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	f003 020f 	and.w	r2, r3, #15
 800430e:	4613      	mov	r3, r2
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	4413      	add	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	3310      	adds	r3, #16
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	4413      	add	r3, r2
 800431c:	3304      	adds	r3, #4
 800431e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2201      	movs	r2, #1
 8004324:	705a      	strb	r2, [r3, #1]
 8004326:	e00f      	b.n	8004348 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004328:	78fb      	ldrb	r3, [r7, #3]
 800432a:	f003 020f 	and.w	r2, r3, #15
 800432e:	4613      	mov	r3, r2
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	4413      	add	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	4413      	add	r3, r2
 800433e:	3304      	adds	r3, #4
 8004340:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004348:	78fb      	ldrb	r3, [r7, #3]
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	b2da      	uxtb	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004354:	883a      	ldrh	r2, [r7, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	78ba      	ldrb	r2, [r7, #2]
 800435e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	785b      	ldrb	r3, [r3, #1]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d004      	beq.n	8004372 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	461a      	mov	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004372:	78bb      	ldrb	r3, [r7, #2]
 8004374:	2b02      	cmp	r3, #2
 8004376:	d102      	bne.n	800437e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004384:	2b01      	cmp	r3, #1
 8004386:	d101      	bne.n	800438c <HAL_PCD_EP_Open+0xaa>
 8004388:	2302      	movs	r3, #2
 800438a:	e00e      	b.n	80043aa <HAL_PCD_EP_Open+0xc8>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68f9      	ldr	r1, [r7, #12]
 800439a:	4618      	mov	r0, r3
 800439c:	f005 fdc2 	bl	8009f24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80043a8:	7afb      	ldrb	r3, [r7, #11]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b084      	sub	sp, #16
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	460b      	mov	r3, r1
 80043bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	da0f      	bge.n	80043e6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043c6:	78fb      	ldrb	r3, [r7, #3]
 80043c8:	f003 020f 	and.w	r2, r3, #15
 80043cc:	4613      	mov	r3, r2
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	4413      	add	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	3310      	adds	r3, #16
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	4413      	add	r3, r2
 80043da:	3304      	adds	r3, #4
 80043dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2201      	movs	r2, #1
 80043e2:	705a      	strb	r2, [r3, #1]
 80043e4:	e00f      	b.n	8004406 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043e6:	78fb      	ldrb	r3, [r7, #3]
 80043e8:	f003 020f 	and.w	r2, r3, #15
 80043ec:	4613      	mov	r3, r2
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	4413      	add	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	4413      	add	r3, r2
 80043fc:	3304      	adds	r3, #4
 80043fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004406:	78fb      	ldrb	r3, [r7, #3]
 8004408:	f003 030f 	and.w	r3, r3, #15
 800440c:	b2da      	uxtb	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004418:	2b01      	cmp	r3, #1
 800441a:	d101      	bne.n	8004420 <HAL_PCD_EP_Close+0x6e>
 800441c:	2302      	movs	r3, #2
 800441e:	e00e      	b.n	800443e <HAL_PCD_EP_Close+0x8c>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68f9      	ldr	r1, [r7, #12]
 800442e:	4618      	mov	r0, r3
 8004430:	f005 fe00 	bl	800a034 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b086      	sub	sp, #24
 800444a:	af00      	add	r7, sp, #0
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	603b      	str	r3, [r7, #0]
 8004452:	460b      	mov	r3, r1
 8004454:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004456:	7afb      	ldrb	r3, [r7, #11]
 8004458:	f003 020f 	and.w	r2, r3, #15
 800445c:	4613      	mov	r3, r2
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	4413      	add	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	4413      	add	r3, r2
 800446c:	3304      	adds	r3, #4
 800446e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2200      	movs	r2, #0
 8004480:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2200      	movs	r2, #0
 8004486:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004488:	7afb      	ldrb	r3, [r7, #11]
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	b2da      	uxtb	r2, r3
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	799b      	ldrb	r3, [r3, #6]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d102      	bne.n	80044a2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6818      	ldr	r0, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	799b      	ldrb	r3, [r3, #6]
 80044aa:	461a      	mov	r2, r3
 80044ac:	6979      	ldr	r1, [r7, #20]
 80044ae:	f005 fe9d 	bl	800a1ec <USB_EPStartXfer>

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	460b      	mov	r3, r1
 80044c6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80044c8:	78fb      	ldrb	r3, [r7, #3]
 80044ca:	f003 020f 	and.w	r2, r3, #15
 80044ce:	6879      	ldr	r1, [r7, #4]
 80044d0:	4613      	mov	r3, r2
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	4413      	add	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	440b      	add	r3, r1
 80044da:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80044de:	681b      	ldr	r3, [r3, #0]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	607a      	str	r2, [r7, #4]
 80044f6:	603b      	str	r3, [r7, #0]
 80044f8:	460b      	mov	r3, r1
 80044fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044fc:	7afb      	ldrb	r3, [r7, #11]
 80044fe:	f003 020f 	and.w	r2, r3, #15
 8004502:	4613      	mov	r3, r2
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	4413      	add	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	3310      	adds	r3, #16
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	4413      	add	r3, r2
 8004510:	3304      	adds	r3, #4
 8004512:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	2200      	movs	r2, #0
 8004524:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	2201      	movs	r2, #1
 800452a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800452c:	7afb      	ldrb	r3, [r7, #11]
 800452e:	f003 030f 	and.w	r3, r3, #15
 8004532:	b2da      	uxtb	r2, r3
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	799b      	ldrb	r3, [r3, #6]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d102      	bne.n	8004546 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6818      	ldr	r0, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	799b      	ldrb	r3, [r3, #6]
 800454e:	461a      	mov	r2, r3
 8004550:	6979      	ldr	r1, [r7, #20]
 8004552:	f005 fe4b 	bl	800a1ec <USB_EPStartXfer>

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3718      	adds	r7, #24
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800456c:	78fb      	ldrb	r3, [r7, #3]
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	7912      	ldrb	r2, [r2, #4]
 8004576:	4293      	cmp	r3, r2
 8004578:	d901      	bls.n	800457e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e04f      	b.n	800461e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800457e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004582:	2b00      	cmp	r3, #0
 8004584:	da0f      	bge.n	80045a6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004586:	78fb      	ldrb	r3, [r7, #3]
 8004588:	f003 020f 	and.w	r2, r3, #15
 800458c:	4613      	mov	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	4413      	add	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	3310      	adds	r3, #16
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	4413      	add	r3, r2
 800459a:	3304      	adds	r3, #4
 800459c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2201      	movs	r2, #1
 80045a2:	705a      	strb	r2, [r3, #1]
 80045a4:	e00d      	b.n	80045c2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045a6:	78fa      	ldrb	r2, [r7, #3]
 80045a8:	4613      	mov	r3, r2
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	4413      	add	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	4413      	add	r3, r2
 80045b8:	3304      	adds	r3, #4
 80045ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2201      	movs	r2, #1
 80045c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045c8:	78fb      	ldrb	r3, [r7, #3]
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d101      	bne.n	80045e2 <HAL_PCD_EP_SetStall+0x82>
 80045de:	2302      	movs	r3, #2
 80045e0:	e01d      	b.n	800461e <HAL_PCD_EP_SetStall+0xbe>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68f9      	ldr	r1, [r7, #12]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f006 f9db 	bl	800a9ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80045f6:	78fb      	ldrb	r3, [r7, #3]
 80045f8:	f003 030f 	and.w	r3, r3, #15
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d109      	bne.n	8004614 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6818      	ldr	r0, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	7999      	ldrb	r1, [r3, #6]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800460e:	461a      	mov	r2, r3
 8004610:	f006 fbce 	bl	800adb0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b084      	sub	sp, #16
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
 800462e:	460b      	mov	r3, r1
 8004630:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004632:	78fb      	ldrb	r3, [r7, #3]
 8004634:	f003 030f 	and.w	r3, r3, #15
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	7912      	ldrb	r2, [r2, #4]
 800463c:	4293      	cmp	r3, r2
 800463e:	d901      	bls.n	8004644 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e042      	b.n	80046ca <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004644:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004648:	2b00      	cmp	r3, #0
 800464a:	da0f      	bge.n	800466c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800464c:	78fb      	ldrb	r3, [r7, #3]
 800464e:	f003 020f 	and.w	r2, r3, #15
 8004652:	4613      	mov	r3, r2
 8004654:	00db      	lsls	r3, r3, #3
 8004656:	4413      	add	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	3310      	adds	r3, #16
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	4413      	add	r3, r2
 8004660:	3304      	adds	r3, #4
 8004662:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2201      	movs	r2, #1
 8004668:	705a      	strb	r2, [r3, #1]
 800466a:	e00f      	b.n	800468c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800466c:	78fb      	ldrb	r3, [r7, #3]
 800466e:	f003 020f 	and.w	r2, r3, #15
 8004672:	4613      	mov	r3, r2
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	4413      	add	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	4413      	add	r3, r2
 8004682:	3304      	adds	r3, #4
 8004684:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004692:	78fb      	ldrb	r3, [r7, #3]
 8004694:	f003 030f 	and.w	r3, r3, #15
 8004698:	b2da      	uxtb	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d101      	bne.n	80046ac <HAL_PCD_EP_ClrStall+0x86>
 80046a8:	2302      	movs	r3, #2
 80046aa:	e00e      	b.n	80046ca <HAL_PCD_EP_ClrStall+0xa4>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68f9      	ldr	r1, [r7, #12]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f006 f9e4 	bl	800aa88 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b084      	sub	sp, #16
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	460b      	mov	r3, r1
 80046dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80046de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	da0c      	bge.n	8004700 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046e6:	78fb      	ldrb	r3, [r7, #3]
 80046e8:	f003 020f 	and.w	r2, r3, #15
 80046ec:	4613      	mov	r3, r2
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	4413      	add	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	3310      	adds	r3, #16
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	4413      	add	r3, r2
 80046fa:	3304      	adds	r3, #4
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	e00c      	b.n	800471a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	f003 020f 	and.w	r2, r3, #15
 8004706:	4613      	mov	r3, r2
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	4413      	add	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	4413      	add	r3, r2
 8004716:	3304      	adds	r3, #4
 8004718:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68f9      	ldr	r1, [r7, #12]
 8004720:	4618      	mov	r0, r3
 8004722:	f006 f803 	bl	800a72c <USB_EPStopXfer>
 8004726:	4603      	mov	r3, r0
 8004728:	72fb      	strb	r3, [r7, #11]

  return ret;
 800472a:	7afb      	ldrb	r3, [r7, #11]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b08a      	sub	sp, #40	@ 0x28
 8004738:	af02      	add	r7, sp, #8
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	4613      	mov	r3, r2
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	4413      	add	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	3310      	adds	r3, #16
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	4413      	add	r3, r2
 8004758:	3304      	adds	r3, #4
 800475a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	695a      	ldr	r2, [r3, #20]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	429a      	cmp	r2, r3
 8004766:	d901      	bls.n	800476c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e06b      	b.n	8004844 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	691a      	ldr	r2, [r3, #16]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	69fa      	ldr	r2, [r7, #28]
 800477e:	429a      	cmp	r2, r3
 8004780:	d902      	bls.n	8004788 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	3303      	adds	r3, #3
 800478c:	089b      	lsrs	r3, r3, #2
 800478e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004790:	e02a      	b.n	80047e8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	691a      	ldr	r2, [r3, #16]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	69fa      	ldr	r2, [r7, #28]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d902      	bls.n	80047ae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	3303      	adds	r3, #3
 80047b2:	089b      	lsrs	r3, r3, #2
 80047b4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	68d9      	ldr	r1, [r3, #12]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	4603      	mov	r3, r0
 80047ca:	6978      	ldr	r0, [r7, #20]
 80047cc:	f006 f858 	bl	800a880 <USB_WritePacket>

    ep->xfer_buff  += len;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	68da      	ldr	r2, [r3, #12]
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	441a      	add	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	695a      	ldr	r2, [r3, #20]
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	441a      	add	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d809      	bhi.n	8004812 <PCD_WriteEmptyTxFifo+0xde>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	695a      	ldr	r2, [r3, #20]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004806:	429a      	cmp	r2, r3
 8004808:	d203      	bcs.n	8004812 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1bf      	bne.n	8004792 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	691a      	ldr	r2, [r3, #16]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	429a      	cmp	r2, r3
 800481c:	d811      	bhi.n	8004842 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	f003 030f 	and.w	r3, r3, #15
 8004824:	2201      	movs	r2, #1
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004832:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	43db      	mvns	r3, r3
 8004838:	6939      	ldr	r1, [r7, #16]
 800483a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800483e:	4013      	ands	r3, r2
 8004840:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3720      	adds	r7, #32
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b088      	sub	sp, #32
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	333c      	adds	r3, #60	@ 0x3c
 8004864:	3304      	adds	r3, #4
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	4413      	add	r3, r2
 8004872:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	799b      	ldrb	r3, [r3, #6]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d17b      	bne.n	800497a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f003 0308 	and.w	r3, r3, #8
 8004888:	2b00      	cmp	r3, #0
 800488a:	d015      	beq.n	80048b8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	4a61      	ldr	r2, [pc, #388]	@ (8004a14 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	f240 80b9 	bls.w	8004a08 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 80b3 	beq.w	8004a08 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	015a      	lsls	r2, r3, #5
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	4413      	add	r3, r2
 80048aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048ae:	461a      	mov	r2, r3
 80048b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048b4:	6093      	str	r3, [r2, #8]
 80048b6:	e0a7      	b.n	8004a08 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f003 0320 	and.w	r3, r3, #32
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d009      	beq.n	80048d6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	015a      	lsls	r2, r3, #5
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	4413      	add	r3, r2
 80048ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048ce:	461a      	mov	r2, r3
 80048d0:	2320      	movs	r3, #32
 80048d2:	6093      	str	r3, [r2, #8]
 80048d4:	e098      	b.n	8004a08 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f040 8093 	bne.w	8004a08 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	4a4b      	ldr	r2, [pc, #300]	@ (8004a14 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d90f      	bls.n	800490a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00a      	beq.n	800490a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004900:	461a      	mov	r2, r3
 8004902:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004906:	6093      	str	r3, [r2, #8]
 8004908:	e07e      	b.n	8004a08 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	4613      	mov	r3, r2
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	4413      	add	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	4413      	add	r3, r2
 800491c:	3304      	adds	r3, #4
 800491e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6a1a      	ldr	r2, [r3, #32]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	0159      	lsls	r1, r3, #5
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	440b      	add	r3, r1
 800492c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004936:	1ad2      	subs	r2, r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d114      	bne.n	800496c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d109      	bne.n	800495e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6818      	ldr	r0, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004954:	461a      	mov	r2, r3
 8004956:	2101      	movs	r1, #1
 8004958:	f006 fa2a 	bl	800adb0 <USB_EP0_OutStart>
 800495c:	e006      	b.n	800496c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	68da      	ldr	r2, [r3, #12]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	441a      	add	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	b2db      	uxtb	r3, r3
 8004970:	4619      	mov	r1, r3
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f008 ff3e 	bl	800d7f4 <HAL_PCD_DataOutStageCallback>
 8004978:	e046      	b.n	8004a08 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	4a26      	ldr	r2, [pc, #152]	@ (8004a18 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d124      	bne.n	80049cc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00a      	beq.n	80049a2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	4413      	add	r3, r2
 8004994:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004998:	461a      	mov	r2, r3
 800499a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800499e:	6093      	str	r3, [r2, #8]
 80049a0:	e032      	b.n	8004a08 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f003 0320 	and.w	r3, r3, #32
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d008      	beq.n	80049be <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	015a      	lsls	r2, r3, #5
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049b8:	461a      	mov	r2, r3
 80049ba:	2320      	movs	r3, #32
 80049bc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	4619      	mov	r1, r3
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f008 ff15 	bl	800d7f4 <HAL_PCD_DataOutStageCallback>
 80049ca:	e01d      	b.n	8004a08 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d114      	bne.n	80049fc <PCD_EP_OutXfrComplete_int+0x1b0>
 80049d2:	6879      	ldr	r1, [r7, #4]
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	4613      	mov	r3, r2
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	4413      	add	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	440b      	add	r3, r1
 80049e0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d108      	bne.n	80049fc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6818      	ldr	r0, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80049f4:	461a      	mov	r2, r3
 80049f6:	2100      	movs	r1, #0
 80049f8:	f006 f9da 	bl	800adb0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	4619      	mov	r1, r3
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f008 fef6 	bl	800d7f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3720      	adds	r7, #32
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	4f54300a 	.word	0x4f54300a
 8004a18:	4f54310a 	.word	0x4f54310a

08004a1c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	333c      	adds	r3, #60	@ 0x3c
 8004a34:	3304      	adds	r3, #4
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4a15      	ldr	r2, [pc, #84]	@ (8004aa4 <PCD_EP_OutSetupPacket_int+0x88>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d90e      	bls.n	8004a70 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d009      	beq.n	8004a70 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a68:	461a      	mov	r2, r3
 8004a6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a6e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f008 fead 	bl	800d7d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4a0a      	ldr	r2, [pc, #40]	@ (8004aa4 <PCD_EP_OutSetupPacket_int+0x88>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d90c      	bls.n	8004a98 <PCD_EP_OutSetupPacket_int+0x7c>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	799b      	ldrb	r3, [r3, #6]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d108      	bne.n	8004a98 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6818      	ldr	r0, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a90:	461a      	mov	r2, r3
 8004a92:	2101      	movs	r1, #1
 8004a94:	f006 f98c 	bl	800adb0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	4f54300a 	.word	0x4f54300a

08004aa8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	70fb      	strb	r3, [r7, #3]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004ac0:	78fb      	ldrb	r3, [r7, #3]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d107      	bne.n	8004ad6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004ac6:	883b      	ldrh	r3, [r7, #0]
 8004ac8:	0419      	lsls	r1, r3, #16
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ad4:	e028      	b.n	8004b28 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004adc:	0c1b      	lsrs	r3, r3, #16
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	73fb      	strb	r3, [r7, #15]
 8004ae8:	e00d      	b.n	8004b06 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	7bfb      	ldrb	r3, [r7, #15]
 8004af0:	3340      	adds	r3, #64	@ 0x40
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	0c1b      	lsrs	r3, r3, #16
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	4413      	add	r3, r2
 8004afe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b00:	7bfb      	ldrb	r3, [r7, #15]
 8004b02:	3301      	adds	r3, #1
 8004b04:	73fb      	strb	r3, [r7, #15]
 8004b06:	7bfa      	ldrb	r2, [r7, #15]
 8004b08:	78fb      	ldrb	r3, [r7, #3]
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d3ec      	bcc.n	8004aea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004b10:	883b      	ldrh	r3, [r7, #0]
 8004b12:	0418      	lsls	r0, r3, #16
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6819      	ldr	r1, [r3, #0]
 8004b18:	78fb      	ldrb	r3, [r7, #3]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	4302      	orrs	r2, r0
 8004b20:	3340      	adds	r3, #64	@ 0x40
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	440b      	add	r3, r1
 8004b26:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
 8004b3e:	460b      	mov	r3, r1
 8004b40:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	887a      	ldrh	r2, [r7, #2]
 8004b48:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b86:	4b05      	ldr	r3, [pc, #20]	@ (8004b9c <HAL_PCDEx_ActivateLPM+0x44>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	10000003 	.word	0x10000003

08004ba0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004baa:	4b23      	ldr	r3, [pc, #140]	@ (8004c38 <HAL_PWREx_EnableOverDrive+0x98>)
 8004bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bae:	4a22      	ldr	r2, [pc, #136]	@ (8004c38 <HAL_PWREx_EnableOverDrive+0x98>)
 8004bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bb6:	4b20      	ldr	r3, [pc, #128]	@ (8004c38 <HAL_PWREx_EnableOverDrive+0x98>)
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bbe:	603b      	str	r3, [r7, #0]
 8004bc0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8004c3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a1d      	ldr	r2, [pc, #116]	@ (8004c3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bcc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bce:	f7fd fa97 	bl	8002100 <HAL_GetTick>
 8004bd2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bd4:	e009      	b.n	8004bea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004bd6:	f7fd fa93 	bl	8002100 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004be4:	d901      	bls.n	8004bea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e022      	b.n	8004c30 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bea:	4b14      	ldr	r3, [pc, #80]	@ (8004c3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bf6:	d1ee      	bne.n	8004bd6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004bf8:	4b10      	ldr	r3, [pc, #64]	@ (8004c3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a0f      	ldr	r2, [pc, #60]	@ (8004c3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c02:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c04:	f7fd fa7c 	bl	8002100 <HAL_GetTick>
 8004c08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c0a:	e009      	b.n	8004c20 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c0c:	f7fd fa78 	bl	8002100 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004c1a:	d901      	bls.n	8004c20 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e007      	b.n	8004c30 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c20:	4b06      	ldr	r3, [pc, #24]	@ (8004c3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c2c:	d1ee      	bne.n	8004c0c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	40007000 	.word	0x40007000

08004c40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e291      	b.n	800517a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 8087 	beq.w	8004d72 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c64:	4b96      	ldr	r3, [pc, #600]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f003 030c 	and.w	r3, r3, #12
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d00c      	beq.n	8004c8a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c70:	4b93      	ldr	r3, [pc, #588]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f003 030c 	and.w	r3, r3, #12
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d112      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x62>
 8004c7c:	4b90      	ldr	r3, [pc, #576]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c88:	d10b      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c8a:	4b8d      	ldr	r3, [pc, #564]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d06c      	beq.n	8004d70 <HAL_RCC_OscConfig+0x130>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d168      	bne.n	8004d70 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e26b      	b.n	800517a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004caa:	d106      	bne.n	8004cba <HAL_RCC_OscConfig+0x7a>
 8004cac:	4b84      	ldr	r3, [pc, #528]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a83      	ldr	r2, [pc, #524]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004cb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cb6:	6013      	str	r3, [r2, #0]
 8004cb8:	e02e      	b.n	8004d18 <HAL_RCC_OscConfig+0xd8>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10c      	bne.n	8004cdc <HAL_RCC_OscConfig+0x9c>
 8004cc2:	4b7f      	ldr	r3, [pc, #508]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a7e      	ldr	r2, [pc, #504]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004cc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	4b7c      	ldr	r3, [pc, #496]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a7b      	ldr	r2, [pc, #492]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004cd4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cd8:	6013      	str	r3, [r2, #0]
 8004cda:	e01d      	b.n	8004d18 <HAL_RCC_OscConfig+0xd8>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ce4:	d10c      	bne.n	8004d00 <HAL_RCC_OscConfig+0xc0>
 8004ce6:	4b76      	ldr	r3, [pc, #472]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a75      	ldr	r2, [pc, #468]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004cec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	4b73      	ldr	r3, [pc, #460]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a72      	ldr	r2, [pc, #456]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	e00b      	b.n	8004d18 <HAL_RCC_OscConfig+0xd8>
 8004d00:	4b6f      	ldr	r3, [pc, #444]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a6e      	ldr	r2, [pc, #440]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004d06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	4b6c      	ldr	r3, [pc, #432]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a6b      	ldr	r2, [pc, #428]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004d12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d013      	beq.n	8004d48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d20:	f7fd f9ee 	bl	8002100 <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d28:	f7fd f9ea 	bl	8002100 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b64      	cmp	r3, #100	@ 0x64
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e21f      	b.n	800517a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d3a:	4b61      	ldr	r3, [pc, #388]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0f0      	beq.n	8004d28 <HAL_RCC_OscConfig+0xe8>
 8004d46:	e014      	b.n	8004d72 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d48:	f7fd f9da 	bl	8002100 <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d50:	f7fd f9d6 	bl	8002100 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b64      	cmp	r3, #100	@ 0x64
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e20b      	b.n	800517a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d62:	4b57      	ldr	r3, [pc, #348]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1f0      	bne.n	8004d50 <HAL_RCC_OscConfig+0x110>
 8004d6e:	e000      	b.n	8004d72 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d069      	beq.n	8004e52 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d7e:	4b50      	ldr	r3, [pc, #320]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f003 030c 	and.w	r3, r3, #12
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00b      	beq.n	8004da2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d8a:	4b4d      	ldr	r3, [pc, #308]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f003 030c 	and.w	r3, r3, #12
 8004d92:	2b08      	cmp	r3, #8
 8004d94:	d11c      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x190>
 8004d96:	4b4a      	ldr	r3, [pc, #296]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d116      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004da2:	4b47      	ldr	r3, [pc, #284]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d005      	beq.n	8004dba <HAL_RCC_OscConfig+0x17a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d001      	beq.n	8004dba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e1df      	b.n	800517a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dba:	4b41      	ldr	r3, [pc, #260]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	493d      	ldr	r1, [pc, #244]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dce:	e040      	b.n	8004e52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d023      	beq.n	8004e20 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dd8:	4b39      	ldr	r3, [pc, #228]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a38      	ldr	r2, [pc, #224]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004dde:	f043 0301 	orr.w	r3, r3, #1
 8004de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de4:	f7fd f98c 	bl	8002100 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dec:	f7fd f988 	bl	8002100 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e1bd      	b.n	800517a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dfe:	4b30      	ldr	r3, [pc, #192]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d0f0      	beq.n	8004dec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e0a:	4b2d      	ldr	r3, [pc, #180]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	4929      	ldr	r1, [pc, #164]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	600b      	str	r3, [r1, #0]
 8004e1e:	e018      	b.n	8004e52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e20:	4b27      	ldr	r3, [pc, #156]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a26      	ldr	r2, [pc, #152]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004e26:	f023 0301 	bic.w	r3, r3, #1
 8004e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2c:	f7fd f968 	bl	8002100 <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e34:	f7fd f964 	bl	8002100 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e199      	b.n	800517a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e46:	4b1e      	ldr	r3, [pc, #120]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1f0      	bne.n	8004e34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0308 	and.w	r3, r3, #8
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d038      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d019      	beq.n	8004e9a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e66:	4b16      	ldr	r3, [pc, #88]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004e68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e6a:	4a15      	ldr	r2, [pc, #84]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004e6c:	f043 0301 	orr.w	r3, r3, #1
 8004e70:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e72:	f7fd f945 	bl	8002100 <HAL_GetTick>
 8004e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e78:	e008      	b.n	8004e8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e7a:	f7fd f941 	bl	8002100 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d901      	bls.n	8004e8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e176      	b.n	800517a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004e8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0f0      	beq.n	8004e7a <HAL_RCC_OscConfig+0x23a>
 8004e98:	e01a      	b.n	8004ed0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e9a:	4b09      	ldr	r3, [pc, #36]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004e9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e9e:	4a08      	ldr	r2, [pc, #32]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004ea0:	f023 0301 	bic.w	r3, r3, #1
 8004ea4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea6:	f7fd f92b 	bl	8002100 <HAL_GetTick>
 8004eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eac:	e00a      	b.n	8004ec4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eae:	f7fd f927 	bl	8002100 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d903      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e15c      	b.n	800517a <HAL_RCC_OscConfig+0x53a>
 8004ec0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ec4:	4b91      	ldr	r3, [pc, #580]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004ec6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1ee      	bne.n	8004eae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 80a4 	beq.w	8005026 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ede:	4b8b      	ldr	r3, [pc, #556]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10d      	bne.n	8004f06 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eea:	4b88      	ldr	r3, [pc, #544]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eee:	4a87      	ldr	r2, [pc, #540]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004ef0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ef4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ef6:	4b85      	ldr	r3, [pc, #532]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004efe:	60bb      	str	r3, [r7, #8]
 8004f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f02:	2301      	movs	r3, #1
 8004f04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f06:	4b82      	ldr	r3, [pc, #520]	@ (8005110 <HAL_RCC_OscConfig+0x4d0>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d118      	bne.n	8004f44 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004f12:	4b7f      	ldr	r3, [pc, #508]	@ (8005110 <HAL_RCC_OscConfig+0x4d0>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a7e      	ldr	r2, [pc, #504]	@ (8005110 <HAL_RCC_OscConfig+0x4d0>)
 8004f18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f1e:	f7fd f8ef 	bl	8002100 <HAL_GetTick>
 8004f22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f24:	e008      	b.n	8004f38 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f26:	f7fd f8eb 	bl	8002100 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b64      	cmp	r3, #100	@ 0x64
 8004f32:	d901      	bls.n	8004f38 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e120      	b.n	800517a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f38:	4b75      	ldr	r3, [pc, #468]	@ (8005110 <HAL_RCC_OscConfig+0x4d0>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d0f0      	beq.n	8004f26 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d106      	bne.n	8004f5a <HAL_RCC_OscConfig+0x31a>
 8004f4c:	4b6f      	ldr	r3, [pc, #444]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f50:	4a6e      	ldr	r2, [pc, #440]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004f52:	f043 0301 	orr.w	r3, r3, #1
 8004f56:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f58:	e02d      	b.n	8004fb6 <HAL_RCC_OscConfig+0x376>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10c      	bne.n	8004f7c <HAL_RCC_OscConfig+0x33c>
 8004f62:	4b6a      	ldr	r3, [pc, #424]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f66:	4a69      	ldr	r2, [pc, #420]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004f68:	f023 0301 	bic.w	r3, r3, #1
 8004f6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f6e:	4b67      	ldr	r3, [pc, #412]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f72:	4a66      	ldr	r2, [pc, #408]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004f74:	f023 0304 	bic.w	r3, r3, #4
 8004f78:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f7a:	e01c      	b.n	8004fb6 <HAL_RCC_OscConfig+0x376>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	2b05      	cmp	r3, #5
 8004f82:	d10c      	bne.n	8004f9e <HAL_RCC_OscConfig+0x35e>
 8004f84:	4b61      	ldr	r3, [pc, #388]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f88:	4a60      	ldr	r2, [pc, #384]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004f8a:	f043 0304 	orr.w	r3, r3, #4
 8004f8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f90:	4b5e      	ldr	r3, [pc, #376]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f94:	4a5d      	ldr	r2, [pc, #372]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004f96:	f043 0301 	orr.w	r3, r3, #1
 8004f9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f9c:	e00b      	b.n	8004fb6 <HAL_RCC_OscConfig+0x376>
 8004f9e:	4b5b      	ldr	r3, [pc, #364]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa2:	4a5a      	ldr	r2, [pc, #360]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004fa4:	f023 0301 	bic.w	r3, r3, #1
 8004fa8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004faa:	4b58      	ldr	r3, [pc, #352]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fae:	4a57      	ldr	r2, [pc, #348]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004fb0:	f023 0304 	bic.w	r3, r3, #4
 8004fb4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d015      	beq.n	8004fea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fbe:	f7fd f89f 	bl	8002100 <HAL_GetTick>
 8004fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc4:	e00a      	b.n	8004fdc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fc6:	f7fd f89b 	bl	8002100 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d901      	bls.n	8004fdc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e0ce      	b.n	800517a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fdc:	4b4b      	ldr	r3, [pc, #300]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0ee      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x386>
 8004fe8:	e014      	b.n	8005014 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fea:	f7fd f889 	bl	8002100 <HAL_GetTick>
 8004fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ff0:	e00a      	b.n	8005008 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ff2:	f7fd f885 	bl	8002100 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005000:	4293      	cmp	r3, r2
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e0b8      	b.n	800517a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005008:	4b40      	ldr	r3, [pc, #256]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 800500a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1ee      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005014:	7dfb      	ldrb	r3, [r7, #23]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d105      	bne.n	8005026 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800501a:	4b3c      	ldr	r3, [pc, #240]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 800501c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501e:	4a3b      	ldr	r2, [pc, #236]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8005020:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005024:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	2b00      	cmp	r3, #0
 800502c:	f000 80a4 	beq.w	8005178 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005030:	4b36      	ldr	r3, [pc, #216]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f003 030c 	and.w	r3, r3, #12
 8005038:	2b08      	cmp	r3, #8
 800503a:	d06b      	beq.n	8005114 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	2b02      	cmp	r3, #2
 8005042:	d149      	bne.n	80050d8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005044:	4b31      	ldr	r3, [pc, #196]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a30      	ldr	r2, [pc, #192]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 800504a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800504e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005050:	f7fd f856 	bl	8002100 <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005058:	f7fd f852 	bl	8002100 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e087      	b.n	800517a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800506a:	4b28      	ldr	r3, [pc, #160]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1f0      	bne.n	8005058 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69da      	ldr	r2, [r3, #28]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005084:	019b      	lsls	r3, r3, #6
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508c:	085b      	lsrs	r3, r3, #1
 800508e:	3b01      	subs	r3, #1
 8005090:	041b      	lsls	r3, r3, #16
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005098:	061b      	lsls	r3, r3, #24
 800509a:	4313      	orrs	r3, r2
 800509c:	4a1b      	ldr	r2, [pc, #108]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 800509e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80050a2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050a4:	4b19      	ldr	r3, [pc, #100]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a18      	ldr	r2, [pc, #96]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 80050aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b0:	f7fd f826 	bl	8002100 <HAL_GetTick>
 80050b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050b6:	e008      	b.n	80050ca <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050b8:	f7fd f822 	bl	8002100 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e057      	b.n	800517a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ca:	4b10      	ldr	r3, [pc, #64]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d0f0      	beq.n	80050b8 <HAL_RCC_OscConfig+0x478>
 80050d6:	e04f      	b.n	8005178 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050d8:	4b0c      	ldr	r3, [pc, #48]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a0b      	ldr	r2, [pc, #44]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 80050de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e4:	f7fd f80c 	bl	8002100 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ec:	f7fd f808 	bl	8002100 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e03d      	b.n	800517a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050fe:	4b03      	ldr	r3, [pc, #12]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f0      	bne.n	80050ec <HAL_RCC_OscConfig+0x4ac>
 800510a:	e035      	b.n	8005178 <HAL_RCC_OscConfig+0x538>
 800510c:	40023800 	.word	0x40023800
 8005110:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005114:	4b1b      	ldr	r3, [pc, #108]	@ (8005184 <HAL_RCC_OscConfig+0x544>)
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d028      	beq.n	8005174 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800512c:	429a      	cmp	r2, r3
 800512e:	d121      	bne.n	8005174 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800513a:	429a      	cmp	r2, r3
 800513c:	d11a      	bne.n	8005174 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005144:	4013      	ands	r3, r2
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800514a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800514c:	4293      	cmp	r3, r2
 800514e:	d111      	bne.n	8005174 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800515a:	085b      	lsrs	r3, r3, #1
 800515c:	3b01      	subs	r3, #1
 800515e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005160:	429a      	cmp	r2, r3
 8005162:	d107      	bne.n	8005174 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005170:	429a      	cmp	r2, r3
 8005172:	d001      	beq.n	8005178 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e000      	b.n	800517a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3718      	adds	r7, #24
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	40023800 	.word	0x40023800

08005188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005192:	2300      	movs	r3, #0
 8005194:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e0d0      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051a0:	4b6a      	ldr	r3, [pc, #424]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 030f 	and.w	r3, r3, #15
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d910      	bls.n	80051d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ae:	4b67      	ldr	r3, [pc, #412]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f023 020f 	bic.w	r2, r3, #15
 80051b6:	4965      	ldr	r1, [pc, #404]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051be:	4b63      	ldr	r3, [pc, #396]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d001      	beq.n	80051d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e0b8      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d020      	beq.n	800521e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051e8:	4b59      	ldr	r3, [pc, #356]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	4a58      	ldr	r2, [pc, #352]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 80051ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80051f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0308 	and.w	r3, r3, #8
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d005      	beq.n	800520c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005200:	4b53      	ldr	r3, [pc, #332]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	4a52      	ldr	r2, [pc, #328]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 8005206:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800520a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800520c:	4b50      	ldr	r3, [pc, #320]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	494d      	ldr	r1, [pc, #308]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 800521a:	4313      	orrs	r3, r2
 800521c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d040      	beq.n	80052ac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d107      	bne.n	8005242 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005232:	4b47      	ldr	r3, [pc, #284]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d115      	bne.n	800526a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e07f      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2b02      	cmp	r3, #2
 8005248:	d107      	bne.n	800525a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800524a:	4b41      	ldr	r3, [pc, #260]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d109      	bne.n	800526a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e073      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800525a:	4b3d      	ldr	r3, [pc, #244]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e06b      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800526a:	4b39      	ldr	r3, [pc, #228]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f023 0203 	bic.w	r2, r3, #3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	4936      	ldr	r1, [pc, #216]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 8005278:	4313      	orrs	r3, r2
 800527a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800527c:	f7fc ff40 	bl	8002100 <HAL_GetTick>
 8005280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005282:	e00a      	b.n	800529a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005284:	f7fc ff3c 	bl	8002100 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005292:	4293      	cmp	r3, r2
 8005294:	d901      	bls.n	800529a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e053      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800529a:	4b2d      	ldr	r3, [pc, #180]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 020c 	and.w	r2, r3, #12
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d1eb      	bne.n	8005284 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052ac:	4b27      	ldr	r3, [pc, #156]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 030f 	and.w	r3, r3, #15
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d210      	bcs.n	80052dc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ba:	4b24      	ldr	r3, [pc, #144]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f023 020f 	bic.w	r2, r3, #15
 80052c2:	4922      	ldr	r1, [pc, #136]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ca:	4b20      	ldr	r3, [pc, #128]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 030f 	and.w	r3, r3, #15
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d001      	beq.n	80052dc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e032      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d008      	beq.n	80052fa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052e8:	4b19      	ldr	r3, [pc, #100]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	4916      	ldr	r1, [pc, #88]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0308 	and.w	r3, r3, #8
 8005302:	2b00      	cmp	r3, #0
 8005304:	d009      	beq.n	800531a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005306:	4b12      	ldr	r3, [pc, #72]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	490e      	ldr	r1, [pc, #56]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 8005316:	4313      	orrs	r3, r2
 8005318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800531a:	f000 f831 	bl	8005380 <HAL_RCC_GetSysClockFreq>
 800531e:	4602      	mov	r2, r0
 8005320:	4b0b      	ldr	r3, [pc, #44]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	091b      	lsrs	r3, r3, #4
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	490a      	ldr	r1, [pc, #40]	@ (8005354 <HAL_RCC_ClockConfig+0x1cc>)
 800532c:	5ccb      	ldrb	r3, [r1, r3]
 800532e:	fa22 f303 	lsr.w	r3, r2, r3
 8005332:	4a09      	ldr	r2, [pc, #36]	@ (8005358 <HAL_RCC_ClockConfig+0x1d0>)
 8005334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005336:	4b09      	ldr	r3, [pc, #36]	@ (800535c <HAL_RCC_ClockConfig+0x1d4>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4618      	mov	r0, r3
 800533c:	f7fc fe9c 	bl	8002078 <HAL_InitTick>

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	40023c00 	.word	0x40023c00
 8005350:	40023800 	.word	0x40023800
 8005354:	0800e7c8 	.word	0x0800e7c8
 8005358:	20000000 	.word	0x20000000
 800535c:	20000004 	.word	0x20000004

08005360 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8005364:	4b05      	ldr	r3, [pc, #20]	@ (800537c <HAL_RCC_EnableCSS+0x1c>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a04      	ldr	r2, [pc, #16]	@ (800537c <HAL_RCC_EnableCSS+0x1c>)
 800536a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800536e:	6013      	str	r3, [r2, #0]
}
 8005370:	bf00      	nop
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	40023800 	.word	0x40023800

08005380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005384:	b094      	sub	sp, #80	@ 0x50
 8005386:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005388:	2300      	movs	r3, #0
 800538a:	647b      	str	r3, [r7, #68]	@ 0x44
 800538c:	2300      	movs	r3, #0
 800538e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005390:	2300      	movs	r3, #0
 8005392:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8005394:	2300      	movs	r3, #0
 8005396:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005398:	4b79      	ldr	r3, [pc, #484]	@ (8005580 <HAL_RCC_GetSysClockFreq+0x200>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f003 030c 	and.w	r3, r3, #12
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d00d      	beq.n	80053c0 <HAL_RCC_GetSysClockFreq+0x40>
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	f200 80e1 	bhi.w	800556c <HAL_RCC_GetSysClockFreq+0x1ec>
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d002      	beq.n	80053b4 <HAL_RCC_GetSysClockFreq+0x34>
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d003      	beq.n	80053ba <HAL_RCC_GetSysClockFreq+0x3a>
 80053b2:	e0db      	b.n	800556c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053b4:	4b73      	ldr	r3, [pc, #460]	@ (8005584 <HAL_RCC_GetSysClockFreq+0x204>)
 80053b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053b8:	e0db      	b.n	8005572 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053ba:	4b73      	ldr	r3, [pc, #460]	@ (8005588 <HAL_RCC_GetSysClockFreq+0x208>)
 80053bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053be:	e0d8      	b.n	8005572 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053c0:	4b6f      	ldr	r3, [pc, #444]	@ (8005580 <HAL_RCC_GetSysClockFreq+0x200>)
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053c8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80053ca:	4b6d      	ldr	r3, [pc, #436]	@ (8005580 <HAL_RCC_GetSysClockFreq+0x200>)
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d063      	beq.n	800549e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053d6:	4b6a      	ldr	r3, [pc, #424]	@ (8005580 <HAL_RCC_GetSysClockFreq+0x200>)
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	099b      	lsrs	r3, r3, #6
 80053dc:	2200      	movs	r2, #0
 80053de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80053e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80053ea:	2300      	movs	r3, #0
 80053ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80053ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80053f2:	4622      	mov	r2, r4
 80053f4:	462b      	mov	r3, r5
 80053f6:	f04f 0000 	mov.w	r0, #0
 80053fa:	f04f 0100 	mov.w	r1, #0
 80053fe:	0159      	lsls	r1, r3, #5
 8005400:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005404:	0150      	lsls	r0, r2, #5
 8005406:	4602      	mov	r2, r0
 8005408:	460b      	mov	r3, r1
 800540a:	4621      	mov	r1, r4
 800540c:	1a51      	subs	r1, r2, r1
 800540e:	6139      	str	r1, [r7, #16]
 8005410:	4629      	mov	r1, r5
 8005412:	eb63 0301 	sbc.w	r3, r3, r1
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	f04f 0200 	mov.w	r2, #0
 800541c:	f04f 0300 	mov.w	r3, #0
 8005420:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005424:	4659      	mov	r1, fp
 8005426:	018b      	lsls	r3, r1, #6
 8005428:	4651      	mov	r1, sl
 800542a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800542e:	4651      	mov	r1, sl
 8005430:	018a      	lsls	r2, r1, #6
 8005432:	4651      	mov	r1, sl
 8005434:	ebb2 0801 	subs.w	r8, r2, r1
 8005438:	4659      	mov	r1, fp
 800543a:	eb63 0901 	sbc.w	r9, r3, r1
 800543e:	f04f 0200 	mov.w	r2, #0
 8005442:	f04f 0300 	mov.w	r3, #0
 8005446:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800544a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800544e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005452:	4690      	mov	r8, r2
 8005454:	4699      	mov	r9, r3
 8005456:	4623      	mov	r3, r4
 8005458:	eb18 0303 	adds.w	r3, r8, r3
 800545c:	60bb      	str	r3, [r7, #8]
 800545e:	462b      	mov	r3, r5
 8005460:	eb49 0303 	adc.w	r3, r9, r3
 8005464:	60fb      	str	r3, [r7, #12]
 8005466:	f04f 0200 	mov.w	r2, #0
 800546a:	f04f 0300 	mov.w	r3, #0
 800546e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005472:	4629      	mov	r1, r5
 8005474:	024b      	lsls	r3, r1, #9
 8005476:	4621      	mov	r1, r4
 8005478:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800547c:	4621      	mov	r1, r4
 800547e:	024a      	lsls	r2, r1, #9
 8005480:	4610      	mov	r0, r2
 8005482:	4619      	mov	r1, r3
 8005484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005486:	2200      	movs	r2, #0
 8005488:	62bb      	str	r3, [r7, #40]	@ 0x28
 800548a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800548c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005490:	f7fa ff1e 	bl	80002d0 <__aeabi_uldivmod>
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	4613      	mov	r3, r2
 800549a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800549c:	e058      	b.n	8005550 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800549e:	4b38      	ldr	r3, [pc, #224]	@ (8005580 <HAL_RCC_GetSysClockFreq+0x200>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	099b      	lsrs	r3, r3, #6
 80054a4:	2200      	movs	r2, #0
 80054a6:	4618      	mov	r0, r3
 80054a8:	4611      	mov	r1, r2
 80054aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80054ae:	623b      	str	r3, [r7, #32]
 80054b0:	2300      	movs	r3, #0
 80054b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80054b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80054b8:	4642      	mov	r2, r8
 80054ba:	464b      	mov	r3, r9
 80054bc:	f04f 0000 	mov.w	r0, #0
 80054c0:	f04f 0100 	mov.w	r1, #0
 80054c4:	0159      	lsls	r1, r3, #5
 80054c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054ca:	0150      	lsls	r0, r2, #5
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	4641      	mov	r1, r8
 80054d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80054d6:	4649      	mov	r1, r9
 80054d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80054dc:	f04f 0200 	mov.w	r2, #0
 80054e0:	f04f 0300 	mov.w	r3, #0
 80054e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80054e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80054ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80054f0:	ebb2 040a 	subs.w	r4, r2, sl
 80054f4:	eb63 050b 	sbc.w	r5, r3, fp
 80054f8:	f04f 0200 	mov.w	r2, #0
 80054fc:	f04f 0300 	mov.w	r3, #0
 8005500:	00eb      	lsls	r3, r5, #3
 8005502:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005506:	00e2      	lsls	r2, r4, #3
 8005508:	4614      	mov	r4, r2
 800550a:	461d      	mov	r5, r3
 800550c:	4643      	mov	r3, r8
 800550e:	18e3      	adds	r3, r4, r3
 8005510:	603b      	str	r3, [r7, #0]
 8005512:	464b      	mov	r3, r9
 8005514:	eb45 0303 	adc.w	r3, r5, r3
 8005518:	607b      	str	r3, [r7, #4]
 800551a:	f04f 0200 	mov.w	r2, #0
 800551e:	f04f 0300 	mov.w	r3, #0
 8005522:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005526:	4629      	mov	r1, r5
 8005528:	028b      	lsls	r3, r1, #10
 800552a:	4621      	mov	r1, r4
 800552c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005530:	4621      	mov	r1, r4
 8005532:	028a      	lsls	r2, r1, #10
 8005534:	4610      	mov	r0, r2
 8005536:	4619      	mov	r1, r3
 8005538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800553a:	2200      	movs	r2, #0
 800553c:	61bb      	str	r3, [r7, #24]
 800553e:	61fa      	str	r2, [r7, #28]
 8005540:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005544:	f7fa fec4 	bl	80002d0 <__aeabi_uldivmod>
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	4613      	mov	r3, r2
 800554e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005550:	4b0b      	ldr	r3, [pc, #44]	@ (8005580 <HAL_RCC_GetSysClockFreq+0x200>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	0c1b      	lsrs	r3, r3, #16
 8005556:	f003 0303 	and.w	r3, r3, #3
 800555a:	3301      	adds	r3, #1
 800555c:	005b      	lsls	r3, r3, #1
 800555e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005560:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005562:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005564:	fbb2 f3f3 	udiv	r3, r2, r3
 8005568:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800556a:	e002      	b.n	8005572 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800556c:	4b05      	ldr	r3, [pc, #20]	@ (8005584 <HAL_RCC_GetSysClockFreq+0x204>)
 800556e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005572:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005574:	4618      	mov	r0, r3
 8005576:	3750      	adds	r7, #80	@ 0x50
 8005578:	46bd      	mov	sp, r7
 800557a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800557e:	bf00      	nop
 8005580:	40023800 	.word	0x40023800
 8005584:	00f42400 	.word	0x00f42400
 8005588:	007a1200 	.word	0x007a1200

0800558c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005590:	4b03      	ldr	r3, [pc, #12]	@ (80055a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005592:	681b      	ldr	r3, [r3, #0]
}
 8005594:	4618      	mov	r0, r3
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	20000000 	.word	0x20000000

080055a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055a8:	f7ff fff0 	bl	800558c <HAL_RCC_GetHCLKFreq>
 80055ac:	4602      	mov	r2, r0
 80055ae:	4b05      	ldr	r3, [pc, #20]	@ (80055c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	0a9b      	lsrs	r3, r3, #10
 80055b4:	f003 0307 	and.w	r3, r3, #7
 80055b8:	4903      	ldr	r1, [pc, #12]	@ (80055c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055ba:	5ccb      	ldrb	r3, [r1, r3]
 80055bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	40023800 	.word	0x40023800
 80055c8:	0800e7d8 	.word	0x0800e7d8

080055cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055d0:	f7ff ffdc 	bl	800558c <HAL_RCC_GetHCLKFreq>
 80055d4:	4602      	mov	r2, r0
 80055d6:	4b05      	ldr	r3, [pc, #20]	@ (80055ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	0b5b      	lsrs	r3, r3, #13
 80055dc:	f003 0307 	and.w	r3, r3, #7
 80055e0:	4903      	ldr	r1, [pc, #12]	@ (80055f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055e2:	5ccb      	ldrb	r3, [r1, r3]
 80055e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	40023800 	.word	0x40023800
 80055f0:	0800e7d8 	.word	0x0800e7d8

080055f4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80055f8:	4b06      	ldr	r3, [pc, #24]	@ (8005614 <HAL_RCC_NMI_IRQHandler+0x20>)
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005600:	2b80      	cmp	r3, #128	@ 0x80
 8005602:	d104      	bne.n	800560e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005604:	f000 f80a 	bl	800561c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005608:	4b03      	ldr	r3, [pc, #12]	@ (8005618 <HAL_RCC_NMI_IRQHandler+0x24>)
 800560a:	2280      	movs	r2, #128	@ 0x80
 800560c:	701a      	strb	r2, [r3, #0]
  }
}
 800560e:	bf00      	nop
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	40023800 	.word	0x40023800
 8005618:	4002380e 	.word	0x4002380e

0800561c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8005620:	bf00      	nop
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
	...

0800562c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b088      	sub	sp, #32
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005634:	2300      	movs	r3, #0
 8005636:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005638:	2300      	movs	r3, #0
 800563a:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 800563c:	2300      	movs	r3, #0
 800563e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005640:	2300      	movs	r3, #0
 8005642:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b00      	cmp	r3, #0
 800564e:	d012      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005650:	4b65      	ldr	r3, [pc, #404]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	4a64      	ldr	r2, [pc, #400]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005656:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800565a:	6093      	str	r3, [r2, #8]
 800565c:	4b62      	ldr	r3, [pc, #392]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800565e:	689a      	ldr	r2, [r3, #8]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005664:	4960      	ldr	r1, [pc, #384]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005666:	4313      	orrs	r3, r2
 8005668:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8005672:	2301      	movs	r3, #1
 8005674:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d017      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005682:	4b59      	ldr	r3, [pc, #356]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005684:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005688:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005690:	4955      	ldr	r1, [pc, #340]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005692:	4313      	orrs	r3, r2
 8005694:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800569c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056a0:	d101      	bne.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80056a2:	2301      	movs	r3, #1
 80056a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80056ae:	2301      	movs	r3, #1
 80056b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d017      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80056be:	4b4a      	ldr	r3, [pc, #296]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056c4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056cc:	4946      	ldr	r1, [pc, #280]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056dc:	d101      	bne.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80056de:	2301      	movs	r3, #1
 80056e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80056ea:	2301      	movs	r3, #1
 80056ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0320 	and.w	r3, r3, #32
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 808b 	beq.w	8005812 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056fc:	4b3a      	ldr	r3, [pc, #232]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005700:	4a39      	ldr	r2, [pc, #228]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005702:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005706:	6413      	str	r3, [r2, #64]	@ 0x40
 8005708:	4b37      	ldr	r3, [pc, #220]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800570a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005710:	60fb      	str	r3, [r7, #12]
 8005712:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005714:	4b35      	ldr	r3, [pc, #212]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a34      	ldr	r2, [pc, #208]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800571a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800571e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005720:	f7fc fcee 	bl	8002100 <HAL_GetTick>
 8005724:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005726:	e008      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005728:	f7fc fcea 	bl	8002100 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b64      	cmp	r3, #100	@ 0x64
 8005734:	d901      	bls.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e2bc      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800573a:	4b2c      	ldr	r3, [pc, #176]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0f0      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005746:	4b28      	ldr	r3, [pc, #160]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800574a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800574e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d035      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800575a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	429a      	cmp	r2, r3
 8005762:	d02e      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005764:	4b20      	ldr	r3, [pc, #128]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005768:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800576c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800576e:	4b1e      	ldr	r3, [pc, #120]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005772:	4a1d      	ldr	r2, [pc, #116]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005774:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005778:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800577a:	4b1b      	ldr	r3, [pc, #108]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800577c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800577e:	4a1a      	ldr	r2, [pc, #104]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005780:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005784:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005786:	4a18      	ldr	r2, [pc, #96]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800578c:	4b16      	ldr	r3, [pc, #88]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800578e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b01      	cmp	r3, #1
 8005796:	d114      	bne.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005798:	f7fc fcb2 	bl	8002100 <HAL_GetTick>
 800579c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800579e:	e00a      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057a0:	f7fc fcae 	bl	8002100 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d901      	bls.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e27e      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057b6:	4b0c      	ldr	r3, [pc, #48]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d0ee      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057ce:	d111      	bne.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80057d0:	4b05      	ldr	r3, [pc, #20]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80057dc:	4b04      	ldr	r3, [pc, #16]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80057de:	400b      	ands	r3, r1
 80057e0:	4901      	ldr	r1, [pc, #4]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	608b      	str	r3, [r1, #8]
 80057e6:	e00b      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80057e8:	40023800 	.word	0x40023800
 80057ec:	40007000 	.word	0x40007000
 80057f0:	0ffffcff 	.word	0x0ffffcff
 80057f4:	4ba4      	ldr	r3, [pc, #656]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	4aa3      	ldr	r2, [pc, #652]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80057fa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80057fe:	6093      	str	r3, [r2, #8]
 8005800:	4ba1      	ldr	r3, [pc, #644]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005802:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800580c:	499e      	ldr	r1, [pc, #632]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800580e:	4313      	orrs	r3, r2
 8005810:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0310 	and.w	r3, r3, #16
 800581a:	2b00      	cmp	r3, #0
 800581c:	d010      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800581e:	4b9a      	ldr	r3, [pc, #616]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005820:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005824:	4a98      	ldr	r2, [pc, #608]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005826:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800582a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800582e:	4b96      	ldr	r3, [pc, #600]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005830:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005838:	4993      	ldr	r1, [pc, #588]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800583a:	4313      	orrs	r3, r2
 800583c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00a      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800584c:	4b8e      	ldr	r3, [pc, #568]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800584e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005852:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800585a:	498b      	ldr	r1, [pc, #556]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800585c:	4313      	orrs	r3, r2
 800585e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00a      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800586e:	4b86      	ldr	r3, [pc, #536]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005874:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800587c:	4982      	ldr	r1, [pc, #520]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800587e:	4313      	orrs	r3, r2
 8005880:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00a      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005890:	4b7d      	ldr	r3, [pc, #500]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005896:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800589e:	497a      	ldr	r1, [pc, #488]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00a      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058b2:	4b75      	ldr	r3, [pc, #468]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80058b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058b8:	f023 0203 	bic.w	r2, r3, #3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c0:	4971      	ldr	r1, [pc, #452]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00a      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058d4:	4b6c      	ldr	r3, [pc, #432]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80058d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058da:	f023 020c 	bic.w	r2, r3, #12
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e2:	4969      	ldr	r1, [pc, #420]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00a      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058f6:	4b64      	ldr	r3, [pc, #400]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80058f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058fc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005904:	4960      	ldr	r1, [pc, #384]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005906:	4313      	orrs	r3, r2
 8005908:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00a      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005918:	4b5b      	ldr	r3, [pc, #364]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800591a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800591e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005926:	4958      	ldr	r1, [pc, #352]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005928:	4313      	orrs	r3, r2
 800592a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00a      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800593a:	4b53      	ldr	r3, [pc, #332]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800593c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005940:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005948:	494f      	ldr	r1, [pc, #316]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800594a:	4313      	orrs	r3, r2
 800594c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00a      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800595c:	4b4a      	ldr	r3, [pc, #296]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800595e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005962:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800596a:	4947      	ldr	r1, [pc, #284]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800596c:	4313      	orrs	r3, r2
 800596e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00a      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800597e:	4b42      	ldr	r3, [pc, #264]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005984:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800598c:	493e      	ldr	r1, [pc, #248]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800598e:	4313      	orrs	r3, r2
 8005990:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00a      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80059a0:	4b39      	ldr	r3, [pc, #228]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80059a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059a6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ae:	4936      	ldr	r1, [pc, #216]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d011      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80059c2:	4b31      	ldr	r3, [pc, #196]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80059c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059c8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059d0:	492d      	ldr	r1, [pc, #180]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059e0:	d101      	bne.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80059e2:	2301      	movs	r3, #1
 80059e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00a      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059f2:	4b25      	ldr	r3, [pc, #148]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80059f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059f8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a00:	4921      	ldr	r1, [pc, #132]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00a      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a14:	4b1c      	ldr	r3, [pc, #112]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a1a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a22:	4919      	ldr	r1, [pc, #100]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00a      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005a36:	4b14      	ldr	r3, [pc, #80]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a3c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a44:	4910      	ldr	r1, [pc, #64]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d006      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f000 809d 	beq.w	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a60:	4b09      	ldr	r3, [pc, #36]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a08      	ldr	r2, [pc, #32]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a66:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005a6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a6c:	f7fc fb48 	bl	8002100 <HAL_GetTick>
 8005a70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a72:	e00b      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a74:	f7fc fb44 	bl	8002100 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b64      	cmp	r3, #100	@ 0x64
 8005a80:	d904      	bls.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e116      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8005a86:	bf00      	nop
 8005a88:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a8c:	4b8b      	ldr	r3, [pc, #556]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1ed      	bne.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d017      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d113      	bne.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005aac:	4b83      	ldr	r3, [pc, #524]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ab2:	0e1b      	lsrs	r3, r3, #24
 8005ab4:	f003 030f 	and.w	r3, r3, #15
 8005ab8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	019a      	lsls	r2, r3, #6
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	061b      	lsls	r3, r3, #24
 8005ac4:	431a      	orrs	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	071b      	lsls	r3, r3, #28
 8005acc:	497b      	ldr	r1, [pc, #492]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d004      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ae4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ae8:	d00a      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d024      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005afa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005afe:	d11f      	bne.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b00:	4b6e      	ldr	r3, [pc, #440]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b06:	0f1b      	lsrs	r3, r3, #28
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	019a      	lsls	r2, r3, #6
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	061b      	lsls	r3, r3, #24
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	071b      	lsls	r3, r3, #28
 8005b20:	4966      	ldr	r1, [pc, #408]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b28:	4b64      	ldr	r3, [pc, #400]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b2e:	f023 021f 	bic.w	r2, r3, #31
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	4960      	ldr	r1, [pc, #384]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00d      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	019a      	lsls	r2, r3, #6
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	061b      	lsls	r3, r3, #24
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	071b      	lsls	r3, r3, #28
 8005b60:	4956      	ldr	r1, [pc, #344]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b68:	4b54      	ldr	r3, [pc, #336]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a53      	ldr	r2, [pc, #332]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005b6e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b74:	f7fc fac4 	bl	8002100 <HAL_GetTick>
 8005b78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b7a:	e008      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b7c:	f7fc fac0 	bl	8002100 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	2b64      	cmp	r3, #100	@ 0x64
 8005b88:	d901      	bls.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e092      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b8e:	4b4b      	ldr	r3, [pc, #300]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d0f0      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	f040 8088 	bne.w	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005ba2:	4b46      	ldr	r3, [pc, #280]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a45      	ldr	r2, [pc, #276]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005ba8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bae:	f7fc faa7 	bl	8002100 <HAL_GetTick>
 8005bb2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005bb4:	e008      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005bb6:	f7fc faa3 	bl	8002100 <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	2b64      	cmp	r3, #100	@ 0x64
 8005bc2:	d901      	bls.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e075      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005bc8:	4b3c      	ldr	r3, [pc, #240]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005bd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bd4:	d0ef      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d009      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d024      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d120      	bne.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c04:	0c1b      	lsrs	r3, r3, #16
 8005c06:	f003 0303 	and.w	r3, r3, #3
 8005c0a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	019a      	lsls	r2, r3, #6
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	041b      	lsls	r3, r3, #16
 8005c16:	431a      	orrs	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	061b      	lsls	r3, r3, #24
 8005c1e:	4927      	ldr	r1, [pc, #156]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005c26:	4b25      	ldr	r3, [pc, #148]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c2c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	3b01      	subs	r3, #1
 8005c36:	021b      	lsls	r3, r3, #8
 8005c38:	4920      	ldr	r1, [pc, #128]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d018      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x652>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c54:	d113      	bne.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c56:	4b19      	ldr	r3, [pc, #100]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c5c:	0e1b      	lsrs	r3, r3, #24
 8005c5e:	f003 030f 	and.w	r3, r3, #15
 8005c62:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	019a      	lsls	r2, r3, #6
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	041b      	lsls	r3, r3, #16
 8005c70:	431a      	orrs	r2, r3
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	061b      	lsls	r3, r3, #24
 8005c76:	4911      	ldr	r1, [pc, #68]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a0e      	ldr	r2, [pc, #56]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005c84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c8a:	f7fc fa39 	bl	8002100 <HAL_GetTick>
 8005c8e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c90:	e008      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c92:	f7fc fa35 	bl	8002100 <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	2b64      	cmp	r3, #100	@ 0x64
 8005c9e:	d901      	bls.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e007      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ca4:	4b05      	ldr	r3, [pc, #20]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005cac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cb0:	d1ef      	bne.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3720      	adds	r7, #32
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	40023800 	.word	0x40023800

08005cc0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e022      	b.n	8005d18 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d105      	bne.n	8005cea <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7fb fc41 	bl	800156c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2203      	movs	r2, #3
 8005cee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f814 	bl	8005d20 <HAL_SD_InitCard>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d001      	beq.n	8005d02 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e00a      	b.n	8005d18 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3708      	adds	r7, #8
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005d20:	b5b0      	push	{r4, r5, r7, lr}
 8005d22:	b08e      	sub	sp, #56	@ 0x38
 8005d24:	af04      	add	r7, sp, #16
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005d30:	2300      	movs	r3, #0
 8005d32:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005d34:	2300      	movs	r3, #0
 8005d36:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8005d3c:	2376      	movs	r3, #118	@ 0x76
 8005d3e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681d      	ldr	r5, [r3, #0]
 8005d44:	466c      	mov	r4, sp
 8005d46:	f107 0314 	add.w	r3, r7, #20
 8005d4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005d4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005d52:	f107 0308 	add.w	r3, r7, #8
 8005d56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d58:	4628      	mov	r0, r5
 8005d5a:	f002 ffc3 	bl	8008ce4 <SDMMC_Init>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8005d64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d001      	beq.n	8005d70 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e059      	b.n	8005e24 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d7e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4618      	mov	r0, r3
 8005d86:	f002 fff7 	bl	8008d78 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d98:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8005d9a:	2002      	movs	r0, #2
 8005d9c:	f7fc f9bc 	bl	8002118 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 ff01 	bl	8006ba8 <SD_PowerON>
 8005da6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005da8:	6a3b      	ldr	r3, [r7, #32]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00b      	beq.n	8005dc6 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e02e      	b.n	8005e24 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fe20 	bl	8006a0c <SD_InitCard>
 8005dcc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00b      	beq.n	8005dec <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005de0:	6a3b      	ldr	r3, [r7, #32]
 8005de2:	431a      	orrs	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e01b      	b.n	8005e24 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005df4:	4618      	mov	r0, r3
 8005df6:	f003 f851 	bl	8008e9c <SDMMC_CmdBlockLength>
 8005dfa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00f      	beq.n	8005e22 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a09      	ldr	r2, [pc, #36]	@ (8005e2c <HAL_SD_InitCard+0x10c>)
 8005e08:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	431a      	orrs	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e000      	b.n	8005e24 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3728      	adds	r7, #40	@ 0x28
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bdb0      	pop	{r4, r5, r7, pc}
 8005e2c:	004005ff 	.word	0x004005ff

08005e30 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b092      	sub	sp, #72	@ 0x48
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
 8005e3c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005e3e:	f7fc f95f 	bl	8002100 <HAL_GetTick>
 8005e42:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d107      	bne.n	8005e62 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e56:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e1bd      	b.n	80061de <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	f040 81b0 	bne.w	80061d0 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005e76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	441a      	add	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d907      	bls.n	8005e94 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e88:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e1a4      	b.n	80061de <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2203      	movs	r2, #3
 8005e98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d002      	beq.n	8005eb2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eae:	025b      	lsls	r3, r3, #9
 8005eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005eb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005eb6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	025b      	lsls	r3, r3, #9
 8005ebc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005ebe:	2390      	movs	r3, #144	@ 0x90
 8005ec0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f107 0214 	add.w	r2, r7, #20
 8005ed6:	4611      	mov	r1, r2
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f002 ffb3 	bl	8008e44 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d90a      	bls.n	8005efa <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f003 f817 	bl	8008f24 <SDMMC_CmdReadMultiBlock>
 8005ef6:	6478      	str	r0, [r7, #68]	@ 0x44
 8005ef8:	e009      	b.n	8005f0e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2201      	movs	r2, #1
 8005efe:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005f06:	4618      	mov	r0, r3
 8005f08:	f002 ffea 	bl	8008ee0 <SDMMC_CmdReadSingleBlock>
 8005f0c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d012      	beq.n	8005f3a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a7a      	ldr	r2, [pc, #488]	@ (8006104 <HAL_SD_ReadBlocks+0x2d4>)
 8005f1a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f22:	431a      	orrs	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e151      	b.n	80061de <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005f3e:	e061      	b.n	8006004 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d03c      	beq.n	8005fc8 <HAL_SD_ReadBlocks+0x198>
 8005f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d039      	beq.n	8005fc8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005f54:	2300      	movs	r3, #0
 8005f56:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f58:	e033      	b.n	8005fc2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f002 feec 	bl	8008d3c <SDMMC_ReadFIFO>
 8005f64:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f6c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f70:	3301      	adds	r3, #1
 8005f72:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005f74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f76:	3b01      	subs	r3, #1
 8005f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f7c:	0a1b      	lsrs	r3, r3, #8
 8005f7e:	b2da      	uxtb	r2, r3
 8005f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f82:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f86:	3301      	adds	r3, #1
 8005f88:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f92:	0c1b      	lsrs	r3, r3, #16
 8005f94:	b2da      	uxtb	r2, r3
 8005f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f98:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005f9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa8:	0e1b      	lsrs	r3, r3, #24
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fae:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8005fbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fc4:	2b07      	cmp	r3, #7
 8005fc6:	d9c8      	bls.n	8005f5a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005fc8:	f7fc f89a 	bl	8002100 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d902      	bls.n	8005fde <HAL_SD_ReadBlocks+0x1ae>
 8005fd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d112      	bne.n	8006004 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a48      	ldr	r2, [pc, #288]	@ (8006104 <HAL_SD_ReadBlocks+0x2d4>)
 8005fe4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fea:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e0ec      	b.n	80061de <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800600a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800600e:	2b00      	cmp	r3, #0
 8006010:	d096      	beq.n	8005f40 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800601c:	2b00      	cmp	r3, #0
 800601e:	d022      	beq.n	8006066 <HAL_SD_ReadBlocks+0x236>
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d91f      	bls.n	8006066 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800602a:	2b03      	cmp	r3, #3
 800602c:	d01b      	beq.n	8006066 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4618      	mov	r0, r3
 8006034:	f002 ffdc 	bl	8008ff0 <SDMMC_CmdStopTransfer>
 8006038:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800603a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800603c:	2b00      	cmp	r3, #0
 800603e:	d012      	beq.n	8006066 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a2f      	ldr	r2, [pc, #188]	@ (8006104 <HAL_SD_ReadBlocks+0x2d4>)
 8006046:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800604c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800604e:	431a      	orrs	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e0bb      	b.n	80061de <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800606c:	f003 0308 	and.w	r3, r3, #8
 8006070:	2b00      	cmp	r3, #0
 8006072:	d012      	beq.n	800609a <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a22      	ldr	r2, [pc, #136]	@ (8006104 <HAL_SD_ReadBlocks+0x2d4>)
 800607a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006080:	f043 0208 	orr.w	r2, r3, #8
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e0a1      	b.n	80061de <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060a0:	f003 0302 	and.w	r3, r3, #2
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d012      	beq.n	80060ce <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a15      	ldr	r2, [pc, #84]	@ (8006104 <HAL_SD_ReadBlocks+0x2d4>)
 80060ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b4:	f043 0202 	orr.w	r2, r3, #2
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e087      	b.n	80061de <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060d4:	f003 0320 	and.w	r3, r3, #32
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d064      	beq.n	80061a6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a08      	ldr	r2, [pc, #32]	@ (8006104 <HAL_SD_ReadBlocks+0x2d4>)
 80060e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e8:	f043 0220 	orr.w	r2, r3, #32
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e06d      	b.n	80061de <HAL_SD_ReadBlocks+0x3ae>
 8006102:	bf00      	nop
 8006104:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4618      	mov	r0, r3
 800610e:	f002 fe15 	bl	8008d3c <SDMMC_ReadFIFO>
 8006112:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006116:	b2da      	uxtb	r2, r3
 8006118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800611a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800611c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800611e:	3301      	adds	r3, #1
 8006120:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006124:	3b01      	subs	r3, #1
 8006126:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800612a:	0a1b      	lsrs	r3, r3, #8
 800612c:	b2da      	uxtb	r2, r3
 800612e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006130:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006134:	3301      	adds	r3, #1
 8006136:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006138:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800613a:	3b01      	subs	r3, #1
 800613c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800613e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006140:	0c1b      	lsrs	r3, r3, #16
 8006142:	b2da      	uxtb	r2, r3
 8006144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006146:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800614a:	3301      	adds	r3, #1
 800614c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800614e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006150:	3b01      	subs	r3, #1
 8006152:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006156:	0e1b      	lsrs	r3, r3, #24
 8006158:	b2da      	uxtb	r2, r3
 800615a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800615c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800615e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006160:	3301      	adds	r3, #1
 8006162:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006166:	3b01      	subs	r3, #1
 8006168:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800616a:	f7fb ffc9 	bl	8002100 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006176:	429a      	cmp	r2, r3
 8006178:	d902      	bls.n	8006180 <HAL_SD_ReadBlocks+0x350>
 800617a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800617c:	2b00      	cmp	r3, #0
 800617e:	d112      	bne.n	80061a6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a18      	ldr	r2, [pc, #96]	@ (80061e8 <HAL_SD_ReadBlocks+0x3b8>)
 8006186:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800618c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e01b      	b.n	80061de <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d002      	beq.n	80061ba <HAL_SD_ReadBlocks+0x38a>
 80061b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1a6      	bne.n	8006108 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f240 523a 	movw	r2, #1338	@ 0x53a
 80061c2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80061cc:	2300      	movs	r3, #0
 80061ce:	e006      	b.n	80061de <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
  }
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3748      	adds	r7, #72	@ 0x48
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	004005ff 	.word	0x004005ff

080061ec <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b092      	sub	sp, #72	@ 0x48
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
 80061f8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80061fa:	f7fb ff81 	bl	8002100 <HAL_GetTick>
 80061fe:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d107      	bne.n	800621e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006212:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e165      	b.n	80064ea <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b01      	cmp	r3, #1
 8006228:	f040 8158 	bne.w	80064dc <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006232:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	441a      	add	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800623c:	429a      	cmp	r2, r3
 800623e:	d907      	bls.n	8006250 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006244:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e14c      	b.n	80064ea <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2203      	movs	r2, #3
 8006254:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2200      	movs	r2, #0
 800625e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006264:	2b01      	cmp	r3, #1
 8006266:	d002      	beq.n	800626e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800626a:	025b      	lsls	r3, r3, #9
 800626c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800626e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006272:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	025b      	lsls	r3, r3, #9
 8006278:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800627a:	2390      	movs	r3, #144	@ 0x90
 800627c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800627e:	2300      	movs	r3, #0
 8006280:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006282:	2300      	movs	r3, #0
 8006284:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8006286:	2301      	movs	r3, #1
 8006288:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f107 0218 	add.w	r2, r7, #24
 8006292:	4611      	mov	r1, r2
 8006294:	4618      	mov	r0, r3
 8006296:	f002 fdd5 	bl	8008e44 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d90a      	bls.n	80062b6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2220      	movs	r2, #32
 80062a4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80062ac:	4618      	mov	r0, r3
 80062ae:	f002 fe7d 	bl	8008fac <SDMMC_CmdWriteMultiBlock>
 80062b2:	6478      	str	r0, [r7, #68]	@ 0x44
 80062b4:	e009      	b.n	80062ca <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2210      	movs	r2, #16
 80062ba:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80062c2:	4618      	mov	r0, r3
 80062c4:	f002 fe50 	bl	8008f68 <SDMMC_CmdWriteSingleBlock>
 80062c8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80062ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d012      	beq.n	80062f6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a87      	ldr	r2, [pc, #540]	@ (80064f4 <HAL_SD_WriteBlocks+0x308>)
 80062d6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062de:	431a      	orrs	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e0f9      	b.n	80064ea <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80062fa:	e065      	b.n	80063c8 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006302:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d040      	beq.n	800638c <HAL_SD_WriteBlocks+0x1a0>
 800630a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800630c:	2b00      	cmp	r3, #0
 800630e:	d03d      	beq.n	800638c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006310:	2300      	movs	r3, #0
 8006312:	643b      	str	r3, [r7, #64]	@ 0x40
 8006314:	e037      	b.n	8006386 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8006316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800631c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800631e:	3301      	adds	r3, #1
 8006320:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006324:	3b01      	subs	r3, #1
 8006326:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	021a      	lsls	r2, r3, #8
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	4313      	orrs	r3, r2
 8006332:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006336:	3301      	adds	r3, #1
 8006338:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800633a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800633c:	3b01      	subs	r3, #1
 800633e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	041a      	lsls	r2, r3, #16
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	4313      	orrs	r3, r2
 800634a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800634c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800634e:	3301      	adds	r3, #1
 8006350:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006354:	3b01      	subs	r3, #1
 8006356:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	061a      	lsls	r2, r3, #24
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	4313      	orrs	r3, r2
 8006362:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006366:	3301      	adds	r3, #1
 8006368:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800636a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800636c:	3b01      	subs	r3, #1
 800636e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f107 0214 	add.w	r2, r7, #20
 8006378:	4611      	mov	r1, r2
 800637a:	4618      	mov	r0, r3
 800637c:	f002 fceb 	bl	8008d56 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006380:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006382:	3301      	adds	r3, #1
 8006384:	643b      	str	r3, [r7, #64]	@ 0x40
 8006386:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006388:	2b07      	cmp	r3, #7
 800638a:	d9c4      	bls.n	8006316 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800638c:	f7fb feb8 	bl	8002100 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006398:	429a      	cmp	r2, r3
 800639a:	d902      	bls.n	80063a2 <HAL_SD_WriteBlocks+0x1b6>
 800639c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d112      	bne.n	80063c8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a53      	ldr	r2, [pc, #332]	@ (80064f4 <HAL_SD_WriteBlocks+0x308>)
 80063a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063b0:	431a      	orrs	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e090      	b.n	80064ea <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063ce:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d092      	beq.n	80062fc <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d022      	beq.n	800642a <HAL_SD_WriteBlocks+0x23e>
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d91f      	bls.n	800642a <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ee:	2b03      	cmp	r3, #3
 80063f0:	d01b      	beq.n	800642a <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f002 fdfa 	bl	8008ff0 <SDMMC_CmdStopTransfer>
 80063fc:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80063fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006400:	2b00      	cmp	r3, #0
 8006402:	d012      	beq.n	800642a <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a3a      	ldr	r2, [pc, #232]	@ (80064f4 <HAL_SD_WriteBlocks+0x308>)
 800640a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006410:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006412:	431a      	orrs	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e05f      	b.n	80064ea <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006430:	f003 0308 	and.w	r3, r3, #8
 8006434:	2b00      	cmp	r3, #0
 8006436:	d012      	beq.n	800645e <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a2d      	ldr	r2, [pc, #180]	@ (80064f4 <HAL_SD_WriteBlocks+0x308>)
 800643e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006444:	f043 0208 	orr.w	r2, r3, #8
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e045      	b.n	80064ea <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006464:	f003 0302 	and.w	r3, r3, #2
 8006468:	2b00      	cmp	r3, #0
 800646a:	d012      	beq.n	8006492 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a20      	ldr	r2, [pc, #128]	@ (80064f4 <HAL_SD_WriteBlocks+0x308>)
 8006472:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006478:	f043 0202 	orr.w	r2, r3, #2
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e02b      	b.n	80064ea <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006498:	f003 0310 	and.w	r3, r3, #16
 800649c:	2b00      	cmp	r3, #0
 800649e:	d012      	beq.n	80064c6 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a13      	ldr	r2, [pc, #76]	@ (80064f4 <HAL_SD_WriteBlocks+0x308>)
 80064a6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ac:	f043 0210 	orr.w	r2, r3, #16
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e011      	b.n	80064ea <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f240 523a 	movw	r2, #1338	@ 0x53a
 80064ce:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80064d8:	2300      	movs	r3, #0
 80064da:	e006      	b.n	80064ea <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
  }
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3748      	adds	r7, #72	@ 0x48
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	004005ff 	.word	0x004005ff

080064f8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006506:	0f9b      	lsrs	r3, r3, #30
 8006508:	b2da      	uxtb	r2, r3
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006512:	0e9b      	lsrs	r3, r3, #26
 8006514:	b2db      	uxtb	r3, r3
 8006516:	f003 030f 	and.w	r3, r3, #15
 800651a:	b2da      	uxtb	r2, r3
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006524:	0e1b      	lsrs	r3, r3, #24
 8006526:	b2db      	uxtb	r3, r3
 8006528:	f003 0303 	and.w	r3, r3, #3
 800652c:	b2da      	uxtb	r2, r3
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006536:	0c1b      	lsrs	r3, r3, #16
 8006538:	b2da      	uxtb	r2, r3
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006542:	0a1b      	lsrs	r3, r3, #8
 8006544:	b2da      	uxtb	r2, r3
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800654e:	b2da      	uxtb	r2, r3
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006558:	0d1b      	lsrs	r3, r3, #20
 800655a:	b29a      	uxth	r2, r3
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006564:	0c1b      	lsrs	r3, r3, #16
 8006566:	b2db      	uxtb	r3, r3
 8006568:	f003 030f 	and.w	r3, r3, #15
 800656c:	b2da      	uxtb	r2, r3
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006576:	0bdb      	lsrs	r3, r3, #15
 8006578:	b2db      	uxtb	r3, r3
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	b2da      	uxtb	r2, r3
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006588:	0b9b      	lsrs	r3, r3, #14
 800658a:	b2db      	uxtb	r3, r3
 800658c:	f003 0301 	and.w	r3, r3, #1
 8006590:	b2da      	uxtb	r2, r3
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800659a:	0b5b      	lsrs	r3, r3, #13
 800659c:	b2db      	uxtb	r3, r3
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065ac:	0b1b      	lsrs	r3, r3, #12
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	2200      	movs	r2, #0
 80065be:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d163      	bne.n	8006690 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065cc:	009a      	lsls	r2, r3, #2
 80065ce:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80065d2:	4013      	ands	r3, r2
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80065d8:	0f92      	lsrs	r2, r2, #30
 80065da:	431a      	orrs	r2, r3
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065e4:	0edb      	lsrs	r3, r3, #27
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	f003 0307 	and.w	r3, r3, #7
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065f6:	0e1b      	lsrs	r3, r3, #24
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	f003 0307 	and.w	r3, r3, #7
 80065fe:	b2da      	uxtb	r2, r3
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006608:	0d5b      	lsrs	r3, r3, #21
 800660a:	b2db      	uxtb	r3, r3
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	b2da      	uxtb	r2, r3
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800661a:	0c9b      	lsrs	r3, r3, #18
 800661c:	b2db      	uxtb	r3, r3
 800661e:	f003 0307 	and.w	r3, r3, #7
 8006622:	b2da      	uxtb	r2, r3
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800662c:	0bdb      	lsrs	r3, r3, #15
 800662e:	b2db      	uxtb	r3, r3
 8006630:	f003 0307 	and.w	r3, r3, #7
 8006634:	b2da      	uxtb	r2, r3
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	1c5a      	adds	r2, r3, #1
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	7e1b      	ldrb	r3, [r3, #24]
 8006648:	b2db      	uxtb	r3, r3
 800664a:	f003 0307 	and.w	r3, r3, #7
 800664e:	3302      	adds	r3, #2
 8006650:	2201      	movs	r2, #1
 8006652:	fa02 f303 	lsl.w	r3, r2, r3
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800665a:	fb03 f202 	mul.w	r2, r3, r2
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	7a1b      	ldrb	r3, [r3, #8]
 8006666:	b2db      	uxtb	r3, r3
 8006668:	f003 030f 	and.w	r3, r3, #15
 800666c:	2201      	movs	r2, #1
 800666e:	409a      	lsls	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800667c:	0a52      	lsrs	r2, r2, #9
 800667e:	fb03 f202 	mul.w	r2, r3, r2
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800668c:	661a      	str	r2, [r3, #96]	@ 0x60
 800668e:	e031      	b.n	80066f4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006694:	2b01      	cmp	r3, #1
 8006696:	d11d      	bne.n	80066d4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800669c:	041b      	lsls	r3, r3, #16
 800669e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066a6:	0c1b      	lsrs	r3, r3, #16
 80066a8:	431a      	orrs	r2, r3
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	3301      	adds	r3, #1
 80066b4:	029a      	lsls	r2, r3, #10
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066c8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	661a      	str	r2, [r3, #96]	@ 0x60
 80066d2:	e00f      	b.n	80066f4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a58      	ldr	r2, [pc, #352]	@ (800683c <HAL_SD_GetCardCSD+0x344>)
 80066da:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e09d      	b.n	8006830 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066f8:	0b9b      	lsrs	r3, r3, #14
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	b2da      	uxtb	r2, r3
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800670a:	09db      	lsrs	r3, r3, #7
 800670c:	b2db      	uxtb	r3, r3
 800670e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006712:	b2da      	uxtb	r2, r3
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800671c:	b2db      	uxtb	r3, r3
 800671e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006722:	b2da      	uxtb	r2, r3
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800672c:	0fdb      	lsrs	r3, r3, #31
 800672e:	b2da      	uxtb	r2, r3
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006738:	0f5b      	lsrs	r3, r3, #29
 800673a:	b2db      	uxtb	r3, r3
 800673c:	f003 0303 	and.w	r3, r3, #3
 8006740:	b2da      	uxtb	r2, r3
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800674a:	0e9b      	lsrs	r3, r3, #26
 800674c:	b2db      	uxtb	r3, r3
 800674e:	f003 0307 	and.w	r3, r3, #7
 8006752:	b2da      	uxtb	r2, r3
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800675c:	0d9b      	lsrs	r3, r3, #22
 800675e:	b2db      	uxtb	r3, r3
 8006760:	f003 030f 	and.w	r3, r3, #15
 8006764:	b2da      	uxtb	r2, r3
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800676e:	0d5b      	lsrs	r3, r3, #21
 8006770:	b2db      	uxtb	r3, r3
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	b2da      	uxtb	r2, r3
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800678a:	0c1b      	lsrs	r3, r3, #16
 800678c:	b2db      	uxtb	r3, r3
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	b2da      	uxtb	r2, r3
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800679e:	0bdb      	lsrs	r3, r3, #15
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067b2:	0b9b      	lsrs	r3, r3, #14
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067c6:	0b5b      	lsrs	r3, r3, #13
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067da:	0b1b      	lsrs	r3, r3, #12
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067ee:	0a9b      	lsrs	r3, r3, #10
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	f003 0303 	and.w	r3, r3, #3
 80067f6:	b2da      	uxtb	r2, r3
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006802:	0a1b      	lsrs	r3, r3, #8
 8006804:	b2db      	uxtb	r3, r3
 8006806:	f003 0303 	and.w	r3, r3, #3
 800680a:	b2da      	uxtb	r2, r3
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006816:	085b      	lsrs	r3, r3, #1
 8006818:	b2db      	uxtb	r3, r3
 800681a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800681e:	b2da      	uxtb	r2, r3
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	004005ff 	.word	0x004005ff

08006840 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006898:	b5b0      	push	{r4, r5, r7, lr}
 800689a:	b08e      	sub	sp, #56	@ 0x38
 800689c:	af04      	add	r7, sp, #16
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80068a2:	2300      	movs	r3, #0
 80068a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2203      	movs	r2, #3
 80068ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068b4:	2b03      	cmp	r3, #3
 80068b6:	d02e      	beq.n	8006916 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068be:	d106      	bne.n	80068ce <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80068cc:	e029      	b.n	8006922 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068d4:	d10a      	bne.n	80068ec <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fa1c 	bl	8006d14 <SD_WideBus_Enable>
 80068dc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068e2:	6a3b      	ldr	r3, [r7, #32]
 80068e4:	431a      	orrs	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80068ea:	e01a      	b.n	8006922 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d10a      	bne.n	8006908 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fa59 	bl	8006daa <SD_WideBus_Disable>
 80068f8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068fe:	6a3b      	ldr	r3, [r7, #32]
 8006900:	431a      	orrs	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	639a      	str	r2, [r3, #56]	@ 0x38
 8006906:	e00c      	b.n	8006922 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800690c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	639a      	str	r2, [r3, #56]	@ 0x38
 8006914:	e005      	b.n	8006922 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800691a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00b      	beq.n	8006942 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a26      	ldr	r2, [pc, #152]	@ (80069c8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006930:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006940:	e01f      	b.n	8006982 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681d      	ldr	r5, [r3, #0]
 8006968:	466c      	mov	r4, sp
 800696a:	f107 0314 	add.w	r3, r7, #20
 800696e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006972:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006976:	f107 0308 	add.w	r3, r7, #8
 800697a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800697c:	4628      	mov	r0, r5
 800697e:	f002 f9b1 	bl	8008ce4 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800698a:	4618      	mov	r0, r3
 800698c:	f002 fa86 	bl	8008e9c <SDMMC_CmdBlockLength>
 8006990:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006992:	6a3b      	ldr	r3, [r7, #32]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00c      	beq.n	80069b2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a0a      	ldr	r2, [pc, #40]	@ (80069c8 <HAL_SD_ConfigWideBusOperation+0x130>)
 800699e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069a4:	6a3b      	ldr	r3, [r7, #32]
 80069a6:	431a      	orrs	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 80069ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3728      	adds	r7, #40	@ 0x28
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bdb0      	pop	{r4, r5, r7, pc}
 80069c6:	bf00      	nop
 80069c8:	004005ff 	.word	0x004005ff

080069cc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80069d4:	2300      	movs	r3, #0
 80069d6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80069d8:	f107 030c 	add.w	r3, r7, #12
 80069dc:	4619      	mov	r1, r3
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f970 	bl	8006cc4 <SD_SendStatus>
 80069e4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d005      	beq.n	80069f8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	431a      	orrs	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	0a5b      	lsrs	r3, r3, #9
 80069fc:	f003 030f 	and.w	r3, r3, #15
 8006a00:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006a02:	693b      	ldr	r3, [r7, #16]
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3718      	adds	r7, #24
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006a0c:	b5b0      	push	{r4, r5, r7, lr}
 8006a0e:	b094      	sub	sp, #80	@ 0x50
 8006a10:	af04      	add	r7, sp, #16
 8006a12:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006a14:	2301      	movs	r3, #1
 8006a16:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f002 f9b9 	bl	8008d94 <SDMMC_GetPowerState>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d102      	bne.n	8006a2e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006a28:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006a2c:	e0b8      	b.n	8006ba0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a32:	2b03      	cmp	r3, #3
 8006a34:	d02f      	beq.n	8006a96 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f002 fbe3 	bl	8009206 <SDMMC_CmdSendCID>
 8006a40:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d001      	beq.n	8006a4c <SD_InitCard+0x40>
    {
      return errorstate;
 8006a48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a4a:	e0a9      	b.n	8006ba0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2100      	movs	r1, #0
 8006a52:	4618      	mov	r0, r3
 8006a54:	f002 f9e3 	bl	8008e1e <SDMMC_GetResponse>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2104      	movs	r1, #4
 8006a64:	4618      	mov	r0, r3
 8006a66:	f002 f9da 	bl	8008e1e <SDMMC_GetResponse>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2108      	movs	r1, #8
 8006a76:	4618      	mov	r0, r3
 8006a78:	f002 f9d1 	bl	8008e1e <SDMMC_GetResponse>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	210c      	movs	r1, #12
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f002 f9c8 	bl	8008e1e <SDMMC_GetResponse>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a9a:	2b03      	cmp	r3, #3
 8006a9c:	d00d      	beq.n	8006aba <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f107 020e 	add.w	r2, r7, #14
 8006aa6:	4611      	mov	r1, r2
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f002 fbe9 	bl	8009280 <SDMMC_CmdSetRelAdd>
 8006aae:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d001      	beq.n	8006aba <SD_InitCard+0xae>
    {
      return errorstate;
 8006ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ab8:	e072      	b.n	8006ba0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006abe:	2b03      	cmp	r3, #3
 8006ac0:	d036      	beq.n	8006b30 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006ac2:	89fb      	ldrh	r3, [r7, #14]
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ad2:	041b      	lsls	r3, r3, #16
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	f002 fbb3 	bl	8009242 <SDMMC_CmdSendCSD>
 8006adc:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d001      	beq.n	8006ae8 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ae6:	e05b      	b.n	8006ba0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2100      	movs	r1, #0
 8006aee:	4618      	mov	r0, r3
 8006af0:	f002 f995 	bl	8008e1e <SDMMC_GetResponse>
 8006af4:	4602      	mov	r2, r0
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2104      	movs	r1, #4
 8006b00:	4618      	mov	r0, r3
 8006b02:	f002 f98c 	bl	8008e1e <SDMMC_GetResponse>
 8006b06:	4602      	mov	r2, r0
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2108      	movs	r1, #8
 8006b12:	4618      	mov	r0, r3
 8006b14:	f002 f983 	bl	8008e1e <SDMMC_GetResponse>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	210c      	movs	r1, #12
 8006b24:	4618      	mov	r0, r3
 8006b26:	f002 f97a 	bl	8008e1e <SDMMC_GetResponse>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2104      	movs	r1, #4
 8006b36:	4618      	mov	r0, r3
 8006b38:	f002 f971 	bl	8008e1e <SDMMC_GetResponse>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	0d1a      	lsrs	r2, r3, #20
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006b44:	f107 0310 	add.w	r3, r7, #16
 8006b48:	4619      	mov	r1, r3
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7ff fcd4 	bl	80064f8 <HAL_SD_GetCardCSD>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d002      	beq.n	8006b5c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b56:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006b5a:	e021      	b.n	8006ba0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6819      	ldr	r1, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b64:	041b      	lsls	r3, r3, #16
 8006b66:	2200      	movs	r2, #0
 8006b68:	461c      	mov	r4, r3
 8006b6a:	4615      	mov	r5, r2
 8006b6c:	4622      	mov	r2, r4
 8006b6e:	462b      	mov	r3, r5
 8006b70:	4608      	mov	r0, r1
 8006b72:	f002 fa5f 	bl	8009034 <SDMMC_CmdSelDesel>
 8006b76:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <SD_InitCard+0x176>
  {
    return errorstate;
 8006b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b80:	e00e      	b.n	8006ba0 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681d      	ldr	r5, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	466c      	mov	r4, sp
 8006b8a:	f103 0210 	add.w	r2, r3, #16
 8006b8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006b90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006b94:	3304      	adds	r3, #4
 8006b96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b98:	4628      	mov	r0, r5
 8006b9a:	f002 f8a3 	bl	8008ce4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3740      	adds	r7, #64	@ 0x40
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bdb0      	pop	{r4, r5, r7, pc}

08006ba8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	617b      	str	r3, [r7, #20]
 8006bb8:	2300      	movs	r3, #0
 8006bba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f002 fa5a 	bl	800907a <SDMMC_CmdGoIdleState>
 8006bc6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d001      	beq.n	8006bd2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	e072      	b.n	8006cb8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f002 fa6d 	bl	80090b6 <SDMMC_CmdOperCond>
 8006bdc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00d      	beq.n	8006c00 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f002 fa43 	bl	800907a <SDMMC_CmdGoIdleState>
 8006bf4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d004      	beq.n	8006c06 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	e05b      	b.n	8006cb8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d137      	bne.n	8006c7e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2100      	movs	r1, #0
 8006c14:	4618      	mov	r0, r3
 8006c16:	f002 fa6d 	bl	80090f4 <SDMMC_CmdAppCommand>
 8006c1a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d02d      	beq.n	8006c7e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c22:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006c26:	e047      	b.n	8006cb8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f002 fa60 	bl	80090f4 <SDMMC_CmdAppCommand>
 8006c34:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d001      	beq.n	8006c40 <SD_PowerON+0x98>
    {
      return errorstate;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	e03b      	b.n	8006cb8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	491e      	ldr	r1, [pc, #120]	@ (8006cc0 <SD_PowerON+0x118>)
 8006c46:	4618      	mov	r0, r3
 8006c48:	f002 fa76 	bl	8009138 <SDMMC_CmdAppOperCommand>
 8006c4c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d002      	beq.n	8006c5a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c54:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006c58:	e02e      	b.n	8006cb8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2100      	movs	r1, #0
 8006c60:	4618      	mov	r0, r3
 8006c62:	f002 f8dc 	bl	8008e1e <SDMMC_GetResponse>
 8006c66:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	0fdb      	lsrs	r3, r3, #31
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d101      	bne.n	8006c74 <SD_PowerON+0xcc>
 8006c70:	2301      	movs	r3, #1
 8006c72:	e000      	b.n	8006c76 <SD_PowerON+0xce>
 8006c74:	2300      	movs	r3, #0
 8006c76:	613b      	str	r3, [r7, #16]

    count++;
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d802      	bhi.n	8006c8e <SD_PowerON+0xe6>
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d0cc      	beq.n	8006c28 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d902      	bls.n	8006c9e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006c98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006c9c:	e00c      	b.n	8006cb8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d003      	beq.n	8006cb0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	645a      	str	r2, [r3, #68]	@ 0x44
 8006cae:	e002      	b.n	8006cb6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3718      	adds	r7, #24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	c1100000 	.word	0xc1100000

08006cc4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d102      	bne.n	8006cda <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006cd4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006cd8:	e018      	b.n	8006d0c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ce2:	041b      	lsls	r3, r3, #16
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	4610      	mov	r0, r2
 8006ce8:	f002 faeb 	bl	80092c2 <SDMMC_CmdSendStatus>
 8006cec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d001      	beq.n	8006cf8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	e009      	b.n	8006d0c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f002 f88d 	bl	8008e1e <SDMMC_GetResponse>
 8006d04:	4602      	mov	r2, r0
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	60fb      	str	r3, [r7, #12]
 8006d20:	2300      	movs	r3, #0
 8006d22:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2100      	movs	r1, #0
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f002 f877 	bl	8008e1e <SDMMC_GetResponse>
 8006d30:	4603      	mov	r3, r0
 8006d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d3a:	d102      	bne.n	8006d42 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006d3c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006d40:	e02f      	b.n	8006da2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006d42:	f107 030c 	add.w	r3, r7, #12
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f879 	bl	8006e40 <SD_FindSCR>
 8006d4e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d001      	beq.n	8006d5a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	e023      	b.n	8006da2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d01c      	beq.n	8006d9e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d6c:	041b      	lsls	r3, r3, #16
 8006d6e:	4619      	mov	r1, r3
 8006d70:	4610      	mov	r0, r2
 8006d72:	f002 f9bf 	bl	80090f4 <SDMMC_CmdAppCommand>
 8006d76:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d001      	beq.n	8006d82 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	e00f      	b.n	8006da2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2102      	movs	r1, #2
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f002 f9f9 	bl	8009180 <SDMMC_CmdBusWidth>
 8006d8e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	e003      	b.n	8006da2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	e001      	b.n	8006da2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006d9e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3718      	adds	r7, #24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b086      	sub	sp, #24
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006db2:	2300      	movs	r3, #0
 8006db4:	60fb      	str	r3, [r7, #12]
 8006db6:	2300      	movs	r3, #0
 8006db8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f002 f82c 	bl	8008e1e <SDMMC_GetResponse>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dcc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006dd0:	d102      	bne.n	8006dd8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006dd2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006dd6:	e02f      	b.n	8006e38 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006dd8:	f107 030c 	add.w	r3, r7, #12
 8006ddc:	4619      	mov	r1, r3
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f82e 	bl	8006e40 <SD_FindSCR>
 8006de4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	e023      	b.n	8006e38 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d01c      	beq.n	8006e34 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e02:	041b      	lsls	r3, r3, #16
 8006e04:	4619      	mov	r1, r3
 8006e06:	4610      	mov	r0, r2
 8006e08:	f002 f974 	bl	80090f4 <SDMMC_CmdAppCommand>
 8006e0c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d001      	beq.n	8006e18 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	e00f      	b.n	8006e38 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f002 f9ae 	bl	8009180 <SDMMC_CmdBusWidth>
 8006e24:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d001      	beq.n	8006e30 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	e003      	b.n	8006e38 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006e30:	2300      	movs	r3, #0
 8006e32:	e001      	b.n	8006e38 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006e34:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3718      	adds	r7, #24
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006e40:	b590      	push	{r4, r7, lr}
 8006e42:	b08f      	sub	sp, #60	@ 0x3c
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006e4a:	f7fb f959 	bl	8002100 <HAL_GetTick>
 8006e4e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8006e50:	2300      	movs	r3, #0
 8006e52:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006e54:	2300      	movs	r3, #0
 8006e56:	60bb      	str	r3, [r7, #8]
 8006e58:	2300      	movs	r3, #0
 8006e5a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2108      	movs	r1, #8
 8006e66:	4618      	mov	r0, r3
 8006e68:	f002 f818 	bl	8008e9c <SDMMC_CmdBlockLength>
 8006e6c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d001      	beq.n	8006e78 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e76:	e0b2      	b.n	8006fde <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e80:	041b      	lsls	r3, r3, #16
 8006e82:	4619      	mov	r1, r3
 8006e84:	4610      	mov	r0, r2
 8006e86:	f002 f935 	bl	80090f4 <SDMMC_CmdAppCommand>
 8006e8a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e94:	e0a3      	b.n	8006fde <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006e96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006e9a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006e9c:	2308      	movs	r3, #8
 8006e9e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006ea0:	2330      	movs	r3, #48	@ 0x30
 8006ea2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006eac:	2301      	movs	r3, #1
 8006eae:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f107 0210 	add.w	r2, r7, #16
 8006eb8:	4611      	mov	r1, r2
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f001 ffc2 	bl	8008e44 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f002 f97d 	bl	80091c4 <SDMMC_CmdSendSCR>
 8006eca:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d02a      	beq.n	8006f28 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8006ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed4:	e083      	b.n	8006fde <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006edc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00f      	beq.n	8006f04 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6819      	ldr	r1, [r3, #0]
 8006ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	f107 0208 	add.w	r2, r7, #8
 8006ef0:	18d4      	adds	r4, r2, r3
 8006ef2:	4608      	mov	r0, r1
 8006ef4:	f001 ff22 	bl	8008d3c <SDMMC_ReadFIFO>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	6023      	str	r3, [r4, #0]
      index++;
 8006efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006efe:	3301      	adds	r3, #1
 8006f00:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f02:	e006      	b.n	8006f12 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d012      	beq.n	8006f38 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006f12:	f7fb f8f5 	bl	8002100 <HAL_GetTick>
 8006f16:	4602      	mov	r2, r0
 8006f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f20:	d102      	bne.n	8006f28 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006f22:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006f26:	e05a      	b.n	8006fde <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f2e:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d0cf      	beq.n	8006ed6 <SD_FindSCR+0x96>
 8006f36:	e000      	b.n	8006f3a <SD_FindSCR+0xfa>
      break;
 8006f38:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f40:	f003 0308 	and.w	r3, r3, #8
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d005      	beq.n	8006f54 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2208      	movs	r2, #8
 8006f4e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006f50:	2308      	movs	r3, #8
 8006f52:	e044      	b.n	8006fde <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f5a:	f003 0302 	and.w	r3, r3, #2
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d005      	beq.n	8006f6e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2202      	movs	r2, #2
 8006f68:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	e037      	b.n	8006fde <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f74:	f003 0320 	and.w	r3, r3, #32
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d005      	beq.n	8006f88 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2220      	movs	r2, #32
 8006f82:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006f84:	2320      	movs	r3, #32
 8006f86:	e02a      	b.n	8006fde <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006f90:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	061a      	lsls	r2, r3, #24
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	021b      	lsls	r3, r3, #8
 8006f9a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006f9e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	0a1b      	lsrs	r3, r3, #8
 8006fa4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006fa8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	0e1b      	lsrs	r3, r3, #24
 8006fae:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fb2:	601a      	str	r2, [r3, #0]
    scr++;
 8006fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fb6:	3304      	adds	r3, #4
 8006fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	061a      	lsls	r2, r3, #24
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	021b      	lsls	r3, r3, #8
 8006fc2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006fc6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	0a1b      	lsrs	r3, r3, #8
 8006fcc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006fd0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	0e1b      	lsrs	r3, r3, #24
 8006fd6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fda:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	373c      	adds	r7, #60	@ 0x3c
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd90      	pop	{r4, r7, pc}

08006fe6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b084      	sub	sp, #16
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e09d      	b.n	8007134 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d108      	bne.n	8007012 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007008:	d009      	beq.n	800701e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	61da      	str	r2, [r3, #28]
 8007010:	e005      	b.n	800701e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800702a:	b2db      	uxtb	r3, r3
 800702c:	2b00      	cmp	r3, #0
 800702e:	d106      	bne.n	800703e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7fa fb1d 	bl	8001678 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2202      	movs	r2, #2
 8007042:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007054:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800705e:	d902      	bls.n	8007066 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007060:	2300      	movs	r3, #0
 8007062:	60fb      	str	r3, [r7, #12]
 8007064:	e002      	b.n	800706c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007066:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800706a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007074:	d007      	beq.n	8007086 <HAL_SPI_Init+0xa0>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800707e:	d002      	beq.n	8007086 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007096:	431a      	orrs	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	f003 0302 	and.w	r3, r3, #2
 80070a0:	431a      	orrs	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	f003 0301 	and.w	r3, r3, #1
 80070aa:	431a      	orrs	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070b4:	431a      	orrs	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	69db      	ldr	r3, [r3, #28]
 80070ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80070be:	431a      	orrs	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a1b      	ldr	r3, [r3, #32]
 80070c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070c8:	ea42 0103 	orr.w	r1, r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	430a      	orrs	r2, r1
 80070da:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	0c1b      	lsrs	r3, r3, #16
 80070e2:	f003 0204 	and.w	r2, r3, #4
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ea:	f003 0310 	and.w	r3, r3, #16
 80070ee:	431a      	orrs	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070f4:	f003 0308 	and.w	r3, r3, #8
 80070f8:	431a      	orrs	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007102:	ea42 0103 	orr.w	r1, r2, r3
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	430a      	orrs	r2, r1
 8007112:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	69da      	ldr	r2, [r3, #28]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007122:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e049      	b.n	80071e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b00      	cmp	r3, #0
 8007158:	d106      	bne.n	8007168 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f7fa fb70 	bl	8001848 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2202      	movs	r2, #2
 800716c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	3304      	adds	r3, #4
 8007178:	4619      	mov	r1, r3
 800717a:	4610      	mov	r0, r2
 800717c:	f000 fa6a 	bl	8007654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b082      	sub	sp, #8
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d101      	bne.n	80071fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e049      	b.n	8007290 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b00      	cmp	r3, #0
 8007206:	d106      	bne.n	8007216 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f7fa fac5 	bl	80017a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2202      	movs	r2, #2
 800721a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	3304      	adds	r3, #4
 8007226:	4619      	mov	r1, r3
 8007228:	4610      	mov	r0, r2
 800722a:	f000 fa13 	bl	8007654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2201      	movs	r2, #1
 800725a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2201      	movs	r2, #1
 8007262:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3708      	adds	r7, #8
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072a4:	2300      	movs	r3, #0
 80072a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d101      	bne.n	80072b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80072b2:	2302      	movs	r3, #2
 80072b4:	e0ff      	b.n	80074b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2b14      	cmp	r3, #20
 80072c2:	f200 80f0 	bhi.w	80074a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80072c6:	a201      	add	r2, pc, #4	@ (adr r2, 80072cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80072c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072cc:	08007321 	.word	0x08007321
 80072d0:	080074a7 	.word	0x080074a7
 80072d4:	080074a7 	.word	0x080074a7
 80072d8:	080074a7 	.word	0x080074a7
 80072dc:	08007361 	.word	0x08007361
 80072e0:	080074a7 	.word	0x080074a7
 80072e4:	080074a7 	.word	0x080074a7
 80072e8:	080074a7 	.word	0x080074a7
 80072ec:	080073a3 	.word	0x080073a3
 80072f0:	080074a7 	.word	0x080074a7
 80072f4:	080074a7 	.word	0x080074a7
 80072f8:	080074a7 	.word	0x080074a7
 80072fc:	080073e3 	.word	0x080073e3
 8007300:	080074a7 	.word	0x080074a7
 8007304:	080074a7 	.word	0x080074a7
 8007308:	080074a7 	.word	0x080074a7
 800730c:	08007425 	.word	0x08007425
 8007310:	080074a7 	.word	0x080074a7
 8007314:	080074a7 	.word	0x080074a7
 8007318:	080074a7 	.word	0x080074a7
 800731c:	08007465 	.word	0x08007465
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68b9      	ldr	r1, [r7, #8]
 8007326:	4618      	mov	r0, r3
 8007328:	f000 fa40 	bl	80077ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	699a      	ldr	r2, [r3, #24]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f042 0208 	orr.w	r2, r2, #8
 800733a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	699a      	ldr	r2, [r3, #24]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f022 0204 	bic.w	r2, r2, #4
 800734a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6999      	ldr	r1, [r3, #24]
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	691a      	ldr	r2, [r3, #16]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	430a      	orrs	r2, r1
 800735c:	619a      	str	r2, [r3, #24]
      break;
 800735e:	e0a5      	b.n	80074ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68b9      	ldr	r1, [r7, #8]
 8007366:	4618      	mov	r0, r3
 8007368:	f000 fa92 	bl	8007890 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	699a      	ldr	r2, [r3, #24]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800737a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	699a      	ldr	r2, [r3, #24]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800738a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6999      	ldr	r1, [r3, #24]
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	021a      	lsls	r2, r3, #8
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	430a      	orrs	r2, r1
 800739e:	619a      	str	r2, [r3, #24]
      break;
 80073a0:	e084      	b.n	80074ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68b9      	ldr	r1, [r7, #8]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f000 fae9 	bl	8007980 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	69da      	ldr	r2, [r3, #28]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f042 0208 	orr.w	r2, r2, #8
 80073bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	69da      	ldr	r2, [r3, #28]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f022 0204 	bic.w	r2, r2, #4
 80073cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	69d9      	ldr	r1, [r3, #28]
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	691a      	ldr	r2, [r3, #16]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	430a      	orrs	r2, r1
 80073de:	61da      	str	r2, [r3, #28]
      break;
 80073e0:	e064      	b.n	80074ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68b9      	ldr	r1, [r7, #8]
 80073e8:	4618      	mov	r0, r3
 80073ea:	f000 fb3f 	bl	8007a6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	69da      	ldr	r2, [r3, #28]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80073fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	69da      	ldr	r2, [r3, #28]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800740c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	69d9      	ldr	r1, [r3, #28]
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	021a      	lsls	r2, r3, #8
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	430a      	orrs	r2, r1
 8007420:	61da      	str	r2, [r3, #28]
      break;
 8007422:	e043      	b.n	80074ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68b9      	ldr	r1, [r7, #8]
 800742a:	4618      	mov	r0, r3
 800742c:	f000 fb76 	bl	8007b1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f042 0208 	orr.w	r2, r2, #8
 800743e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f022 0204 	bic.w	r2, r2, #4
 800744e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	691a      	ldr	r2, [r3, #16]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	430a      	orrs	r2, r1
 8007460:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007462:	e023      	b.n	80074ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68b9      	ldr	r1, [r7, #8]
 800746a:	4618      	mov	r0, r3
 800746c:	f000 fba8 	bl	8007bc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800747e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800748e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	021a      	lsls	r2, r3, #8
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	430a      	orrs	r2, r1
 80074a2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80074a4:	e002      	b.n	80074ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	75fb      	strb	r3, [r7, #23]
      break;
 80074aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80074b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3718      	adds	r7, #24
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop

080074c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074ca:	2300      	movs	r3, #0
 80074cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d101      	bne.n	80074dc <HAL_TIM_ConfigClockSource+0x1c>
 80074d8:	2302      	movs	r3, #2
 80074da:	e0b4      	b.n	8007646 <HAL_TIM_ConfigClockSource+0x186>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2202      	movs	r2, #2
 80074e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	4b56      	ldr	r3, [pc, #344]	@ (8007650 <HAL_TIM_ConfigClockSource+0x190>)
 80074f8:	4013      	ands	r3, r2
 80074fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007502:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007514:	d03e      	beq.n	8007594 <HAL_TIM_ConfigClockSource+0xd4>
 8007516:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800751a:	f200 8087 	bhi.w	800762c <HAL_TIM_ConfigClockSource+0x16c>
 800751e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007522:	f000 8086 	beq.w	8007632 <HAL_TIM_ConfigClockSource+0x172>
 8007526:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800752a:	d87f      	bhi.n	800762c <HAL_TIM_ConfigClockSource+0x16c>
 800752c:	2b70      	cmp	r3, #112	@ 0x70
 800752e:	d01a      	beq.n	8007566 <HAL_TIM_ConfigClockSource+0xa6>
 8007530:	2b70      	cmp	r3, #112	@ 0x70
 8007532:	d87b      	bhi.n	800762c <HAL_TIM_ConfigClockSource+0x16c>
 8007534:	2b60      	cmp	r3, #96	@ 0x60
 8007536:	d050      	beq.n	80075da <HAL_TIM_ConfigClockSource+0x11a>
 8007538:	2b60      	cmp	r3, #96	@ 0x60
 800753a:	d877      	bhi.n	800762c <HAL_TIM_ConfigClockSource+0x16c>
 800753c:	2b50      	cmp	r3, #80	@ 0x50
 800753e:	d03c      	beq.n	80075ba <HAL_TIM_ConfigClockSource+0xfa>
 8007540:	2b50      	cmp	r3, #80	@ 0x50
 8007542:	d873      	bhi.n	800762c <HAL_TIM_ConfigClockSource+0x16c>
 8007544:	2b40      	cmp	r3, #64	@ 0x40
 8007546:	d058      	beq.n	80075fa <HAL_TIM_ConfigClockSource+0x13a>
 8007548:	2b40      	cmp	r3, #64	@ 0x40
 800754a:	d86f      	bhi.n	800762c <HAL_TIM_ConfigClockSource+0x16c>
 800754c:	2b30      	cmp	r3, #48	@ 0x30
 800754e:	d064      	beq.n	800761a <HAL_TIM_ConfigClockSource+0x15a>
 8007550:	2b30      	cmp	r3, #48	@ 0x30
 8007552:	d86b      	bhi.n	800762c <HAL_TIM_ConfigClockSource+0x16c>
 8007554:	2b20      	cmp	r3, #32
 8007556:	d060      	beq.n	800761a <HAL_TIM_ConfigClockSource+0x15a>
 8007558:	2b20      	cmp	r3, #32
 800755a:	d867      	bhi.n	800762c <HAL_TIM_ConfigClockSource+0x16c>
 800755c:	2b00      	cmp	r3, #0
 800755e:	d05c      	beq.n	800761a <HAL_TIM_ConfigClockSource+0x15a>
 8007560:	2b10      	cmp	r3, #16
 8007562:	d05a      	beq.n	800761a <HAL_TIM_ConfigClockSource+0x15a>
 8007564:	e062      	b.n	800762c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007576:	f000 fbf1 	bl	8007d5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007588:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68ba      	ldr	r2, [r7, #8]
 8007590:	609a      	str	r2, [r3, #8]
      break;
 8007592:	e04f      	b.n	8007634 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80075a4:	f000 fbda 	bl	8007d5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	689a      	ldr	r2, [r3, #8]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80075b6:	609a      	str	r2, [r3, #8]
      break;
 80075b8:	e03c      	b.n	8007634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075c6:	461a      	mov	r2, r3
 80075c8:	f000 fb4e 	bl	8007c68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2150      	movs	r1, #80	@ 0x50
 80075d2:	4618      	mov	r0, r3
 80075d4:	f000 fba7 	bl	8007d26 <TIM_ITRx_SetConfig>
      break;
 80075d8:	e02c      	b.n	8007634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80075e6:	461a      	mov	r2, r3
 80075e8:	f000 fb6d 	bl	8007cc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2160      	movs	r1, #96	@ 0x60
 80075f2:	4618      	mov	r0, r3
 80075f4:	f000 fb97 	bl	8007d26 <TIM_ITRx_SetConfig>
      break;
 80075f8:	e01c      	b.n	8007634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007606:	461a      	mov	r2, r3
 8007608:	f000 fb2e 	bl	8007c68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2140      	movs	r1, #64	@ 0x40
 8007612:	4618      	mov	r0, r3
 8007614:	f000 fb87 	bl	8007d26 <TIM_ITRx_SetConfig>
      break;
 8007618:	e00c      	b.n	8007634 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4619      	mov	r1, r3
 8007624:	4610      	mov	r0, r2
 8007626:	f000 fb7e 	bl	8007d26 <TIM_ITRx_SetConfig>
      break;
 800762a:	e003      	b.n	8007634 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	73fb      	strb	r3, [r7, #15]
      break;
 8007630:	e000      	b.n	8007634 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007632:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007644:	7bfb      	ldrb	r3, [r7, #15]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	fffeff88 	.word	0xfffeff88

08007654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a46      	ldr	r2, [pc, #280]	@ (8007780 <TIM_Base_SetConfig+0x12c>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d013      	beq.n	8007694 <TIM_Base_SetConfig+0x40>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007672:	d00f      	beq.n	8007694 <TIM_Base_SetConfig+0x40>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a43      	ldr	r2, [pc, #268]	@ (8007784 <TIM_Base_SetConfig+0x130>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d00b      	beq.n	8007694 <TIM_Base_SetConfig+0x40>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a42      	ldr	r2, [pc, #264]	@ (8007788 <TIM_Base_SetConfig+0x134>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d007      	beq.n	8007694 <TIM_Base_SetConfig+0x40>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a41      	ldr	r2, [pc, #260]	@ (800778c <TIM_Base_SetConfig+0x138>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d003      	beq.n	8007694 <TIM_Base_SetConfig+0x40>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a40      	ldr	r2, [pc, #256]	@ (8007790 <TIM_Base_SetConfig+0x13c>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d108      	bne.n	80076a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800769a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a35      	ldr	r2, [pc, #212]	@ (8007780 <TIM_Base_SetConfig+0x12c>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d02b      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076b4:	d027      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a32      	ldr	r2, [pc, #200]	@ (8007784 <TIM_Base_SetConfig+0x130>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d023      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a31      	ldr	r2, [pc, #196]	@ (8007788 <TIM_Base_SetConfig+0x134>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d01f      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a30      	ldr	r2, [pc, #192]	@ (800778c <TIM_Base_SetConfig+0x138>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d01b      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a2f      	ldr	r2, [pc, #188]	@ (8007790 <TIM_Base_SetConfig+0x13c>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d017      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a2e      	ldr	r2, [pc, #184]	@ (8007794 <TIM_Base_SetConfig+0x140>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d013      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a2d      	ldr	r2, [pc, #180]	@ (8007798 <TIM_Base_SetConfig+0x144>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d00f      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a2c      	ldr	r2, [pc, #176]	@ (800779c <TIM_Base_SetConfig+0x148>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d00b      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a2b      	ldr	r2, [pc, #172]	@ (80077a0 <TIM_Base_SetConfig+0x14c>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d007      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a2a      	ldr	r2, [pc, #168]	@ (80077a4 <TIM_Base_SetConfig+0x150>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d003      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a29      	ldr	r2, [pc, #164]	@ (80077a8 <TIM_Base_SetConfig+0x154>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d108      	bne.n	8007718 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800770c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	4313      	orrs	r3, r2
 8007716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	4313      	orrs	r3, r2
 8007724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	689a      	ldr	r2, [r3, #8]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a10      	ldr	r2, [pc, #64]	@ (8007780 <TIM_Base_SetConfig+0x12c>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d003      	beq.n	800774c <TIM_Base_SetConfig+0xf8>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a12      	ldr	r2, [pc, #72]	@ (8007790 <TIM_Base_SetConfig+0x13c>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d103      	bne.n	8007754 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	691a      	ldr	r2, [r3, #16]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	f003 0301 	and.w	r3, r3, #1
 8007762:	2b01      	cmp	r3, #1
 8007764:	d105      	bne.n	8007772 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	f023 0201 	bic.w	r2, r3, #1
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	611a      	str	r2, [r3, #16]
  }
}
 8007772:	bf00      	nop
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	40010000 	.word	0x40010000
 8007784:	40000400 	.word	0x40000400
 8007788:	40000800 	.word	0x40000800
 800778c:	40000c00 	.word	0x40000c00
 8007790:	40010400 	.word	0x40010400
 8007794:	40014000 	.word	0x40014000
 8007798:	40014400 	.word	0x40014400
 800779c:	40014800 	.word	0x40014800
 80077a0:	40001800 	.word	0x40001800
 80077a4:	40001c00 	.word	0x40001c00
 80077a8:	40002000 	.word	0x40002000

080077ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b087      	sub	sp, #28
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a1b      	ldr	r3, [r3, #32]
 80077c0:	f023 0201 	bic.w	r2, r3, #1
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	699b      	ldr	r3, [r3, #24]
 80077d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	4b2b      	ldr	r3, [pc, #172]	@ (8007884 <TIM_OC1_SetConfig+0xd8>)
 80077d8:	4013      	ands	r3, r2
 80077da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f023 0303 	bic.w	r3, r3, #3
 80077e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	f023 0302 	bic.w	r3, r3, #2
 80077f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a21      	ldr	r2, [pc, #132]	@ (8007888 <TIM_OC1_SetConfig+0xdc>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d003      	beq.n	8007810 <TIM_OC1_SetConfig+0x64>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a20      	ldr	r2, [pc, #128]	@ (800788c <TIM_OC1_SetConfig+0xe0>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d10c      	bne.n	800782a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	f023 0308 	bic.w	r3, r3, #8
 8007816:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	697a      	ldr	r2, [r7, #20]
 800781e:	4313      	orrs	r3, r2
 8007820:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	f023 0304 	bic.w	r3, r3, #4
 8007828:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a16      	ldr	r2, [pc, #88]	@ (8007888 <TIM_OC1_SetConfig+0xdc>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d003      	beq.n	800783a <TIM_OC1_SetConfig+0x8e>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a15      	ldr	r2, [pc, #84]	@ (800788c <TIM_OC1_SetConfig+0xe0>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d111      	bne.n	800785e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	693a      	ldr	r2, [r7, #16]
 8007850:	4313      	orrs	r3, r2
 8007852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	699b      	ldr	r3, [r3, #24]
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	4313      	orrs	r3, r2
 800785c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	693a      	ldr	r2, [r7, #16]
 8007862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	685a      	ldr	r2, [r3, #4]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	621a      	str	r2, [r3, #32]
}
 8007878:	bf00      	nop
 800787a:	371c      	adds	r7, #28
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	fffeff8f 	.word	0xfffeff8f
 8007888:	40010000 	.word	0x40010000
 800788c:	40010400 	.word	0x40010400

08007890 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007890:	b480      	push	{r7}
 8007892:	b087      	sub	sp, #28
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a1b      	ldr	r3, [r3, #32]
 80078a4:	f023 0210 	bic.w	r2, r3, #16
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	4b2e      	ldr	r3, [pc, #184]	@ (8007974 <TIM_OC2_SetConfig+0xe4>)
 80078bc:	4013      	ands	r3, r2
 80078be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	021b      	lsls	r3, r3, #8
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	f023 0320 	bic.w	r3, r3, #32
 80078da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	011b      	lsls	r3, r3, #4
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a23      	ldr	r2, [pc, #140]	@ (8007978 <TIM_OC2_SetConfig+0xe8>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d003      	beq.n	80078f8 <TIM_OC2_SetConfig+0x68>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a22      	ldr	r2, [pc, #136]	@ (800797c <TIM_OC2_SetConfig+0xec>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d10d      	bne.n	8007914 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	011b      	lsls	r3, r3, #4
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	4313      	orrs	r3, r2
 800790a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007912:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4a18      	ldr	r2, [pc, #96]	@ (8007978 <TIM_OC2_SetConfig+0xe8>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d003      	beq.n	8007924 <TIM_OC2_SetConfig+0x94>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a17      	ldr	r2, [pc, #92]	@ (800797c <TIM_OC2_SetConfig+0xec>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d113      	bne.n	800794c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800792a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007932:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	695b      	ldr	r3, [r3, #20]
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	693a      	ldr	r2, [r7, #16]
 800793c:	4313      	orrs	r3, r2
 800793e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	693a      	ldr	r2, [r7, #16]
 8007948:	4313      	orrs	r3, r2
 800794a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	693a      	ldr	r2, [r7, #16]
 8007950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	621a      	str	r2, [r3, #32]
}
 8007966:	bf00      	nop
 8007968:	371c      	adds	r7, #28
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	feff8fff 	.word	0xfeff8fff
 8007978:	40010000 	.word	0x40010000
 800797c:	40010400 	.word	0x40010400

08007980 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007980:	b480      	push	{r7}
 8007982:	b087      	sub	sp, #28
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a1b      	ldr	r3, [r3, #32]
 8007994:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	69db      	ldr	r3, [r3, #28]
 80079a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	4b2d      	ldr	r3, [pc, #180]	@ (8007a60 <TIM_OC3_SetConfig+0xe0>)
 80079ac:	4013      	ands	r3, r2
 80079ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f023 0303 	bic.w	r3, r3, #3
 80079b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	4313      	orrs	r3, r2
 80079c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80079c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	021b      	lsls	r3, r3, #8
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a22      	ldr	r2, [pc, #136]	@ (8007a64 <TIM_OC3_SetConfig+0xe4>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d003      	beq.n	80079e6 <TIM_OC3_SetConfig+0x66>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a21      	ldr	r2, [pc, #132]	@ (8007a68 <TIM_OC3_SetConfig+0xe8>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d10d      	bne.n	8007a02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80079ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	021b      	lsls	r3, r3, #8
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a17      	ldr	r2, [pc, #92]	@ (8007a64 <TIM_OC3_SetConfig+0xe4>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d003      	beq.n	8007a12 <TIM_OC3_SetConfig+0x92>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a16      	ldr	r2, [pc, #88]	@ (8007a68 <TIM_OC3_SetConfig+0xe8>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d113      	bne.n	8007a3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	695b      	ldr	r3, [r3, #20]
 8007a26:	011b      	lsls	r3, r3, #4
 8007a28:	693a      	ldr	r2, [r7, #16]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	011b      	lsls	r3, r3, #4
 8007a34:	693a      	ldr	r2, [r7, #16]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	693a      	ldr	r2, [r7, #16]
 8007a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	685a      	ldr	r2, [r3, #4]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	621a      	str	r2, [r3, #32]
}
 8007a54:	bf00      	nop
 8007a56:	371c      	adds	r7, #28
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr
 8007a60:	fffeff8f 	.word	0xfffeff8f
 8007a64:	40010000 	.word	0x40010000
 8007a68:	40010400 	.word	0x40010400

08007a6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b087      	sub	sp, #28
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a1b      	ldr	r3, [r3, #32]
 8007a7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a1b      	ldr	r3, [r3, #32]
 8007a80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	69db      	ldr	r3, [r3, #28]
 8007a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	4b1e      	ldr	r3, [pc, #120]	@ (8007b10 <TIM_OC4_SetConfig+0xa4>)
 8007a98:	4013      	ands	r3, r2
 8007a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007aa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	021b      	lsls	r3, r3, #8
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007ab6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	031b      	lsls	r3, r3, #12
 8007abe:	693a      	ldr	r2, [r7, #16]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a13      	ldr	r2, [pc, #76]	@ (8007b14 <TIM_OC4_SetConfig+0xa8>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d003      	beq.n	8007ad4 <TIM_OC4_SetConfig+0x68>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a12      	ldr	r2, [pc, #72]	@ (8007b18 <TIM_OC4_SetConfig+0xac>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d109      	bne.n	8007ae8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ada:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	695b      	ldr	r3, [r3, #20]
 8007ae0:	019b      	lsls	r3, r3, #6
 8007ae2:	697a      	ldr	r2, [r7, #20]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	697a      	ldr	r2, [r7, #20]
 8007aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	685a      	ldr	r2, [r3, #4]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	693a      	ldr	r2, [r7, #16]
 8007b00:	621a      	str	r2, [r3, #32]
}
 8007b02:	bf00      	nop
 8007b04:	371c      	adds	r7, #28
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	feff8fff 	.word	0xfeff8fff
 8007b14:	40010000 	.word	0x40010000
 8007b18:	40010400 	.word	0x40010400

08007b1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b087      	sub	sp, #28
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a1b      	ldr	r3, [r3, #32]
 8007b2a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a1b      	ldr	r3, [r3, #32]
 8007b30:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	4b1b      	ldr	r3, [pc, #108]	@ (8007bb4 <TIM_OC5_SetConfig+0x98>)
 8007b48:	4013      	ands	r3, r2
 8007b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007b5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	041b      	lsls	r3, r3, #16
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a12      	ldr	r2, [pc, #72]	@ (8007bb8 <TIM_OC5_SetConfig+0x9c>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d003      	beq.n	8007b7a <TIM_OC5_SetConfig+0x5e>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a11      	ldr	r2, [pc, #68]	@ (8007bbc <TIM_OC5_SetConfig+0xa0>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d109      	bne.n	8007b8e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	021b      	lsls	r3, r3, #8
 8007b88:	697a      	ldr	r2, [r7, #20]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	685a      	ldr	r2, [r3, #4]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	693a      	ldr	r2, [r7, #16]
 8007ba6:	621a      	str	r2, [r3, #32]
}
 8007ba8:	bf00      	nop
 8007baa:	371c      	adds	r7, #28
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr
 8007bb4:	fffeff8f 	.word	0xfffeff8f
 8007bb8:	40010000 	.word	0x40010000
 8007bbc:	40010400 	.word	0x40010400

08007bc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b087      	sub	sp, #28
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a1b      	ldr	r3, [r3, #32]
 8007bd4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	4b1c      	ldr	r3, [pc, #112]	@ (8007c5c <TIM_OC6_SetConfig+0x9c>)
 8007bec:	4013      	ands	r3, r2
 8007bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	021b      	lsls	r3, r3, #8
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007c02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	051b      	lsls	r3, r3, #20
 8007c0a:	693a      	ldr	r2, [r7, #16]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a13      	ldr	r2, [pc, #76]	@ (8007c60 <TIM_OC6_SetConfig+0xa0>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d003      	beq.n	8007c20 <TIM_OC6_SetConfig+0x60>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4a12      	ldr	r2, [pc, #72]	@ (8007c64 <TIM_OC6_SetConfig+0xa4>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d109      	bne.n	8007c34 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007c26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	695b      	ldr	r3, [r3, #20]
 8007c2c:	029b      	lsls	r3, r3, #10
 8007c2e:	697a      	ldr	r2, [r7, #20]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	697a      	ldr	r2, [r7, #20]
 8007c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	685a      	ldr	r2, [r3, #4]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	693a      	ldr	r2, [r7, #16]
 8007c4c:	621a      	str	r2, [r3, #32]
}
 8007c4e:	bf00      	nop
 8007c50:	371c      	adds	r7, #28
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	feff8fff 	.word	0xfeff8fff
 8007c60:	40010000 	.word	0x40010000
 8007c64:	40010400 	.word	0x40010400

08007c68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b087      	sub	sp, #28
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6a1b      	ldr	r3, [r3, #32]
 8007c78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	f023 0201 	bic.w	r2, r3, #1
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	011b      	lsls	r3, r3, #4
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	f023 030a 	bic.w	r3, r3, #10
 8007ca4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	697a      	ldr	r2, [r7, #20]
 8007cb8:	621a      	str	r2, [r3, #32]
}
 8007cba:	bf00      	nop
 8007cbc:	371c      	adds	r7, #28
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	b087      	sub	sp, #28
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	60f8      	str	r0, [r7, #12]
 8007cce:	60b9      	str	r1, [r7, #8]
 8007cd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6a1b      	ldr	r3, [r3, #32]
 8007cd6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6a1b      	ldr	r3, [r3, #32]
 8007cdc:	f023 0210 	bic.w	r2, r3, #16
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	699b      	ldr	r3, [r3, #24]
 8007ce8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007cf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	031b      	lsls	r3, r3, #12
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007d02:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	011b      	lsls	r3, r3, #4
 8007d08:	697a      	ldr	r2, [r7, #20]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	693a      	ldr	r2, [r7, #16]
 8007d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	697a      	ldr	r2, [r7, #20]
 8007d18:	621a      	str	r2, [r3, #32]
}
 8007d1a:	bf00      	nop
 8007d1c:	371c      	adds	r7, #28
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b085      	sub	sp, #20
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d3e:	683a      	ldr	r2, [r7, #0]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	f043 0307 	orr.w	r3, r3, #7
 8007d48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	609a      	str	r2, [r3, #8]
}
 8007d50:	bf00      	nop
 8007d52:	3714      	adds	r7, #20
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
 8007d68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007d76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	021a      	lsls	r2, r3, #8
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	431a      	orrs	r2, r3
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	697a      	ldr	r2, [r7, #20]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	609a      	str	r2, [r3, #8]
}
 8007d90:	bf00      	nop
 8007d92:	371c      	adds	r7, #28
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d101      	bne.n	8007db4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007db0:	2302      	movs	r3, #2
 8007db2:	e06d      	b.n	8007e90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a30      	ldr	r2, [pc, #192]	@ (8007e9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d004      	beq.n	8007de8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a2f      	ldr	r2, [pc, #188]	@ (8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d108      	bne.n	8007dfa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007dee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a20      	ldr	r2, [pc, #128]	@ (8007e9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d022      	beq.n	8007e64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e26:	d01d      	beq.n	8007e64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ea4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d018      	beq.n	8007e64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a1c      	ldr	r2, [pc, #112]	@ (8007ea8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d013      	beq.n	8007e64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a1a      	ldr	r2, [pc, #104]	@ (8007eac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d00e      	beq.n	8007e64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a15      	ldr	r2, [pc, #84]	@ (8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d009      	beq.n	8007e64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a16      	ldr	r2, [pc, #88]	@ (8007eb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d004      	beq.n	8007e64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a15      	ldr	r2, [pc, #84]	@ (8007eb4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d10c      	bne.n	8007e7e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007e8e:	2300      	movs	r3, #0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3714      	adds	r7, #20
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	40010000 	.word	0x40010000
 8007ea0:	40010400 	.word	0x40010400
 8007ea4:	40000400 	.word	0x40000400
 8007ea8:	40000800 	.word	0x40000800
 8007eac:	40000c00 	.word	0x40000c00
 8007eb0:	40014000 	.word	0x40014000
 8007eb4:	40001800 	.word	0x40001800

08007eb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d101      	bne.n	8007ed4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007ed0:	2302      	movs	r3, #2
 8007ed2:	e065      	b.n	8007fa0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	695b      	ldr	r3, [r3, #20]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	699b      	ldr	r3, [r3, #24]
 8007f48:	041b      	lsls	r3, r3, #16
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a16      	ldr	r2, [pc, #88]	@ (8007fac <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d004      	beq.n	8007f62 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a14      	ldr	r2, [pc, #80]	@ (8007fb0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d115      	bne.n	8007f8e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f6c:	051b      	lsls	r3, r3, #20
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	69db      	ldr	r3, [r3, #28]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	6a1b      	ldr	r3, [r3, #32]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	40010000 	.word	0x40010000
 8007fb0:	40010400 	.word	0x40010400

08007fb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d101      	bne.n	8007fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e040      	b.n	8008048 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d106      	bne.n	8007fdc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f7f9 fca0 	bl	800191c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2224      	movs	r2, #36	@ 0x24
 8007fe0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f022 0201 	bic.w	r2, r2, #1
 8007ff0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d002      	beq.n	8008000 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 faf0 	bl	80085e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f889 	bl	8008118 <UART_SetConfig>
 8008006:	4603      	mov	r3, r0
 8008008:	2b01      	cmp	r3, #1
 800800a:	d101      	bne.n	8008010 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e01b      	b.n	8008048 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	685a      	ldr	r2, [r3, #4]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800801e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	689a      	ldr	r2, [r3, #8]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800802e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f042 0201 	orr.w	r2, r2, #1
 800803e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 fb6f 	bl	8008724 <UART_CheckIdleState>
 8008046:	4603      	mov	r3, r0
}
 8008048:	4618      	mov	r0, r3
 800804a:	3708      	adds	r7, #8
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b08a      	sub	sp, #40	@ 0x28
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	4613      	mov	r3, r2
 800805c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008064:	2b20      	cmp	r3, #32
 8008066:	d132      	bne.n	80080ce <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d002      	beq.n	8008074 <HAL_UART_Receive_DMA+0x24>
 800806e:	88fb      	ldrh	r3, [r7, #6]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d101      	bne.n	8008078 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	e02b      	b.n	80080d0 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2200      	movs	r2, #0
 800807c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008088:	2b00      	cmp	r3, #0
 800808a:	d018      	beq.n	80080be <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	e853 3f00 	ldrex	r3, [r3]
 8008098:	613b      	str	r3, [r7, #16]
   return(result);
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80080a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	461a      	mov	r2, r3
 80080a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080aa:	623b      	str	r3, [r7, #32]
 80080ac:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ae:	69f9      	ldr	r1, [r7, #28]
 80080b0:	6a3a      	ldr	r2, [r7, #32]
 80080b2:	e841 2300 	strex	r3, r2, [r1]
 80080b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1e6      	bne.n	800808c <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80080be:	88fb      	ldrh	r3, [r7, #6]
 80080c0:	461a      	mov	r2, r3
 80080c2:	68b9      	ldr	r1, [r7, #8]
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f000 fbf1 	bl	80088ac <UART_Start_Receive_DMA>
 80080ca:	4603      	mov	r3, r0
 80080cc:	e000      	b.n	80080d0 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 80080ce:	2302      	movs	r3, #2
  }
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3728      	adds	r7, #40	@ 0x28
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	460b      	mov	r3, r1
 800810a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800810c:	bf00      	nop
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b088      	sub	sp, #32
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008120:	2300      	movs	r3, #0
 8008122:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	689a      	ldr	r2, [r3, #8]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	431a      	orrs	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	695b      	ldr	r3, [r3, #20]
 8008132:	431a      	orrs	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	69db      	ldr	r3, [r3, #28]
 8008138:	4313      	orrs	r3, r2
 800813a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	4ba6      	ldr	r3, [pc, #664]	@ (80083dc <UART_SetConfig+0x2c4>)
 8008144:	4013      	ands	r3, r2
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	6812      	ldr	r2, [r2, #0]
 800814a:	6979      	ldr	r1, [r7, #20]
 800814c:	430b      	orrs	r3, r1
 800814e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	68da      	ldr	r2, [r3, #12]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	430a      	orrs	r2, r1
 8008164:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a1b      	ldr	r3, [r3, #32]
 8008170:	697a      	ldr	r2, [r7, #20]
 8008172:	4313      	orrs	r3, r2
 8008174:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	697a      	ldr	r2, [r7, #20]
 8008186:	430a      	orrs	r2, r1
 8008188:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a94      	ldr	r2, [pc, #592]	@ (80083e0 <UART_SetConfig+0x2c8>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d120      	bne.n	80081d6 <UART_SetConfig+0xbe>
 8008194:	4b93      	ldr	r3, [pc, #588]	@ (80083e4 <UART_SetConfig+0x2cc>)
 8008196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800819a:	f003 0303 	and.w	r3, r3, #3
 800819e:	2b03      	cmp	r3, #3
 80081a0:	d816      	bhi.n	80081d0 <UART_SetConfig+0xb8>
 80081a2:	a201      	add	r2, pc, #4	@ (adr r2, 80081a8 <UART_SetConfig+0x90>)
 80081a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a8:	080081b9 	.word	0x080081b9
 80081ac:	080081c5 	.word	0x080081c5
 80081b0:	080081bf 	.word	0x080081bf
 80081b4:	080081cb 	.word	0x080081cb
 80081b8:	2301      	movs	r3, #1
 80081ba:	77fb      	strb	r3, [r7, #31]
 80081bc:	e150      	b.n	8008460 <UART_SetConfig+0x348>
 80081be:	2302      	movs	r3, #2
 80081c0:	77fb      	strb	r3, [r7, #31]
 80081c2:	e14d      	b.n	8008460 <UART_SetConfig+0x348>
 80081c4:	2304      	movs	r3, #4
 80081c6:	77fb      	strb	r3, [r7, #31]
 80081c8:	e14a      	b.n	8008460 <UART_SetConfig+0x348>
 80081ca:	2308      	movs	r3, #8
 80081cc:	77fb      	strb	r3, [r7, #31]
 80081ce:	e147      	b.n	8008460 <UART_SetConfig+0x348>
 80081d0:	2310      	movs	r3, #16
 80081d2:	77fb      	strb	r3, [r7, #31]
 80081d4:	e144      	b.n	8008460 <UART_SetConfig+0x348>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a83      	ldr	r2, [pc, #524]	@ (80083e8 <UART_SetConfig+0x2d0>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d132      	bne.n	8008246 <UART_SetConfig+0x12e>
 80081e0:	4b80      	ldr	r3, [pc, #512]	@ (80083e4 <UART_SetConfig+0x2cc>)
 80081e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081e6:	f003 030c 	and.w	r3, r3, #12
 80081ea:	2b0c      	cmp	r3, #12
 80081ec:	d828      	bhi.n	8008240 <UART_SetConfig+0x128>
 80081ee:	a201      	add	r2, pc, #4	@ (adr r2, 80081f4 <UART_SetConfig+0xdc>)
 80081f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f4:	08008229 	.word	0x08008229
 80081f8:	08008241 	.word	0x08008241
 80081fc:	08008241 	.word	0x08008241
 8008200:	08008241 	.word	0x08008241
 8008204:	08008235 	.word	0x08008235
 8008208:	08008241 	.word	0x08008241
 800820c:	08008241 	.word	0x08008241
 8008210:	08008241 	.word	0x08008241
 8008214:	0800822f 	.word	0x0800822f
 8008218:	08008241 	.word	0x08008241
 800821c:	08008241 	.word	0x08008241
 8008220:	08008241 	.word	0x08008241
 8008224:	0800823b 	.word	0x0800823b
 8008228:	2300      	movs	r3, #0
 800822a:	77fb      	strb	r3, [r7, #31]
 800822c:	e118      	b.n	8008460 <UART_SetConfig+0x348>
 800822e:	2302      	movs	r3, #2
 8008230:	77fb      	strb	r3, [r7, #31]
 8008232:	e115      	b.n	8008460 <UART_SetConfig+0x348>
 8008234:	2304      	movs	r3, #4
 8008236:	77fb      	strb	r3, [r7, #31]
 8008238:	e112      	b.n	8008460 <UART_SetConfig+0x348>
 800823a:	2308      	movs	r3, #8
 800823c:	77fb      	strb	r3, [r7, #31]
 800823e:	e10f      	b.n	8008460 <UART_SetConfig+0x348>
 8008240:	2310      	movs	r3, #16
 8008242:	77fb      	strb	r3, [r7, #31]
 8008244:	e10c      	b.n	8008460 <UART_SetConfig+0x348>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a68      	ldr	r2, [pc, #416]	@ (80083ec <UART_SetConfig+0x2d4>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d120      	bne.n	8008292 <UART_SetConfig+0x17a>
 8008250:	4b64      	ldr	r3, [pc, #400]	@ (80083e4 <UART_SetConfig+0x2cc>)
 8008252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008256:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800825a:	2b30      	cmp	r3, #48	@ 0x30
 800825c:	d013      	beq.n	8008286 <UART_SetConfig+0x16e>
 800825e:	2b30      	cmp	r3, #48	@ 0x30
 8008260:	d814      	bhi.n	800828c <UART_SetConfig+0x174>
 8008262:	2b20      	cmp	r3, #32
 8008264:	d009      	beq.n	800827a <UART_SetConfig+0x162>
 8008266:	2b20      	cmp	r3, #32
 8008268:	d810      	bhi.n	800828c <UART_SetConfig+0x174>
 800826a:	2b00      	cmp	r3, #0
 800826c:	d002      	beq.n	8008274 <UART_SetConfig+0x15c>
 800826e:	2b10      	cmp	r3, #16
 8008270:	d006      	beq.n	8008280 <UART_SetConfig+0x168>
 8008272:	e00b      	b.n	800828c <UART_SetConfig+0x174>
 8008274:	2300      	movs	r3, #0
 8008276:	77fb      	strb	r3, [r7, #31]
 8008278:	e0f2      	b.n	8008460 <UART_SetConfig+0x348>
 800827a:	2302      	movs	r3, #2
 800827c:	77fb      	strb	r3, [r7, #31]
 800827e:	e0ef      	b.n	8008460 <UART_SetConfig+0x348>
 8008280:	2304      	movs	r3, #4
 8008282:	77fb      	strb	r3, [r7, #31]
 8008284:	e0ec      	b.n	8008460 <UART_SetConfig+0x348>
 8008286:	2308      	movs	r3, #8
 8008288:	77fb      	strb	r3, [r7, #31]
 800828a:	e0e9      	b.n	8008460 <UART_SetConfig+0x348>
 800828c:	2310      	movs	r3, #16
 800828e:	77fb      	strb	r3, [r7, #31]
 8008290:	e0e6      	b.n	8008460 <UART_SetConfig+0x348>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a56      	ldr	r2, [pc, #344]	@ (80083f0 <UART_SetConfig+0x2d8>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d120      	bne.n	80082de <UART_SetConfig+0x1c6>
 800829c:	4b51      	ldr	r3, [pc, #324]	@ (80083e4 <UART_SetConfig+0x2cc>)
 800829e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80082a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80082a8:	d013      	beq.n	80082d2 <UART_SetConfig+0x1ba>
 80082aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80082ac:	d814      	bhi.n	80082d8 <UART_SetConfig+0x1c0>
 80082ae:	2b80      	cmp	r3, #128	@ 0x80
 80082b0:	d009      	beq.n	80082c6 <UART_SetConfig+0x1ae>
 80082b2:	2b80      	cmp	r3, #128	@ 0x80
 80082b4:	d810      	bhi.n	80082d8 <UART_SetConfig+0x1c0>
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d002      	beq.n	80082c0 <UART_SetConfig+0x1a8>
 80082ba:	2b40      	cmp	r3, #64	@ 0x40
 80082bc:	d006      	beq.n	80082cc <UART_SetConfig+0x1b4>
 80082be:	e00b      	b.n	80082d8 <UART_SetConfig+0x1c0>
 80082c0:	2300      	movs	r3, #0
 80082c2:	77fb      	strb	r3, [r7, #31]
 80082c4:	e0cc      	b.n	8008460 <UART_SetConfig+0x348>
 80082c6:	2302      	movs	r3, #2
 80082c8:	77fb      	strb	r3, [r7, #31]
 80082ca:	e0c9      	b.n	8008460 <UART_SetConfig+0x348>
 80082cc:	2304      	movs	r3, #4
 80082ce:	77fb      	strb	r3, [r7, #31]
 80082d0:	e0c6      	b.n	8008460 <UART_SetConfig+0x348>
 80082d2:	2308      	movs	r3, #8
 80082d4:	77fb      	strb	r3, [r7, #31]
 80082d6:	e0c3      	b.n	8008460 <UART_SetConfig+0x348>
 80082d8:	2310      	movs	r3, #16
 80082da:	77fb      	strb	r3, [r7, #31]
 80082dc:	e0c0      	b.n	8008460 <UART_SetConfig+0x348>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a44      	ldr	r2, [pc, #272]	@ (80083f4 <UART_SetConfig+0x2dc>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d125      	bne.n	8008334 <UART_SetConfig+0x21c>
 80082e8:	4b3e      	ldr	r3, [pc, #248]	@ (80083e4 <UART_SetConfig+0x2cc>)
 80082ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082f6:	d017      	beq.n	8008328 <UART_SetConfig+0x210>
 80082f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082fc:	d817      	bhi.n	800832e <UART_SetConfig+0x216>
 80082fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008302:	d00b      	beq.n	800831c <UART_SetConfig+0x204>
 8008304:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008308:	d811      	bhi.n	800832e <UART_SetConfig+0x216>
 800830a:	2b00      	cmp	r3, #0
 800830c:	d003      	beq.n	8008316 <UART_SetConfig+0x1fe>
 800830e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008312:	d006      	beq.n	8008322 <UART_SetConfig+0x20a>
 8008314:	e00b      	b.n	800832e <UART_SetConfig+0x216>
 8008316:	2300      	movs	r3, #0
 8008318:	77fb      	strb	r3, [r7, #31]
 800831a:	e0a1      	b.n	8008460 <UART_SetConfig+0x348>
 800831c:	2302      	movs	r3, #2
 800831e:	77fb      	strb	r3, [r7, #31]
 8008320:	e09e      	b.n	8008460 <UART_SetConfig+0x348>
 8008322:	2304      	movs	r3, #4
 8008324:	77fb      	strb	r3, [r7, #31]
 8008326:	e09b      	b.n	8008460 <UART_SetConfig+0x348>
 8008328:	2308      	movs	r3, #8
 800832a:	77fb      	strb	r3, [r7, #31]
 800832c:	e098      	b.n	8008460 <UART_SetConfig+0x348>
 800832e:	2310      	movs	r3, #16
 8008330:	77fb      	strb	r3, [r7, #31]
 8008332:	e095      	b.n	8008460 <UART_SetConfig+0x348>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a2f      	ldr	r2, [pc, #188]	@ (80083f8 <UART_SetConfig+0x2e0>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d125      	bne.n	800838a <UART_SetConfig+0x272>
 800833e:	4b29      	ldr	r3, [pc, #164]	@ (80083e4 <UART_SetConfig+0x2cc>)
 8008340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008344:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008348:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800834c:	d017      	beq.n	800837e <UART_SetConfig+0x266>
 800834e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008352:	d817      	bhi.n	8008384 <UART_SetConfig+0x26c>
 8008354:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008358:	d00b      	beq.n	8008372 <UART_SetConfig+0x25a>
 800835a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800835e:	d811      	bhi.n	8008384 <UART_SetConfig+0x26c>
 8008360:	2b00      	cmp	r3, #0
 8008362:	d003      	beq.n	800836c <UART_SetConfig+0x254>
 8008364:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008368:	d006      	beq.n	8008378 <UART_SetConfig+0x260>
 800836a:	e00b      	b.n	8008384 <UART_SetConfig+0x26c>
 800836c:	2301      	movs	r3, #1
 800836e:	77fb      	strb	r3, [r7, #31]
 8008370:	e076      	b.n	8008460 <UART_SetConfig+0x348>
 8008372:	2302      	movs	r3, #2
 8008374:	77fb      	strb	r3, [r7, #31]
 8008376:	e073      	b.n	8008460 <UART_SetConfig+0x348>
 8008378:	2304      	movs	r3, #4
 800837a:	77fb      	strb	r3, [r7, #31]
 800837c:	e070      	b.n	8008460 <UART_SetConfig+0x348>
 800837e:	2308      	movs	r3, #8
 8008380:	77fb      	strb	r3, [r7, #31]
 8008382:	e06d      	b.n	8008460 <UART_SetConfig+0x348>
 8008384:	2310      	movs	r3, #16
 8008386:	77fb      	strb	r3, [r7, #31]
 8008388:	e06a      	b.n	8008460 <UART_SetConfig+0x348>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a1b      	ldr	r2, [pc, #108]	@ (80083fc <UART_SetConfig+0x2e4>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d138      	bne.n	8008406 <UART_SetConfig+0x2ee>
 8008394:	4b13      	ldr	r3, [pc, #76]	@ (80083e4 <UART_SetConfig+0x2cc>)
 8008396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800839a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800839e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80083a2:	d017      	beq.n	80083d4 <UART_SetConfig+0x2bc>
 80083a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80083a8:	d82a      	bhi.n	8008400 <UART_SetConfig+0x2e8>
 80083aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083ae:	d00b      	beq.n	80083c8 <UART_SetConfig+0x2b0>
 80083b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083b4:	d824      	bhi.n	8008400 <UART_SetConfig+0x2e8>
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d003      	beq.n	80083c2 <UART_SetConfig+0x2aa>
 80083ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083be:	d006      	beq.n	80083ce <UART_SetConfig+0x2b6>
 80083c0:	e01e      	b.n	8008400 <UART_SetConfig+0x2e8>
 80083c2:	2300      	movs	r3, #0
 80083c4:	77fb      	strb	r3, [r7, #31]
 80083c6:	e04b      	b.n	8008460 <UART_SetConfig+0x348>
 80083c8:	2302      	movs	r3, #2
 80083ca:	77fb      	strb	r3, [r7, #31]
 80083cc:	e048      	b.n	8008460 <UART_SetConfig+0x348>
 80083ce:	2304      	movs	r3, #4
 80083d0:	77fb      	strb	r3, [r7, #31]
 80083d2:	e045      	b.n	8008460 <UART_SetConfig+0x348>
 80083d4:	2308      	movs	r3, #8
 80083d6:	77fb      	strb	r3, [r7, #31]
 80083d8:	e042      	b.n	8008460 <UART_SetConfig+0x348>
 80083da:	bf00      	nop
 80083dc:	efff69f3 	.word	0xefff69f3
 80083e0:	40011000 	.word	0x40011000
 80083e4:	40023800 	.word	0x40023800
 80083e8:	40004400 	.word	0x40004400
 80083ec:	40004800 	.word	0x40004800
 80083f0:	40004c00 	.word	0x40004c00
 80083f4:	40005000 	.word	0x40005000
 80083f8:	40011400 	.word	0x40011400
 80083fc:	40007800 	.word	0x40007800
 8008400:	2310      	movs	r3, #16
 8008402:	77fb      	strb	r3, [r7, #31]
 8008404:	e02c      	b.n	8008460 <UART_SetConfig+0x348>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a72      	ldr	r2, [pc, #456]	@ (80085d4 <UART_SetConfig+0x4bc>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d125      	bne.n	800845c <UART_SetConfig+0x344>
 8008410:	4b71      	ldr	r3, [pc, #452]	@ (80085d8 <UART_SetConfig+0x4c0>)
 8008412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008416:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800841a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800841e:	d017      	beq.n	8008450 <UART_SetConfig+0x338>
 8008420:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008424:	d817      	bhi.n	8008456 <UART_SetConfig+0x33e>
 8008426:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800842a:	d00b      	beq.n	8008444 <UART_SetConfig+0x32c>
 800842c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008430:	d811      	bhi.n	8008456 <UART_SetConfig+0x33e>
 8008432:	2b00      	cmp	r3, #0
 8008434:	d003      	beq.n	800843e <UART_SetConfig+0x326>
 8008436:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800843a:	d006      	beq.n	800844a <UART_SetConfig+0x332>
 800843c:	e00b      	b.n	8008456 <UART_SetConfig+0x33e>
 800843e:	2300      	movs	r3, #0
 8008440:	77fb      	strb	r3, [r7, #31]
 8008442:	e00d      	b.n	8008460 <UART_SetConfig+0x348>
 8008444:	2302      	movs	r3, #2
 8008446:	77fb      	strb	r3, [r7, #31]
 8008448:	e00a      	b.n	8008460 <UART_SetConfig+0x348>
 800844a:	2304      	movs	r3, #4
 800844c:	77fb      	strb	r3, [r7, #31]
 800844e:	e007      	b.n	8008460 <UART_SetConfig+0x348>
 8008450:	2308      	movs	r3, #8
 8008452:	77fb      	strb	r3, [r7, #31]
 8008454:	e004      	b.n	8008460 <UART_SetConfig+0x348>
 8008456:	2310      	movs	r3, #16
 8008458:	77fb      	strb	r3, [r7, #31]
 800845a:	e001      	b.n	8008460 <UART_SetConfig+0x348>
 800845c:	2310      	movs	r3, #16
 800845e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	69db      	ldr	r3, [r3, #28]
 8008464:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008468:	d15b      	bne.n	8008522 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800846a:	7ffb      	ldrb	r3, [r7, #31]
 800846c:	2b08      	cmp	r3, #8
 800846e:	d828      	bhi.n	80084c2 <UART_SetConfig+0x3aa>
 8008470:	a201      	add	r2, pc, #4	@ (adr r2, 8008478 <UART_SetConfig+0x360>)
 8008472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008476:	bf00      	nop
 8008478:	0800849d 	.word	0x0800849d
 800847c:	080084a5 	.word	0x080084a5
 8008480:	080084ad 	.word	0x080084ad
 8008484:	080084c3 	.word	0x080084c3
 8008488:	080084b3 	.word	0x080084b3
 800848c:	080084c3 	.word	0x080084c3
 8008490:	080084c3 	.word	0x080084c3
 8008494:	080084c3 	.word	0x080084c3
 8008498:	080084bb 	.word	0x080084bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800849c:	f7fd f882 	bl	80055a4 <HAL_RCC_GetPCLK1Freq>
 80084a0:	61b8      	str	r0, [r7, #24]
        break;
 80084a2:	e013      	b.n	80084cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084a4:	f7fd f892 	bl	80055cc <HAL_RCC_GetPCLK2Freq>
 80084a8:	61b8      	str	r0, [r7, #24]
        break;
 80084aa:	e00f      	b.n	80084cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084ac:	4b4b      	ldr	r3, [pc, #300]	@ (80085dc <UART_SetConfig+0x4c4>)
 80084ae:	61bb      	str	r3, [r7, #24]
        break;
 80084b0:	e00c      	b.n	80084cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084b2:	f7fc ff65 	bl	8005380 <HAL_RCC_GetSysClockFreq>
 80084b6:	61b8      	str	r0, [r7, #24]
        break;
 80084b8:	e008      	b.n	80084cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084be:	61bb      	str	r3, [r7, #24]
        break;
 80084c0:	e004      	b.n	80084cc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80084c2:	2300      	movs	r3, #0
 80084c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	77bb      	strb	r3, [r7, #30]
        break;
 80084ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d074      	beq.n	80085bc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	005a      	lsls	r2, r3, #1
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	085b      	lsrs	r3, r3, #1
 80084dc:	441a      	add	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80084e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	2b0f      	cmp	r3, #15
 80084ec:	d916      	bls.n	800851c <UART_SetConfig+0x404>
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084f4:	d212      	bcs.n	800851c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	f023 030f 	bic.w	r3, r3, #15
 80084fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	085b      	lsrs	r3, r3, #1
 8008504:	b29b      	uxth	r3, r3
 8008506:	f003 0307 	and.w	r3, r3, #7
 800850a:	b29a      	uxth	r2, r3
 800850c:	89fb      	ldrh	r3, [r7, #14]
 800850e:	4313      	orrs	r3, r2
 8008510:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	89fa      	ldrh	r2, [r7, #14]
 8008518:	60da      	str	r2, [r3, #12]
 800851a:	e04f      	b.n	80085bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	77bb      	strb	r3, [r7, #30]
 8008520:	e04c      	b.n	80085bc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008522:	7ffb      	ldrb	r3, [r7, #31]
 8008524:	2b08      	cmp	r3, #8
 8008526:	d828      	bhi.n	800857a <UART_SetConfig+0x462>
 8008528:	a201      	add	r2, pc, #4	@ (adr r2, 8008530 <UART_SetConfig+0x418>)
 800852a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800852e:	bf00      	nop
 8008530:	08008555 	.word	0x08008555
 8008534:	0800855d 	.word	0x0800855d
 8008538:	08008565 	.word	0x08008565
 800853c:	0800857b 	.word	0x0800857b
 8008540:	0800856b 	.word	0x0800856b
 8008544:	0800857b 	.word	0x0800857b
 8008548:	0800857b 	.word	0x0800857b
 800854c:	0800857b 	.word	0x0800857b
 8008550:	08008573 	.word	0x08008573
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008554:	f7fd f826 	bl	80055a4 <HAL_RCC_GetPCLK1Freq>
 8008558:	61b8      	str	r0, [r7, #24]
        break;
 800855a:	e013      	b.n	8008584 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800855c:	f7fd f836 	bl	80055cc <HAL_RCC_GetPCLK2Freq>
 8008560:	61b8      	str	r0, [r7, #24]
        break;
 8008562:	e00f      	b.n	8008584 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008564:	4b1d      	ldr	r3, [pc, #116]	@ (80085dc <UART_SetConfig+0x4c4>)
 8008566:	61bb      	str	r3, [r7, #24]
        break;
 8008568:	e00c      	b.n	8008584 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800856a:	f7fc ff09 	bl	8005380 <HAL_RCC_GetSysClockFreq>
 800856e:	61b8      	str	r0, [r7, #24]
        break;
 8008570:	e008      	b.n	8008584 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008572:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008576:	61bb      	str	r3, [r7, #24]
        break;
 8008578:	e004      	b.n	8008584 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800857a:	2300      	movs	r3, #0
 800857c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	77bb      	strb	r3, [r7, #30]
        break;
 8008582:	bf00      	nop
    }

    if (pclk != 0U)
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d018      	beq.n	80085bc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	085a      	lsrs	r2, r3, #1
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	441a      	add	r2, r3
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	fbb2 f3f3 	udiv	r3, r2, r3
 800859c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	2b0f      	cmp	r3, #15
 80085a2:	d909      	bls.n	80085b8 <UART_SetConfig+0x4a0>
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085aa:	d205      	bcs.n	80085b8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	b29a      	uxth	r2, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	60da      	str	r2, [r3, #12]
 80085b6:	e001      	b.n	80085bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80085c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3720      	adds	r7, #32
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	40007c00 	.word	0x40007c00
 80085d8:	40023800 	.word	0x40023800
 80085dc:	00f42400 	.word	0x00f42400

080085e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ec:	f003 0308 	and.w	r3, r3, #8
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00a      	beq.n	800860a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	430a      	orrs	r2, r1
 8008608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800860e:	f003 0301 	and.w	r3, r3, #1
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00a      	beq.n	800862c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	430a      	orrs	r2, r1
 800862a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008630:	f003 0302 	and.w	r3, r3, #2
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00a      	beq.n	800864e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	430a      	orrs	r2, r1
 800864c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008652:	f003 0304 	and.w	r3, r3, #4
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00a      	beq.n	8008670 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	430a      	orrs	r2, r1
 800866e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008674:	f003 0310 	and.w	r3, r3, #16
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00a      	beq.n	8008692 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	430a      	orrs	r2, r1
 8008690:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008696:	f003 0320 	and.w	r3, r3, #32
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00a      	beq.n	80086b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	430a      	orrs	r2, r1
 80086b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d01a      	beq.n	80086f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	430a      	orrs	r2, r1
 80086d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086de:	d10a      	bne.n	80086f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	430a      	orrs	r2, r1
 80086f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00a      	beq.n	8008718 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	430a      	orrs	r2, r1
 8008716:	605a      	str	r2, [r3, #4]
  }
}
 8008718:	bf00      	nop
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b08c      	sub	sp, #48	@ 0x30
 8008728:	af02      	add	r7, sp, #8
 800872a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008734:	f7f9 fce4 	bl	8002100 <HAL_GetTick>
 8008738:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f003 0308 	and.w	r3, r3, #8
 8008744:	2b08      	cmp	r3, #8
 8008746:	d12e      	bne.n	80087a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008748:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800874c:	9300      	str	r3, [sp, #0]
 800874e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008750:	2200      	movs	r2, #0
 8008752:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f83b 	bl	80087d2 <UART_WaitOnFlagUntilTimeout>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d021      	beq.n	80087a6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	e853 3f00 	ldrex	r3, [r3]
 800876e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008776:	623b      	str	r3, [r7, #32]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	461a      	mov	r2, r3
 800877e:	6a3b      	ldr	r3, [r7, #32]
 8008780:	61fb      	str	r3, [r7, #28]
 8008782:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008784:	69b9      	ldr	r1, [r7, #24]
 8008786:	69fa      	ldr	r2, [r7, #28]
 8008788:	e841 2300 	strex	r3, r2, [r1]
 800878c:	617b      	str	r3, [r7, #20]
   return(result);
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1e6      	bne.n	8008762 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2220      	movs	r2, #32
 8008798:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087a2:	2303      	movs	r3, #3
 80087a4:	e011      	b.n	80087ca <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2220      	movs	r2, #32
 80087aa:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2220      	movs	r2, #32
 80087b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3728      	adds	r7, #40	@ 0x28
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b084      	sub	sp, #16
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	60f8      	str	r0, [r7, #12]
 80087da:	60b9      	str	r1, [r7, #8]
 80087dc:	603b      	str	r3, [r7, #0]
 80087de:	4613      	mov	r3, r2
 80087e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087e2:	e04f      	b.n	8008884 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087ea:	d04b      	beq.n	8008884 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087ec:	f7f9 fc88 	bl	8002100 <HAL_GetTick>
 80087f0:	4602      	mov	r2, r0
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	1ad3      	subs	r3, r2, r3
 80087f6:	69ba      	ldr	r2, [r7, #24]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d302      	bcc.n	8008802 <UART_WaitOnFlagUntilTimeout+0x30>
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d101      	bne.n	8008806 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008802:	2303      	movs	r3, #3
 8008804:	e04e      	b.n	80088a4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 0304 	and.w	r3, r3, #4
 8008810:	2b00      	cmp	r3, #0
 8008812:	d037      	beq.n	8008884 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	2b80      	cmp	r3, #128	@ 0x80
 8008818:	d034      	beq.n	8008884 <UART_WaitOnFlagUntilTimeout+0xb2>
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	2b40      	cmp	r3, #64	@ 0x40
 800881e:	d031      	beq.n	8008884 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	69db      	ldr	r3, [r3, #28]
 8008826:	f003 0308 	and.w	r3, r3, #8
 800882a:	2b08      	cmp	r3, #8
 800882c:	d110      	bne.n	8008850 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2208      	movs	r2, #8
 8008834:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f000 f8fe 	bl	8008a38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2208      	movs	r2, #8
 8008840:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	e029      	b.n	80088a4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	69db      	ldr	r3, [r3, #28]
 8008856:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800885a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800885e:	d111      	bne.n	8008884 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008868:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f000 f8e4 	bl	8008a38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2220      	movs	r2, #32
 8008874:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2200      	movs	r2, #0
 800887c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008880:	2303      	movs	r3, #3
 8008882:	e00f      	b.n	80088a4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	69da      	ldr	r2, [r3, #28]
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	4013      	ands	r3, r2
 800888e:	68ba      	ldr	r2, [r7, #8]
 8008890:	429a      	cmp	r2, r3
 8008892:	bf0c      	ite	eq
 8008894:	2301      	moveq	r3, #1
 8008896:	2300      	movne	r3, #0
 8008898:	b2db      	uxtb	r3, r3
 800889a:	461a      	mov	r2, r3
 800889c:	79fb      	ldrb	r3, [r7, #7]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d0a0      	beq.n	80087e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3710      	adds	r7, #16
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b096      	sub	sp, #88	@ 0x58
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	4613      	mov	r3, r2
 80088b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	68ba      	ldr	r2, [r7, #8]
 80088be:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	88fa      	ldrh	r2, [r7, #6]
 80088c4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2222      	movs	r2, #34	@ 0x22
 80088d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d028      	beq.n	8008932 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088e4:	4a3e      	ldr	r2, [pc, #248]	@ (80089e0 <UART_Start_Receive_DMA+0x134>)
 80088e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088ec:	4a3d      	ldr	r2, [pc, #244]	@ (80089e4 <UART_Start_Receive_DMA+0x138>)
 80088ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088f4:	4a3c      	ldr	r2, [pc, #240]	@ (80089e8 <UART_Start_Receive_DMA+0x13c>)
 80088f6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088fc:	2200      	movs	r2, #0
 80088fe:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	3324      	adds	r3, #36	@ 0x24
 800890a:	4619      	mov	r1, r3
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008910:	461a      	mov	r2, r3
 8008912:	88fb      	ldrh	r3, [r7, #6]
 8008914:	f7fa f8f0 	bl	8002af8 <HAL_DMA_Start_IT>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d009      	beq.n	8008932 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2210      	movs	r2, #16
 8008922:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2220      	movs	r2, #32
 800892a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e051      	b.n	80089d6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d018      	beq.n	800896c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008940:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008942:	e853 3f00 	ldrex	r3, [r3]
 8008946:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800894a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800894e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	461a      	mov	r2, r3
 8008956:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008958:	64bb      	str	r3, [r7, #72]	@ 0x48
 800895a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800895e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008960:	e841 2300 	strex	r3, r2, [r1]
 8008964:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008966:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1e6      	bne.n	800893a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	3308      	adds	r3, #8
 8008972:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008976:	e853 3f00 	ldrex	r3, [r3]
 800897a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800897c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897e:	f043 0301 	orr.w	r3, r3, #1
 8008982:	653b      	str	r3, [r7, #80]	@ 0x50
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	3308      	adds	r3, #8
 800898a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800898c:	637a      	str	r2, [r7, #52]	@ 0x34
 800898e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008990:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008992:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008994:	e841 2300 	strex	r3, r2, [r1]
 8008998:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800899a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800899c:	2b00      	cmp	r3, #0
 800899e:	d1e5      	bne.n	800896c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	3308      	adds	r3, #8
 80089a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	e853 3f00 	ldrex	r3, [r3]
 80089ae:	613b      	str	r3, [r7, #16]
   return(result);
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	3308      	adds	r3, #8
 80089be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80089c0:	623a      	str	r2, [r7, #32]
 80089c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c4:	69f9      	ldr	r1, [r7, #28]
 80089c6:	6a3a      	ldr	r2, [r7, #32]
 80089c8:	e841 2300 	strex	r3, r2, [r1]
 80089cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d1e5      	bne.n	80089a0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3758      	adds	r7, #88	@ 0x58
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	08008b01 	.word	0x08008b01
 80089e4:	08008c29 	.word	0x08008c29
 80089e8:	08008c67 	.word	0x08008c67

080089ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b089      	sub	sp, #36	@ 0x24
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	e853 3f00 	ldrex	r3, [r3]
 8008a00:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008a08:	61fb      	str	r3, [r7, #28]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	461a      	mov	r2, r3
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	61bb      	str	r3, [r7, #24]
 8008a14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a16:	6979      	ldr	r1, [r7, #20]
 8008a18:	69ba      	ldr	r2, [r7, #24]
 8008a1a:	e841 2300 	strex	r3, r2, [r1]
 8008a1e:	613b      	str	r3, [r7, #16]
   return(result);
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1e6      	bne.n	80089f4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2220      	movs	r2, #32
 8008a2a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8008a2c:	bf00      	nop
 8008a2e:	3724      	adds	r7, #36	@ 0x24
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b095      	sub	sp, #84	@ 0x54
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a48:	e853 3f00 	ldrex	r3, [r3]
 8008a4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a60:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a66:	e841 2300 	strex	r3, r2, [r1]
 8008a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1e6      	bne.n	8008a40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	3308      	adds	r3, #8
 8008a78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7a:	6a3b      	ldr	r3, [r7, #32]
 8008a7c:	e853 3f00 	ldrex	r3, [r3]
 8008a80:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	f023 0301 	bic.w	r3, r3, #1
 8008a88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	3308      	adds	r3, #8
 8008a90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008a94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a9a:	e841 2300 	strex	r3, r2, [r1]
 8008a9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1e5      	bne.n	8008a72 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d118      	bne.n	8008ae0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	e853 3f00 	ldrex	r3, [r3]
 8008aba:	60bb      	str	r3, [r7, #8]
   return(result);
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	f023 0310 	bic.w	r3, r3, #16
 8008ac2:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	461a      	mov	r2, r3
 8008aca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008acc:	61bb      	str	r3, [r7, #24]
 8008ace:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad0:	6979      	ldr	r1, [r7, #20]
 8008ad2:	69ba      	ldr	r2, [r7, #24]
 8008ad4:	e841 2300 	strex	r3, r2, [r1]
 8008ad8:	613b      	str	r3, [r7, #16]
   return(result);
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1e6      	bne.n	8008aae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2220      	movs	r2, #32
 8008ae4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008af4:	bf00      	nop
 8008af6:	3754      	adds	r7, #84	@ 0x54
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b09c      	sub	sp, #112	@ 0x70
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b0c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	69db      	ldr	r3, [r3, #28]
 8008b12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b16:	d071      	beq.n	8008bfc <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8008b18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b28:	e853 3f00 	ldrex	r3, [r3]
 8008b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008b2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008b3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b40:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008b44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b46:	e841 2300 	strex	r3, r2, [r1]
 8008b4a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008b4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1e6      	bne.n	8008b20 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	3308      	adds	r3, #8
 8008b58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5c:	e853 3f00 	ldrex	r3, [r3]
 8008b60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b64:	f023 0301 	bic.w	r3, r3, #1
 8008b68:	667b      	str	r3, [r7, #100]	@ 0x64
 8008b6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	3308      	adds	r3, #8
 8008b70:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008b72:	647a      	str	r2, [r7, #68]	@ 0x44
 8008b74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b7a:	e841 2300 	strex	r3, r2, [r1]
 8008b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d1e5      	bne.n	8008b52 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	3308      	adds	r3, #8
 8008b8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b90:	e853 3f00 	ldrex	r3, [r3]
 8008b94:	623b      	str	r3, [r7, #32]
   return(result);
 8008b96:	6a3b      	ldr	r3, [r7, #32]
 8008b98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008b9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	3308      	adds	r3, #8
 8008ba4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008ba6:	633a      	str	r2, [r7, #48]	@ 0x30
 8008ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008baa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bae:	e841 2300 	strex	r3, r2, [r1]
 8008bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1e5      	bne.n	8008b86 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008bba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bbc:	2220      	movs	r2, #32
 8008bbe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d118      	bne.n	8008bfc <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	e853 3f00 	ldrex	r3, [r3]
 8008bd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f023 0310 	bic.w	r3, r3, #16
 8008bde:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008be0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	461a      	mov	r2, r3
 8008be6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008be8:	61fb      	str	r3, [r7, #28]
 8008bea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bec:	69b9      	ldr	r1, [r7, #24]
 8008bee:	69fa      	ldr	r2, [r7, #28]
 8008bf0:	e841 2300 	strex	r3, r2, [r1]
 8008bf4:	617b      	str	r3, [r7, #20]
   return(result);
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1e6      	bne.n	8008bca <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008bfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bfe:	2200      	movs	r2, #0
 8008c00:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d107      	bne.n	8008c1a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c0c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008c10:	4619      	mov	r1, r3
 8008c12:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008c14:	f7ff fa74 	bl	8008100 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c18:	e002      	b.n	8008c20 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8008c1a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008c1c:	f7f7 fe62 	bl	80008e4 <HAL_UART_RxCpltCallback>
}
 8008c20:	bf00      	nop
 8008c22:	3770      	adds	r7, #112	@ 0x70
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c34:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d109      	bne.n	8008c58 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008c4a:	085b      	lsrs	r3, r3, #1
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	4619      	mov	r1, r3
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	f7ff fa55 	bl	8008100 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c56:	e002      	b.n	8008c5e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008c58:	68f8      	ldr	r0, [r7, #12]
 8008c5a:	f7ff fa3d 	bl	80080d8 <HAL_UART_RxHalfCpltCallback>
}
 8008c5e:	bf00      	nop
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b086      	sub	sp, #24
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c72:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c78:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c80:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c8c:	2b80      	cmp	r3, #128	@ 0x80
 8008c8e:	d109      	bne.n	8008ca4 <UART_DMAError+0x3e>
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	2b21      	cmp	r3, #33	@ 0x21
 8008c94:	d106      	bne.n	8008ca4 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8008c9e:	6978      	ldr	r0, [r7, #20]
 8008ca0:	f7ff fea4 	bl	80089ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cae:	2b40      	cmp	r3, #64	@ 0x40
 8008cb0:	d109      	bne.n	8008cc6 <UART_DMAError+0x60>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2b22      	cmp	r3, #34	@ 0x22
 8008cb6:	d106      	bne.n	8008cc6 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8008cc0:	6978      	ldr	r0, [r7, #20]
 8008cc2:	f7ff feb9 	bl	8008a38 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ccc:	f043 0210 	orr.w	r2, r3, #16
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008cd6:	6978      	ldr	r0, [r7, #20]
 8008cd8:	f7ff fa08 	bl	80080ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cdc:	bf00      	nop
 8008cde:	3718      	adds	r7, #24
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008ce4:	b084      	sub	sp, #16
 8008ce6:	b480      	push	{r7}
 8008ce8:	b085      	sub	sp, #20
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
 8008cee:	f107 001c 	add.w	r0, r7, #28
 8008cf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008cfa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008cfc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008cfe:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8008d02:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8008d06:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8008d0a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8008d0e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	685a      	ldr	r2, [r3, #4]
 8008d1a:	4b07      	ldr	r3, [pc, #28]	@ (8008d38 <SDMMC_Init+0x54>)
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	68fa      	ldr	r2, [r7, #12]
 8008d20:	431a      	orrs	r2, r3
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3714      	adds	r7, #20
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	b004      	add	sp, #16
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop
 8008d38:	ffff8100 	.word	0xffff8100

08008d3c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	370c      	adds	r7, #12
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr

08008d56 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8008d56:	b480      	push	{r7}
 8008d58:	b083      	sub	sp, #12
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
 8008d5e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2203      	movs	r2, #3
 8008d84:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f003 0303 	and.w	r3, r3, #3
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008dce:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008dd4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008dda:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	68da      	ldr	r2, [r3, #12]
 8008de6:	4b06      	ldr	r3, [pc, #24]	@ (8008e00 <SDMMC_SendCommand+0x50>)
 8008de8:	4013      	ands	r3, r2
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	431a      	orrs	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3714      	adds	r7, #20
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr
 8008e00:	fffff000 	.word	0xfffff000

08008e04 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	b2db      	uxtb	r3, r3
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	370c      	adds	r7, #12
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr

08008e1e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008e1e:	b480      	push	{r7}
 8008e20:	b085      	sub	sp, #20
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	3314      	adds	r3, #20
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	4413      	add	r3, r2
 8008e32:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
}  
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3714      	adds	r7, #20
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	685a      	ldr	r2, [r3, #4]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008e6a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008e70:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008e76:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e82:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	431a      	orrs	r2, r3
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008e8e:	2300      	movs	r3, #0

}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3714      	adds	r7, #20
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b088      	sub	sp, #32
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008eaa:	2310      	movs	r3, #16
 8008eac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008eae:	2340      	movs	r3, #64	@ 0x40
 8008eb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008eb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008eba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ebc:	f107 0308 	add.w	r3, r7, #8
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7ff ff74 	bl	8008db0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008ec8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ecc:	2110      	movs	r1, #16
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 fa1a 	bl	8009308 <SDMMC_GetCmdResp1>
 8008ed4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ed6:	69fb      	ldr	r3, [r7, #28]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3720      	adds	r7, #32
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b088      	sub	sp, #32
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008eee:	2311      	movs	r3, #17
 8008ef0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ef2:	2340      	movs	r3, #64	@ 0x40
 8008ef4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008efa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008efe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f00:	f107 0308 	add.w	r3, r7, #8
 8008f04:	4619      	mov	r1, r3
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f7ff ff52 	bl	8008db0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008f0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f10:	2111      	movs	r1, #17
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 f9f8 	bl	8009308 <SDMMC_GetCmdResp1>
 8008f18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f1a:	69fb      	ldr	r3, [r7, #28]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3720      	adds	r7, #32
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b088      	sub	sp, #32
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008f32:	2312      	movs	r3, #18
 8008f34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f36:	2340      	movs	r3, #64	@ 0x40
 8008f38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f44:	f107 0308 	add.w	r3, r7, #8
 8008f48:	4619      	mov	r1, r3
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f7ff ff30 	bl	8008db0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f54:	2112      	movs	r1, #18
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 f9d6 	bl	8009308 <SDMMC_GetCmdResp1>
 8008f5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f5e:	69fb      	ldr	r3, [r7, #28]
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3720      	adds	r7, #32
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b088      	sub	sp, #32
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008f76:	2318      	movs	r3, #24
 8008f78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f7a:	2340      	movs	r3, #64	@ 0x40
 8008f7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f88:	f107 0308 	add.w	r3, r7, #8
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f7ff ff0e 	bl	8008db0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008f94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f98:	2118      	movs	r1, #24
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 f9b4 	bl	8009308 <SDMMC_GetCmdResp1>
 8008fa0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fa2:	69fb      	ldr	r3, [r7, #28]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3720      	adds	r7, #32
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b088      	sub	sp, #32
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008fba:	2319      	movs	r3, #25
 8008fbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fbe:	2340      	movs	r3, #64	@ 0x40
 8008fc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008fca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fcc:	f107 0308 	add.w	r3, r7, #8
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f7ff feec 	bl	8008db0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008fd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fdc:	2119      	movs	r1, #25
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 f992 	bl	8009308 <SDMMC_GetCmdResp1>
 8008fe4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fe6:	69fb      	ldr	r3, [r7, #28]
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3720      	adds	r7, #32
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b088      	sub	sp, #32
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008ffc:	230c      	movs	r3, #12
 8008ffe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009000:	2340      	movs	r3, #64	@ 0x40
 8009002:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009004:	2300      	movs	r3, #0
 8009006:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009008:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800900c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800900e:	f107 0308 	add.w	r3, r7, #8
 8009012:	4619      	mov	r1, r3
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f7ff fecb 	bl	8008db0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800901a:	4a05      	ldr	r2, [pc, #20]	@ (8009030 <SDMMC_CmdStopTransfer+0x40>)
 800901c:	210c      	movs	r1, #12
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 f972 	bl	8009308 <SDMMC_GetCmdResp1>
 8009024:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009026:	69fb      	ldr	r3, [r7, #28]
}
 8009028:	4618      	mov	r0, r3
 800902a:	3720      	adds	r7, #32
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	05f5e100 	.word	0x05f5e100

08009034 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b08a      	sub	sp, #40	@ 0x28
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009044:	2307      	movs	r3, #7
 8009046:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009048:	2340      	movs	r3, #64	@ 0x40
 800904a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800904c:	2300      	movs	r3, #0
 800904e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009050:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009054:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009056:	f107 0310 	add.w	r3, r7, #16
 800905a:	4619      	mov	r1, r3
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f7ff fea7 	bl	8008db0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009062:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009066:	2107      	movs	r1, #7
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	f000 f94d 	bl	8009308 <SDMMC_GetCmdResp1>
 800906e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8009070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009072:	4618      	mov	r0, r3
 8009074:	3728      	adds	r7, #40	@ 0x28
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b088      	sub	sp, #32
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009082:	2300      	movs	r3, #0
 8009084:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009086:	2300      	movs	r3, #0
 8009088:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800908a:	2300      	movs	r3, #0
 800908c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800908e:	2300      	movs	r3, #0
 8009090:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009092:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009096:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009098:	f107 0308 	add.w	r3, r7, #8
 800909c:	4619      	mov	r1, r3
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f7ff fe86 	bl	8008db0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 fb67 	bl	8009778 <SDMMC_GetCmdError>
 80090aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090ac:	69fb      	ldr	r3, [r7, #28]
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3720      	adds	r7, #32
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b088      	sub	sp, #32
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80090be:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80090c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80090c4:	2308      	movs	r3, #8
 80090c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090c8:	2340      	movs	r3, #64	@ 0x40
 80090ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090cc:	2300      	movs	r3, #0
 80090ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090d6:	f107 0308 	add.w	r3, r7, #8
 80090da:	4619      	mov	r1, r3
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f7ff fe67 	bl	8008db0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 fafa 	bl	80096dc <SDMMC_GetCmdResp7>
 80090e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090ea:	69fb      	ldr	r3, [r7, #28]
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3720      	adds	r7, #32
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b088      	sub	sp, #32
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009102:	2337      	movs	r3, #55	@ 0x37
 8009104:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009106:	2340      	movs	r3, #64	@ 0x40
 8009108:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800910a:	2300      	movs	r3, #0
 800910c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800910e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009112:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009114:	f107 0308 	add.w	r3, r7, #8
 8009118:	4619      	mov	r1, r3
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f7ff fe48 	bl	8008db0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009120:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009124:	2137      	movs	r1, #55	@ 0x37
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 f8ee 	bl	8009308 <SDMMC_GetCmdResp1>
 800912c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800912e:	69fb      	ldr	r3, [r7, #28]
}
 8009130:	4618      	mov	r0, r3
 8009132:	3720      	adds	r7, #32
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b088      	sub	sp, #32
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009142:	683a      	ldr	r2, [r7, #0]
 8009144:	4b0d      	ldr	r3, [pc, #52]	@ (800917c <SDMMC_CmdAppOperCommand+0x44>)
 8009146:	4313      	orrs	r3, r2
 8009148:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800914a:	2329      	movs	r3, #41	@ 0x29
 800914c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800914e:	2340      	movs	r3, #64	@ 0x40
 8009150:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009152:	2300      	movs	r3, #0
 8009154:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009156:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800915a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800915c:	f107 0308 	add.w	r3, r7, #8
 8009160:	4619      	mov	r1, r3
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f7ff fe24 	bl	8008db0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 fa03 	bl	8009574 <SDMMC_GetCmdResp3>
 800916e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009170:	69fb      	ldr	r3, [r7, #28]
}
 8009172:	4618      	mov	r0, r3
 8009174:	3720      	adds	r7, #32
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	80100000 	.word	0x80100000

08009180 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b088      	sub	sp, #32
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800918e:	2306      	movs	r3, #6
 8009190:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009192:	2340      	movs	r3, #64	@ 0x40
 8009194:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009196:	2300      	movs	r3, #0
 8009198:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800919a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800919e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091a0:	f107 0308 	add.w	r3, r7, #8
 80091a4:	4619      	mov	r1, r3
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f7ff fe02 	bl	8008db0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80091ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091b0:	2106      	movs	r1, #6
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 f8a8 	bl	8009308 <SDMMC_GetCmdResp1>
 80091b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091ba:	69fb      	ldr	r3, [r7, #28]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3720      	adds	r7, #32
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b088      	sub	sp, #32
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80091cc:	2300      	movs	r3, #0
 80091ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80091d0:	2333      	movs	r3, #51	@ 0x33
 80091d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091d4:	2340      	movs	r3, #64	@ 0x40
 80091d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091d8:	2300      	movs	r3, #0
 80091da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80091e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091e2:	f107 0308 	add.w	r3, r7, #8
 80091e6:	4619      	mov	r1, r3
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f7ff fde1 	bl	8008db0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80091ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091f2:	2133      	movs	r1, #51	@ 0x33
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 f887 	bl	8009308 <SDMMC_GetCmdResp1>
 80091fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091fc:	69fb      	ldr	r3, [r7, #28]
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3720      	adds	r7, #32
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b088      	sub	sp, #32
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800920e:	2300      	movs	r3, #0
 8009210:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009212:	2302      	movs	r3, #2
 8009214:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009216:	23c0      	movs	r3, #192	@ 0xc0
 8009218:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800921a:	2300      	movs	r3, #0
 800921c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800921e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009222:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009224:	f107 0308 	add.w	r3, r7, #8
 8009228:	4619      	mov	r1, r3
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f7ff fdc0 	bl	8008db0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 f957 	bl	80094e4 <SDMMC_GetCmdResp2>
 8009236:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009238:	69fb      	ldr	r3, [r7, #28]
}
 800923a:	4618      	mov	r0, r3
 800923c:	3720      	adds	r7, #32
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b088      	sub	sp, #32
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
 800924a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009250:	2309      	movs	r3, #9
 8009252:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009254:	23c0      	movs	r3, #192	@ 0xc0
 8009256:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009258:	2300      	movs	r3, #0
 800925a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800925c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009260:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009262:	f107 0308 	add.w	r3, r7, #8
 8009266:	4619      	mov	r1, r3
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f7ff fda1 	bl	8008db0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 f938 	bl	80094e4 <SDMMC_GetCmdResp2>
 8009274:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009276:	69fb      	ldr	r3, [r7, #28]
}
 8009278:	4618      	mov	r0, r3
 800927a:	3720      	adds	r7, #32
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b088      	sub	sp, #32
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800928a:	2300      	movs	r3, #0
 800928c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800928e:	2303      	movs	r3, #3
 8009290:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009292:	2340      	movs	r3, #64	@ 0x40
 8009294:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009296:	2300      	movs	r3, #0
 8009298:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800929a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800929e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092a0:	f107 0308 	add.w	r3, r7, #8
 80092a4:	4619      	mov	r1, r3
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f7ff fd82 	bl	8008db0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80092ac:	683a      	ldr	r2, [r7, #0]
 80092ae:	2103      	movs	r1, #3
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 f99d 	bl	80095f0 <SDMMC_GetCmdResp6>
 80092b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092b8:	69fb      	ldr	r3, [r7, #28]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3720      	adds	r7, #32
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b088      	sub	sp, #32
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
 80092ca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80092d0:	230d      	movs	r3, #13
 80092d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092d4:	2340      	movs	r3, #64	@ 0x40
 80092d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092d8:	2300      	movs	r3, #0
 80092da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092e2:	f107 0308 	add.w	r3, r7, #8
 80092e6:	4619      	mov	r1, r3
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f7ff fd61 	bl	8008db0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80092ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092f2:	210d      	movs	r1, #13
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 f807 	bl	8009308 <SDMMC_GetCmdResp1>
 80092fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092fc:	69fb      	ldr	r3, [r7, #28]
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3720      	adds	r7, #32
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
	...

08009308 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b088      	sub	sp, #32
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	460b      	mov	r3, r1
 8009312:	607a      	str	r2, [r7, #4]
 8009314:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009316:	4b70      	ldr	r3, [pc, #448]	@ (80094d8 <SDMMC_GetCmdResp1+0x1d0>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a70      	ldr	r2, [pc, #448]	@ (80094dc <SDMMC_GetCmdResp1+0x1d4>)
 800931c:	fba2 2303 	umull	r2, r3, r2, r3
 8009320:	0a5a      	lsrs	r2, r3, #9
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	fb02 f303 	mul.w	r3, r2, r3
 8009328:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	1e5a      	subs	r2, r3, #1
 800932e:	61fa      	str	r2, [r7, #28]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d102      	bne.n	800933a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009334:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009338:	e0c9      	b.n	80094ce <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800933e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009346:	2b00      	cmp	r3, #0
 8009348:	d0ef      	beq.n	800932a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009350:	2b00      	cmp	r3, #0
 8009352:	d1ea      	bne.n	800932a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009358:	f003 0304 	and.w	r3, r3, #4
 800935c:	2b00      	cmp	r3, #0
 800935e:	d004      	beq.n	800936a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2204      	movs	r2, #4
 8009364:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009366:	2304      	movs	r3, #4
 8009368:	e0b1      	b.n	80094ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800936e:	f003 0301 	and.w	r3, r3, #1
 8009372:	2b00      	cmp	r3, #0
 8009374:	d004      	beq.n	8009380 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2201      	movs	r2, #1
 800937a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800937c:	2301      	movs	r3, #1
 800937e:	e0a6      	b.n	80094ce <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	22c5      	movs	r2, #197	@ 0xc5
 8009384:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009386:	68f8      	ldr	r0, [r7, #12]
 8009388:	f7ff fd3c 	bl	8008e04 <SDMMC_GetCommandResponse>
 800938c:	4603      	mov	r3, r0
 800938e:	461a      	mov	r2, r3
 8009390:	7afb      	ldrb	r3, [r7, #11]
 8009392:	4293      	cmp	r3, r2
 8009394:	d001      	beq.n	800939a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009396:	2301      	movs	r3, #1
 8009398:	e099      	b.n	80094ce <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800939a:	2100      	movs	r1, #0
 800939c:	68f8      	ldr	r0, [r7, #12]
 800939e:	f7ff fd3e 	bl	8008e1e <SDMMC_GetResponse>
 80093a2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80093a4:	697a      	ldr	r2, [r7, #20]
 80093a6:	4b4e      	ldr	r3, [pc, #312]	@ (80094e0 <SDMMC_GetCmdResp1+0x1d8>)
 80093a8:	4013      	ands	r3, r2
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d101      	bne.n	80093b2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80093ae:	2300      	movs	r3, #0
 80093b0:	e08d      	b.n	80094ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	da02      	bge.n	80093be <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80093b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80093bc:	e087      	b.n	80094ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d001      	beq.n	80093cc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80093c8:	2340      	movs	r3, #64	@ 0x40
 80093ca:	e080      	b.n	80094ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d001      	beq.n	80093da <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80093d6:	2380      	movs	r3, #128	@ 0x80
 80093d8:	e079      	b.n	80094ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d002      	beq.n	80093ea <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80093e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80093e8:	e071      	b.n	80094ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d002      	beq.n	80093fa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80093f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80093f8:	e069      	b.n	80094ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009400:	2b00      	cmp	r3, #0
 8009402:	d002      	beq.n	800940a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009404:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009408:	e061      	b.n	80094ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009410:	2b00      	cmp	r3, #0
 8009412:	d002      	beq.n	800941a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009414:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009418:	e059      	b.n	80094ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009420:	2b00      	cmp	r3, #0
 8009422:	d002      	beq.n	800942a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009424:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009428:	e051      	b.n	80094ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009430:	2b00      	cmp	r3, #0
 8009432:	d002      	beq.n	800943a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009434:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009438:	e049      	b.n	80094ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009440:	2b00      	cmp	r3, #0
 8009442:	d002      	beq.n	800944a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009444:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009448:	e041      	b.n	80094ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009450:	2b00      	cmp	r3, #0
 8009452:	d002      	beq.n	800945a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009454:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009458:	e039      	b.n	80094ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009460:	2b00      	cmp	r3, #0
 8009462:	d002      	beq.n	800946a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009464:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009468:	e031      	b.n	80094ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009470:	2b00      	cmp	r3, #0
 8009472:	d002      	beq.n	800947a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009474:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009478:	e029      	b.n	80094ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009480:	2b00      	cmp	r3, #0
 8009482:	d002      	beq.n	800948a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009484:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009488:	e021      	b.n	80094ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009490:	2b00      	cmp	r3, #0
 8009492:	d002      	beq.n	800949a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009494:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009498:	e019      	b.n	80094ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d002      	beq.n	80094aa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80094a4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80094a8:	e011      	b.n	80094ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d002      	beq.n	80094ba <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80094b4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80094b8:	e009      	b.n	80094ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	f003 0308 	and.w	r3, r3, #8
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d002      	beq.n	80094ca <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80094c4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80094c8:	e001      	b.n	80094ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80094ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3720      	adds	r7, #32
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	20000000 	.word	0x20000000
 80094dc:	10624dd3 	.word	0x10624dd3
 80094e0:	fdffe008 	.word	0xfdffe008

080094e4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80094ec:	4b1f      	ldr	r3, [pc, #124]	@ (800956c <SDMMC_GetCmdResp2+0x88>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a1f      	ldr	r2, [pc, #124]	@ (8009570 <SDMMC_GetCmdResp2+0x8c>)
 80094f2:	fba2 2303 	umull	r2, r3, r2, r3
 80094f6:	0a5b      	lsrs	r3, r3, #9
 80094f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094fc:	fb02 f303 	mul.w	r3, r2, r3
 8009500:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	1e5a      	subs	r2, r3, #1
 8009506:	60fa      	str	r2, [r7, #12]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d102      	bne.n	8009512 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800950c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009510:	e026      	b.n	8009560 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009516:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800951e:	2b00      	cmp	r3, #0
 8009520:	d0ef      	beq.n	8009502 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009528:	2b00      	cmp	r3, #0
 800952a:	d1ea      	bne.n	8009502 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009530:	f003 0304 	and.w	r3, r3, #4
 8009534:	2b00      	cmp	r3, #0
 8009536:	d004      	beq.n	8009542 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2204      	movs	r2, #4
 800953c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800953e:	2304      	movs	r3, #4
 8009540:	e00e      	b.n	8009560 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009546:	f003 0301 	and.w	r3, r3, #1
 800954a:	2b00      	cmp	r3, #0
 800954c:	d004      	beq.n	8009558 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2201      	movs	r2, #1
 8009552:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009554:	2301      	movs	r3, #1
 8009556:	e003      	b.n	8009560 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	22c5      	movs	r2, #197	@ 0xc5
 800955c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3714      	adds	r7, #20
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr
 800956c:	20000000 	.word	0x20000000
 8009570:	10624dd3 	.word	0x10624dd3

08009574 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009574:	b480      	push	{r7}
 8009576:	b085      	sub	sp, #20
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800957c:	4b1a      	ldr	r3, [pc, #104]	@ (80095e8 <SDMMC_GetCmdResp3+0x74>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a1a      	ldr	r2, [pc, #104]	@ (80095ec <SDMMC_GetCmdResp3+0x78>)
 8009582:	fba2 2303 	umull	r2, r3, r2, r3
 8009586:	0a5b      	lsrs	r3, r3, #9
 8009588:	f241 3288 	movw	r2, #5000	@ 0x1388
 800958c:	fb02 f303 	mul.w	r3, r2, r3
 8009590:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	1e5a      	subs	r2, r3, #1
 8009596:	60fa      	str	r2, [r7, #12]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d102      	bne.n	80095a2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800959c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80095a0:	e01b      	b.n	80095da <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d0ef      	beq.n	8009592 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d1ea      	bne.n	8009592 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095c0:	f003 0304 	and.w	r3, r3, #4
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d004      	beq.n	80095d2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2204      	movs	r2, #4
 80095cc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80095ce:	2304      	movs	r3, #4
 80095d0:	e003      	b.n	80095da <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	22c5      	movs	r2, #197	@ 0xc5
 80095d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3714      	adds	r7, #20
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	20000000 	.word	0x20000000
 80095ec:	10624dd3 	.word	0x10624dd3

080095f0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b088      	sub	sp, #32
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	460b      	mov	r3, r1
 80095fa:	607a      	str	r2, [r7, #4]
 80095fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80095fe:	4b35      	ldr	r3, [pc, #212]	@ (80096d4 <SDMMC_GetCmdResp6+0xe4>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a35      	ldr	r2, [pc, #212]	@ (80096d8 <SDMMC_GetCmdResp6+0xe8>)
 8009604:	fba2 2303 	umull	r2, r3, r2, r3
 8009608:	0a5b      	lsrs	r3, r3, #9
 800960a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800960e:	fb02 f303 	mul.w	r3, r2, r3
 8009612:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	1e5a      	subs	r2, r3, #1
 8009618:	61fa      	str	r2, [r7, #28]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d102      	bne.n	8009624 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800961e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009622:	e052      	b.n	80096ca <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009628:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009630:	2b00      	cmp	r3, #0
 8009632:	d0ef      	beq.n	8009614 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009634:	69bb      	ldr	r3, [r7, #24]
 8009636:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800963a:	2b00      	cmp	r3, #0
 800963c:	d1ea      	bne.n	8009614 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009642:	f003 0304 	and.w	r3, r3, #4
 8009646:	2b00      	cmp	r3, #0
 8009648:	d004      	beq.n	8009654 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2204      	movs	r2, #4
 800964e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009650:	2304      	movs	r3, #4
 8009652:	e03a      	b.n	80096ca <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009658:	f003 0301 	and.w	r3, r3, #1
 800965c:	2b00      	cmp	r3, #0
 800965e:	d004      	beq.n	800966a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2201      	movs	r2, #1
 8009664:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009666:	2301      	movs	r3, #1
 8009668:	e02f      	b.n	80096ca <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f7ff fbca 	bl	8008e04 <SDMMC_GetCommandResponse>
 8009670:	4603      	mov	r3, r0
 8009672:	461a      	mov	r2, r3
 8009674:	7afb      	ldrb	r3, [r7, #11]
 8009676:	4293      	cmp	r3, r2
 8009678:	d001      	beq.n	800967e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800967a:	2301      	movs	r3, #1
 800967c:	e025      	b.n	80096ca <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	22c5      	movs	r2, #197	@ 0xc5
 8009682:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009684:	2100      	movs	r1, #0
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f7ff fbc9 	bl	8008e1e <SDMMC_GetResponse>
 800968c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8009694:	2b00      	cmp	r3, #0
 8009696:	d106      	bne.n	80096a6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	0c1b      	lsrs	r3, r3, #16
 800969c:	b29a      	uxth	r2, r3
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80096a2:	2300      	movs	r3, #0
 80096a4:	e011      	b.n	80096ca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d002      	beq.n	80096b6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80096b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80096b4:	e009      	b.n	80096ca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d002      	beq.n	80096c6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80096c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80096c4:	e001      	b.n	80096ca <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80096c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3720      	adds	r7, #32
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	20000000 	.word	0x20000000
 80096d8:	10624dd3 	.word	0x10624dd3

080096dc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80096e4:	4b22      	ldr	r3, [pc, #136]	@ (8009770 <SDMMC_GetCmdResp7+0x94>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a22      	ldr	r2, [pc, #136]	@ (8009774 <SDMMC_GetCmdResp7+0x98>)
 80096ea:	fba2 2303 	umull	r2, r3, r2, r3
 80096ee:	0a5b      	lsrs	r3, r3, #9
 80096f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096f4:	fb02 f303 	mul.w	r3, r2, r3
 80096f8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	1e5a      	subs	r2, r3, #1
 80096fe:	60fa      	str	r2, [r7, #12]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d102      	bne.n	800970a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009704:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009708:	e02c      	b.n	8009764 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800970e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009716:	2b00      	cmp	r3, #0
 8009718:	d0ef      	beq.n	80096fa <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009720:	2b00      	cmp	r3, #0
 8009722:	d1ea      	bne.n	80096fa <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009728:	f003 0304 	and.w	r3, r3, #4
 800972c:	2b00      	cmp	r3, #0
 800972e:	d004      	beq.n	800973a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2204      	movs	r2, #4
 8009734:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009736:	2304      	movs	r3, #4
 8009738:	e014      	b.n	8009764 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800973e:	f003 0301 	and.w	r3, r3, #1
 8009742:	2b00      	cmp	r3, #0
 8009744:	d004      	beq.n	8009750 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2201      	movs	r2, #1
 800974a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800974c:	2301      	movs	r3, #1
 800974e:	e009      	b.n	8009764 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009758:	2b00      	cmp	r3, #0
 800975a:	d002      	beq.n	8009762 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2240      	movs	r2, #64	@ 0x40
 8009760:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009762:	2300      	movs	r3, #0
  
}
 8009764:	4618      	mov	r0, r3
 8009766:	3714      	adds	r7, #20
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr
 8009770:	20000000 	.word	0x20000000
 8009774:	10624dd3 	.word	0x10624dd3

08009778 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009778:	b480      	push	{r7}
 800977a:	b085      	sub	sp, #20
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009780:	4b11      	ldr	r3, [pc, #68]	@ (80097c8 <SDMMC_GetCmdError+0x50>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a11      	ldr	r2, [pc, #68]	@ (80097cc <SDMMC_GetCmdError+0x54>)
 8009786:	fba2 2303 	umull	r2, r3, r2, r3
 800978a:	0a5b      	lsrs	r3, r3, #9
 800978c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009790:	fb02 f303 	mul.w	r3, r2, r3
 8009794:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	1e5a      	subs	r2, r3, #1
 800979a:	60fa      	str	r2, [r7, #12]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d102      	bne.n	80097a6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80097a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80097a4:	e009      	b.n	80097ba <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d0f1      	beq.n	8009796 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	22c5      	movs	r2, #197	@ 0xc5
 80097b6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3714      	adds	r7, #20
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr
 80097c6:	bf00      	nop
 80097c8:	20000000 	.word	0x20000000
 80097cc:	10624dd3 	.word	0x10624dd3

080097d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80097d0:	b084      	sub	sp, #16
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b084      	sub	sp, #16
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
 80097da:	f107 001c 	add.w	r0, r7, #28
 80097de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80097e2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d127      	bne.n	800983a <USB_CoreInit+0x6a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097ee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	68da      	ldr	r2, [r3, #12]
 80097fa:	4b3a      	ldr	r3, [pc, #232]	@ (80098e4 <USB_CoreInit+0x114>)
 80097fc:	4013      	ands	r3, r2
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	f043 0210 	orr.w	r2, r3, #16
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800981a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800981e:	2b01      	cmp	r3, #1
 8009820:	d105      	bne.n	800982e <USB_CoreInit+0x5e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f001 fb1c 	bl	800ae6c <USB_CoreReset>
 8009834:	4603      	mov	r3, r0
 8009836:	73fb      	strb	r3, [r7, #15]
 8009838:	e03c      	b.n	80098b4 <USB_CoreInit+0xe4>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800983a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800983e:	2b03      	cmp	r3, #3
 8009840:	d127      	bne.n	8009892 <USB_CoreInit+0xc2>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009846:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	68da      	ldr	r2, [r3, #12]
 8009852:	4b24      	ldr	r3, [pc, #144]	@ (80098e4 <USB_CoreInit+0x114>)
 8009854:	4013      	ands	r3, r2
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	f023 0210 	bic.w	r2, r3, #16
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 8009872:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009876:	2b01      	cmp	r3, #1
 8009878:	d105      	bne.n	8009886 <USB_CoreInit+0xb6>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	68db      	ldr	r3, [r3, #12]
 800987e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f001 faf0 	bl	800ae6c <USB_CoreReset>
 800988c:	4603      	mov	r3, r0
 800988e:	73fb      	strb	r3, [r7, #15]
 8009890:	e010      	b.n	80098b4 <USB_CoreInit+0xe4>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f001 fae4 	bl	800ae6c <USB_CoreReset>
 80098a4:	4603      	mov	r3, r0
 80098a6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098ac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80098b4:	7fbb      	ldrb	r3, [r7, #30]
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d10b      	bne.n	80098d2 <USB_CoreInit+0x102>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	f043 0206 	orr.w	r2, r3, #6
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	f043 0220 	orr.w	r2, r3, #32
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80098d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3710      	adds	r7, #16
 80098d8:	46bd      	mov	sp, r7
 80098da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098de:	b004      	add	sp, #16
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	ffbdffbf 	.word	0xffbdffbf

080098e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b087      	sub	sp, #28
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	4613      	mov	r3, r2
 80098f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80098f6:	79fb      	ldrb	r3, [r7, #7]
 80098f8:	2b02      	cmp	r3, #2
 80098fa:	d165      	bne.n	80099c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	4a41      	ldr	r2, [pc, #260]	@ (8009a04 <USB_SetTurnaroundTime+0x11c>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d906      	bls.n	8009912 <USB_SetTurnaroundTime+0x2a>
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	4a40      	ldr	r2, [pc, #256]	@ (8009a08 <USB_SetTurnaroundTime+0x120>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d202      	bcs.n	8009912 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800990c:	230f      	movs	r3, #15
 800990e:	617b      	str	r3, [r7, #20]
 8009910:	e062      	b.n	80099d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	4a3c      	ldr	r2, [pc, #240]	@ (8009a08 <USB_SetTurnaroundTime+0x120>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d306      	bcc.n	8009928 <USB_SetTurnaroundTime+0x40>
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	4a3b      	ldr	r2, [pc, #236]	@ (8009a0c <USB_SetTurnaroundTime+0x124>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d202      	bcs.n	8009928 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009922:	230e      	movs	r3, #14
 8009924:	617b      	str	r3, [r7, #20]
 8009926:	e057      	b.n	80099d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	4a38      	ldr	r2, [pc, #224]	@ (8009a0c <USB_SetTurnaroundTime+0x124>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d306      	bcc.n	800993e <USB_SetTurnaroundTime+0x56>
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	4a37      	ldr	r2, [pc, #220]	@ (8009a10 <USB_SetTurnaroundTime+0x128>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d202      	bcs.n	800993e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009938:	230d      	movs	r3, #13
 800993a:	617b      	str	r3, [r7, #20]
 800993c:	e04c      	b.n	80099d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	4a33      	ldr	r2, [pc, #204]	@ (8009a10 <USB_SetTurnaroundTime+0x128>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d306      	bcc.n	8009954 <USB_SetTurnaroundTime+0x6c>
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	4a32      	ldr	r2, [pc, #200]	@ (8009a14 <USB_SetTurnaroundTime+0x12c>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d802      	bhi.n	8009954 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800994e:	230c      	movs	r3, #12
 8009950:	617b      	str	r3, [r7, #20]
 8009952:	e041      	b.n	80099d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	4a2f      	ldr	r2, [pc, #188]	@ (8009a14 <USB_SetTurnaroundTime+0x12c>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d906      	bls.n	800996a <USB_SetTurnaroundTime+0x82>
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	4a2e      	ldr	r2, [pc, #184]	@ (8009a18 <USB_SetTurnaroundTime+0x130>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d802      	bhi.n	800996a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009964:	230b      	movs	r3, #11
 8009966:	617b      	str	r3, [r7, #20]
 8009968:	e036      	b.n	80099d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	4a2a      	ldr	r2, [pc, #168]	@ (8009a18 <USB_SetTurnaroundTime+0x130>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d906      	bls.n	8009980 <USB_SetTurnaroundTime+0x98>
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	4a29      	ldr	r2, [pc, #164]	@ (8009a1c <USB_SetTurnaroundTime+0x134>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d802      	bhi.n	8009980 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800997a:	230a      	movs	r3, #10
 800997c:	617b      	str	r3, [r7, #20]
 800997e:	e02b      	b.n	80099d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	4a26      	ldr	r2, [pc, #152]	@ (8009a1c <USB_SetTurnaroundTime+0x134>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d906      	bls.n	8009996 <USB_SetTurnaroundTime+0xae>
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	4a25      	ldr	r2, [pc, #148]	@ (8009a20 <USB_SetTurnaroundTime+0x138>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d202      	bcs.n	8009996 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009990:	2309      	movs	r3, #9
 8009992:	617b      	str	r3, [r7, #20]
 8009994:	e020      	b.n	80099d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	4a21      	ldr	r2, [pc, #132]	@ (8009a20 <USB_SetTurnaroundTime+0x138>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d306      	bcc.n	80099ac <USB_SetTurnaroundTime+0xc4>
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	4a20      	ldr	r2, [pc, #128]	@ (8009a24 <USB_SetTurnaroundTime+0x13c>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d802      	bhi.n	80099ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80099a6:	2308      	movs	r3, #8
 80099a8:	617b      	str	r3, [r7, #20]
 80099aa:	e015      	b.n	80099d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	4a1d      	ldr	r2, [pc, #116]	@ (8009a24 <USB_SetTurnaroundTime+0x13c>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d906      	bls.n	80099c2 <USB_SetTurnaroundTime+0xda>
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	4a1c      	ldr	r2, [pc, #112]	@ (8009a28 <USB_SetTurnaroundTime+0x140>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d202      	bcs.n	80099c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80099bc:	2307      	movs	r3, #7
 80099be:	617b      	str	r3, [r7, #20]
 80099c0:	e00a      	b.n	80099d8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80099c2:	2306      	movs	r3, #6
 80099c4:	617b      	str	r3, [r7, #20]
 80099c6:	e007      	b.n	80099d8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80099c8:	79fb      	ldrb	r3, [r7, #7]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d102      	bne.n	80099d4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80099ce:	2309      	movs	r3, #9
 80099d0:	617b      	str	r3, [r7, #20]
 80099d2:	e001      	b.n	80099d8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80099d4:	2309      	movs	r3, #9
 80099d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	68da      	ldr	r2, [r3, #12]
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	029b      	lsls	r3, r3, #10
 80099ec:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80099f0:	431a      	orrs	r2, r3
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	371c      	adds	r7, #28
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr
 8009a04:	00d8acbf 	.word	0x00d8acbf
 8009a08:	00e4e1c0 	.word	0x00e4e1c0
 8009a0c:	00f42400 	.word	0x00f42400
 8009a10:	01067380 	.word	0x01067380
 8009a14:	011a499f 	.word	0x011a499f
 8009a18:	01312cff 	.word	0x01312cff
 8009a1c:	014ca43f 	.word	0x014ca43f
 8009a20:	016e3600 	.word	0x016e3600
 8009a24:	01a6ab1f 	.word	0x01a6ab1f
 8009a28:	01e84800 	.word	0x01e84800

08009a2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	f043 0201 	orr.w	r2, r3, #1
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	370c      	adds	r7, #12
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr

08009a4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a4e:	b480      	push	{r7}
 8009a50:	b083      	sub	sp, #12
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	f023 0201 	bic.w	r2, r3, #1
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a62:	2300      	movs	r3, #0
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	460b      	mov	r3, r1
 8009a7a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009a8c:	78fb      	ldrb	r3, [r7, #3]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d115      	bne.n	8009abe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	68db      	ldr	r3, [r3, #12]
 8009a96:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009a9e:	200a      	movs	r0, #10
 8009aa0:	f7f8 fb3a 	bl	8002118 <HAL_Delay>
      ms += 10U;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	330a      	adds	r3, #10
 8009aa8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f001 f94d 	bl	800ad4a <USB_GetMode>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d01e      	beq.n	8009af4 <USB_SetCurrentMode+0x84>
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2bc7      	cmp	r3, #199	@ 0xc7
 8009aba:	d9f0      	bls.n	8009a9e <USB_SetCurrentMode+0x2e>
 8009abc:	e01a      	b.n	8009af4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009abe:	78fb      	ldrb	r3, [r7, #3]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d115      	bne.n	8009af0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009ad0:	200a      	movs	r0, #10
 8009ad2:	f7f8 fb21 	bl	8002118 <HAL_Delay>
      ms += 10U;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	330a      	adds	r3, #10
 8009ada:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f001 f934 	bl	800ad4a <USB_GetMode>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d005      	beq.n	8009af4 <USB_SetCurrentMode+0x84>
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2bc7      	cmp	r3, #199	@ 0xc7
 8009aec:	d9f0      	bls.n	8009ad0 <USB_SetCurrentMode+0x60>
 8009aee:	e001      	b.n	8009af4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009af0:	2301      	movs	r3, #1
 8009af2:	e005      	b.n	8009b00 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2bc8      	cmp	r3, #200	@ 0xc8
 8009af8:	d101      	bne.n	8009afe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	e000      	b.n	8009b00 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009b08:	b084      	sub	sp, #16
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b086      	sub	sp, #24
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
 8009b12:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009b16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009b22:	2300      	movs	r3, #0
 8009b24:	613b      	str	r3, [r7, #16]
 8009b26:	e009      	b.n	8009b3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	3340      	adds	r3, #64	@ 0x40
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	4413      	add	r3, r2
 8009b32:	2200      	movs	r2, #0
 8009b34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	613b      	str	r3, [r7, #16]
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	2b0e      	cmp	r3, #14
 8009b40:	d9f2      	bls.n	8009b28 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009b42:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d11c      	bne.n	8009b84 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	68fa      	ldr	r2, [r7, #12]
 8009b54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b58:	f043 0302 	orr.w	r3, r3, #2
 8009b5c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b62:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	601a      	str	r2, [r3, #0]
 8009b82:	e005      	b.n	8009b90 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b88:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009b96:	461a      	mov	r2, r3
 8009b98:	2300      	movs	r3, #0
 8009b9a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009b9c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d10d      	bne.n	8009bc0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d104      	bne.n	8009bb6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009bac:	2100      	movs	r1, #0
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 f97a 	bl	8009ea8 <USB_SetDevSpeed>
 8009bb4:	e01a      	b.n	8009bec <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009bb6:	2101      	movs	r1, #1
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 f975 	bl	8009ea8 <USB_SetDevSpeed>
 8009bbe:	e015      	b.n	8009bec <USB_DevInit+0xe4>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8009bc0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009bc4:	2b03      	cmp	r3, #3
 8009bc6:	d10d      	bne.n	8009be4 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d104      	bne.n	8009bda <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009bd0:	2100      	movs	r1, #0
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 f968 	bl	8009ea8 <USB_SetDevSpeed>
 8009bd8:	e008      	b.n	8009bec <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009bda:	2101      	movs	r1, #1
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 f963 	bl	8009ea8 <USB_SetDevSpeed>
 8009be2:	e003      	b.n	8009bec <USB_DevInit+0xe4>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009be4:	2103      	movs	r1, #3
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 f95e 	bl	8009ea8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009bec:	2110      	movs	r1, #16
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 f8fa 	bl	8009de8 <USB_FlushTxFifo>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d001      	beq.n	8009bfe <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 f924 	bl	8009e4c <USB_FlushRxFifo>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d001      	beq.n	8009c0e <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c14:	461a      	mov	r2, r3
 8009c16:	2300      	movs	r3, #0
 8009c18:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c20:	461a      	mov	r2, r3
 8009c22:	2300      	movs	r3, #0
 8009c24:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	2300      	movs	r3, #0
 8009c30:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c32:	2300      	movs	r3, #0
 8009c34:	613b      	str	r3, [r7, #16]
 8009c36:	e043      	b.n	8009cc0 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	015a      	lsls	r2, r3, #5
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	4413      	add	r3, r2
 8009c40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c4e:	d118      	bne.n	8009c82 <USB_DevInit+0x17a>
    {
      if (i == 0U)
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d10a      	bne.n	8009c6c <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	015a      	lsls	r2, r3, #5
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c62:	461a      	mov	r2, r3
 8009c64:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009c68:	6013      	str	r3, [r2, #0]
 8009c6a:	e013      	b.n	8009c94 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	015a      	lsls	r2, r3, #5
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	4413      	add	r3, r2
 8009c74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c78:	461a      	mov	r2, r3
 8009c7a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009c7e:	6013      	str	r3, [r2, #0]
 8009c80:	e008      	b.n	8009c94 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	015a      	lsls	r2, r3, #5
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	4413      	add	r3, r2
 8009c8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c8e:	461a      	mov	r2, r3
 8009c90:	2300      	movs	r3, #0
 8009c92:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	015a      	lsls	r2, r3, #5
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	015a      	lsls	r2, r3, #5
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	4413      	add	r3, r2
 8009cae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009cb8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	613b      	str	r3, [r7, #16]
 8009cc0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d3b5      	bcc.n	8009c38 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ccc:	2300      	movs	r3, #0
 8009cce:	613b      	str	r3, [r7, #16]
 8009cd0:	e043      	b.n	8009d5a <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	015a      	lsls	r2, r3, #5
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	4413      	add	r3, r2
 8009cda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ce4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ce8:	d118      	bne.n	8009d1c <USB_DevInit+0x214>
    {
      if (i == 0U)
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d10a      	bne.n	8009d06 <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	015a      	lsls	r2, r3, #5
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	4413      	add	r3, r2
 8009cf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009d02:	6013      	str	r3, [r2, #0]
 8009d04:	e013      	b.n	8009d2e <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	015a      	lsls	r2, r3, #5
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	4413      	add	r3, r2
 8009d0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d12:	461a      	mov	r2, r3
 8009d14:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009d18:	6013      	str	r3, [r2, #0]
 8009d1a:	e008      	b.n	8009d2e <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	015a      	lsls	r2, r3, #5
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	4413      	add	r3, r2
 8009d24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d28:	461a      	mov	r2, r3
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	015a      	lsls	r2, r3, #5
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	4413      	add	r3, r2
 8009d36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	015a      	lsls	r2, r3, #5
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	4413      	add	r3, r2
 8009d48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009d52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	3301      	adds	r3, #1
 8009d58:	613b      	str	r3, [r7, #16]
 8009d5a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009d5e:	461a      	mov	r2, r3
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d3b5      	bcc.n	8009cd2 <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009d74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d78:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009d86:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009d88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d105      	bne.n	8009d9c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	699b      	ldr	r3, [r3, #24]
 8009d94:	f043 0210 	orr.w	r2, r3, #16
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	699a      	ldr	r2, [r3, #24]
 8009da0:	4b0f      	ldr	r3, [pc, #60]	@ (8009de0 <USB_DevInit+0x2d8>)
 8009da2:	4313      	orrs	r3, r2
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009da8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d005      	beq.n	8009dbc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	699b      	ldr	r3, [r3, #24]
 8009db4:	f043 0208 	orr.w	r2, r3, #8
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009dbc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d105      	bne.n	8009dd0 <USB_DevInit+0x2c8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	699a      	ldr	r2, [r3, #24]
 8009dc8:	4b06      	ldr	r3, [pc, #24]	@ (8009de4 <USB_DevInit+0x2dc>)
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3718      	adds	r7, #24
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ddc:	b004      	add	sp, #16
 8009dde:	4770      	bx	lr
 8009de0:	803c3800 	.word	0x803c3800
 8009de4:	40000004 	.word	0x40000004

08009de8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b085      	sub	sp, #20
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009df2:	2300      	movs	r3, #0
 8009df4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e02:	d901      	bls.n	8009e08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009e04:	2303      	movs	r3, #3
 8009e06:	e01b      	b.n	8009e40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	691b      	ldr	r3, [r3, #16]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	daf2      	bge.n	8009df6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009e10:	2300      	movs	r3, #0
 8009e12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	019b      	lsls	r3, r3, #6
 8009e18:	f043 0220 	orr.w	r2, r3, #32
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	3301      	adds	r3, #1
 8009e24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e2c:	d901      	bls.n	8009e32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009e2e:	2303      	movs	r3, #3
 8009e30:	e006      	b.n	8009e40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	691b      	ldr	r3, [r3, #16]
 8009e36:	f003 0320 	and.w	r3, r3, #32
 8009e3a:	2b20      	cmp	r3, #32
 8009e3c:	d0f0      	beq.n	8009e20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3714      	adds	r7, #20
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009e54:	2300      	movs	r3, #0
 8009e56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e64:	d901      	bls.n	8009e6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009e66:	2303      	movs	r3, #3
 8009e68:	e018      	b.n	8009e9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	691b      	ldr	r3, [r3, #16]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	daf2      	bge.n	8009e58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009e72:	2300      	movs	r3, #0
 8009e74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2210      	movs	r2, #16
 8009e7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	3301      	adds	r3, #1
 8009e80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e88:	d901      	bls.n	8009e8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009e8a:	2303      	movs	r3, #3
 8009e8c:	e006      	b.n	8009e9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	f003 0310 	and.w	r3, r3, #16
 8009e96:	2b10      	cmp	r3, #16
 8009e98:	d0f0      	beq.n	8009e7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009e9a:	2300      	movs	r3, #0
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3714      	adds	r7, #20
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr

08009ea8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b085      	sub	sp, #20
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	78fb      	ldrb	r3, [r7, #3]
 8009ec2:	68f9      	ldr	r1, [r7, #12]
 8009ec4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3714      	adds	r7, #20
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr

08009eda <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009eda:	b480      	push	{r7}
 8009edc:	b087      	sub	sp, #28
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	f003 0306 	and.w	r3, r3, #6
 8009ef2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d102      	bne.n	8009f00 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009efa:	2300      	movs	r3, #0
 8009efc:	75fb      	strb	r3, [r7, #23]
 8009efe:	e00a      	b.n	8009f16 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2b02      	cmp	r3, #2
 8009f04:	d002      	beq.n	8009f0c <USB_GetDevSpeed+0x32>
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2b06      	cmp	r3, #6
 8009f0a:	d102      	bne.n	8009f12 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009f0c:	2302      	movs	r3, #2
 8009f0e:	75fb      	strb	r3, [r7, #23]
 8009f10:	e001      	b.n	8009f16 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009f12:	230f      	movs	r3, #15
 8009f14:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	371c      	adds	r7, #28
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b085      	sub	sp, #20
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	785b      	ldrb	r3, [r3, #1]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d139      	bne.n	8009fb4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f46:	69da      	ldr	r2, [r3, #28]
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	f003 030f 	and.w	r3, r3, #15
 8009f50:	2101      	movs	r1, #1
 8009f52:	fa01 f303 	lsl.w	r3, r1, r3
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	68f9      	ldr	r1, [r7, #12]
 8009f5a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	015a      	lsls	r2, r3, #5
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	4413      	add	r3, r2
 8009f6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d153      	bne.n	800a020 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	015a      	lsls	r2, r3, #5
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	4413      	add	r3, r2
 8009f80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	689b      	ldr	r3, [r3, #8]
 8009f8a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	791b      	ldrb	r3, [r3, #4]
 8009f92:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009f94:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	059b      	lsls	r3, r3, #22
 8009f9a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009f9c:	431a      	orrs	r2, r3
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	0159      	lsls	r1, r3, #5
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	440b      	add	r3, r1
 8009fa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009faa:	4619      	mov	r1, r3
 8009fac:	4b20      	ldr	r3, [pc, #128]	@ (800a030 <USB_ActivateEndpoint+0x10c>)
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	600b      	str	r3, [r1, #0]
 8009fb2:	e035      	b.n	800a020 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fba:	69da      	ldr	r2, [r3, #28]
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	f003 030f 	and.w	r3, r3, #15
 8009fc4:	2101      	movs	r1, #1
 8009fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8009fca:	041b      	lsls	r3, r3, #16
 8009fcc:	68f9      	ldr	r1, [r7, #12]
 8009fce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	015a      	lsls	r2, r3, #5
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	4413      	add	r3, r2
 8009fde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d119      	bne.n	800a020 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	015a      	lsls	r2, r3, #5
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	791b      	ldrb	r3, [r3, #4]
 800a006:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a008:	430b      	orrs	r3, r1
 800a00a:	431a      	orrs	r2, r3
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	0159      	lsls	r1, r3, #5
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	440b      	add	r3, r1
 800a014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a018:	4619      	mov	r1, r3
 800a01a:	4b05      	ldr	r3, [pc, #20]	@ (800a030 <USB_ActivateEndpoint+0x10c>)
 800a01c:	4313      	orrs	r3, r2
 800a01e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	3714      	adds	r7, #20
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr
 800a02e:	bf00      	nop
 800a030:	10008000 	.word	0x10008000

0800a034 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a034:	b480      	push	{r7}
 800a036:	b085      	sub	sp, #20
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	785b      	ldrb	r3, [r3, #1]
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d161      	bne.n	800a114 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	015a      	lsls	r2, r3, #5
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	4413      	add	r3, r2
 800a058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a062:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a066:	d11f      	bne.n	800a0a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	015a      	lsls	r2, r3, #5
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	4413      	add	r3, r2
 800a070:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	68ba      	ldr	r2, [r7, #8]
 800a078:	0151      	lsls	r1, r2, #5
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	440a      	add	r2, r1
 800a07e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a082:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a086:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	015a      	lsls	r2, r3, #5
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	4413      	add	r3, r2
 800a090:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	68ba      	ldr	r2, [r7, #8]
 800a098:	0151      	lsls	r1, r2, #5
 800a09a:	68fa      	ldr	r2, [r7, #12]
 800a09c:	440a      	add	r2, r1
 800a09e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a0a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	f003 030f 	and.w	r3, r3, #15
 800a0b8:	2101      	movs	r1, #1
 800a0ba:	fa01 f303 	lsl.w	r3, r1, r3
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	43db      	mvns	r3, r3
 800a0c2:	68f9      	ldr	r1, [r7, #12]
 800a0c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a0c8:	4013      	ands	r3, r2
 800a0ca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0d2:	69da      	ldr	r2, [r3, #28]
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	f003 030f 	and.w	r3, r3, #15
 800a0dc:	2101      	movs	r1, #1
 800a0de:	fa01 f303 	lsl.w	r3, r1, r3
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	43db      	mvns	r3, r3
 800a0e6:	68f9      	ldr	r1, [r7, #12]
 800a0e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a0ec:	4013      	ands	r3, r2
 800a0ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	015a      	lsls	r2, r3, #5
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	0159      	lsls	r1, r3, #5
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	440b      	add	r3, r1
 800a106:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a10a:	4619      	mov	r1, r3
 800a10c:	4b35      	ldr	r3, [pc, #212]	@ (800a1e4 <USB_DeactivateEndpoint+0x1b0>)
 800a10e:	4013      	ands	r3, r2
 800a110:	600b      	str	r3, [r1, #0]
 800a112:	e060      	b.n	800a1d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	015a      	lsls	r2, r3, #5
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	4413      	add	r3, r2
 800a11c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a126:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a12a:	d11f      	bne.n	800a16c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	015a      	lsls	r2, r3, #5
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	4413      	add	r3, r2
 800a134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	0151      	lsls	r1, r2, #5
 800a13e:	68fa      	ldr	r2, [r7, #12]
 800a140:	440a      	add	r2, r1
 800a142:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a146:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a14a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	015a      	lsls	r2, r3, #5
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	4413      	add	r3, r2
 800a154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	68ba      	ldr	r2, [r7, #8]
 800a15c:	0151      	lsls	r1, r2, #5
 800a15e:	68fa      	ldr	r2, [r7, #12]
 800a160:	440a      	add	r2, r1
 800a162:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a166:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a16a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a172:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	f003 030f 	and.w	r3, r3, #15
 800a17c:	2101      	movs	r1, #1
 800a17e:	fa01 f303 	lsl.w	r3, r1, r3
 800a182:	041b      	lsls	r3, r3, #16
 800a184:	43db      	mvns	r3, r3
 800a186:	68f9      	ldr	r1, [r7, #12]
 800a188:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a18c:	4013      	ands	r3, r2
 800a18e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a196:	69da      	ldr	r2, [r3, #28]
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	781b      	ldrb	r3, [r3, #0]
 800a19c:	f003 030f 	and.w	r3, r3, #15
 800a1a0:	2101      	movs	r1, #1
 800a1a2:	fa01 f303 	lsl.w	r3, r1, r3
 800a1a6:	041b      	lsls	r3, r3, #16
 800a1a8:	43db      	mvns	r3, r3
 800a1aa:	68f9      	ldr	r1, [r7, #12]
 800a1ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a1b0:	4013      	ands	r3, r2
 800a1b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	015a      	lsls	r2, r3, #5
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	4413      	add	r3, r2
 800a1bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	0159      	lsls	r1, r3, #5
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	440b      	add	r3, r1
 800a1ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	4b05      	ldr	r3, [pc, #20]	@ (800a1e8 <USB_DeactivateEndpoint+0x1b4>)
 800a1d2:	4013      	ands	r3, r2
 800a1d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3714      	adds	r7, #20
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr
 800a1e4:	ec337800 	.word	0xec337800
 800a1e8:	eff37800 	.word	0xeff37800

0800a1ec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b08a      	sub	sp, #40	@ 0x28
 800a1f0:	af02      	add	r7, sp, #8
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	785b      	ldrb	r3, [r3, #1]
 800a208:	2b01      	cmp	r3, #1
 800a20a:	f040 8181 	bne.w	800a510 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	691b      	ldr	r3, [r3, #16]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d132      	bne.n	800a27c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a216:	69bb      	ldr	r3, [r7, #24]
 800a218:	015a      	lsls	r2, r3, #5
 800a21a:	69fb      	ldr	r3, [r7, #28]
 800a21c:	4413      	add	r3, r2
 800a21e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a222:	691a      	ldr	r2, [r3, #16]
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	0159      	lsls	r1, r3, #5
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	440b      	add	r3, r1
 800a22c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a230:	4619      	mov	r1, r3
 800a232:	4ba5      	ldr	r3, [pc, #660]	@ (800a4c8 <USB_EPStartXfer+0x2dc>)
 800a234:	4013      	ands	r3, r2
 800a236:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	015a      	lsls	r2, r3, #5
 800a23c:	69fb      	ldr	r3, [r7, #28]
 800a23e:	4413      	add	r3, r2
 800a240:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a244:	691b      	ldr	r3, [r3, #16]
 800a246:	69ba      	ldr	r2, [r7, #24]
 800a248:	0151      	lsls	r1, r2, #5
 800a24a:	69fa      	ldr	r2, [r7, #28]
 800a24c:	440a      	add	r2, r1
 800a24e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a252:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a256:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a258:	69bb      	ldr	r3, [r7, #24]
 800a25a:	015a      	lsls	r2, r3, #5
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	4413      	add	r3, r2
 800a260:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a264:	691a      	ldr	r2, [r3, #16]
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	0159      	lsls	r1, r3, #5
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	440b      	add	r3, r1
 800a26e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a272:	4619      	mov	r1, r3
 800a274:	4b95      	ldr	r3, [pc, #596]	@ (800a4cc <USB_EPStartXfer+0x2e0>)
 800a276:	4013      	ands	r3, r2
 800a278:	610b      	str	r3, [r1, #16]
 800a27a:	e092      	b.n	800a3a2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	015a      	lsls	r2, r3, #5
 800a280:	69fb      	ldr	r3, [r7, #28]
 800a282:	4413      	add	r3, r2
 800a284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a288:	691a      	ldr	r2, [r3, #16]
 800a28a:	69bb      	ldr	r3, [r7, #24]
 800a28c:	0159      	lsls	r1, r3, #5
 800a28e:	69fb      	ldr	r3, [r7, #28]
 800a290:	440b      	add	r3, r1
 800a292:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a296:	4619      	mov	r1, r3
 800a298:	4b8c      	ldr	r3, [pc, #560]	@ (800a4cc <USB_EPStartXfer+0x2e0>)
 800a29a:	4013      	ands	r3, r2
 800a29c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	015a      	lsls	r2, r3, #5
 800a2a2:	69fb      	ldr	r3, [r7, #28]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2aa:	691a      	ldr	r2, [r3, #16]
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	0159      	lsls	r1, r3, #5
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	440b      	add	r3, r1
 800a2b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	4b83      	ldr	r3, [pc, #524]	@ (800a4c8 <USB_EPStartXfer+0x2dc>)
 800a2bc:	4013      	ands	r3, r2
 800a2be:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800a2c0:	69bb      	ldr	r3, [r7, #24]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d11a      	bne.n	800a2fc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	691a      	ldr	r2, [r3, #16]
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	689b      	ldr	r3, [r3, #8]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d903      	bls.n	800a2da <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	689a      	ldr	r2, [r3, #8]
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a2da:	69bb      	ldr	r3, [r7, #24]
 800a2dc:	015a      	lsls	r2, r3, #5
 800a2de:	69fb      	ldr	r3, [r7, #28]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	69ba      	ldr	r2, [r7, #24]
 800a2ea:	0151      	lsls	r1, r2, #5
 800a2ec:	69fa      	ldr	r2, [r7, #28]
 800a2ee:	440a      	add	r2, r1
 800a2f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a2f8:	6113      	str	r3, [r2, #16]
 800a2fa:	e01b      	b.n	800a334 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a2fc:	69bb      	ldr	r3, [r7, #24]
 800a2fe:	015a      	lsls	r2, r3, #5
 800a300:	69fb      	ldr	r3, [r7, #28]
 800a302:	4413      	add	r3, r2
 800a304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a308:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	6919      	ldr	r1, [r3, #16]
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	440b      	add	r3, r1
 800a314:	1e59      	subs	r1, r3, #1
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	689b      	ldr	r3, [r3, #8]
 800a31a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a31e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a320:	4b6b      	ldr	r3, [pc, #428]	@ (800a4d0 <USB_EPStartXfer+0x2e4>)
 800a322:	400b      	ands	r3, r1
 800a324:	69b9      	ldr	r1, [r7, #24]
 800a326:	0148      	lsls	r0, r1, #5
 800a328:	69f9      	ldr	r1, [r7, #28]
 800a32a:	4401      	add	r1, r0
 800a32c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a330:	4313      	orrs	r3, r2
 800a332:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a334:	69bb      	ldr	r3, [r7, #24]
 800a336:	015a      	lsls	r2, r3, #5
 800a338:	69fb      	ldr	r3, [r7, #28]
 800a33a:	4413      	add	r3, r2
 800a33c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a340:	691a      	ldr	r2, [r3, #16]
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	691b      	ldr	r3, [r3, #16]
 800a346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a34a:	69b9      	ldr	r1, [r7, #24]
 800a34c:	0148      	lsls	r0, r1, #5
 800a34e:	69f9      	ldr	r1, [r7, #28]
 800a350:	4401      	add	r1, r0
 800a352:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a356:	4313      	orrs	r3, r2
 800a358:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	791b      	ldrb	r3, [r3, #4]
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d11f      	bne.n	800a3a2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a362:	69bb      	ldr	r3, [r7, #24]
 800a364:	015a      	lsls	r2, r3, #5
 800a366:	69fb      	ldr	r3, [r7, #28]
 800a368:	4413      	add	r3, r2
 800a36a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a36e:	691b      	ldr	r3, [r3, #16]
 800a370:	69ba      	ldr	r2, [r7, #24]
 800a372:	0151      	lsls	r1, r2, #5
 800a374:	69fa      	ldr	r2, [r7, #28]
 800a376:	440a      	add	r2, r1
 800a378:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a37c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a380:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a382:	69bb      	ldr	r3, [r7, #24]
 800a384:	015a      	lsls	r2, r3, #5
 800a386:	69fb      	ldr	r3, [r7, #28]
 800a388:	4413      	add	r3, r2
 800a38a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a38e:	691b      	ldr	r3, [r3, #16]
 800a390:	69ba      	ldr	r2, [r7, #24]
 800a392:	0151      	lsls	r1, r2, #5
 800a394:	69fa      	ldr	r2, [r7, #28]
 800a396:	440a      	add	r2, r1
 800a398:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a39c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a3a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a3a2:	79fb      	ldrb	r3, [r7, #7]
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d14b      	bne.n	800a440 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	69db      	ldr	r3, [r3, #28]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d009      	beq.n	800a3c4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a3b0:	69bb      	ldr	r3, [r7, #24]
 800a3b2:	015a      	lsls	r2, r3, #5
 800a3b4:	69fb      	ldr	r3, [r7, #28]
 800a3b6:	4413      	add	r3, r2
 800a3b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3bc:	461a      	mov	r2, r3
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	69db      	ldr	r3, [r3, #28]
 800a3c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	791b      	ldrb	r3, [r3, #4]
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d128      	bne.n	800a41e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a3cc:	69fb      	ldr	r3, [r7, #28]
 800a3ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d110      	bne.n	800a3fe <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	015a      	lsls	r2, r3, #5
 800a3e0:	69fb      	ldr	r3, [r7, #28]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	69ba      	ldr	r2, [r7, #24]
 800a3ec:	0151      	lsls	r1, r2, #5
 800a3ee:	69fa      	ldr	r2, [r7, #28]
 800a3f0:	440a      	add	r2, r1
 800a3f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3f6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a3fa:	6013      	str	r3, [r2, #0]
 800a3fc:	e00f      	b.n	800a41e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a3fe:	69bb      	ldr	r3, [r7, #24]
 800a400:	015a      	lsls	r2, r3, #5
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	4413      	add	r3, r2
 800a406:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	69ba      	ldr	r2, [r7, #24]
 800a40e:	0151      	lsls	r1, r2, #5
 800a410:	69fa      	ldr	r2, [r7, #28]
 800a412:	440a      	add	r2, r1
 800a414:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a41c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	015a      	lsls	r2, r3, #5
 800a422:	69fb      	ldr	r3, [r7, #28]
 800a424:	4413      	add	r3, r2
 800a426:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	69ba      	ldr	r2, [r7, #24]
 800a42e:	0151      	lsls	r1, r2, #5
 800a430:	69fa      	ldr	r2, [r7, #28]
 800a432:	440a      	add	r2, r1
 800a434:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a438:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a43c:	6013      	str	r3, [r2, #0]
 800a43e:	e16a      	b.n	800a716 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a440:	69bb      	ldr	r3, [r7, #24]
 800a442:	015a      	lsls	r2, r3, #5
 800a444:	69fb      	ldr	r3, [r7, #28]
 800a446:	4413      	add	r3, r2
 800a448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	69ba      	ldr	r2, [r7, #24]
 800a450:	0151      	lsls	r1, r2, #5
 800a452:	69fa      	ldr	r2, [r7, #28]
 800a454:	440a      	add	r2, r1
 800a456:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a45a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a45e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	791b      	ldrb	r3, [r3, #4]
 800a464:	2b01      	cmp	r3, #1
 800a466:	d015      	beq.n	800a494 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	691b      	ldr	r3, [r3, #16]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	f000 8152 	beq.w	800a716 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a472:	69fb      	ldr	r3, [r7, #28]
 800a474:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a478:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	f003 030f 	and.w	r3, r3, #15
 800a482:	2101      	movs	r1, #1
 800a484:	fa01 f303 	lsl.w	r3, r1, r3
 800a488:	69f9      	ldr	r1, [r7, #28]
 800a48a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a48e:	4313      	orrs	r3, r2
 800a490:	634b      	str	r3, [r1, #52]	@ 0x34
 800a492:	e140      	b.n	800a716 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d117      	bne.n	800a4d4 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a4a4:	69bb      	ldr	r3, [r7, #24]
 800a4a6:	015a      	lsls	r2, r3, #5
 800a4a8:	69fb      	ldr	r3, [r7, #28]
 800a4aa:	4413      	add	r3, r2
 800a4ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	69ba      	ldr	r2, [r7, #24]
 800a4b4:	0151      	lsls	r1, r2, #5
 800a4b6:	69fa      	ldr	r2, [r7, #28]
 800a4b8:	440a      	add	r2, r1
 800a4ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4be:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a4c2:	6013      	str	r3, [r2, #0]
 800a4c4:	e016      	b.n	800a4f4 <USB_EPStartXfer+0x308>
 800a4c6:	bf00      	nop
 800a4c8:	e007ffff 	.word	0xe007ffff
 800a4cc:	fff80000 	.word	0xfff80000
 800a4d0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a4d4:	69bb      	ldr	r3, [r7, #24]
 800a4d6:	015a      	lsls	r2, r3, #5
 800a4d8:	69fb      	ldr	r3, [r7, #28]
 800a4da:	4413      	add	r3, r2
 800a4dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	69ba      	ldr	r2, [r7, #24]
 800a4e4:	0151      	lsls	r1, r2, #5
 800a4e6:	69fa      	ldr	r2, [r7, #28]
 800a4e8:	440a      	add	r2, r1
 800a4ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a4f2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	68d9      	ldr	r1, [r3, #12]
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	781a      	ldrb	r2, [r3, #0]
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	691b      	ldr	r3, [r3, #16]
 800a500:	b298      	uxth	r0, r3
 800a502:	79fb      	ldrb	r3, [r7, #7]
 800a504:	9300      	str	r3, [sp, #0]
 800a506:	4603      	mov	r3, r0
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	f000 f9b9 	bl	800a880 <USB_WritePacket>
 800a50e:	e102      	b.n	800a716 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	015a      	lsls	r2, r3, #5
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	4413      	add	r3, r2
 800a518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a51c:	691a      	ldr	r2, [r3, #16]
 800a51e:	69bb      	ldr	r3, [r7, #24]
 800a520:	0159      	lsls	r1, r3, #5
 800a522:	69fb      	ldr	r3, [r7, #28]
 800a524:	440b      	add	r3, r1
 800a526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a52a:	4619      	mov	r1, r3
 800a52c:	4b7c      	ldr	r3, [pc, #496]	@ (800a720 <USB_EPStartXfer+0x534>)
 800a52e:	4013      	ands	r3, r2
 800a530:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a532:	69bb      	ldr	r3, [r7, #24]
 800a534:	015a      	lsls	r2, r3, #5
 800a536:	69fb      	ldr	r3, [r7, #28]
 800a538:	4413      	add	r3, r2
 800a53a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a53e:	691a      	ldr	r2, [r3, #16]
 800a540:	69bb      	ldr	r3, [r7, #24]
 800a542:	0159      	lsls	r1, r3, #5
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	440b      	add	r3, r1
 800a548:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a54c:	4619      	mov	r1, r3
 800a54e:	4b75      	ldr	r3, [pc, #468]	@ (800a724 <USB_EPStartXfer+0x538>)
 800a550:	4013      	ands	r3, r2
 800a552:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800a554:	69bb      	ldr	r3, [r7, #24]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d12f      	bne.n	800a5ba <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	691b      	ldr	r3, [r3, #16]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d003      	beq.n	800a56a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	689a      	ldr	r2, [r3, #8]
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	689a      	ldr	r2, [r3, #8]
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	015a      	lsls	r2, r3, #5
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	4413      	add	r3, r2
 800a57a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a57e:	691a      	ldr	r2, [r3, #16]
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	6a1b      	ldr	r3, [r3, #32]
 800a584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a588:	69b9      	ldr	r1, [r7, #24]
 800a58a:	0148      	lsls	r0, r1, #5
 800a58c:	69f9      	ldr	r1, [r7, #28]
 800a58e:	4401      	add	r1, r0
 800a590:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a594:	4313      	orrs	r3, r2
 800a596:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	015a      	lsls	r2, r3, #5
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	4413      	add	r3, r2
 800a5a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5a4:	691b      	ldr	r3, [r3, #16]
 800a5a6:	69ba      	ldr	r2, [r7, #24]
 800a5a8:	0151      	lsls	r1, r2, #5
 800a5aa:	69fa      	ldr	r2, [r7, #28]
 800a5ac:	440a      	add	r2, r1
 800a5ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a5b6:	6113      	str	r3, [r2, #16]
 800a5b8:	e05f      	b.n	800a67a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	691b      	ldr	r3, [r3, #16]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d123      	bne.n	800a60a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a5c2:	69bb      	ldr	r3, [r7, #24]
 800a5c4:	015a      	lsls	r2, r3, #5
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5ce:	691a      	ldr	r2, [r3, #16]
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a5d8:	69b9      	ldr	r1, [r7, #24]
 800a5da:	0148      	lsls	r0, r1, #5
 800a5dc:	69f9      	ldr	r1, [r7, #28]
 800a5de:	4401      	add	r1, r0
 800a5e0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	015a      	lsls	r2, r3, #5
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	4413      	add	r3, r2
 800a5f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5f4:	691b      	ldr	r3, [r3, #16]
 800a5f6:	69ba      	ldr	r2, [r7, #24]
 800a5f8:	0151      	lsls	r1, r2, #5
 800a5fa:	69fa      	ldr	r2, [r7, #28]
 800a5fc:	440a      	add	r2, r1
 800a5fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a602:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a606:	6113      	str	r3, [r2, #16]
 800a608:	e037      	b.n	800a67a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	691a      	ldr	r2, [r3, #16]
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	689b      	ldr	r3, [r3, #8]
 800a612:	4413      	add	r3, r2
 800a614:	1e5a      	subs	r2, r3, #1
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a61e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	8afa      	ldrh	r2, [r7, #22]
 800a626:	fb03 f202 	mul.w	r2, r3, r2
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	015a      	lsls	r2, r3, #5
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	4413      	add	r3, r2
 800a636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a63a:	691a      	ldr	r2, [r3, #16]
 800a63c:	8afb      	ldrh	r3, [r7, #22]
 800a63e:	04d9      	lsls	r1, r3, #19
 800a640:	4b39      	ldr	r3, [pc, #228]	@ (800a728 <USB_EPStartXfer+0x53c>)
 800a642:	400b      	ands	r3, r1
 800a644:	69b9      	ldr	r1, [r7, #24]
 800a646:	0148      	lsls	r0, r1, #5
 800a648:	69f9      	ldr	r1, [r7, #28]
 800a64a:	4401      	add	r1, r0
 800a64c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a650:	4313      	orrs	r3, r2
 800a652:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	015a      	lsls	r2, r3, #5
 800a658:	69fb      	ldr	r3, [r7, #28]
 800a65a:	4413      	add	r3, r2
 800a65c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a660:	691a      	ldr	r2, [r3, #16]
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	6a1b      	ldr	r3, [r3, #32]
 800a666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a66a:	69b9      	ldr	r1, [r7, #24]
 800a66c:	0148      	lsls	r0, r1, #5
 800a66e:	69f9      	ldr	r1, [r7, #28]
 800a670:	4401      	add	r1, r0
 800a672:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a676:	4313      	orrs	r3, r2
 800a678:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a67a:	79fb      	ldrb	r3, [r7, #7]
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d10d      	bne.n	800a69c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	68db      	ldr	r3, [r3, #12]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d009      	beq.n	800a69c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	68d9      	ldr	r1, [r3, #12]
 800a68c:	69bb      	ldr	r3, [r7, #24]
 800a68e:	015a      	lsls	r2, r3, #5
 800a690:	69fb      	ldr	r3, [r7, #28]
 800a692:	4413      	add	r3, r2
 800a694:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a698:	460a      	mov	r2, r1
 800a69a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	791b      	ldrb	r3, [r3, #4]
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d128      	bne.n	800a6f6 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6aa:	689b      	ldr	r3, [r3, #8]
 800a6ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d110      	bne.n	800a6d6 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a6b4:	69bb      	ldr	r3, [r7, #24]
 800a6b6:	015a      	lsls	r2, r3, #5
 800a6b8:	69fb      	ldr	r3, [r7, #28]
 800a6ba:	4413      	add	r3, r2
 800a6bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	69ba      	ldr	r2, [r7, #24]
 800a6c4:	0151      	lsls	r1, r2, #5
 800a6c6:	69fa      	ldr	r2, [r7, #28]
 800a6c8:	440a      	add	r2, r1
 800a6ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6ce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a6d2:	6013      	str	r3, [r2, #0]
 800a6d4:	e00f      	b.n	800a6f6 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a6d6:	69bb      	ldr	r3, [r7, #24]
 800a6d8:	015a      	lsls	r2, r3, #5
 800a6da:	69fb      	ldr	r3, [r7, #28]
 800a6dc:	4413      	add	r3, r2
 800a6de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	69ba      	ldr	r2, [r7, #24]
 800a6e6:	0151      	lsls	r1, r2, #5
 800a6e8:	69fa      	ldr	r2, [r7, #28]
 800a6ea:	440a      	add	r2, r1
 800a6ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a6f4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a6f6:	69bb      	ldr	r3, [r7, #24]
 800a6f8:	015a      	lsls	r2, r3, #5
 800a6fa:	69fb      	ldr	r3, [r7, #28]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	69ba      	ldr	r2, [r7, #24]
 800a706:	0151      	lsls	r1, r2, #5
 800a708:	69fa      	ldr	r2, [r7, #28]
 800a70a:	440a      	add	r2, r1
 800a70c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a710:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a714:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a716:	2300      	movs	r3, #0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3720      	adds	r7, #32
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}
 800a720:	fff80000 	.word	0xfff80000
 800a724:	e007ffff 	.word	0xe007ffff
 800a728:	1ff80000 	.word	0x1ff80000

0800a72c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b087      	sub	sp, #28
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a736:	2300      	movs	r3, #0
 800a738:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a73a:	2300      	movs	r3, #0
 800a73c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	785b      	ldrb	r3, [r3, #1]
 800a746:	2b01      	cmp	r3, #1
 800a748:	d14a      	bne.n	800a7e0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	015a      	lsls	r2, r3, #5
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	4413      	add	r3, r2
 800a754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a75e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a762:	f040 8086 	bne.w	800a872 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	781b      	ldrb	r3, [r3, #0]
 800a76a:	015a      	lsls	r2, r3, #5
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	4413      	add	r3, r2
 800a770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	683a      	ldr	r2, [r7, #0]
 800a778:	7812      	ldrb	r2, [r2, #0]
 800a77a:	0151      	lsls	r1, r2, #5
 800a77c:	693a      	ldr	r2, [r7, #16]
 800a77e:	440a      	add	r2, r1
 800a780:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a784:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a788:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	015a      	lsls	r2, r3, #5
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	4413      	add	r3, r2
 800a794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	683a      	ldr	r2, [r7, #0]
 800a79c:	7812      	ldrb	r2, [r2, #0]
 800a79e:	0151      	lsls	r1, r2, #5
 800a7a0:	693a      	ldr	r2, [r7, #16]
 800a7a2:	440a      	add	r2, r1
 800a7a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a7ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d902      	bls.n	800a7c4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	75fb      	strb	r3, [r7, #23]
          break;
 800a7c2:	e056      	b.n	800a872 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	015a      	lsls	r2, r3, #5
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a7d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7dc:	d0e7      	beq.n	800a7ae <USB_EPStopXfer+0x82>
 800a7de:	e048      	b.n	800a872 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	015a      	lsls	r2, r3, #5
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a7f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7f8:	d13b      	bne.n	800a872 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	015a      	lsls	r2, r3, #5
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	4413      	add	r3, r2
 800a804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	683a      	ldr	r2, [r7, #0]
 800a80c:	7812      	ldrb	r2, [r2, #0]
 800a80e:	0151      	lsls	r1, r2, #5
 800a810:	693a      	ldr	r2, [r7, #16]
 800a812:	440a      	add	r2, r1
 800a814:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a818:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a81c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	015a      	lsls	r2, r3, #5
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	4413      	add	r3, r2
 800a828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	683a      	ldr	r2, [r7, #0]
 800a830:	7812      	ldrb	r2, [r2, #0]
 800a832:	0151      	lsls	r1, r2, #5
 800a834:	693a      	ldr	r2, [r7, #16]
 800a836:	440a      	add	r2, r1
 800a838:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a83c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a840:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	3301      	adds	r3, #1
 800a846:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a84e:	4293      	cmp	r3, r2
 800a850:	d902      	bls.n	800a858 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a852:	2301      	movs	r3, #1
 800a854:	75fb      	strb	r3, [r7, #23]
          break;
 800a856:	e00c      	b.n	800a872 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	015a      	lsls	r2, r3, #5
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	4413      	add	r3, r2
 800a862:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a86c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a870:	d0e7      	beq.n	800a842 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a872:	7dfb      	ldrb	r3, [r7, #23]
}
 800a874:	4618      	mov	r0, r3
 800a876:	371c      	adds	r7, #28
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr

0800a880 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a880:	b480      	push	{r7}
 800a882:	b089      	sub	sp, #36	@ 0x24
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	4611      	mov	r1, r2
 800a88c:	461a      	mov	r2, r3
 800a88e:	460b      	mov	r3, r1
 800a890:	71fb      	strb	r3, [r7, #7]
 800a892:	4613      	mov	r3, r2
 800a894:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a89e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d123      	bne.n	800a8ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a8a6:	88bb      	ldrh	r3, [r7, #4]
 800a8a8:	3303      	adds	r3, #3
 800a8aa:	089b      	lsrs	r3, r3, #2
 800a8ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	61bb      	str	r3, [r7, #24]
 800a8b2:	e018      	b.n	800a8e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a8b4:	79fb      	ldrb	r3, [r7, #7]
 800a8b6:	031a      	lsls	r2, r3, #12
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	4413      	add	r3, r2
 800a8bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	69fb      	ldr	r3, [r7, #28]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a8c8:	69fb      	ldr	r3, [r7, #28]
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a8ce:	69fb      	ldr	r3, [r7, #28]
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a8d4:	69fb      	ldr	r3, [r7, #28]
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a8da:	69fb      	ldr	r3, [r7, #28]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a8e0:	69bb      	ldr	r3, [r7, #24]
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	61bb      	str	r3, [r7, #24]
 800a8e6:	69ba      	ldr	r2, [r7, #24]
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d3e2      	bcc.n	800a8b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a8ee:	2300      	movs	r3, #0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3724      	adds	r7, #36	@ 0x24
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr

0800a8fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b08b      	sub	sp, #44	@ 0x2c
 800a900:	af00      	add	r7, sp, #0
 800a902:	60f8      	str	r0, [r7, #12]
 800a904:	60b9      	str	r1, [r7, #8]
 800a906:	4613      	mov	r3, r2
 800a908:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a912:	88fb      	ldrh	r3, [r7, #6]
 800a914:	089b      	lsrs	r3, r3, #2
 800a916:	b29b      	uxth	r3, r3
 800a918:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a91a:	88fb      	ldrh	r3, [r7, #6]
 800a91c:	f003 0303 	and.w	r3, r3, #3
 800a920:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a922:	2300      	movs	r3, #0
 800a924:	623b      	str	r3, [r7, #32]
 800a926:	e014      	b.n	800a952 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a928:	69bb      	ldr	r3, [r7, #24]
 800a92a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a932:	601a      	str	r2, [r3, #0]
    pDest++;
 800a934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a936:	3301      	adds	r3, #1
 800a938:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a93c:	3301      	adds	r3, #1
 800a93e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a942:	3301      	adds	r3, #1
 800a944:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a948:	3301      	adds	r3, #1
 800a94a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a94c:	6a3b      	ldr	r3, [r7, #32]
 800a94e:	3301      	adds	r3, #1
 800a950:	623b      	str	r3, [r7, #32]
 800a952:	6a3a      	ldr	r2, [r7, #32]
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	429a      	cmp	r2, r3
 800a958:	d3e6      	bcc.n	800a928 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a95a:	8bfb      	ldrh	r3, [r7, #30]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d01e      	beq.n	800a99e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a960:	2300      	movs	r3, #0
 800a962:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a964:	69bb      	ldr	r3, [r7, #24]
 800a966:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a96a:	461a      	mov	r2, r3
 800a96c:	f107 0310 	add.w	r3, r7, #16
 800a970:	6812      	ldr	r2, [r2, #0]
 800a972:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a974:	693a      	ldr	r2, [r7, #16]
 800a976:	6a3b      	ldr	r3, [r7, #32]
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	00db      	lsls	r3, r3, #3
 800a97c:	fa22 f303 	lsr.w	r3, r2, r3
 800a980:	b2da      	uxtb	r2, r3
 800a982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a984:	701a      	strb	r2, [r3, #0]
      i++;
 800a986:	6a3b      	ldr	r3, [r7, #32]
 800a988:	3301      	adds	r3, #1
 800a98a:	623b      	str	r3, [r7, #32]
      pDest++;
 800a98c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a98e:	3301      	adds	r3, #1
 800a990:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a992:	8bfb      	ldrh	r3, [r7, #30]
 800a994:	3b01      	subs	r3, #1
 800a996:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a998:	8bfb      	ldrh	r3, [r7, #30]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d1ea      	bne.n	800a974 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a99e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	372c      	adds	r7, #44	@ 0x2c
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b085      	sub	sp, #20
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	785b      	ldrb	r3, [r3, #1]
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d12c      	bne.n	800aa22 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	015a      	lsls	r2, r3, #5
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	4413      	add	r3, r2
 800a9d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	db12      	blt.n	800aa00 <USB_EPSetStall+0x54>
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d00f      	beq.n	800aa00 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	015a      	lsls	r2, r3, #5
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	4413      	add	r3, r2
 800a9e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	68ba      	ldr	r2, [r7, #8]
 800a9f0:	0151      	lsls	r1, r2, #5
 800a9f2:	68fa      	ldr	r2, [r7, #12]
 800a9f4:	440a      	add	r2, r1
 800a9f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a9fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	015a      	lsls	r2, r3, #5
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	4413      	add	r3, r2
 800aa08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	68ba      	ldr	r2, [r7, #8]
 800aa10:	0151      	lsls	r1, r2, #5
 800aa12:	68fa      	ldr	r2, [r7, #12]
 800aa14:	440a      	add	r2, r1
 800aa16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa1a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800aa1e:	6013      	str	r3, [r2, #0]
 800aa20:	e02b      	b.n	800aa7a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	015a      	lsls	r2, r3, #5
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	4413      	add	r3, r2
 800aa2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	db12      	blt.n	800aa5a <USB_EPSetStall+0xae>
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d00f      	beq.n	800aa5a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	015a      	lsls	r2, r3, #5
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	4413      	add	r3, r2
 800aa42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	68ba      	ldr	r2, [r7, #8]
 800aa4a:	0151      	lsls	r1, r2, #5
 800aa4c:	68fa      	ldr	r2, [r7, #12]
 800aa4e:	440a      	add	r2, r1
 800aa50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa54:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800aa58:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	015a      	lsls	r2, r3, #5
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	4413      	add	r3, r2
 800aa62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	68ba      	ldr	r2, [r7, #8]
 800aa6a:	0151      	lsls	r1, r2, #5
 800aa6c:	68fa      	ldr	r2, [r7, #12]
 800aa6e:	440a      	add	r2, r1
 800aa70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800aa78:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aa7a:	2300      	movs	r3, #0
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3714      	adds	r7, #20
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b085      	sub	sp, #20
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	785b      	ldrb	r3, [r3, #1]
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d128      	bne.n	800aaf6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	015a      	lsls	r2, r3, #5
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	4413      	add	r3, r2
 800aaac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	68ba      	ldr	r2, [r7, #8]
 800aab4:	0151      	lsls	r1, r2, #5
 800aab6:	68fa      	ldr	r2, [r7, #12]
 800aab8:	440a      	add	r2, r1
 800aaba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aabe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aac2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	791b      	ldrb	r3, [r3, #4]
 800aac8:	2b03      	cmp	r3, #3
 800aaca:	d003      	beq.n	800aad4 <USB_EPClearStall+0x4c>
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	791b      	ldrb	r3, [r3, #4]
 800aad0:	2b02      	cmp	r3, #2
 800aad2:	d138      	bne.n	800ab46 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	015a      	lsls	r2, r3, #5
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	4413      	add	r3, r2
 800aadc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	68ba      	ldr	r2, [r7, #8]
 800aae4:	0151      	lsls	r1, r2, #5
 800aae6:	68fa      	ldr	r2, [r7, #12]
 800aae8:	440a      	add	r2, r1
 800aaea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aaee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aaf2:	6013      	str	r3, [r2, #0]
 800aaf4:	e027      	b.n	800ab46 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	015a      	lsls	r2, r3, #5
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	4413      	add	r3, r2
 800aafe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	68ba      	ldr	r2, [r7, #8]
 800ab06:	0151      	lsls	r1, r2, #5
 800ab08:	68fa      	ldr	r2, [r7, #12]
 800ab0a:	440a      	add	r2, r1
 800ab0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab10:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ab14:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	791b      	ldrb	r3, [r3, #4]
 800ab1a:	2b03      	cmp	r3, #3
 800ab1c:	d003      	beq.n	800ab26 <USB_EPClearStall+0x9e>
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	791b      	ldrb	r3, [r3, #4]
 800ab22:	2b02      	cmp	r3, #2
 800ab24:	d10f      	bne.n	800ab46 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	015a      	lsls	r2, r3, #5
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	4413      	add	r3, r2
 800ab2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	68ba      	ldr	r2, [r7, #8]
 800ab36:	0151      	lsls	r1, r2, #5
 800ab38:	68fa      	ldr	r2, [r7, #12]
 800ab3a:	440a      	add	r2, r1
 800ab3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ab44:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ab46:	2300      	movs	r3, #0
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3714      	adds	r7, #20
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b085      	sub	sp, #20
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ab72:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ab76:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab7e:	681a      	ldr	r2, [r3, #0]
 800ab80:	78fb      	ldrb	r3, [r7, #3]
 800ab82:	011b      	lsls	r3, r3, #4
 800ab84:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800ab88:	68f9      	ldr	r1, [r7, #12]
 800ab8a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ab92:	2300      	movs	r3, #0
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3714      	adds	r7, #20
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b085      	sub	sp, #20
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	68fa      	ldr	r2, [r7, #12]
 800abb6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800abba:	f023 0303 	bic.w	r3, r3, #3
 800abbe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	68fa      	ldr	r2, [r7, #12]
 800abca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800abce:	f023 0302 	bic.w	r3, r3, #2
 800abd2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800abd4:	2300      	movs	r3, #0
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3714      	adds	r7, #20
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr

0800abe2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800abe2:	b480      	push	{r7}
 800abe4:	b085      	sub	sp, #20
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	68fa      	ldr	r2, [r7, #12]
 800abf8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800abfc:	f023 0303 	bic.w	r3, r3, #3
 800ac00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	68fa      	ldr	r2, [r7, #12]
 800ac0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac10:	f043 0302 	orr.w	r3, r3, #2
 800ac14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac16:	2300      	movs	r3, #0
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3714      	adds	r7, #20
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr

0800ac24 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b085      	sub	sp, #20
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	695b      	ldr	r3, [r3, #20]
 800ac30:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	699b      	ldr	r3, [r3, #24]
 800ac36:	68fa      	ldr	r2, [r7, #12]
 800ac38:	4013      	ands	r3, r2
 800ac3a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3714      	adds	r7, #20
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr

0800ac4a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ac4a:	b480      	push	{r7}
 800ac4c:	b085      	sub	sp, #20
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac5c:	699b      	ldr	r3, [r3, #24]
 800ac5e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac66:	69db      	ldr	r3, [r3, #28]
 800ac68:	68ba      	ldr	r2, [r7, #8]
 800ac6a:	4013      	ands	r3, r2
 800ac6c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	0c1b      	lsrs	r3, r3, #16
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3714      	adds	r7, #20
 800ac76:	46bd      	mov	sp, r7
 800ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7c:	4770      	bx	lr

0800ac7e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ac7e:	b480      	push	{r7}
 800ac80:	b085      	sub	sp, #20
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac90:	699b      	ldr	r3, [r3, #24]
 800ac92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac9a:	69db      	ldr	r3, [r3, #28]
 800ac9c:	68ba      	ldr	r2, [r7, #8]
 800ac9e:	4013      	ands	r3, r2
 800aca0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	b29b      	uxth	r3, r3
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3714      	adds	r7, #20
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr

0800acb2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800acb2:	b480      	push	{r7}
 800acb4:	b085      	sub	sp, #20
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
 800acba:	460b      	mov	r3, r1
 800acbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800acc2:	78fb      	ldrb	r3, [r7, #3]
 800acc4:	015a      	lsls	r2, r3, #5
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	4413      	add	r3, r2
 800acca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acd8:	695b      	ldr	r3, [r3, #20]
 800acda:	68ba      	ldr	r2, [r7, #8]
 800acdc:	4013      	ands	r3, r2
 800acde:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ace0:	68bb      	ldr	r3, [r7, #8]
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3714      	adds	r7, #20
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr

0800acee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800acee:	b480      	push	{r7}
 800acf0:	b087      	sub	sp, #28
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
 800acf6:	460b      	mov	r3, r1
 800acf8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad04:	691b      	ldr	r3, [r3, #16]
 800ad06:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad10:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ad12:	78fb      	ldrb	r3, [r7, #3]
 800ad14:	f003 030f 	and.w	r3, r3, #15
 800ad18:	68fa      	ldr	r2, [r7, #12]
 800ad1a:	fa22 f303 	lsr.w	r3, r2, r3
 800ad1e:	01db      	lsls	r3, r3, #7
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	693a      	ldr	r2, [r7, #16]
 800ad24:	4313      	orrs	r3, r2
 800ad26:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ad28:	78fb      	ldrb	r3, [r7, #3]
 800ad2a:	015a      	lsls	r2, r3, #5
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	4413      	add	r3, r2
 800ad30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad34:	689b      	ldr	r3, [r3, #8]
 800ad36:	693a      	ldr	r2, [r7, #16]
 800ad38:	4013      	ands	r3, r2
 800ad3a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ad3c:	68bb      	ldr	r3, [r7, #8]
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	371c      	adds	r7, #28
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr

0800ad4a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad4a:	b480      	push	{r7}
 800ad4c:	b083      	sub	sp, #12
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	695b      	ldr	r3, [r3, #20]
 800ad56:	f003 0301 	and.w	r3, r3, #1
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	370c      	adds	r7, #12
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr
	...

0800ad68 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b085      	sub	sp, #20
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad7a:	681a      	ldr	r2, [r3, #0]
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad82:	4619      	mov	r1, r3
 800ad84:	4b09      	ldr	r3, [pc, #36]	@ (800adac <USB_ActivateSetup+0x44>)
 800ad86:	4013      	ands	r3, r2
 800ad88:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	68fa      	ldr	r2, [r7, #12]
 800ad94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ad98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad9e:	2300      	movs	r3, #0
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3714      	adds	r7, #20
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr
 800adac:	fffff800 	.word	0xfffff800

0800adb0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b087      	sub	sp, #28
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	460b      	mov	r3, r1
 800adba:	607a      	str	r2, [r7, #4]
 800adbc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	333c      	adds	r3, #60	@ 0x3c
 800adc6:	3304      	adds	r3, #4
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	4a26      	ldr	r2, [pc, #152]	@ (800ae68 <USB_EP0_OutStart+0xb8>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d90a      	bls.n	800adea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ade0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ade4:	d101      	bne.n	800adea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ade6:	2300      	movs	r3, #0
 800ade8:	e037      	b.n	800ae5a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adf0:	461a      	mov	r2, r3
 800adf2:	2300      	movs	r3, #0
 800adf4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adfc:	691b      	ldr	r3, [r3, #16]
 800adfe:	697a      	ldr	r2, [r7, #20]
 800ae00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ae08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae10:	691b      	ldr	r3, [r3, #16]
 800ae12:	697a      	ldr	r2, [r7, #20]
 800ae14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae18:	f043 0318 	orr.w	r3, r3, #24
 800ae1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae24:	691b      	ldr	r3, [r3, #16]
 800ae26:	697a      	ldr	r2, [r7, #20]
 800ae28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae2c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ae30:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ae32:	7afb      	ldrb	r3, [r7, #11]
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d10f      	bne.n	800ae58 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae3e:	461a      	mov	r2, r3
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	697a      	ldr	r2, [r7, #20]
 800ae4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae52:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800ae56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	371c      	adds	r7, #28
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr
 800ae66:	bf00      	nop
 800ae68:	4f54300a 	.word	0x4f54300a

0800ae6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ae74:	2300      	movs	r3, #0
 800ae76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ae84:	d901      	bls.n	800ae8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ae86:	2303      	movs	r3, #3
 800ae88:	e01b      	b.n	800aec2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	691b      	ldr	r3, [r3, #16]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	daf2      	bge.n	800ae78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ae92:	2300      	movs	r3, #0
 800ae94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	691b      	ldr	r3, [r3, #16]
 800ae9a:	f043 0201 	orr.w	r2, r3, #1
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	3301      	adds	r3, #1
 800aea6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aeae:	d901      	bls.n	800aeb4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aeb0:	2303      	movs	r3, #3
 800aeb2:	e006      	b.n	800aec2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	691b      	ldr	r3, [r3, #16]
 800aeb8:	f003 0301 	and.w	r3, r3, #1
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d0f0      	beq.n	800aea2 <USB_CoreReset+0x36>

  return HAL_OK;
 800aec0:	2300      	movs	r3, #0
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3714      	adds	r7, #20
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr
	...

0800aed0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800aed4:	4904      	ldr	r1, [pc, #16]	@ (800aee8 <MX_FATFS_Init+0x18>)
 800aed6:	4805      	ldr	r0, [pc, #20]	@ (800aeec <MX_FATFS_Init+0x1c>)
 800aed8:	f002 f9e0 	bl	800d29c <FATFS_LinkDriver>
 800aedc:	4603      	mov	r3, r0
 800aede:	461a      	mov	r2, r3
 800aee0:	4b03      	ldr	r3, [pc, #12]	@ (800aef0 <MX_FATFS_Init+0x20>)
 800aee2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aee4:	bf00      	nop
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	200009fc 	.word	0x200009fc
 800aeec:	0800e7e8 	.word	0x0800e7e8
 800aef0:	200009f8 	.word	0x200009f8

0800aef4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800aefa:	2300      	movs	r3, #0
 800aefc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800aefe:	f000 f879 	bl	800aff4 <BSP_SD_IsDetected>
 800af02:	4603      	mov	r3, r0
 800af04:	2b01      	cmp	r3, #1
 800af06:	d001      	beq.n	800af0c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800af08:	2302      	movs	r3, #2
 800af0a:	e012      	b.n	800af32 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800af0c:	480b      	ldr	r0, [pc, #44]	@ (800af3c <BSP_SD_Init+0x48>)
 800af0e:	f7fa fed7 	bl	8005cc0 <HAL_SD_Init>
 800af12:	4603      	mov	r3, r0
 800af14:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800af16:	79fb      	ldrb	r3, [r7, #7]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d109      	bne.n	800af30 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800af1c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800af20:	4806      	ldr	r0, [pc, #24]	@ (800af3c <BSP_SD_Init+0x48>)
 800af22:	f7fb fcb9 	bl	8006898 <HAL_SD_ConfigWideBusOperation>
 800af26:	4603      	mov	r3, r0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d001      	beq.n	800af30 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800af2c:	2301      	movs	r3, #1
 800af2e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800af30:	79fb      	ldrb	r3, [r7, #7]
}
 800af32:	4618      	mov	r0, r3
 800af34:	3708      	adds	r7, #8
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	bf00      	nop
 800af3c:	20000278 	.word	0x20000278

0800af40 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b088      	sub	sp, #32
 800af44:	af02      	add	r7, sp, #8
 800af46:	60f8      	str	r0, [r7, #12]
 800af48:	60b9      	str	r1, [r7, #8]
 800af4a:	607a      	str	r2, [r7, #4]
 800af4c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800af4e:	2300      	movs	r3, #0
 800af50:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	9300      	str	r3, [sp, #0]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	68ba      	ldr	r2, [r7, #8]
 800af5a:	68f9      	ldr	r1, [r7, #12]
 800af5c:	4806      	ldr	r0, [pc, #24]	@ (800af78 <BSP_SD_ReadBlocks+0x38>)
 800af5e:	f7fa ff67 	bl	8005e30 <HAL_SD_ReadBlocks>
 800af62:	4603      	mov	r3, r0
 800af64:	2b00      	cmp	r3, #0
 800af66:	d001      	beq.n	800af6c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800af68:	2301      	movs	r3, #1
 800af6a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800af6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3718      	adds	r7, #24
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	20000278 	.word	0x20000278

0800af7c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b088      	sub	sp, #32
 800af80:	af02      	add	r7, sp, #8
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	607a      	str	r2, [r7, #4]
 800af88:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800af8a:	2300      	movs	r3, #0
 800af8c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	9300      	str	r3, [sp, #0]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	68ba      	ldr	r2, [r7, #8]
 800af96:	68f9      	ldr	r1, [r7, #12]
 800af98:	4806      	ldr	r0, [pc, #24]	@ (800afb4 <BSP_SD_WriteBlocks+0x38>)
 800af9a:	f7fb f927 	bl	80061ec <HAL_SD_WriteBlocks>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d001      	beq.n	800afa8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800afa4:	2301      	movs	r3, #1
 800afa6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800afa8:	7dfb      	ldrb	r3, [r7, #23]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3718      	adds	r7, #24
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	20000278 	.word	0x20000278

0800afb8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800afbc:	4805      	ldr	r0, [pc, #20]	@ (800afd4 <BSP_SD_GetCardState+0x1c>)
 800afbe:	f7fb fd05 	bl	80069cc <HAL_SD_GetCardState>
 800afc2:	4603      	mov	r3, r0
 800afc4:	2b04      	cmp	r3, #4
 800afc6:	bf14      	ite	ne
 800afc8:	2301      	movne	r3, #1
 800afca:	2300      	moveq	r3, #0
 800afcc:	b2db      	uxtb	r3, r3
}
 800afce:	4618      	mov	r0, r3
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	20000278 	.word	0x20000278

0800afd8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b082      	sub	sp, #8
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800afe0:	6879      	ldr	r1, [r7, #4]
 800afe2:	4803      	ldr	r0, [pc, #12]	@ (800aff0 <BSP_SD_GetCardInfo+0x18>)
 800afe4:	f7fb fc2c 	bl	8006840 <HAL_SD_GetCardInfo>
}
 800afe8:	bf00      	nop
 800afea:	3708      	adds	r7, #8
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	20000278 	.word	0x20000278

0800aff4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800affa:	2301      	movs	r3, #1
 800affc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800affe:	f000 f80b 	bl	800b018 <BSP_PlatformIsDetected>
 800b002:	4603      	mov	r3, r0
 800b004:	2b00      	cmp	r3, #0
 800b006:	d101      	bne.n	800b00c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b008:	2300      	movs	r3, #0
 800b00a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b00c:	79fb      	ldrb	r3, [r7, #7]
 800b00e:	b2db      	uxtb	r3, r3
}
 800b010:	4618      	mov	r0, r3
 800b012:	3708      	adds	r7, #8
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b018:	b580      	push	{r7, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b01e:	2301      	movs	r3, #1
 800b020:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b022:	2110      	movs	r1, #16
 800b024:	4806      	ldr	r0, [pc, #24]	@ (800b040 <BSP_PlatformIsDetected+0x28>)
 800b026:	f7f8 f9cd 	bl	80033c4 <HAL_GPIO_ReadPin>
 800b02a:	4603      	mov	r3, r0
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d001      	beq.n	800b034 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800b030:	2300      	movs	r3, #0
 800b032:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b034:	79fb      	ldrb	r3, [r7, #7]
}
 800b036:	4618      	mov	r0, r3
 800b038:	3708      	adds	r7, #8
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	40020000 	.word	0x40020000

0800b044 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
 800b04a:	4603      	mov	r3, r0
 800b04c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b04e:	4b0b      	ldr	r3, [pc, #44]	@ (800b07c <SD_CheckStatus+0x38>)
 800b050:	2201      	movs	r2, #1
 800b052:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b054:	f7ff ffb0 	bl	800afb8 <BSP_SD_GetCardState>
 800b058:	4603      	mov	r3, r0
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d107      	bne.n	800b06e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b05e:	4b07      	ldr	r3, [pc, #28]	@ (800b07c <SD_CheckStatus+0x38>)
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	b2db      	uxtb	r3, r3
 800b064:	f023 0301 	bic.w	r3, r3, #1
 800b068:	b2da      	uxtb	r2, r3
 800b06a:	4b04      	ldr	r3, [pc, #16]	@ (800b07c <SD_CheckStatus+0x38>)
 800b06c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b06e:	4b03      	ldr	r3, [pc, #12]	@ (800b07c <SD_CheckStatus+0x38>)
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	b2db      	uxtb	r3, r3
}
 800b074:	4618      	mov	r0, r3
 800b076:	3708      	adds	r7, #8
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}
 800b07c:	20000009 	.word	0x20000009

0800b080 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b082      	sub	sp, #8
 800b084:	af00      	add	r7, sp, #0
 800b086:	4603      	mov	r3, r0
 800b088:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b08a:	4b0b      	ldr	r3, [pc, #44]	@ (800b0b8 <SD_initialize+0x38>)
 800b08c:	2201      	movs	r2, #1
 800b08e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b090:	f7ff ff30 	bl	800aef4 <BSP_SD_Init>
 800b094:	4603      	mov	r3, r0
 800b096:	2b00      	cmp	r3, #0
 800b098:	d107      	bne.n	800b0aa <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800b09a:	79fb      	ldrb	r3, [r7, #7]
 800b09c:	4618      	mov	r0, r3
 800b09e:	f7ff ffd1 	bl	800b044 <SD_CheckStatus>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	4b04      	ldr	r3, [pc, #16]	@ (800b0b8 <SD_initialize+0x38>)
 800b0a8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b0aa:	4b03      	ldr	r3, [pc, #12]	@ (800b0b8 <SD_initialize+0x38>)
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	b2db      	uxtb	r3, r3
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3708      	adds	r7, #8
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}
 800b0b8:	20000009 	.word	0x20000009

0800b0bc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b0c6:	79fb      	ldrb	r3, [r7, #7]
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f7ff ffbb 	bl	800b044 <SD_CheckStatus>
 800b0ce:	4603      	mov	r3, r0
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3708      	adds	r7, #8
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b086      	sub	sp, #24
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	60b9      	str	r1, [r7, #8]
 800b0e0:	607a      	str	r2, [r7, #4]
 800b0e2:	603b      	str	r3, [r7, #0]
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800b0ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b0f0:	683a      	ldr	r2, [r7, #0]
 800b0f2:	6879      	ldr	r1, [r7, #4]
 800b0f4:	68b8      	ldr	r0, [r7, #8]
 800b0f6:	f7ff ff23 	bl	800af40 <BSP_SD_ReadBlocks>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d107      	bne.n	800b110 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b100:	bf00      	nop
 800b102:	f7ff ff59 	bl	800afb8 <BSP_SD_GetCardState>
 800b106:	4603      	mov	r3, r0
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d1fa      	bne.n	800b102 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800b10c:	2300      	movs	r3, #0
 800b10e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b110:	7dfb      	ldrb	r3, [r7, #23]
}
 800b112:	4618      	mov	r0, r3
 800b114:	3718      	adds	r7, #24
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}

0800b11a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b11a:	b580      	push	{r7, lr}
 800b11c:	b086      	sub	sp, #24
 800b11e:	af00      	add	r7, sp, #0
 800b120:	60b9      	str	r1, [r7, #8]
 800b122:	607a      	str	r2, [r7, #4]
 800b124:	603b      	str	r3, [r7, #0]
 800b126:	4603      	mov	r3, r0
 800b128:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b12a:	2301      	movs	r3, #1
 800b12c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800b12e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b132:	683a      	ldr	r2, [r7, #0]
 800b134:	6879      	ldr	r1, [r7, #4]
 800b136:	68b8      	ldr	r0, [r7, #8]
 800b138:	f7ff ff20 	bl	800af7c <BSP_SD_WriteBlocks>
 800b13c:	4603      	mov	r3, r0
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d107      	bne.n	800b152 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800b142:	bf00      	nop
 800b144:	f7ff ff38 	bl	800afb8 <BSP_SD_GetCardState>
 800b148:	4603      	mov	r3, r0
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d1fa      	bne.n	800b144 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800b14e:	2300      	movs	r3, #0
 800b150:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b152:	7dfb      	ldrb	r3, [r7, #23]
}
 800b154:	4618      	mov	r0, r3
 800b156:	3718      	adds	r7, #24
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b08c      	sub	sp, #48	@ 0x30
 800b160:	af00      	add	r7, sp, #0
 800b162:	4603      	mov	r3, r0
 800b164:	603a      	str	r2, [r7, #0]
 800b166:	71fb      	strb	r3, [r7, #7]
 800b168:	460b      	mov	r3, r1
 800b16a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b16c:	2301      	movs	r3, #1
 800b16e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b172:	4b25      	ldr	r3, [pc, #148]	@ (800b208 <SD_ioctl+0xac>)
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	b2db      	uxtb	r3, r3
 800b178:	f003 0301 	and.w	r3, r3, #1
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d001      	beq.n	800b184 <SD_ioctl+0x28>
 800b180:	2303      	movs	r3, #3
 800b182:	e03c      	b.n	800b1fe <SD_ioctl+0xa2>

  switch (cmd)
 800b184:	79bb      	ldrb	r3, [r7, #6]
 800b186:	2b03      	cmp	r3, #3
 800b188:	d834      	bhi.n	800b1f4 <SD_ioctl+0x98>
 800b18a:	a201      	add	r2, pc, #4	@ (adr r2, 800b190 <SD_ioctl+0x34>)
 800b18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b190:	0800b1a1 	.word	0x0800b1a1
 800b194:	0800b1a9 	.word	0x0800b1a9
 800b198:	0800b1c1 	.word	0x0800b1c1
 800b19c:	0800b1db 	.word	0x0800b1db
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b1a6:	e028      	b.n	800b1fa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b1a8:	f107 030c 	add.w	r3, r7, #12
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f7ff ff13 	bl	800afd8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b1b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b1be:	e01c      	b.n	800b1fa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b1c0:	f107 030c 	add.w	r3, r7, #12
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7ff ff07 	bl	800afd8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b1ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1cc:	b29a      	uxth	r2, r3
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b1d8:	e00f      	b.n	800b1fa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b1da:	f107 030c 	add.w	r3, r7, #12
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f7ff fefa 	bl	800afd8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1e6:	0a5a      	lsrs	r2, r3, #9
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b1f2:	e002      	b.n	800b1fa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b1f4:	2304      	movs	r3, #4
 800b1f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800b1fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3730      	adds	r7, #48	@ 0x30
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	20000009 	.word	0x20000009

0800b20c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	460b      	mov	r3, r1
 800b216:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b218:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b21c:	f002 fdd8 	bl	800ddd0 <malloc>
 800b220:	4603      	mov	r3, r0
 800b222:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d109      	bne.n	800b23e <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	32b0      	adds	r2, #176	@ 0xb0
 800b234:	2100      	movs	r1, #0
 800b236:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b23a:	2302      	movs	r3, #2
 800b23c:	e0d4      	b.n	800b3e8 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b23e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b242:	2100      	movs	r1, #0
 800b244:	68f8      	ldr	r0, [r7, #12]
 800b246:	f002 feb7 	bl	800dfb8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	32b0      	adds	r2, #176	@ 0xb0
 800b254:	68f9      	ldr	r1, [r7, #12]
 800b256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	32b0      	adds	r2, #176	@ 0xb0
 800b264:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	7c1b      	ldrb	r3, [r3, #16]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d138      	bne.n	800b2e8 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b276:	4b5e      	ldr	r3, [pc, #376]	@ (800b3f0 <USBD_CDC_Init+0x1e4>)
 800b278:	7819      	ldrb	r1, [r3, #0]
 800b27a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b27e:	2202      	movs	r2, #2
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f002 fc02 	bl	800da8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b286:	4b5a      	ldr	r3, [pc, #360]	@ (800b3f0 <USBD_CDC_Init+0x1e4>)
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	f003 020f 	and.w	r2, r3, #15
 800b28e:	6879      	ldr	r1, [r7, #4]
 800b290:	4613      	mov	r3, r2
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	4413      	add	r3, r2
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	440b      	add	r3, r1
 800b29a:	3324      	adds	r3, #36	@ 0x24
 800b29c:	2201      	movs	r2, #1
 800b29e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b2a0:	4b54      	ldr	r3, [pc, #336]	@ (800b3f4 <USBD_CDC_Init+0x1e8>)
 800b2a2:	7819      	ldrb	r1, [r3, #0]
 800b2a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b2a8:	2202      	movs	r2, #2
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f002 fbed 	bl	800da8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b2b0:	4b50      	ldr	r3, [pc, #320]	@ (800b3f4 <USBD_CDC_Init+0x1e8>)
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	f003 020f 	and.w	r2, r3, #15
 800b2b8:	6879      	ldr	r1, [r7, #4]
 800b2ba:	4613      	mov	r3, r2
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	4413      	add	r3, r2
 800b2c0:	009b      	lsls	r3, r3, #2
 800b2c2:	440b      	add	r3, r1
 800b2c4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b2cc:	4b4a      	ldr	r3, [pc, #296]	@ (800b3f8 <USBD_CDC_Init+0x1ec>)
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	f003 020f 	and.w	r2, r3, #15
 800b2d4:	6879      	ldr	r1, [r7, #4]
 800b2d6:	4613      	mov	r3, r2
 800b2d8:	009b      	lsls	r3, r3, #2
 800b2da:	4413      	add	r3, r2
 800b2dc:	009b      	lsls	r3, r3, #2
 800b2de:	440b      	add	r3, r1
 800b2e0:	3326      	adds	r3, #38	@ 0x26
 800b2e2:	2210      	movs	r2, #16
 800b2e4:	801a      	strh	r2, [r3, #0]
 800b2e6:	e035      	b.n	800b354 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b2e8:	4b41      	ldr	r3, [pc, #260]	@ (800b3f0 <USBD_CDC_Init+0x1e4>)
 800b2ea:	7819      	ldrb	r1, [r3, #0]
 800b2ec:	2340      	movs	r3, #64	@ 0x40
 800b2ee:	2202      	movs	r2, #2
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f002 fbca 	bl	800da8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b2f6:	4b3e      	ldr	r3, [pc, #248]	@ (800b3f0 <USBD_CDC_Init+0x1e4>)
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	f003 020f 	and.w	r2, r3, #15
 800b2fe:	6879      	ldr	r1, [r7, #4]
 800b300:	4613      	mov	r3, r2
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	4413      	add	r3, r2
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	440b      	add	r3, r1
 800b30a:	3324      	adds	r3, #36	@ 0x24
 800b30c:	2201      	movs	r2, #1
 800b30e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b310:	4b38      	ldr	r3, [pc, #224]	@ (800b3f4 <USBD_CDC_Init+0x1e8>)
 800b312:	7819      	ldrb	r1, [r3, #0]
 800b314:	2340      	movs	r3, #64	@ 0x40
 800b316:	2202      	movs	r2, #2
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f002 fbb6 	bl	800da8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b31e:	4b35      	ldr	r3, [pc, #212]	@ (800b3f4 <USBD_CDC_Init+0x1e8>)
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	f003 020f 	and.w	r2, r3, #15
 800b326:	6879      	ldr	r1, [r7, #4]
 800b328:	4613      	mov	r3, r2
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	4413      	add	r3, r2
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	440b      	add	r3, r1
 800b332:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b336:	2201      	movs	r2, #1
 800b338:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b33a:	4b2f      	ldr	r3, [pc, #188]	@ (800b3f8 <USBD_CDC_Init+0x1ec>)
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	f003 020f 	and.w	r2, r3, #15
 800b342:	6879      	ldr	r1, [r7, #4]
 800b344:	4613      	mov	r3, r2
 800b346:	009b      	lsls	r3, r3, #2
 800b348:	4413      	add	r3, r2
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	440b      	add	r3, r1
 800b34e:	3326      	adds	r3, #38	@ 0x26
 800b350:	2210      	movs	r2, #16
 800b352:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b354:	4b28      	ldr	r3, [pc, #160]	@ (800b3f8 <USBD_CDC_Init+0x1ec>)
 800b356:	7819      	ldrb	r1, [r3, #0]
 800b358:	2308      	movs	r3, #8
 800b35a:	2203      	movs	r2, #3
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f002 fb94 	bl	800da8a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b362:	4b25      	ldr	r3, [pc, #148]	@ (800b3f8 <USBD_CDC_Init+0x1ec>)
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	f003 020f 	and.w	r2, r3, #15
 800b36a:	6879      	ldr	r1, [r7, #4]
 800b36c:	4613      	mov	r3, r2
 800b36e:	009b      	lsls	r3, r3, #2
 800b370:	4413      	add	r3, r2
 800b372:	009b      	lsls	r3, r3, #2
 800b374:	440b      	add	r3, r1
 800b376:	3324      	adds	r3, #36	@ 0x24
 800b378:	2201      	movs	r2, #1
 800b37a:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2200      	movs	r2, #0
 800b380:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	33b0      	adds	r3, #176	@ 0xb0
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	4413      	add	r3, r2
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2200      	movs	r2, #0
 800b39c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d101      	bne.n	800b3b6 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800b3b2:	2302      	movs	r3, #2
 800b3b4:	e018      	b.n	800b3e8 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	7c1b      	ldrb	r3, [r3, #16]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d10a      	bne.n	800b3d4 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b3be:	4b0d      	ldr	r3, [pc, #52]	@ (800b3f4 <USBD_CDC_Init+0x1e8>)
 800b3c0:	7819      	ldrb	r1, [r3, #0]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b3c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f002 fc4b 	bl	800dc68 <USBD_LL_PrepareReceive>
 800b3d2:	e008      	b.n	800b3e6 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b3d4:	4b07      	ldr	r3, [pc, #28]	@ (800b3f4 <USBD_CDC_Init+0x1e8>)
 800b3d6:	7819      	ldrb	r1, [r3, #0]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b3de:	2340      	movs	r3, #64	@ 0x40
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f002 fc41 	bl	800dc68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b3e6:	2300      	movs	r3, #0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3710      	adds	r7, #16
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	20000093 	.word	0x20000093
 800b3f4:	20000094 	.word	0x20000094
 800b3f8:	20000095 	.word	0x20000095

0800b3fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	460b      	mov	r3, r1
 800b406:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b408:	4b3a      	ldr	r3, [pc, #232]	@ (800b4f4 <USBD_CDC_DeInit+0xf8>)
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	4619      	mov	r1, r3
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f002 fb61 	bl	800dad6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b414:	4b37      	ldr	r3, [pc, #220]	@ (800b4f4 <USBD_CDC_DeInit+0xf8>)
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	f003 020f 	and.w	r2, r3, #15
 800b41c:	6879      	ldr	r1, [r7, #4]
 800b41e:	4613      	mov	r3, r2
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	4413      	add	r3, r2
 800b424:	009b      	lsls	r3, r3, #2
 800b426:	440b      	add	r3, r1
 800b428:	3324      	adds	r3, #36	@ 0x24
 800b42a:	2200      	movs	r2, #0
 800b42c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b42e:	4b32      	ldr	r3, [pc, #200]	@ (800b4f8 <USBD_CDC_DeInit+0xfc>)
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	4619      	mov	r1, r3
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f002 fb4e 	bl	800dad6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b43a:	4b2f      	ldr	r3, [pc, #188]	@ (800b4f8 <USBD_CDC_DeInit+0xfc>)
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	f003 020f 	and.w	r2, r3, #15
 800b442:	6879      	ldr	r1, [r7, #4]
 800b444:	4613      	mov	r3, r2
 800b446:	009b      	lsls	r3, r3, #2
 800b448:	4413      	add	r3, r2
 800b44a:	009b      	lsls	r3, r3, #2
 800b44c:	440b      	add	r3, r1
 800b44e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b452:	2200      	movs	r2, #0
 800b454:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b456:	4b29      	ldr	r3, [pc, #164]	@ (800b4fc <USBD_CDC_DeInit+0x100>)
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	4619      	mov	r1, r3
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f002 fb3a 	bl	800dad6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b462:	4b26      	ldr	r3, [pc, #152]	@ (800b4fc <USBD_CDC_DeInit+0x100>)
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	f003 020f 	and.w	r2, r3, #15
 800b46a:	6879      	ldr	r1, [r7, #4]
 800b46c:	4613      	mov	r3, r2
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	4413      	add	r3, r2
 800b472:	009b      	lsls	r3, r3, #2
 800b474:	440b      	add	r3, r1
 800b476:	3324      	adds	r3, #36	@ 0x24
 800b478:	2200      	movs	r2, #0
 800b47a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b47c:	4b1f      	ldr	r3, [pc, #124]	@ (800b4fc <USBD_CDC_DeInit+0x100>)
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	f003 020f 	and.w	r2, r3, #15
 800b484:	6879      	ldr	r1, [r7, #4]
 800b486:	4613      	mov	r3, r2
 800b488:	009b      	lsls	r3, r3, #2
 800b48a:	4413      	add	r3, r2
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	440b      	add	r3, r1
 800b490:	3326      	adds	r3, #38	@ 0x26
 800b492:	2200      	movs	r2, #0
 800b494:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	32b0      	adds	r2, #176	@ 0xb0
 800b4a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d01f      	beq.n	800b4e8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	33b0      	adds	r3, #176	@ 0xb0
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	4413      	add	r3, r2
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	32b0      	adds	r2, #176	@ 0xb0
 800b4c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f002 fc88 	bl	800dde0 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	32b0      	adds	r2, #176	@ 0xb0
 800b4da:	2100      	movs	r1, #0
 800b4dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b4e8:	2300      	movs	r3, #0
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3708      	adds	r7, #8
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	20000093 	.word	0x20000093
 800b4f8:	20000094 	.word	0x20000094
 800b4fc:	20000095 	.word	0x20000095

0800b500 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b086      	sub	sp, #24
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	32b0      	adds	r2, #176	@ 0xb0
 800b514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b518:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b51a:	2300      	movs	r3, #0
 800b51c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b51e:	2300      	movs	r3, #0
 800b520:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b522:	2300      	movs	r3, #0
 800b524:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d101      	bne.n	800b530 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b52c:	2303      	movs	r3, #3
 800b52e:	e0bf      	b.n	800b6b0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d050      	beq.n	800b5de <USBD_CDC_Setup+0xde>
 800b53c:	2b20      	cmp	r3, #32
 800b53e:	f040 80af 	bne.w	800b6a0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	88db      	ldrh	r3, [r3, #6]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d03a      	beq.n	800b5c0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	b25b      	sxtb	r3, r3
 800b550:	2b00      	cmp	r3, #0
 800b552:	da1b      	bge.n	800b58c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b55a:	687a      	ldr	r2, [r7, #4]
 800b55c:	33b0      	adds	r3, #176	@ 0xb0
 800b55e:	009b      	lsls	r3, r3, #2
 800b560:	4413      	add	r3, r2
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	689b      	ldr	r3, [r3, #8]
 800b566:	683a      	ldr	r2, [r7, #0]
 800b568:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b56a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b56c:	683a      	ldr	r2, [r7, #0]
 800b56e:	88d2      	ldrh	r2, [r2, #6]
 800b570:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	88db      	ldrh	r3, [r3, #6]
 800b576:	2b07      	cmp	r3, #7
 800b578:	bf28      	it	cs
 800b57a:	2307      	movcs	r3, #7
 800b57c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	89fa      	ldrh	r2, [r7, #14]
 800b582:	4619      	mov	r1, r3
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f001 fdbd 	bl	800d104 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b58a:	e090      	b.n	800b6ae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	785a      	ldrb	r2, [r3, #1]
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	88db      	ldrh	r3, [r3, #6]
 800b59a:	2b3f      	cmp	r3, #63	@ 0x3f
 800b59c:	d803      	bhi.n	800b5a6 <USBD_CDC_Setup+0xa6>
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	88db      	ldrh	r3, [r3, #6]
 800b5a2:	b2da      	uxtb	r2, r3
 800b5a4:	e000      	b.n	800b5a8 <USBD_CDC_Setup+0xa8>
 800b5a6:	2240      	movs	r2, #64	@ 0x40
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b5ae:	6939      	ldr	r1, [r7, #16]
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f001 fdcf 	bl	800d15c <USBD_CtlPrepareRx>
      break;
 800b5be:	e076      	b.n	800b6ae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b5c6:	687a      	ldr	r2, [r7, #4]
 800b5c8:	33b0      	adds	r3, #176	@ 0xb0
 800b5ca:	009b      	lsls	r3, r3, #2
 800b5cc:	4413      	add	r3, r2
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	683a      	ldr	r2, [r7, #0]
 800b5d4:	7850      	ldrb	r0, [r2, #1]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	6839      	ldr	r1, [r7, #0]
 800b5da:	4798      	blx	r3
      break;
 800b5dc:	e067      	b.n	800b6ae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	785b      	ldrb	r3, [r3, #1]
 800b5e2:	2b0b      	cmp	r3, #11
 800b5e4:	d851      	bhi.n	800b68a <USBD_CDC_Setup+0x18a>
 800b5e6:	a201      	add	r2, pc, #4	@ (adr r2, 800b5ec <USBD_CDC_Setup+0xec>)
 800b5e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ec:	0800b61d 	.word	0x0800b61d
 800b5f0:	0800b699 	.word	0x0800b699
 800b5f4:	0800b68b 	.word	0x0800b68b
 800b5f8:	0800b68b 	.word	0x0800b68b
 800b5fc:	0800b68b 	.word	0x0800b68b
 800b600:	0800b68b 	.word	0x0800b68b
 800b604:	0800b68b 	.word	0x0800b68b
 800b608:	0800b68b 	.word	0x0800b68b
 800b60c:	0800b68b 	.word	0x0800b68b
 800b610:	0800b68b 	.word	0x0800b68b
 800b614:	0800b647 	.word	0x0800b647
 800b618:	0800b671 	.word	0x0800b671
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b622:	b2db      	uxtb	r3, r3
 800b624:	2b03      	cmp	r3, #3
 800b626:	d107      	bne.n	800b638 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b628:	f107 030a 	add.w	r3, r7, #10
 800b62c:	2202      	movs	r2, #2
 800b62e:	4619      	mov	r1, r3
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f001 fd67 	bl	800d104 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b636:	e032      	b.n	800b69e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b638:	6839      	ldr	r1, [r7, #0]
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f001 fce5 	bl	800d00a <USBD_CtlError>
            ret = USBD_FAIL;
 800b640:	2303      	movs	r3, #3
 800b642:	75fb      	strb	r3, [r7, #23]
          break;
 800b644:	e02b      	b.n	800b69e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b64c:	b2db      	uxtb	r3, r3
 800b64e:	2b03      	cmp	r3, #3
 800b650:	d107      	bne.n	800b662 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b652:	f107 030d 	add.w	r3, r7, #13
 800b656:	2201      	movs	r2, #1
 800b658:	4619      	mov	r1, r3
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f001 fd52 	bl	800d104 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b660:	e01d      	b.n	800b69e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b662:	6839      	ldr	r1, [r7, #0]
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f001 fcd0 	bl	800d00a <USBD_CtlError>
            ret = USBD_FAIL;
 800b66a:	2303      	movs	r3, #3
 800b66c:	75fb      	strb	r3, [r7, #23]
          break;
 800b66e:	e016      	b.n	800b69e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b676:	b2db      	uxtb	r3, r3
 800b678:	2b03      	cmp	r3, #3
 800b67a:	d00f      	beq.n	800b69c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b67c:	6839      	ldr	r1, [r7, #0]
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f001 fcc3 	bl	800d00a <USBD_CtlError>
            ret = USBD_FAIL;
 800b684:	2303      	movs	r3, #3
 800b686:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b688:	e008      	b.n	800b69c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b68a:	6839      	ldr	r1, [r7, #0]
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f001 fcbc 	bl	800d00a <USBD_CtlError>
          ret = USBD_FAIL;
 800b692:	2303      	movs	r3, #3
 800b694:	75fb      	strb	r3, [r7, #23]
          break;
 800b696:	e002      	b.n	800b69e <USBD_CDC_Setup+0x19e>
          break;
 800b698:	bf00      	nop
 800b69a:	e008      	b.n	800b6ae <USBD_CDC_Setup+0x1ae>
          break;
 800b69c:	bf00      	nop
      }
      break;
 800b69e:	e006      	b.n	800b6ae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b6a0:	6839      	ldr	r1, [r7, #0]
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f001 fcb1 	bl	800d00a <USBD_CtlError>
      ret = USBD_FAIL;
 800b6a8:	2303      	movs	r3, #3
 800b6aa:	75fb      	strb	r3, [r7, #23]
      break;
 800b6ac:	bf00      	nop
  }

  return (uint8_t)ret;
 800b6ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3718      	adds	r7, #24
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b6ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	32b0      	adds	r2, #176	@ 0xb0
 800b6d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d101      	bne.n	800b6e2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b6de:	2303      	movs	r3, #3
 800b6e0:	e065      	b.n	800b7ae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	32b0      	adds	r2, #176	@ 0xb0
 800b6ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b6f2:	78fb      	ldrb	r3, [r7, #3]
 800b6f4:	f003 020f 	and.w	r2, r3, #15
 800b6f8:	6879      	ldr	r1, [r7, #4]
 800b6fa:	4613      	mov	r3, r2
 800b6fc:	009b      	lsls	r3, r3, #2
 800b6fe:	4413      	add	r3, r2
 800b700:	009b      	lsls	r3, r3, #2
 800b702:	440b      	add	r3, r1
 800b704:	3318      	adds	r3, #24
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d02f      	beq.n	800b76c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b70c:	78fb      	ldrb	r3, [r7, #3]
 800b70e:	f003 020f 	and.w	r2, r3, #15
 800b712:	6879      	ldr	r1, [r7, #4]
 800b714:	4613      	mov	r3, r2
 800b716:	009b      	lsls	r3, r3, #2
 800b718:	4413      	add	r3, r2
 800b71a:	009b      	lsls	r3, r3, #2
 800b71c:	440b      	add	r3, r1
 800b71e:	3318      	adds	r3, #24
 800b720:	681a      	ldr	r2, [r3, #0]
 800b722:	78fb      	ldrb	r3, [r7, #3]
 800b724:	f003 010f 	and.w	r1, r3, #15
 800b728:	68f8      	ldr	r0, [r7, #12]
 800b72a:	460b      	mov	r3, r1
 800b72c:	00db      	lsls	r3, r3, #3
 800b72e:	440b      	add	r3, r1
 800b730:	009b      	lsls	r3, r3, #2
 800b732:	4403      	add	r3, r0
 800b734:	331c      	adds	r3, #28
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	fbb2 f1f3 	udiv	r1, r2, r3
 800b73c:	fb01 f303 	mul.w	r3, r1, r3
 800b740:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b742:	2b00      	cmp	r3, #0
 800b744:	d112      	bne.n	800b76c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b746:	78fb      	ldrb	r3, [r7, #3]
 800b748:	f003 020f 	and.w	r2, r3, #15
 800b74c:	6879      	ldr	r1, [r7, #4]
 800b74e:	4613      	mov	r3, r2
 800b750:	009b      	lsls	r3, r3, #2
 800b752:	4413      	add	r3, r2
 800b754:	009b      	lsls	r3, r3, #2
 800b756:	440b      	add	r3, r1
 800b758:	3318      	adds	r3, #24
 800b75a:	2200      	movs	r2, #0
 800b75c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b75e:	78f9      	ldrb	r1, [r7, #3]
 800b760:	2300      	movs	r3, #0
 800b762:	2200      	movs	r2, #0
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f002 fa5e 	bl	800dc26 <USBD_LL_Transmit>
 800b76a:	e01f      	b.n	800b7ac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	2200      	movs	r2, #0
 800b770:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b77a:	687a      	ldr	r2, [r7, #4]
 800b77c:	33b0      	adds	r3, #176	@ 0xb0
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	4413      	add	r3, r2
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	691b      	ldr	r3, [r3, #16]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d010      	beq.n	800b7ac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	33b0      	adds	r3, #176	@ 0xb0
 800b794:	009b      	lsls	r3, r3, #2
 800b796:	4413      	add	r3, r2
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	691b      	ldr	r3, [r3, #16]
 800b79c:	68ba      	ldr	r2, [r7, #8]
 800b79e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b7a2:	68ba      	ldr	r2, [r7, #8]
 800b7a4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b7a8:	78fa      	ldrb	r2, [r7, #3]
 800b7aa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b7ac:	2300      	movs	r3, #0
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3710      	adds	r7, #16
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}

0800b7b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b7b6:	b580      	push	{r7, lr}
 800b7b8:	b084      	sub	sp, #16
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	6078      	str	r0, [r7, #4]
 800b7be:	460b      	mov	r3, r1
 800b7c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	32b0      	adds	r2, #176	@ 0xb0
 800b7cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	32b0      	adds	r2, #176	@ 0xb0
 800b7dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d101      	bne.n	800b7e8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b7e4:	2303      	movs	r3, #3
 800b7e6:	e01a      	b.n	800b81e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b7e8:	78fb      	ldrb	r3, [r7, #3]
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f002 fa5c 	bl	800dcaa <USBD_LL_GetRxDataSize>
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	33b0      	adds	r3, #176	@ 0xb0
 800b804:	009b      	lsls	r3, r3, #2
 800b806:	4413      	add	r3, r2
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	68db      	ldr	r3, [r3, #12]
 800b80c:	68fa      	ldr	r2, [r7, #12]
 800b80e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b812:	68fa      	ldr	r2, [r7, #12]
 800b814:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b818:	4611      	mov	r1, r2
 800b81a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b81c:	2300      	movs	r3, #0
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3710      	adds	r7, #16
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}

0800b826 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b826:	b580      	push	{r7, lr}
 800b828:	b084      	sub	sp, #16
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	32b0      	adds	r2, #176	@ 0xb0
 800b838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b83c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d101      	bne.n	800b848 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b844:	2303      	movs	r3, #3
 800b846:	e024      	b.n	800b892 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	33b0      	adds	r3, #176	@ 0xb0
 800b852:	009b      	lsls	r3, r3, #2
 800b854:	4413      	add	r3, r2
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d019      	beq.n	800b890 <USBD_CDC_EP0_RxReady+0x6a>
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b862:	2bff      	cmp	r3, #255	@ 0xff
 800b864:	d014      	beq.n	800b890 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b86c:	687a      	ldr	r2, [r7, #4]
 800b86e:	33b0      	adds	r3, #176	@ 0xb0
 800b870:	009b      	lsls	r3, r3, #2
 800b872:	4413      	add	r3, r2
 800b874:	685b      	ldr	r3, [r3, #4]
 800b876:	689b      	ldr	r3, [r3, #8]
 800b878:	68fa      	ldr	r2, [r7, #12]
 800b87a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b87e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b880:	68fa      	ldr	r2, [r7, #12]
 800b882:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b886:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	22ff      	movs	r2, #255	@ 0xff
 800b88c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b890:	2300      	movs	r3, #0
}
 800b892:	4618      	mov	r0, r3
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
	...

0800b89c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b086      	sub	sp, #24
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b8a4:	2182      	movs	r1, #130	@ 0x82
 800b8a6:	4818      	ldr	r0, [pc, #96]	@ (800b908 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b8a8:	f000 fd4f 	bl	800c34a <USBD_GetEpDesc>
 800b8ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b8ae:	2101      	movs	r1, #1
 800b8b0:	4815      	ldr	r0, [pc, #84]	@ (800b908 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b8b2:	f000 fd4a 	bl	800c34a <USBD_GetEpDesc>
 800b8b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b8b8:	2181      	movs	r1, #129	@ 0x81
 800b8ba:	4813      	ldr	r0, [pc, #76]	@ (800b908 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b8bc:	f000 fd45 	bl	800c34a <USBD_GetEpDesc>
 800b8c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d002      	beq.n	800b8ce <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	2210      	movs	r2, #16
 800b8cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d006      	beq.n	800b8e2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b8dc:	711a      	strb	r2, [r3, #4]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d006      	beq.n	800b8f6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b8f0:	711a      	strb	r2, [r3, #4]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2243      	movs	r2, #67	@ 0x43
 800b8fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b8fc:	4b02      	ldr	r3, [pc, #8]	@ (800b908 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3718      	adds	r7, #24
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}
 800b906:	bf00      	nop
 800b908:	20000050 	.word	0x20000050

0800b90c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b086      	sub	sp, #24
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b914:	2182      	movs	r1, #130	@ 0x82
 800b916:	4818      	ldr	r0, [pc, #96]	@ (800b978 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b918:	f000 fd17 	bl	800c34a <USBD_GetEpDesc>
 800b91c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b91e:	2101      	movs	r1, #1
 800b920:	4815      	ldr	r0, [pc, #84]	@ (800b978 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b922:	f000 fd12 	bl	800c34a <USBD_GetEpDesc>
 800b926:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b928:	2181      	movs	r1, #129	@ 0x81
 800b92a:	4813      	ldr	r0, [pc, #76]	@ (800b978 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b92c:	f000 fd0d 	bl	800c34a <USBD_GetEpDesc>
 800b930:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d002      	beq.n	800b93e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	2210      	movs	r2, #16
 800b93c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d006      	beq.n	800b952 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	2200      	movs	r2, #0
 800b948:	711a      	strb	r2, [r3, #4]
 800b94a:	2200      	movs	r2, #0
 800b94c:	f042 0202 	orr.w	r2, r2, #2
 800b950:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d006      	beq.n	800b966 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2200      	movs	r2, #0
 800b95c:	711a      	strb	r2, [r3, #4]
 800b95e:	2200      	movs	r2, #0
 800b960:	f042 0202 	orr.w	r2, r2, #2
 800b964:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2243      	movs	r2, #67	@ 0x43
 800b96a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b96c:	4b02      	ldr	r3, [pc, #8]	@ (800b978 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3718      	adds	r7, #24
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
 800b976:	bf00      	nop
 800b978:	20000050 	.word	0x20000050

0800b97c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b086      	sub	sp, #24
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b984:	2182      	movs	r1, #130	@ 0x82
 800b986:	4818      	ldr	r0, [pc, #96]	@ (800b9e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b988:	f000 fcdf 	bl	800c34a <USBD_GetEpDesc>
 800b98c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b98e:	2101      	movs	r1, #1
 800b990:	4815      	ldr	r0, [pc, #84]	@ (800b9e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b992:	f000 fcda 	bl	800c34a <USBD_GetEpDesc>
 800b996:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b998:	2181      	movs	r1, #129	@ 0x81
 800b99a:	4813      	ldr	r0, [pc, #76]	@ (800b9e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b99c:	f000 fcd5 	bl	800c34a <USBD_GetEpDesc>
 800b9a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d002      	beq.n	800b9ae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	2210      	movs	r2, #16
 800b9ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d006      	beq.n	800b9c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b9bc:	711a      	strb	r2, [r3, #4]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d006      	beq.n	800b9d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b9d0:	711a      	strb	r2, [r3, #4]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2243      	movs	r2, #67	@ 0x43
 800b9da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b9dc:	4b02      	ldr	r3, [pc, #8]	@ (800b9e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3718      	adds	r7, #24
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	20000050 	.word	0x20000050

0800b9ec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b083      	sub	sp, #12
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	220a      	movs	r2, #10
 800b9f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b9fa:	4b03      	ldr	r3, [pc, #12]	@ (800ba08 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	370c      	adds	r7, #12
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr
 800ba08:	2000000c 	.word	0x2000000c

0800ba0c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b083      	sub	sp, #12
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d101      	bne.n	800ba20 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ba1c:	2303      	movs	r3, #3
 800ba1e:	e009      	b.n	800ba34 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba26:	687a      	ldr	r2, [r7, #4]
 800ba28:	33b0      	adds	r3, #176	@ 0xb0
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	4413      	add	r3, r2
 800ba2e:	683a      	ldr	r2, [r7, #0]
 800ba30:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ba32:	2300      	movs	r3, #0
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	370c      	adds	r7, #12
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr

0800ba40 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b087      	sub	sp, #28
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	60b9      	str	r1, [r7, #8]
 800ba4a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	32b0      	adds	r2, #176	@ 0xb0
 800ba56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba5a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d101      	bne.n	800ba66 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ba62:	2303      	movs	r3, #3
 800ba64:	e008      	b.n	800ba78 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	68ba      	ldr	r2, [r7, #8]
 800ba6a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	687a      	ldr	r2, [r7, #4]
 800ba72:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ba76:	2300      	movs	r3, #0
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	371c      	adds	r7, #28
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba82:	4770      	bx	lr

0800ba84 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b085      	sub	sp, #20
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	32b0      	adds	r2, #176	@ 0xb0
 800ba98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba9c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d101      	bne.n	800baa8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800baa4:	2303      	movs	r3, #3
 800baa6:	e004      	b.n	800bab2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	683a      	ldr	r2, [r7, #0]
 800baac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800bab0:	2300      	movs	r3, #0
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3714      	adds	r7, #20
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr
	...

0800bac0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b084      	sub	sp, #16
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	32b0      	adds	r2, #176	@ 0xb0
 800bad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bad6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800bad8:	2301      	movs	r3, #1
 800bada:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d101      	bne.n	800bae6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bae2:	2303      	movs	r3, #3
 800bae4:	e025      	b.n	800bb32 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800baec:	2b00      	cmp	r3, #0
 800baee:	d11f      	bne.n	800bb30 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	2201      	movs	r2, #1
 800baf4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800baf8:	4b10      	ldr	r3, [pc, #64]	@ (800bb3c <USBD_CDC_TransmitPacket+0x7c>)
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	f003 020f 	and.w	r2, r3, #15
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	4613      	mov	r3, r2
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	4413      	add	r3, r2
 800bb0e:	009b      	lsls	r3, r3, #2
 800bb10:	4403      	add	r3, r0
 800bb12:	3318      	adds	r3, #24
 800bb14:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800bb16:	4b09      	ldr	r3, [pc, #36]	@ (800bb3c <USBD_CDC_TransmitPacket+0x7c>)
 800bb18:	7819      	ldrb	r1, [r3, #0]
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f002 f87d 	bl	800dc26 <USBD_LL_Transmit>

    ret = USBD_OK;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bb30:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3710      	adds	r7, #16
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	20000093 	.word	0x20000093

0800bb40 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b084      	sub	sp, #16
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	32b0      	adds	r2, #176	@ 0xb0
 800bb52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb56:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	32b0      	adds	r2, #176	@ 0xb0
 800bb62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d101      	bne.n	800bb6e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800bb6a:	2303      	movs	r3, #3
 800bb6c:	e018      	b.n	800bba0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	7c1b      	ldrb	r3, [r3, #16]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d10a      	bne.n	800bb8c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bb76:	4b0c      	ldr	r3, [pc, #48]	@ (800bba8 <USBD_CDC_ReceivePacket+0x68>)
 800bb78:	7819      	ldrb	r1, [r3, #0]
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bb80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f002 f86f 	bl	800dc68 <USBD_LL_PrepareReceive>
 800bb8a:	e008      	b.n	800bb9e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bb8c:	4b06      	ldr	r3, [pc, #24]	@ (800bba8 <USBD_CDC_ReceivePacket+0x68>)
 800bb8e:	7819      	ldrb	r1, [r3, #0]
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bb96:	2340      	movs	r3, #64	@ 0x40
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f002 f865 	bl	800dc68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bb9e:	2300      	movs	r3, #0
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3710      	adds	r7, #16
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}
 800bba8:	20000094 	.word	0x20000094

0800bbac <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b086      	sub	sp, #24
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	60b9      	str	r1, [r7, #8]
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d101      	bne.n	800bbc4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bbc0:	2303      	movs	r3, #3
 800bbc2:	e01f      	b.n	800bc04 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d003      	beq.n	800bbea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	68ba      	ldr	r2, [r7, #8]
 800bbe6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	2201      	movs	r2, #1
 800bbee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	79fa      	ldrb	r2, [r7, #7]
 800bbf6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bbf8:	68f8      	ldr	r0, [r7, #12]
 800bbfa:	f001 fedb 	bl	800d9b4 <USBD_LL_Init>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bc02:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3718      	adds	r7, #24
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b084      	sub	sp, #16
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bc16:	2300      	movs	r3, #0
 800bc18:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d101      	bne.n	800bc24 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bc20:	2303      	movs	r3, #3
 800bc22:	e025      	b.n	800bc70 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	683a      	ldr	r2, [r7, #0]
 800bc28:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	32ae      	adds	r2, #174	@ 0xae
 800bc36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d00f      	beq.n	800bc60 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	32ae      	adds	r2, #174	@ 0xae
 800bc4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc50:	f107 020e 	add.w	r2, r7, #14
 800bc54:	4610      	mov	r0, r2
 800bc56:	4798      	blx	r3
 800bc58:	4602      	mov	r2, r0
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bc66:	1c5a      	adds	r2, r3, #1
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800bc6e:	2300      	movs	r3, #0
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3710      	adds	r7, #16
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b082      	sub	sp, #8
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f001 fee7 	bl	800da54 <USBD_LL_Start>
 800bc86:	4603      	mov	r3, r0
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3708      	adds	r7, #8
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b083      	sub	sp, #12
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bc98:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	370c      	adds	r7, #12
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr

0800bca6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b084      	sub	sp, #16
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
 800bcae:	460b      	mov	r3, r1
 800bcb0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d009      	beq.n	800bcd4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	78fa      	ldrb	r2, [r7, #3]
 800bcca:	4611      	mov	r1, r2
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	4798      	blx	r3
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bcd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3710      	adds	r7, #16
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}

0800bcde <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bcde:	b580      	push	{r7, lr}
 800bce0:	b084      	sub	sp, #16
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
 800bce6:	460b      	mov	r3, r1
 800bce8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcea:	2300      	movs	r3, #0
 800bcec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcf4:	685b      	ldr	r3, [r3, #4]
 800bcf6:	78fa      	ldrb	r2, [r7, #3]
 800bcf8:	4611      	mov	r1, r2
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	4798      	blx	r3
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d001      	beq.n	800bd08 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bd04:	2303      	movs	r3, #3
 800bd06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bd08:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3710      	adds	r7, #16
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}

0800bd12 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bd12:	b580      	push	{r7, lr}
 800bd14:	b084      	sub	sp, #16
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	6078      	str	r0, [r7, #4]
 800bd1a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bd22:	6839      	ldr	r1, [r7, #0]
 800bd24:	4618      	mov	r0, r3
 800bd26:	f001 f936 	bl	800cf96 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800bd38:	461a      	mov	r2, r3
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bd46:	f003 031f 	and.w	r3, r3, #31
 800bd4a:	2b02      	cmp	r3, #2
 800bd4c:	d01a      	beq.n	800bd84 <USBD_LL_SetupStage+0x72>
 800bd4e:	2b02      	cmp	r3, #2
 800bd50:	d822      	bhi.n	800bd98 <USBD_LL_SetupStage+0x86>
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d002      	beq.n	800bd5c <USBD_LL_SetupStage+0x4a>
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d00a      	beq.n	800bd70 <USBD_LL_SetupStage+0x5e>
 800bd5a:	e01d      	b.n	800bd98 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bd62:	4619      	mov	r1, r3
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f000 fb63 	bl	800c430 <USBD_StdDevReq>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	73fb      	strb	r3, [r7, #15]
      break;
 800bd6e:	e020      	b.n	800bdb2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bd76:	4619      	mov	r1, r3
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f000 fbcb 	bl	800c514 <USBD_StdItfReq>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	73fb      	strb	r3, [r7, #15]
      break;
 800bd82:	e016      	b.n	800bdb2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f000 fc2d 	bl	800c5ec <USBD_StdEPReq>
 800bd92:	4603      	mov	r3, r0
 800bd94:	73fb      	strb	r3, [r7, #15]
      break;
 800bd96:	e00c      	b.n	800bdb2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bd9e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bda2:	b2db      	uxtb	r3, r3
 800bda4:	4619      	mov	r1, r3
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f001 feb4 	bl	800db14 <USBD_LL_StallEP>
 800bdac:	4603      	mov	r3, r0
 800bdae:	73fb      	strb	r3, [r7, #15]
      break;
 800bdb0:	bf00      	nop
  }

  return ret;
 800bdb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3710      	adds	r7, #16
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}

0800bdbc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b086      	sub	sp, #24
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	60f8      	str	r0, [r7, #12]
 800bdc4:	460b      	mov	r3, r1
 800bdc6:	607a      	str	r2, [r7, #4]
 800bdc8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800bdce:	7afb      	ldrb	r3, [r7, #11]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d16e      	bne.n	800beb2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bdda:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bde2:	2b03      	cmp	r3, #3
 800bde4:	f040 8098 	bne.w	800bf18 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	689a      	ldr	r2, [r3, #8]
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	68db      	ldr	r3, [r3, #12]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d913      	bls.n	800be1c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	689a      	ldr	r2, [r3, #8]
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	68db      	ldr	r3, [r3, #12]
 800bdfc:	1ad2      	subs	r2, r2, r3
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	68da      	ldr	r2, [r3, #12]
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	689b      	ldr	r3, [r3, #8]
 800be0a:	4293      	cmp	r3, r2
 800be0c:	bf28      	it	cs
 800be0e:	4613      	movcs	r3, r2
 800be10:	461a      	mov	r2, r3
 800be12:	6879      	ldr	r1, [r7, #4]
 800be14:	68f8      	ldr	r0, [r7, #12]
 800be16:	f001 f9be 	bl	800d196 <USBD_CtlContinueRx>
 800be1a:	e07d      	b.n	800bf18 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800be22:	f003 031f 	and.w	r3, r3, #31
 800be26:	2b02      	cmp	r3, #2
 800be28:	d014      	beq.n	800be54 <USBD_LL_DataOutStage+0x98>
 800be2a:	2b02      	cmp	r3, #2
 800be2c:	d81d      	bhi.n	800be6a <USBD_LL_DataOutStage+0xae>
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d002      	beq.n	800be38 <USBD_LL_DataOutStage+0x7c>
 800be32:	2b01      	cmp	r3, #1
 800be34:	d003      	beq.n	800be3e <USBD_LL_DataOutStage+0x82>
 800be36:	e018      	b.n	800be6a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800be38:	2300      	movs	r3, #0
 800be3a:	75bb      	strb	r3, [r7, #22]
            break;
 800be3c:	e018      	b.n	800be70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800be44:	b2db      	uxtb	r3, r3
 800be46:	4619      	mov	r1, r3
 800be48:	68f8      	ldr	r0, [r7, #12]
 800be4a:	f000 fa64 	bl	800c316 <USBD_CoreFindIF>
 800be4e:	4603      	mov	r3, r0
 800be50:	75bb      	strb	r3, [r7, #22]
            break;
 800be52:	e00d      	b.n	800be70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800be5a:	b2db      	uxtb	r3, r3
 800be5c:	4619      	mov	r1, r3
 800be5e:	68f8      	ldr	r0, [r7, #12]
 800be60:	f000 fa66 	bl	800c330 <USBD_CoreFindEP>
 800be64:	4603      	mov	r3, r0
 800be66:	75bb      	strb	r3, [r7, #22]
            break;
 800be68:	e002      	b.n	800be70 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800be6a:	2300      	movs	r3, #0
 800be6c:	75bb      	strb	r3, [r7, #22]
            break;
 800be6e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800be70:	7dbb      	ldrb	r3, [r7, #22]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d119      	bne.n	800beaa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	2b03      	cmp	r3, #3
 800be80:	d113      	bne.n	800beaa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800be82:	7dba      	ldrb	r2, [r7, #22]
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	32ae      	adds	r2, #174	@ 0xae
 800be88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be8c:	691b      	ldr	r3, [r3, #16]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d00b      	beq.n	800beaa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800be92:	7dba      	ldrb	r2, [r7, #22]
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800be9a:	7dba      	ldrb	r2, [r7, #22]
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	32ae      	adds	r2, #174	@ 0xae
 800bea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bea4:	691b      	ldr	r3, [r3, #16]
 800bea6:	68f8      	ldr	r0, [r7, #12]
 800bea8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800beaa:	68f8      	ldr	r0, [r7, #12]
 800beac:	f001 f984 	bl	800d1b8 <USBD_CtlSendStatus>
 800beb0:	e032      	b.n	800bf18 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800beb2:	7afb      	ldrb	r3, [r7, #11]
 800beb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800beb8:	b2db      	uxtb	r3, r3
 800beba:	4619      	mov	r1, r3
 800bebc:	68f8      	ldr	r0, [r7, #12]
 800bebe:	f000 fa37 	bl	800c330 <USBD_CoreFindEP>
 800bec2:	4603      	mov	r3, r0
 800bec4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bec6:	7dbb      	ldrb	r3, [r7, #22]
 800bec8:	2bff      	cmp	r3, #255	@ 0xff
 800beca:	d025      	beq.n	800bf18 <USBD_LL_DataOutStage+0x15c>
 800becc:	7dbb      	ldrb	r3, [r7, #22]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d122      	bne.n	800bf18 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bed8:	b2db      	uxtb	r3, r3
 800beda:	2b03      	cmp	r3, #3
 800bedc:	d117      	bne.n	800bf0e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bede:	7dba      	ldrb	r2, [r7, #22]
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	32ae      	adds	r2, #174	@ 0xae
 800bee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bee8:	699b      	ldr	r3, [r3, #24]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d00f      	beq.n	800bf0e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800beee:	7dba      	ldrb	r2, [r7, #22]
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bef6:	7dba      	ldrb	r2, [r7, #22]
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	32ae      	adds	r2, #174	@ 0xae
 800befc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf00:	699b      	ldr	r3, [r3, #24]
 800bf02:	7afa      	ldrb	r2, [r7, #11]
 800bf04:	4611      	mov	r1, r2
 800bf06:	68f8      	ldr	r0, [r7, #12]
 800bf08:	4798      	blx	r3
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bf0e:	7dfb      	ldrb	r3, [r7, #23]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d001      	beq.n	800bf18 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bf14:	7dfb      	ldrb	r3, [r7, #23]
 800bf16:	e000      	b.n	800bf1a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bf18:	2300      	movs	r3, #0
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3718      	adds	r7, #24
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}

0800bf22 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bf22:	b580      	push	{r7, lr}
 800bf24:	b086      	sub	sp, #24
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	60f8      	str	r0, [r7, #12]
 800bf2a:	460b      	mov	r3, r1
 800bf2c:	607a      	str	r2, [r7, #4]
 800bf2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bf30:	7afb      	ldrb	r3, [r7, #11]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d16f      	bne.n	800c016 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	3314      	adds	r3, #20
 800bf3a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bf42:	2b02      	cmp	r3, #2
 800bf44:	d15a      	bne.n	800bffc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	689a      	ldr	r2, [r3, #8]
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	68db      	ldr	r3, [r3, #12]
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d914      	bls.n	800bf7c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	689a      	ldr	r2, [r3, #8]
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	68db      	ldr	r3, [r3, #12]
 800bf5a:	1ad2      	subs	r2, r2, r3
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	461a      	mov	r2, r3
 800bf66:	6879      	ldr	r1, [r7, #4]
 800bf68:	68f8      	ldr	r0, [r7, #12]
 800bf6a:	f001 f8e6 	bl	800d13a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf6e:	2300      	movs	r3, #0
 800bf70:	2200      	movs	r2, #0
 800bf72:	2100      	movs	r1, #0
 800bf74:	68f8      	ldr	r0, [r7, #12]
 800bf76:	f001 fe77 	bl	800dc68 <USBD_LL_PrepareReceive>
 800bf7a:	e03f      	b.n	800bffc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	68da      	ldr	r2, [r3, #12]
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	689b      	ldr	r3, [r3, #8]
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d11c      	bne.n	800bfc2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	685a      	ldr	r2, [r3, #4]
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d316      	bcc.n	800bfc2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	685a      	ldr	r2, [r3, #4]
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bf9e:	429a      	cmp	r2, r3
 800bfa0:	d20f      	bcs.n	800bfc2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	2100      	movs	r1, #0
 800bfa6:	68f8      	ldr	r0, [r7, #12]
 800bfa8:	f001 f8c7 	bl	800d13a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	2100      	movs	r1, #0
 800bfba:	68f8      	ldr	r0, [r7, #12]
 800bfbc:	f001 fe54 	bl	800dc68 <USBD_LL_PrepareReceive>
 800bfc0:	e01c      	b.n	800bffc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfc8:	b2db      	uxtb	r3, r3
 800bfca:	2b03      	cmp	r3, #3
 800bfcc:	d10f      	bne.n	800bfee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfd4:	68db      	ldr	r3, [r3, #12]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d009      	beq.n	800bfee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfe8:	68db      	ldr	r3, [r3, #12]
 800bfea:	68f8      	ldr	r0, [r7, #12]
 800bfec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bfee:	2180      	movs	r1, #128	@ 0x80
 800bff0:	68f8      	ldr	r0, [r7, #12]
 800bff2:	f001 fd8f 	bl	800db14 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bff6:	68f8      	ldr	r0, [r7, #12]
 800bff8:	f001 f8f1 	bl	800d1de <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c002:	2b00      	cmp	r3, #0
 800c004:	d03a      	beq.n	800c07c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c006:	68f8      	ldr	r0, [r7, #12]
 800c008:	f7ff fe42 	bl	800bc90 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	2200      	movs	r2, #0
 800c010:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c014:	e032      	b.n	800c07c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c016:	7afb      	ldrb	r3, [r7, #11]
 800c018:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c01c:	b2db      	uxtb	r3, r3
 800c01e:	4619      	mov	r1, r3
 800c020:	68f8      	ldr	r0, [r7, #12]
 800c022:	f000 f985 	bl	800c330 <USBD_CoreFindEP>
 800c026:	4603      	mov	r3, r0
 800c028:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c02a:	7dfb      	ldrb	r3, [r7, #23]
 800c02c:	2bff      	cmp	r3, #255	@ 0xff
 800c02e:	d025      	beq.n	800c07c <USBD_LL_DataInStage+0x15a>
 800c030:	7dfb      	ldrb	r3, [r7, #23]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d122      	bne.n	800c07c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c03c:	b2db      	uxtb	r3, r3
 800c03e:	2b03      	cmp	r3, #3
 800c040:	d11c      	bne.n	800c07c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c042:	7dfa      	ldrb	r2, [r7, #23]
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	32ae      	adds	r2, #174	@ 0xae
 800c048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c04c:	695b      	ldr	r3, [r3, #20]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d014      	beq.n	800c07c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c052:	7dfa      	ldrb	r2, [r7, #23]
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c05a:	7dfa      	ldrb	r2, [r7, #23]
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	32ae      	adds	r2, #174	@ 0xae
 800c060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c064:	695b      	ldr	r3, [r3, #20]
 800c066:	7afa      	ldrb	r2, [r7, #11]
 800c068:	4611      	mov	r1, r2
 800c06a:	68f8      	ldr	r0, [r7, #12]
 800c06c:	4798      	blx	r3
 800c06e:	4603      	mov	r3, r0
 800c070:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c072:	7dbb      	ldrb	r3, [r7, #22]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d001      	beq.n	800c07c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c078:	7dbb      	ldrb	r3, [r7, #22]
 800c07a:	e000      	b.n	800c07e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c07c:	2300      	movs	r3, #0
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3718      	adds	r7, #24
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}

0800c086 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c086:	b580      	push	{r7, lr}
 800c088:	b084      	sub	sp, #16
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c08e:	2300      	movs	r3, #0
 800c090:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2201      	movs	r2, #1
 800c096:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2200      	movs	r2, #0
 800c09e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d014      	beq.n	800c0ec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0c8:	685b      	ldr	r3, [r3, #4]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d00e      	beq.n	800c0ec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0d4:	685b      	ldr	r3, [r3, #4]
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	6852      	ldr	r2, [r2, #4]
 800c0da:	b2d2      	uxtb	r2, r2
 800c0dc:	4611      	mov	r1, r2
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	4798      	blx	r3
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d001      	beq.n	800c0ec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c0e8:	2303      	movs	r3, #3
 800c0ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c0ec:	2340      	movs	r3, #64	@ 0x40
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	2100      	movs	r1, #0
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f001 fcc9 	bl	800da8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2240      	movs	r2, #64	@ 0x40
 800c104:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c108:	2340      	movs	r3, #64	@ 0x40
 800c10a:	2200      	movs	r2, #0
 800c10c:	2180      	movs	r1, #128	@ 0x80
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f001 fcbb 	bl	800da8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2201      	movs	r2, #1
 800c118:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2240      	movs	r2, #64	@ 0x40
 800c11e:	621a      	str	r2, [r3, #32]

  return ret;
 800c120:	7bfb      	ldrb	r3, [r7, #15]
}
 800c122:	4618      	mov	r0, r3
 800c124:	3710      	adds	r7, #16
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}

0800c12a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c12a:	b480      	push	{r7}
 800c12c:	b083      	sub	sp, #12
 800c12e:	af00      	add	r7, sp, #0
 800c130:	6078      	str	r0, [r7, #4]
 800c132:	460b      	mov	r3, r1
 800c134:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	78fa      	ldrb	r2, [r7, #3]
 800c13a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c13c:	2300      	movs	r3, #0
}
 800c13e:	4618      	mov	r0, r3
 800c140:	370c      	adds	r7, #12
 800c142:	46bd      	mov	sp, r7
 800c144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c148:	4770      	bx	lr

0800c14a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c14a:	b480      	push	{r7}
 800c14c:	b083      	sub	sp, #12
 800c14e:	af00      	add	r7, sp, #0
 800c150:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c158:	b2db      	uxtb	r3, r3
 800c15a:	2b04      	cmp	r3, #4
 800c15c:	d006      	beq.n	800c16c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c164:	b2da      	uxtb	r2, r3
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2204      	movs	r2, #4
 800c170:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c174:	2300      	movs	r3, #0
}
 800c176:	4618      	mov	r0, r3
 800c178:	370c      	adds	r7, #12
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr

0800c182 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c182:	b480      	push	{r7}
 800c184:	b083      	sub	sp, #12
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c190:	b2db      	uxtb	r3, r3
 800c192:	2b04      	cmp	r3, #4
 800c194:	d106      	bne.n	800c1a4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c19c:	b2da      	uxtb	r2, r3
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c1a4:	2300      	movs	r3, #0
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	370c      	adds	r7, #12
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b0:	4770      	bx	lr

0800c1b2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c1b2:	b580      	push	{r7, lr}
 800c1b4:	b082      	sub	sp, #8
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1c0:	b2db      	uxtb	r3, r3
 800c1c2:	2b03      	cmp	r3, #3
 800c1c4:	d110      	bne.n	800c1e8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d00b      	beq.n	800c1e8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1d6:	69db      	ldr	r3, [r3, #28]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d005      	beq.n	800c1e8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1e2:	69db      	ldr	r3, [r3, #28]
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c1e8:	2300      	movs	r3, #0
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3708      	adds	r7, #8
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}

0800c1f2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c1f2:	b580      	push	{r7, lr}
 800c1f4:	b082      	sub	sp, #8
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	6078      	str	r0, [r7, #4]
 800c1fa:	460b      	mov	r3, r1
 800c1fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	32ae      	adds	r2, #174	@ 0xae
 800c208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d101      	bne.n	800c214 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c210:	2303      	movs	r3, #3
 800c212:	e01c      	b.n	800c24e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c21a:	b2db      	uxtb	r3, r3
 800c21c:	2b03      	cmp	r3, #3
 800c21e:	d115      	bne.n	800c24c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	32ae      	adds	r2, #174	@ 0xae
 800c22a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c22e:	6a1b      	ldr	r3, [r3, #32]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d00b      	beq.n	800c24c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	32ae      	adds	r2, #174	@ 0xae
 800c23e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c242:	6a1b      	ldr	r3, [r3, #32]
 800c244:	78fa      	ldrb	r2, [r7, #3]
 800c246:	4611      	mov	r1, r2
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c24c:	2300      	movs	r3, #0
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3708      	adds	r7, #8
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}

0800c256 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c256:	b580      	push	{r7, lr}
 800c258:	b082      	sub	sp, #8
 800c25a:	af00      	add	r7, sp, #0
 800c25c:	6078      	str	r0, [r7, #4]
 800c25e:	460b      	mov	r3, r1
 800c260:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	32ae      	adds	r2, #174	@ 0xae
 800c26c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d101      	bne.n	800c278 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c274:	2303      	movs	r3, #3
 800c276:	e01c      	b.n	800c2b2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c27e:	b2db      	uxtb	r3, r3
 800c280:	2b03      	cmp	r3, #3
 800c282:	d115      	bne.n	800c2b0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	32ae      	adds	r2, #174	@ 0xae
 800c28e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c294:	2b00      	cmp	r3, #0
 800c296:	d00b      	beq.n	800c2b0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	32ae      	adds	r2, #174	@ 0xae
 800c2a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2a8:	78fa      	ldrb	r2, [r7, #3]
 800c2aa:	4611      	mov	r1, r2
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c2b0:	2300      	movs	r3, #0
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3708      	adds	r7, #8
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}

0800c2ba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c2ba:	b480      	push	{r7}
 800c2bc:	b083      	sub	sp, #12
 800c2be:	af00      	add	r7, sp, #0
 800c2c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c2c2:	2300      	movs	r3, #0
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	370c      	adds	r7, #12
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ce:	4770      	bx	lr

0800c2d0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b084      	sub	sp, #16
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2201      	movs	r2, #1
 800c2e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d00e      	beq.n	800c30c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	687a      	ldr	r2, [r7, #4]
 800c2f8:	6852      	ldr	r2, [r2, #4]
 800c2fa:	b2d2      	uxtb	r2, r2
 800c2fc:	4611      	mov	r1, r2
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	4798      	blx	r3
 800c302:	4603      	mov	r3, r0
 800c304:	2b00      	cmp	r3, #0
 800c306:	d001      	beq.n	800c30c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c308:	2303      	movs	r3, #3
 800c30a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c30c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3710      	adds	r7, #16
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}

0800c316 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c316:	b480      	push	{r7}
 800c318:	b083      	sub	sp, #12
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	6078      	str	r0, [r7, #4]
 800c31e:	460b      	mov	r3, r1
 800c320:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c322:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c324:	4618      	mov	r0, r3
 800c326:	370c      	adds	r7, #12
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr

0800c330 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c330:	b480      	push	{r7}
 800c332:	b083      	sub	sp, #12
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
 800c338:	460b      	mov	r3, r1
 800c33a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c33c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c33e:	4618      	mov	r0, r3
 800c340:	370c      	adds	r7, #12
 800c342:	46bd      	mov	sp, r7
 800c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c348:	4770      	bx	lr

0800c34a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c34a:	b580      	push	{r7, lr}
 800c34c:	b086      	sub	sp, #24
 800c34e:	af00      	add	r7, sp, #0
 800c350:	6078      	str	r0, [r7, #4]
 800c352:	460b      	mov	r3, r1
 800c354:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c35e:	2300      	movs	r3, #0
 800c360:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	885b      	ldrh	r3, [r3, #2]
 800c366:	b29b      	uxth	r3, r3
 800c368:	68fa      	ldr	r2, [r7, #12]
 800c36a:	7812      	ldrb	r2, [r2, #0]
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d91f      	bls.n	800c3b0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c376:	e013      	b.n	800c3a0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c378:	f107 030a 	add.w	r3, r7, #10
 800c37c:	4619      	mov	r1, r3
 800c37e:	6978      	ldr	r0, [r7, #20]
 800c380:	f000 f81b 	bl	800c3ba <USBD_GetNextDesc>
 800c384:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	785b      	ldrb	r3, [r3, #1]
 800c38a:	2b05      	cmp	r3, #5
 800c38c:	d108      	bne.n	800c3a0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	789b      	ldrb	r3, [r3, #2]
 800c396:	78fa      	ldrb	r2, [r7, #3]
 800c398:	429a      	cmp	r2, r3
 800c39a:	d008      	beq.n	800c3ae <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c39c:	2300      	movs	r3, #0
 800c39e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	885b      	ldrh	r3, [r3, #2]
 800c3a4:	b29a      	uxth	r2, r3
 800c3a6:	897b      	ldrh	r3, [r7, #10]
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	d8e5      	bhi.n	800c378 <USBD_GetEpDesc+0x2e>
 800c3ac:	e000      	b.n	800c3b0 <USBD_GetEpDesc+0x66>
          break;
 800c3ae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c3b0:	693b      	ldr	r3, [r7, #16]
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3718      	adds	r7, #24
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}

0800c3ba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c3ba:	b480      	push	{r7}
 800c3bc:	b085      	sub	sp, #20
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
 800c3c2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	881b      	ldrh	r3, [r3, #0]
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	7812      	ldrb	r2, [r2, #0]
 800c3d0:	4413      	add	r3, r2
 800c3d2:	b29a      	uxth	r2, r3
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	461a      	mov	r2, r3
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	4413      	add	r3, r2
 800c3e2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c3e4:	68fb      	ldr	r3, [r7, #12]
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3714      	adds	r7, #20
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr

0800c3f2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c3f2:	b480      	push	{r7}
 800c3f4:	b087      	sub	sp, #28
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	3301      	adds	r3, #1
 800c408:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	781b      	ldrb	r3, [r3, #0]
 800c40e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c410:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c414:	021b      	lsls	r3, r3, #8
 800c416:	b21a      	sxth	r2, r3
 800c418:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c41c:	4313      	orrs	r3, r2
 800c41e:	b21b      	sxth	r3, r3
 800c420:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c422:	89fb      	ldrh	r3, [r7, #14]
}
 800c424:	4618      	mov	r0, r3
 800c426:	371c      	adds	r7, #28
 800c428:	46bd      	mov	sp, r7
 800c42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42e:	4770      	bx	lr

0800c430 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c43a:	2300      	movs	r3, #0
 800c43c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	781b      	ldrb	r3, [r3, #0]
 800c442:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c446:	2b40      	cmp	r3, #64	@ 0x40
 800c448:	d005      	beq.n	800c456 <USBD_StdDevReq+0x26>
 800c44a:	2b40      	cmp	r3, #64	@ 0x40
 800c44c:	d857      	bhi.n	800c4fe <USBD_StdDevReq+0xce>
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d00f      	beq.n	800c472 <USBD_StdDevReq+0x42>
 800c452:	2b20      	cmp	r3, #32
 800c454:	d153      	bne.n	800c4fe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	32ae      	adds	r2, #174	@ 0xae
 800c460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c464:	689b      	ldr	r3, [r3, #8]
 800c466:	6839      	ldr	r1, [r7, #0]
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	4798      	blx	r3
 800c46c:	4603      	mov	r3, r0
 800c46e:	73fb      	strb	r3, [r7, #15]
      break;
 800c470:	e04a      	b.n	800c508 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	785b      	ldrb	r3, [r3, #1]
 800c476:	2b09      	cmp	r3, #9
 800c478:	d83b      	bhi.n	800c4f2 <USBD_StdDevReq+0xc2>
 800c47a:	a201      	add	r2, pc, #4	@ (adr r2, 800c480 <USBD_StdDevReq+0x50>)
 800c47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c480:	0800c4d5 	.word	0x0800c4d5
 800c484:	0800c4e9 	.word	0x0800c4e9
 800c488:	0800c4f3 	.word	0x0800c4f3
 800c48c:	0800c4df 	.word	0x0800c4df
 800c490:	0800c4f3 	.word	0x0800c4f3
 800c494:	0800c4b3 	.word	0x0800c4b3
 800c498:	0800c4a9 	.word	0x0800c4a9
 800c49c:	0800c4f3 	.word	0x0800c4f3
 800c4a0:	0800c4cb 	.word	0x0800c4cb
 800c4a4:	0800c4bd 	.word	0x0800c4bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c4a8:	6839      	ldr	r1, [r7, #0]
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 fa3c 	bl	800c928 <USBD_GetDescriptor>
          break;
 800c4b0:	e024      	b.n	800c4fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c4b2:	6839      	ldr	r1, [r7, #0]
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f000 fbcb 	bl	800cc50 <USBD_SetAddress>
          break;
 800c4ba:	e01f      	b.n	800c4fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c4bc:	6839      	ldr	r1, [r7, #0]
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f000 fc0a 	bl	800ccd8 <USBD_SetConfig>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	73fb      	strb	r3, [r7, #15]
          break;
 800c4c8:	e018      	b.n	800c4fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c4ca:	6839      	ldr	r1, [r7, #0]
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f000 fcad 	bl	800ce2c <USBD_GetConfig>
          break;
 800c4d2:	e013      	b.n	800c4fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c4d4:	6839      	ldr	r1, [r7, #0]
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 fcde 	bl	800ce98 <USBD_GetStatus>
          break;
 800c4dc:	e00e      	b.n	800c4fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c4de:	6839      	ldr	r1, [r7, #0]
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f000 fd0d 	bl	800cf00 <USBD_SetFeature>
          break;
 800c4e6:	e009      	b.n	800c4fc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c4e8:	6839      	ldr	r1, [r7, #0]
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 fd31 	bl	800cf52 <USBD_ClrFeature>
          break;
 800c4f0:	e004      	b.n	800c4fc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c4f2:	6839      	ldr	r1, [r7, #0]
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f000 fd88 	bl	800d00a <USBD_CtlError>
          break;
 800c4fa:	bf00      	nop
      }
      break;
 800c4fc:	e004      	b.n	800c508 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c4fe:	6839      	ldr	r1, [r7, #0]
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f000 fd82 	bl	800d00a <USBD_CtlError>
      break;
 800c506:	bf00      	nop
  }

  return ret;
 800c508:	7bfb      	ldrb	r3, [r7, #15]
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3710      	adds	r7, #16
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
 800c512:	bf00      	nop

0800c514 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b084      	sub	sp, #16
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c51e:	2300      	movs	r3, #0
 800c520:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c52a:	2b40      	cmp	r3, #64	@ 0x40
 800c52c:	d005      	beq.n	800c53a <USBD_StdItfReq+0x26>
 800c52e:	2b40      	cmp	r3, #64	@ 0x40
 800c530:	d852      	bhi.n	800c5d8 <USBD_StdItfReq+0xc4>
 800c532:	2b00      	cmp	r3, #0
 800c534:	d001      	beq.n	800c53a <USBD_StdItfReq+0x26>
 800c536:	2b20      	cmp	r3, #32
 800c538:	d14e      	bne.n	800c5d8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c540:	b2db      	uxtb	r3, r3
 800c542:	3b01      	subs	r3, #1
 800c544:	2b02      	cmp	r3, #2
 800c546:	d840      	bhi.n	800c5ca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	889b      	ldrh	r3, [r3, #4]
 800c54c:	b2db      	uxtb	r3, r3
 800c54e:	2b01      	cmp	r3, #1
 800c550:	d836      	bhi.n	800c5c0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	889b      	ldrh	r3, [r3, #4]
 800c556:	b2db      	uxtb	r3, r3
 800c558:	4619      	mov	r1, r3
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f7ff fedb 	bl	800c316 <USBD_CoreFindIF>
 800c560:	4603      	mov	r3, r0
 800c562:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c564:	7bbb      	ldrb	r3, [r7, #14]
 800c566:	2bff      	cmp	r3, #255	@ 0xff
 800c568:	d01d      	beq.n	800c5a6 <USBD_StdItfReq+0x92>
 800c56a:	7bbb      	ldrb	r3, [r7, #14]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d11a      	bne.n	800c5a6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c570:	7bba      	ldrb	r2, [r7, #14]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	32ae      	adds	r2, #174	@ 0xae
 800c576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c57a:	689b      	ldr	r3, [r3, #8]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d00f      	beq.n	800c5a0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c580:	7bba      	ldrb	r2, [r7, #14]
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c588:	7bba      	ldrb	r2, [r7, #14]
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	32ae      	adds	r2, #174	@ 0xae
 800c58e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c592:	689b      	ldr	r3, [r3, #8]
 800c594:	6839      	ldr	r1, [r7, #0]
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	4798      	blx	r3
 800c59a:	4603      	mov	r3, r0
 800c59c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c59e:	e004      	b.n	800c5aa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c5a0:	2303      	movs	r3, #3
 800c5a2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c5a4:	e001      	b.n	800c5aa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c5a6:	2303      	movs	r3, #3
 800c5a8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	88db      	ldrh	r3, [r3, #6]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d110      	bne.n	800c5d4 <USBD_StdItfReq+0xc0>
 800c5b2:	7bfb      	ldrb	r3, [r7, #15]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d10d      	bne.n	800c5d4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f000 fdfd 	bl	800d1b8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c5be:	e009      	b.n	800c5d4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c5c0:	6839      	ldr	r1, [r7, #0]
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f000 fd21 	bl	800d00a <USBD_CtlError>
          break;
 800c5c8:	e004      	b.n	800c5d4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c5ca:	6839      	ldr	r1, [r7, #0]
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f000 fd1c 	bl	800d00a <USBD_CtlError>
          break;
 800c5d2:	e000      	b.n	800c5d6 <USBD_StdItfReq+0xc2>
          break;
 800c5d4:	bf00      	nop
      }
      break;
 800c5d6:	e004      	b.n	800c5e2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c5d8:	6839      	ldr	r1, [r7, #0]
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f000 fd15 	bl	800d00a <USBD_CtlError>
      break;
 800c5e0:	bf00      	nop
  }

  return ret;
 800c5e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3710      	adds	r7, #16
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b084      	sub	sp, #16
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	889b      	ldrh	r3, [r3, #4]
 800c5fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	781b      	ldrb	r3, [r3, #0]
 800c604:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c608:	2b40      	cmp	r3, #64	@ 0x40
 800c60a:	d007      	beq.n	800c61c <USBD_StdEPReq+0x30>
 800c60c:	2b40      	cmp	r3, #64	@ 0x40
 800c60e:	f200 817f 	bhi.w	800c910 <USBD_StdEPReq+0x324>
 800c612:	2b00      	cmp	r3, #0
 800c614:	d02a      	beq.n	800c66c <USBD_StdEPReq+0x80>
 800c616:	2b20      	cmp	r3, #32
 800c618:	f040 817a 	bne.w	800c910 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c61c:	7bbb      	ldrb	r3, [r7, #14]
 800c61e:	4619      	mov	r1, r3
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f7ff fe85 	bl	800c330 <USBD_CoreFindEP>
 800c626:	4603      	mov	r3, r0
 800c628:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c62a:	7b7b      	ldrb	r3, [r7, #13]
 800c62c:	2bff      	cmp	r3, #255	@ 0xff
 800c62e:	f000 8174 	beq.w	800c91a <USBD_StdEPReq+0x32e>
 800c632:	7b7b      	ldrb	r3, [r7, #13]
 800c634:	2b00      	cmp	r3, #0
 800c636:	f040 8170 	bne.w	800c91a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c63a:	7b7a      	ldrb	r2, [r7, #13]
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c642:	7b7a      	ldrb	r2, [r7, #13]
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	32ae      	adds	r2, #174	@ 0xae
 800c648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c64c:	689b      	ldr	r3, [r3, #8]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	f000 8163 	beq.w	800c91a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c654:	7b7a      	ldrb	r2, [r7, #13]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	32ae      	adds	r2, #174	@ 0xae
 800c65a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c65e:	689b      	ldr	r3, [r3, #8]
 800c660:	6839      	ldr	r1, [r7, #0]
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	4798      	blx	r3
 800c666:	4603      	mov	r3, r0
 800c668:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c66a:	e156      	b.n	800c91a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	785b      	ldrb	r3, [r3, #1]
 800c670:	2b03      	cmp	r3, #3
 800c672:	d008      	beq.n	800c686 <USBD_StdEPReq+0x9a>
 800c674:	2b03      	cmp	r3, #3
 800c676:	f300 8145 	bgt.w	800c904 <USBD_StdEPReq+0x318>
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	f000 809b 	beq.w	800c7b6 <USBD_StdEPReq+0x1ca>
 800c680:	2b01      	cmp	r3, #1
 800c682:	d03c      	beq.n	800c6fe <USBD_StdEPReq+0x112>
 800c684:	e13e      	b.n	800c904 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c68c:	b2db      	uxtb	r3, r3
 800c68e:	2b02      	cmp	r3, #2
 800c690:	d002      	beq.n	800c698 <USBD_StdEPReq+0xac>
 800c692:	2b03      	cmp	r3, #3
 800c694:	d016      	beq.n	800c6c4 <USBD_StdEPReq+0xd8>
 800c696:	e02c      	b.n	800c6f2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c698:	7bbb      	ldrb	r3, [r7, #14]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d00d      	beq.n	800c6ba <USBD_StdEPReq+0xce>
 800c69e:	7bbb      	ldrb	r3, [r7, #14]
 800c6a0:	2b80      	cmp	r3, #128	@ 0x80
 800c6a2:	d00a      	beq.n	800c6ba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c6a4:	7bbb      	ldrb	r3, [r7, #14]
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f001 fa33 	bl	800db14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c6ae:	2180      	movs	r1, #128	@ 0x80
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f001 fa2f 	bl	800db14 <USBD_LL_StallEP>
 800c6b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c6b8:	e020      	b.n	800c6fc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c6ba:	6839      	ldr	r1, [r7, #0]
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f000 fca4 	bl	800d00a <USBD_CtlError>
              break;
 800c6c2:	e01b      	b.n	800c6fc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	885b      	ldrh	r3, [r3, #2]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d10e      	bne.n	800c6ea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c6cc:	7bbb      	ldrb	r3, [r7, #14]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d00b      	beq.n	800c6ea <USBD_StdEPReq+0xfe>
 800c6d2:	7bbb      	ldrb	r3, [r7, #14]
 800c6d4:	2b80      	cmp	r3, #128	@ 0x80
 800c6d6:	d008      	beq.n	800c6ea <USBD_StdEPReq+0xfe>
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	88db      	ldrh	r3, [r3, #6]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d104      	bne.n	800c6ea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c6e0:	7bbb      	ldrb	r3, [r7, #14]
 800c6e2:	4619      	mov	r1, r3
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f001 fa15 	bl	800db14 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f000 fd64 	bl	800d1b8 <USBD_CtlSendStatus>

              break;
 800c6f0:	e004      	b.n	800c6fc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c6f2:	6839      	ldr	r1, [r7, #0]
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f000 fc88 	bl	800d00a <USBD_CtlError>
              break;
 800c6fa:	bf00      	nop
          }
          break;
 800c6fc:	e107      	b.n	800c90e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c704:	b2db      	uxtb	r3, r3
 800c706:	2b02      	cmp	r3, #2
 800c708:	d002      	beq.n	800c710 <USBD_StdEPReq+0x124>
 800c70a:	2b03      	cmp	r3, #3
 800c70c:	d016      	beq.n	800c73c <USBD_StdEPReq+0x150>
 800c70e:	e04b      	b.n	800c7a8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c710:	7bbb      	ldrb	r3, [r7, #14]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d00d      	beq.n	800c732 <USBD_StdEPReq+0x146>
 800c716:	7bbb      	ldrb	r3, [r7, #14]
 800c718:	2b80      	cmp	r3, #128	@ 0x80
 800c71a:	d00a      	beq.n	800c732 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c71c:	7bbb      	ldrb	r3, [r7, #14]
 800c71e:	4619      	mov	r1, r3
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f001 f9f7 	bl	800db14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c726:	2180      	movs	r1, #128	@ 0x80
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f001 f9f3 	bl	800db14 <USBD_LL_StallEP>
 800c72e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c730:	e040      	b.n	800c7b4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c732:	6839      	ldr	r1, [r7, #0]
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f000 fc68 	bl	800d00a <USBD_CtlError>
              break;
 800c73a:	e03b      	b.n	800c7b4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	885b      	ldrh	r3, [r3, #2]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d136      	bne.n	800c7b2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c744:	7bbb      	ldrb	r3, [r7, #14]
 800c746:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d004      	beq.n	800c758 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c74e:	7bbb      	ldrb	r3, [r7, #14]
 800c750:	4619      	mov	r1, r3
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f001 f9fd 	bl	800db52 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f000 fd2d 	bl	800d1b8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c75e:	7bbb      	ldrb	r3, [r7, #14]
 800c760:	4619      	mov	r1, r3
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f7ff fde4 	bl	800c330 <USBD_CoreFindEP>
 800c768:	4603      	mov	r3, r0
 800c76a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c76c:	7b7b      	ldrb	r3, [r7, #13]
 800c76e:	2bff      	cmp	r3, #255	@ 0xff
 800c770:	d01f      	beq.n	800c7b2 <USBD_StdEPReq+0x1c6>
 800c772:	7b7b      	ldrb	r3, [r7, #13]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d11c      	bne.n	800c7b2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c778:	7b7a      	ldrb	r2, [r7, #13]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c780:	7b7a      	ldrb	r2, [r7, #13]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	32ae      	adds	r2, #174	@ 0xae
 800c786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c78a:	689b      	ldr	r3, [r3, #8]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d010      	beq.n	800c7b2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c790:	7b7a      	ldrb	r2, [r7, #13]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	32ae      	adds	r2, #174	@ 0xae
 800c796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c79a:	689b      	ldr	r3, [r3, #8]
 800c79c:	6839      	ldr	r1, [r7, #0]
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	4798      	blx	r3
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c7a6:	e004      	b.n	800c7b2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c7a8:	6839      	ldr	r1, [r7, #0]
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 fc2d 	bl	800d00a <USBD_CtlError>
              break;
 800c7b0:	e000      	b.n	800c7b4 <USBD_StdEPReq+0x1c8>
              break;
 800c7b2:	bf00      	nop
          }
          break;
 800c7b4:	e0ab      	b.n	800c90e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7bc:	b2db      	uxtb	r3, r3
 800c7be:	2b02      	cmp	r3, #2
 800c7c0:	d002      	beq.n	800c7c8 <USBD_StdEPReq+0x1dc>
 800c7c2:	2b03      	cmp	r3, #3
 800c7c4:	d032      	beq.n	800c82c <USBD_StdEPReq+0x240>
 800c7c6:	e097      	b.n	800c8f8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c7c8:	7bbb      	ldrb	r3, [r7, #14]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d007      	beq.n	800c7de <USBD_StdEPReq+0x1f2>
 800c7ce:	7bbb      	ldrb	r3, [r7, #14]
 800c7d0:	2b80      	cmp	r3, #128	@ 0x80
 800c7d2:	d004      	beq.n	800c7de <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c7d4:	6839      	ldr	r1, [r7, #0]
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f000 fc17 	bl	800d00a <USBD_CtlError>
                break;
 800c7dc:	e091      	b.n	800c902 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c7de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	da0b      	bge.n	800c7fe <USBD_StdEPReq+0x212>
 800c7e6:	7bbb      	ldrb	r3, [r7, #14]
 800c7e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c7ec:	4613      	mov	r3, r2
 800c7ee:	009b      	lsls	r3, r3, #2
 800c7f0:	4413      	add	r3, r2
 800c7f2:	009b      	lsls	r3, r3, #2
 800c7f4:	3310      	adds	r3, #16
 800c7f6:	687a      	ldr	r2, [r7, #4]
 800c7f8:	4413      	add	r3, r2
 800c7fa:	3304      	adds	r3, #4
 800c7fc:	e00b      	b.n	800c816 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c7fe:	7bbb      	ldrb	r3, [r7, #14]
 800c800:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c804:	4613      	mov	r3, r2
 800c806:	009b      	lsls	r3, r3, #2
 800c808:	4413      	add	r3, r2
 800c80a:	009b      	lsls	r3, r3, #2
 800c80c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c810:	687a      	ldr	r2, [r7, #4]
 800c812:	4413      	add	r3, r2
 800c814:	3304      	adds	r3, #4
 800c816:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	2200      	movs	r2, #0
 800c81c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	2202      	movs	r2, #2
 800c822:	4619      	mov	r1, r3
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f000 fc6d 	bl	800d104 <USBD_CtlSendData>
              break;
 800c82a:	e06a      	b.n	800c902 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c82c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c830:	2b00      	cmp	r3, #0
 800c832:	da11      	bge.n	800c858 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c834:	7bbb      	ldrb	r3, [r7, #14]
 800c836:	f003 020f 	and.w	r2, r3, #15
 800c83a:	6879      	ldr	r1, [r7, #4]
 800c83c:	4613      	mov	r3, r2
 800c83e:	009b      	lsls	r3, r3, #2
 800c840:	4413      	add	r3, r2
 800c842:	009b      	lsls	r3, r3, #2
 800c844:	440b      	add	r3, r1
 800c846:	3324      	adds	r3, #36	@ 0x24
 800c848:	881b      	ldrh	r3, [r3, #0]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d117      	bne.n	800c87e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c84e:	6839      	ldr	r1, [r7, #0]
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f000 fbda 	bl	800d00a <USBD_CtlError>
                  break;
 800c856:	e054      	b.n	800c902 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c858:	7bbb      	ldrb	r3, [r7, #14]
 800c85a:	f003 020f 	and.w	r2, r3, #15
 800c85e:	6879      	ldr	r1, [r7, #4]
 800c860:	4613      	mov	r3, r2
 800c862:	009b      	lsls	r3, r3, #2
 800c864:	4413      	add	r3, r2
 800c866:	009b      	lsls	r3, r3, #2
 800c868:	440b      	add	r3, r1
 800c86a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c86e:	881b      	ldrh	r3, [r3, #0]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d104      	bne.n	800c87e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c874:	6839      	ldr	r1, [r7, #0]
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f000 fbc7 	bl	800d00a <USBD_CtlError>
                  break;
 800c87c:	e041      	b.n	800c902 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c87e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c882:	2b00      	cmp	r3, #0
 800c884:	da0b      	bge.n	800c89e <USBD_StdEPReq+0x2b2>
 800c886:	7bbb      	ldrb	r3, [r7, #14]
 800c888:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c88c:	4613      	mov	r3, r2
 800c88e:	009b      	lsls	r3, r3, #2
 800c890:	4413      	add	r3, r2
 800c892:	009b      	lsls	r3, r3, #2
 800c894:	3310      	adds	r3, #16
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	4413      	add	r3, r2
 800c89a:	3304      	adds	r3, #4
 800c89c:	e00b      	b.n	800c8b6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c89e:	7bbb      	ldrb	r3, [r7, #14]
 800c8a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c8a4:	4613      	mov	r3, r2
 800c8a6:	009b      	lsls	r3, r3, #2
 800c8a8:	4413      	add	r3, r2
 800c8aa:	009b      	lsls	r3, r3, #2
 800c8ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c8b0:	687a      	ldr	r2, [r7, #4]
 800c8b2:	4413      	add	r3, r2
 800c8b4:	3304      	adds	r3, #4
 800c8b6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c8b8:	7bbb      	ldrb	r3, [r7, #14]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d002      	beq.n	800c8c4 <USBD_StdEPReq+0x2d8>
 800c8be:	7bbb      	ldrb	r3, [r7, #14]
 800c8c0:	2b80      	cmp	r3, #128	@ 0x80
 800c8c2:	d103      	bne.n	800c8cc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	601a      	str	r2, [r3, #0]
 800c8ca:	e00e      	b.n	800c8ea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c8cc:	7bbb      	ldrb	r3, [r7, #14]
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f001 f95d 	bl	800db90 <USBD_LL_IsStallEP>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d003      	beq.n	800c8e4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	2201      	movs	r2, #1
 800c8e0:	601a      	str	r2, [r3, #0]
 800c8e2:	e002      	b.n	800c8ea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	2202      	movs	r2, #2
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f000 fc07 	bl	800d104 <USBD_CtlSendData>
              break;
 800c8f6:	e004      	b.n	800c902 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c8f8:	6839      	ldr	r1, [r7, #0]
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f000 fb85 	bl	800d00a <USBD_CtlError>
              break;
 800c900:	bf00      	nop
          }
          break;
 800c902:	e004      	b.n	800c90e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c904:	6839      	ldr	r1, [r7, #0]
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f000 fb7f 	bl	800d00a <USBD_CtlError>
          break;
 800c90c:	bf00      	nop
      }
      break;
 800c90e:	e005      	b.n	800c91c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c910:	6839      	ldr	r1, [r7, #0]
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 fb79 	bl	800d00a <USBD_CtlError>
      break;
 800c918:	e000      	b.n	800c91c <USBD_StdEPReq+0x330>
      break;
 800c91a:	bf00      	nop
  }

  return ret;
 800c91c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3710      	adds	r7, #16
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
	...

0800c928 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c932:	2300      	movs	r3, #0
 800c934:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c936:	2300      	movs	r3, #0
 800c938:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c93a:	2300      	movs	r3, #0
 800c93c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	885b      	ldrh	r3, [r3, #2]
 800c942:	0a1b      	lsrs	r3, r3, #8
 800c944:	b29b      	uxth	r3, r3
 800c946:	3b01      	subs	r3, #1
 800c948:	2b0e      	cmp	r3, #14
 800c94a:	f200 8152 	bhi.w	800cbf2 <USBD_GetDescriptor+0x2ca>
 800c94e:	a201      	add	r2, pc, #4	@ (adr r2, 800c954 <USBD_GetDescriptor+0x2c>)
 800c950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c954:	0800c9c5 	.word	0x0800c9c5
 800c958:	0800c9dd 	.word	0x0800c9dd
 800c95c:	0800ca1d 	.word	0x0800ca1d
 800c960:	0800cbf3 	.word	0x0800cbf3
 800c964:	0800cbf3 	.word	0x0800cbf3
 800c968:	0800cb93 	.word	0x0800cb93
 800c96c:	0800cbbf 	.word	0x0800cbbf
 800c970:	0800cbf3 	.word	0x0800cbf3
 800c974:	0800cbf3 	.word	0x0800cbf3
 800c978:	0800cbf3 	.word	0x0800cbf3
 800c97c:	0800cbf3 	.word	0x0800cbf3
 800c980:	0800cbf3 	.word	0x0800cbf3
 800c984:	0800cbf3 	.word	0x0800cbf3
 800c988:	0800cbf3 	.word	0x0800cbf3
 800c98c:	0800c991 	.word	0x0800c991
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c996:	69db      	ldr	r3, [r3, #28]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d00b      	beq.n	800c9b4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9a2:	69db      	ldr	r3, [r3, #28]
 800c9a4:	687a      	ldr	r2, [r7, #4]
 800c9a6:	7c12      	ldrb	r2, [r2, #16]
 800c9a8:	f107 0108 	add.w	r1, r7, #8
 800c9ac:	4610      	mov	r0, r2
 800c9ae:	4798      	blx	r3
 800c9b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c9b2:	e126      	b.n	800cc02 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c9b4:	6839      	ldr	r1, [r7, #0]
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f000 fb27 	bl	800d00a <USBD_CtlError>
        err++;
 800c9bc:	7afb      	ldrb	r3, [r7, #11]
 800c9be:	3301      	adds	r3, #1
 800c9c0:	72fb      	strb	r3, [r7, #11]
      break;
 800c9c2:	e11e      	b.n	800cc02 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	687a      	ldr	r2, [r7, #4]
 800c9ce:	7c12      	ldrb	r2, [r2, #16]
 800c9d0:	f107 0108 	add.w	r1, r7, #8
 800c9d4:	4610      	mov	r0, r2
 800c9d6:	4798      	blx	r3
 800c9d8:	60f8      	str	r0, [r7, #12]
      break;
 800c9da:	e112      	b.n	800cc02 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	7c1b      	ldrb	r3, [r3, #16]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d10d      	bne.n	800ca00 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9ec:	f107 0208 	add.w	r2, r7, #8
 800c9f0:	4610      	mov	r0, r2
 800c9f2:	4798      	blx	r3
 800c9f4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	2202      	movs	r2, #2
 800c9fc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c9fe:	e100      	b.n	800cc02 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca08:	f107 0208 	add.w	r2, r7, #8
 800ca0c:	4610      	mov	r0, r2
 800ca0e:	4798      	blx	r3
 800ca10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	3301      	adds	r3, #1
 800ca16:	2202      	movs	r2, #2
 800ca18:	701a      	strb	r2, [r3, #0]
      break;
 800ca1a:	e0f2      	b.n	800cc02 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	885b      	ldrh	r3, [r3, #2]
 800ca20:	b2db      	uxtb	r3, r3
 800ca22:	2b05      	cmp	r3, #5
 800ca24:	f200 80ac 	bhi.w	800cb80 <USBD_GetDescriptor+0x258>
 800ca28:	a201      	add	r2, pc, #4	@ (adr r2, 800ca30 <USBD_GetDescriptor+0x108>)
 800ca2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca2e:	bf00      	nop
 800ca30:	0800ca49 	.word	0x0800ca49
 800ca34:	0800ca7d 	.word	0x0800ca7d
 800ca38:	0800cab1 	.word	0x0800cab1
 800ca3c:	0800cae5 	.word	0x0800cae5
 800ca40:	0800cb19 	.word	0x0800cb19
 800ca44:	0800cb4d 	.word	0x0800cb4d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d00b      	beq.n	800ca6c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca5a:	685b      	ldr	r3, [r3, #4]
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	7c12      	ldrb	r2, [r2, #16]
 800ca60:	f107 0108 	add.w	r1, r7, #8
 800ca64:	4610      	mov	r0, r2
 800ca66:	4798      	blx	r3
 800ca68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca6a:	e091      	b.n	800cb90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ca6c:	6839      	ldr	r1, [r7, #0]
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f000 facb 	bl	800d00a <USBD_CtlError>
            err++;
 800ca74:	7afb      	ldrb	r3, [r7, #11]
 800ca76:	3301      	adds	r3, #1
 800ca78:	72fb      	strb	r3, [r7, #11]
          break;
 800ca7a:	e089      	b.n	800cb90 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca82:	689b      	ldr	r3, [r3, #8]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d00b      	beq.n	800caa0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca8e:	689b      	ldr	r3, [r3, #8]
 800ca90:	687a      	ldr	r2, [r7, #4]
 800ca92:	7c12      	ldrb	r2, [r2, #16]
 800ca94:	f107 0108 	add.w	r1, r7, #8
 800ca98:	4610      	mov	r0, r2
 800ca9a:	4798      	blx	r3
 800ca9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca9e:	e077      	b.n	800cb90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800caa0:	6839      	ldr	r1, [r7, #0]
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f000 fab1 	bl	800d00a <USBD_CtlError>
            err++;
 800caa8:	7afb      	ldrb	r3, [r7, #11]
 800caaa:	3301      	adds	r3, #1
 800caac:	72fb      	strb	r3, [r7, #11]
          break;
 800caae:	e06f      	b.n	800cb90 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cab6:	68db      	ldr	r3, [r3, #12]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d00b      	beq.n	800cad4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cac2:	68db      	ldr	r3, [r3, #12]
 800cac4:	687a      	ldr	r2, [r7, #4]
 800cac6:	7c12      	ldrb	r2, [r2, #16]
 800cac8:	f107 0108 	add.w	r1, r7, #8
 800cacc:	4610      	mov	r0, r2
 800cace:	4798      	blx	r3
 800cad0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cad2:	e05d      	b.n	800cb90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cad4:	6839      	ldr	r1, [r7, #0]
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f000 fa97 	bl	800d00a <USBD_CtlError>
            err++;
 800cadc:	7afb      	ldrb	r3, [r7, #11]
 800cade:	3301      	adds	r3, #1
 800cae0:	72fb      	strb	r3, [r7, #11]
          break;
 800cae2:	e055      	b.n	800cb90 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800caea:	691b      	ldr	r3, [r3, #16]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d00b      	beq.n	800cb08 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800caf6:	691b      	ldr	r3, [r3, #16]
 800caf8:	687a      	ldr	r2, [r7, #4]
 800cafa:	7c12      	ldrb	r2, [r2, #16]
 800cafc:	f107 0108 	add.w	r1, r7, #8
 800cb00:	4610      	mov	r0, r2
 800cb02:	4798      	blx	r3
 800cb04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb06:	e043      	b.n	800cb90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cb08:	6839      	ldr	r1, [r7, #0]
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f000 fa7d 	bl	800d00a <USBD_CtlError>
            err++;
 800cb10:	7afb      	ldrb	r3, [r7, #11]
 800cb12:	3301      	adds	r3, #1
 800cb14:	72fb      	strb	r3, [r7, #11]
          break;
 800cb16:	e03b      	b.n	800cb90 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb1e:	695b      	ldr	r3, [r3, #20]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d00b      	beq.n	800cb3c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb2a:	695b      	ldr	r3, [r3, #20]
 800cb2c:	687a      	ldr	r2, [r7, #4]
 800cb2e:	7c12      	ldrb	r2, [r2, #16]
 800cb30:	f107 0108 	add.w	r1, r7, #8
 800cb34:	4610      	mov	r0, r2
 800cb36:	4798      	blx	r3
 800cb38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb3a:	e029      	b.n	800cb90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cb3c:	6839      	ldr	r1, [r7, #0]
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f000 fa63 	bl	800d00a <USBD_CtlError>
            err++;
 800cb44:	7afb      	ldrb	r3, [r7, #11]
 800cb46:	3301      	adds	r3, #1
 800cb48:	72fb      	strb	r3, [r7, #11]
          break;
 800cb4a:	e021      	b.n	800cb90 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb52:	699b      	ldr	r3, [r3, #24]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d00b      	beq.n	800cb70 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb5e:	699b      	ldr	r3, [r3, #24]
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	7c12      	ldrb	r2, [r2, #16]
 800cb64:	f107 0108 	add.w	r1, r7, #8
 800cb68:	4610      	mov	r0, r2
 800cb6a:	4798      	blx	r3
 800cb6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb6e:	e00f      	b.n	800cb90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cb70:	6839      	ldr	r1, [r7, #0]
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f000 fa49 	bl	800d00a <USBD_CtlError>
            err++;
 800cb78:	7afb      	ldrb	r3, [r7, #11]
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	72fb      	strb	r3, [r7, #11]
          break;
 800cb7e:	e007      	b.n	800cb90 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cb80:	6839      	ldr	r1, [r7, #0]
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f000 fa41 	bl	800d00a <USBD_CtlError>
          err++;
 800cb88:	7afb      	ldrb	r3, [r7, #11]
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800cb8e:	bf00      	nop
      }
      break;
 800cb90:	e037      	b.n	800cc02 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	7c1b      	ldrb	r3, [r3, #16]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d109      	bne.n	800cbae <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cba2:	f107 0208 	add.w	r2, r7, #8
 800cba6:	4610      	mov	r0, r2
 800cba8:	4798      	blx	r3
 800cbaa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cbac:	e029      	b.n	800cc02 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cbae:	6839      	ldr	r1, [r7, #0]
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f000 fa2a 	bl	800d00a <USBD_CtlError>
        err++;
 800cbb6:	7afb      	ldrb	r3, [r7, #11]
 800cbb8:	3301      	adds	r3, #1
 800cbba:	72fb      	strb	r3, [r7, #11]
      break;
 800cbbc:	e021      	b.n	800cc02 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	7c1b      	ldrb	r3, [r3, #16]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d10d      	bne.n	800cbe2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbce:	f107 0208 	add.w	r2, r7, #8
 800cbd2:	4610      	mov	r0, r2
 800cbd4:	4798      	blx	r3
 800cbd6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	3301      	adds	r3, #1
 800cbdc:	2207      	movs	r2, #7
 800cbde:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cbe0:	e00f      	b.n	800cc02 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cbe2:	6839      	ldr	r1, [r7, #0]
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f000 fa10 	bl	800d00a <USBD_CtlError>
        err++;
 800cbea:	7afb      	ldrb	r3, [r7, #11]
 800cbec:	3301      	adds	r3, #1
 800cbee:	72fb      	strb	r3, [r7, #11]
      break;
 800cbf0:	e007      	b.n	800cc02 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800cbf2:	6839      	ldr	r1, [r7, #0]
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f000 fa08 	bl	800d00a <USBD_CtlError>
      err++;
 800cbfa:	7afb      	ldrb	r3, [r7, #11]
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	72fb      	strb	r3, [r7, #11]
      break;
 800cc00:	bf00      	nop
  }

  if (err != 0U)
 800cc02:	7afb      	ldrb	r3, [r7, #11]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d11e      	bne.n	800cc46 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	88db      	ldrh	r3, [r3, #6]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d016      	beq.n	800cc3e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800cc10:	893b      	ldrh	r3, [r7, #8]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d00e      	beq.n	800cc34 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	88da      	ldrh	r2, [r3, #6]
 800cc1a:	893b      	ldrh	r3, [r7, #8]
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	bf28      	it	cs
 800cc20:	4613      	movcs	r3, r2
 800cc22:	b29b      	uxth	r3, r3
 800cc24:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cc26:	893b      	ldrh	r3, [r7, #8]
 800cc28:	461a      	mov	r2, r3
 800cc2a:	68f9      	ldr	r1, [r7, #12]
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f000 fa69 	bl	800d104 <USBD_CtlSendData>
 800cc32:	e009      	b.n	800cc48 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cc34:	6839      	ldr	r1, [r7, #0]
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f000 f9e7 	bl	800d00a <USBD_CtlError>
 800cc3c:	e004      	b.n	800cc48 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f000 faba 	bl	800d1b8 <USBD_CtlSendStatus>
 800cc44:	e000      	b.n	800cc48 <USBD_GetDescriptor+0x320>
    return;
 800cc46:	bf00      	nop
  }
}
 800cc48:	3710      	adds	r7, #16
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
 800cc4e:	bf00      	nop

0800cc50 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b084      	sub	sp, #16
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	889b      	ldrh	r3, [r3, #4]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d131      	bne.n	800ccc6 <USBD_SetAddress+0x76>
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	88db      	ldrh	r3, [r3, #6]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d12d      	bne.n	800ccc6 <USBD_SetAddress+0x76>
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	885b      	ldrh	r3, [r3, #2]
 800cc6e:	2b7f      	cmp	r3, #127	@ 0x7f
 800cc70:	d829      	bhi.n	800ccc6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	885b      	ldrh	r3, [r3, #2]
 800cc76:	b2db      	uxtb	r3, r3
 800cc78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc7c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc84:	b2db      	uxtb	r3, r3
 800cc86:	2b03      	cmp	r3, #3
 800cc88:	d104      	bne.n	800cc94 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cc8a:	6839      	ldr	r1, [r7, #0]
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f000 f9bc 	bl	800d00a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc92:	e01d      	b.n	800ccd0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	7bfa      	ldrb	r2, [r7, #15]
 800cc98:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cc9c:	7bfb      	ldrb	r3, [r7, #15]
 800cc9e:	4619      	mov	r1, r3
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f000 ffa1 	bl	800dbe8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f000 fa86 	bl	800d1b8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ccac:	7bfb      	ldrb	r3, [r7, #15]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d004      	beq.n	800ccbc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2202      	movs	r2, #2
 800ccb6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccba:	e009      	b.n	800ccd0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2201      	movs	r2, #1
 800ccc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccc4:	e004      	b.n	800ccd0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ccc6:	6839      	ldr	r1, [r7, #0]
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f000 f99e 	bl	800d00a <USBD_CtlError>
  }
}
 800ccce:	bf00      	nop
 800ccd0:	bf00      	nop
 800ccd2:	3710      	adds	r7, #16
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}

0800ccd8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b084      	sub	sp, #16
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cce2:	2300      	movs	r3, #0
 800cce4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	885b      	ldrh	r3, [r3, #2]
 800ccea:	b2da      	uxtb	r2, r3
 800ccec:	4b4e      	ldr	r3, [pc, #312]	@ (800ce28 <USBD_SetConfig+0x150>)
 800ccee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ccf0:	4b4d      	ldr	r3, [pc, #308]	@ (800ce28 <USBD_SetConfig+0x150>)
 800ccf2:	781b      	ldrb	r3, [r3, #0]
 800ccf4:	2b01      	cmp	r3, #1
 800ccf6:	d905      	bls.n	800cd04 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ccf8:	6839      	ldr	r1, [r7, #0]
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f000 f985 	bl	800d00a <USBD_CtlError>
    return USBD_FAIL;
 800cd00:	2303      	movs	r3, #3
 800cd02:	e08c      	b.n	800ce1e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd0a:	b2db      	uxtb	r3, r3
 800cd0c:	2b02      	cmp	r3, #2
 800cd0e:	d002      	beq.n	800cd16 <USBD_SetConfig+0x3e>
 800cd10:	2b03      	cmp	r3, #3
 800cd12:	d029      	beq.n	800cd68 <USBD_SetConfig+0x90>
 800cd14:	e075      	b.n	800ce02 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cd16:	4b44      	ldr	r3, [pc, #272]	@ (800ce28 <USBD_SetConfig+0x150>)
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d020      	beq.n	800cd60 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cd1e:	4b42      	ldr	r3, [pc, #264]	@ (800ce28 <USBD_SetConfig+0x150>)
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	461a      	mov	r2, r3
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cd28:	4b3f      	ldr	r3, [pc, #252]	@ (800ce28 <USBD_SetConfig+0x150>)
 800cd2a:	781b      	ldrb	r3, [r3, #0]
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f7fe ffb9 	bl	800bca6 <USBD_SetClassConfig>
 800cd34:	4603      	mov	r3, r0
 800cd36:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cd38:	7bfb      	ldrb	r3, [r7, #15]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d008      	beq.n	800cd50 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cd3e:	6839      	ldr	r1, [r7, #0]
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f000 f962 	bl	800d00a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2202      	movs	r2, #2
 800cd4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cd4e:	e065      	b.n	800ce1c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f000 fa31 	bl	800d1b8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2203      	movs	r2, #3
 800cd5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cd5e:	e05d      	b.n	800ce1c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f000 fa29 	bl	800d1b8 <USBD_CtlSendStatus>
      break;
 800cd66:	e059      	b.n	800ce1c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cd68:	4b2f      	ldr	r3, [pc, #188]	@ (800ce28 <USBD_SetConfig+0x150>)
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d112      	bne.n	800cd96 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2202      	movs	r2, #2
 800cd74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800cd78:	4b2b      	ldr	r3, [pc, #172]	@ (800ce28 <USBD_SetConfig+0x150>)
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	461a      	mov	r2, r3
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cd82:	4b29      	ldr	r3, [pc, #164]	@ (800ce28 <USBD_SetConfig+0x150>)
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	4619      	mov	r1, r3
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f7fe ffa8 	bl	800bcde <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f000 fa12 	bl	800d1b8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cd94:	e042      	b.n	800ce1c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cd96:	4b24      	ldr	r3, [pc, #144]	@ (800ce28 <USBD_SetConfig+0x150>)
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	461a      	mov	r2, r3
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d02a      	beq.n	800cdfa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	685b      	ldr	r3, [r3, #4]
 800cda8:	b2db      	uxtb	r3, r3
 800cdaa:	4619      	mov	r1, r3
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f7fe ff96 	bl	800bcde <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cdb2:	4b1d      	ldr	r3, [pc, #116]	@ (800ce28 <USBD_SetConfig+0x150>)
 800cdb4:	781b      	ldrb	r3, [r3, #0]
 800cdb6:	461a      	mov	r2, r3
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cdbc:	4b1a      	ldr	r3, [pc, #104]	@ (800ce28 <USBD_SetConfig+0x150>)
 800cdbe:	781b      	ldrb	r3, [r3, #0]
 800cdc0:	4619      	mov	r1, r3
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f7fe ff6f 	bl	800bca6 <USBD_SetClassConfig>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cdcc:	7bfb      	ldrb	r3, [r7, #15]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d00f      	beq.n	800cdf2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cdd2:	6839      	ldr	r1, [r7, #0]
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f000 f918 	bl	800d00a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	b2db      	uxtb	r3, r3
 800cde0:	4619      	mov	r1, r3
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f7fe ff7b 	bl	800bcde <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2202      	movs	r2, #2
 800cdec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cdf0:	e014      	b.n	800ce1c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f000 f9e0 	bl	800d1b8 <USBD_CtlSendStatus>
      break;
 800cdf8:	e010      	b.n	800ce1c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 f9dc 	bl	800d1b8 <USBD_CtlSendStatus>
      break;
 800ce00:	e00c      	b.n	800ce1c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ce02:	6839      	ldr	r1, [r7, #0]
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f000 f900 	bl	800d00a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ce0a:	4b07      	ldr	r3, [pc, #28]	@ (800ce28 <USBD_SetConfig+0x150>)
 800ce0c:	781b      	ldrb	r3, [r3, #0]
 800ce0e:	4619      	mov	r1, r3
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f7fe ff64 	bl	800bcde <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ce16:	2303      	movs	r3, #3
 800ce18:	73fb      	strb	r3, [r7, #15]
      break;
 800ce1a:	bf00      	nop
  }

  return ret;
 800ce1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3710      	adds	r7, #16
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop
 800ce28:	20000a00 	.word	0x20000a00

0800ce2c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b082      	sub	sp, #8
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	88db      	ldrh	r3, [r3, #6]
 800ce3a:	2b01      	cmp	r3, #1
 800ce3c:	d004      	beq.n	800ce48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ce3e:	6839      	ldr	r1, [r7, #0]
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f000 f8e2 	bl	800d00a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ce46:	e023      	b.n	800ce90 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce4e:	b2db      	uxtb	r3, r3
 800ce50:	2b02      	cmp	r3, #2
 800ce52:	dc02      	bgt.n	800ce5a <USBD_GetConfig+0x2e>
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	dc03      	bgt.n	800ce60 <USBD_GetConfig+0x34>
 800ce58:	e015      	b.n	800ce86 <USBD_GetConfig+0x5a>
 800ce5a:	2b03      	cmp	r3, #3
 800ce5c:	d00b      	beq.n	800ce76 <USBD_GetConfig+0x4a>
 800ce5e:	e012      	b.n	800ce86 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2200      	movs	r2, #0
 800ce64:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	3308      	adds	r3, #8
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	4619      	mov	r1, r3
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f000 f948 	bl	800d104 <USBD_CtlSendData>
        break;
 800ce74:	e00c      	b.n	800ce90 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	3304      	adds	r3, #4
 800ce7a:	2201      	movs	r2, #1
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f000 f940 	bl	800d104 <USBD_CtlSendData>
        break;
 800ce84:	e004      	b.n	800ce90 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ce86:	6839      	ldr	r1, [r7, #0]
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f000 f8be 	bl	800d00a <USBD_CtlError>
        break;
 800ce8e:	bf00      	nop
}
 800ce90:	bf00      	nop
 800ce92:	3708      	adds	r7, #8
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}

0800ce98 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b082      	sub	sp, #8
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cea8:	b2db      	uxtb	r3, r3
 800ceaa:	3b01      	subs	r3, #1
 800ceac:	2b02      	cmp	r3, #2
 800ceae:	d81e      	bhi.n	800ceee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	88db      	ldrh	r3, [r3, #6]
 800ceb4:	2b02      	cmp	r3, #2
 800ceb6:	d004      	beq.n	800cec2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ceb8:	6839      	ldr	r1, [r7, #0]
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f000 f8a5 	bl	800d00a <USBD_CtlError>
        break;
 800cec0:	e01a      	b.n	800cef8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2201      	movs	r2, #1
 800cec6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d005      	beq.n	800cede <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	68db      	ldr	r3, [r3, #12]
 800ced6:	f043 0202 	orr.w	r2, r3, #2
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	330c      	adds	r3, #12
 800cee2:	2202      	movs	r2, #2
 800cee4:	4619      	mov	r1, r3
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f000 f90c 	bl	800d104 <USBD_CtlSendData>
      break;
 800ceec:	e004      	b.n	800cef8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ceee:	6839      	ldr	r1, [r7, #0]
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f000 f88a 	bl	800d00a <USBD_CtlError>
      break;
 800cef6:	bf00      	nop
  }
}
 800cef8:	bf00      	nop
 800cefa:	3708      	adds	r7, #8
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}

0800cf00 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b082      	sub	sp, #8
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	885b      	ldrh	r3, [r3, #2]
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	d107      	bne.n	800cf22 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2201      	movs	r2, #1
 800cf16:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f000 f94c 	bl	800d1b8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cf20:	e013      	b.n	800cf4a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	885b      	ldrh	r3, [r3, #2]
 800cf26:	2b02      	cmp	r3, #2
 800cf28:	d10b      	bne.n	800cf42 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	889b      	ldrh	r3, [r3, #4]
 800cf2e:	0a1b      	lsrs	r3, r3, #8
 800cf30:	b29b      	uxth	r3, r3
 800cf32:	b2da      	uxtb	r2, r3
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f000 f93c 	bl	800d1b8 <USBD_CtlSendStatus>
}
 800cf40:	e003      	b.n	800cf4a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cf42:	6839      	ldr	r1, [r7, #0]
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f000 f860 	bl	800d00a <USBD_CtlError>
}
 800cf4a:	bf00      	nop
 800cf4c:	3708      	adds	r7, #8
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}

0800cf52 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf52:	b580      	push	{r7, lr}
 800cf54:	b082      	sub	sp, #8
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	6078      	str	r0, [r7, #4]
 800cf5a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf62:	b2db      	uxtb	r3, r3
 800cf64:	3b01      	subs	r3, #1
 800cf66:	2b02      	cmp	r3, #2
 800cf68:	d80b      	bhi.n	800cf82 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	885b      	ldrh	r3, [r3, #2]
 800cf6e:	2b01      	cmp	r3, #1
 800cf70:	d10c      	bne.n	800cf8c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2200      	movs	r2, #0
 800cf76:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f000 f91c 	bl	800d1b8 <USBD_CtlSendStatus>
      }
      break;
 800cf80:	e004      	b.n	800cf8c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cf82:	6839      	ldr	r1, [r7, #0]
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f000 f840 	bl	800d00a <USBD_CtlError>
      break;
 800cf8a:	e000      	b.n	800cf8e <USBD_ClrFeature+0x3c>
      break;
 800cf8c:	bf00      	nop
  }
}
 800cf8e:	bf00      	nop
 800cf90:	3708      	adds	r7, #8
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}

0800cf96 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cf96:	b580      	push	{r7, lr}
 800cf98:	b084      	sub	sp, #16
 800cf9a:	af00      	add	r7, sp, #0
 800cf9c:	6078      	str	r0, [r7, #4]
 800cf9e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	781a      	ldrb	r2, [r3, #0]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	3301      	adds	r3, #1
 800cfb0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	781a      	ldrb	r2, [r3, #0]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	3301      	adds	r3, #1
 800cfbe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cfc0:	68f8      	ldr	r0, [r7, #12]
 800cfc2:	f7ff fa16 	bl	800c3f2 <SWAPBYTE>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	461a      	mov	r2, r3
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	3301      	adds	r3, #1
 800cfd8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cfda:	68f8      	ldr	r0, [r7, #12]
 800cfdc:	f7ff fa09 	bl	800c3f2 <SWAPBYTE>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	3301      	adds	r3, #1
 800cfec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	3301      	adds	r3, #1
 800cff2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cff4:	68f8      	ldr	r0, [r7, #12]
 800cff6:	f7ff f9fc 	bl	800c3f2 <SWAPBYTE>
 800cffa:	4603      	mov	r3, r0
 800cffc:	461a      	mov	r2, r3
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	80da      	strh	r2, [r3, #6]
}
 800d002:	bf00      	nop
 800d004:	3710      	adds	r7, #16
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}

0800d00a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d00a:	b580      	push	{r7, lr}
 800d00c:	b082      	sub	sp, #8
 800d00e:	af00      	add	r7, sp, #0
 800d010:	6078      	str	r0, [r7, #4]
 800d012:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d014:	2180      	movs	r1, #128	@ 0x80
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f000 fd7c 	bl	800db14 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d01c:	2100      	movs	r1, #0
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f000 fd78 	bl	800db14 <USBD_LL_StallEP>
}
 800d024:	bf00      	nop
 800d026:	3708      	adds	r7, #8
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}

0800d02c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b086      	sub	sp, #24
 800d030:	af00      	add	r7, sp, #0
 800d032:	60f8      	str	r0, [r7, #12]
 800d034:	60b9      	str	r1, [r7, #8]
 800d036:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d038:	2300      	movs	r3, #0
 800d03a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d042      	beq.n	800d0c8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d046:	6938      	ldr	r0, [r7, #16]
 800d048:	f000 f842 	bl	800d0d0 <USBD_GetLen>
 800d04c:	4603      	mov	r3, r0
 800d04e:	3301      	adds	r3, #1
 800d050:	005b      	lsls	r3, r3, #1
 800d052:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d056:	d808      	bhi.n	800d06a <USBD_GetString+0x3e>
 800d058:	6938      	ldr	r0, [r7, #16]
 800d05a:	f000 f839 	bl	800d0d0 <USBD_GetLen>
 800d05e:	4603      	mov	r3, r0
 800d060:	3301      	adds	r3, #1
 800d062:	b29b      	uxth	r3, r3
 800d064:	005b      	lsls	r3, r3, #1
 800d066:	b29a      	uxth	r2, r3
 800d068:	e001      	b.n	800d06e <USBD_GetString+0x42>
 800d06a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d072:	7dfb      	ldrb	r3, [r7, #23]
 800d074:	68ba      	ldr	r2, [r7, #8]
 800d076:	4413      	add	r3, r2
 800d078:	687a      	ldr	r2, [r7, #4]
 800d07a:	7812      	ldrb	r2, [r2, #0]
 800d07c:	701a      	strb	r2, [r3, #0]
  idx++;
 800d07e:	7dfb      	ldrb	r3, [r7, #23]
 800d080:	3301      	adds	r3, #1
 800d082:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d084:	7dfb      	ldrb	r3, [r7, #23]
 800d086:	68ba      	ldr	r2, [r7, #8]
 800d088:	4413      	add	r3, r2
 800d08a:	2203      	movs	r2, #3
 800d08c:	701a      	strb	r2, [r3, #0]
  idx++;
 800d08e:	7dfb      	ldrb	r3, [r7, #23]
 800d090:	3301      	adds	r3, #1
 800d092:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d094:	e013      	b.n	800d0be <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d096:	7dfb      	ldrb	r3, [r7, #23]
 800d098:	68ba      	ldr	r2, [r7, #8]
 800d09a:	4413      	add	r3, r2
 800d09c:	693a      	ldr	r2, [r7, #16]
 800d09e:	7812      	ldrb	r2, [r2, #0]
 800d0a0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	3301      	adds	r3, #1
 800d0a6:	613b      	str	r3, [r7, #16]
    idx++;
 800d0a8:	7dfb      	ldrb	r3, [r7, #23]
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d0ae:	7dfb      	ldrb	r3, [r7, #23]
 800d0b0:	68ba      	ldr	r2, [r7, #8]
 800d0b2:	4413      	add	r3, r2
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	701a      	strb	r2, [r3, #0]
    idx++;
 800d0b8:	7dfb      	ldrb	r3, [r7, #23]
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	781b      	ldrb	r3, [r3, #0]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d1e7      	bne.n	800d096 <USBD_GetString+0x6a>
 800d0c6:	e000      	b.n	800d0ca <USBD_GetString+0x9e>
    return;
 800d0c8:	bf00      	nop
  }
}
 800d0ca:	3718      	adds	r7, #24
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}

0800d0d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b085      	sub	sp, #20
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d0e0:	e005      	b.n	800d0ee <USBD_GetLen+0x1e>
  {
    len++;
 800d0e2:	7bfb      	ldrb	r3, [r7, #15]
 800d0e4:	3301      	adds	r3, #1
 800d0e6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	3301      	adds	r3, #1
 800d0ec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	781b      	ldrb	r3, [r3, #0]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d1f5      	bne.n	800d0e2 <USBD_GetLen+0x12>
  }

  return len;
 800d0f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3714      	adds	r7, #20
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d102:	4770      	bx	lr

0800d104 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b084      	sub	sp, #16
 800d108:	af00      	add	r7, sp, #0
 800d10a:	60f8      	str	r0, [r7, #12]
 800d10c:	60b9      	str	r1, [r7, #8]
 800d10e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	2202      	movs	r2, #2
 800d114:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	687a      	ldr	r2, [r7, #4]
 800d122:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	68ba      	ldr	r2, [r7, #8]
 800d128:	2100      	movs	r1, #0
 800d12a:	68f8      	ldr	r0, [r7, #12]
 800d12c:	f000 fd7b 	bl	800dc26 <USBD_LL_Transmit>

  return USBD_OK;
 800d130:	2300      	movs	r3, #0
}
 800d132:	4618      	mov	r0, r3
 800d134:	3710      	adds	r7, #16
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}

0800d13a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d13a:	b580      	push	{r7, lr}
 800d13c:	b084      	sub	sp, #16
 800d13e:	af00      	add	r7, sp, #0
 800d140:	60f8      	str	r0, [r7, #12]
 800d142:	60b9      	str	r1, [r7, #8]
 800d144:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	68ba      	ldr	r2, [r7, #8]
 800d14a:	2100      	movs	r1, #0
 800d14c:	68f8      	ldr	r0, [r7, #12]
 800d14e:	f000 fd6a 	bl	800dc26 <USBD_LL_Transmit>

  return USBD_OK;
 800d152:	2300      	movs	r3, #0
}
 800d154:	4618      	mov	r0, r3
 800d156:	3710      	adds	r7, #16
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}

0800d15c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b084      	sub	sp, #16
 800d160:	af00      	add	r7, sp, #0
 800d162:	60f8      	str	r0, [r7, #12]
 800d164:	60b9      	str	r1, [r7, #8]
 800d166:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	2203      	movs	r2, #3
 800d16c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	687a      	ldr	r2, [r7, #4]
 800d174:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	687a      	ldr	r2, [r7, #4]
 800d17c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	68ba      	ldr	r2, [r7, #8]
 800d184:	2100      	movs	r1, #0
 800d186:	68f8      	ldr	r0, [r7, #12]
 800d188:	f000 fd6e 	bl	800dc68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d18c:	2300      	movs	r3, #0
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3710      	adds	r7, #16
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}

0800d196 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d196:	b580      	push	{r7, lr}
 800d198:	b084      	sub	sp, #16
 800d19a:	af00      	add	r7, sp, #0
 800d19c:	60f8      	str	r0, [r7, #12]
 800d19e:	60b9      	str	r1, [r7, #8]
 800d1a0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	68ba      	ldr	r2, [r7, #8]
 800d1a6:	2100      	movs	r1, #0
 800d1a8:	68f8      	ldr	r0, [r7, #12]
 800d1aa:	f000 fd5d 	bl	800dc68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d1ae:	2300      	movs	r3, #0
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3710      	adds	r7, #16
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}

0800d1b8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2204      	movs	r2, #4
 800d1c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	2100      	movs	r1, #0
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f000 fd29 	bl	800dc26 <USBD_LL_Transmit>

  return USBD_OK;
 800d1d4:	2300      	movs	r3, #0
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3708      	adds	r7, #8
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}

0800d1de <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d1de:	b580      	push	{r7, lr}
 800d1e0:	b082      	sub	sp, #8
 800d1e2:	af00      	add	r7, sp, #0
 800d1e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2205      	movs	r2, #5
 800d1ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	2100      	movs	r1, #0
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f000 fd37 	bl	800dc68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d1fa:	2300      	movs	r3, #0
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3708      	adds	r7, #8
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}

0800d204 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d204:	b480      	push	{r7}
 800d206:	b087      	sub	sp, #28
 800d208:	af00      	add	r7, sp, #0
 800d20a:	60f8      	str	r0, [r7, #12]
 800d20c:	60b9      	str	r1, [r7, #8]
 800d20e:	4613      	mov	r3, r2
 800d210:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d212:	2301      	movs	r3, #1
 800d214:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d216:	2300      	movs	r3, #0
 800d218:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d21a:	4b1f      	ldr	r3, [pc, #124]	@ (800d298 <FATFS_LinkDriverEx+0x94>)
 800d21c:	7a5b      	ldrb	r3, [r3, #9]
 800d21e:	b2db      	uxtb	r3, r3
 800d220:	2b00      	cmp	r3, #0
 800d222:	d131      	bne.n	800d288 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d224:	4b1c      	ldr	r3, [pc, #112]	@ (800d298 <FATFS_LinkDriverEx+0x94>)
 800d226:	7a5b      	ldrb	r3, [r3, #9]
 800d228:	b2db      	uxtb	r3, r3
 800d22a:	461a      	mov	r2, r3
 800d22c:	4b1a      	ldr	r3, [pc, #104]	@ (800d298 <FATFS_LinkDriverEx+0x94>)
 800d22e:	2100      	movs	r1, #0
 800d230:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d232:	4b19      	ldr	r3, [pc, #100]	@ (800d298 <FATFS_LinkDriverEx+0x94>)
 800d234:	7a5b      	ldrb	r3, [r3, #9]
 800d236:	b2db      	uxtb	r3, r3
 800d238:	4a17      	ldr	r2, [pc, #92]	@ (800d298 <FATFS_LinkDriverEx+0x94>)
 800d23a:	009b      	lsls	r3, r3, #2
 800d23c:	4413      	add	r3, r2
 800d23e:	68fa      	ldr	r2, [r7, #12]
 800d240:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d242:	4b15      	ldr	r3, [pc, #84]	@ (800d298 <FATFS_LinkDriverEx+0x94>)
 800d244:	7a5b      	ldrb	r3, [r3, #9]
 800d246:	b2db      	uxtb	r3, r3
 800d248:	461a      	mov	r2, r3
 800d24a:	4b13      	ldr	r3, [pc, #76]	@ (800d298 <FATFS_LinkDriverEx+0x94>)
 800d24c:	4413      	add	r3, r2
 800d24e:	79fa      	ldrb	r2, [r7, #7]
 800d250:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d252:	4b11      	ldr	r3, [pc, #68]	@ (800d298 <FATFS_LinkDriverEx+0x94>)
 800d254:	7a5b      	ldrb	r3, [r3, #9]
 800d256:	b2db      	uxtb	r3, r3
 800d258:	1c5a      	adds	r2, r3, #1
 800d25a:	b2d1      	uxtb	r1, r2
 800d25c:	4a0e      	ldr	r2, [pc, #56]	@ (800d298 <FATFS_LinkDriverEx+0x94>)
 800d25e:	7251      	strb	r1, [r2, #9]
 800d260:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d262:	7dbb      	ldrb	r3, [r7, #22]
 800d264:	3330      	adds	r3, #48	@ 0x30
 800d266:	b2da      	uxtb	r2, r3
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	3301      	adds	r3, #1
 800d270:	223a      	movs	r2, #58	@ 0x3a
 800d272:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	3302      	adds	r3, #2
 800d278:	222f      	movs	r2, #47	@ 0x2f
 800d27a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	3303      	adds	r3, #3
 800d280:	2200      	movs	r2, #0
 800d282:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d284:	2300      	movs	r3, #0
 800d286:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d288:	7dfb      	ldrb	r3, [r7, #23]
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	371c      	adds	r7, #28
 800d28e:	46bd      	mov	sp, r7
 800d290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d294:	4770      	bx	lr
 800d296:	bf00      	nop
 800d298:	20000a04 	.word	0x20000a04

0800d29c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b082      	sub	sp, #8
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
 800d2a4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	6839      	ldr	r1, [r7, #0]
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f7ff ffaa 	bl	800d204 <FATFS_LinkDriverEx>
 800d2b0:	4603      	mov	r3, r0
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3708      	adds	r7, #8
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}
	...

0800d2bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	4912      	ldr	r1, [pc, #72]	@ (800d30c <MX_USB_DEVICE_Init+0x50>)
 800d2c4:	4812      	ldr	r0, [pc, #72]	@ (800d310 <MX_USB_DEVICE_Init+0x54>)
 800d2c6:	f7fe fc71 	bl	800bbac <USBD_Init>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d001      	beq.n	800d2d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d2d0:	f7f4 f884 	bl	80013dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d2d4:	490f      	ldr	r1, [pc, #60]	@ (800d314 <MX_USB_DEVICE_Init+0x58>)
 800d2d6:	480e      	ldr	r0, [pc, #56]	@ (800d310 <MX_USB_DEVICE_Init+0x54>)
 800d2d8:	f7fe fc98 	bl	800bc0c <USBD_RegisterClass>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d001      	beq.n	800d2e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d2e2:	f7f4 f87b 	bl	80013dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d2e6:	490c      	ldr	r1, [pc, #48]	@ (800d318 <MX_USB_DEVICE_Init+0x5c>)
 800d2e8:	4809      	ldr	r0, [pc, #36]	@ (800d310 <MX_USB_DEVICE_Init+0x54>)
 800d2ea:	f7fe fb8f 	bl	800ba0c <USBD_CDC_RegisterInterface>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d001      	beq.n	800d2f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d2f4:	f7f4 f872 	bl	80013dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d2f8:	4805      	ldr	r0, [pc, #20]	@ (800d310 <MX_USB_DEVICE_Init+0x54>)
 800d2fa:	f7fe fcbd 	bl	800bc78 <USBD_Start>
 800d2fe:	4603      	mov	r3, r0
 800d300:	2b00      	cmp	r3, #0
 800d302:	d001      	beq.n	800d308 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d304:	f7f4 f86a 	bl	80013dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d308:	bf00      	nop
 800d30a:	bd80      	pop	{r7, pc}
 800d30c:	200000ac 	.word	0x200000ac
 800d310:	20000a10 	.word	0x20000a10
 800d314:	20000018 	.word	0x20000018
 800d318:	20000098 	.word	0x20000098

0800d31c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d320:	2200      	movs	r2, #0
 800d322:	4905      	ldr	r1, [pc, #20]	@ (800d338 <CDC_Init_FS+0x1c>)
 800d324:	4805      	ldr	r0, [pc, #20]	@ (800d33c <CDC_Init_FS+0x20>)
 800d326:	f7fe fb8b 	bl	800ba40 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d32a:	4905      	ldr	r1, [pc, #20]	@ (800d340 <CDC_Init_FS+0x24>)
 800d32c:	4803      	ldr	r0, [pc, #12]	@ (800d33c <CDC_Init_FS+0x20>)
 800d32e:	f7fe fba9 	bl	800ba84 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d332:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d334:	4618      	mov	r0, r3
 800d336:	bd80      	pop	{r7, pc}
 800d338:	200014ec 	.word	0x200014ec
 800d33c:	20000a10 	.word	0x20000a10
 800d340:	20000cec 	.word	0x20000cec

0800d344 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d344:	b480      	push	{r7}
 800d346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d348:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	46bd      	mov	sp, r7
 800d34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d352:	4770      	bx	lr

0800d354 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d354:	b480      	push	{r7}
 800d356:	b083      	sub	sp, #12
 800d358:	af00      	add	r7, sp, #0
 800d35a:	4603      	mov	r3, r0
 800d35c:	6039      	str	r1, [r7, #0]
 800d35e:	71fb      	strb	r3, [r7, #7]
 800d360:	4613      	mov	r3, r2
 800d362:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d364:	79fb      	ldrb	r3, [r7, #7]
 800d366:	2b23      	cmp	r3, #35	@ 0x23
 800d368:	d84a      	bhi.n	800d400 <CDC_Control_FS+0xac>
 800d36a:	a201      	add	r2, pc, #4	@ (adr r2, 800d370 <CDC_Control_FS+0x1c>)
 800d36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d370:	0800d401 	.word	0x0800d401
 800d374:	0800d401 	.word	0x0800d401
 800d378:	0800d401 	.word	0x0800d401
 800d37c:	0800d401 	.word	0x0800d401
 800d380:	0800d401 	.word	0x0800d401
 800d384:	0800d401 	.word	0x0800d401
 800d388:	0800d401 	.word	0x0800d401
 800d38c:	0800d401 	.word	0x0800d401
 800d390:	0800d401 	.word	0x0800d401
 800d394:	0800d401 	.word	0x0800d401
 800d398:	0800d401 	.word	0x0800d401
 800d39c:	0800d401 	.word	0x0800d401
 800d3a0:	0800d401 	.word	0x0800d401
 800d3a4:	0800d401 	.word	0x0800d401
 800d3a8:	0800d401 	.word	0x0800d401
 800d3ac:	0800d401 	.word	0x0800d401
 800d3b0:	0800d401 	.word	0x0800d401
 800d3b4:	0800d401 	.word	0x0800d401
 800d3b8:	0800d401 	.word	0x0800d401
 800d3bc:	0800d401 	.word	0x0800d401
 800d3c0:	0800d401 	.word	0x0800d401
 800d3c4:	0800d401 	.word	0x0800d401
 800d3c8:	0800d401 	.word	0x0800d401
 800d3cc:	0800d401 	.word	0x0800d401
 800d3d0:	0800d401 	.word	0x0800d401
 800d3d4:	0800d401 	.word	0x0800d401
 800d3d8:	0800d401 	.word	0x0800d401
 800d3dc:	0800d401 	.word	0x0800d401
 800d3e0:	0800d401 	.word	0x0800d401
 800d3e4:	0800d401 	.word	0x0800d401
 800d3e8:	0800d401 	.word	0x0800d401
 800d3ec:	0800d401 	.word	0x0800d401
 800d3f0:	0800d401 	.word	0x0800d401
 800d3f4:	0800d401 	.word	0x0800d401
 800d3f8:	0800d401 	.word	0x0800d401
 800d3fc:	0800d401 	.word	0x0800d401
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d400:	bf00      	nop
  }

  return (USBD_OK);
 800d402:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d404:	4618      	mov	r0, r3
 800d406:	370c      	adds	r7, #12
 800d408:	46bd      	mov	sp, r7
 800d40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40e:	4770      	bx	lr

0800d410 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b082      	sub	sp, #8
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d41a:	6879      	ldr	r1, [r7, #4]
 800d41c:	4805      	ldr	r0, [pc, #20]	@ (800d434 <CDC_Receive_FS+0x24>)
 800d41e:	f7fe fb31 	bl	800ba84 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d422:	4804      	ldr	r0, [pc, #16]	@ (800d434 <CDC_Receive_FS+0x24>)
 800d424:	f7fe fb8c 	bl	800bb40 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d428:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3708      	adds	r7, #8
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
 800d432:	bf00      	nop
 800d434:	20000a10 	.word	0x20000a10

0800d438 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b084      	sub	sp, #16
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	460b      	mov	r3, r1
 800d442:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d444:	2300      	movs	r3, #0
 800d446:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d448:	4b0d      	ldr	r3, [pc, #52]	@ (800d480 <CDC_Transmit_FS+0x48>)
 800d44a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d44e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d456:	2b00      	cmp	r3, #0
 800d458:	d001      	beq.n	800d45e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d45a:	2301      	movs	r3, #1
 800d45c:	e00b      	b.n	800d476 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d45e:	887b      	ldrh	r3, [r7, #2]
 800d460:	461a      	mov	r2, r3
 800d462:	6879      	ldr	r1, [r7, #4]
 800d464:	4806      	ldr	r0, [pc, #24]	@ (800d480 <CDC_Transmit_FS+0x48>)
 800d466:	f7fe faeb 	bl	800ba40 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d46a:	4805      	ldr	r0, [pc, #20]	@ (800d480 <CDC_Transmit_FS+0x48>)
 800d46c:	f7fe fb28 	bl	800bac0 <USBD_CDC_TransmitPacket>
 800d470:	4603      	mov	r3, r0
 800d472:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d474:	7bfb      	ldrb	r3, [r7, #15]
}
 800d476:	4618      	mov	r0, r3
 800d478:	3710      	adds	r7, #16
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}
 800d47e:	bf00      	nop
 800d480:	20000a10 	.word	0x20000a10

0800d484 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d484:	b480      	push	{r7}
 800d486:	b087      	sub	sp, #28
 800d488:	af00      	add	r7, sp, #0
 800d48a:	60f8      	str	r0, [r7, #12]
 800d48c:	60b9      	str	r1, [r7, #8]
 800d48e:	4613      	mov	r3, r2
 800d490:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d492:	2300      	movs	r3, #0
 800d494:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d496:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	371c      	adds	r7, #28
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a4:	4770      	bx	lr
	...

0800d4a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b083      	sub	sp, #12
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	6039      	str	r1, [r7, #0]
 800d4b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	2212      	movs	r2, #18
 800d4b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d4ba:	4b03      	ldr	r3, [pc, #12]	@ (800d4c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d4bc:	4618      	mov	r0, r3
 800d4be:	370c      	adds	r7, #12
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c6:	4770      	bx	lr
 800d4c8:	200000cc 	.word	0x200000cc

0800d4cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b083      	sub	sp, #12
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	6039      	str	r1, [r7, #0]
 800d4d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	2204      	movs	r2, #4
 800d4dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d4de:	4b03      	ldr	r3, [pc, #12]	@ (800d4ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	370c      	adds	r7, #12
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ea:	4770      	bx	lr
 800d4ec:	200000ec 	.word	0x200000ec

0800d4f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b082      	sub	sp, #8
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	6039      	str	r1, [r7, #0]
 800d4fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d4fc:	79fb      	ldrb	r3, [r7, #7]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d105      	bne.n	800d50e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d502:	683a      	ldr	r2, [r7, #0]
 800d504:	4907      	ldr	r1, [pc, #28]	@ (800d524 <USBD_FS_ProductStrDescriptor+0x34>)
 800d506:	4808      	ldr	r0, [pc, #32]	@ (800d528 <USBD_FS_ProductStrDescriptor+0x38>)
 800d508:	f7ff fd90 	bl	800d02c <USBD_GetString>
 800d50c:	e004      	b.n	800d518 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d50e:	683a      	ldr	r2, [r7, #0]
 800d510:	4904      	ldr	r1, [pc, #16]	@ (800d524 <USBD_FS_ProductStrDescriptor+0x34>)
 800d512:	4805      	ldr	r0, [pc, #20]	@ (800d528 <USBD_FS_ProductStrDescriptor+0x38>)
 800d514:	f7ff fd8a 	bl	800d02c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d518:	4b02      	ldr	r3, [pc, #8]	@ (800d524 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3708      	adds	r7, #8
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}
 800d522:	bf00      	nop
 800d524:	20001cec 	.word	0x20001cec
 800d528:	0800e780 	.word	0x0800e780

0800d52c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b082      	sub	sp, #8
 800d530:	af00      	add	r7, sp, #0
 800d532:	4603      	mov	r3, r0
 800d534:	6039      	str	r1, [r7, #0]
 800d536:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d538:	683a      	ldr	r2, [r7, #0]
 800d53a:	4904      	ldr	r1, [pc, #16]	@ (800d54c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d53c:	4804      	ldr	r0, [pc, #16]	@ (800d550 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d53e:	f7ff fd75 	bl	800d02c <USBD_GetString>
  return USBD_StrDesc;
 800d542:	4b02      	ldr	r3, [pc, #8]	@ (800d54c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d544:	4618      	mov	r0, r3
 800d546:	3708      	adds	r7, #8
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}
 800d54c:	20001cec 	.word	0x20001cec
 800d550:	0800e798 	.word	0x0800e798

0800d554 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b082      	sub	sp, #8
 800d558:	af00      	add	r7, sp, #0
 800d55a:	4603      	mov	r3, r0
 800d55c:	6039      	str	r1, [r7, #0]
 800d55e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	221a      	movs	r2, #26
 800d564:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d566:	f000 f855 	bl	800d614 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d56a:	4b02      	ldr	r3, [pc, #8]	@ (800d574 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3708      	adds	r7, #8
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}
 800d574:	200000f0 	.word	0x200000f0

0800d578 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b082      	sub	sp, #8
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	4603      	mov	r3, r0
 800d580:	6039      	str	r1, [r7, #0]
 800d582:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d584:	79fb      	ldrb	r3, [r7, #7]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d105      	bne.n	800d596 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d58a:	683a      	ldr	r2, [r7, #0]
 800d58c:	4907      	ldr	r1, [pc, #28]	@ (800d5ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800d58e:	4808      	ldr	r0, [pc, #32]	@ (800d5b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d590:	f7ff fd4c 	bl	800d02c <USBD_GetString>
 800d594:	e004      	b.n	800d5a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d596:	683a      	ldr	r2, [r7, #0]
 800d598:	4904      	ldr	r1, [pc, #16]	@ (800d5ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800d59a:	4805      	ldr	r0, [pc, #20]	@ (800d5b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d59c:	f7ff fd46 	bl	800d02c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d5a0:	4b02      	ldr	r3, [pc, #8]	@ (800d5ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3708      	adds	r7, #8
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}
 800d5aa:	bf00      	nop
 800d5ac:	20001cec 	.word	0x20001cec
 800d5b0:	0800e7ac 	.word	0x0800e7ac

0800d5b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b082      	sub	sp, #8
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	6039      	str	r1, [r7, #0]
 800d5be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d5c0:	79fb      	ldrb	r3, [r7, #7]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d105      	bne.n	800d5d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d5c6:	683a      	ldr	r2, [r7, #0]
 800d5c8:	4907      	ldr	r1, [pc, #28]	@ (800d5e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d5ca:	4808      	ldr	r0, [pc, #32]	@ (800d5ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d5cc:	f7ff fd2e 	bl	800d02c <USBD_GetString>
 800d5d0:	e004      	b.n	800d5dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d5d2:	683a      	ldr	r2, [r7, #0]
 800d5d4:	4904      	ldr	r1, [pc, #16]	@ (800d5e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d5d6:	4805      	ldr	r0, [pc, #20]	@ (800d5ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d5d8:	f7ff fd28 	bl	800d02c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d5dc:	4b02      	ldr	r3, [pc, #8]	@ (800d5e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3708      	adds	r7, #8
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}
 800d5e6:	bf00      	nop
 800d5e8:	20001cec 	.word	0x20001cec
 800d5ec:	0800e7b8 	.word	0x0800e7b8

0800d5f0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	b083      	sub	sp, #12
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	6039      	str	r1, [r7, #0]
 800d5fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	220c      	movs	r2, #12
 800d600:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d602:	4b03      	ldr	r3, [pc, #12]	@ (800d610 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d604:	4618      	mov	r0, r3
 800d606:	370c      	adds	r7, #12
 800d608:	46bd      	mov	sp, r7
 800d60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60e:	4770      	bx	lr
 800d610:	200000e0 	.word	0x200000e0

0800d614 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b084      	sub	sp, #16
 800d618:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d61a:	4b0f      	ldr	r3, [pc, #60]	@ (800d658 <Get_SerialNum+0x44>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d620:	4b0e      	ldr	r3, [pc, #56]	@ (800d65c <Get_SerialNum+0x48>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d626:	4b0e      	ldr	r3, [pc, #56]	@ (800d660 <Get_SerialNum+0x4c>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d62c:	68fa      	ldr	r2, [r7, #12]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	4413      	add	r3, r2
 800d632:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d009      	beq.n	800d64e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d63a:	2208      	movs	r2, #8
 800d63c:	4909      	ldr	r1, [pc, #36]	@ (800d664 <Get_SerialNum+0x50>)
 800d63e:	68f8      	ldr	r0, [r7, #12]
 800d640:	f000 f814 	bl	800d66c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d644:	2204      	movs	r2, #4
 800d646:	4908      	ldr	r1, [pc, #32]	@ (800d668 <Get_SerialNum+0x54>)
 800d648:	68b8      	ldr	r0, [r7, #8]
 800d64a:	f000 f80f 	bl	800d66c <IntToUnicode>
  }
}
 800d64e:	bf00      	nop
 800d650:	3710      	adds	r7, #16
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}
 800d656:	bf00      	nop
 800d658:	1ff07a10 	.word	0x1ff07a10
 800d65c:	1ff07a14 	.word	0x1ff07a14
 800d660:	1ff07a18 	.word	0x1ff07a18
 800d664:	200000f2 	.word	0x200000f2
 800d668:	20000102 	.word	0x20000102

0800d66c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b087      	sub	sp, #28
 800d670:	af00      	add	r7, sp, #0
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	60b9      	str	r1, [r7, #8]
 800d676:	4613      	mov	r3, r2
 800d678:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d67a:	2300      	movs	r3, #0
 800d67c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d67e:	2300      	movs	r3, #0
 800d680:	75fb      	strb	r3, [r7, #23]
 800d682:	e027      	b.n	800d6d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	0f1b      	lsrs	r3, r3, #28
 800d688:	2b09      	cmp	r3, #9
 800d68a:	d80b      	bhi.n	800d6a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	0f1b      	lsrs	r3, r3, #28
 800d690:	b2da      	uxtb	r2, r3
 800d692:	7dfb      	ldrb	r3, [r7, #23]
 800d694:	005b      	lsls	r3, r3, #1
 800d696:	4619      	mov	r1, r3
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	440b      	add	r3, r1
 800d69c:	3230      	adds	r2, #48	@ 0x30
 800d69e:	b2d2      	uxtb	r2, r2
 800d6a0:	701a      	strb	r2, [r3, #0]
 800d6a2:	e00a      	b.n	800d6ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	0f1b      	lsrs	r3, r3, #28
 800d6a8:	b2da      	uxtb	r2, r3
 800d6aa:	7dfb      	ldrb	r3, [r7, #23]
 800d6ac:	005b      	lsls	r3, r3, #1
 800d6ae:	4619      	mov	r1, r3
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	440b      	add	r3, r1
 800d6b4:	3237      	adds	r2, #55	@ 0x37
 800d6b6:	b2d2      	uxtb	r2, r2
 800d6b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	011b      	lsls	r3, r3, #4
 800d6be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d6c0:	7dfb      	ldrb	r3, [r7, #23]
 800d6c2:	005b      	lsls	r3, r3, #1
 800d6c4:	3301      	adds	r3, #1
 800d6c6:	68ba      	ldr	r2, [r7, #8]
 800d6c8:	4413      	add	r3, r2
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d6ce:	7dfb      	ldrb	r3, [r7, #23]
 800d6d0:	3301      	adds	r3, #1
 800d6d2:	75fb      	strb	r3, [r7, #23]
 800d6d4:	7dfa      	ldrb	r2, [r7, #23]
 800d6d6:	79fb      	ldrb	r3, [r7, #7]
 800d6d8:	429a      	cmp	r2, r3
 800d6da:	d3d3      	bcc.n	800d684 <IntToUnicode+0x18>
  }
}
 800d6dc:	bf00      	nop
 800d6de:	bf00      	nop
 800d6e0:	371c      	adds	r7, #28
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e8:	4770      	bx	lr
	...

0800d6ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b0aa      	sub	sp, #168	@ 0xa8
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d6f4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	601a      	str	r2, [r3, #0]
 800d6fc:	605a      	str	r2, [r3, #4]
 800d6fe:	609a      	str	r2, [r3, #8]
 800d700:	60da      	str	r2, [r3, #12]
 800d702:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d704:	f107 0314 	add.w	r3, r7, #20
 800d708:	2280      	movs	r2, #128	@ 0x80
 800d70a:	2100      	movs	r1, #0
 800d70c:	4618      	mov	r0, r3
 800d70e:	f000 fc53 	bl	800dfb8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d71a:	d151      	bne.n	800d7c0 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800d71c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d720:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800d722:	2300      	movs	r3, #0
 800d724:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d728:	f107 0314 	add.w	r3, r7, #20
 800d72c:	4618      	mov	r0, r3
 800d72e:	f7f7 ff7d 	bl	800562c <HAL_RCCEx_PeriphCLKConfig>
 800d732:	4603      	mov	r3, r0
 800d734:	2b00      	cmp	r3, #0
 800d736:	d001      	beq.n	800d73c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800d738:	f7f3 fe50 	bl	80013dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d73c:	4b22      	ldr	r3, [pc, #136]	@ (800d7c8 <HAL_PCD_MspInit+0xdc>)
 800d73e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d740:	4a21      	ldr	r2, [pc, #132]	@ (800d7c8 <HAL_PCD_MspInit+0xdc>)
 800d742:	f043 0301 	orr.w	r3, r3, #1
 800d746:	6313      	str	r3, [r2, #48]	@ 0x30
 800d748:	4b1f      	ldr	r3, [pc, #124]	@ (800d7c8 <HAL_PCD_MspInit+0xdc>)
 800d74a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d74c:	f003 0301 	and.w	r3, r3, #1
 800d750:	613b      	str	r3, [r7, #16]
 800d752:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d754:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d758:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d75c:	2302      	movs	r3, #2
 800d75e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d762:	2300      	movs	r3, #0
 800d764:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d768:	2303      	movs	r3, #3
 800d76a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d76e:	230a      	movs	r3, #10
 800d770:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d774:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800d778:	4619      	mov	r1, r3
 800d77a:	4814      	ldr	r0, [pc, #80]	@ (800d7cc <HAL_PCD_MspInit+0xe0>)
 800d77c:	f7f5 fc86 	bl	800308c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d780:	4b11      	ldr	r3, [pc, #68]	@ (800d7c8 <HAL_PCD_MspInit+0xdc>)
 800d782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d784:	4a10      	ldr	r2, [pc, #64]	@ (800d7c8 <HAL_PCD_MspInit+0xdc>)
 800d786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d78a:	6353      	str	r3, [r2, #52]	@ 0x34
 800d78c:	4b0e      	ldr	r3, [pc, #56]	@ (800d7c8 <HAL_PCD_MspInit+0xdc>)
 800d78e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d794:	60fb      	str	r3, [r7, #12]
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	4b0b      	ldr	r3, [pc, #44]	@ (800d7c8 <HAL_PCD_MspInit+0xdc>)
 800d79a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d79c:	4a0a      	ldr	r2, [pc, #40]	@ (800d7c8 <HAL_PCD_MspInit+0xdc>)
 800d79e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d7a2:	6453      	str	r3, [r2, #68]	@ 0x44
 800d7a4:	4b08      	ldr	r3, [pc, #32]	@ (800d7c8 <HAL_PCD_MspInit+0xdc>)
 800d7a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d7ac:	60bb      	str	r3, [r7, #8]
 800d7ae:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	2100      	movs	r1, #0
 800d7b4:	2043      	movs	r0, #67	@ 0x43
 800d7b6:	f7f5 f842 	bl	800283e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d7ba:	2043      	movs	r0, #67	@ 0x43
 800d7bc:	f7f5 f85b 	bl	8002876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d7c0:	bf00      	nop
 800d7c2:	37a8      	adds	r7, #168	@ 0xa8
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}
 800d7c8:	40023800 	.word	0x40023800
 800d7cc:	40020000 	.word	0x40020000

0800d7d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b082      	sub	sp, #8
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	4610      	mov	r0, r2
 800d7e8:	f7fe fa93 	bl	800bd12 <USBD_LL_SetupStage>
}
 800d7ec:	bf00      	nop
 800d7ee:	3708      	adds	r7, #8
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}

0800d7f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b082      	sub	sp, #8
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	460b      	mov	r3, r1
 800d7fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800d806:	78fa      	ldrb	r2, [r7, #3]
 800d808:	6879      	ldr	r1, [r7, #4]
 800d80a:	4613      	mov	r3, r2
 800d80c:	00db      	lsls	r3, r3, #3
 800d80e:	4413      	add	r3, r2
 800d810:	009b      	lsls	r3, r3, #2
 800d812:	440b      	add	r3, r1
 800d814:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d818:	681a      	ldr	r2, [r3, #0]
 800d81a:	78fb      	ldrb	r3, [r7, #3]
 800d81c:	4619      	mov	r1, r3
 800d81e:	f7fe facd 	bl	800bdbc <USBD_LL_DataOutStage>
}
 800d822:	bf00      	nop
 800d824:	3708      	adds	r7, #8
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}

0800d82a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d82a:	b580      	push	{r7, lr}
 800d82c:	b082      	sub	sp, #8
 800d82e:	af00      	add	r7, sp, #0
 800d830:	6078      	str	r0, [r7, #4]
 800d832:	460b      	mov	r3, r1
 800d834:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800d83c:	78fa      	ldrb	r2, [r7, #3]
 800d83e:	6879      	ldr	r1, [r7, #4]
 800d840:	4613      	mov	r3, r2
 800d842:	00db      	lsls	r3, r3, #3
 800d844:	4413      	add	r3, r2
 800d846:	009b      	lsls	r3, r3, #2
 800d848:	440b      	add	r3, r1
 800d84a:	3320      	adds	r3, #32
 800d84c:	681a      	ldr	r2, [r3, #0]
 800d84e:	78fb      	ldrb	r3, [r7, #3]
 800d850:	4619      	mov	r1, r3
 800d852:	f7fe fb66 	bl	800bf22 <USBD_LL_DataInStage>
}
 800d856:	bf00      	nop
 800d858:	3708      	adds	r7, #8
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}

0800d85e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d85e:	b580      	push	{r7, lr}
 800d860:	b082      	sub	sp, #8
 800d862:	af00      	add	r7, sp, #0
 800d864:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d86c:	4618      	mov	r0, r3
 800d86e:	f7fe fca0 	bl	800c1b2 <USBD_LL_SOF>
}
 800d872:	bf00      	nop
 800d874:	3708      	adds	r7, #8
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}

0800d87a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d87a:	b580      	push	{r7, lr}
 800d87c:	b084      	sub	sp, #16
 800d87e:	af00      	add	r7, sp, #0
 800d880:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d882:	2301      	movs	r3, #1
 800d884:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	79db      	ldrb	r3, [r3, #7]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d102      	bne.n	800d894 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d88e:	2300      	movs	r3, #0
 800d890:	73fb      	strb	r3, [r7, #15]
 800d892:	e008      	b.n	800d8a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	79db      	ldrb	r3, [r3, #7]
 800d898:	2b02      	cmp	r3, #2
 800d89a:	d102      	bne.n	800d8a2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d89c:	2301      	movs	r3, #1
 800d89e:	73fb      	strb	r3, [r7, #15]
 800d8a0:	e001      	b.n	800d8a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d8a2:	f7f3 fd9b 	bl	80013dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d8ac:	7bfa      	ldrb	r2, [r7, #15]
 800d8ae:	4611      	mov	r1, r2
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f7fe fc3a 	bl	800c12a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f7fe fbe2 	bl	800c086 <USBD_LL_Reset>
}
 800d8c2:	bf00      	nop
 800d8c4:	3710      	adds	r7, #16
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}
	...

0800d8cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b082      	sub	sp, #8
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f7fe fc35 	bl	800c14a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	687a      	ldr	r2, [r7, #4]
 800d8ec:	6812      	ldr	r2, [r2, #0]
 800d8ee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d8f2:	f043 0301 	orr.w	r3, r3, #1
 800d8f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	7adb      	ldrb	r3, [r3, #11]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d005      	beq.n	800d90c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d900:	4b04      	ldr	r3, [pc, #16]	@ (800d914 <HAL_PCD_SuspendCallback+0x48>)
 800d902:	691b      	ldr	r3, [r3, #16]
 800d904:	4a03      	ldr	r2, [pc, #12]	@ (800d914 <HAL_PCD_SuspendCallback+0x48>)
 800d906:	f043 0306 	orr.w	r3, r3, #6
 800d90a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d90c:	bf00      	nop
 800d90e:	3708      	adds	r7, #8
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}
 800d914:	e000ed00 	.word	0xe000ed00

0800d918 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b082      	sub	sp, #8
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d926:	4618      	mov	r0, r3
 800d928:	f7fe fc2b 	bl	800c182 <USBD_LL_Resume>
}
 800d92c:	bf00      	nop
 800d92e:	3708      	adds	r7, #8
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}

0800d934 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b082      	sub	sp, #8
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	460b      	mov	r3, r1
 800d93e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d946:	78fa      	ldrb	r2, [r7, #3]
 800d948:	4611      	mov	r1, r2
 800d94a:	4618      	mov	r0, r3
 800d94c:	f7fe fc83 	bl	800c256 <USBD_LL_IsoOUTIncomplete>
}
 800d950:	bf00      	nop
 800d952:	3708      	adds	r7, #8
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}

0800d958 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b082      	sub	sp, #8
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	460b      	mov	r3, r1
 800d962:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d96a:	78fa      	ldrb	r2, [r7, #3]
 800d96c:	4611      	mov	r1, r2
 800d96e:	4618      	mov	r0, r3
 800d970:	f7fe fc3f 	bl	800c1f2 <USBD_LL_IsoINIncomplete>
}
 800d974:	bf00      	nop
 800d976:	3708      	adds	r7, #8
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b082      	sub	sp, #8
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d98a:	4618      	mov	r0, r3
 800d98c:	f7fe fc95 	bl	800c2ba <USBD_LL_DevConnected>
}
 800d990:	bf00      	nop
 800d992:	3708      	adds	r7, #8
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}

0800d998 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b082      	sub	sp, #8
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7fe fc92 	bl	800c2d0 <USBD_LL_DevDisconnected>
}
 800d9ac:	bf00      	nop
 800d9ae:	3708      	adds	r7, #8
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}

0800d9b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b082      	sub	sp, #8
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	781b      	ldrb	r3, [r3, #0]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d13f      	bne.n	800da44 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d9c4:	4a22      	ldr	r2, [pc, #136]	@ (800da50 <USBD_LL_Init+0x9c>)
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	4a20      	ldr	r2, [pc, #128]	@ (800da50 <USBD_LL_Init+0x9c>)
 800d9d0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d9d4:	4b1e      	ldr	r3, [pc, #120]	@ (800da50 <USBD_LL_Init+0x9c>)
 800d9d6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d9da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d9dc:	4b1c      	ldr	r3, [pc, #112]	@ (800da50 <USBD_LL_Init+0x9c>)
 800d9de:	2206      	movs	r2, #6
 800d9e0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d9e2:	4b1b      	ldr	r3, [pc, #108]	@ (800da50 <USBD_LL_Init+0x9c>)
 800d9e4:	2202      	movs	r2, #2
 800d9e6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d9e8:	4b19      	ldr	r3, [pc, #100]	@ (800da50 <USBD_LL_Init+0x9c>)
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d9ee:	4b18      	ldr	r3, [pc, #96]	@ (800da50 <USBD_LL_Init+0x9c>)
 800d9f0:	2202      	movs	r2, #2
 800d9f2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d9f4:	4b16      	ldr	r3, [pc, #88]	@ (800da50 <USBD_LL_Init+0x9c>)
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d9fa:	4b15      	ldr	r3, [pc, #84]	@ (800da50 <USBD_LL_Init+0x9c>)
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800da00:	4b13      	ldr	r3, [pc, #76]	@ (800da50 <USBD_LL_Init+0x9c>)
 800da02:	2200      	movs	r2, #0
 800da04:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800da06:	4b12      	ldr	r3, [pc, #72]	@ (800da50 <USBD_LL_Init+0x9c>)
 800da08:	2200      	movs	r2, #0
 800da0a:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800da0c:	4b10      	ldr	r3, [pc, #64]	@ (800da50 <USBD_LL_Init+0x9c>)
 800da0e:	2200      	movs	r2, #0
 800da10:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800da12:	4b0f      	ldr	r3, [pc, #60]	@ (800da50 <USBD_LL_Init+0x9c>)
 800da14:	2200      	movs	r2, #0
 800da16:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800da18:	480d      	ldr	r0, [pc, #52]	@ (800da50 <USBD_LL_Init+0x9c>)
 800da1a:	f7f5 fe38 	bl	800368e <HAL_PCD_Init>
 800da1e:	4603      	mov	r3, r0
 800da20:	2b00      	cmp	r3, #0
 800da22:	d001      	beq.n	800da28 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800da24:	f7f3 fcda 	bl	80013dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800da28:	2180      	movs	r1, #128	@ 0x80
 800da2a:	4809      	ldr	r0, [pc, #36]	@ (800da50 <USBD_LL_Init+0x9c>)
 800da2c:	f7f7 f883 	bl	8004b36 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800da30:	2240      	movs	r2, #64	@ 0x40
 800da32:	2100      	movs	r1, #0
 800da34:	4806      	ldr	r0, [pc, #24]	@ (800da50 <USBD_LL_Init+0x9c>)
 800da36:	f7f7 f837 	bl	8004aa8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800da3a:	2280      	movs	r2, #128	@ 0x80
 800da3c:	2101      	movs	r1, #1
 800da3e:	4804      	ldr	r0, [pc, #16]	@ (800da50 <USBD_LL_Init+0x9c>)
 800da40:	f7f7 f832 	bl	8004aa8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800da44:	2300      	movs	r3, #0
}
 800da46:	4618      	mov	r0, r3
 800da48:	3708      	adds	r7, #8
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}
 800da4e:	bf00      	nop
 800da50:	20001eec 	.word	0x20001eec

0800da54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b084      	sub	sp, #16
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da5c:	2300      	movs	r3, #0
 800da5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da60:	2300      	movs	r3, #0
 800da62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da6a:	4618      	mov	r0, r3
 800da6c:	f7f5 ff25 	bl	80038ba <HAL_PCD_Start>
 800da70:	4603      	mov	r3, r0
 800da72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da74:	7bfb      	ldrb	r3, [r7, #15]
 800da76:	4618      	mov	r0, r3
 800da78:	f000 f97e 	bl	800dd78 <USBD_Get_USB_Status>
 800da7c:	4603      	mov	r3, r0
 800da7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da80:	7bbb      	ldrb	r3, [r7, #14]
}
 800da82:	4618      	mov	r0, r3
 800da84:	3710      	adds	r7, #16
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}

0800da8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800da8a:	b580      	push	{r7, lr}
 800da8c:	b084      	sub	sp, #16
 800da8e:	af00      	add	r7, sp, #0
 800da90:	6078      	str	r0, [r7, #4]
 800da92:	4608      	mov	r0, r1
 800da94:	4611      	mov	r1, r2
 800da96:	461a      	mov	r2, r3
 800da98:	4603      	mov	r3, r0
 800da9a:	70fb      	strb	r3, [r7, #3]
 800da9c:	460b      	mov	r3, r1
 800da9e:	70bb      	strb	r3, [r7, #2]
 800daa0:	4613      	mov	r3, r2
 800daa2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800daa4:	2300      	movs	r3, #0
 800daa6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800daa8:	2300      	movs	r3, #0
 800daaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dab2:	78bb      	ldrb	r3, [r7, #2]
 800dab4:	883a      	ldrh	r2, [r7, #0]
 800dab6:	78f9      	ldrb	r1, [r7, #3]
 800dab8:	f7f6 fc13 	bl	80042e2 <HAL_PCD_EP_Open>
 800dabc:	4603      	mov	r3, r0
 800dabe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dac0:	7bfb      	ldrb	r3, [r7, #15]
 800dac2:	4618      	mov	r0, r3
 800dac4:	f000 f958 	bl	800dd78 <USBD_Get_USB_Status>
 800dac8:	4603      	mov	r3, r0
 800daca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dacc:	7bbb      	ldrb	r3, [r7, #14]
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3710      	adds	r7, #16
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}

0800dad6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dad6:	b580      	push	{r7, lr}
 800dad8:	b084      	sub	sp, #16
 800dada:	af00      	add	r7, sp, #0
 800dadc:	6078      	str	r0, [r7, #4]
 800dade:	460b      	mov	r3, r1
 800dae0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dae2:	2300      	movs	r3, #0
 800dae4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dae6:	2300      	movs	r3, #0
 800dae8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800daf0:	78fa      	ldrb	r2, [r7, #3]
 800daf2:	4611      	mov	r1, r2
 800daf4:	4618      	mov	r0, r3
 800daf6:	f7f6 fc5c 	bl	80043b2 <HAL_PCD_EP_Close>
 800dafa:	4603      	mov	r3, r0
 800dafc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dafe:	7bfb      	ldrb	r3, [r7, #15]
 800db00:	4618      	mov	r0, r3
 800db02:	f000 f939 	bl	800dd78 <USBD_Get_USB_Status>
 800db06:	4603      	mov	r3, r0
 800db08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3710      	adds	r7, #16
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}

0800db14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b084      	sub	sp, #16
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	460b      	mov	r3, r1
 800db1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db20:	2300      	movs	r3, #0
 800db22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db24:	2300      	movs	r3, #0
 800db26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800db2e:	78fa      	ldrb	r2, [r7, #3]
 800db30:	4611      	mov	r1, r2
 800db32:	4618      	mov	r0, r3
 800db34:	f7f6 fd14 	bl	8004560 <HAL_PCD_EP_SetStall>
 800db38:	4603      	mov	r3, r0
 800db3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db3c:	7bfb      	ldrb	r3, [r7, #15]
 800db3e:	4618      	mov	r0, r3
 800db40:	f000 f91a 	bl	800dd78 <USBD_Get_USB_Status>
 800db44:	4603      	mov	r3, r0
 800db46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db48:	7bbb      	ldrb	r3, [r7, #14]
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	3710      	adds	r7, #16
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}

0800db52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db52:	b580      	push	{r7, lr}
 800db54:	b084      	sub	sp, #16
 800db56:	af00      	add	r7, sp, #0
 800db58:	6078      	str	r0, [r7, #4]
 800db5a:	460b      	mov	r3, r1
 800db5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db5e:	2300      	movs	r3, #0
 800db60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db62:	2300      	movs	r3, #0
 800db64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800db6c:	78fa      	ldrb	r2, [r7, #3]
 800db6e:	4611      	mov	r1, r2
 800db70:	4618      	mov	r0, r3
 800db72:	f7f6 fd58 	bl	8004626 <HAL_PCD_EP_ClrStall>
 800db76:	4603      	mov	r3, r0
 800db78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db7a:	7bfb      	ldrb	r3, [r7, #15]
 800db7c:	4618      	mov	r0, r3
 800db7e:	f000 f8fb 	bl	800dd78 <USBD_Get_USB_Status>
 800db82:	4603      	mov	r3, r0
 800db84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db86:	7bbb      	ldrb	r3, [r7, #14]
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3710      	adds	r7, #16
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}

0800db90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db90:	b480      	push	{r7}
 800db92:	b085      	sub	sp, #20
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	460b      	mov	r3, r1
 800db9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dba2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dba4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	da0b      	bge.n	800dbc4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dbac:	78fb      	ldrb	r3, [r7, #3]
 800dbae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dbb2:	68f9      	ldr	r1, [r7, #12]
 800dbb4:	4613      	mov	r3, r2
 800dbb6:	00db      	lsls	r3, r3, #3
 800dbb8:	4413      	add	r3, r2
 800dbba:	009b      	lsls	r3, r3, #2
 800dbbc:	440b      	add	r3, r1
 800dbbe:	3316      	adds	r3, #22
 800dbc0:	781b      	ldrb	r3, [r3, #0]
 800dbc2:	e00b      	b.n	800dbdc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dbc4:	78fb      	ldrb	r3, [r7, #3]
 800dbc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dbca:	68f9      	ldr	r1, [r7, #12]
 800dbcc:	4613      	mov	r3, r2
 800dbce:	00db      	lsls	r3, r3, #3
 800dbd0:	4413      	add	r3, r2
 800dbd2:	009b      	lsls	r3, r3, #2
 800dbd4:	440b      	add	r3, r1
 800dbd6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800dbda:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dbdc:	4618      	mov	r0, r3
 800dbde:	3714      	adds	r7, #20
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe6:	4770      	bx	lr

0800dbe8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b084      	sub	sp, #16
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	460b      	mov	r3, r1
 800dbf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dc02:	78fa      	ldrb	r2, [r7, #3]
 800dc04:	4611      	mov	r1, r2
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7f6 fb47 	bl	800429a <HAL_PCD_SetAddress>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc10:	7bfb      	ldrb	r3, [r7, #15]
 800dc12:	4618      	mov	r0, r3
 800dc14:	f000 f8b0 	bl	800dd78 <USBD_Get_USB_Status>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3710      	adds	r7, #16
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}

0800dc26 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dc26:	b580      	push	{r7, lr}
 800dc28:	b086      	sub	sp, #24
 800dc2a:	af00      	add	r7, sp, #0
 800dc2c:	60f8      	str	r0, [r7, #12]
 800dc2e:	607a      	str	r2, [r7, #4]
 800dc30:	603b      	str	r3, [r7, #0]
 800dc32:	460b      	mov	r3, r1
 800dc34:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc36:	2300      	movs	r3, #0
 800dc38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dc44:	7af9      	ldrb	r1, [r7, #11]
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	687a      	ldr	r2, [r7, #4]
 800dc4a:	f7f6 fc4f 	bl	80044ec <HAL_PCD_EP_Transmit>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc52:	7dfb      	ldrb	r3, [r7, #23]
 800dc54:	4618      	mov	r0, r3
 800dc56:	f000 f88f 	bl	800dd78 <USBD_Get_USB_Status>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dc5e:	7dbb      	ldrb	r3, [r7, #22]
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3718      	adds	r7, #24
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b086      	sub	sp, #24
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	60f8      	str	r0, [r7, #12]
 800dc70:	607a      	str	r2, [r7, #4]
 800dc72:	603b      	str	r3, [r7, #0]
 800dc74:	460b      	mov	r3, r1
 800dc76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc78:	2300      	movs	r3, #0
 800dc7a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dc86:	7af9      	ldrb	r1, [r7, #11]
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	687a      	ldr	r2, [r7, #4]
 800dc8c:	f7f6 fbdb 	bl	8004446 <HAL_PCD_EP_Receive>
 800dc90:	4603      	mov	r3, r0
 800dc92:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc94:	7dfb      	ldrb	r3, [r7, #23]
 800dc96:	4618      	mov	r0, r3
 800dc98:	f000 f86e 	bl	800dd78 <USBD_Get_USB_Status>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dca0:	7dbb      	ldrb	r3, [r7, #22]
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	3718      	adds	r7, #24
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}

0800dcaa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dcaa:	b580      	push	{r7, lr}
 800dcac:	b082      	sub	sp, #8
 800dcae:	af00      	add	r7, sp, #0
 800dcb0:	6078      	str	r0, [r7, #4]
 800dcb2:	460b      	mov	r3, r1
 800dcb4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dcbc:	78fa      	ldrb	r2, [r7, #3]
 800dcbe:	4611      	mov	r1, r2
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7f6 fbfb 	bl	80044bc <HAL_PCD_EP_GetRxCount>
 800dcc6:	4603      	mov	r3, r0
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3708      	adds	r7, #8
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}

0800dcd0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b082      	sub	sp, #8
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
 800dcd8:	460b      	mov	r3, r1
 800dcda:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800dcdc:	78fb      	ldrb	r3, [r7, #3]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d002      	beq.n	800dce8 <HAL_PCDEx_LPM_Callback+0x18>
 800dce2:	2b01      	cmp	r3, #1
 800dce4:	d01f      	beq.n	800dd26 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800dce6:	e03b      	b.n	800dd60 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	7adb      	ldrb	r3, [r3, #11]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d007      	beq.n	800dd00 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800dcf0:	f000 f83c 	bl	800dd6c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dcf4:	4b1c      	ldr	r3, [pc, #112]	@ (800dd68 <HAL_PCDEx_LPM_Callback+0x98>)
 800dcf6:	691b      	ldr	r3, [r3, #16]
 800dcf8:	4a1b      	ldr	r2, [pc, #108]	@ (800dd68 <HAL_PCDEx_LPM_Callback+0x98>)
 800dcfa:	f023 0306 	bic.w	r3, r3, #6
 800dcfe:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	687a      	ldr	r2, [r7, #4]
 800dd0c:	6812      	ldr	r2, [r2, #0]
 800dd0e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800dd12:	f023 0301 	bic.w	r3, r3, #1
 800dd16:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7fe fa2f 	bl	800c182 <USBD_LL_Resume>
    break;
 800dd24:	e01c      	b.n	800dd60 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	687a      	ldr	r2, [r7, #4]
 800dd32:	6812      	ldr	r2, [r2, #0]
 800dd34:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800dd38:	f043 0301 	orr.w	r3, r3, #1
 800dd3c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800dd44:	4618      	mov	r0, r3
 800dd46:	f7fe fa00 	bl	800c14a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	7adb      	ldrb	r3, [r3, #11]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d005      	beq.n	800dd5e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dd52:	4b05      	ldr	r3, [pc, #20]	@ (800dd68 <HAL_PCDEx_LPM_Callback+0x98>)
 800dd54:	691b      	ldr	r3, [r3, #16]
 800dd56:	4a04      	ldr	r2, [pc, #16]	@ (800dd68 <HAL_PCDEx_LPM_Callback+0x98>)
 800dd58:	f043 0306 	orr.w	r3, r3, #6
 800dd5c:	6113      	str	r3, [r2, #16]
    break;
 800dd5e:	bf00      	nop
}
 800dd60:	bf00      	nop
 800dd62:	3708      	adds	r7, #8
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}
 800dd68:	e000ed00 	.word	0xe000ed00

0800dd6c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800dd70:	f7f2 fe3a 	bl	80009e8 <SystemClock_Config>
}
 800dd74:	bf00      	nop
 800dd76:	bd80      	pop	{r7, pc}

0800dd78 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dd78:	b480      	push	{r7}
 800dd7a:	b085      	sub	sp, #20
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	4603      	mov	r3, r0
 800dd80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd82:	2300      	movs	r3, #0
 800dd84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dd86:	79fb      	ldrb	r3, [r7, #7]
 800dd88:	2b03      	cmp	r3, #3
 800dd8a:	d817      	bhi.n	800ddbc <USBD_Get_USB_Status+0x44>
 800dd8c:	a201      	add	r2, pc, #4	@ (adr r2, 800dd94 <USBD_Get_USB_Status+0x1c>)
 800dd8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd92:	bf00      	nop
 800dd94:	0800dda5 	.word	0x0800dda5
 800dd98:	0800ddab 	.word	0x0800ddab
 800dd9c:	0800ddb1 	.word	0x0800ddb1
 800dda0:	0800ddb7 	.word	0x0800ddb7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dda4:	2300      	movs	r3, #0
 800dda6:	73fb      	strb	r3, [r7, #15]
    break;
 800dda8:	e00b      	b.n	800ddc2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ddaa:	2303      	movs	r3, #3
 800ddac:	73fb      	strb	r3, [r7, #15]
    break;
 800ddae:	e008      	b.n	800ddc2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ddb0:	2301      	movs	r3, #1
 800ddb2:	73fb      	strb	r3, [r7, #15]
    break;
 800ddb4:	e005      	b.n	800ddc2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ddb6:	2303      	movs	r3, #3
 800ddb8:	73fb      	strb	r3, [r7, #15]
    break;
 800ddba:	e002      	b.n	800ddc2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ddbc:	2303      	movs	r3, #3
 800ddbe:	73fb      	strb	r3, [r7, #15]
    break;
 800ddc0:	bf00      	nop
  }
  return usb_status;
 800ddc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3714      	adds	r7, #20
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddce:	4770      	bx	lr

0800ddd0 <malloc>:
 800ddd0:	4b02      	ldr	r3, [pc, #8]	@ (800dddc <malloc+0xc>)
 800ddd2:	4601      	mov	r1, r0
 800ddd4:	6818      	ldr	r0, [r3, #0]
 800ddd6:	f000 b82d 	b.w	800de34 <_malloc_r>
 800ddda:	bf00      	nop
 800dddc:	2000010c 	.word	0x2000010c

0800dde0 <free>:
 800dde0:	4b02      	ldr	r3, [pc, #8]	@ (800ddec <free+0xc>)
 800dde2:	4601      	mov	r1, r0
 800dde4:	6818      	ldr	r0, [r3, #0]
 800dde6:	f000 b92b 	b.w	800e040 <_free_r>
 800ddea:	bf00      	nop
 800ddec:	2000010c 	.word	0x2000010c

0800ddf0 <sbrk_aligned>:
 800ddf0:	b570      	push	{r4, r5, r6, lr}
 800ddf2:	4e0f      	ldr	r6, [pc, #60]	@ (800de30 <sbrk_aligned+0x40>)
 800ddf4:	460c      	mov	r4, r1
 800ddf6:	6831      	ldr	r1, [r6, #0]
 800ddf8:	4605      	mov	r5, r0
 800ddfa:	b911      	cbnz	r1, 800de02 <sbrk_aligned+0x12>
 800ddfc:	f000 f8e4 	bl	800dfc8 <_sbrk_r>
 800de00:	6030      	str	r0, [r6, #0]
 800de02:	4621      	mov	r1, r4
 800de04:	4628      	mov	r0, r5
 800de06:	f000 f8df 	bl	800dfc8 <_sbrk_r>
 800de0a:	1c43      	adds	r3, r0, #1
 800de0c:	d103      	bne.n	800de16 <sbrk_aligned+0x26>
 800de0e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800de12:	4620      	mov	r0, r4
 800de14:	bd70      	pop	{r4, r5, r6, pc}
 800de16:	1cc4      	adds	r4, r0, #3
 800de18:	f024 0403 	bic.w	r4, r4, #3
 800de1c:	42a0      	cmp	r0, r4
 800de1e:	d0f8      	beq.n	800de12 <sbrk_aligned+0x22>
 800de20:	1a21      	subs	r1, r4, r0
 800de22:	4628      	mov	r0, r5
 800de24:	f000 f8d0 	bl	800dfc8 <_sbrk_r>
 800de28:	3001      	adds	r0, #1
 800de2a:	d1f2      	bne.n	800de12 <sbrk_aligned+0x22>
 800de2c:	e7ef      	b.n	800de0e <sbrk_aligned+0x1e>
 800de2e:	bf00      	nop
 800de30:	200023cc 	.word	0x200023cc

0800de34 <_malloc_r>:
 800de34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de38:	1ccd      	adds	r5, r1, #3
 800de3a:	f025 0503 	bic.w	r5, r5, #3
 800de3e:	3508      	adds	r5, #8
 800de40:	2d0c      	cmp	r5, #12
 800de42:	bf38      	it	cc
 800de44:	250c      	movcc	r5, #12
 800de46:	2d00      	cmp	r5, #0
 800de48:	4606      	mov	r6, r0
 800de4a:	db01      	blt.n	800de50 <_malloc_r+0x1c>
 800de4c:	42a9      	cmp	r1, r5
 800de4e:	d904      	bls.n	800de5a <_malloc_r+0x26>
 800de50:	230c      	movs	r3, #12
 800de52:	6033      	str	r3, [r6, #0]
 800de54:	2000      	movs	r0, #0
 800de56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800df30 <_malloc_r+0xfc>
 800de5e:	f000 f869 	bl	800df34 <__malloc_lock>
 800de62:	f8d8 3000 	ldr.w	r3, [r8]
 800de66:	461c      	mov	r4, r3
 800de68:	bb44      	cbnz	r4, 800debc <_malloc_r+0x88>
 800de6a:	4629      	mov	r1, r5
 800de6c:	4630      	mov	r0, r6
 800de6e:	f7ff ffbf 	bl	800ddf0 <sbrk_aligned>
 800de72:	1c43      	adds	r3, r0, #1
 800de74:	4604      	mov	r4, r0
 800de76:	d158      	bne.n	800df2a <_malloc_r+0xf6>
 800de78:	f8d8 4000 	ldr.w	r4, [r8]
 800de7c:	4627      	mov	r7, r4
 800de7e:	2f00      	cmp	r7, #0
 800de80:	d143      	bne.n	800df0a <_malloc_r+0xd6>
 800de82:	2c00      	cmp	r4, #0
 800de84:	d04b      	beq.n	800df1e <_malloc_r+0xea>
 800de86:	6823      	ldr	r3, [r4, #0]
 800de88:	4639      	mov	r1, r7
 800de8a:	4630      	mov	r0, r6
 800de8c:	eb04 0903 	add.w	r9, r4, r3
 800de90:	f000 f89a 	bl	800dfc8 <_sbrk_r>
 800de94:	4581      	cmp	r9, r0
 800de96:	d142      	bne.n	800df1e <_malloc_r+0xea>
 800de98:	6821      	ldr	r1, [r4, #0]
 800de9a:	1a6d      	subs	r5, r5, r1
 800de9c:	4629      	mov	r1, r5
 800de9e:	4630      	mov	r0, r6
 800dea0:	f7ff ffa6 	bl	800ddf0 <sbrk_aligned>
 800dea4:	3001      	adds	r0, #1
 800dea6:	d03a      	beq.n	800df1e <_malloc_r+0xea>
 800dea8:	6823      	ldr	r3, [r4, #0]
 800deaa:	442b      	add	r3, r5
 800deac:	6023      	str	r3, [r4, #0]
 800deae:	f8d8 3000 	ldr.w	r3, [r8]
 800deb2:	685a      	ldr	r2, [r3, #4]
 800deb4:	bb62      	cbnz	r2, 800df10 <_malloc_r+0xdc>
 800deb6:	f8c8 7000 	str.w	r7, [r8]
 800deba:	e00f      	b.n	800dedc <_malloc_r+0xa8>
 800debc:	6822      	ldr	r2, [r4, #0]
 800debe:	1b52      	subs	r2, r2, r5
 800dec0:	d420      	bmi.n	800df04 <_malloc_r+0xd0>
 800dec2:	2a0b      	cmp	r2, #11
 800dec4:	d917      	bls.n	800def6 <_malloc_r+0xc2>
 800dec6:	1961      	adds	r1, r4, r5
 800dec8:	42a3      	cmp	r3, r4
 800deca:	6025      	str	r5, [r4, #0]
 800decc:	bf18      	it	ne
 800dece:	6059      	strne	r1, [r3, #4]
 800ded0:	6863      	ldr	r3, [r4, #4]
 800ded2:	bf08      	it	eq
 800ded4:	f8c8 1000 	streq.w	r1, [r8]
 800ded8:	5162      	str	r2, [r4, r5]
 800deda:	604b      	str	r3, [r1, #4]
 800dedc:	4630      	mov	r0, r6
 800dede:	f000 f82f 	bl	800df40 <__malloc_unlock>
 800dee2:	f104 000b 	add.w	r0, r4, #11
 800dee6:	1d23      	adds	r3, r4, #4
 800dee8:	f020 0007 	bic.w	r0, r0, #7
 800deec:	1ac2      	subs	r2, r0, r3
 800deee:	bf1c      	itt	ne
 800def0:	1a1b      	subne	r3, r3, r0
 800def2:	50a3      	strne	r3, [r4, r2]
 800def4:	e7af      	b.n	800de56 <_malloc_r+0x22>
 800def6:	6862      	ldr	r2, [r4, #4]
 800def8:	42a3      	cmp	r3, r4
 800defa:	bf0c      	ite	eq
 800defc:	f8c8 2000 	streq.w	r2, [r8]
 800df00:	605a      	strne	r2, [r3, #4]
 800df02:	e7eb      	b.n	800dedc <_malloc_r+0xa8>
 800df04:	4623      	mov	r3, r4
 800df06:	6864      	ldr	r4, [r4, #4]
 800df08:	e7ae      	b.n	800de68 <_malloc_r+0x34>
 800df0a:	463c      	mov	r4, r7
 800df0c:	687f      	ldr	r7, [r7, #4]
 800df0e:	e7b6      	b.n	800de7e <_malloc_r+0x4a>
 800df10:	461a      	mov	r2, r3
 800df12:	685b      	ldr	r3, [r3, #4]
 800df14:	42a3      	cmp	r3, r4
 800df16:	d1fb      	bne.n	800df10 <_malloc_r+0xdc>
 800df18:	2300      	movs	r3, #0
 800df1a:	6053      	str	r3, [r2, #4]
 800df1c:	e7de      	b.n	800dedc <_malloc_r+0xa8>
 800df1e:	230c      	movs	r3, #12
 800df20:	6033      	str	r3, [r6, #0]
 800df22:	4630      	mov	r0, r6
 800df24:	f000 f80c 	bl	800df40 <__malloc_unlock>
 800df28:	e794      	b.n	800de54 <_malloc_r+0x20>
 800df2a:	6005      	str	r5, [r0, #0]
 800df2c:	e7d6      	b.n	800dedc <_malloc_r+0xa8>
 800df2e:	bf00      	nop
 800df30:	200023d0 	.word	0x200023d0

0800df34 <__malloc_lock>:
 800df34:	4801      	ldr	r0, [pc, #4]	@ (800df3c <__malloc_lock+0x8>)
 800df36:	f000 b881 	b.w	800e03c <__retarget_lock_acquire_recursive>
 800df3a:	bf00      	nop
 800df3c:	20002510 	.word	0x20002510

0800df40 <__malloc_unlock>:
 800df40:	4801      	ldr	r0, [pc, #4]	@ (800df48 <__malloc_unlock+0x8>)
 800df42:	f000 b87c 	b.w	800e03e <__retarget_lock_release_recursive>
 800df46:	bf00      	nop
 800df48:	20002510 	.word	0x20002510

0800df4c <sniprintf>:
 800df4c:	b40c      	push	{r2, r3}
 800df4e:	b530      	push	{r4, r5, lr}
 800df50:	4b18      	ldr	r3, [pc, #96]	@ (800dfb4 <sniprintf+0x68>)
 800df52:	1e0c      	subs	r4, r1, #0
 800df54:	681d      	ldr	r5, [r3, #0]
 800df56:	b09d      	sub	sp, #116	@ 0x74
 800df58:	da08      	bge.n	800df6c <sniprintf+0x20>
 800df5a:	238b      	movs	r3, #139	@ 0x8b
 800df5c:	602b      	str	r3, [r5, #0]
 800df5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800df62:	b01d      	add	sp, #116	@ 0x74
 800df64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800df68:	b002      	add	sp, #8
 800df6a:	4770      	bx	lr
 800df6c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800df70:	f8ad 3014 	strh.w	r3, [sp, #20]
 800df74:	f04f 0300 	mov.w	r3, #0
 800df78:	931b      	str	r3, [sp, #108]	@ 0x6c
 800df7a:	bf14      	ite	ne
 800df7c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800df80:	4623      	moveq	r3, r4
 800df82:	9304      	str	r3, [sp, #16]
 800df84:	9307      	str	r3, [sp, #28]
 800df86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800df8a:	9002      	str	r0, [sp, #8]
 800df8c:	9006      	str	r0, [sp, #24]
 800df8e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800df92:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800df94:	ab21      	add	r3, sp, #132	@ 0x84
 800df96:	a902      	add	r1, sp, #8
 800df98:	4628      	mov	r0, r5
 800df9a:	9301      	str	r3, [sp, #4]
 800df9c:	f000 f8f6 	bl	800e18c <_svfiprintf_r>
 800dfa0:	1c43      	adds	r3, r0, #1
 800dfa2:	bfbc      	itt	lt
 800dfa4:	238b      	movlt	r3, #139	@ 0x8b
 800dfa6:	602b      	strlt	r3, [r5, #0]
 800dfa8:	2c00      	cmp	r4, #0
 800dfaa:	d0da      	beq.n	800df62 <sniprintf+0x16>
 800dfac:	9b02      	ldr	r3, [sp, #8]
 800dfae:	2200      	movs	r2, #0
 800dfb0:	701a      	strb	r2, [r3, #0]
 800dfb2:	e7d6      	b.n	800df62 <sniprintf+0x16>
 800dfb4:	2000010c 	.word	0x2000010c

0800dfb8 <memset>:
 800dfb8:	4402      	add	r2, r0
 800dfba:	4603      	mov	r3, r0
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	d100      	bne.n	800dfc2 <memset+0xa>
 800dfc0:	4770      	bx	lr
 800dfc2:	f803 1b01 	strb.w	r1, [r3], #1
 800dfc6:	e7f9      	b.n	800dfbc <memset+0x4>

0800dfc8 <_sbrk_r>:
 800dfc8:	b538      	push	{r3, r4, r5, lr}
 800dfca:	4d06      	ldr	r5, [pc, #24]	@ (800dfe4 <_sbrk_r+0x1c>)
 800dfcc:	2300      	movs	r3, #0
 800dfce:	4604      	mov	r4, r0
 800dfd0:	4608      	mov	r0, r1
 800dfd2:	602b      	str	r3, [r5, #0]
 800dfd4:	f7f3 ffd2 	bl	8001f7c <_sbrk>
 800dfd8:	1c43      	adds	r3, r0, #1
 800dfda:	d102      	bne.n	800dfe2 <_sbrk_r+0x1a>
 800dfdc:	682b      	ldr	r3, [r5, #0]
 800dfde:	b103      	cbz	r3, 800dfe2 <_sbrk_r+0x1a>
 800dfe0:	6023      	str	r3, [r4, #0]
 800dfe2:	bd38      	pop	{r3, r4, r5, pc}
 800dfe4:	2000250c 	.word	0x2000250c

0800dfe8 <__errno>:
 800dfe8:	4b01      	ldr	r3, [pc, #4]	@ (800dff0 <__errno+0x8>)
 800dfea:	6818      	ldr	r0, [r3, #0]
 800dfec:	4770      	bx	lr
 800dfee:	bf00      	nop
 800dff0:	2000010c 	.word	0x2000010c

0800dff4 <__libc_init_array>:
 800dff4:	b570      	push	{r4, r5, r6, lr}
 800dff6:	4d0d      	ldr	r5, [pc, #52]	@ (800e02c <__libc_init_array+0x38>)
 800dff8:	4c0d      	ldr	r4, [pc, #52]	@ (800e030 <__libc_init_array+0x3c>)
 800dffa:	1b64      	subs	r4, r4, r5
 800dffc:	10a4      	asrs	r4, r4, #2
 800dffe:	2600      	movs	r6, #0
 800e000:	42a6      	cmp	r6, r4
 800e002:	d109      	bne.n	800e018 <__libc_init_array+0x24>
 800e004:	4d0b      	ldr	r5, [pc, #44]	@ (800e034 <__libc_init_array+0x40>)
 800e006:	4c0c      	ldr	r4, [pc, #48]	@ (800e038 <__libc_init_array+0x44>)
 800e008:	f000 fba6 	bl	800e758 <_init>
 800e00c:	1b64      	subs	r4, r4, r5
 800e00e:	10a4      	asrs	r4, r4, #2
 800e010:	2600      	movs	r6, #0
 800e012:	42a6      	cmp	r6, r4
 800e014:	d105      	bne.n	800e022 <__libc_init_array+0x2e>
 800e016:	bd70      	pop	{r4, r5, r6, pc}
 800e018:	f855 3b04 	ldr.w	r3, [r5], #4
 800e01c:	4798      	blx	r3
 800e01e:	3601      	adds	r6, #1
 800e020:	e7ee      	b.n	800e000 <__libc_init_array+0xc>
 800e022:	f855 3b04 	ldr.w	r3, [r5], #4
 800e026:	4798      	blx	r3
 800e028:	3601      	adds	r6, #1
 800e02a:	e7f2      	b.n	800e012 <__libc_init_array+0x1e>
 800e02c:	0800e838 	.word	0x0800e838
 800e030:	0800e838 	.word	0x0800e838
 800e034:	0800e838 	.word	0x0800e838
 800e038:	0800e83c 	.word	0x0800e83c

0800e03c <__retarget_lock_acquire_recursive>:
 800e03c:	4770      	bx	lr

0800e03e <__retarget_lock_release_recursive>:
 800e03e:	4770      	bx	lr

0800e040 <_free_r>:
 800e040:	b538      	push	{r3, r4, r5, lr}
 800e042:	4605      	mov	r5, r0
 800e044:	2900      	cmp	r1, #0
 800e046:	d041      	beq.n	800e0cc <_free_r+0x8c>
 800e048:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e04c:	1f0c      	subs	r4, r1, #4
 800e04e:	2b00      	cmp	r3, #0
 800e050:	bfb8      	it	lt
 800e052:	18e4      	addlt	r4, r4, r3
 800e054:	f7ff ff6e 	bl	800df34 <__malloc_lock>
 800e058:	4a1d      	ldr	r2, [pc, #116]	@ (800e0d0 <_free_r+0x90>)
 800e05a:	6813      	ldr	r3, [r2, #0]
 800e05c:	b933      	cbnz	r3, 800e06c <_free_r+0x2c>
 800e05e:	6063      	str	r3, [r4, #4]
 800e060:	6014      	str	r4, [r2, #0]
 800e062:	4628      	mov	r0, r5
 800e064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e068:	f7ff bf6a 	b.w	800df40 <__malloc_unlock>
 800e06c:	42a3      	cmp	r3, r4
 800e06e:	d908      	bls.n	800e082 <_free_r+0x42>
 800e070:	6820      	ldr	r0, [r4, #0]
 800e072:	1821      	adds	r1, r4, r0
 800e074:	428b      	cmp	r3, r1
 800e076:	bf01      	itttt	eq
 800e078:	6819      	ldreq	r1, [r3, #0]
 800e07a:	685b      	ldreq	r3, [r3, #4]
 800e07c:	1809      	addeq	r1, r1, r0
 800e07e:	6021      	streq	r1, [r4, #0]
 800e080:	e7ed      	b.n	800e05e <_free_r+0x1e>
 800e082:	461a      	mov	r2, r3
 800e084:	685b      	ldr	r3, [r3, #4]
 800e086:	b10b      	cbz	r3, 800e08c <_free_r+0x4c>
 800e088:	42a3      	cmp	r3, r4
 800e08a:	d9fa      	bls.n	800e082 <_free_r+0x42>
 800e08c:	6811      	ldr	r1, [r2, #0]
 800e08e:	1850      	adds	r0, r2, r1
 800e090:	42a0      	cmp	r0, r4
 800e092:	d10b      	bne.n	800e0ac <_free_r+0x6c>
 800e094:	6820      	ldr	r0, [r4, #0]
 800e096:	4401      	add	r1, r0
 800e098:	1850      	adds	r0, r2, r1
 800e09a:	4283      	cmp	r3, r0
 800e09c:	6011      	str	r1, [r2, #0]
 800e09e:	d1e0      	bne.n	800e062 <_free_r+0x22>
 800e0a0:	6818      	ldr	r0, [r3, #0]
 800e0a2:	685b      	ldr	r3, [r3, #4]
 800e0a4:	6053      	str	r3, [r2, #4]
 800e0a6:	4408      	add	r0, r1
 800e0a8:	6010      	str	r0, [r2, #0]
 800e0aa:	e7da      	b.n	800e062 <_free_r+0x22>
 800e0ac:	d902      	bls.n	800e0b4 <_free_r+0x74>
 800e0ae:	230c      	movs	r3, #12
 800e0b0:	602b      	str	r3, [r5, #0]
 800e0b2:	e7d6      	b.n	800e062 <_free_r+0x22>
 800e0b4:	6820      	ldr	r0, [r4, #0]
 800e0b6:	1821      	adds	r1, r4, r0
 800e0b8:	428b      	cmp	r3, r1
 800e0ba:	bf04      	itt	eq
 800e0bc:	6819      	ldreq	r1, [r3, #0]
 800e0be:	685b      	ldreq	r3, [r3, #4]
 800e0c0:	6063      	str	r3, [r4, #4]
 800e0c2:	bf04      	itt	eq
 800e0c4:	1809      	addeq	r1, r1, r0
 800e0c6:	6021      	streq	r1, [r4, #0]
 800e0c8:	6054      	str	r4, [r2, #4]
 800e0ca:	e7ca      	b.n	800e062 <_free_r+0x22>
 800e0cc:	bd38      	pop	{r3, r4, r5, pc}
 800e0ce:	bf00      	nop
 800e0d0:	200023d0 	.word	0x200023d0

0800e0d4 <__ssputs_r>:
 800e0d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0d8:	688e      	ldr	r6, [r1, #8]
 800e0da:	461f      	mov	r7, r3
 800e0dc:	42be      	cmp	r6, r7
 800e0de:	680b      	ldr	r3, [r1, #0]
 800e0e0:	4682      	mov	sl, r0
 800e0e2:	460c      	mov	r4, r1
 800e0e4:	4690      	mov	r8, r2
 800e0e6:	d82d      	bhi.n	800e144 <__ssputs_r+0x70>
 800e0e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e0ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e0f0:	d026      	beq.n	800e140 <__ssputs_r+0x6c>
 800e0f2:	6965      	ldr	r5, [r4, #20]
 800e0f4:	6909      	ldr	r1, [r1, #16]
 800e0f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e0fa:	eba3 0901 	sub.w	r9, r3, r1
 800e0fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e102:	1c7b      	adds	r3, r7, #1
 800e104:	444b      	add	r3, r9
 800e106:	106d      	asrs	r5, r5, #1
 800e108:	429d      	cmp	r5, r3
 800e10a:	bf38      	it	cc
 800e10c:	461d      	movcc	r5, r3
 800e10e:	0553      	lsls	r3, r2, #21
 800e110:	d527      	bpl.n	800e162 <__ssputs_r+0x8e>
 800e112:	4629      	mov	r1, r5
 800e114:	f7ff fe8e 	bl	800de34 <_malloc_r>
 800e118:	4606      	mov	r6, r0
 800e11a:	b360      	cbz	r0, 800e176 <__ssputs_r+0xa2>
 800e11c:	6921      	ldr	r1, [r4, #16]
 800e11e:	464a      	mov	r2, r9
 800e120:	f000 fad6 	bl	800e6d0 <memcpy>
 800e124:	89a3      	ldrh	r3, [r4, #12]
 800e126:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e12a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e12e:	81a3      	strh	r3, [r4, #12]
 800e130:	6126      	str	r6, [r4, #16]
 800e132:	6165      	str	r5, [r4, #20]
 800e134:	444e      	add	r6, r9
 800e136:	eba5 0509 	sub.w	r5, r5, r9
 800e13a:	6026      	str	r6, [r4, #0]
 800e13c:	60a5      	str	r5, [r4, #8]
 800e13e:	463e      	mov	r6, r7
 800e140:	42be      	cmp	r6, r7
 800e142:	d900      	bls.n	800e146 <__ssputs_r+0x72>
 800e144:	463e      	mov	r6, r7
 800e146:	6820      	ldr	r0, [r4, #0]
 800e148:	4632      	mov	r2, r6
 800e14a:	4641      	mov	r1, r8
 800e14c:	f000 faa6 	bl	800e69c <memmove>
 800e150:	68a3      	ldr	r3, [r4, #8]
 800e152:	1b9b      	subs	r3, r3, r6
 800e154:	60a3      	str	r3, [r4, #8]
 800e156:	6823      	ldr	r3, [r4, #0]
 800e158:	4433      	add	r3, r6
 800e15a:	6023      	str	r3, [r4, #0]
 800e15c:	2000      	movs	r0, #0
 800e15e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e162:	462a      	mov	r2, r5
 800e164:	f000 fac2 	bl	800e6ec <_realloc_r>
 800e168:	4606      	mov	r6, r0
 800e16a:	2800      	cmp	r0, #0
 800e16c:	d1e0      	bne.n	800e130 <__ssputs_r+0x5c>
 800e16e:	6921      	ldr	r1, [r4, #16]
 800e170:	4650      	mov	r0, sl
 800e172:	f7ff ff65 	bl	800e040 <_free_r>
 800e176:	230c      	movs	r3, #12
 800e178:	f8ca 3000 	str.w	r3, [sl]
 800e17c:	89a3      	ldrh	r3, [r4, #12]
 800e17e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e182:	81a3      	strh	r3, [r4, #12]
 800e184:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e188:	e7e9      	b.n	800e15e <__ssputs_r+0x8a>
	...

0800e18c <_svfiprintf_r>:
 800e18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e190:	4698      	mov	r8, r3
 800e192:	898b      	ldrh	r3, [r1, #12]
 800e194:	061b      	lsls	r3, r3, #24
 800e196:	b09d      	sub	sp, #116	@ 0x74
 800e198:	4607      	mov	r7, r0
 800e19a:	460d      	mov	r5, r1
 800e19c:	4614      	mov	r4, r2
 800e19e:	d510      	bpl.n	800e1c2 <_svfiprintf_r+0x36>
 800e1a0:	690b      	ldr	r3, [r1, #16]
 800e1a2:	b973      	cbnz	r3, 800e1c2 <_svfiprintf_r+0x36>
 800e1a4:	2140      	movs	r1, #64	@ 0x40
 800e1a6:	f7ff fe45 	bl	800de34 <_malloc_r>
 800e1aa:	6028      	str	r0, [r5, #0]
 800e1ac:	6128      	str	r0, [r5, #16]
 800e1ae:	b930      	cbnz	r0, 800e1be <_svfiprintf_r+0x32>
 800e1b0:	230c      	movs	r3, #12
 800e1b2:	603b      	str	r3, [r7, #0]
 800e1b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e1b8:	b01d      	add	sp, #116	@ 0x74
 800e1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1be:	2340      	movs	r3, #64	@ 0x40
 800e1c0:	616b      	str	r3, [r5, #20]
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1c6:	2320      	movs	r3, #32
 800e1c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e1cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1d0:	2330      	movs	r3, #48	@ 0x30
 800e1d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e370 <_svfiprintf_r+0x1e4>
 800e1d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e1da:	f04f 0901 	mov.w	r9, #1
 800e1de:	4623      	mov	r3, r4
 800e1e0:	469a      	mov	sl, r3
 800e1e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1e6:	b10a      	cbz	r2, 800e1ec <_svfiprintf_r+0x60>
 800e1e8:	2a25      	cmp	r2, #37	@ 0x25
 800e1ea:	d1f9      	bne.n	800e1e0 <_svfiprintf_r+0x54>
 800e1ec:	ebba 0b04 	subs.w	fp, sl, r4
 800e1f0:	d00b      	beq.n	800e20a <_svfiprintf_r+0x7e>
 800e1f2:	465b      	mov	r3, fp
 800e1f4:	4622      	mov	r2, r4
 800e1f6:	4629      	mov	r1, r5
 800e1f8:	4638      	mov	r0, r7
 800e1fa:	f7ff ff6b 	bl	800e0d4 <__ssputs_r>
 800e1fe:	3001      	adds	r0, #1
 800e200:	f000 80a7 	beq.w	800e352 <_svfiprintf_r+0x1c6>
 800e204:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e206:	445a      	add	r2, fp
 800e208:	9209      	str	r2, [sp, #36]	@ 0x24
 800e20a:	f89a 3000 	ldrb.w	r3, [sl]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	f000 809f 	beq.w	800e352 <_svfiprintf_r+0x1c6>
 800e214:	2300      	movs	r3, #0
 800e216:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e21a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e21e:	f10a 0a01 	add.w	sl, sl, #1
 800e222:	9304      	str	r3, [sp, #16]
 800e224:	9307      	str	r3, [sp, #28]
 800e226:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e22a:	931a      	str	r3, [sp, #104]	@ 0x68
 800e22c:	4654      	mov	r4, sl
 800e22e:	2205      	movs	r2, #5
 800e230:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e234:	484e      	ldr	r0, [pc, #312]	@ (800e370 <_svfiprintf_r+0x1e4>)
 800e236:	f7f1 fffb 	bl	8000230 <memchr>
 800e23a:	9a04      	ldr	r2, [sp, #16]
 800e23c:	b9d8      	cbnz	r0, 800e276 <_svfiprintf_r+0xea>
 800e23e:	06d0      	lsls	r0, r2, #27
 800e240:	bf44      	itt	mi
 800e242:	2320      	movmi	r3, #32
 800e244:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e248:	0711      	lsls	r1, r2, #28
 800e24a:	bf44      	itt	mi
 800e24c:	232b      	movmi	r3, #43	@ 0x2b
 800e24e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e252:	f89a 3000 	ldrb.w	r3, [sl]
 800e256:	2b2a      	cmp	r3, #42	@ 0x2a
 800e258:	d015      	beq.n	800e286 <_svfiprintf_r+0xfa>
 800e25a:	9a07      	ldr	r2, [sp, #28]
 800e25c:	4654      	mov	r4, sl
 800e25e:	2000      	movs	r0, #0
 800e260:	f04f 0c0a 	mov.w	ip, #10
 800e264:	4621      	mov	r1, r4
 800e266:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e26a:	3b30      	subs	r3, #48	@ 0x30
 800e26c:	2b09      	cmp	r3, #9
 800e26e:	d94b      	bls.n	800e308 <_svfiprintf_r+0x17c>
 800e270:	b1b0      	cbz	r0, 800e2a0 <_svfiprintf_r+0x114>
 800e272:	9207      	str	r2, [sp, #28]
 800e274:	e014      	b.n	800e2a0 <_svfiprintf_r+0x114>
 800e276:	eba0 0308 	sub.w	r3, r0, r8
 800e27a:	fa09 f303 	lsl.w	r3, r9, r3
 800e27e:	4313      	orrs	r3, r2
 800e280:	9304      	str	r3, [sp, #16]
 800e282:	46a2      	mov	sl, r4
 800e284:	e7d2      	b.n	800e22c <_svfiprintf_r+0xa0>
 800e286:	9b03      	ldr	r3, [sp, #12]
 800e288:	1d19      	adds	r1, r3, #4
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	9103      	str	r1, [sp, #12]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	bfbb      	ittet	lt
 800e292:	425b      	neglt	r3, r3
 800e294:	f042 0202 	orrlt.w	r2, r2, #2
 800e298:	9307      	strge	r3, [sp, #28]
 800e29a:	9307      	strlt	r3, [sp, #28]
 800e29c:	bfb8      	it	lt
 800e29e:	9204      	strlt	r2, [sp, #16]
 800e2a0:	7823      	ldrb	r3, [r4, #0]
 800e2a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800e2a4:	d10a      	bne.n	800e2bc <_svfiprintf_r+0x130>
 800e2a6:	7863      	ldrb	r3, [r4, #1]
 800e2a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2aa:	d132      	bne.n	800e312 <_svfiprintf_r+0x186>
 800e2ac:	9b03      	ldr	r3, [sp, #12]
 800e2ae:	1d1a      	adds	r2, r3, #4
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	9203      	str	r2, [sp, #12]
 800e2b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e2b8:	3402      	adds	r4, #2
 800e2ba:	9305      	str	r3, [sp, #20]
 800e2bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e380 <_svfiprintf_r+0x1f4>
 800e2c0:	7821      	ldrb	r1, [r4, #0]
 800e2c2:	2203      	movs	r2, #3
 800e2c4:	4650      	mov	r0, sl
 800e2c6:	f7f1 ffb3 	bl	8000230 <memchr>
 800e2ca:	b138      	cbz	r0, 800e2dc <_svfiprintf_r+0x150>
 800e2cc:	9b04      	ldr	r3, [sp, #16]
 800e2ce:	eba0 000a 	sub.w	r0, r0, sl
 800e2d2:	2240      	movs	r2, #64	@ 0x40
 800e2d4:	4082      	lsls	r2, r0
 800e2d6:	4313      	orrs	r3, r2
 800e2d8:	3401      	adds	r4, #1
 800e2da:	9304      	str	r3, [sp, #16]
 800e2dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2e0:	4824      	ldr	r0, [pc, #144]	@ (800e374 <_svfiprintf_r+0x1e8>)
 800e2e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e2e6:	2206      	movs	r2, #6
 800e2e8:	f7f1 ffa2 	bl	8000230 <memchr>
 800e2ec:	2800      	cmp	r0, #0
 800e2ee:	d036      	beq.n	800e35e <_svfiprintf_r+0x1d2>
 800e2f0:	4b21      	ldr	r3, [pc, #132]	@ (800e378 <_svfiprintf_r+0x1ec>)
 800e2f2:	bb1b      	cbnz	r3, 800e33c <_svfiprintf_r+0x1b0>
 800e2f4:	9b03      	ldr	r3, [sp, #12]
 800e2f6:	3307      	adds	r3, #7
 800e2f8:	f023 0307 	bic.w	r3, r3, #7
 800e2fc:	3308      	adds	r3, #8
 800e2fe:	9303      	str	r3, [sp, #12]
 800e300:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e302:	4433      	add	r3, r6
 800e304:	9309      	str	r3, [sp, #36]	@ 0x24
 800e306:	e76a      	b.n	800e1de <_svfiprintf_r+0x52>
 800e308:	fb0c 3202 	mla	r2, ip, r2, r3
 800e30c:	460c      	mov	r4, r1
 800e30e:	2001      	movs	r0, #1
 800e310:	e7a8      	b.n	800e264 <_svfiprintf_r+0xd8>
 800e312:	2300      	movs	r3, #0
 800e314:	3401      	adds	r4, #1
 800e316:	9305      	str	r3, [sp, #20]
 800e318:	4619      	mov	r1, r3
 800e31a:	f04f 0c0a 	mov.w	ip, #10
 800e31e:	4620      	mov	r0, r4
 800e320:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e324:	3a30      	subs	r2, #48	@ 0x30
 800e326:	2a09      	cmp	r2, #9
 800e328:	d903      	bls.n	800e332 <_svfiprintf_r+0x1a6>
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d0c6      	beq.n	800e2bc <_svfiprintf_r+0x130>
 800e32e:	9105      	str	r1, [sp, #20]
 800e330:	e7c4      	b.n	800e2bc <_svfiprintf_r+0x130>
 800e332:	fb0c 2101 	mla	r1, ip, r1, r2
 800e336:	4604      	mov	r4, r0
 800e338:	2301      	movs	r3, #1
 800e33a:	e7f0      	b.n	800e31e <_svfiprintf_r+0x192>
 800e33c:	ab03      	add	r3, sp, #12
 800e33e:	9300      	str	r3, [sp, #0]
 800e340:	462a      	mov	r2, r5
 800e342:	4b0e      	ldr	r3, [pc, #56]	@ (800e37c <_svfiprintf_r+0x1f0>)
 800e344:	a904      	add	r1, sp, #16
 800e346:	4638      	mov	r0, r7
 800e348:	f3af 8000 	nop.w
 800e34c:	1c42      	adds	r2, r0, #1
 800e34e:	4606      	mov	r6, r0
 800e350:	d1d6      	bne.n	800e300 <_svfiprintf_r+0x174>
 800e352:	89ab      	ldrh	r3, [r5, #12]
 800e354:	065b      	lsls	r3, r3, #25
 800e356:	f53f af2d 	bmi.w	800e1b4 <_svfiprintf_r+0x28>
 800e35a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e35c:	e72c      	b.n	800e1b8 <_svfiprintf_r+0x2c>
 800e35e:	ab03      	add	r3, sp, #12
 800e360:	9300      	str	r3, [sp, #0]
 800e362:	462a      	mov	r2, r5
 800e364:	4b05      	ldr	r3, [pc, #20]	@ (800e37c <_svfiprintf_r+0x1f0>)
 800e366:	a904      	add	r1, sp, #16
 800e368:	4638      	mov	r0, r7
 800e36a:	f000 f879 	bl	800e460 <_printf_i>
 800e36e:	e7ed      	b.n	800e34c <_svfiprintf_r+0x1c0>
 800e370:	0800e7fc 	.word	0x0800e7fc
 800e374:	0800e806 	.word	0x0800e806
 800e378:	00000000 	.word	0x00000000
 800e37c:	0800e0d5 	.word	0x0800e0d5
 800e380:	0800e802 	.word	0x0800e802

0800e384 <_printf_common>:
 800e384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e388:	4616      	mov	r6, r2
 800e38a:	4698      	mov	r8, r3
 800e38c:	688a      	ldr	r2, [r1, #8]
 800e38e:	690b      	ldr	r3, [r1, #16]
 800e390:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e394:	4293      	cmp	r3, r2
 800e396:	bfb8      	it	lt
 800e398:	4613      	movlt	r3, r2
 800e39a:	6033      	str	r3, [r6, #0]
 800e39c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e3a0:	4607      	mov	r7, r0
 800e3a2:	460c      	mov	r4, r1
 800e3a4:	b10a      	cbz	r2, 800e3aa <_printf_common+0x26>
 800e3a6:	3301      	adds	r3, #1
 800e3a8:	6033      	str	r3, [r6, #0]
 800e3aa:	6823      	ldr	r3, [r4, #0]
 800e3ac:	0699      	lsls	r1, r3, #26
 800e3ae:	bf42      	ittt	mi
 800e3b0:	6833      	ldrmi	r3, [r6, #0]
 800e3b2:	3302      	addmi	r3, #2
 800e3b4:	6033      	strmi	r3, [r6, #0]
 800e3b6:	6825      	ldr	r5, [r4, #0]
 800e3b8:	f015 0506 	ands.w	r5, r5, #6
 800e3bc:	d106      	bne.n	800e3cc <_printf_common+0x48>
 800e3be:	f104 0a19 	add.w	sl, r4, #25
 800e3c2:	68e3      	ldr	r3, [r4, #12]
 800e3c4:	6832      	ldr	r2, [r6, #0]
 800e3c6:	1a9b      	subs	r3, r3, r2
 800e3c8:	42ab      	cmp	r3, r5
 800e3ca:	dc26      	bgt.n	800e41a <_printf_common+0x96>
 800e3cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e3d0:	6822      	ldr	r2, [r4, #0]
 800e3d2:	3b00      	subs	r3, #0
 800e3d4:	bf18      	it	ne
 800e3d6:	2301      	movne	r3, #1
 800e3d8:	0692      	lsls	r2, r2, #26
 800e3da:	d42b      	bmi.n	800e434 <_printf_common+0xb0>
 800e3dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e3e0:	4641      	mov	r1, r8
 800e3e2:	4638      	mov	r0, r7
 800e3e4:	47c8      	blx	r9
 800e3e6:	3001      	adds	r0, #1
 800e3e8:	d01e      	beq.n	800e428 <_printf_common+0xa4>
 800e3ea:	6823      	ldr	r3, [r4, #0]
 800e3ec:	6922      	ldr	r2, [r4, #16]
 800e3ee:	f003 0306 	and.w	r3, r3, #6
 800e3f2:	2b04      	cmp	r3, #4
 800e3f4:	bf02      	ittt	eq
 800e3f6:	68e5      	ldreq	r5, [r4, #12]
 800e3f8:	6833      	ldreq	r3, [r6, #0]
 800e3fa:	1aed      	subeq	r5, r5, r3
 800e3fc:	68a3      	ldr	r3, [r4, #8]
 800e3fe:	bf0c      	ite	eq
 800e400:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e404:	2500      	movne	r5, #0
 800e406:	4293      	cmp	r3, r2
 800e408:	bfc4      	itt	gt
 800e40a:	1a9b      	subgt	r3, r3, r2
 800e40c:	18ed      	addgt	r5, r5, r3
 800e40e:	2600      	movs	r6, #0
 800e410:	341a      	adds	r4, #26
 800e412:	42b5      	cmp	r5, r6
 800e414:	d11a      	bne.n	800e44c <_printf_common+0xc8>
 800e416:	2000      	movs	r0, #0
 800e418:	e008      	b.n	800e42c <_printf_common+0xa8>
 800e41a:	2301      	movs	r3, #1
 800e41c:	4652      	mov	r2, sl
 800e41e:	4641      	mov	r1, r8
 800e420:	4638      	mov	r0, r7
 800e422:	47c8      	blx	r9
 800e424:	3001      	adds	r0, #1
 800e426:	d103      	bne.n	800e430 <_printf_common+0xac>
 800e428:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e42c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e430:	3501      	adds	r5, #1
 800e432:	e7c6      	b.n	800e3c2 <_printf_common+0x3e>
 800e434:	18e1      	adds	r1, r4, r3
 800e436:	1c5a      	adds	r2, r3, #1
 800e438:	2030      	movs	r0, #48	@ 0x30
 800e43a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e43e:	4422      	add	r2, r4
 800e440:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e444:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e448:	3302      	adds	r3, #2
 800e44a:	e7c7      	b.n	800e3dc <_printf_common+0x58>
 800e44c:	2301      	movs	r3, #1
 800e44e:	4622      	mov	r2, r4
 800e450:	4641      	mov	r1, r8
 800e452:	4638      	mov	r0, r7
 800e454:	47c8      	blx	r9
 800e456:	3001      	adds	r0, #1
 800e458:	d0e6      	beq.n	800e428 <_printf_common+0xa4>
 800e45a:	3601      	adds	r6, #1
 800e45c:	e7d9      	b.n	800e412 <_printf_common+0x8e>
	...

0800e460 <_printf_i>:
 800e460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e464:	7e0f      	ldrb	r7, [r1, #24]
 800e466:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e468:	2f78      	cmp	r7, #120	@ 0x78
 800e46a:	4691      	mov	r9, r2
 800e46c:	4680      	mov	r8, r0
 800e46e:	460c      	mov	r4, r1
 800e470:	469a      	mov	sl, r3
 800e472:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e476:	d807      	bhi.n	800e488 <_printf_i+0x28>
 800e478:	2f62      	cmp	r7, #98	@ 0x62
 800e47a:	d80a      	bhi.n	800e492 <_printf_i+0x32>
 800e47c:	2f00      	cmp	r7, #0
 800e47e:	f000 80d1 	beq.w	800e624 <_printf_i+0x1c4>
 800e482:	2f58      	cmp	r7, #88	@ 0x58
 800e484:	f000 80b8 	beq.w	800e5f8 <_printf_i+0x198>
 800e488:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e48c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e490:	e03a      	b.n	800e508 <_printf_i+0xa8>
 800e492:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e496:	2b15      	cmp	r3, #21
 800e498:	d8f6      	bhi.n	800e488 <_printf_i+0x28>
 800e49a:	a101      	add	r1, pc, #4	@ (adr r1, 800e4a0 <_printf_i+0x40>)
 800e49c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e4a0:	0800e4f9 	.word	0x0800e4f9
 800e4a4:	0800e50d 	.word	0x0800e50d
 800e4a8:	0800e489 	.word	0x0800e489
 800e4ac:	0800e489 	.word	0x0800e489
 800e4b0:	0800e489 	.word	0x0800e489
 800e4b4:	0800e489 	.word	0x0800e489
 800e4b8:	0800e50d 	.word	0x0800e50d
 800e4bc:	0800e489 	.word	0x0800e489
 800e4c0:	0800e489 	.word	0x0800e489
 800e4c4:	0800e489 	.word	0x0800e489
 800e4c8:	0800e489 	.word	0x0800e489
 800e4cc:	0800e60b 	.word	0x0800e60b
 800e4d0:	0800e537 	.word	0x0800e537
 800e4d4:	0800e5c5 	.word	0x0800e5c5
 800e4d8:	0800e489 	.word	0x0800e489
 800e4dc:	0800e489 	.word	0x0800e489
 800e4e0:	0800e62d 	.word	0x0800e62d
 800e4e4:	0800e489 	.word	0x0800e489
 800e4e8:	0800e537 	.word	0x0800e537
 800e4ec:	0800e489 	.word	0x0800e489
 800e4f0:	0800e489 	.word	0x0800e489
 800e4f4:	0800e5cd 	.word	0x0800e5cd
 800e4f8:	6833      	ldr	r3, [r6, #0]
 800e4fa:	1d1a      	adds	r2, r3, #4
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	6032      	str	r2, [r6, #0]
 800e500:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e504:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e508:	2301      	movs	r3, #1
 800e50a:	e09c      	b.n	800e646 <_printf_i+0x1e6>
 800e50c:	6833      	ldr	r3, [r6, #0]
 800e50e:	6820      	ldr	r0, [r4, #0]
 800e510:	1d19      	adds	r1, r3, #4
 800e512:	6031      	str	r1, [r6, #0]
 800e514:	0606      	lsls	r6, r0, #24
 800e516:	d501      	bpl.n	800e51c <_printf_i+0xbc>
 800e518:	681d      	ldr	r5, [r3, #0]
 800e51a:	e003      	b.n	800e524 <_printf_i+0xc4>
 800e51c:	0645      	lsls	r5, r0, #25
 800e51e:	d5fb      	bpl.n	800e518 <_printf_i+0xb8>
 800e520:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e524:	2d00      	cmp	r5, #0
 800e526:	da03      	bge.n	800e530 <_printf_i+0xd0>
 800e528:	232d      	movs	r3, #45	@ 0x2d
 800e52a:	426d      	negs	r5, r5
 800e52c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e530:	4858      	ldr	r0, [pc, #352]	@ (800e694 <_printf_i+0x234>)
 800e532:	230a      	movs	r3, #10
 800e534:	e011      	b.n	800e55a <_printf_i+0xfa>
 800e536:	6821      	ldr	r1, [r4, #0]
 800e538:	6833      	ldr	r3, [r6, #0]
 800e53a:	0608      	lsls	r0, r1, #24
 800e53c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e540:	d402      	bmi.n	800e548 <_printf_i+0xe8>
 800e542:	0649      	lsls	r1, r1, #25
 800e544:	bf48      	it	mi
 800e546:	b2ad      	uxthmi	r5, r5
 800e548:	2f6f      	cmp	r7, #111	@ 0x6f
 800e54a:	4852      	ldr	r0, [pc, #328]	@ (800e694 <_printf_i+0x234>)
 800e54c:	6033      	str	r3, [r6, #0]
 800e54e:	bf14      	ite	ne
 800e550:	230a      	movne	r3, #10
 800e552:	2308      	moveq	r3, #8
 800e554:	2100      	movs	r1, #0
 800e556:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e55a:	6866      	ldr	r6, [r4, #4]
 800e55c:	60a6      	str	r6, [r4, #8]
 800e55e:	2e00      	cmp	r6, #0
 800e560:	db05      	blt.n	800e56e <_printf_i+0x10e>
 800e562:	6821      	ldr	r1, [r4, #0]
 800e564:	432e      	orrs	r6, r5
 800e566:	f021 0104 	bic.w	r1, r1, #4
 800e56a:	6021      	str	r1, [r4, #0]
 800e56c:	d04b      	beq.n	800e606 <_printf_i+0x1a6>
 800e56e:	4616      	mov	r6, r2
 800e570:	fbb5 f1f3 	udiv	r1, r5, r3
 800e574:	fb03 5711 	mls	r7, r3, r1, r5
 800e578:	5dc7      	ldrb	r7, [r0, r7]
 800e57a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e57e:	462f      	mov	r7, r5
 800e580:	42bb      	cmp	r3, r7
 800e582:	460d      	mov	r5, r1
 800e584:	d9f4      	bls.n	800e570 <_printf_i+0x110>
 800e586:	2b08      	cmp	r3, #8
 800e588:	d10b      	bne.n	800e5a2 <_printf_i+0x142>
 800e58a:	6823      	ldr	r3, [r4, #0]
 800e58c:	07df      	lsls	r7, r3, #31
 800e58e:	d508      	bpl.n	800e5a2 <_printf_i+0x142>
 800e590:	6923      	ldr	r3, [r4, #16]
 800e592:	6861      	ldr	r1, [r4, #4]
 800e594:	4299      	cmp	r1, r3
 800e596:	bfde      	ittt	le
 800e598:	2330      	movle	r3, #48	@ 0x30
 800e59a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e59e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e5a2:	1b92      	subs	r2, r2, r6
 800e5a4:	6122      	str	r2, [r4, #16]
 800e5a6:	f8cd a000 	str.w	sl, [sp]
 800e5aa:	464b      	mov	r3, r9
 800e5ac:	aa03      	add	r2, sp, #12
 800e5ae:	4621      	mov	r1, r4
 800e5b0:	4640      	mov	r0, r8
 800e5b2:	f7ff fee7 	bl	800e384 <_printf_common>
 800e5b6:	3001      	adds	r0, #1
 800e5b8:	d14a      	bne.n	800e650 <_printf_i+0x1f0>
 800e5ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e5be:	b004      	add	sp, #16
 800e5c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5c4:	6823      	ldr	r3, [r4, #0]
 800e5c6:	f043 0320 	orr.w	r3, r3, #32
 800e5ca:	6023      	str	r3, [r4, #0]
 800e5cc:	4832      	ldr	r0, [pc, #200]	@ (800e698 <_printf_i+0x238>)
 800e5ce:	2778      	movs	r7, #120	@ 0x78
 800e5d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e5d4:	6823      	ldr	r3, [r4, #0]
 800e5d6:	6831      	ldr	r1, [r6, #0]
 800e5d8:	061f      	lsls	r7, r3, #24
 800e5da:	f851 5b04 	ldr.w	r5, [r1], #4
 800e5de:	d402      	bmi.n	800e5e6 <_printf_i+0x186>
 800e5e0:	065f      	lsls	r7, r3, #25
 800e5e2:	bf48      	it	mi
 800e5e4:	b2ad      	uxthmi	r5, r5
 800e5e6:	6031      	str	r1, [r6, #0]
 800e5e8:	07d9      	lsls	r1, r3, #31
 800e5ea:	bf44      	itt	mi
 800e5ec:	f043 0320 	orrmi.w	r3, r3, #32
 800e5f0:	6023      	strmi	r3, [r4, #0]
 800e5f2:	b11d      	cbz	r5, 800e5fc <_printf_i+0x19c>
 800e5f4:	2310      	movs	r3, #16
 800e5f6:	e7ad      	b.n	800e554 <_printf_i+0xf4>
 800e5f8:	4826      	ldr	r0, [pc, #152]	@ (800e694 <_printf_i+0x234>)
 800e5fa:	e7e9      	b.n	800e5d0 <_printf_i+0x170>
 800e5fc:	6823      	ldr	r3, [r4, #0]
 800e5fe:	f023 0320 	bic.w	r3, r3, #32
 800e602:	6023      	str	r3, [r4, #0]
 800e604:	e7f6      	b.n	800e5f4 <_printf_i+0x194>
 800e606:	4616      	mov	r6, r2
 800e608:	e7bd      	b.n	800e586 <_printf_i+0x126>
 800e60a:	6833      	ldr	r3, [r6, #0]
 800e60c:	6825      	ldr	r5, [r4, #0]
 800e60e:	6961      	ldr	r1, [r4, #20]
 800e610:	1d18      	adds	r0, r3, #4
 800e612:	6030      	str	r0, [r6, #0]
 800e614:	062e      	lsls	r6, r5, #24
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	d501      	bpl.n	800e61e <_printf_i+0x1be>
 800e61a:	6019      	str	r1, [r3, #0]
 800e61c:	e002      	b.n	800e624 <_printf_i+0x1c4>
 800e61e:	0668      	lsls	r0, r5, #25
 800e620:	d5fb      	bpl.n	800e61a <_printf_i+0x1ba>
 800e622:	8019      	strh	r1, [r3, #0]
 800e624:	2300      	movs	r3, #0
 800e626:	6123      	str	r3, [r4, #16]
 800e628:	4616      	mov	r6, r2
 800e62a:	e7bc      	b.n	800e5a6 <_printf_i+0x146>
 800e62c:	6833      	ldr	r3, [r6, #0]
 800e62e:	1d1a      	adds	r2, r3, #4
 800e630:	6032      	str	r2, [r6, #0]
 800e632:	681e      	ldr	r6, [r3, #0]
 800e634:	6862      	ldr	r2, [r4, #4]
 800e636:	2100      	movs	r1, #0
 800e638:	4630      	mov	r0, r6
 800e63a:	f7f1 fdf9 	bl	8000230 <memchr>
 800e63e:	b108      	cbz	r0, 800e644 <_printf_i+0x1e4>
 800e640:	1b80      	subs	r0, r0, r6
 800e642:	6060      	str	r0, [r4, #4]
 800e644:	6863      	ldr	r3, [r4, #4]
 800e646:	6123      	str	r3, [r4, #16]
 800e648:	2300      	movs	r3, #0
 800e64a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e64e:	e7aa      	b.n	800e5a6 <_printf_i+0x146>
 800e650:	6923      	ldr	r3, [r4, #16]
 800e652:	4632      	mov	r2, r6
 800e654:	4649      	mov	r1, r9
 800e656:	4640      	mov	r0, r8
 800e658:	47d0      	blx	sl
 800e65a:	3001      	adds	r0, #1
 800e65c:	d0ad      	beq.n	800e5ba <_printf_i+0x15a>
 800e65e:	6823      	ldr	r3, [r4, #0]
 800e660:	079b      	lsls	r3, r3, #30
 800e662:	d413      	bmi.n	800e68c <_printf_i+0x22c>
 800e664:	68e0      	ldr	r0, [r4, #12]
 800e666:	9b03      	ldr	r3, [sp, #12]
 800e668:	4298      	cmp	r0, r3
 800e66a:	bfb8      	it	lt
 800e66c:	4618      	movlt	r0, r3
 800e66e:	e7a6      	b.n	800e5be <_printf_i+0x15e>
 800e670:	2301      	movs	r3, #1
 800e672:	4632      	mov	r2, r6
 800e674:	4649      	mov	r1, r9
 800e676:	4640      	mov	r0, r8
 800e678:	47d0      	blx	sl
 800e67a:	3001      	adds	r0, #1
 800e67c:	d09d      	beq.n	800e5ba <_printf_i+0x15a>
 800e67e:	3501      	adds	r5, #1
 800e680:	68e3      	ldr	r3, [r4, #12]
 800e682:	9903      	ldr	r1, [sp, #12]
 800e684:	1a5b      	subs	r3, r3, r1
 800e686:	42ab      	cmp	r3, r5
 800e688:	dcf2      	bgt.n	800e670 <_printf_i+0x210>
 800e68a:	e7eb      	b.n	800e664 <_printf_i+0x204>
 800e68c:	2500      	movs	r5, #0
 800e68e:	f104 0619 	add.w	r6, r4, #25
 800e692:	e7f5      	b.n	800e680 <_printf_i+0x220>
 800e694:	0800e80d 	.word	0x0800e80d
 800e698:	0800e81e 	.word	0x0800e81e

0800e69c <memmove>:
 800e69c:	4288      	cmp	r0, r1
 800e69e:	b510      	push	{r4, lr}
 800e6a0:	eb01 0402 	add.w	r4, r1, r2
 800e6a4:	d902      	bls.n	800e6ac <memmove+0x10>
 800e6a6:	4284      	cmp	r4, r0
 800e6a8:	4623      	mov	r3, r4
 800e6aa:	d807      	bhi.n	800e6bc <memmove+0x20>
 800e6ac:	1e43      	subs	r3, r0, #1
 800e6ae:	42a1      	cmp	r1, r4
 800e6b0:	d008      	beq.n	800e6c4 <memmove+0x28>
 800e6b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e6b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e6ba:	e7f8      	b.n	800e6ae <memmove+0x12>
 800e6bc:	4402      	add	r2, r0
 800e6be:	4601      	mov	r1, r0
 800e6c0:	428a      	cmp	r2, r1
 800e6c2:	d100      	bne.n	800e6c6 <memmove+0x2a>
 800e6c4:	bd10      	pop	{r4, pc}
 800e6c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e6ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e6ce:	e7f7      	b.n	800e6c0 <memmove+0x24>

0800e6d0 <memcpy>:
 800e6d0:	440a      	add	r2, r1
 800e6d2:	4291      	cmp	r1, r2
 800e6d4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800e6d8:	d100      	bne.n	800e6dc <memcpy+0xc>
 800e6da:	4770      	bx	lr
 800e6dc:	b510      	push	{r4, lr}
 800e6de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e6e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e6e6:	4291      	cmp	r1, r2
 800e6e8:	d1f9      	bne.n	800e6de <memcpy+0xe>
 800e6ea:	bd10      	pop	{r4, pc}

0800e6ec <_realloc_r>:
 800e6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6f0:	4607      	mov	r7, r0
 800e6f2:	4614      	mov	r4, r2
 800e6f4:	460d      	mov	r5, r1
 800e6f6:	b921      	cbnz	r1, 800e702 <_realloc_r+0x16>
 800e6f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6fc:	4611      	mov	r1, r2
 800e6fe:	f7ff bb99 	b.w	800de34 <_malloc_r>
 800e702:	b92a      	cbnz	r2, 800e710 <_realloc_r+0x24>
 800e704:	f7ff fc9c 	bl	800e040 <_free_r>
 800e708:	4625      	mov	r5, r4
 800e70a:	4628      	mov	r0, r5
 800e70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e710:	f000 f81a 	bl	800e748 <_malloc_usable_size_r>
 800e714:	4284      	cmp	r4, r0
 800e716:	4606      	mov	r6, r0
 800e718:	d802      	bhi.n	800e720 <_realloc_r+0x34>
 800e71a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e71e:	d8f4      	bhi.n	800e70a <_realloc_r+0x1e>
 800e720:	4621      	mov	r1, r4
 800e722:	4638      	mov	r0, r7
 800e724:	f7ff fb86 	bl	800de34 <_malloc_r>
 800e728:	4680      	mov	r8, r0
 800e72a:	b908      	cbnz	r0, 800e730 <_realloc_r+0x44>
 800e72c:	4645      	mov	r5, r8
 800e72e:	e7ec      	b.n	800e70a <_realloc_r+0x1e>
 800e730:	42b4      	cmp	r4, r6
 800e732:	4622      	mov	r2, r4
 800e734:	4629      	mov	r1, r5
 800e736:	bf28      	it	cs
 800e738:	4632      	movcs	r2, r6
 800e73a:	f7ff ffc9 	bl	800e6d0 <memcpy>
 800e73e:	4629      	mov	r1, r5
 800e740:	4638      	mov	r0, r7
 800e742:	f7ff fc7d 	bl	800e040 <_free_r>
 800e746:	e7f1      	b.n	800e72c <_realloc_r+0x40>

0800e748 <_malloc_usable_size_r>:
 800e748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e74c:	1f18      	subs	r0, r3, #4
 800e74e:	2b00      	cmp	r3, #0
 800e750:	bfbc      	itt	lt
 800e752:	580b      	ldrlt	r3, [r1, r0]
 800e754:	18c0      	addlt	r0, r0, r3
 800e756:	4770      	bx	lr

0800e758 <_init>:
 800e758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e75a:	bf00      	nop
 800e75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e75e:	bc08      	pop	{r3}
 800e760:	469e      	mov	lr, r3
 800e762:	4770      	bx	lr

0800e764 <_fini>:
 800e764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e766:	bf00      	nop
 800e768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e76a:	bc08      	pop	{r3}
 800e76c:	469e      	mov	lr, r3
 800e76e:	4770      	bx	lr
