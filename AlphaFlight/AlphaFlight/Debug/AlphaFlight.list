
AlphaFlight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011b2c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08011d10  08011d10  00012d10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012154  08012154  000142d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012154  08012154  00013154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801215c  0801215c  000142d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801215c  0801215c  0001315c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012160  08012160  00013160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d4  20000000  08012164  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023bc  200002d4  08012438  000142d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002690  08012438  00014690  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000142d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000257c8  00000000  00000000  00014304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053ec  00000000  00000000  00039acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002078  00000000  00000000  0003eeb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000190e  00000000  00000000  00040f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a670  00000000  00000000  0004283e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029bb6  00000000  00000000  0006ceae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0431  00000000  00000000  00096a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00186e95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099f8  00000000  00000000  00186ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001908d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002d4 	.word	0x200002d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011cf4 	.word	0x08011cf4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002d8 	.word	0x200002d8
 800021c:	08011cf4 	.word	0x08011cf4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <CRSF_Init>:

CRSF_Data_t crsf_data = {0};  // Struct instance to hold CRSF channel data
static UART_HandleTypeDef *crsf_huart;  // Pointer to UART handler
static uint8_t crsf_rx_buffer[CRSF_BUFFER_SIZE];  // DMA buffer

void CRSF_Init(UART_HandleTypeDef *huart) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
    crsf_huart = huart;
 8000f2c:	4a06      	ldr	r2, [pc, #24]	@ (8000f48 <CRSF_Init+0x24>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_DMA(crsf_huart, crsf_rx_buffer, CRSF_BUFFER_SIZE);  // Start UART DMA
 8000f32:	4b05      	ldr	r3, [pc, #20]	@ (8000f48 <CRSF_Init+0x24>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2240      	movs	r2, #64	@ 0x40
 8000f38:	4904      	ldr	r1, [pc, #16]	@ (8000f4c <CRSF_Init+0x28>)
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f008 f9b4 	bl	80092a8 <HAL_UART_Receive_DMA>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000310 	.word	0x20000310
 8000f4c:	20000314 	.word	0x20000314

08000f50 <CRSF_GetRxCount>:

// Get received byte count in DMA buffer
static uint16_t CRSF_GetRxCount() {
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
    return CRSF_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(crsf_huart->hdmarx);
 8000f54:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <CRSF_GetRxCount+0x20>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000f64:	b29b      	uxth	r3, r3
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	20000310 	.word	0x20000310

08000f74 <CRSF_DecodeChannels>:

// Decode CRSF channel data
static void CRSF_DecodeChannels(uint8_t *data) {
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
    crsf_data.channels[0]  = (data[0] | data[1] << 8) & 0x07FF;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	b21a      	sxth	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3301      	adds	r3, #1
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	b21b      	sxth	r3, r3
 8000f8a:	021b      	lsls	r3, r3, #8
 8000f8c:	b21b      	sxth	r3, r3
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	4b7d      	ldr	r3, [pc, #500]	@ (8001190 <CRSF_DecodeChannels+0x21c>)
 8000f9c:	801a      	strh	r2, [r3, #0]
    crsf_data.channels[1]  = (data[1] >> 3 | data[2] << 5) & 0x07FF;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	08db      	lsrs	r3, r3, #3
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	b21a      	sxth	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3302      	adds	r3, #2
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	b21b      	sxth	r3, r3
 8000fb2:	015b      	lsls	r3, r3, #5
 8000fb4:	b21b      	sxth	r3, r3
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	4b73      	ldr	r3, [pc, #460]	@ (8001190 <CRSF_DecodeChannels+0x21c>)
 8000fc4:	805a      	strh	r2, [r3, #2]
    crsf_data.channels[2]  = (data[2] >> 6 | data[3] << 2 | data[4] << 10) & 0x07FF;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3302      	adds	r3, #2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	099b      	lsrs	r3, r3, #6
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	b21a      	sxth	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3303      	adds	r3, #3
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	b21b      	sxth	r3, r3
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	029b      	lsls	r3, r3, #10
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	4b65      	ldr	r3, [pc, #404]	@ (8001190 <CRSF_DecodeChannels+0x21c>)
 8000ffc:	809a      	strh	r2, [r3, #4]
    crsf_data.channels[3]  = (data[4] >> 1 | data[5] << 7) & 0x07FF;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3304      	adds	r3, #4
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	085b      	lsrs	r3, r3, #1
 8001006:	b2db      	uxtb	r3, r3
 8001008:	b21a      	sxth	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3305      	adds	r3, #5
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b21b      	sxth	r3, r3
 8001012:	01db      	lsls	r3, r3, #7
 8001014:	b21b      	sxth	r3, r3
 8001016:	4313      	orrs	r3, r2
 8001018:	b21b      	sxth	r3, r3
 800101a:	b29b      	uxth	r3, r3
 800101c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001020:	b29a      	uxth	r2, r3
 8001022:	4b5b      	ldr	r3, [pc, #364]	@ (8001190 <CRSF_DecodeChannels+0x21c>)
 8001024:	80da      	strh	r2, [r3, #6]
    crsf_data.channels[4]  = (data[5] >> 4 | data[6] << 4) & 0x07FF;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3305      	adds	r3, #5
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	091b      	lsrs	r3, r3, #4
 800102e:	b2db      	uxtb	r3, r3
 8001030:	b21a      	sxth	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3306      	adds	r3, #6
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	b21b      	sxth	r3, r3
 800103a:	011b      	lsls	r3, r3, #4
 800103c:	b21b      	sxth	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b21b      	sxth	r3, r3
 8001042:	b29b      	uxth	r3, r3
 8001044:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001048:	b29a      	uxth	r2, r3
 800104a:	4b51      	ldr	r3, [pc, #324]	@ (8001190 <CRSF_DecodeChannels+0x21c>)
 800104c:	811a      	strh	r2, [r3, #8]
    crsf_data.channels[5]  = (data[6] >> 7 | data[7] << 1 | data[8] << 9) & 0x07FF;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3306      	adds	r3, #6
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	09db      	lsrs	r3, r3, #7
 8001056:	b2db      	uxtb	r3, r3
 8001058:	b21a      	sxth	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3307      	adds	r3, #7
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b21b      	sxth	r3, r3
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	b21b      	sxth	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	b21a      	sxth	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3308      	adds	r3, #8
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b21b      	sxth	r3, r3
 8001072:	025b      	lsls	r3, r3, #9
 8001074:	b21b      	sxth	r3, r3
 8001076:	4313      	orrs	r3, r2
 8001078:	b21b      	sxth	r3, r3
 800107a:	b29b      	uxth	r3, r3
 800107c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001080:	b29a      	uxth	r2, r3
 8001082:	4b43      	ldr	r3, [pc, #268]	@ (8001190 <CRSF_DecodeChannels+0x21c>)
 8001084:	815a      	strh	r2, [r3, #10]
    crsf_data.channels[6]  = (data[8] >> 2 | data[9] << 6) & 0x07FF;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3308      	adds	r3, #8
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	b2db      	uxtb	r3, r3
 8001090:	b21a      	sxth	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3309      	adds	r3, #9
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	b21b      	sxth	r3, r3
 800109a:	019b      	lsls	r3, r3, #6
 800109c:	b21b      	sxth	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	b21b      	sxth	r3, r3
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	4b39      	ldr	r3, [pc, #228]	@ (8001190 <CRSF_DecodeChannels+0x21c>)
 80010ac:	819a      	strh	r2, [r3, #12]
    crsf_data.channels[7]  = (data[9] >> 5 | data[10] << 3) & 0x07FF;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3309      	adds	r3, #9
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	095b      	lsrs	r3, r3, #5
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	330a      	adds	r3, #10
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	b21b      	sxth	r3, r3
 80010c6:	4313      	orrs	r3, r2
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001190 <CRSF_DecodeChannels+0x21c>)
 80010d4:	81da      	strh	r2, [r3, #14]
    crsf_data.channels[8]  = (data[11] | data[12] << 8) & 0x07FF;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	330b      	adds	r3, #11
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b21a      	sxth	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	330c      	adds	r3, #12
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	4b26      	ldr	r3, [pc, #152]	@ (8001190 <CRSF_DecodeChannels+0x21c>)
 80010f8:	821a      	strh	r2, [r3, #16]
    crsf_data.channels[9]  = (data[12] >> 3 | data[13] << 5) & 0x07FF;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	330c      	adds	r3, #12
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	08db      	lsrs	r3, r3, #3
 8001102:	b2db      	uxtb	r3, r3
 8001104:	b21a      	sxth	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	330d      	adds	r3, #13
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b21b      	sxth	r3, r3
 800110e:	015b      	lsls	r3, r3, #5
 8001110:	b21b      	sxth	r3, r3
 8001112:	4313      	orrs	r3, r2
 8001114:	b21b      	sxth	r3, r3
 8001116:	b29b      	uxth	r3, r3
 8001118:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800111c:	b29a      	uxth	r2, r3
 800111e:	4b1c      	ldr	r3, [pc, #112]	@ (8001190 <CRSF_DecodeChannels+0x21c>)
 8001120:	825a      	strh	r2, [r3, #18]
    crsf_data.channels[10] = (data[13] >> 6 | data[14] << 2 | data[15] << 10) & 0x07FF;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	330d      	adds	r3, #13
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	099b      	lsrs	r3, r3, #6
 800112a:	b2db      	uxtb	r3, r3
 800112c:	b21a      	sxth	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	330e      	adds	r3, #14
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b21b      	sxth	r3, r3
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	b21b      	sxth	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b21a      	sxth	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	330f      	adds	r3, #15
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	b21b      	sxth	r3, r3
 8001146:	029b      	lsls	r3, r3, #10
 8001148:	b21b      	sxth	r3, r3
 800114a:	4313      	orrs	r3, r2
 800114c:	b21b      	sxth	r3, r3
 800114e:	b29b      	uxth	r3, r3
 8001150:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001154:	b29a      	uxth	r2, r3
 8001156:	4b0e      	ldr	r3, [pc, #56]	@ (8001190 <CRSF_DecodeChannels+0x21c>)
 8001158:	829a      	strh	r2, [r3, #20]
    crsf_data.channels[11] = (data[15] >> 1 | data[16] << 7) & 0x07FF;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	330f      	adds	r3, #15
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	085b      	lsrs	r3, r3, #1
 8001162:	b2db      	uxtb	r3, r3
 8001164:	b21a      	sxth	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3310      	adds	r3, #16
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	b21b      	sxth	r3, r3
 800116e:	01db      	lsls	r3, r3, #7
 8001170:	b21b      	sxth	r3, r3
 8001172:	4313      	orrs	r3, r2
 8001174:	b21b      	sxth	r3, r3
 8001176:	b29b      	uxth	r3, r3
 8001178:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800117c:	b29a      	uxth	r2, r3
 800117e:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <CRSF_DecodeChannels+0x21c>)
 8001180:	82da      	strh	r2, [r3, #22]
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	200002f0 	.word	0x200002f0

08001194 <CRSF_Process>:

// Process CRSF data in main loop
void CRSF_Process() {
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
    uint16_t bytes_received = CRSF_GetRxCount();
 800119a:	f7ff fed9 	bl	8000f50 <CRSF_GetRxCount>
 800119e:	4603      	mov	r3, r0
 80011a0:	80bb      	strh	r3, [r7, #4]
    if (bytes_received < 3) return;  // Not enough data for a CRSF packet
 80011a2:	88bb      	ldrh	r3, [r7, #4]
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d92b      	bls.n	8001200 <CRSF_Process+0x6c>

    for (uint16_t i = 0; i < bytes_received - 2; i++) {
 80011a8:	2300      	movs	r3, #0
 80011aa:	80fb      	strh	r3, [r7, #6]
 80011ac:	e022      	b.n	80011f4 <CRSF_Process+0x60>
        if (crsf_rx_buffer[i] == 0xEA) {  // Start of an RC packet
 80011ae:	88fb      	ldrh	r3, [r7, #6]
 80011b0:	4a15      	ldr	r2, [pc, #84]	@ (8001208 <CRSF_Process+0x74>)
 80011b2:	5cd3      	ldrb	r3, [r2, r3]
 80011b4:	2bea      	cmp	r3, #234	@ 0xea
 80011b6:	d11a      	bne.n	80011ee <CRSF_Process+0x5a>
            uint8_t length = crsf_rx_buffer[i + 1];
 80011b8:	88fb      	ldrh	r3, [r7, #6]
 80011ba:	3301      	adds	r3, #1
 80011bc:	4a12      	ldr	r2, [pc, #72]	@ (8001208 <CRSF_Process+0x74>)
 80011be:	5cd3      	ldrb	r3, [r2, r3]
 80011c0:	70fb      	strb	r3, [r7, #3]
            if (length <= (bytes_received - i - 2)) {  // Check if full packet is available
 80011c2:	88ba      	ldrh	r2, [r7, #4]
 80011c4:	88fb      	ldrh	r3, [r7, #6]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	1e5a      	subs	r2, r3, #1
 80011ca:	78fb      	ldrb	r3, [r7, #3]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	dd0e      	ble.n	80011ee <CRSF_Process+0x5a>
                uint8_t type = crsf_rx_buffer[i + 2];
 80011d0:	88fb      	ldrh	r3, [r7, #6]
 80011d2:	3302      	adds	r3, #2
 80011d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001208 <CRSF_Process+0x74>)
 80011d6:	5cd3      	ldrb	r3, [r2, r3]
 80011d8:	70bb      	strb	r3, [r7, #2]
                if (type == 0x16) {  // RC Channel Data
 80011da:	78bb      	ldrb	r3, [r7, #2]
 80011dc:	2b16      	cmp	r3, #22
 80011de:	d106      	bne.n	80011ee <CRSF_Process+0x5a>
                    CRSF_DecodeChannels(&crsf_rx_buffer[i + 3]);  // Extract channel values
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	3303      	adds	r3, #3
 80011e4:	4a08      	ldr	r2, [pc, #32]	@ (8001208 <CRSF_Process+0x74>)
 80011e6:	4413      	add	r3, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fec3 	bl	8000f74 <CRSF_DecodeChannels>
    for (uint16_t i = 0; i < bytes_received - 2; i++) {
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	3301      	adds	r3, #1
 80011f2:	80fb      	strh	r3, [r7, #6]
 80011f4:	88fa      	ldrh	r2, [r7, #6]
 80011f6:	88bb      	ldrh	r3, [r7, #4]
 80011f8:	3b02      	subs	r3, #2
 80011fa:	429a      	cmp	r2, r3
 80011fc:	dbd7      	blt.n	80011ae <CRSF_Process+0x1a>
 80011fe:	e000      	b.n	8001202 <CRSF_Process+0x6e>
    if (bytes_received < 3) return;  // Not enough data for a CRSF packet
 8001200:	bf00      	nop
                }
            }
        }
    }
}
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000314 	.word	0x20000314

0800120c <HAL_UART_RxCpltCallback>:
    if (channel >= NUM_CHANNELS) return 1500;  // Return midpoint if out of range
    return 988 + ((crsf_data.channels[channel] * 988) / 2047);  // Scale to 1000-2000µs
}

// Optional: Restart DMA when transmission is complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
    if (huart == crsf_huart) {
 8001214:	4b08      	ldr	r3, [pc, #32]	@ (8001238 <HAL_UART_RxCpltCallback+0x2c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	429a      	cmp	r2, r3
 800121c:	d108      	bne.n	8001230 <HAL_UART_RxCpltCallback+0x24>
        CRSF_Process();
 800121e:	f7ff ffb9 	bl	8001194 <CRSF_Process>
        HAL_UART_Receive_DMA(crsf_huart, crsf_rx_buffer, CRSF_BUFFER_SIZE);  // Restart DMA
 8001222:	4b05      	ldr	r3, [pc, #20]	@ (8001238 <HAL_UART_RxCpltCallback+0x2c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2240      	movs	r2, #64	@ 0x40
 8001228:	4904      	ldr	r1, [pc, #16]	@ (800123c <HAL_UART_RxCpltCallback+0x30>)
 800122a:	4618      	mov	r0, r3
 800122c:	f008 f83c 	bl	80092a8 <HAL_UART_Receive_DMA>
    }
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000310 	.word	0x20000310
 800123c:	20000314 	.word	0x20000314

08001240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b094      	sub	sp, #80	@ 0x50
 8001244:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001246:	f000 fd8f 	bl	8001d68 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124a:	f001 fc8a 	bl	8002b62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124e:	f000 f8b3 	bl	80013b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001252:	f000 fcad 	bl	8001bb0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001256:	f000 fc51 	bl	8001afc <MX_DMA_Init>
  MX_USART1_UART_Init();
 800125a:	f000 fb8f 	bl	800197c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800125e:	f000 fbbd 	bl	80019dc <MX_USART2_UART_Init>
  MX_SDMMC1_SD_Init();
 8001262:	f000 f9a9 	bl	80015b8 <MX_SDMMC1_SD_Init>
  MX_USART6_UART_Init();
 8001266:	f000 fc19 	bl	8001a9c <MX_USART6_UART_Init>
  MX_SPI1_Init();
 800126a:	f000 f9c7 	bl	80015fc <MX_SPI1_Init>
  MX_I2C1_Init();
 800126e:	f000 f963 	bl	8001538 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001272:	f000 fa01 	bl	8001678 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001276:	f000 fa3d 	bl	80016f4 <MX_TIM1_Init>
  MX_UART4_Init();
 800127a:	f000 fb4f 	bl	800191c <MX_UART4_Init>
  MX_USART3_UART_Init();
 800127e:	f000 fbdd 	bl	8001a3c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001282:	f000 f907 	bl	8001494 <MX_ADC1_Init>
  MX_TIM6_Init();
 8001286:	f000 fb13 	bl	80018b0 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 800128a:	f00d f943 	bl	800e514 <MX_USB_DEVICE_Init>
  MX_FATFS_Init();
 800128e:	f00a ff4b 	bl	800c128 <MX_FATFS_Init>
  MX_TIM2_Init();
 8001292:	f000 fabf 	bl	8001814 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  CRSF_Init(&huart1);
 8001296:	4841      	ldr	r0, [pc, #260]	@ (800139c <main+0x15c>)
 8001298:	f7ff fe44 	bl	8000f24 <CRSF_Init>

  //HAL_TIM_Base_Start(&htim2);
  //uint64_t delay_loop = (1000 * 1000);
  char message[64];
  uint8_t tx_data[2] = {0x00 | 0x80, 0x00};
 800129c:	2380      	movs	r3, #128	@ 0x80
 800129e:	80bb      	strh	r3, [r7, #4]
  uint8_t rx_data[2] = {0x00, 0x00};
 80012a0:	2300      	movs	r3, #0
 80012a2:	803b      	strh	r3, [r7, #0]
  while (1)
  {
	  /*CRSF_Process();
	  	uint16_t ch0 = CRSF_GetChannel(0);
	  	printf("Ch 0: %d\n", ch0);*/
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2101      	movs	r1, #1
 80012a8:	483d      	ldr	r0, [pc, #244]	@ (80013a0 <main+0x160>)
 80012aa:	f002 fe25 	bl	8003ef8 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 80012ae:	463a      	mov	r2, r7
 80012b0:	1d39      	adds	r1, r7, #4
 80012b2:	2364      	movs	r3, #100	@ 0x64
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2302      	movs	r3, #2
 80012b8:	483a      	ldr	r0, [pc, #232]	@ (80013a4 <main+0x164>)
 80012ba:	f006 fcc1 	bl	8007c40 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80012be:	2201      	movs	r2, #1
 80012c0:	2101      	movs	r1, #1
 80012c2:	4837      	ldr	r0, [pc, #220]	@ (80013a0 <main+0x160>)
 80012c4:	f002 fe18 	bl	8003ef8 <HAL_GPIO_WritePin>
		snprintf(message, sizeof(message), "Gyro Chip ID is: %X\r\n", rx_data[1]);
 80012c8:	787b      	ldrb	r3, [r7, #1]
 80012ca:	f107 0008 	add.w	r0, r7, #8
 80012ce:	4a36      	ldr	r2, [pc, #216]	@ (80013a8 <main+0x168>)
 80012d0:	2140      	movs	r1, #64	@ 0x40
 80012d2:	f00e fc7f 	bl	800fbd4 <sniprintf>
		CDC_Transmit_FS((uint8_t *)message, strlen(message));
 80012d6:	f107 0308 	add.w	r3, r7, #8
 80012da:	4618      	mov	r0, r3
 80012dc:	f7fe fff0 	bl	80002c0 <strlen>
 80012e0:	4603      	mov	r3, r0
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	f107 0308 	add.w	r3, r7, #8
 80012e8:	4611      	mov	r1, r2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f00d f9d0 	bl	800e690 <CDC_Transmit_FS>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2102      	movs	r1, #2
 80012f4:	482a      	ldr	r0, [pc, #168]	@ (80013a0 <main+0x160>)
 80012f6:	f002 fdff 	bl	8003ef8 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 80012fa:	463a      	mov	r2, r7
 80012fc:	1d39      	adds	r1, r7, #4
 80012fe:	2364      	movs	r3, #100	@ 0x64
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2302      	movs	r3, #2
 8001304:	4827      	ldr	r0, [pc, #156]	@ (80013a4 <main+0x164>)
 8001306:	f006 fc9b 	bl	8007c40 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800130a:	2201      	movs	r2, #1
 800130c:	2102      	movs	r1, #2
 800130e:	4824      	ldr	r0, [pc, #144]	@ (80013a0 <main+0x160>)
 8001310:	f002 fdf2 	bl	8003ef8 <HAL_GPIO_WritePin>
		snprintf(message, sizeof(message), "Accelerometer Chip ID is: %X\r\n", rx_data[1]);
 8001314:	787b      	ldrb	r3, [r7, #1]
 8001316:	f107 0008 	add.w	r0, r7, #8
 800131a:	4a24      	ldr	r2, [pc, #144]	@ (80013ac <main+0x16c>)
 800131c:	2140      	movs	r1, #64	@ 0x40
 800131e:	f00e fc59 	bl	800fbd4 <sniprintf>
		CDC_Transmit_FS((uint8_t *)message, strlen(message));
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	4618      	mov	r0, r3
 8001328:	f7fe ffca 	bl	80002c0 <strlen>
 800132c:	4603      	mov	r3, r0
 800132e:	b29a      	uxth	r2, r3
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	4611      	mov	r1, r2
 8001336:	4618      	mov	r0, r3
 8001338:	f00d f9aa 	bl	800e690 <CDC_Transmit_FS>

		tx_data[0] = 0x00 | 0x80;
 800133c:	2380      	movs	r3, #128	@ 0x80
 800133e:	713b      	strb	r3, [r7, #4]

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001340:	2200      	movs	r2, #0
 8001342:	2110      	movs	r1, #16
 8001344:	481a      	ldr	r0, [pc, #104]	@ (80013b0 <main+0x170>)
 8001346:	f002 fdd7 	bl	8003ef8 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 800134a:	463a      	mov	r2, r7
 800134c:	1d39      	adds	r1, r7, #4
 800134e:	2364      	movs	r3, #100	@ 0x64
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2302      	movs	r3, #2
 8001354:	4813      	ldr	r0, [pc, #76]	@ (80013a4 <main+0x164>)
 8001356:	f006 fc73 	bl	8007c40 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 800135a:	2201      	movs	r2, #1
 800135c:	2110      	movs	r1, #16
 800135e:	4814      	ldr	r0, [pc, #80]	@ (80013b0 <main+0x170>)
 8001360:	f002 fdca 	bl	8003ef8 <HAL_GPIO_WritePin>
		snprintf(message, sizeof(message), "Barometer Chip ID is: %X\r\n", rx_data[1]);
 8001364:	787b      	ldrb	r3, [r7, #1]
 8001366:	f107 0008 	add.w	r0, r7, #8
 800136a:	4a12      	ldr	r2, [pc, #72]	@ (80013b4 <main+0x174>)
 800136c:	2140      	movs	r1, #64	@ 0x40
 800136e:	f00e fc31 	bl	800fbd4 <sniprintf>
		CDC_Transmit_FS((uint8_t *)message, strlen(message));
 8001372:	f107 0308 	add.w	r3, r7, #8
 8001376:	4618      	mov	r0, r3
 8001378:	f7fe ffa2 	bl	80002c0 <strlen>
 800137c:	4603      	mov	r3, r0
 800137e:	b29a      	uxth	r2, r3
 8001380:	f107 0308 	add.w	r3, r7, #8
 8001384:	4611      	mov	r1, r2
 8001386:	4618      	mov	r0, r3
 8001388:	f00d f982 	bl	800e690 <CDC_Transmit_FS>

		tx_data[0] = 0x00 | 0x80;
 800138c:	2380      	movs	r3, #128	@ 0x80
 800138e:	713b      	strb	r3, [r7, #4]

		HAL_Delay(1000);
 8001390:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001394:	f001 fc42 	bl	8002c1c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001398:	bf00      	nop
 800139a:	e783      	b.n	80012a4 <main+0x64>
 800139c:	20000708 	.word	0x20000708
 80013a0:	40020400 	.word	0x40020400
 80013a4:	20000474 	.word	0x20000474
 80013a8:	08011d10 	.word	0x08011d10
 80013ac:	08011d28 	.word	0x08011d28
 80013b0:	40020800 	.word	0x40020800
 80013b4:	08011d48 	.word	0x08011d48

080013b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b094      	sub	sp, #80	@ 0x50
 80013bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013be:	f107 0320 	add.w	r3, r7, #32
 80013c2:	2230      	movs	r2, #48	@ 0x30
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f00e fc7d 	bl	800fcc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013cc:	f107 030c 	add.w	r3, r7, #12
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013dc:	4b2b      	ldr	r3, [pc, #172]	@ (800148c <SystemClock_Config+0xd4>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e0:	4a2a      	ldr	r2, [pc, #168]	@ (800148c <SystemClock_Config+0xd4>)
 80013e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e8:	4b28      	ldr	r3, [pc, #160]	@ (800148c <SystemClock_Config+0xd4>)
 80013ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f4:	4b26      	ldr	r3, [pc, #152]	@ (8001490 <SystemClock_Config+0xd8>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a25      	ldr	r2, [pc, #148]	@ (8001490 <SystemClock_Config+0xd8>)
 80013fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	4b23      	ldr	r3, [pc, #140]	@ (8001490 <SystemClock_Config+0xd8>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800140c:	2301      	movs	r3, #1
 800140e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001410:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001416:	2302      	movs	r3, #2
 8001418:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800141a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800141e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001420:	2304      	movs	r3, #4
 8001422:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001424:	23d8      	movs	r3, #216	@ 0xd8
 8001426:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001428:	2302      	movs	r3, #2
 800142a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800142c:	2309      	movs	r3, #9
 800142e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	4618      	mov	r0, r3
 8001436:	f004 f985 	bl	8005744 <HAL_RCC_OscConfig>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001440:	f000 fcbe 	bl	8001dc0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001444:	f004 f92e 	bl	80056a4 <HAL_PWREx_EnableOverDrive>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800144e:	f000 fcb7 	bl	8001dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001452:	230f      	movs	r3, #15
 8001454:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001456:	2302      	movs	r3, #2
 8001458:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800145e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001462:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001464:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001468:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800146a:	f107 030c 	add.w	r3, r7, #12
 800146e:	2107      	movs	r1, #7
 8001470:	4618      	mov	r0, r3
 8001472:	f004 fc0b 	bl	8005c8c <HAL_RCC_ClockConfig>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800147c:	f000 fca0 	bl	8001dc0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001480:	f004 fcf0 	bl	8005e64 <HAL_RCC_EnableCSS>
}
 8001484:	bf00      	nop
 8001486:	3750      	adds	r7, #80	@ 0x50
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40023800 	.word	0x40023800
 8001490:	40007000 	.word	0x40007000

08001494 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800149a:	463b      	mov	r3, r7
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014a6:	4b21      	ldr	r3, [pc, #132]	@ (800152c <MX_ADC1_Init+0x98>)
 80014a8:	4a21      	ldr	r2, [pc, #132]	@ (8001530 <MX_ADC1_Init+0x9c>)
 80014aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014ac:	4b1f      	ldr	r3, [pc, #124]	@ (800152c <MX_ADC1_Init+0x98>)
 80014ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80014b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014b4:	4b1d      	ldr	r3, [pc, #116]	@ (800152c <MX_ADC1_Init+0x98>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014ba:	4b1c      	ldr	r3, [pc, #112]	@ (800152c <MX_ADC1_Init+0x98>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014c0:	4b1a      	ldr	r3, [pc, #104]	@ (800152c <MX_ADC1_Init+0x98>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014c6:	4b19      	ldr	r3, [pc, #100]	@ (800152c <MX_ADC1_Init+0x98>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014ce:	4b17      	ldr	r3, [pc, #92]	@ (800152c <MX_ADC1_Init+0x98>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014d4:	4b15      	ldr	r3, [pc, #84]	@ (800152c <MX_ADC1_Init+0x98>)
 80014d6:	4a17      	ldr	r2, [pc, #92]	@ (8001534 <MX_ADC1_Init+0xa0>)
 80014d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014da:	4b14      	ldr	r3, [pc, #80]	@ (800152c <MX_ADC1_Init+0x98>)
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014e0:	4b12      	ldr	r3, [pc, #72]	@ (800152c <MX_ADC1_Init+0x98>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014e6:	4b11      	ldr	r3, [pc, #68]	@ (800152c <MX_ADC1_Init+0x98>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ee:	4b0f      	ldr	r3, [pc, #60]	@ (800152c <MX_ADC1_Init+0x98>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014f4:	480d      	ldr	r0, [pc, #52]	@ (800152c <MX_ADC1_Init+0x98>)
 80014f6:	f001 fbb5 	bl	8002c64 <HAL_ADC_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001500:	f000 fc5e 	bl	8001dc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001504:	230a      	movs	r3, #10
 8001506:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001508:	2301      	movs	r3, #1
 800150a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001510:	463b      	mov	r3, r7
 8001512:	4619      	mov	r1, r3
 8001514:	4805      	ldr	r0, [pc, #20]	@ (800152c <MX_ADC1_Init+0x98>)
 8001516:	f001 fbe9 	bl	8002cec <HAL_ADC_ConfigChannel>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001520:	f000 fc4e 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000354 	.word	0x20000354
 8001530:	40012000 	.word	0x40012000
 8001534:	0f000001 	.word	0x0f000001

08001538 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800153c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ac <MX_I2C1_Init+0x74>)
 800153e:	4a1c      	ldr	r2, [pc, #112]	@ (80015b0 <MX_I2C1_Init+0x78>)
 8001540:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001542:	4b1a      	ldr	r3, [pc, #104]	@ (80015ac <MX_I2C1_Init+0x74>)
 8001544:	4a1b      	ldr	r2, [pc, #108]	@ (80015b4 <MX_I2C1_Init+0x7c>)
 8001546:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001548:	4b18      	ldr	r3, [pc, #96]	@ (80015ac <MX_I2C1_Init+0x74>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800154e:	4b17      	ldr	r3, [pc, #92]	@ (80015ac <MX_I2C1_Init+0x74>)
 8001550:	2201      	movs	r2, #1
 8001552:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001554:	4b15      	ldr	r3, [pc, #84]	@ (80015ac <MX_I2C1_Init+0x74>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800155a:	4b14      	ldr	r3, [pc, #80]	@ (80015ac <MX_I2C1_Init+0x74>)
 800155c:	2200      	movs	r2, #0
 800155e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001560:	4b12      	ldr	r3, [pc, #72]	@ (80015ac <MX_I2C1_Init+0x74>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001566:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <MX_I2C1_Init+0x74>)
 8001568:	2200      	movs	r2, #0
 800156a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800156c:	4b0f      	ldr	r3, [pc, #60]	@ (80015ac <MX_I2C1_Init+0x74>)
 800156e:	2200      	movs	r2, #0
 8001570:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001572:	480e      	ldr	r0, [pc, #56]	@ (80015ac <MX_I2C1_Init+0x74>)
 8001574:	f002 fcda 	bl	8003f2c <HAL_I2C_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800157e:	f000 fc1f 	bl	8001dc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001582:	2100      	movs	r1, #0
 8001584:	4809      	ldr	r0, [pc, #36]	@ (80015ac <MX_I2C1_Init+0x74>)
 8001586:	f002 fd6d 	bl	8004064 <HAL_I2CEx_ConfigAnalogFilter>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001590:	f000 fc16 	bl	8001dc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001594:	2100      	movs	r1, #0
 8001596:	4805      	ldr	r0, [pc, #20]	@ (80015ac <MX_I2C1_Init+0x74>)
 8001598:	f002 fdaf 	bl	80040fa <HAL_I2CEx_ConfigDigitalFilter>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015a2:	f000 fc0d 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2000039c 	.word	0x2000039c
 80015b0:	40005400 	.word	0x40005400
 80015b4:	20404768 	.word	0x20404768

080015b8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80015bc:	4b0d      	ldr	r3, [pc, #52]	@ (80015f4 <MX_SDMMC1_SD_Init+0x3c>)
 80015be:	4a0e      	ldr	r2, [pc, #56]	@ (80015f8 <MX_SDMMC1_SD_Init+0x40>)
 80015c0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80015c2:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <MX_SDMMC1_SD_Init+0x3c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80015c8:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <MX_SDMMC1_SD_Init+0x3c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80015ce:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <MX_SDMMC1_SD_Init+0x3c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80015d4:	4b07      	ldr	r3, [pc, #28]	@ (80015f4 <MX_SDMMC1_SD_Init+0x3c>)
 80015d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015da:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80015dc:	4b05      	ldr	r3, [pc, #20]	@ (80015f4 <MX_SDMMC1_SD_Init+0x3c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80015e2:	4b04      	ldr	r3, [pc, #16]	@ (80015f4 <MX_SDMMC1_SD_Init+0x3c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	200003f0 	.word	0x200003f0
 80015f8:	40012c00 	.word	0x40012c00

080015fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001600:	4b1b      	ldr	r3, [pc, #108]	@ (8001670 <MX_SPI1_Init+0x74>)
 8001602:	4a1c      	ldr	r2, [pc, #112]	@ (8001674 <MX_SPI1_Init+0x78>)
 8001604:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001606:	4b1a      	ldr	r3, [pc, #104]	@ (8001670 <MX_SPI1_Init+0x74>)
 8001608:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800160c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800160e:	4b18      	ldr	r3, [pc, #96]	@ (8001670 <MX_SPI1_Init+0x74>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001614:	4b16      	ldr	r3, [pc, #88]	@ (8001670 <MX_SPI1_Init+0x74>)
 8001616:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800161a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800161c:	4b14      	ldr	r3, [pc, #80]	@ (8001670 <MX_SPI1_Init+0x74>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001622:	4b13      	ldr	r3, [pc, #76]	@ (8001670 <MX_SPI1_Init+0x74>)
 8001624:	2200      	movs	r2, #0
 8001626:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001628:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <MX_SPI1_Init+0x74>)
 800162a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800162e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001630:	4b0f      	ldr	r3, [pc, #60]	@ (8001670 <MX_SPI1_Init+0x74>)
 8001632:	2218      	movs	r2, #24
 8001634:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001636:	4b0e      	ldr	r3, [pc, #56]	@ (8001670 <MX_SPI1_Init+0x74>)
 8001638:	2200      	movs	r2, #0
 800163a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800163c:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <MX_SPI1_Init+0x74>)
 800163e:	2200      	movs	r2, #0
 8001640:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001642:	4b0b      	ldr	r3, [pc, #44]	@ (8001670 <MX_SPI1_Init+0x74>)
 8001644:	2200      	movs	r2, #0
 8001646:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001648:	4b09      	ldr	r3, [pc, #36]	@ (8001670 <MX_SPI1_Init+0x74>)
 800164a:	2207      	movs	r2, #7
 800164c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800164e:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <MX_SPI1_Init+0x74>)
 8001650:	2200      	movs	r2, #0
 8001652:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001654:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <MX_SPI1_Init+0x74>)
 8001656:	2208      	movs	r2, #8
 8001658:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800165a:	4805      	ldr	r0, [pc, #20]	@ (8001670 <MX_SPI1_Init+0x74>)
 800165c:	f006 fa45 	bl	8007aea <HAL_SPI_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001666:	f000 fbab 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000474 	.word	0x20000474
 8001674:	40013000 	.word	0x40013000

08001678 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800167c:	4b1b      	ldr	r3, [pc, #108]	@ (80016ec <MX_SPI2_Init+0x74>)
 800167e:	4a1c      	ldr	r2, [pc, #112]	@ (80016f0 <MX_SPI2_Init+0x78>)
 8001680:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001682:	4b1a      	ldr	r3, [pc, #104]	@ (80016ec <MX_SPI2_Init+0x74>)
 8001684:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001688:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800168a:	4b18      	ldr	r3, [pc, #96]	@ (80016ec <MX_SPI2_Init+0x74>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001690:	4b16      	ldr	r3, [pc, #88]	@ (80016ec <MX_SPI2_Init+0x74>)
 8001692:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001696:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001698:	4b14      	ldr	r3, [pc, #80]	@ (80016ec <MX_SPI2_Init+0x74>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800169e:	4b13      	ldr	r3, [pc, #76]	@ (80016ec <MX_SPI2_Init+0x74>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016a4:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <MX_SPI2_Init+0x74>)
 80016a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016aa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80016ac:	4b0f      	ldr	r3, [pc, #60]	@ (80016ec <MX_SPI2_Init+0x74>)
 80016ae:	2228      	movs	r2, #40	@ 0x28
 80016b0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <MX_SPI2_Init+0x74>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <MX_SPI2_Init+0x74>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016be:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <MX_SPI2_Init+0x74>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80016c4:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <MX_SPI2_Init+0x74>)
 80016c6:	2207      	movs	r2, #7
 80016c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016ca:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <MX_SPI2_Init+0x74>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016d0:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <MX_SPI2_Init+0x74>)
 80016d2:	2208      	movs	r2, #8
 80016d4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016d6:	4805      	ldr	r0, [pc, #20]	@ (80016ec <MX_SPI2_Init+0x74>)
 80016d8:	f006 fa07 	bl	8007aea <HAL_SPI_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80016e2:	f000 fb6d 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200004d8 	.word	0x200004d8
 80016f0:	40003800 	.word	0x40003800

080016f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b096      	sub	sp, #88	@ 0x58
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016fa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001706:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]
 8001714:	611a      	str	r2, [r3, #16]
 8001716:	615a      	str	r2, [r3, #20]
 8001718:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	222c      	movs	r2, #44	@ 0x2c
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f00e fad0 	bl	800fcc6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001726:	4b39      	ldr	r3, [pc, #228]	@ (800180c <MX_TIM1_Init+0x118>)
 8001728:	4a39      	ldr	r2, [pc, #228]	@ (8001810 <MX_TIM1_Init+0x11c>)
 800172a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800172c:	4b37      	ldr	r3, [pc, #220]	@ (800180c <MX_TIM1_Init+0x118>)
 800172e:	2200      	movs	r2, #0
 8001730:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001732:	4b36      	ldr	r3, [pc, #216]	@ (800180c <MX_TIM1_Init+0x118>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001738:	4b34      	ldr	r3, [pc, #208]	@ (800180c <MX_TIM1_Init+0x118>)
 800173a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800173e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001740:	4b32      	ldr	r3, [pc, #200]	@ (800180c <MX_TIM1_Init+0x118>)
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001746:	4b31      	ldr	r3, [pc, #196]	@ (800180c <MX_TIM1_Init+0x118>)
 8001748:	2200      	movs	r2, #0
 800174a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800174c:	4b2f      	ldr	r3, [pc, #188]	@ (800180c <MX_TIM1_Init+0x118>)
 800174e:	2280      	movs	r2, #128	@ 0x80
 8001750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001752:	482e      	ldr	r0, [pc, #184]	@ (800180c <MX_TIM1_Init+0x118>)
 8001754:	f006 fe75 	bl	8008442 <HAL_TIM_PWM_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800175e:	f000 fb2f 	bl	8001dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001766:	2300      	movs	r3, #0
 8001768:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176a:	2300      	movs	r3, #0
 800176c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800176e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001772:	4619      	mov	r1, r3
 8001774:	4825      	ldr	r0, [pc, #148]	@ (800180c <MX_TIM1_Init+0x118>)
 8001776:	f007 fc3d 	bl	8008ff4 <HAL_TIMEx_MasterConfigSynchronization>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001780:	f000 fb1e 	bl	8001dc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001784:	2360      	movs	r3, #96	@ 0x60
 8001786:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800178c:	2300      	movs	r3, #0
 800178e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001790:	2300      	movs	r3, #0
 8001792:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001798:	2300      	movs	r3, #0
 800179a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800179c:	2300      	movs	r3, #0
 800179e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017a0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017a4:	2200      	movs	r2, #0
 80017a6:	4619      	mov	r1, r3
 80017a8:	4818      	ldr	r0, [pc, #96]	@ (800180c <MX_TIM1_Init+0x118>)
 80017aa:	f006 fea1 	bl	80084f0 <HAL_TIM_PWM_ConfigChannel>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80017b4:	f000 fb04 	bl	8001dc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017de:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	4619      	mov	r1, r3
 80017ec:	4807      	ldr	r0, [pc, #28]	@ (800180c <MX_TIM1_Init+0x118>)
 80017ee:	f007 fc8f 	bl	8009110 <HAL_TIMEx_ConfigBreakDeadTime>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80017f8:	f000 fae2 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017fc:	4803      	ldr	r0, [pc, #12]	@ (800180c <MX_TIM1_Init+0x118>)
 80017fe:	f000 fd47 	bl	8002290 <HAL_TIM_MspPostInit>

}
 8001802:	bf00      	nop
 8001804:	3758      	adds	r7, #88	@ 0x58
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	2000053c 	.word	0x2000053c
 8001810:	40010000 	.word	0x40010000

08001814 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800181a:	f107 0310 	add.w	r3, r7, #16
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001832:	4b1e      	ldr	r3, [pc, #120]	@ (80018ac <MX_TIM2_Init+0x98>)
 8001834:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001838:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 800183a:	4b1c      	ldr	r3, [pc, #112]	@ (80018ac <MX_TIM2_Init+0x98>)
 800183c:	226b      	movs	r2, #107	@ 0x6b
 800183e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001840:	4b1a      	ldr	r3, [pc, #104]	@ (80018ac <MX_TIM2_Init+0x98>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001846:	4b19      	ldr	r3, [pc, #100]	@ (80018ac <MX_TIM2_Init+0x98>)
 8001848:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800184c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800184e:	4b17      	ldr	r3, [pc, #92]	@ (80018ac <MX_TIM2_Init+0x98>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001854:	4b15      	ldr	r3, [pc, #84]	@ (80018ac <MX_TIM2_Init+0x98>)
 8001856:	2280      	movs	r2, #128	@ 0x80
 8001858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800185a:	4814      	ldr	r0, [pc, #80]	@ (80018ac <MX_TIM2_Init+0x98>)
 800185c:	f006 fd9a 	bl	8008394 <HAL_TIM_Base_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001866:	f000 faab 	bl	8001dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800186a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800186e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	4619      	mov	r1, r3
 8001876:	480d      	ldr	r0, [pc, #52]	@ (80018ac <MX_TIM2_Init+0x98>)
 8001878:	f006 ff4e 	bl	8008718 <HAL_TIM_ConfigClockSource>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001882:	f000 fa9d 	bl	8001dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	4619      	mov	r1, r3
 8001892:	4806      	ldr	r0, [pc, #24]	@ (80018ac <MX_TIM2_Init+0x98>)
 8001894:	f007 fbae 	bl	8008ff4 <HAL_TIMEx_MasterConfigSynchronization>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800189e:	f000 fa8f 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018a2:	bf00      	nop
 80018a4:	3720      	adds	r7, #32
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000588 	.word	0x20000588

080018b0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018c0:	4b14      	ldr	r3, [pc, #80]	@ (8001914 <MX_TIM6_Init+0x64>)
 80018c2:	4a15      	ldr	r2, [pc, #84]	@ (8001918 <MX_TIM6_Init+0x68>)
 80018c4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80018c6:	4b13      	ldr	r3, [pc, #76]	@ (8001914 <MX_TIM6_Init+0x64>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018cc:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <MX_TIM6_Init+0x64>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80018d2:	4b10      	ldr	r3, [pc, #64]	@ (8001914 <MX_TIM6_Init+0x64>)
 80018d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018d8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018da:	4b0e      	ldr	r3, [pc, #56]	@ (8001914 <MX_TIM6_Init+0x64>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018e0:	480c      	ldr	r0, [pc, #48]	@ (8001914 <MX_TIM6_Init+0x64>)
 80018e2:	f006 fd57 	bl	8008394 <HAL_TIM_Base_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80018ec:	f000 fa68 	bl	8001dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f0:	2300      	movs	r3, #0
 80018f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	4619      	mov	r1, r3
 80018fc:	4805      	ldr	r0, [pc, #20]	@ (8001914 <MX_TIM6_Init+0x64>)
 80018fe:	f007 fb79 	bl	8008ff4 <HAL_TIMEx_MasterConfigSynchronization>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001908:	f000 fa5a 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800190c:	bf00      	nop
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	200005d4 	.word	0x200005d4
 8001918:	40001000 	.word	0x40001000

0800191c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001920:	4b14      	ldr	r3, [pc, #80]	@ (8001974 <MX_UART4_Init+0x58>)
 8001922:	4a15      	ldr	r2, [pc, #84]	@ (8001978 <MX_UART4_Init+0x5c>)
 8001924:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001926:	4b13      	ldr	r3, [pc, #76]	@ (8001974 <MX_UART4_Init+0x58>)
 8001928:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800192c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800192e:	4b11      	ldr	r3, [pc, #68]	@ (8001974 <MX_UART4_Init+0x58>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001934:	4b0f      	ldr	r3, [pc, #60]	@ (8001974 <MX_UART4_Init+0x58>)
 8001936:	2200      	movs	r2, #0
 8001938:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800193a:	4b0e      	ldr	r3, [pc, #56]	@ (8001974 <MX_UART4_Init+0x58>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001940:	4b0c      	ldr	r3, [pc, #48]	@ (8001974 <MX_UART4_Init+0x58>)
 8001942:	220c      	movs	r2, #12
 8001944:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001946:	4b0b      	ldr	r3, [pc, #44]	@ (8001974 <MX_UART4_Init+0x58>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800194c:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <MX_UART4_Init+0x58>)
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001952:	4b08      	ldr	r3, [pc, #32]	@ (8001974 <MX_UART4_Init+0x58>)
 8001954:	2200      	movs	r2, #0
 8001956:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001958:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <MX_UART4_Init+0x58>)
 800195a:	2200      	movs	r2, #0
 800195c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800195e:	4805      	ldr	r0, [pc, #20]	@ (8001974 <MX_UART4_Init+0x58>)
 8001960:	f007 fc54 	bl	800920c <HAL_UART_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800196a:	f000 fa29 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000680 	.word	0x20000680
 8001978:	40004c00 	.word	0x40004c00

0800197c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001980:	4b14      	ldr	r3, [pc, #80]	@ (80019d4 <MX_USART1_UART_Init+0x58>)
 8001982:	4a15      	ldr	r2, [pc, #84]	@ (80019d8 <MX_USART1_UART_Init+0x5c>)
 8001984:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001986:	4b13      	ldr	r3, [pc, #76]	@ (80019d4 <MX_USART1_UART_Init+0x58>)
 8001988:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800198c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800198e:	4b11      	ldr	r3, [pc, #68]	@ (80019d4 <MX_USART1_UART_Init+0x58>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001994:	4b0f      	ldr	r3, [pc, #60]	@ (80019d4 <MX_USART1_UART_Init+0x58>)
 8001996:	2200      	movs	r2, #0
 8001998:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800199a:	4b0e      	ldr	r3, [pc, #56]	@ (80019d4 <MX_USART1_UART_Init+0x58>)
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	@ (80019d4 <MX_USART1_UART_Init+0x58>)
 80019a2:	220c      	movs	r2, #12
 80019a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019a6:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <MX_USART1_UART_Init+0x58>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ac:	4b09      	ldr	r3, [pc, #36]	@ (80019d4 <MX_USART1_UART_Init+0x58>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019b2:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <MX_USART1_UART_Init+0x58>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019b8:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <MX_USART1_UART_Init+0x58>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019be:	4805      	ldr	r0, [pc, #20]	@ (80019d4 <MX_USART1_UART_Init+0x58>)
 80019c0:	f007 fc24 	bl	800920c <HAL_UART_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80019ca:	f000 f9f9 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000708 	.word	0x20000708
 80019d8:	40011000 	.word	0x40011000

080019dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019e0:	4b14      	ldr	r3, [pc, #80]	@ (8001a34 <MX_USART2_UART_Init+0x58>)
 80019e2:	4a15      	ldr	r2, [pc, #84]	@ (8001a38 <MX_USART2_UART_Init+0x5c>)
 80019e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019e6:	4b13      	ldr	r3, [pc, #76]	@ (8001a34 <MX_USART2_UART_Init+0x58>)
 80019e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019ee:	4b11      	ldr	r3, [pc, #68]	@ (8001a34 <MX_USART2_UART_Init+0x58>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a34 <MX_USART2_UART_Init+0x58>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001a34 <MX_USART2_UART_Init+0x58>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a00:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <MX_USART2_UART_Init+0x58>)
 8001a02:	220c      	movs	r2, #12
 8001a04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a06:	4b0b      	ldr	r3, [pc, #44]	@ (8001a34 <MX_USART2_UART_Init+0x58>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a0c:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <MX_USART2_UART_Init+0x58>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a12:	4b08      	ldr	r3, [pc, #32]	@ (8001a34 <MX_USART2_UART_Init+0x58>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a18:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <MX_USART2_UART_Init+0x58>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a1e:	4805      	ldr	r0, [pc, #20]	@ (8001a34 <MX_USART2_UART_Init+0x58>)
 8001a20:	f007 fbf4 	bl	800920c <HAL_UART_Init>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a2a:	f000 f9c9 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000790 	.word	0x20000790
 8001a38:	40004400 	.word	0x40004400

08001a3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a40:	4b14      	ldr	r3, [pc, #80]	@ (8001a94 <MX_USART3_UART_Init+0x58>)
 8001a42:	4a15      	ldr	r2, [pc, #84]	@ (8001a98 <MX_USART3_UART_Init+0x5c>)
 8001a44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a46:	4b13      	ldr	r3, [pc, #76]	@ (8001a94 <MX_USART3_UART_Init+0x58>)
 8001a48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4e:	4b11      	ldr	r3, [pc, #68]	@ (8001a94 <MX_USART3_UART_Init+0x58>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a54:	4b0f      	ldr	r3, [pc, #60]	@ (8001a94 <MX_USART3_UART_Init+0x58>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a94 <MX_USART3_UART_Init+0x58>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a60:	4b0c      	ldr	r3, [pc, #48]	@ (8001a94 <MX_USART3_UART_Init+0x58>)
 8001a62:	220c      	movs	r2, #12
 8001a64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a66:	4b0b      	ldr	r3, [pc, #44]	@ (8001a94 <MX_USART3_UART_Init+0x58>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a6c:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <MX_USART3_UART_Init+0x58>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a72:	4b08      	ldr	r3, [pc, #32]	@ (8001a94 <MX_USART3_UART_Init+0x58>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a78:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <MX_USART3_UART_Init+0x58>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a7e:	4805      	ldr	r0, [pc, #20]	@ (8001a94 <MX_USART3_UART_Init+0x58>)
 8001a80:	f007 fbc4 	bl	800920c <HAL_UART_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001a8a:	f000 f999 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000818 	.word	0x20000818
 8001a98:	40004800 	.word	0x40004800

08001a9c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001aa0:	4b14      	ldr	r3, [pc, #80]	@ (8001af4 <MX_USART6_UART_Init+0x58>)
 8001aa2:	4a15      	ldr	r2, [pc, #84]	@ (8001af8 <MX_USART6_UART_Init+0x5c>)
 8001aa4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001aa6:	4b13      	ldr	r3, [pc, #76]	@ (8001af4 <MX_USART6_UART_Init+0x58>)
 8001aa8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001aac:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001aae:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <MX_USART6_UART_Init+0x58>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8001af4 <MX_USART6_UART_Init+0x58>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001aba:	4b0e      	ldr	r3, [pc, #56]	@ (8001af4 <MX_USART6_UART_Init+0x58>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8001af4 <MX_USART6_UART_Init+0x58>)
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8001af4 <MX_USART6_UART_Init+0x58>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001acc:	4b09      	ldr	r3, [pc, #36]	@ (8001af4 <MX_USART6_UART_Init+0x58>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ad2:	4b08      	ldr	r3, [pc, #32]	@ (8001af4 <MX_USART6_UART_Init+0x58>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <MX_USART6_UART_Init+0x58>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001ade:	4805      	ldr	r0, [pc, #20]	@ (8001af4 <MX_USART6_UART_Init+0x58>)
 8001ae0:	f007 fb94 	bl	800920c <HAL_UART_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001aea:	f000 f969 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200008a0 	.word	0x200008a0
 8001af8:	40011400 	.word	0x40011400

08001afc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b02:	4b2a      	ldr	r3, [pc, #168]	@ (8001bac <MX_DMA_Init+0xb0>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	4a29      	ldr	r2, [pc, #164]	@ (8001bac <MX_DMA_Init+0xb0>)
 8001b08:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0e:	4b27      	ldr	r3, [pc, #156]	@ (8001bac <MX_DMA_Init+0xb0>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b1a:	4b24      	ldr	r3, [pc, #144]	@ (8001bac <MX_DMA_Init+0xb0>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	4a23      	ldr	r2, [pc, #140]	@ (8001bac <MX_DMA_Init+0xb0>)
 8001b20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b26:	4b21      	ldr	r3, [pc, #132]	@ (8001bac <MX_DMA_Init+0xb0>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2100      	movs	r1, #0
 8001b36:	200c      	movs	r0, #12
 8001b38:	f001 fc03 	bl	8003342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b3c:	200c      	movs	r0, #12
 8001b3e:	f001 fc1c 	bl	800337a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	200d      	movs	r0, #13
 8001b48:	f001 fbfb 	bl	8003342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001b4c:	200d      	movs	r0, #13
 8001b4e:	f001 fc14 	bl	800337a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2100      	movs	r1, #0
 8001b56:	2010      	movs	r0, #16
 8001b58:	f001 fbf3 	bl	8003342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001b5c:	2010      	movs	r0, #16
 8001b5e:	f001 fc0c 	bl	800337a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2100      	movs	r1, #0
 8001b66:	2039      	movs	r0, #57	@ 0x39
 8001b68:	f001 fbeb 	bl	8003342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001b6c:	2039      	movs	r0, #57	@ 0x39
 8001b6e:	f001 fc04 	bl	800337a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2100      	movs	r1, #0
 8001b76:	203a      	movs	r0, #58	@ 0x3a
 8001b78:	f001 fbe3 	bl	8003342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001b7c:	203a      	movs	r0, #58	@ 0x3a
 8001b7e:	f001 fbfc 	bl	800337a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	203b      	movs	r0, #59	@ 0x3b
 8001b88:	f001 fbdb 	bl	8003342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001b8c:	203b      	movs	r0, #59	@ 0x3b
 8001b8e:	f001 fbf4 	bl	800337a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2100      	movs	r1, #0
 8001b96:	2046      	movs	r0, #70	@ 0x46
 8001b98:	f001 fbd3 	bl	8003342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001b9c:	2046      	movs	r0, #70	@ 0x46
 8001b9e:	f001 fbec 	bl	800337a <HAL_NVIC_EnableIRQ>

}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40023800 	.word	0x40023800

08001bb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	@ 0x28
 8001bb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	60da      	str	r2, [r3, #12]
 8001bc4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bc6:	4b64      	ldr	r3, [pc, #400]	@ (8001d58 <MX_GPIO_Init+0x1a8>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bca:	4a63      	ldr	r2, [pc, #396]	@ (8001d58 <MX_GPIO_Init+0x1a8>)
 8001bcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd2:	4b61      	ldr	r3, [pc, #388]	@ (8001d58 <MX_GPIO_Init+0x1a8>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bde:	4b5e      	ldr	r3, [pc, #376]	@ (8001d58 <MX_GPIO_Init+0x1a8>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	4a5d      	ldr	r2, [pc, #372]	@ (8001d58 <MX_GPIO_Init+0x1a8>)
 8001be4:	f043 0304 	orr.w	r3, r3, #4
 8001be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bea:	4b5b      	ldr	r3, [pc, #364]	@ (8001d58 <MX_GPIO_Init+0x1a8>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf6:	4b58      	ldr	r3, [pc, #352]	@ (8001d58 <MX_GPIO_Init+0x1a8>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	4a57      	ldr	r2, [pc, #348]	@ (8001d58 <MX_GPIO_Init+0x1a8>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c02:	4b55      	ldr	r3, [pc, #340]	@ (8001d58 <MX_GPIO_Init+0x1a8>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0e:	4b52      	ldr	r3, [pc, #328]	@ (8001d58 <MX_GPIO_Init+0x1a8>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	4a51      	ldr	r2, [pc, #324]	@ (8001d58 <MX_GPIO_Init+0x1a8>)
 8001c14:	f043 0302 	orr.w	r3, r3, #2
 8001c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1a:	4b4f      	ldr	r3, [pc, #316]	@ (8001d58 <MX_GPIO_Init+0x1a8>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c26:	4b4c      	ldr	r3, [pc, #304]	@ (8001d58 <MX_GPIO_Init+0x1a8>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	4a4b      	ldr	r2, [pc, #300]	@ (8001d58 <MX_GPIO_Init+0x1a8>)
 8001c2c:	f043 0308 	orr.w	r3, r3, #8
 8001c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c32:	4b49      	ldr	r3, [pc, #292]	@ (8001d58 <MX_GPIO_Init+0x1a8>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	603b      	str	r3, [r7, #0]
 8001c3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RGB_R_Pin|BARO_CS_Pin, GPIO_PIN_SET);
 8001c3e:	2201      	movs	r2, #1
 8001c40:	2118      	movs	r1, #24
 8001c42:	4846      	ldr	r0, [pc, #280]	@ (8001d5c <MX_GPIO_Init+0x1ac>)
 8001c44:	f002 f958 	bl	8003ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GYRO_CS_Pin|ACCEL_CS_Pin|CS_EXT_3_Pin|CS_EXT_2_Pin
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f240 313b 	movw	r1, #827	@ 0x33b
 8001c4e:	4844      	ldr	r0, [pc, #272]	@ (8001d60 <MX_GPIO_Init+0x1b0>)
 8001c50:	f002 f952 	bl	8003ef8 <HAL_GPIO_WritePin>
                          |CS_EXT_1_Pin|RGB_B_Pin|RGB_G_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SERVO1_Pin|SERVO2_Pin|SERVO3_Pin|SERVO4_Pin, GPIO_PIN_RESET);
 8001c54:	2200      	movs	r2, #0
 8001c56:	f24d 0104 	movw	r1, #53252	@ 0xd004
 8001c5a:	4841      	ldr	r0, [pc, #260]	@ (8001d60 <MX_GPIO_Init+0x1b0>)
 8001c5c:	f002 f94c 	bl	8003ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SERVO7_Pin|SEVO5_Pin|SERVO6_Pin, GPIO_PIN_RESET);
 8001c60:	2200      	movs	r2, #0
 8001c62:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001c66:	483f      	ldr	r0, [pc, #252]	@ (8001d64 <MX_GPIO_Init+0x1b4>)
 8001c68:	f002 f946 	bl	8003ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RGB_R_Pin */
  GPIO_InitStruct.Pin = RGB_R_Pin;
 8001c6c:	2308      	movs	r3, #8
 8001c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001c70:	2311      	movs	r3, #17
 8001c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RGB_R_GPIO_Port, &GPIO_InitStruct);
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	4619      	mov	r1, r3
 8001c82:	4836      	ldr	r0, [pc, #216]	@ (8001d5c <MX_GPIO_Init+0x1ac>)
 8001c84:	f001 ff84 	bl	8003b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CD_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 8001c88:	2310      	movs	r3, #16
 8001c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c90:	2301      	movs	r3, #1
 8001c92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4832      	ldr	r0, [pc, #200]	@ (8001d64 <MX_GPIO_Init+0x1b4>)
 8001c9c:	f001 ff78 	bl	8003b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : BARO_CS_Pin */
  GPIO_InitStruct.Pin = BARO_CS_Pin;
 8001ca0:	2310      	movs	r3, #16
 8001ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2300      	movs	r3, #0
 8001cae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BARO_CS_GPIO_Port, &GPIO_InitStruct);
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4829      	ldr	r0, [pc, #164]	@ (8001d5c <MX_GPIO_Init+0x1ac>)
 8001cb8:	f001 ff6a 	bl	8003b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : GYRO_CS_Pin ACCEL_CS_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin|ACCEL_CS_Pin;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4823      	ldr	r0, [pc, #140]	@ (8001d60 <MX_GPIO_Init+0x1b0>)
 8001cd4:	f001 ff5c 	bl	8003b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : SERVO1_Pin SERVO2_Pin SERVO3_Pin SERVO4_Pin */
  GPIO_InitStruct.Pin = SERVO1_Pin|SERVO2_Pin|SERVO3_Pin|SERVO4_Pin;
 8001cd8:	f24d 0304 	movw	r3, #53252	@ 0xd004
 8001cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cea:	f107 0314 	add.w	r3, r7, #20
 8001cee:	4619      	mov	r1, r3
 8001cf0:	481b      	ldr	r0, [pc, #108]	@ (8001d60 <MX_GPIO_Init+0x1b0>)
 8001cf2:	f001 ff4d 	bl	8003b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : SERVO7_Pin SEVO5_Pin SERVO6_Pin */
  GPIO_InitStruct.Pin = SERVO7_Pin|SEVO5_Pin|SERVO6_Pin;
 8001cf6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001cfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d04:	2303      	movs	r3, #3
 8001d06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4815      	ldr	r0, [pc, #84]	@ (8001d64 <MX_GPIO_Init+0x1b4>)
 8001d10:	f001 ff3e 	bl	8003b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_EXT_3_Pin CS_EXT_2_Pin CS_EXT_1_Pin */
  GPIO_InitStruct.Pin = CS_EXT_3_Pin|CS_EXT_2_Pin|CS_EXT_1_Pin;
 8001d14:	2338      	movs	r3, #56	@ 0x38
 8001d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d20:	2300      	movs	r3, #0
 8001d22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	4619      	mov	r1, r3
 8001d2a:	480d      	ldr	r0, [pc, #52]	@ (8001d60 <MX_GPIO_Init+0x1b0>)
 8001d2c:	f001 ff30 	bl	8003b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : RGB_B_Pin RGB_G_Pin */
  GPIO_InitStruct.Pin = RGB_B_Pin|RGB_G_Pin;
 8001d30:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001d36:	2311      	movs	r3, #17
 8001d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d42:	f107 0314 	add.w	r3, r7, #20
 8001d46:	4619      	mov	r1, r3
 8001d48:	4805      	ldr	r0, [pc, #20]	@ (8001d60 <MX_GPIO_Init+0x1b0>)
 8001d4a:	f001 ff21 	bl	8003b90 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001d4e:	bf00      	nop
 8001d50:	3728      	adds	r7, #40	@ 0x28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40020800 	.word	0x40020800
 8001d60:	40020400 	.word	0x40020400
 8001d64:	40020000 	.word	0x40020000

08001d68 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001d6e:	463b      	mov	r3, r7
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001d7a:	f001 fb19 	bl	80033b0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001d8a:	231f      	movs	r3, #31
 8001d8c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001d8e:	2387      	movs	r3, #135	@ 0x87
 8001d90:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001d96:	2300      	movs	r3, #0
 8001d98:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001daa:	463b      	mov	r3, r7
 8001dac:	4618      	mov	r0, r3
 8001dae:	f001 fb37 	bl	8003420 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001db2:	2004      	movs	r0, #4
 8001db4:	f001 fb14 	bl	80033e0 <HAL_MPU_Enable>

}
 8001db8:	bf00      	nop
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc4:	b672      	cpsid	i
}
 8001dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dc8:	bf00      	nop
 8001dca:	e7fd      	b.n	8001dc8 <Error_Handler+0x8>

08001dcc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e10 <HAL_MspInit+0x44>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	4a0e      	ldr	r2, [pc, #56]	@ (8001e10 <HAL_MspInit+0x44>)
 8001dd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dde:	4b0c      	ldr	r3, [pc, #48]	@ (8001e10 <HAL_MspInit+0x44>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dea:	4b09      	ldr	r3, [pc, #36]	@ (8001e10 <HAL_MspInit+0x44>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dee:	4a08      	ldr	r2, [pc, #32]	@ (8001e10 <HAL_MspInit+0x44>)
 8001df0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001df4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001df6:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <HAL_MspInit+0x44>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800

08001e14 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08a      	sub	sp, #40	@ 0x28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a15      	ldr	r2, [pc, #84]	@ (8001e88 <HAL_ADC_MspInit+0x74>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d123      	bne.n	8001e7e <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e36:	4b15      	ldr	r3, [pc, #84]	@ (8001e8c <HAL_ADC_MspInit+0x78>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3a:	4a14      	ldr	r2, [pc, #80]	@ (8001e8c <HAL_ADC_MspInit+0x78>)
 8001e3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e42:	4b12      	ldr	r3, [pc, #72]	@ (8001e8c <HAL_ADC_MspInit+0x78>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e4a:	613b      	str	r3, [r7, #16]
 8001e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e8c <HAL_ADC_MspInit+0x78>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	4a0e      	ldr	r2, [pc, #56]	@ (8001e8c <HAL_ADC_MspInit+0x78>)
 8001e54:	f043 0304 	orr.w	r3, r3, #4
 8001e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e8c <HAL_ADC_MspInit+0x78>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = VBAT_SENSE_Pin;
 8001e66:	2301      	movs	r3, #1
 8001e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBAT_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	4619      	mov	r1, r3
 8001e78:	4805      	ldr	r0, [pc, #20]	@ (8001e90 <HAL_ADC_MspInit+0x7c>)
 8001e7a:	f001 fe89 	bl	8003b90 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001e7e:	bf00      	nop
 8001e80:	3728      	adds	r7, #40	@ 0x28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40012000 	.word	0x40012000
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40020800 	.word	0x40020800

08001e94 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b0aa      	sub	sp, #168	@ 0xa8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	2280      	movs	r2, #128	@ 0x80
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f00d ff06 	bl	800fcc6 <memset>
  if(hi2c->Instance==I2C1)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a21      	ldr	r2, [pc, #132]	@ (8001f44 <HAL_I2C_MspInit+0xb0>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d13b      	bne.n	8001f3c <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ec4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ec8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ece:	f107 0314 	add.w	r3, r7, #20
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f004 f92c 	bl	8006130 <HAL_RCCEx_PeriphCLKConfig>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001ede:	f7ff ff6f 	bl	8001dc0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee2:	4b19      	ldr	r3, [pc, #100]	@ (8001f48 <HAL_I2C_MspInit+0xb4>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	4a18      	ldr	r2, [pc, #96]	@ (8001f48 <HAL_I2C_MspInit+0xb4>)
 8001ee8:	f043 0302 	orr.w	r3, r3, #2
 8001eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eee:	4b16      	ldr	r3, [pc, #88]	@ (8001f48 <HAL_I2C_MspInit+0xb4>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001efa:	23c0      	movs	r3, #192	@ 0xc0
 8001efc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f00:	2312      	movs	r3, #18
 8001f02:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f12:	2304      	movs	r3, #4
 8001f14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f18:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	480b      	ldr	r0, [pc, #44]	@ (8001f4c <HAL_I2C_MspInit+0xb8>)
 8001f20:	f001 fe36 	bl	8003b90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f24:	4b08      	ldr	r3, [pc, #32]	@ (8001f48 <HAL_I2C_MspInit+0xb4>)
 8001f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f28:	4a07      	ldr	r2, [pc, #28]	@ (8001f48 <HAL_I2C_MspInit+0xb4>)
 8001f2a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f30:	4b05      	ldr	r3, [pc, #20]	@ (8001f48 <HAL_I2C_MspInit+0xb4>)
 8001f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f3c:	bf00      	nop
 8001f3e:	37a8      	adds	r7, #168	@ 0xa8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40005400 	.word	0x40005400
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40020400 	.word	0x40020400

08001f50 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b0aa      	sub	sp, #168	@ 0xa8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	2280      	movs	r2, #128	@ 0x80
 8001f6e:	2100      	movs	r1, #0
 8001f70:	4618      	mov	r0, r3
 8001f72:	f00d fea8 	bl	800fcc6 <memset>
  if(hsd->Instance==SDMMC1)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a34      	ldr	r2, [pc, #208]	@ (800204c <HAL_SD_MspInit+0xfc>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d161      	bne.n	8002044 <HAL_SD_MspInit+0xf4>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8001f80:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 8001f84:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f92:	f107 0314 	add.w	r3, r7, #20
 8001f96:	4618      	mov	r0, r3
 8001f98:	f004 f8ca 	bl	8006130 <HAL_RCCEx_PeriphCLKConfig>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8001fa2:	f7ff ff0d 	bl	8001dc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001fa6:	4b2a      	ldr	r3, [pc, #168]	@ (8002050 <HAL_SD_MspInit+0x100>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001faa:	4a29      	ldr	r2, [pc, #164]	@ (8002050 <HAL_SD_MspInit+0x100>)
 8001fac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001fb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fb2:	4b27      	ldr	r3, [pc, #156]	@ (8002050 <HAL_SD_MspInit+0x100>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fbe:	4b24      	ldr	r3, [pc, #144]	@ (8002050 <HAL_SD_MspInit+0x100>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	4a23      	ldr	r2, [pc, #140]	@ (8002050 <HAL_SD_MspInit+0x100>)
 8001fc4:	f043 0304 	orr.w	r3, r3, #4
 8001fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fca:	4b21      	ldr	r3, [pc, #132]	@ (8002050 <HAL_SD_MspInit+0x100>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fd6:	4b1e      	ldr	r3, [pc, #120]	@ (8002050 <HAL_SD_MspInit+0x100>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fda:	4a1d      	ldr	r2, [pc, #116]	@ (8002050 <HAL_SD_MspInit+0x100>)
 8001fdc:	f043 0308 	orr.w	r3, r3, #8
 8001fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8002050 <HAL_SD_MspInit+0x100>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001fee:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001ff2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002002:	2303      	movs	r3, #3
 8002004:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002008:	230c      	movs	r3, #12
 800200a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800200e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002012:	4619      	mov	r1, r3
 8002014:	480f      	ldr	r0, [pc, #60]	@ (8002054 <HAL_SD_MspInit+0x104>)
 8002016:	f001 fdbb 	bl	8003b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800201a:	2304      	movs	r3, #4
 800201c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002020:	2302      	movs	r3, #2
 8002022:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202c:	2303      	movs	r3, #3
 800202e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002032:	230c      	movs	r3, #12
 8002034:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002038:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800203c:	4619      	mov	r1, r3
 800203e:	4806      	ldr	r0, [pc, #24]	@ (8002058 <HAL_SD_MspInit+0x108>)
 8002040:	f001 fda6 	bl	8003b90 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8002044:	bf00      	nop
 8002046:	37a8      	adds	r7, #168	@ 0xa8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40012c00 	.word	0x40012c00
 8002050:	40023800 	.word	0x40023800
 8002054:	40020800 	.word	0x40020800
 8002058:	40020c00 	.word	0x40020c00

0800205c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08c      	sub	sp, #48	@ 0x30
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a3c      	ldr	r2, [pc, #240]	@ (800216c <HAL_SPI_MspInit+0x110>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d128      	bne.n	80020d0 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800207e:	4b3c      	ldr	r3, [pc, #240]	@ (8002170 <HAL_SPI_MspInit+0x114>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002082:	4a3b      	ldr	r2, [pc, #236]	@ (8002170 <HAL_SPI_MspInit+0x114>)
 8002084:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002088:	6453      	str	r3, [r2, #68]	@ 0x44
 800208a:	4b39      	ldr	r3, [pc, #228]	@ (8002170 <HAL_SPI_MspInit+0x114>)
 800208c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002092:	61bb      	str	r3, [r7, #24]
 8002094:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002096:	4b36      	ldr	r3, [pc, #216]	@ (8002170 <HAL_SPI_MspInit+0x114>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209a:	4a35      	ldr	r2, [pc, #212]	@ (8002170 <HAL_SPI_MspInit+0x114>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020a2:	4b33      	ldr	r3, [pc, #204]	@ (8002170 <HAL_SPI_MspInit+0x114>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80020ae:	23e0      	movs	r3, #224	@ 0xe0
 80020b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ba:	2303      	movs	r3, #3
 80020bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020be:	2305      	movs	r3, #5
 80020c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c2:	f107 031c 	add.w	r3, r7, #28
 80020c6:	4619      	mov	r1, r3
 80020c8:	482a      	ldr	r0, [pc, #168]	@ (8002174 <HAL_SPI_MspInit+0x118>)
 80020ca:	f001 fd61 	bl	8003b90 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 80020ce:	e049      	b.n	8002164 <HAL_SPI_MspInit+0x108>
  else if(hspi->Instance==SPI2)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a28      	ldr	r2, [pc, #160]	@ (8002178 <HAL_SPI_MspInit+0x11c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d144      	bne.n	8002164 <HAL_SPI_MspInit+0x108>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020da:	4b25      	ldr	r3, [pc, #148]	@ (8002170 <HAL_SPI_MspInit+0x114>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	4a24      	ldr	r2, [pc, #144]	@ (8002170 <HAL_SPI_MspInit+0x114>)
 80020e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020e6:	4b22      	ldr	r3, [pc, #136]	@ (8002170 <HAL_SPI_MspInit+0x114>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002170 <HAL_SPI_MspInit+0x114>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f6:	4a1e      	ldr	r2, [pc, #120]	@ (8002170 <HAL_SPI_MspInit+0x114>)
 80020f8:	f043 0304 	orr.w	r3, r3, #4
 80020fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002170 <HAL_SPI_MspInit+0x114>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002102:	f003 0304 	and.w	r3, r3, #4
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800210a:	4b19      	ldr	r3, [pc, #100]	@ (8002170 <HAL_SPI_MspInit+0x114>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	4a18      	ldr	r2, [pc, #96]	@ (8002170 <HAL_SPI_MspInit+0x114>)
 8002110:	f043 0302 	orr.w	r3, r3, #2
 8002114:	6313      	str	r3, [r2, #48]	@ 0x30
 8002116:	4b16      	ldr	r3, [pc, #88]	@ (8002170 <HAL_SPI_MspInit+0x114>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002122:	2306      	movs	r3, #6
 8002124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212e:	2303      	movs	r3, #3
 8002130:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002132:	2305      	movs	r3, #5
 8002134:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002136:	f107 031c 	add.w	r3, r7, #28
 800213a:	4619      	mov	r1, r3
 800213c:	480f      	ldr	r0, [pc, #60]	@ (800217c <HAL_SPI_MspInit+0x120>)
 800213e:	f001 fd27 	bl	8003b90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002142:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002150:	2303      	movs	r3, #3
 8002152:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002154:	2305      	movs	r3, #5
 8002156:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002158:	f107 031c 	add.w	r3, r7, #28
 800215c:	4619      	mov	r1, r3
 800215e:	4808      	ldr	r0, [pc, #32]	@ (8002180 <HAL_SPI_MspInit+0x124>)
 8002160:	f001 fd16 	bl	8003b90 <HAL_GPIO_Init>
}
 8002164:	bf00      	nop
 8002166:	3730      	adds	r7, #48	@ 0x30
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40013000 	.word	0x40013000
 8002170:	40023800 	.word	0x40023800
 8002174:	40020000 	.word	0x40020000
 8002178:	40003800 	.word	0x40003800
 800217c:	40020800 	.word	0x40020800
 8002180:	40020400 	.word	0x40020400

08002184 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a22      	ldr	r2, [pc, #136]	@ (800221c <HAL_TIM_PWM_MspInit+0x98>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d13d      	bne.n	8002212 <HAL_TIM_PWM_MspInit+0x8e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002196:	4b22      	ldr	r3, [pc, #136]	@ (8002220 <HAL_TIM_PWM_MspInit+0x9c>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219a:	4a21      	ldr	r2, [pc, #132]	@ (8002220 <HAL_TIM_PWM_MspInit+0x9c>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80021a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002220 <HAL_TIM_PWM_MspInit+0x9c>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream3;
 80021ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002224 <HAL_TIM_PWM_MspInit+0xa0>)
 80021b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002228 <HAL_TIM_PWM_MspInit+0xa4>)
 80021b2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80021b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002224 <HAL_TIM_PWM_MspInit+0xa0>)
 80021b6:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80021ba:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021bc:	4b19      	ldr	r3, [pc, #100]	@ (8002224 <HAL_TIM_PWM_MspInit+0xa0>)
 80021be:	2240      	movs	r2, #64	@ 0x40
 80021c0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021c2:	4b18      	ldr	r3, [pc, #96]	@ (8002224 <HAL_TIM_PWM_MspInit+0xa0>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80021c8:	4b16      	ldr	r3, [pc, #88]	@ (8002224 <HAL_TIM_PWM_MspInit+0xa0>)
 80021ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021ce:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021d0:	4b14      	ldr	r3, [pc, #80]	@ (8002224 <HAL_TIM_PWM_MspInit+0xa0>)
 80021d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80021d6:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021d8:	4b12      	ldr	r3, [pc, #72]	@ (8002224 <HAL_TIM_PWM_MspInit+0xa0>)
 80021da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021de:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 80021e0:	4b10      	ldr	r3, [pc, #64]	@ (8002224 <HAL_TIM_PWM_MspInit+0xa0>)
 80021e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021e6:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80021e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002224 <HAL_TIM_PWM_MspInit+0xa0>)
 80021ea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021ee:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002224 <HAL_TIM_PWM_MspInit+0xa0>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80021f6:	480b      	ldr	r0, [pc, #44]	@ (8002224 <HAL_TIM_PWM_MspInit+0xa0>)
 80021f8:	f001 f952 	bl	80034a0 <HAL_DMA_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 8002202:	f7ff fddd 	bl	8001dc0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a06      	ldr	r2, [pc, #24]	@ (8002224 <HAL_TIM_PWM_MspInit+0xa0>)
 800220a:	625a      	str	r2, [r3, #36]	@ 0x24
 800220c:	4a05      	ldr	r2, [pc, #20]	@ (8002224 <HAL_TIM_PWM_MspInit+0xa0>)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002212:	bf00      	nop
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40010000 	.word	0x40010000
 8002220:	40023800 	.word	0x40023800
 8002224:	20000620 	.word	0x20000620
 8002228:	40026458 	.word	0x40026458

0800222c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800223c:	d10c      	bne.n	8002258 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800223e:	4b12      	ldr	r3, [pc, #72]	@ (8002288 <HAL_TIM_Base_MspInit+0x5c>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002242:	4a11      	ldr	r2, [pc, #68]	@ (8002288 <HAL_TIM_Base_MspInit+0x5c>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6413      	str	r3, [r2, #64]	@ 0x40
 800224a:	4b0f      	ldr	r3, [pc, #60]	@ (8002288 <HAL_TIM_Base_MspInit+0x5c>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002256:	e010      	b.n	800227a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM6)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0b      	ldr	r2, [pc, #44]	@ (800228c <HAL_TIM_Base_MspInit+0x60>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d10b      	bne.n	800227a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002262:	4b09      	ldr	r3, [pc, #36]	@ (8002288 <HAL_TIM_Base_MspInit+0x5c>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002266:	4a08      	ldr	r2, [pc, #32]	@ (8002288 <HAL_TIM_Base_MspInit+0x5c>)
 8002268:	f043 0310 	orr.w	r3, r3, #16
 800226c:	6413      	str	r3, [r2, #64]	@ 0x40
 800226e:	4b06      	ldr	r3, [pc, #24]	@ (8002288 <HAL_TIM_Base_MspInit+0x5c>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	60bb      	str	r3, [r7, #8]
 8002278:	68bb      	ldr	r3, [r7, #8]
}
 800227a:	bf00      	nop
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	40023800 	.word	0x40023800
 800228c:	40001000 	.word	0x40001000

08002290 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 030c 	add.w	r3, r7, #12
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a11      	ldr	r2, [pc, #68]	@ (80022f4 <HAL_TIM_MspPostInit+0x64>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d11c      	bne.n	80022ec <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b2:	4b11      	ldr	r3, [pc, #68]	@ (80022f8 <HAL_TIM_MspPostInit+0x68>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	4a10      	ldr	r2, [pc, #64]	@ (80022f8 <HAL_TIM_MspPostInit+0x68>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022be:	4b0e      	ldr	r3, [pc, #56]	@ (80022f8 <HAL_TIM_MspPostInit+0x68>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DSHOT_PIN_Pin;
 80022ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d0:	2302      	movs	r3, #2
 80022d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d8:	2303      	movs	r3, #3
 80022da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022dc:	2301      	movs	r3, #1
 80022de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DSHOT_PIN_GPIO_Port, &GPIO_InitStruct);
 80022e0:	f107 030c 	add.w	r3, r7, #12
 80022e4:	4619      	mov	r1, r3
 80022e6:	4805      	ldr	r0, [pc, #20]	@ (80022fc <HAL_TIM_MspPostInit+0x6c>)
 80022e8:	f001 fc52 	bl	8003b90 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80022ec:	bf00      	nop
 80022ee:	3720      	adds	r7, #32
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40010000 	.word	0x40010000
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40020000 	.word	0x40020000

08002300 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b0b2      	sub	sp, #200	@ 0xc8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002308:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002318:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800231c:	2280      	movs	r2, #128	@ 0x80
 800231e:	2100      	movs	r1, #0
 8002320:	4618      	mov	r0, r3
 8002322:	f00d fcd0 	bl	800fcc6 <memset>
  if(huart->Instance==UART4)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a89      	ldr	r2, [pc, #548]	@ (8002550 <HAL_UART_MspInit+0x250>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d16b      	bne.n	8002408 <HAL_UART_MspInit+0x108>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002330:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002334:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002336:	2300      	movs	r3, #0
 8002338:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800233a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800233e:	4618      	mov	r0, r3
 8002340:	f003 fef6 	bl	8006130 <HAL_RCCEx_PeriphCLKConfig>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800234a:	f7ff fd39 	bl	8001dc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800234e:	4b81      	ldr	r3, [pc, #516]	@ (8002554 <HAL_UART_MspInit+0x254>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002352:	4a80      	ldr	r2, [pc, #512]	@ (8002554 <HAL_UART_MspInit+0x254>)
 8002354:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002358:	6413      	str	r3, [r2, #64]	@ 0x40
 800235a:	4b7e      	ldr	r3, [pc, #504]	@ (8002554 <HAL_UART_MspInit+0x254>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002362:	633b      	str	r3, [r7, #48]	@ 0x30
 8002364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002366:	4b7b      	ldr	r3, [pc, #492]	@ (8002554 <HAL_UART_MspInit+0x254>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236a:	4a7a      	ldr	r2, [pc, #488]	@ (8002554 <HAL_UART_MspInit+0x254>)
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	6313      	str	r3, [r2, #48]	@ 0x30
 8002372:	4b78      	ldr	r3, [pc, #480]	@ (8002554 <HAL_UART_MspInit+0x254>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800237c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800237e:	2303      	movs	r3, #3
 8002380:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002390:	2303      	movs	r3, #3
 8002392:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002396:	2308      	movs	r3, #8
 8002398:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80023a0:	4619      	mov	r1, r3
 80023a2:	486d      	ldr	r0, [pc, #436]	@ (8002558 <HAL_UART_MspInit+0x258>)
 80023a4:	f001 fbf4 	bl	8003b90 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80023a8:	4b6c      	ldr	r3, [pc, #432]	@ (800255c <HAL_UART_MspInit+0x25c>)
 80023aa:	4a6d      	ldr	r2, [pc, #436]	@ (8002560 <HAL_UART_MspInit+0x260>)
 80023ac:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80023ae:	4b6b      	ldr	r3, [pc, #428]	@ (800255c <HAL_UART_MspInit+0x25c>)
 80023b0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80023b4:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023b6:	4b69      	ldr	r3, [pc, #420]	@ (800255c <HAL_UART_MspInit+0x25c>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023bc:	4b67      	ldr	r3, [pc, #412]	@ (800255c <HAL_UART_MspInit+0x25c>)
 80023be:	2200      	movs	r2, #0
 80023c0:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023c2:	4b66      	ldr	r3, [pc, #408]	@ (800255c <HAL_UART_MspInit+0x25c>)
 80023c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023c8:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023ca:	4b64      	ldr	r3, [pc, #400]	@ (800255c <HAL_UART_MspInit+0x25c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023d0:	4b62      	ldr	r3, [pc, #392]	@ (800255c <HAL_UART_MspInit+0x25c>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80023d6:	4b61      	ldr	r3, [pc, #388]	@ (800255c <HAL_UART_MspInit+0x25c>)
 80023d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023dc:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023de:	4b5f      	ldr	r3, [pc, #380]	@ (800255c <HAL_UART_MspInit+0x25c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023e4:	4b5d      	ldr	r3, [pc, #372]	@ (800255c <HAL_UART_MspInit+0x25c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80023ea:	485c      	ldr	r0, [pc, #368]	@ (800255c <HAL_UART_MspInit+0x25c>)
 80023ec:	f001 f858 	bl	80034a0 <HAL_DMA_Init>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 80023f6:	f7ff fce3 	bl	8001dc0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a57      	ldr	r2, [pc, #348]	@ (800255c <HAL_UART_MspInit+0x25c>)
 80023fe:	675a      	str	r2, [r3, #116]	@ 0x74
 8002400:	4a56      	ldr	r2, [pc, #344]	@ (800255c <HAL_UART_MspInit+0x25c>)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8002406:	e20a      	b.n	800281e <HAL_UART_MspInit+0x51e>
  else if(huart->Instance==USART1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a55      	ldr	r2, [pc, #340]	@ (8002564 <HAL_UART_MspInit+0x264>)
 800240e:	4293      	cmp	r3, r2
 8002410:	f040 80b2 	bne.w	8002578 <HAL_UART_MspInit+0x278>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002414:	2340      	movs	r3, #64	@ 0x40
 8002416:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002418:	2300      	movs	r3, #0
 800241a:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800241c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002420:	4618      	mov	r0, r3
 8002422:	f003 fe85 	bl	8006130 <HAL_RCCEx_PeriphCLKConfig>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <HAL_UART_MspInit+0x130>
      Error_Handler();
 800242c:	f7ff fcc8 	bl	8001dc0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002430:	4b48      	ldr	r3, [pc, #288]	@ (8002554 <HAL_UART_MspInit+0x254>)
 8002432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002434:	4a47      	ldr	r2, [pc, #284]	@ (8002554 <HAL_UART_MspInit+0x254>)
 8002436:	f043 0310 	orr.w	r3, r3, #16
 800243a:	6453      	str	r3, [r2, #68]	@ 0x44
 800243c:	4b45      	ldr	r3, [pc, #276]	@ (8002554 <HAL_UART_MspInit+0x254>)
 800243e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002440:	f003 0310 	and.w	r3, r3, #16
 8002444:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002448:	4b42      	ldr	r3, [pc, #264]	@ (8002554 <HAL_UART_MspInit+0x254>)
 800244a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244c:	4a41      	ldr	r2, [pc, #260]	@ (8002554 <HAL_UART_MspInit+0x254>)
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	6313      	str	r3, [r2, #48]	@ 0x30
 8002454:	4b3f      	ldr	r3, [pc, #252]	@ (8002554 <HAL_UART_MspInit+0x254>)
 8002456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	627b      	str	r3, [r7, #36]	@ 0x24
 800245e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002460:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002464:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002468:	2302      	movs	r3, #2
 800246a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002474:	2303      	movs	r3, #3
 8002476:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800247a:	2307      	movs	r3, #7
 800247c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002480:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002484:	4619      	mov	r1, r3
 8002486:	4834      	ldr	r0, [pc, #208]	@ (8002558 <HAL_UART_MspInit+0x258>)
 8002488:	f001 fb82 	bl	8003b90 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800248c:	4b36      	ldr	r3, [pc, #216]	@ (8002568 <HAL_UART_MspInit+0x268>)
 800248e:	4a37      	ldr	r2, [pc, #220]	@ (800256c <HAL_UART_MspInit+0x26c>)
 8002490:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002492:	4b35      	ldr	r3, [pc, #212]	@ (8002568 <HAL_UART_MspInit+0x268>)
 8002494:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002498:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800249a:	4b33      	ldr	r3, [pc, #204]	@ (8002568 <HAL_UART_MspInit+0x268>)
 800249c:	2200      	movs	r2, #0
 800249e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024a0:	4b31      	ldr	r3, [pc, #196]	@ (8002568 <HAL_UART_MspInit+0x268>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024a6:	4b30      	ldr	r3, [pc, #192]	@ (8002568 <HAL_UART_MspInit+0x268>)
 80024a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024ac:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024ae:	4b2e      	ldr	r3, [pc, #184]	@ (8002568 <HAL_UART_MspInit+0x268>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024b4:	4b2c      	ldr	r3, [pc, #176]	@ (8002568 <HAL_UART_MspInit+0x268>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80024ba:	4b2b      	ldr	r3, [pc, #172]	@ (8002568 <HAL_UART_MspInit+0x268>)
 80024bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024c0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80024c2:	4b29      	ldr	r3, [pc, #164]	@ (8002568 <HAL_UART_MspInit+0x268>)
 80024c4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80024c8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024ca:	4b27      	ldr	r3, [pc, #156]	@ (8002568 <HAL_UART_MspInit+0x268>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80024d0:	4825      	ldr	r0, [pc, #148]	@ (8002568 <HAL_UART_MspInit+0x268>)
 80024d2:	f000 ffe5 	bl	80034a0 <HAL_DMA_Init>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 80024dc:	f7ff fc70 	bl	8001dc0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a21      	ldr	r2, [pc, #132]	@ (8002568 <HAL_UART_MspInit+0x268>)
 80024e4:	675a      	str	r2, [r3, #116]	@ 0x74
 80024e6:	4a20      	ldr	r2, [pc, #128]	@ (8002568 <HAL_UART_MspInit+0x268>)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80024ec:	4b20      	ldr	r3, [pc, #128]	@ (8002570 <HAL_UART_MspInit+0x270>)
 80024ee:	4a21      	ldr	r2, [pc, #132]	@ (8002574 <HAL_UART_MspInit+0x274>)
 80024f0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80024f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002570 <HAL_UART_MspInit+0x270>)
 80024f4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80024f8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002570 <HAL_UART_MspInit+0x270>)
 80024fc:	2240      	movs	r2, #64	@ 0x40
 80024fe:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002500:	4b1b      	ldr	r3, [pc, #108]	@ (8002570 <HAL_UART_MspInit+0x270>)
 8002502:	2200      	movs	r2, #0
 8002504:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002506:	4b1a      	ldr	r3, [pc, #104]	@ (8002570 <HAL_UART_MspInit+0x270>)
 8002508:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800250c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800250e:	4b18      	ldr	r3, [pc, #96]	@ (8002570 <HAL_UART_MspInit+0x270>)
 8002510:	2200      	movs	r2, #0
 8002512:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002514:	4b16      	ldr	r3, [pc, #88]	@ (8002570 <HAL_UART_MspInit+0x270>)
 8002516:	2200      	movs	r2, #0
 8002518:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 800251a:	4b15      	ldr	r3, [pc, #84]	@ (8002570 <HAL_UART_MspInit+0x270>)
 800251c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002520:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002522:	4b13      	ldr	r3, [pc, #76]	@ (8002570 <HAL_UART_MspInit+0x270>)
 8002524:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002528:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800252a:	4b11      	ldr	r3, [pc, #68]	@ (8002570 <HAL_UART_MspInit+0x270>)
 800252c:	2200      	movs	r2, #0
 800252e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002530:	480f      	ldr	r0, [pc, #60]	@ (8002570 <HAL_UART_MspInit+0x270>)
 8002532:	f000 ffb5 	bl	80034a0 <HAL_DMA_Init>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <HAL_UART_MspInit+0x240>
      Error_Handler();
 800253c:	f7ff fc40 	bl	8001dc0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a0b      	ldr	r2, [pc, #44]	@ (8002570 <HAL_UART_MspInit+0x270>)
 8002544:	671a      	str	r2, [r3, #112]	@ 0x70
 8002546:	4a0a      	ldr	r2, [pc, #40]	@ (8002570 <HAL_UART_MspInit+0x270>)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800254c:	e167      	b.n	800281e <HAL_UART_MspInit+0x51e>
 800254e:	bf00      	nop
 8002550:	40004c00 	.word	0x40004c00
 8002554:	40023800 	.word	0x40023800
 8002558:	40020000 	.word	0x40020000
 800255c:	20000928 	.word	0x20000928
 8002560:	40026040 	.word	0x40026040
 8002564:	40011000 	.word	0x40011000
 8002568:	20000988 	.word	0x20000988
 800256c:	40026440 	.word	0x40026440
 8002570:	200009e8 	.word	0x200009e8
 8002574:	400264b8 	.word	0x400264b8
  else if(huart->Instance==USART2)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4aaa      	ldr	r2, [pc, #680]	@ (8002828 <HAL_UART_MspInit+0x528>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d16a      	bne.n	8002658 <HAL_UART_MspInit+0x358>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002582:	2380      	movs	r3, #128	@ 0x80
 8002584:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002586:	2300      	movs	r3, #0
 8002588:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800258a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800258e:	4618      	mov	r0, r3
 8002590:	f003 fdce 	bl	8006130 <HAL_RCCEx_PeriphCLKConfig>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_UART_MspInit+0x29e>
      Error_Handler();
 800259a:	f7ff fc11 	bl	8001dc0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800259e:	4ba3      	ldr	r3, [pc, #652]	@ (800282c <HAL_UART_MspInit+0x52c>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a2:	4aa2      	ldr	r2, [pc, #648]	@ (800282c <HAL_UART_MspInit+0x52c>)
 80025a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025aa:	4ba0      	ldr	r3, [pc, #640]	@ (800282c <HAL_UART_MspInit+0x52c>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b2:	623b      	str	r3, [r7, #32]
 80025b4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b6:	4b9d      	ldr	r3, [pc, #628]	@ (800282c <HAL_UART_MspInit+0x52c>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ba:	4a9c      	ldr	r2, [pc, #624]	@ (800282c <HAL_UART_MspInit+0x52c>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025c2:	4b9a      	ldr	r3, [pc, #616]	@ (800282c <HAL_UART_MspInit+0x52c>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	61fb      	str	r3, [r7, #28]
 80025cc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025ce:	230c      	movs	r3, #12
 80025d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d4:	2302      	movs	r3, #2
 80025d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e0:	2303      	movs	r3, #3
 80025e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025e6:	2307      	movs	r3, #7
 80025e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ec:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80025f0:	4619      	mov	r1, r3
 80025f2:	488f      	ldr	r0, [pc, #572]	@ (8002830 <HAL_UART_MspInit+0x530>)
 80025f4:	f001 facc 	bl	8003b90 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80025f8:	4b8e      	ldr	r3, [pc, #568]	@ (8002834 <HAL_UART_MspInit+0x534>)
 80025fa:	4a8f      	ldr	r2, [pc, #572]	@ (8002838 <HAL_UART_MspInit+0x538>)
 80025fc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80025fe:	4b8d      	ldr	r3, [pc, #564]	@ (8002834 <HAL_UART_MspInit+0x534>)
 8002600:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002604:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002606:	4b8b      	ldr	r3, [pc, #556]	@ (8002834 <HAL_UART_MspInit+0x534>)
 8002608:	2200      	movs	r2, #0
 800260a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800260c:	4b89      	ldr	r3, [pc, #548]	@ (8002834 <HAL_UART_MspInit+0x534>)
 800260e:	2200      	movs	r2, #0
 8002610:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002612:	4b88      	ldr	r3, [pc, #544]	@ (8002834 <HAL_UART_MspInit+0x534>)
 8002614:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002618:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800261a:	4b86      	ldr	r3, [pc, #536]	@ (8002834 <HAL_UART_MspInit+0x534>)
 800261c:	2200      	movs	r2, #0
 800261e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002620:	4b84      	ldr	r3, [pc, #528]	@ (8002834 <HAL_UART_MspInit+0x534>)
 8002622:	2200      	movs	r2, #0
 8002624:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002626:	4b83      	ldr	r3, [pc, #524]	@ (8002834 <HAL_UART_MspInit+0x534>)
 8002628:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800262c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800262e:	4b81      	ldr	r3, [pc, #516]	@ (8002834 <HAL_UART_MspInit+0x534>)
 8002630:	2200      	movs	r2, #0
 8002632:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002634:	4b7f      	ldr	r3, [pc, #508]	@ (8002834 <HAL_UART_MspInit+0x534>)
 8002636:	2200      	movs	r2, #0
 8002638:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800263a:	487e      	ldr	r0, [pc, #504]	@ (8002834 <HAL_UART_MspInit+0x534>)
 800263c:	f000 ff30 	bl	80034a0 <HAL_DMA_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <HAL_UART_MspInit+0x34a>
      Error_Handler();
 8002646:	f7ff fbbb 	bl	8001dc0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a79      	ldr	r2, [pc, #484]	@ (8002834 <HAL_UART_MspInit+0x534>)
 800264e:	675a      	str	r2, [r3, #116]	@ 0x74
 8002650:	4a78      	ldr	r2, [pc, #480]	@ (8002834 <HAL_UART_MspInit+0x534>)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002656:	e0e2      	b.n	800281e <HAL_UART_MspInit+0x51e>
  else if(huart->Instance==USART3)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a77      	ldr	r2, [pc, #476]	@ (800283c <HAL_UART_MspInit+0x53c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d16c      	bne.n	800273c <HAL_UART_MspInit+0x43c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002662:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002666:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002668:	2300      	movs	r3, #0
 800266a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800266c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002670:	4618      	mov	r0, r3
 8002672:	f003 fd5d 	bl	8006130 <HAL_RCCEx_PeriphCLKConfig>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <HAL_UART_MspInit+0x380>
      Error_Handler();
 800267c:	f7ff fba0 	bl	8001dc0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002680:	4b6a      	ldr	r3, [pc, #424]	@ (800282c <HAL_UART_MspInit+0x52c>)
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	4a69      	ldr	r2, [pc, #420]	@ (800282c <HAL_UART_MspInit+0x52c>)
 8002686:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800268a:	6413      	str	r3, [r2, #64]	@ 0x40
 800268c:	4b67      	ldr	r3, [pc, #412]	@ (800282c <HAL_UART_MspInit+0x52c>)
 800268e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002690:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002694:	61bb      	str	r3, [r7, #24]
 8002696:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002698:	4b64      	ldr	r3, [pc, #400]	@ (800282c <HAL_UART_MspInit+0x52c>)
 800269a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269c:	4a63      	ldr	r2, [pc, #396]	@ (800282c <HAL_UART_MspInit+0x52c>)
 800269e:	f043 0302 	orr.w	r3, r3, #2
 80026a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80026a4:	4b61      	ldr	r3, [pc, #388]	@ (800282c <HAL_UART_MspInit+0x52c>)
 80026a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80026b0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80026b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b8:	2302      	movs	r3, #2
 80026ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c4:	2303      	movs	r3, #3
 80026c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80026ca:	2307      	movs	r3, #7
 80026cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80026d4:	4619      	mov	r1, r3
 80026d6:	485a      	ldr	r0, [pc, #360]	@ (8002840 <HAL_UART_MspInit+0x540>)
 80026d8:	f001 fa5a 	bl	8003b90 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80026dc:	4b59      	ldr	r3, [pc, #356]	@ (8002844 <HAL_UART_MspInit+0x544>)
 80026de:	4a5a      	ldr	r2, [pc, #360]	@ (8002848 <HAL_UART_MspInit+0x548>)
 80026e0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80026e2:	4b58      	ldr	r3, [pc, #352]	@ (8002844 <HAL_UART_MspInit+0x544>)
 80026e4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80026e8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026ea:	4b56      	ldr	r3, [pc, #344]	@ (8002844 <HAL_UART_MspInit+0x544>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026f0:	4b54      	ldr	r3, [pc, #336]	@ (8002844 <HAL_UART_MspInit+0x544>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026f6:	4b53      	ldr	r3, [pc, #332]	@ (8002844 <HAL_UART_MspInit+0x544>)
 80026f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026fc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026fe:	4b51      	ldr	r3, [pc, #324]	@ (8002844 <HAL_UART_MspInit+0x544>)
 8002700:	2200      	movs	r2, #0
 8002702:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002704:	4b4f      	ldr	r3, [pc, #316]	@ (8002844 <HAL_UART_MspInit+0x544>)
 8002706:	2200      	movs	r2, #0
 8002708:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800270a:	4b4e      	ldr	r3, [pc, #312]	@ (8002844 <HAL_UART_MspInit+0x544>)
 800270c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002710:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002712:	4b4c      	ldr	r3, [pc, #304]	@ (8002844 <HAL_UART_MspInit+0x544>)
 8002714:	2200      	movs	r2, #0
 8002716:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002718:	4b4a      	ldr	r3, [pc, #296]	@ (8002844 <HAL_UART_MspInit+0x544>)
 800271a:	2200      	movs	r2, #0
 800271c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800271e:	4849      	ldr	r0, [pc, #292]	@ (8002844 <HAL_UART_MspInit+0x544>)
 8002720:	f000 febe 	bl	80034a0 <HAL_DMA_Init>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <HAL_UART_MspInit+0x42e>
      Error_Handler();
 800272a:	f7ff fb49 	bl	8001dc0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a44      	ldr	r2, [pc, #272]	@ (8002844 <HAL_UART_MspInit+0x544>)
 8002732:	675a      	str	r2, [r3, #116]	@ 0x74
 8002734:	4a43      	ldr	r2, [pc, #268]	@ (8002844 <HAL_UART_MspInit+0x544>)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800273a:	e070      	b.n	800281e <HAL_UART_MspInit+0x51e>
  else if(huart->Instance==USART6)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a42      	ldr	r2, [pc, #264]	@ (800284c <HAL_UART_MspInit+0x54c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d16b      	bne.n	800281e <HAL_UART_MspInit+0x51e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002746:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800274a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800274c:	2300      	movs	r3, #0
 800274e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002752:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002756:	4618      	mov	r0, r3
 8002758:	f003 fcea 	bl	8006130 <HAL_RCCEx_PeriphCLKConfig>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_UART_MspInit+0x466>
      Error_Handler();
 8002762:	f7ff fb2d 	bl	8001dc0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002766:	4b31      	ldr	r3, [pc, #196]	@ (800282c <HAL_UART_MspInit+0x52c>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276a:	4a30      	ldr	r2, [pc, #192]	@ (800282c <HAL_UART_MspInit+0x52c>)
 800276c:	f043 0320 	orr.w	r3, r3, #32
 8002770:	6453      	str	r3, [r2, #68]	@ 0x44
 8002772:	4b2e      	ldr	r3, [pc, #184]	@ (800282c <HAL_UART_MspInit+0x52c>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002776:	f003 0320 	and.w	r3, r3, #32
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800277e:	4b2b      	ldr	r3, [pc, #172]	@ (800282c <HAL_UART_MspInit+0x52c>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	4a2a      	ldr	r2, [pc, #168]	@ (800282c <HAL_UART_MspInit+0x52c>)
 8002784:	f043 0304 	orr.w	r3, r3, #4
 8002788:	6313      	str	r3, [r2, #48]	@ 0x30
 800278a:	4b28      	ldr	r3, [pc, #160]	@ (800282c <HAL_UART_MspInit+0x52c>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	f003 0304 	and.w	r3, r3, #4
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002796:	23c0      	movs	r3, #192	@ 0xc0
 8002798:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279c:	2302      	movs	r3, #2
 800279e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a8:	2303      	movs	r3, #3
 80027aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80027ae:	2308      	movs	r3, #8
 80027b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027b4:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80027b8:	4619      	mov	r1, r3
 80027ba:	4825      	ldr	r0, [pc, #148]	@ (8002850 <HAL_UART_MspInit+0x550>)
 80027bc:	f001 f9e8 	bl	8003b90 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80027c0:	4b24      	ldr	r3, [pc, #144]	@ (8002854 <HAL_UART_MspInit+0x554>)
 80027c2:	4a25      	ldr	r2, [pc, #148]	@ (8002858 <HAL_UART_MspInit+0x558>)
 80027c4:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80027c6:	4b23      	ldr	r3, [pc, #140]	@ (8002854 <HAL_UART_MspInit+0x554>)
 80027c8:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80027cc:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027ce:	4b21      	ldr	r3, [pc, #132]	@ (8002854 <HAL_UART_MspInit+0x554>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002854 <HAL_UART_MspInit+0x554>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027da:	4b1e      	ldr	r3, [pc, #120]	@ (8002854 <HAL_UART_MspInit+0x554>)
 80027dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027e0:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002854 <HAL_UART_MspInit+0x554>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002854 <HAL_UART_MspInit+0x554>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80027ee:	4b19      	ldr	r3, [pc, #100]	@ (8002854 <HAL_UART_MspInit+0x554>)
 80027f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027f4:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027f6:	4b17      	ldr	r3, [pc, #92]	@ (8002854 <HAL_UART_MspInit+0x554>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027fc:	4b15      	ldr	r3, [pc, #84]	@ (8002854 <HAL_UART_MspInit+0x554>)
 80027fe:	2200      	movs	r2, #0
 8002800:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002802:	4814      	ldr	r0, [pc, #80]	@ (8002854 <HAL_UART_MspInit+0x554>)
 8002804:	f000 fe4c 	bl	80034a0 <HAL_DMA_Init>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_UART_MspInit+0x512>
      Error_Handler();
 800280e:	f7ff fad7 	bl	8001dc0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a0f      	ldr	r2, [pc, #60]	@ (8002854 <HAL_UART_MspInit+0x554>)
 8002816:	675a      	str	r2, [r3, #116]	@ 0x74
 8002818:	4a0e      	ldr	r2, [pc, #56]	@ (8002854 <HAL_UART_MspInit+0x554>)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800281e:	bf00      	nop
 8002820:	37c8      	adds	r7, #200	@ 0xc8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40004400 	.word	0x40004400
 800282c:	40023800 	.word	0x40023800
 8002830:	40020000 	.word	0x40020000
 8002834:	20000a48 	.word	0x20000a48
 8002838:	40026088 	.word	0x40026088
 800283c:	40004800 	.word	0x40004800
 8002840:	40020400 	.word	0x40020400
 8002844:	20000aa8 	.word	0x20000aa8
 8002848:	40026028 	.word	0x40026028
 800284c:	40011400 	.word	0x40011400
 8002850:	40020800 	.word	0x40020800
 8002854:	20000b08 	.word	0x20000b08
 8002858:	40026428 	.word	0x40026428

0800285c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002860:	f003 fc4a 	bl	80060f8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002864:	bf00      	nop
 8002866:	e7fd      	b.n	8002864 <NMI_Handler+0x8>

08002868 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800286c:	bf00      	nop
 800286e:	e7fd      	b.n	800286c <HardFault_Handler+0x4>

08002870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002874:	bf00      	nop
 8002876:	e7fd      	b.n	8002874 <MemManage_Handler+0x4>

08002878 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800287c:	bf00      	nop
 800287e:	e7fd      	b.n	800287c <BusFault_Handler+0x4>

08002880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002884:	bf00      	nop
 8002886:	e7fd      	b.n	8002884 <UsageFault_Handler+0x4>

08002888 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800288c:	bf00      	nop
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002896:	b480      	push	{r7}
 8002898:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800289a:	bf00      	nop
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028a8:	bf00      	nop
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028b6:	f000 f991 	bl	8002bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80028c4:	4802      	ldr	r0, [pc, #8]	@ (80028d0 <DMA1_Stream1_IRQHandler+0x10>)
 80028c6:	f000 fef9 	bl	80036bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80028ca:	bf00      	nop
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20000aa8 	.word	0x20000aa8

080028d4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80028d8:	4802      	ldr	r0, [pc, #8]	@ (80028e4 <DMA1_Stream2_IRQHandler+0x10>)
 80028da:	f000 feef 	bl	80036bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20000928 	.word	0x20000928

080028e8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80028ec:	4802      	ldr	r0, [pc, #8]	@ (80028f8 <DMA1_Stream5_IRQHandler+0x10>)
 80028ee:	f000 fee5 	bl	80036bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000a48 	.word	0x20000a48

080028fc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002900:	4802      	ldr	r0, [pc, #8]	@ (800290c <DMA2_Stream1_IRQHandler+0x10>)
 8002902:	f000 fedb 	bl	80036bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20000b08 	.word	0x20000b08

08002910 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002914:	4802      	ldr	r0, [pc, #8]	@ (8002920 <DMA2_Stream2_IRQHandler+0x10>)
 8002916:	f000 fed1 	bl	80036bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000988 	.word	0x20000988

08002924 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002928:	4802      	ldr	r0, [pc, #8]	@ (8002934 <DMA2_Stream3_IRQHandler+0x10>)
 800292a:	f000 fec7 	bl	80036bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000620 	.word	0x20000620

08002938 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800293c:	4802      	ldr	r0, [pc, #8]	@ (8002948 <OTG_FS_IRQHandler+0x10>)
 800293e:	f001 fd60 	bl	8004402 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20002064 	.word	0x20002064

0800294c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002950:	4802      	ldr	r0, [pc, #8]	@ (800295c <DMA2_Stream7_IRQHandler+0x10>)
 8002952:	f000 feb3 	bl	80036bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	200009e8 	.word	0x200009e8

08002960 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return 1;
 8002964:	2301      	movs	r3, #1
}
 8002966:	4618      	mov	r0, r3
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <_kill>:

int _kill(int pid, int sig)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800297a:	f00d fa07 	bl	800fd8c <__errno>
 800297e:	4603      	mov	r3, r0
 8002980:	2216      	movs	r2, #22
 8002982:	601a      	str	r2, [r3, #0]
  return -1;
 8002984:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002988:	4618      	mov	r0, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <_exit>:

void _exit (int status)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002998:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ffe7 	bl	8002970 <_kill>
  while (1) {}    /* Make sure we hang here */
 80029a2:	bf00      	nop
 80029a4:	e7fd      	b.n	80029a2 <_exit+0x12>

080029a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b086      	sub	sp, #24
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	60f8      	str	r0, [r7, #12]
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	e00a      	b.n	80029ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029b8:	f3af 8000 	nop.w
 80029bc:	4601      	mov	r1, r0
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	1c5a      	adds	r2, r3, #1
 80029c2:	60ba      	str	r2, [r7, #8]
 80029c4:	b2ca      	uxtb	r2, r1
 80029c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	3301      	adds	r3, #1
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	dbf0      	blt.n	80029b8 <_read+0x12>
  }

  return len;
 80029d6:	687b      	ldr	r3, [r7, #4]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	e009      	b.n	8002a06 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	1c5a      	adds	r2, r3, #1
 80029f6:	60ba      	str	r2, [r7, #8]
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	3301      	adds	r3, #1
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	dbf1      	blt.n	80029f2 <_write+0x12>
  }
  return len;
 8002a0e:	687b      	ldr	r3, [r7, #4]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <_close>:

int _close(int file)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a40:	605a      	str	r2, [r3, #4]
  return 0;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <_isatty>:

int _isatty(int file)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a58:	2301      	movs	r3, #1
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b085      	sub	sp, #20
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a88:	4a14      	ldr	r2, [pc, #80]	@ (8002adc <_sbrk+0x5c>)
 8002a8a:	4b15      	ldr	r3, [pc, #84]	@ (8002ae0 <_sbrk+0x60>)
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a94:	4b13      	ldr	r3, [pc, #76]	@ (8002ae4 <_sbrk+0x64>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d102      	bne.n	8002aa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ae4 <_sbrk+0x64>)
 8002a9e:	4a12      	ldr	r2, [pc, #72]	@ (8002ae8 <_sbrk+0x68>)
 8002aa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aa2:	4b10      	ldr	r3, [pc, #64]	@ (8002ae4 <_sbrk+0x64>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d207      	bcs.n	8002ac0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ab0:	f00d f96c 	bl	800fd8c <__errno>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	220c      	movs	r2, #12
 8002ab8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002aba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002abe:	e009      	b.n	8002ad4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ac0:	4b08      	ldr	r3, [pc, #32]	@ (8002ae4 <_sbrk+0x64>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ac6:	4b07      	ldr	r3, [pc, #28]	@ (8002ae4 <_sbrk+0x64>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4413      	add	r3, r2
 8002ace:	4a05      	ldr	r2, [pc, #20]	@ (8002ae4 <_sbrk+0x64>)
 8002ad0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20040000 	.word	0x20040000
 8002ae0:	00000400 	.word	0x00000400
 8002ae4:	20000b68 	.word	0x20000b68
 8002ae8:	20002690 	.word	0x20002690

08002aec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002af0:	4b06      	ldr	r3, [pc, #24]	@ (8002b0c <SystemInit+0x20>)
 8002af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af6:	4a05      	ldr	r2, [pc, #20]	@ (8002b0c <SystemInit+0x20>)
 8002af8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002afc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	e000ed00 	.word	0xe000ed00

08002b10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 8002b14:	f7ff ffea 	bl	8002aec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b18:	480c      	ldr	r0, [pc, #48]	@ (8002b4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b1a:	490d      	ldr	r1, [pc, #52]	@ (8002b50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b20:	e002      	b.n	8002b28 <LoopCopyDataInit>

08002b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b26:	3304      	adds	r3, #4

08002b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b2c:	d3f9      	bcc.n	8002b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b30:	4c0a      	ldr	r4, [pc, #40]	@ (8002b5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b34:	e001      	b.n	8002b3a <LoopFillZerobss>

08002b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b38:	3204      	adds	r2, #4

08002b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b3c:	d3fb      	bcc.n	8002b36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b3e:	f00d f92b 	bl	800fd98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b42:	f7fe fb7d 	bl	8001240 <main>
  bx  lr    
 8002b46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b48:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b50:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8002b54:	08012164 	.word	0x08012164
  ldr r2, =_sbss
 8002b58:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8002b5c:	20002690 	.word	0x20002690

08002b60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b60:	e7fe      	b.n	8002b60 <ADC_IRQHandler>

08002b62 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b66:	2003      	movs	r0, #3
 8002b68:	f000 fbe0 	bl	800332c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b6c:	200f      	movs	r0, #15
 8002b6e:	f000 f805 	bl	8002b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b72:	f7ff f92b 	bl	8001dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b84:	4b12      	ldr	r3, [pc, #72]	@ (8002bd0 <HAL_InitTick+0x54>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	4b12      	ldr	r3, [pc, #72]	@ (8002bd4 <HAL_InitTick+0x58>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 fbfb 	bl	8003396 <HAL_SYSTICK_Config>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e00e      	b.n	8002bc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b0f      	cmp	r3, #15
 8002bae:	d80a      	bhi.n	8002bc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002bb8:	f000 fbc3 	bl	8003342 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bbc:	4a06      	ldr	r2, [pc, #24]	@ (8002bd8 <HAL_InitTick+0x5c>)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	e000      	b.n	8002bc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	20000000 	.word	0x20000000
 8002bd4:	20000008 	.word	0x20000008
 8002bd8:	20000004 	.word	0x20000004

08002bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002be0:	4b06      	ldr	r3, [pc, #24]	@ (8002bfc <HAL_IncTick+0x20>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	461a      	mov	r2, r3
 8002be6:	4b06      	ldr	r3, [pc, #24]	@ (8002c00 <HAL_IncTick+0x24>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4413      	add	r3, r2
 8002bec:	4a04      	ldr	r2, [pc, #16]	@ (8002c00 <HAL_IncTick+0x24>)
 8002bee:	6013      	str	r3, [r2, #0]
}
 8002bf0:	bf00      	nop
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	20000008 	.word	0x20000008
 8002c00:	20000b6c 	.word	0x20000b6c

08002c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return uwTick;
 8002c08:	4b03      	ldr	r3, [pc, #12]	@ (8002c18 <HAL_GetTick+0x14>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	20000b6c 	.word	0x20000b6c

08002c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c24:	f7ff ffee 	bl	8002c04 <HAL_GetTick>
 8002c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c34:	d005      	beq.n	8002c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c36:	4b0a      	ldr	r3, [pc, #40]	@ (8002c60 <HAL_Delay+0x44>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4413      	add	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c42:	bf00      	nop
 8002c44:	f7ff ffde 	bl	8002c04 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d8f7      	bhi.n	8002c44 <HAL_Delay+0x28>
  {
  }
}
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000008 	.word	0x20000008

08002c64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e031      	b.n	8002cde <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d109      	bne.n	8002c96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff f8c6 	bl	8001e14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9a:	f003 0310 	and.w	r3, r3, #16
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d116      	bne.n	8002cd0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ca6:	4b10      	ldr	r3, [pc, #64]	@ (8002ce8 <HAL_ADC_Init+0x84>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	f043 0202 	orr.w	r2, r3, #2
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f970 	bl	8002f98 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc2:	f023 0303 	bic.w	r3, r3, #3
 8002cc6:	f043 0201 	orr.w	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	641a      	str	r2, [r3, #64]	@ 0x40
 8002cce:	e001      	b.n	8002cd4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	ffffeefd 	.word	0xffffeefd

08002cec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x1c>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e136      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x28a>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b09      	cmp	r3, #9
 8002d16:	d93a      	bls.n	8002d8e <HAL_ADC_ConfigChannel+0xa2>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d20:	d035      	beq.n	8002d8e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68d9      	ldr	r1, [r3, #12]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	461a      	mov	r2, r3
 8002d30:	4613      	mov	r3, r2
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	4413      	add	r3, r2
 8002d36:	3b1e      	subs	r3, #30
 8002d38:	2207      	movs	r2, #7
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43da      	mvns	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	400a      	ands	r2, r1
 8002d46:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a8d      	ldr	r2, [pc, #564]	@ (8002f84 <HAL_ADC_ConfigChannel+0x298>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d10a      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68d9      	ldr	r1, [r3, #12]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	061a      	lsls	r2, r3, #24
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d66:	e035      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68d9      	ldr	r1, [r3, #12]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	4618      	mov	r0, r3
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	4403      	add	r3, r0
 8002d80:	3b1e      	subs	r3, #30
 8002d82:	409a      	lsls	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d8c:	e022      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6919      	ldr	r1, [r3, #16]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	4413      	add	r3, r2
 8002da2:	2207      	movs	r2, #7
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43da      	mvns	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	400a      	ands	r2, r1
 8002db0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6919      	ldr	r1, [r3, #16]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	4403      	add	r3, r0
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b06      	cmp	r3, #6
 8002dda:	d824      	bhi.n	8002e26 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	3b05      	subs	r3, #5
 8002dee:	221f      	movs	r2, #31
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43da      	mvns	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	400a      	ands	r2, r1
 8002dfc:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	3b05      	subs	r3, #5
 8002e18:	fa00 f203 	lsl.w	r2, r0, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e24:	e04c      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b0c      	cmp	r3, #12
 8002e2c:	d824      	bhi.n	8002e78 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3b23      	subs	r3, #35	@ 0x23
 8002e40:	221f      	movs	r2, #31
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	43da      	mvns	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	400a      	ands	r2, r1
 8002e4e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	3b23      	subs	r3, #35	@ 0x23
 8002e6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e76:	e023      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	3b41      	subs	r3, #65	@ 0x41
 8002e8a:	221f      	movs	r2, #31
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43da      	mvns	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	400a      	ands	r2, r1
 8002e98:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	3b41      	subs	r3, #65	@ 0x41
 8002eb4:	fa00 f203 	lsl.w	r2, r0, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a30      	ldr	r2, [pc, #192]	@ (8002f88 <HAL_ADC_ConfigChannel+0x29c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d10a      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x1f4>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ed2:	d105      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002ed4:	4b2d      	ldr	r3, [pc, #180]	@ (8002f8c <HAL_ADC_ConfigChannel+0x2a0>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	4a2c      	ldr	r2, [pc, #176]	@ (8002f8c <HAL_ADC_ConfigChannel+0x2a0>)
 8002eda:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002ede:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a28      	ldr	r2, [pc, #160]	@ (8002f88 <HAL_ADC_ConfigChannel+0x29c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d10f      	bne.n	8002f0a <HAL_ADC_ConfigChannel+0x21e>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b12      	cmp	r3, #18
 8002ef0:	d10b      	bne.n	8002f0a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002ef2:	4b26      	ldr	r3, [pc, #152]	@ (8002f8c <HAL_ADC_ConfigChannel+0x2a0>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	4a25      	ldr	r2, [pc, #148]	@ (8002f8c <HAL_ADC_ConfigChannel+0x2a0>)
 8002ef8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002efc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002efe:	4b23      	ldr	r3, [pc, #140]	@ (8002f8c <HAL_ADC_ConfigChannel+0x2a0>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	4a22      	ldr	r2, [pc, #136]	@ (8002f8c <HAL_ADC_ConfigChannel+0x2a0>)
 8002f04:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f08:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8002f88 <HAL_ADC_ConfigChannel+0x29c>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d12b      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x280>
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a1a      	ldr	r2, [pc, #104]	@ (8002f84 <HAL_ADC_ConfigChannel+0x298>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d003      	beq.n	8002f26 <HAL_ADC_ConfigChannel+0x23a>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2b11      	cmp	r3, #17
 8002f24:	d122      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002f26:	4b19      	ldr	r3, [pc, #100]	@ (8002f8c <HAL_ADC_ConfigChannel+0x2a0>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	4a18      	ldr	r2, [pc, #96]	@ (8002f8c <HAL_ADC_ConfigChannel+0x2a0>)
 8002f2c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002f30:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002f32:	4b16      	ldr	r3, [pc, #88]	@ (8002f8c <HAL_ADC_ConfigChannel+0x2a0>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	4a15      	ldr	r2, [pc, #84]	@ (8002f8c <HAL_ADC_ConfigChannel+0x2a0>)
 8002f38:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f3c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a10      	ldr	r2, [pc, #64]	@ (8002f84 <HAL_ADC_ConfigChannel+0x298>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d111      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002f48:	4b11      	ldr	r3, [pc, #68]	@ (8002f90 <HAL_ADC_ConfigChannel+0x2a4>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a11      	ldr	r2, [pc, #68]	@ (8002f94 <HAL_ADC_ConfigChannel+0x2a8>)
 8002f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f52:	0c9a      	lsrs	r2, r3, #18
 8002f54:	4613      	mov	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f5e:	e002      	b.n	8002f66 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1f9      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	10000012 	.word	0x10000012
 8002f88:	40012000 	.word	0x40012000
 8002f8c:	40012300 	.word	0x40012300
 8002f90:	20000000 	.word	0x20000000
 8002f94:	431bde83 	.word	0x431bde83

08002f98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002fa0:	4b78      	ldr	r3, [pc, #480]	@ (8003184 <ADC_Init+0x1ec>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	4a77      	ldr	r2, [pc, #476]	@ (8003184 <ADC_Init+0x1ec>)
 8002fa6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002faa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002fac:	4b75      	ldr	r3, [pc, #468]	@ (8003184 <ADC_Init+0x1ec>)
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	4973      	ldr	r1, [pc, #460]	@ (8003184 <ADC_Init+0x1ec>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6859      	ldr	r1, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	021a      	lsls	r2, r3, #8
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002fec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6859      	ldr	r1, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800300e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6899      	ldr	r1, [r3, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003026:	4a58      	ldr	r2, [pc, #352]	@ (8003188 <ADC_Init+0x1f0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d022      	beq.n	8003072 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800303a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6899      	ldr	r1, [r3, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800305c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6899      	ldr	r1, [r3, #8]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	e00f      	b.n	8003092 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003080:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003090:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0202 	bic.w	r2, r2, #2
 80030a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6899      	ldr	r1, [r3, #8]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	005a      	lsls	r2, r3, #1
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d01b      	beq.n	80030f8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80030de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6859      	ldr	r1, [r3, #4]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ea:	3b01      	subs	r3, #1
 80030ec:	035a      	lsls	r2, r3, #13
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	605a      	str	r2, [r3, #4]
 80030f6:	e007      	b.n	8003108 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003106:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003116:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	3b01      	subs	r3, #1
 8003124:	051a      	lsls	r2, r3, #20
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800313c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6899      	ldr	r1, [r3, #8]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800314a:	025a      	lsls	r2, r3, #9
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003162:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6899      	ldr	r1, [r3, #8]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	029a      	lsls	r2, r3, #10
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	609a      	str	r2, [r3, #8]
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	40012300 	.word	0x40012300
 8003188:	0f000001 	.word	0x0f000001

0800318c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800319c:	4b0b      	ldr	r3, [pc, #44]	@ (80031cc <__NVIC_SetPriorityGrouping+0x40>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031a8:	4013      	ands	r3, r2
 80031aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031b4:	4b06      	ldr	r3, [pc, #24]	@ (80031d0 <__NVIC_SetPriorityGrouping+0x44>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ba:	4a04      	ldr	r2, [pc, #16]	@ (80031cc <__NVIC_SetPriorityGrouping+0x40>)
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	60d3      	str	r3, [r2, #12]
}
 80031c0:	bf00      	nop
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	e000ed00 	.word	0xe000ed00
 80031d0:	05fa0000 	.word	0x05fa0000

080031d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031d8:	4b04      	ldr	r3, [pc, #16]	@ (80031ec <__NVIC_GetPriorityGrouping+0x18>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	0a1b      	lsrs	r3, r3, #8
 80031de:	f003 0307 	and.w	r3, r3, #7
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	e000ed00 	.word	0xe000ed00

080031f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	db0b      	blt.n	800321a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003202:	79fb      	ldrb	r3, [r7, #7]
 8003204:	f003 021f 	and.w	r2, r3, #31
 8003208:	4907      	ldr	r1, [pc, #28]	@ (8003228 <__NVIC_EnableIRQ+0x38>)
 800320a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320e:	095b      	lsrs	r3, r3, #5
 8003210:	2001      	movs	r0, #1
 8003212:	fa00 f202 	lsl.w	r2, r0, r2
 8003216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	e000e100 	.word	0xe000e100

0800322c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	6039      	str	r1, [r7, #0]
 8003236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323c:	2b00      	cmp	r3, #0
 800323e:	db0a      	blt.n	8003256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	b2da      	uxtb	r2, r3
 8003244:	490c      	ldr	r1, [pc, #48]	@ (8003278 <__NVIC_SetPriority+0x4c>)
 8003246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324a:	0112      	lsls	r2, r2, #4
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	440b      	add	r3, r1
 8003250:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003254:	e00a      	b.n	800326c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	b2da      	uxtb	r2, r3
 800325a:	4908      	ldr	r1, [pc, #32]	@ (800327c <__NVIC_SetPriority+0x50>)
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	3b04      	subs	r3, #4
 8003264:	0112      	lsls	r2, r2, #4
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	440b      	add	r3, r1
 800326a:	761a      	strb	r2, [r3, #24]
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	e000e100 	.word	0xe000e100
 800327c:	e000ed00 	.word	0xe000ed00

08003280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003280:	b480      	push	{r7}
 8003282:	b089      	sub	sp, #36	@ 0x24
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f1c3 0307 	rsb	r3, r3, #7
 800329a:	2b04      	cmp	r3, #4
 800329c:	bf28      	it	cs
 800329e:	2304      	movcs	r3, #4
 80032a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	3304      	adds	r3, #4
 80032a6:	2b06      	cmp	r3, #6
 80032a8:	d902      	bls.n	80032b0 <NVIC_EncodePriority+0x30>
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	3b03      	subs	r3, #3
 80032ae:	e000      	b.n	80032b2 <NVIC_EncodePriority+0x32>
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43da      	mvns	r2, r3
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	401a      	ands	r2, r3
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	fa01 f303 	lsl.w	r3, r1, r3
 80032d2:	43d9      	mvns	r1, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d8:	4313      	orrs	r3, r2
         );
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3724      	adds	r7, #36	@ 0x24
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
	...

080032e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032f8:	d301      	bcc.n	80032fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032fa:	2301      	movs	r3, #1
 80032fc:	e00f      	b.n	800331e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003328 <SysTick_Config+0x40>)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3b01      	subs	r3, #1
 8003304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003306:	210f      	movs	r1, #15
 8003308:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800330c:	f7ff ff8e 	bl	800322c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003310:	4b05      	ldr	r3, [pc, #20]	@ (8003328 <SysTick_Config+0x40>)
 8003312:	2200      	movs	r2, #0
 8003314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003316:	4b04      	ldr	r3, [pc, #16]	@ (8003328 <SysTick_Config+0x40>)
 8003318:	2207      	movs	r2, #7
 800331a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	e000e010 	.word	0xe000e010

0800332c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7ff ff29 	bl	800318c <__NVIC_SetPriorityGrouping>
}
 800333a:	bf00      	nop
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003342:	b580      	push	{r7, lr}
 8003344:	b086      	sub	sp, #24
 8003346:	af00      	add	r7, sp, #0
 8003348:	4603      	mov	r3, r0
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	607a      	str	r2, [r7, #4]
 800334e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003354:	f7ff ff3e 	bl	80031d4 <__NVIC_GetPriorityGrouping>
 8003358:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	68b9      	ldr	r1, [r7, #8]
 800335e:	6978      	ldr	r0, [r7, #20]
 8003360:	f7ff ff8e 	bl	8003280 <NVIC_EncodePriority>
 8003364:	4602      	mov	r2, r0
 8003366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800336a:	4611      	mov	r1, r2
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff ff5d 	bl	800322c <__NVIC_SetPriority>
}
 8003372:	bf00      	nop
 8003374:	3718      	adds	r7, #24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b082      	sub	sp, #8
 800337e:	af00      	add	r7, sp, #0
 8003380:	4603      	mov	r3, r0
 8003382:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff ff31 	bl	80031f0 <__NVIC_EnableIRQ>
}
 800338e:	bf00      	nop
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7ff ffa2 	bl	80032e8 <SysTick_Config>
 80033a4:	4603      	mov	r3, r0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
	...

080033b0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80033b4:	f3bf 8f5f 	dmb	sy
}
 80033b8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80033ba:	4b07      	ldr	r3, [pc, #28]	@ (80033d8 <HAL_MPU_Disable+0x28>)
 80033bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033be:	4a06      	ldr	r2, [pc, #24]	@ (80033d8 <HAL_MPU_Disable+0x28>)
 80033c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033c4:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80033c6:	4b05      	ldr	r3, [pc, #20]	@ (80033dc <HAL_MPU_Disable+0x2c>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	605a      	str	r2, [r3, #4]
}
 80033cc:	bf00      	nop
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	e000ed00 	.word	0xe000ed00
 80033dc:	e000ed90 	.word	0xe000ed90

080033e0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80033e8:	4a0b      	ldr	r2, [pc, #44]	@ (8003418 <HAL_MPU_Enable+0x38>)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f043 0301 	orr.w	r3, r3, #1
 80033f0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80033f2:	4b0a      	ldr	r3, [pc, #40]	@ (800341c <HAL_MPU_Enable+0x3c>)
 80033f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f6:	4a09      	ldr	r2, [pc, #36]	@ (800341c <HAL_MPU_Enable+0x3c>)
 80033f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033fc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80033fe:	f3bf 8f4f 	dsb	sy
}
 8003402:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003404:	f3bf 8f6f 	isb	sy
}
 8003408:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	e000ed90 	.word	0xe000ed90
 800341c:	e000ed00 	.word	0xe000ed00

08003420 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	785a      	ldrb	r2, [r3, #1]
 800342c:	4b1b      	ldr	r3, [pc, #108]	@ (800349c <HAL_MPU_ConfigRegion+0x7c>)
 800342e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003430:	4b1a      	ldr	r3, [pc, #104]	@ (800349c <HAL_MPU_ConfigRegion+0x7c>)
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	4a19      	ldr	r2, [pc, #100]	@ (800349c <HAL_MPU_ConfigRegion+0x7c>)
 8003436:	f023 0301 	bic.w	r3, r3, #1
 800343a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800343c:	4a17      	ldr	r2, [pc, #92]	@ (800349c <HAL_MPU_ConfigRegion+0x7c>)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	7b1b      	ldrb	r3, [r3, #12]
 8003448:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	7adb      	ldrb	r3, [r3, #11]
 800344e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003450:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	7a9b      	ldrb	r3, [r3, #10]
 8003456:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003458:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	7b5b      	ldrb	r3, [r3, #13]
 800345e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003460:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	7b9b      	ldrb	r3, [r3, #14]
 8003466:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003468:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	7bdb      	ldrb	r3, [r3, #15]
 800346e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003470:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	7a5b      	ldrb	r3, [r3, #9]
 8003476:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003478:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	7a1b      	ldrb	r3, [r3, #8]
 800347e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003480:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	7812      	ldrb	r2, [r2, #0]
 8003486:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003488:	4a04      	ldr	r2, [pc, #16]	@ (800349c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800348a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800348c:	6113      	str	r3, [r2, #16]
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	e000ed90 	.word	0xe000ed90

080034a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034ac:	f7ff fbaa 	bl	8002c04 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e099      	b.n	80035f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2202      	movs	r2, #2
 80034c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0201 	bic.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034dc:	e00f      	b.n	80034fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034de:	f7ff fb91 	bl	8002c04 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b05      	cmp	r3, #5
 80034ea:	d908      	bls.n	80034fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2220      	movs	r2, #32
 80034f0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2203      	movs	r2, #3
 80034f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e078      	b.n	80035f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1e8      	bne.n	80034de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	4b38      	ldr	r3, [pc, #224]	@ (80035f8 <HAL_DMA_Init+0x158>)
 8003518:	4013      	ands	r3, r2
 800351a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800352a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003536:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003542:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003554:	2b04      	cmp	r3, #4
 8003556:	d107      	bne.n	8003568 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003560:	4313      	orrs	r3, r2
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	4313      	orrs	r3, r2
 8003566:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f023 0307 	bic.w	r3, r3, #7
 800357e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	4313      	orrs	r3, r2
 8003588:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358e:	2b04      	cmp	r3, #4
 8003590:	d117      	bne.n	80035c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	4313      	orrs	r3, r2
 800359a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00e      	beq.n	80035c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 fa77 	bl	8003a98 <DMA_CheckFifoParam>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d008      	beq.n	80035c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2240      	movs	r2, #64	@ 0x40
 80035b4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80035be:	2301      	movs	r3, #1
 80035c0:	e016      	b.n	80035f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 fa2e 	bl	8003a2c <DMA_CalcBaseAndBitshift>
 80035d0:	4603      	mov	r3, r0
 80035d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d8:	223f      	movs	r2, #63	@ 0x3f
 80035da:	409a      	lsls	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	e010803f 	.word	0xe010803f

080035fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800360a:	2300      	movs	r3, #0
 800360c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003612:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800361a:	2b01      	cmp	r3, #1
 800361c:	d101      	bne.n	8003622 <HAL_DMA_Start_IT+0x26>
 800361e:	2302      	movs	r3, #2
 8003620:	e048      	b.n	80036b4 <HAL_DMA_Start_IT+0xb8>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b01      	cmp	r3, #1
 8003634:	d137      	bne.n	80036a6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2202      	movs	r2, #2
 800363a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	68b9      	ldr	r1, [r7, #8]
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 f9c0 	bl	80039d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003654:	223f      	movs	r2, #63	@ 0x3f
 8003656:	409a      	lsls	r2, r3
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0216 	orr.w	r2, r2, #22
 800366a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695a      	ldr	r2, [r3, #20]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800367a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003680:	2b00      	cmp	r3, #0
 8003682:	d007      	beq.n	8003694 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0208 	orr.w	r2, r2, #8
 8003692:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	e005      	b.n	80036b2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036ae:	2302      	movs	r3, #2
 80036b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80036b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3718      	adds	r7, #24
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80036c4:	2300      	movs	r3, #0
 80036c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80036c8:	4b8e      	ldr	r3, [pc, #568]	@ (8003904 <HAL_DMA_IRQHandler+0x248>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a8e      	ldr	r2, [pc, #568]	@ (8003908 <HAL_DMA_IRQHandler+0x24c>)
 80036ce:	fba2 2303 	umull	r2, r3, r2, r3
 80036d2:	0a9b      	lsrs	r3, r3, #10
 80036d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e6:	2208      	movs	r2, #8
 80036e8:	409a      	lsls	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4013      	ands	r3, r2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d01a      	beq.n	8003728 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d013      	beq.n	8003728 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0204 	bic.w	r2, r2, #4
 800370e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003714:	2208      	movs	r2, #8
 8003716:	409a      	lsls	r2, r3
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003720:	f043 0201 	orr.w	r2, r3, #1
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800372c:	2201      	movs	r2, #1
 800372e:	409a      	lsls	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4013      	ands	r3, r2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d012      	beq.n	800375e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00b      	beq.n	800375e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800374a:	2201      	movs	r2, #1
 800374c:	409a      	lsls	r2, r3
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003756:	f043 0202 	orr.w	r2, r3, #2
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003762:	2204      	movs	r2, #4
 8003764:	409a      	lsls	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	4013      	ands	r3, r2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d012      	beq.n	8003794 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00b      	beq.n	8003794 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003780:	2204      	movs	r2, #4
 8003782:	409a      	lsls	r2, r3
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800378c:	f043 0204 	orr.w	r2, r3, #4
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003798:	2210      	movs	r2, #16
 800379a:	409a      	lsls	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4013      	ands	r3, r2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d043      	beq.n	800382c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d03c      	beq.n	800382c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b6:	2210      	movs	r2, #16
 80037b8:	409a      	lsls	r2, r3
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d018      	beq.n	80037fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d108      	bne.n	80037ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d024      	beq.n	800382c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	4798      	blx	r3
 80037ea:	e01f      	b.n	800382c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d01b      	beq.n	800382c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	4798      	blx	r3
 80037fc:	e016      	b.n	800382c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003808:	2b00      	cmp	r3, #0
 800380a:	d107      	bne.n	800381c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0208 	bic.w	r2, r2, #8
 800381a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003830:	2220      	movs	r2, #32
 8003832:	409a      	lsls	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4013      	ands	r3, r2
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 808f 	beq.w	800395c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0310 	and.w	r3, r3, #16
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 8087 	beq.w	800395c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003852:	2220      	movs	r2, #32
 8003854:	409a      	lsls	r2, r3
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b05      	cmp	r3, #5
 8003864:	d136      	bne.n	80038d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0216 	bic.w	r2, r2, #22
 8003874:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695a      	ldr	r2, [r3, #20]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003884:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	d103      	bne.n	8003896 <HAL_DMA_IRQHandler+0x1da>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003892:	2b00      	cmp	r3, #0
 8003894:	d007      	beq.n	80038a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0208 	bic.w	r2, r2, #8
 80038a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038aa:	223f      	movs	r2, #63	@ 0x3f
 80038ac:	409a      	lsls	r2, r3
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d07e      	beq.n	80039c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	4798      	blx	r3
        }
        return;
 80038d2:	e079      	b.n	80039c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d01d      	beq.n	800391e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10d      	bne.n	800390c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d031      	beq.n	800395c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	4798      	blx	r3
 8003900:	e02c      	b.n	800395c <HAL_DMA_IRQHandler+0x2a0>
 8003902:	bf00      	nop
 8003904:	20000000 	.word	0x20000000
 8003908:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003910:	2b00      	cmp	r3, #0
 8003912:	d023      	beq.n	800395c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	4798      	blx	r3
 800391c:	e01e      	b.n	800395c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10f      	bne.n	800394c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0210 	bic.w	r2, r2, #16
 800393a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003960:	2b00      	cmp	r3, #0
 8003962:	d032      	beq.n	80039ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	d022      	beq.n	80039b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2205      	movs	r2, #5
 8003974:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0201 	bic.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	3301      	adds	r3, #1
 800398c:	60bb      	str	r3, [r7, #8]
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	429a      	cmp	r2, r3
 8003992:	d307      	bcc.n	80039a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1f2      	bne.n	8003988 <HAL_DMA_IRQHandler+0x2cc>
 80039a2:	e000      	b.n	80039a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80039a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d005      	beq.n	80039ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	4798      	blx	r3
 80039c6:	e000      	b.n	80039ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80039c8:	bf00      	nop
    }
  }
}
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
 80039dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80039ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b40      	cmp	r3, #64	@ 0x40
 80039fc:	d108      	bne.n	8003a10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a0e:	e007      	b.n	8003a20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	60da      	str	r2, [r3, #12]
}
 8003a20:	bf00      	nop
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	3b10      	subs	r3, #16
 8003a3c:	4a13      	ldr	r2, [pc, #76]	@ (8003a8c <DMA_CalcBaseAndBitshift+0x60>)
 8003a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a42:	091b      	lsrs	r3, r3, #4
 8003a44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a46:	4a12      	ldr	r2, [pc, #72]	@ (8003a90 <DMA_CalcBaseAndBitshift+0x64>)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b03      	cmp	r3, #3
 8003a58:	d908      	bls.n	8003a6c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	4b0c      	ldr	r3, [pc, #48]	@ (8003a94 <DMA_CalcBaseAndBitshift+0x68>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	1d1a      	adds	r2, r3, #4
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a6a:	e006      	b.n	8003a7a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	461a      	mov	r2, r3
 8003a72:	4b08      	ldr	r3, [pc, #32]	@ (8003a94 <DMA_CalcBaseAndBitshift+0x68>)
 8003a74:	4013      	ands	r3, r2
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	aaaaaaab 	.word	0xaaaaaaab
 8003a90:	08011dc4 	.word	0x08011dc4
 8003a94:	fffffc00 	.word	0xfffffc00

08003a98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d11f      	bne.n	8003af2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	d856      	bhi.n	8003b66 <DMA_CheckFifoParam+0xce>
 8003ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ac0 <DMA_CheckFifoParam+0x28>)
 8003aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abe:	bf00      	nop
 8003ac0:	08003ad1 	.word	0x08003ad1
 8003ac4:	08003ae3 	.word	0x08003ae3
 8003ac8:	08003ad1 	.word	0x08003ad1
 8003acc:	08003b67 	.word	0x08003b67
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d046      	beq.n	8003b6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ae0:	e043      	b.n	8003b6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003aea:	d140      	bne.n	8003b6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003af0:	e03d      	b.n	8003b6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003afa:	d121      	bne.n	8003b40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b03      	cmp	r3, #3
 8003b00:	d837      	bhi.n	8003b72 <DMA_CheckFifoParam+0xda>
 8003b02:	a201      	add	r2, pc, #4	@ (adr r2, 8003b08 <DMA_CheckFifoParam+0x70>)
 8003b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b08:	08003b19 	.word	0x08003b19
 8003b0c:	08003b1f 	.word	0x08003b1f
 8003b10:	08003b19 	.word	0x08003b19
 8003b14:	08003b31 	.word	0x08003b31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b1c:	e030      	b.n	8003b80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d025      	beq.n	8003b76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b2e:	e022      	b.n	8003b76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b34:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b38:	d11f      	bne.n	8003b7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b3e:	e01c      	b.n	8003b7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d903      	bls.n	8003b4e <DMA_CheckFifoParam+0xb6>
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2b03      	cmp	r3, #3
 8003b4a:	d003      	beq.n	8003b54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b4c:	e018      	b.n	8003b80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	73fb      	strb	r3, [r7, #15]
      break;
 8003b52:	e015      	b.n	8003b80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00e      	beq.n	8003b7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	73fb      	strb	r3, [r7, #15]
      break;
 8003b64:	e00b      	b.n	8003b7e <DMA_CheckFifoParam+0xe6>
      break;
 8003b66:	bf00      	nop
 8003b68:	e00a      	b.n	8003b80 <DMA_CheckFifoParam+0xe8>
      break;
 8003b6a:	bf00      	nop
 8003b6c:	e008      	b.n	8003b80 <DMA_CheckFifoParam+0xe8>
      break;
 8003b6e:	bf00      	nop
 8003b70:	e006      	b.n	8003b80 <DMA_CheckFifoParam+0xe8>
      break;
 8003b72:	bf00      	nop
 8003b74:	e004      	b.n	8003b80 <DMA_CheckFifoParam+0xe8>
      break;
 8003b76:	bf00      	nop
 8003b78:	e002      	b.n	8003b80 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b7a:	bf00      	nop
 8003b7c:	e000      	b.n	8003b80 <DMA_CheckFifoParam+0xe8>
      break;
 8003b7e:	bf00      	nop
    }
  } 
  
  return status; 
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop

08003b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b089      	sub	sp, #36	@ 0x24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003baa:	2300      	movs	r3, #0
 8003bac:	61fb      	str	r3, [r7, #28]
 8003bae:	e169      	b.n	8003e84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	f040 8158 	bne.w	8003e7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d005      	beq.n	8003be6 <HAL_GPIO_Init+0x56>
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d130      	bne.n	8003c48 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	2203      	movs	r2, #3
 8003bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	43db      	mvns	r3, r3
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	091b      	lsrs	r3, r3, #4
 8003c32:	f003 0201 	and.w	r2, r3, #1
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f003 0303 	and.w	r3, r3, #3
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d017      	beq.n	8003c84 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	2203      	movs	r2, #3
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	43db      	mvns	r3, r3
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f003 0303 	and.w	r3, r3, #3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d123      	bne.n	8003cd8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	08da      	lsrs	r2, r3, #3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3208      	adds	r2, #8
 8003c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	220f      	movs	r2, #15
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	43db      	mvns	r3, r3
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	08da      	lsrs	r2, r3, #3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	3208      	adds	r2, #8
 8003cd2:	69b9      	ldr	r1, [r7, #24]
 8003cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	2203      	movs	r2, #3
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	4013      	ands	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f003 0203 	and.w	r2, r3, #3
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 80b2 	beq.w	8003e7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d1a:	4b60      	ldr	r3, [pc, #384]	@ (8003e9c <HAL_GPIO_Init+0x30c>)
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1e:	4a5f      	ldr	r2, [pc, #380]	@ (8003e9c <HAL_GPIO_Init+0x30c>)
 8003d20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d24:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d26:	4b5d      	ldr	r3, [pc, #372]	@ (8003e9c <HAL_GPIO_Init+0x30c>)
 8003d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003d32:	4a5b      	ldr	r2, [pc, #364]	@ (8003ea0 <HAL_GPIO_Init+0x310>)
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	089b      	lsrs	r3, r3, #2
 8003d38:	3302      	adds	r3, #2
 8003d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	220f      	movs	r2, #15
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4013      	ands	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a52      	ldr	r2, [pc, #328]	@ (8003ea4 <HAL_GPIO_Init+0x314>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d02b      	beq.n	8003db6 <HAL_GPIO_Init+0x226>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a51      	ldr	r2, [pc, #324]	@ (8003ea8 <HAL_GPIO_Init+0x318>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d025      	beq.n	8003db2 <HAL_GPIO_Init+0x222>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a50      	ldr	r2, [pc, #320]	@ (8003eac <HAL_GPIO_Init+0x31c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d01f      	beq.n	8003dae <HAL_GPIO_Init+0x21e>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a4f      	ldr	r2, [pc, #316]	@ (8003eb0 <HAL_GPIO_Init+0x320>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d019      	beq.n	8003daa <HAL_GPIO_Init+0x21a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a4e      	ldr	r2, [pc, #312]	@ (8003eb4 <HAL_GPIO_Init+0x324>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d013      	beq.n	8003da6 <HAL_GPIO_Init+0x216>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a4d      	ldr	r2, [pc, #308]	@ (8003eb8 <HAL_GPIO_Init+0x328>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00d      	beq.n	8003da2 <HAL_GPIO_Init+0x212>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a4c      	ldr	r2, [pc, #304]	@ (8003ebc <HAL_GPIO_Init+0x32c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d007      	beq.n	8003d9e <HAL_GPIO_Init+0x20e>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a4b      	ldr	r2, [pc, #300]	@ (8003ec0 <HAL_GPIO_Init+0x330>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d101      	bne.n	8003d9a <HAL_GPIO_Init+0x20a>
 8003d96:	2307      	movs	r3, #7
 8003d98:	e00e      	b.n	8003db8 <HAL_GPIO_Init+0x228>
 8003d9a:	2308      	movs	r3, #8
 8003d9c:	e00c      	b.n	8003db8 <HAL_GPIO_Init+0x228>
 8003d9e:	2306      	movs	r3, #6
 8003da0:	e00a      	b.n	8003db8 <HAL_GPIO_Init+0x228>
 8003da2:	2305      	movs	r3, #5
 8003da4:	e008      	b.n	8003db8 <HAL_GPIO_Init+0x228>
 8003da6:	2304      	movs	r3, #4
 8003da8:	e006      	b.n	8003db8 <HAL_GPIO_Init+0x228>
 8003daa:	2303      	movs	r3, #3
 8003dac:	e004      	b.n	8003db8 <HAL_GPIO_Init+0x228>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e002      	b.n	8003db8 <HAL_GPIO_Init+0x228>
 8003db2:	2301      	movs	r3, #1
 8003db4:	e000      	b.n	8003db8 <HAL_GPIO_Init+0x228>
 8003db6:	2300      	movs	r3, #0
 8003db8:	69fa      	ldr	r2, [r7, #28]
 8003dba:	f002 0203 	and.w	r2, r2, #3
 8003dbe:	0092      	lsls	r2, r2, #2
 8003dc0:	4093      	lsls	r3, r2
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003dc8:	4935      	ldr	r1, [pc, #212]	@ (8003ea0 <HAL_GPIO_Init+0x310>)
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	089b      	lsrs	r3, r3, #2
 8003dce:	3302      	adds	r3, #2
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dd6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ec4 <HAL_GPIO_Init+0x334>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	43db      	mvns	r3, r3
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	4013      	ands	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dfa:	4a32      	ldr	r2, [pc, #200]	@ (8003ec4 <HAL_GPIO_Init+0x334>)
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e00:	4b30      	ldr	r3, [pc, #192]	@ (8003ec4 <HAL_GPIO_Init+0x334>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e24:	4a27      	ldr	r2, [pc, #156]	@ (8003ec4 <HAL_GPIO_Init+0x334>)
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e2a:	4b26      	ldr	r3, [pc, #152]	@ (8003ec4 <HAL_GPIO_Init+0x334>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	43db      	mvns	r3, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4013      	ands	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e4e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ec4 <HAL_GPIO_Init+0x334>)
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e54:	4b1b      	ldr	r3, [pc, #108]	@ (8003ec4 <HAL_GPIO_Init+0x334>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	4013      	ands	r3, r2
 8003e62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e78:	4a12      	ldr	r2, [pc, #72]	@ (8003ec4 <HAL_GPIO_Init+0x334>)
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	3301      	adds	r3, #1
 8003e82:	61fb      	str	r3, [r7, #28]
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	2b0f      	cmp	r3, #15
 8003e88:	f67f ae92 	bls.w	8003bb0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003e8c:	bf00      	nop
 8003e8e:	bf00      	nop
 8003e90:	3724      	adds	r7, #36	@ 0x24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	40013800 	.word	0x40013800
 8003ea4:	40020000 	.word	0x40020000
 8003ea8:	40020400 	.word	0x40020400
 8003eac:	40020800 	.word	0x40020800
 8003eb0:	40020c00 	.word	0x40020c00
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	40021400 	.word	0x40021400
 8003ebc:	40021800 	.word	0x40021800
 8003ec0:	40021c00 	.word	0x40021c00
 8003ec4:	40013c00 	.word	0x40013c00

08003ec8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691a      	ldr	r2, [r3, #16]
 8003ed8:	887b      	ldrh	r3, [r7, #2]
 8003eda:	4013      	ands	r3, r2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	73fb      	strb	r3, [r7, #15]
 8003ee4:	e001      	b.n	8003eea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	460b      	mov	r3, r1
 8003f02:	807b      	strh	r3, [r7, #2]
 8003f04:	4613      	mov	r3, r2
 8003f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f08:	787b      	ldrb	r3, [r7, #1]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f0e:	887a      	ldrh	r2, [r7, #2]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003f14:	e003      	b.n	8003f1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003f16:	887b      	ldrh	r3, [r7, #2]
 8003f18:	041a      	lsls	r2, r3, #16
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	619a      	str	r2, [r3, #24]
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
	...

08003f2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e08b      	b.n	8004056 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d106      	bne.n	8003f58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7fd ff9e 	bl	8001e94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2224      	movs	r2, #36	@ 0x24
 8003f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0201 	bic.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d107      	bne.n	8003fa6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fa2:	609a      	str	r2, [r3, #8]
 8003fa4:	e006      	b.n	8003fb4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003fb2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d108      	bne.n	8003fce <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fca:	605a      	str	r2, [r3, #4]
 8003fcc:	e007      	b.n	8003fde <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fdc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6859      	ldr	r1, [r3, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8004060 <HAL_I2C_Init+0x134>)
 8003fea:	430b      	orrs	r3, r1
 8003fec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ffc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691a      	ldr	r2, [r3, #16]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	69d9      	ldr	r1, [r3, #28]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a1a      	ldr	r2, [r3, #32]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	02008000 	.word	0x02008000

08004064 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b20      	cmp	r3, #32
 8004078:	d138      	bne.n	80040ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004084:	2302      	movs	r3, #2
 8004086:	e032      	b.n	80040ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2224      	movs	r2, #36	@ 0x24
 8004094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0201 	bic.w	r2, r2, #1
 80040a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80040b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6819      	ldr	r1, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0201 	orr.w	r2, r2, #1
 80040d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2220      	movs	r2, #32
 80040dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040e8:	2300      	movs	r3, #0
 80040ea:	e000      	b.n	80040ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040ec:	2302      	movs	r3, #2
  }
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b085      	sub	sp, #20
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
 8004102:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b20      	cmp	r3, #32
 800410e:	d139      	bne.n	8004184 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004116:	2b01      	cmp	r3, #1
 8004118:	d101      	bne.n	800411e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800411a:	2302      	movs	r3, #2
 800411c:	e033      	b.n	8004186 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2224      	movs	r2, #36	@ 0x24
 800412a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0201 	bic.w	r2, r2, #1
 800413c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800414c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	021b      	lsls	r3, r3, #8
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	4313      	orrs	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0201 	orr.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004180:	2300      	movs	r3, #0
 8004182:	e000      	b.n	8004186 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004184:	2302      	movs	r3, #2
  }
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b086      	sub	sp, #24
 8004196:	af02      	add	r7, sp, #8
 8004198:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e108      	b.n	80043b6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d106      	bne.n	80041c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f00a fbc0 	bl	800e944 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2203      	movs	r2, #3
 80041c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041d2:	d102      	bne.n	80041da <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4618      	mov	r0, r3
 80041e0:	f006 fd61 	bl	800aca6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6818      	ldr	r0, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	7c1a      	ldrb	r2, [r3, #16]
 80041ec:	f88d 2000 	strb.w	r2, [sp]
 80041f0:	3304      	adds	r3, #4
 80041f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041f4:	f006 fc18 	bl	800aa28 <USB_CoreInit>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d005      	beq.n	800420a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2202      	movs	r2, #2
 8004202:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e0d5      	b.n	80043b6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2100      	movs	r1, #0
 8004210:	4618      	mov	r0, r3
 8004212:	f006 fd59 	bl	800acc8 <USB_SetCurrentMode>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d005      	beq.n	8004228 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e0c6      	b.n	80043b6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004228:	2300      	movs	r3, #0
 800422a:	73fb      	strb	r3, [r7, #15]
 800422c:	e04a      	b.n	80042c4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800422e:	7bfa      	ldrb	r2, [r7, #15]
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	4613      	mov	r3, r2
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	4413      	add	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	440b      	add	r3, r1
 800423c:	3315      	adds	r3, #21
 800423e:	2201      	movs	r2, #1
 8004240:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004242:	7bfa      	ldrb	r2, [r7, #15]
 8004244:	6879      	ldr	r1, [r7, #4]
 8004246:	4613      	mov	r3, r2
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	4413      	add	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	440b      	add	r3, r1
 8004250:	3314      	adds	r3, #20
 8004252:	7bfa      	ldrb	r2, [r7, #15]
 8004254:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004256:	7bfa      	ldrb	r2, [r7, #15]
 8004258:	7bfb      	ldrb	r3, [r7, #15]
 800425a:	b298      	uxth	r0, r3
 800425c:	6879      	ldr	r1, [r7, #4]
 800425e:	4613      	mov	r3, r2
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	4413      	add	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	440b      	add	r3, r1
 8004268:	332e      	adds	r3, #46	@ 0x2e
 800426a:	4602      	mov	r2, r0
 800426c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800426e:	7bfa      	ldrb	r2, [r7, #15]
 8004270:	6879      	ldr	r1, [r7, #4]
 8004272:	4613      	mov	r3, r2
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	4413      	add	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	440b      	add	r3, r1
 800427c:	3318      	adds	r3, #24
 800427e:	2200      	movs	r2, #0
 8004280:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004282:	7bfa      	ldrb	r2, [r7, #15]
 8004284:	6879      	ldr	r1, [r7, #4]
 8004286:	4613      	mov	r3, r2
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	4413      	add	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	440b      	add	r3, r1
 8004290:	331c      	adds	r3, #28
 8004292:	2200      	movs	r2, #0
 8004294:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004296:	7bfa      	ldrb	r2, [r7, #15]
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	4613      	mov	r3, r2
 800429c:	00db      	lsls	r3, r3, #3
 800429e:	4413      	add	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	440b      	add	r3, r1
 80042a4:	3320      	adds	r3, #32
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80042aa:	7bfa      	ldrb	r2, [r7, #15]
 80042ac:	6879      	ldr	r1, [r7, #4]
 80042ae:	4613      	mov	r3, r2
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	4413      	add	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	440b      	add	r3, r1
 80042b8:	3324      	adds	r3, #36	@ 0x24
 80042ba:	2200      	movs	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042be:	7bfb      	ldrb	r3, [r7, #15]
 80042c0:	3301      	adds	r3, #1
 80042c2:	73fb      	strb	r3, [r7, #15]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	791b      	ldrb	r3, [r3, #4]
 80042c8:	7bfa      	ldrb	r2, [r7, #15]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d3af      	bcc.n	800422e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042ce:	2300      	movs	r3, #0
 80042d0:	73fb      	strb	r3, [r7, #15]
 80042d2:	e044      	b.n	800435e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042d4:	7bfa      	ldrb	r2, [r7, #15]
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	4613      	mov	r3, r2
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	4413      	add	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80042e6:	2200      	movs	r2, #0
 80042e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80042ea:	7bfa      	ldrb	r2, [r7, #15]
 80042ec:	6879      	ldr	r1, [r7, #4]
 80042ee:	4613      	mov	r3, r2
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	4413      	add	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	440b      	add	r3, r1
 80042f8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80042fc:	7bfa      	ldrb	r2, [r7, #15]
 80042fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004300:	7bfa      	ldrb	r2, [r7, #15]
 8004302:	6879      	ldr	r1, [r7, #4]
 8004304:	4613      	mov	r3, r2
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	4413      	add	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	440b      	add	r3, r1
 800430e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004312:	2200      	movs	r2, #0
 8004314:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004316:	7bfa      	ldrb	r2, [r7, #15]
 8004318:	6879      	ldr	r1, [r7, #4]
 800431a:	4613      	mov	r3, r2
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	4413      	add	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	440b      	add	r3, r1
 8004324:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800432c:	7bfa      	ldrb	r2, [r7, #15]
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	4613      	mov	r3, r2
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	4413      	add	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	440b      	add	r3, r1
 800433a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004342:	7bfa      	ldrb	r2, [r7, #15]
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	4613      	mov	r3, r2
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	4413      	add	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	440b      	add	r3, r1
 8004350:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004358:	7bfb      	ldrb	r3, [r7, #15]
 800435a:	3301      	adds	r3, #1
 800435c:	73fb      	strb	r3, [r7, #15]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	791b      	ldrb	r3, [r3, #4]
 8004362:	7bfa      	ldrb	r2, [r7, #15]
 8004364:	429a      	cmp	r2, r3
 8004366:	d3b5      	bcc.n	80042d4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6818      	ldr	r0, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	7c1a      	ldrb	r2, [r3, #16]
 8004370:	f88d 2000 	strb.w	r2, [sp]
 8004374:	3304      	adds	r3, #4
 8004376:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004378:	f006 fcf2 	bl	800ad60 <USB_DevInit>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d005      	beq.n	800438e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2202      	movs	r2, #2
 8004386:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e013      	b.n	80043b6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	7b1b      	ldrb	r3, [r3, #12]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d102      	bne.n	80043aa <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f001 f959 	bl	800565c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f007 fd43 	bl	800be3a <USB_DevDisconnect>

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b082      	sub	sp, #8
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d101      	bne.n	80043d4 <HAL_PCD_Start+0x16>
 80043d0:	2302      	movs	r3, #2
 80043d2:	e012      	b.n	80043fa <HAL_PCD_Start+0x3c>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f006 fc4f 	bl	800ac84 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f007 fd04 	bl	800bdf8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004402:	b590      	push	{r4, r7, lr}
 8004404:	b08d      	sub	sp, #52	@ 0x34
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f007 fdc2 	bl	800bfa2 <USB_GetMode>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	f040 84b9 	bne.w	8004d98 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f007 fd26 	bl	800be7c <USB_ReadInterrupts>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 84af 	beq.w	8004d96 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	0a1b      	lsrs	r3, r3, #8
 8004442:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4618      	mov	r0, r3
 8004452:	f007 fd13 	bl	800be7c <USB_ReadInterrupts>
 8004456:	4603      	mov	r3, r0
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b02      	cmp	r3, #2
 800445e:	d107      	bne.n	8004470 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	695a      	ldr	r2, [r3, #20]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f002 0202 	and.w	r2, r2, #2
 800446e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4618      	mov	r0, r3
 8004476:	f007 fd01 	bl	800be7c <USB_ReadInterrupts>
 800447a:	4603      	mov	r3, r0
 800447c:	f003 0310 	and.w	r3, r3, #16
 8004480:	2b10      	cmp	r3, #16
 8004482:	d161      	bne.n	8004548 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	699a      	ldr	r2, [r3, #24]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0210 	bic.w	r2, r2, #16
 8004492:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	f003 020f 	and.w	r2, r3, #15
 80044a0:	4613      	mov	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	4413      	add	r3, r2
 80044b0:	3304      	adds	r3, #4
 80044b2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80044ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80044be:	d124      	bne.n	800450a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80044c6:	4013      	ands	r3, r2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d035      	beq.n	8004538 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	091b      	lsrs	r3, r3, #4
 80044d4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80044d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044da:	b29b      	uxth	r3, r3
 80044dc:	461a      	mov	r2, r3
 80044de:	6a38      	ldr	r0, [r7, #32]
 80044e0:	f007 fb38 	bl	800bb54 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	68da      	ldr	r2, [r3, #12]
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	091b      	lsrs	r3, r3, #4
 80044ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044f0:	441a      	add	r2, r3
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	695a      	ldr	r2, [r3, #20]
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	091b      	lsrs	r3, r3, #4
 80044fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004502:	441a      	add	r2, r3
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	615a      	str	r2, [r3, #20]
 8004508:	e016      	b.n	8004538 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004510:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004514:	d110      	bne.n	8004538 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800451c:	2208      	movs	r2, #8
 800451e:	4619      	mov	r1, r3
 8004520:	6a38      	ldr	r0, [r7, #32]
 8004522:	f007 fb17 	bl	800bb54 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	695a      	ldr	r2, [r3, #20]
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	091b      	lsrs	r3, r3, #4
 800452e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004532:	441a      	add	r2, r3
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699a      	ldr	r2, [r3, #24]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0210 	orr.w	r2, r2, #16
 8004546:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4618      	mov	r0, r3
 800454e:	f007 fc95 	bl	800be7c <USB_ReadInterrupts>
 8004552:	4603      	mov	r3, r0
 8004554:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004558:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800455c:	f040 80a7 	bne.w	80046ae <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4618      	mov	r0, r3
 800456a:	f007 fc9a 	bl	800bea2 <USB_ReadDevAllOutEpInterrupt>
 800456e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004570:	e099      	b.n	80046a6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 808e 	beq.w	800469a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	4611      	mov	r1, r2
 8004588:	4618      	mov	r0, r3
 800458a:	f007 fcbe 	bl	800bf0a <USB_ReadDevOutEPInterrupt>
 800458e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00c      	beq.n	80045b4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800459a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045a6:	461a      	mov	r2, r3
 80045a8:	2301      	movs	r3, #1
 80045aa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80045ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fece 	bl	8005350 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f003 0308 	and.w	r3, r3, #8
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00c      	beq.n	80045d8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80045be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ca:	461a      	mov	r2, r3
 80045cc:	2308      	movs	r3, #8
 80045ce:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80045d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 ffa4 	bl	8005520 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f003 0310 	and.w	r3, r3, #16
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d008      	beq.n	80045f4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	015a      	lsls	r2, r3, #5
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ee:	461a      	mov	r2, r3
 80045f0:	2310      	movs	r3, #16
 80045f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d030      	beq.n	8004660 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004606:	2b80      	cmp	r3, #128	@ 0x80
 8004608:	d109      	bne.n	800461e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	69fa      	ldr	r2, [r7, #28]
 8004614:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004618:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800461c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800461e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004620:	4613      	mov	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	4413      	add	r3, r2
 8004630:	3304      	adds	r3, #4
 8004632:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	78db      	ldrb	r3, [r3, #3]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d108      	bne.n	800464e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2200      	movs	r2, #0
 8004640:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004644:	b2db      	uxtb	r3, r3
 8004646:	4619      	mov	r1, r3
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f00a fa9f 	bl	800eb8c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800464e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	4413      	add	r3, r2
 8004656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800465a:	461a      	mov	r2, r3
 800465c:	2302      	movs	r3, #2
 800465e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	2b00      	cmp	r3, #0
 8004668:	d008      	beq.n	800467c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800466a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004676:	461a      	mov	r2, r3
 8004678:	2320      	movs	r3, #32
 800467a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d009      	beq.n	800469a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004688:	015a      	lsls	r2, r3, #5
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	4413      	add	r3, r2
 800468e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004692:	461a      	mov	r2, r3
 8004694:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004698:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800469a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469c:	3301      	adds	r3, #1
 800469e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80046a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a2:	085b      	lsrs	r3, r3, #1
 80046a4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80046a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f47f af62 	bne.w	8004572 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f007 fbe2 	bl	800be7c <USB_ReadInterrupts>
 80046b8:	4603      	mov	r3, r0
 80046ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80046c2:	f040 80db 	bne.w	800487c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f007 fc03 	bl	800bed6 <USB_ReadDevAllInEpInterrupt>
 80046d0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80046d2:	2300      	movs	r3, #0
 80046d4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80046d6:	e0cd      	b.n	8004874 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80046d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 80c2 	beq.w	8004868 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	4611      	mov	r1, r2
 80046ee:	4618      	mov	r0, r3
 80046f0:	f007 fc29 	bl	800bf46 <USB_ReadDevInEPInterrupt>
 80046f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d057      	beq.n	80047b0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	2201      	movs	r2, #1
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004714:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	43db      	mvns	r3, r3
 800471a:	69f9      	ldr	r1, [r7, #28]
 800471c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004720:	4013      	ands	r3, r2
 8004722:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	4413      	add	r3, r2
 800472c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004730:	461a      	mov	r2, r3
 8004732:	2301      	movs	r3, #1
 8004734:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	799b      	ldrb	r3, [r3, #6]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d132      	bne.n	80047a4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004742:	4613      	mov	r3, r2
 8004744:	00db      	lsls	r3, r3, #3
 8004746:	4413      	add	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	440b      	add	r3, r1
 800474c:	3320      	adds	r3, #32
 800474e:	6819      	ldr	r1, [r3, #0]
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004754:	4613      	mov	r3, r2
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	4413      	add	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4403      	add	r3, r0
 800475e:	331c      	adds	r3, #28
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4419      	add	r1, r3
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004768:	4613      	mov	r3, r2
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	4413      	add	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4403      	add	r3, r0
 8004772:	3320      	adds	r3, #32
 8004774:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004778:	2b00      	cmp	r3, #0
 800477a:	d113      	bne.n	80047a4 <HAL_PCD_IRQHandler+0x3a2>
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004780:	4613      	mov	r3, r2
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	4413      	add	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	440b      	add	r3, r1
 800478a:	3324      	adds	r3, #36	@ 0x24
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d108      	bne.n	80047a4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6818      	ldr	r0, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800479c:	461a      	mov	r2, r3
 800479e:	2101      	movs	r1, #1
 80047a0:	f007 fc32 	bl	800c008 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80047a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	4619      	mov	r1, r3
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f00a f969 	bl	800ea82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d008      	beq.n	80047cc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80047ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047c6:	461a      	mov	r2, r3
 80047c8:	2308      	movs	r3, #8
 80047ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f003 0310 	and.w	r3, r3, #16
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d008      	beq.n	80047e8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80047d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d8:	015a      	lsls	r2, r3, #5
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	4413      	add	r3, r2
 80047de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047e2:	461a      	mov	r2, r3
 80047e4:	2310      	movs	r3, #16
 80047e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d008      	beq.n	8004804 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80047f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047fe:	461a      	mov	r2, r3
 8004800:	2340      	movs	r3, #64	@ 0x40
 8004802:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d023      	beq.n	8004856 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800480e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004810:	6a38      	ldr	r0, [r7, #32]
 8004812:	f006 fc15 	bl	800b040 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004818:	4613      	mov	r3, r2
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	4413      	add	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	3310      	adds	r3, #16
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	4413      	add	r3, r2
 8004826:	3304      	adds	r3, #4
 8004828:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	78db      	ldrb	r3, [r3, #3]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d108      	bne.n	8004844 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2200      	movs	r2, #0
 8004836:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483a:	b2db      	uxtb	r3, r3
 800483c:	4619      	mov	r1, r3
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f00a f9b6 	bl	800ebb0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004846:	015a      	lsls	r2, r3, #5
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	4413      	add	r3, r2
 800484c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004850:	461a      	mov	r2, r3
 8004852:	2302      	movs	r3, #2
 8004854:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004860:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fce8 	bl	8005238 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486a:	3301      	adds	r3, #1
 800486c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800486e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004870:	085b      	lsrs	r3, r3, #1
 8004872:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004876:	2b00      	cmp	r3, #0
 8004878:	f47f af2e 	bne.w	80046d8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4618      	mov	r0, r3
 8004882:	f007 fafb 	bl	800be7c <USB_ReadInterrupts>
 8004886:	4603      	mov	r3, r0
 8004888:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800488c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004890:	d122      	bne.n	80048d8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	69fa      	ldr	r2, [r7, #28]
 800489c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048a0:	f023 0301 	bic.w	r3, r3, #1
 80048a4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d108      	bne.n	80048c2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80048b8:	2100      	movs	r1, #0
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f00a fb34 	bl	800ef28 <HAL_PCDEx_LPM_Callback>
 80048c0:	e002      	b.n	80048c8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f00a f954 	bl	800eb70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	695a      	ldr	r2, [r3, #20]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80048d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4618      	mov	r0, r3
 80048de:	f007 facd 	bl	800be7c <USB_ReadInterrupts>
 80048e2:	4603      	mov	r3, r0
 80048e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048ec:	d112      	bne.n	8004914 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d102      	bne.n	8004904 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f00a f910 	bl	800eb24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	695a      	ldr	r2, [r3, #20]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004912:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4618      	mov	r0, r3
 800491a:	f007 faaf 	bl	800be7c <USB_ReadInterrupts>
 800491e:	4603      	mov	r3, r0
 8004920:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004924:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004928:	d121      	bne.n	800496e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	695a      	ldr	r2, [r3, #20]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004938:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004940:	2b00      	cmp	r3, #0
 8004942:	d111      	bne.n	8004968 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004952:	089b      	lsrs	r3, r3, #2
 8004954:	f003 020f 	and.w	r2, r3, #15
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800495e:	2101      	movs	r1, #1
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f00a fae1 	bl	800ef28 <HAL_PCDEx_LPM_Callback>
 8004966:	e002      	b.n	800496e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f00a f8db 	bl	800eb24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4618      	mov	r0, r3
 8004974:	f007 fa82 	bl	800be7c <USB_ReadInterrupts>
 8004978:	4603      	mov	r3, r0
 800497a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800497e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004982:	f040 80b7 	bne.w	8004af4 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	69fa      	ldr	r2, [r7, #28]
 8004990:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004994:	f023 0301 	bic.w	r3, r3, #1
 8004998:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2110      	movs	r1, #16
 80049a0:	4618      	mov	r0, r3
 80049a2:	f006 fb4d 	bl	800b040 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049a6:	2300      	movs	r3, #0
 80049a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049aa:	e046      	b.n	8004a3a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80049ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ae:	015a      	lsls	r2, r3, #5
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049b8:	461a      	mov	r2, r3
 80049ba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80049be:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80049c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049d0:	0151      	lsls	r1, r2, #5
 80049d2:	69fa      	ldr	r2, [r7, #28]
 80049d4:	440a      	add	r2, r1
 80049d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80049de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80049e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e2:	015a      	lsls	r2, r3, #5
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	4413      	add	r3, r2
 80049e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ec:	461a      	mov	r2, r3
 80049ee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80049f2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80049f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a04:	0151      	lsls	r1, r2, #5
 8004a06:	69fa      	ldr	r2, [r7, #28]
 8004a08:	440a      	add	r2, r1
 8004a0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a12:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a24:	0151      	lsls	r1, r2, #5
 8004a26:	69fa      	ldr	r2, [r7, #28]
 8004a28:	440a      	add	r2, r1
 8004a2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a2e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004a32:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a36:	3301      	adds	r3, #1
 8004a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	791b      	ldrb	r3, [r3, #4]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d3b2      	bcc.n	80049ac <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	69fa      	ldr	r2, [r7, #28]
 8004a50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a54:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004a58:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	7bdb      	ldrb	r3, [r3, #15]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d016      	beq.n	8004a90 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a6c:	69fa      	ldr	r2, [r7, #28]
 8004a6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a72:	f043 030b 	orr.w	r3, r3, #11
 8004a76:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a82:	69fa      	ldr	r2, [r7, #28]
 8004a84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a88:	f043 030b 	orr.w	r3, r3, #11
 8004a8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a8e:	e015      	b.n	8004abc <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a96:	695a      	ldr	r2, [r3, #20]
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	f242 032b 	movw	r3, #8235	@ 0x202b
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	69fa      	ldr	r2, [r7, #28]
 8004ab2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ab6:	f043 030b 	orr.w	r3, r3, #11
 8004aba:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	69fa      	ldr	r2, [r7, #28]
 8004ac6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004aca:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004ace:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6818      	ldr	r0, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f007 fa92 	bl	800c008 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695a      	ldr	r2, [r3, #20]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004af2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f007 f9bf 	bl	800be7c <USB_ReadInterrupts>
 8004afe:	4603      	mov	r3, r0
 8004b00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b08:	d123      	bne.n	8004b52 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f007 fa56 	bl	800bfc0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f006 fb0a 	bl	800b132 <USB_GetDevSpeed>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	461a      	mov	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681c      	ldr	r4, [r3, #0]
 8004b2a:	f001 fab1 	bl	8006090 <HAL_RCC_GetHCLKFreq>
 8004b2e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004b34:	461a      	mov	r2, r3
 8004b36:	4620      	mov	r0, r4
 8004b38:	f006 f802 	bl	800ab40 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f009 ffc8 	bl	800ead2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695a      	ldr	r2, [r3, #20]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004b50:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f007 f990 	bl	800be7c <USB_ReadInterrupts>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	f003 0308 	and.w	r3, r3, #8
 8004b62:	2b08      	cmp	r3, #8
 8004b64:	d10a      	bne.n	8004b7c <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f009 ffa5 	bl	800eab6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	695a      	ldr	r2, [r3, #20]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f002 0208 	and.w	r2, r2, #8
 8004b7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4618      	mov	r0, r3
 8004b82:	f007 f97b 	bl	800be7c <USB_ReadInterrupts>
 8004b86:	4603      	mov	r3, r0
 8004b88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b8c:	2b80      	cmp	r3, #128	@ 0x80
 8004b8e:	d123      	bne.n	8004bd8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b98:	6a3b      	ldr	r3, [r7, #32]
 8004b9a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ba0:	e014      	b.n	8004bcc <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004ba2:	6879      	ldr	r1, [r7, #4]
 8004ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	4413      	add	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	440b      	add	r3, r1
 8004bb0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d105      	bne.n	8004bc6 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 fb08 	bl	80051d6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc8:	3301      	adds	r3, #1
 8004bca:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	791b      	ldrb	r3, [r3, #4]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d3e4      	bcc.n	8004ba2 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f007 f94d 	bl	800be7c <USB_ReadInterrupts>
 8004be2:	4603      	mov	r3, r0
 8004be4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004be8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bec:	d13c      	bne.n	8004c68 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004bee:	2301      	movs	r3, #1
 8004bf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bf2:	e02b      	b.n	8004c4c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c04:	6879      	ldr	r1, [r7, #4]
 8004c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c08:	4613      	mov	r3, r2
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	4413      	add	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	440b      	add	r3, r1
 8004c12:	3318      	adds	r3, #24
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d115      	bne.n	8004c46 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004c1a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	da12      	bge.n	8004c46 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004c20:	6879      	ldr	r1, [r7, #4]
 8004c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c24:	4613      	mov	r3, r2
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	4413      	add	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	440b      	add	r3, r1
 8004c2e:	3317      	adds	r3, #23
 8004c30:	2201      	movs	r2, #1
 8004c32:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	4619      	mov	r1, r3
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 fac8 	bl	80051d6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c48:	3301      	adds	r3, #1
 8004c4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	791b      	ldrb	r3, [r3, #4]
 8004c50:	461a      	mov	r2, r3
 8004c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d3cd      	bcc.n	8004bf4 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	695a      	ldr	r2, [r3, #20]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004c66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f007 f905 	bl	800be7c <USB_ReadInterrupts>
 8004c72:	4603      	mov	r3, r0
 8004c74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c7c:	d156      	bne.n	8004d2c <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c7e:	2301      	movs	r3, #1
 8004c80:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c82:	e045      	b.n	8004d10 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c98:	4613      	mov	r3, r2
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	4413      	add	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	440b      	add	r3, r1
 8004ca2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d12e      	bne.n	8004d0a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004cac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	da2b      	bge.n	8004d0a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004cbe:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d121      	bne.n	8004d0a <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cca:	4613      	mov	r3, r2
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	4413      	add	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	440b      	add	r3, r1
 8004cd4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004cd8:	2201      	movs	r2, #1
 8004cda:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004cdc:	6a3b      	ldr	r3, [r7, #32]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004ce8:	6a3b      	ldr	r3, [r7, #32]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10a      	bne.n	8004d0a <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	69fa      	ldr	r2, [r7, #28]
 8004cfe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d06:	6053      	str	r3, [r2, #4]
            break;
 8004d08:	e008      	b.n	8004d1c <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	791b      	ldrb	r3, [r3, #4]
 8004d14:	461a      	mov	r2, r3
 8004d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d3b3      	bcc.n	8004c84 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	695a      	ldr	r2, [r3, #20]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004d2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f007 f8a3 	bl	800be7c <USB_ReadInterrupts>
 8004d36:	4603      	mov	r3, r0
 8004d38:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d40:	d10a      	bne.n	8004d58 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f009 ff46 	bl	800ebd4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	695a      	ldr	r2, [r3, #20]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004d56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f007 f88d 	bl	800be7c <USB_ReadInterrupts>
 8004d62:	4603      	mov	r3, r0
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	d115      	bne.n	8004d98 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	f003 0304 	and.w	r3, r3, #4
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f009 ff36 	bl	800ebf0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6859      	ldr	r1, [r3, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	605a      	str	r2, [r3, #4]
 8004d94:	e000      	b.n	8004d98 <HAL_PCD_IRQHandler+0x996>
      return;
 8004d96:	bf00      	nop
    }
  }
}
 8004d98:	3734      	adds	r7, #52	@ 0x34
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd90      	pop	{r4, r7, pc}

08004d9e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b082      	sub	sp, #8
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
 8004da6:	460b      	mov	r3, r1
 8004da8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d101      	bne.n	8004db8 <HAL_PCD_SetAddress+0x1a>
 8004db4:	2302      	movs	r3, #2
 8004db6:	e012      	b.n	8004dde <HAL_PCD_SetAddress+0x40>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	78fa      	ldrb	r2, [r7, #3]
 8004dc4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	78fa      	ldrb	r2, [r7, #3]
 8004dcc:	4611      	mov	r1, r2
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f006 ffec 	bl	800bdac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b084      	sub	sp, #16
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	4608      	mov	r0, r1
 8004df0:	4611      	mov	r1, r2
 8004df2:	461a      	mov	r2, r3
 8004df4:	4603      	mov	r3, r0
 8004df6:	70fb      	strb	r3, [r7, #3]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	803b      	strh	r3, [r7, #0]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004e00:	2300      	movs	r3, #0
 8004e02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	da0f      	bge.n	8004e2c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e0c:	78fb      	ldrb	r3, [r7, #3]
 8004e0e:	f003 020f 	and.w	r2, r3, #15
 8004e12:	4613      	mov	r3, r2
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	4413      	add	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	3310      	adds	r3, #16
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	4413      	add	r3, r2
 8004e20:	3304      	adds	r3, #4
 8004e22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2201      	movs	r2, #1
 8004e28:	705a      	strb	r2, [r3, #1]
 8004e2a:	e00f      	b.n	8004e4c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e2c:	78fb      	ldrb	r3, [r7, #3]
 8004e2e:	f003 020f 	and.w	r2, r3, #15
 8004e32:	4613      	mov	r3, r2
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	4413      	add	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	4413      	add	r3, r2
 8004e42:	3304      	adds	r3, #4
 8004e44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004e4c:	78fb      	ldrb	r3, [r7, #3]
 8004e4e:	f003 030f 	and.w	r3, r3, #15
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004e58:	883a      	ldrh	r2, [r7, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	78ba      	ldrb	r2, [r7, #2]
 8004e62:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	785b      	ldrb	r3, [r3, #1]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d004      	beq.n	8004e76 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	461a      	mov	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004e76:	78bb      	ldrb	r3, [r7, #2]
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d102      	bne.n	8004e82 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d101      	bne.n	8004e90 <HAL_PCD_EP_Open+0xaa>
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	e00e      	b.n	8004eae <HAL_PCD_EP_Open+0xc8>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68f9      	ldr	r1, [r7, #12]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f006 f96c 	bl	800b17c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004eac:	7afb      	ldrb	r3, [r7, #11]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b084      	sub	sp, #16
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ec2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	da0f      	bge.n	8004eea <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004eca:	78fb      	ldrb	r3, [r7, #3]
 8004ecc:	f003 020f 	and.w	r2, r3, #15
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	3310      	adds	r3, #16
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	4413      	add	r3, r2
 8004ede:	3304      	adds	r3, #4
 8004ee0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	705a      	strb	r2, [r3, #1]
 8004ee8:	e00f      	b.n	8004f0a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004eea:	78fb      	ldrb	r3, [r7, #3]
 8004eec:	f003 020f 	and.w	r2, r3, #15
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	4413      	add	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	4413      	add	r3, r2
 8004f00:	3304      	adds	r3, #4
 8004f02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f0a:	78fb      	ldrb	r3, [r7, #3]
 8004f0c:	f003 030f 	and.w	r3, r3, #15
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d101      	bne.n	8004f24 <HAL_PCD_EP_Close+0x6e>
 8004f20:	2302      	movs	r3, #2
 8004f22:	e00e      	b.n	8004f42 <HAL_PCD_EP_Close+0x8c>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68f9      	ldr	r1, [r7, #12]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f006 f9aa 	bl	800b28c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b086      	sub	sp, #24
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	60f8      	str	r0, [r7, #12]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
 8004f56:	460b      	mov	r3, r1
 8004f58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f5a:	7afb      	ldrb	r3, [r7, #11]
 8004f5c:	f003 020f 	and.w	r2, r3, #15
 8004f60:	4613      	mov	r3, r2
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	4413      	add	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	4413      	add	r3, r2
 8004f70:	3304      	adds	r3, #4
 8004f72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	2200      	movs	r2, #0
 8004f84:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f8c:	7afb      	ldrb	r3, [r7, #11]
 8004f8e:	f003 030f 	and.w	r3, r3, #15
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	799b      	ldrb	r3, [r3, #6]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d102      	bne.n	8004fa6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6818      	ldr	r0, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	799b      	ldrb	r3, [r3, #6]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	6979      	ldr	r1, [r7, #20]
 8004fb2:	f006 fa47 	bl	800b444 <USB_EPStartXfer>

  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3718      	adds	r7, #24
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	460b      	mov	r3, r1
 8004fca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004fcc:	78fb      	ldrb	r3, [r7, #3]
 8004fce:	f003 020f 	and.w	r2, r3, #15
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	4413      	add	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	440b      	add	r3, r1
 8004fde:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004fe2:	681b      	ldr	r3, [r3, #0]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	607a      	str	r2, [r7, #4]
 8004ffa:	603b      	str	r3, [r7, #0]
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005000:	7afb      	ldrb	r3, [r7, #11]
 8005002:	f003 020f 	and.w	r2, r3, #15
 8005006:	4613      	mov	r3, r2
 8005008:	00db      	lsls	r3, r3, #3
 800500a:	4413      	add	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	3310      	adds	r3, #16
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	4413      	add	r3, r2
 8005014:	3304      	adds	r3, #4
 8005016:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	2200      	movs	r2, #0
 8005028:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2201      	movs	r2, #1
 800502e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005030:	7afb      	ldrb	r3, [r7, #11]
 8005032:	f003 030f 	and.w	r3, r3, #15
 8005036:	b2da      	uxtb	r2, r3
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	799b      	ldrb	r3, [r3, #6]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d102      	bne.n	800504a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6818      	ldr	r0, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	799b      	ldrb	r3, [r3, #6]
 8005052:	461a      	mov	r2, r3
 8005054:	6979      	ldr	r1, [r7, #20]
 8005056:	f006 f9f5 	bl	800b444 <USB_EPStartXfer>

  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	460b      	mov	r3, r1
 800506e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005070:	78fb      	ldrb	r3, [r7, #3]
 8005072:	f003 030f 	and.w	r3, r3, #15
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	7912      	ldrb	r2, [r2, #4]
 800507a:	4293      	cmp	r3, r2
 800507c:	d901      	bls.n	8005082 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e04f      	b.n	8005122 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005082:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005086:	2b00      	cmp	r3, #0
 8005088:	da0f      	bge.n	80050aa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800508a:	78fb      	ldrb	r3, [r7, #3]
 800508c:	f003 020f 	and.w	r2, r3, #15
 8005090:	4613      	mov	r3, r2
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	4413      	add	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	3310      	adds	r3, #16
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	4413      	add	r3, r2
 800509e:	3304      	adds	r3, #4
 80050a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2201      	movs	r2, #1
 80050a6:	705a      	strb	r2, [r3, #1]
 80050a8:	e00d      	b.n	80050c6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80050aa:	78fa      	ldrb	r2, [r7, #3]
 80050ac:	4613      	mov	r3, r2
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	4413      	add	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	4413      	add	r3, r2
 80050bc:	3304      	adds	r3, #4
 80050be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2201      	movs	r2, #1
 80050ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050cc:	78fb      	ldrb	r3, [r7, #3]
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d101      	bne.n	80050e6 <HAL_PCD_EP_SetStall+0x82>
 80050e2:	2302      	movs	r3, #2
 80050e4:	e01d      	b.n	8005122 <HAL_PCD_EP_SetStall+0xbe>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68f9      	ldr	r1, [r7, #12]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f006 fd85 	bl	800bc04 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80050fa:	78fb      	ldrb	r3, [r7, #3]
 80050fc:	f003 030f 	and.w	r3, r3, #15
 8005100:	2b00      	cmp	r3, #0
 8005102:	d109      	bne.n	8005118 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6818      	ldr	r0, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	7999      	ldrb	r1, [r3, #6]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005112:	461a      	mov	r2, r3
 8005114:	f006 ff78 	bl	800c008 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b084      	sub	sp, #16
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
 8005132:	460b      	mov	r3, r1
 8005134:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005136:	78fb      	ldrb	r3, [r7, #3]
 8005138:	f003 030f 	and.w	r3, r3, #15
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	7912      	ldrb	r2, [r2, #4]
 8005140:	4293      	cmp	r3, r2
 8005142:	d901      	bls.n	8005148 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e042      	b.n	80051ce <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005148:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800514c:	2b00      	cmp	r3, #0
 800514e:	da0f      	bge.n	8005170 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005150:	78fb      	ldrb	r3, [r7, #3]
 8005152:	f003 020f 	and.w	r2, r3, #15
 8005156:	4613      	mov	r3, r2
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	4413      	add	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	3310      	adds	r3, #16
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	4413      	add	r3, r2
 8005164:	3304      	adds	r3, #4
 8005166:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2201      	movs	r2, #1
 800516c:	705a      	strb	r2, [r3, #1]
 800516e:	e00f      	b.n	8005190 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005170:	78fb      	ldrb	r3, [r7, #3]
 8005172:	f003 020f 	and.w	r2, r3, #15
 8005176:	4613      	mov	r3, r2
 8005178:	00db      	lsls	r3, r3, #3
 800517a:	4413      	add	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	4413      	add	r3, r2
 8005186:	3304      	adds	r3, #4
 8005188:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005196:	78fb      	ldrb	r3, [r7, #3]
 8005198:	f003 030f 	and.w	r3, r3, #15
 800519c:	b2da      	uxtb	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d101      	bne.n	80051b0 <HAL_PCD_EP_ClrStall+0x86>
 80051ac:	2302      	movs	r3, #2
 80051ae:	e00e      	b.n	80051ce <HAL_PCD_EP_ClrStall+0xa4>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68f9      	ldr	r1, [r7, #12]
 80051be:	4618      	mov	r0, r3
 80051c0:	f006 fd8e 	bl	800bce0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b084      	sub	sp, #16
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	460b      	mov	r3, r1
 80051e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80051e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	da0c      	bge.n	8005204 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051ea:	78fb      	ldrb	r3, [r7, #3]
 80051ec:	f003 020f 	and.w	r2, r3, #15
 80051f0:	4613      	mov	r3, r2
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	4413      	add	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	3310      	adds	r3, #16
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	4413      	add	r3, r2
 80051fe:	3304      	adds	r3, #4
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	e00c      	b.n	800521e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005204:	78fb      	ldrb	r3, [r7, #3]
 8005206:	f003 020f 	and.w	r2, r3, #15
 800520a:	4613      	mov	r3, r2
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	4413      	add	r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	4413      	add	r3, r2
 800521a:	3304      	adds	r3, #4
 800521c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68f9      	ldr	r1, [r7, #12]
 8005224:	4618      	mov	r0, r3
 8005226:	f006 fbad 	bl	800b984 <USB_EPStopXfer>
 800522a:	4603      	mov	r3, r0
 800522c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800522e:	7afb      	ldrb	r3, [r7, #11]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b08a      	sub	sp, #40	@ 0x28
 800523c:	af02      	add	r7, sp, #8
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	4613      	mov	r3, r2
 8005250:	00db      	lsls	r3, r3, #3
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	3310      	adds	r3, #16
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	4413      	add	r3, r2
 800525c:	3304      	adds	r3, #4
 800525e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	695a      	ldr	r2, [r3, #20]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	429a      	cmp	r2, r3
 800526a:	d901      	bls.n	8005270 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e06b      	b.n	8005348 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	691a      	ldr	r2, [r3, #16]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	69fa      	ldr	r2, [r7, #28]
 8005282:	429a      	cmp	r2, r3
 8005284:	d902      	bls.n	800528c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	3303      	adds	r3, #3
 8005290:	089b      	lsrs	r3, r3, #2
 8005292:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005294:	e02a      	b.n	80052ec <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	691a      	ldr	r2, [r3, #16]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	69fa      	ldr	r2, [r7, #28]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d902      	bls.n	80052b2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	3303      	adds	r3, #3
 80052b6:	089b      	lsrs	r3, r3, #2
 80052b8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	68d9      	ldr	r1, [r3, #12]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	4603      	mov	r3, r0
 80052ce:	6978      	ldr	r0, [r7, #20]
 80052d0:	f006 fc02 	bl	800bad8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	68da      	ldr	r2, [r3, #12]
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	441a      	add	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	695a      	ldr	r2, [r3, #20]
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	441a      	add	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d809      	bhi.n	8005316 <PCD_WriteEmptyTxFifo+0xde>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	695a      	ldr	r2, [r3, #20]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800530a:	429a      	cmp	r2, r3
 800530c:	d203      	bcs.n	8005316 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1bf      	bne.n	8005296 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	691a      	ldr	r2, [r3, #16]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	429a      	cmp	r2, r3
 8005320:	d811      	bhi.n	8005346 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	f003 030f 	and.w	r3, r3, #15
 8005328:	2201      	movs	r2, #1
 800532a:	fa02 f303 	lsl.w	r3, r2, r3
 800532e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005336:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	43db      	mvns	r3, r3
 800533c:	6939      	ldr	r1, [r7, #16]
 800533e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005342:	4013      	ands	r3, r2
 8005344:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3720      	adds	r7, #32
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b088      	sub	sp, #32
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	333c      	adds	r3, #60	@ 0x3c
 8005368:	3304      	adds	r3, #4
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	4413      	add	r3, r2
 8005376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	799b      	ldrb	r3, [r3, #6]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d17b      	bne.n	800547e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f003 0308 	and.w	r3, r3, #8
 800538c:	2b00      	cmp	r3, #0
 800538e:	d015      	beq.n	80053bc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	4a61      	ldr	r2, [pc, #388]	@ (8005518 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005394:	4293      	cmp	r3, r2
 8005396:	f240 80b9 	bls.w	800550c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 80b3 	beq.w	800550c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053b2:	461a      	mov	r2, r3
 80053b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053b8:	6093      	str	r3, [r2, #8]
 80053ba:	e0a7      	b.n	800550c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	f003 0320 	and.w	r3, r3, #32
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d009      	beq.n	80053da <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	015a      	lsls	r2, r3, #5
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053d2:	461a      	mov	r2, r3
 80053d4:	2320      	movs	r3, #32
 80053d6:	6093      	str	r3, [r2, #8]
 80053d8:	e098      	b.n	800550c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f040 8093 	bne.w	800550c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	4a4b      	ldr	r2, [pc, #300]	@ (8005518 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d90f      	bls.n	800540e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00a      	beq.n	800540e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005404:	461a      	mov	r2, r3
 8005406:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800540a:	6093      	str	r3, [r2, #8]
 800540c:	e07e      	b.n	800550c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	4613      	mov	r3, r2
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	4413      	add	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	4413      	add	r3, r2
 8005420:	3304      	adds	r3, #4
 8005422:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6a1a      	ldr	r2, [r3, #32]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	0159      	lsls	r1, r3, #5
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	440b      	add	r3, r1
 8005430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800543a:	1ad2      	subs	r2, r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d114      	bne.n	8005470 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d109      	bne.n	8005462 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6818      	ldr	r0, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005458:	461a      	mov	r2, r3
 800545a:	2101      	movs	r1, #1
 800545c:	f006 fdd4 	bl	800c008 <USB_EP0_OutStart>
 8005460:	e006      	b.n	8005470 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	68da      	ldr	r2, [r3, #12]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	441a      	add	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	b2db      	uxtb	r3, r3
 8005474:	4619      	mov	r1, r3
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f009 fae8 	bl	800ea4c <HAL_PCD_DataOutStageCallback>
 800547c:	e046      	b.n	800550c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	4a26      	ldr	r2, [pc, #152]	@ (800551c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d124      	bne.n	80054d0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00a      	beq.n	80054a6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	4413      	add	r3, r2
 8005498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800549c:	461a      	mov	r2, r3
 800549e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054a2:	6093      	str	r3, [r2, #8]
 80054a4:	e032      	b.n	800550c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f003 0320 	and.w	r3, r3, #32
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d008      	beq.n	80054c2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054bc:	461a      	mov	r2, r3
 80054be:	2320      	movs	r3, #32
 80054c0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	4619      	mov	r1, r3
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f009 fabf 	bl	800ea4c <HAL_PCD_DataOutStageCallback>
 80054ce:	e01d      	b.n	800550c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d114      	bne.n	8005500 <PCD_EP_OutXfrComplete_int+0x1b0>
 80054d6:	6879      	ldr	r1, [r7, #4]
 80054d8:	683a      	ldr	r2, [r7, #0]
 80054da:	4613      	mov	r3, r2
 80054dc:	00db      	lsls	r3, r3, #3
 80054de:	4413      	add	r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	440b      	add	r3, r1
 80054e4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d108      	bne.n	8005500 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6818      	ldr	r0, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80054f8:	461a      	mov	r2, r3
 80054fa:	2100      	movs	r1, #0
 80054fc:	f006 fd84 	bl	800c008 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	b2db      	uxtb	r3, r3
 8005504:	4619      	mov	r1, r3
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f009 faa0 	bl	800ea4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3720      	adds	r7, #32
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	4f54300a 	.word	0x4f54300a
 800551c:	4f54310a 	.word	0x4f54310a

08005520 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	333c      	adds	r3, #60	@ 0x3c
 8005538:	3304      	adds	r3, #4
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	4413      	add	r3, r2
 8005546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4a15      	ldr	r2, [pc, #84]	@ (80055a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d90e      	bls.n	8005574 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800555c:	2b00      	cmp	r3, #0
 800555e:	d009      	beq.n	8005574 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	4413      	add	r3, r2
 8005568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800556c:	461a      	mov	r2, r3
 800556e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005572:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f009 fa57 	bl	800ea28 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	4a0a      	ldr	r2, [pc, #40]	@ (80055a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d90c      	bls.n	800559c <PCD_EP_OutSetupPacket_int+0x7c>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	799b      	ldrb	r3, [r3, #6]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d108      	bne.n	800559c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6818      	ldr	r0, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005594:	461a      	mov	r2, r3
 8005596:	2101      	movs	r1, #1
 8005598:	f006 fd36 	bl	800c008 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3718      	adds	r7, #24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	4f54300a 	.word	0x4f54300a

080055ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	460b      	mov	r3, r1
 80055b6:	70fb      	strb	r3, [r7, #3]
 80055b8:	4613      	mov	r3, r2
 80055ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80055c4:	78fb      	ldrb	r3, [r7, #3]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d107      	bne.n	80055da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80055ca:	883b      	ldrh	r3, [r7, #0]
 80055cc:	0419      	lsls	r1, r3, #16
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80055d8:	e028      	b.n	800562c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e0:	0c1b      	lsrs	r3, r3, #16
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	4413      	add	r3, r2
 80055e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80055e8:	2300      	movs	r3, #0
 80055ea:	73fb      	strb	r3, [r7, #15]
 80055ec:	e00d      	b.n	800560a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	7bfb      	ldrb	r3, [r7, #15]
 80055f4:	3340      	adds	r3, #64	@ 0x40
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	0c1b      	lsrs	r3, r3, #16
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	4413      	add	r3, r2
 8005602:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005604:	7bfb      	ldrb	r3, [r7, #15]
 8005606:	3301      	adds	r3, #1
 8005608:	73fb      	strb	r3, [r7, #15]
 800560a:	7bfa      	ldrb	r2, [r7, #15]
 800560c:	78fb      	ldrb	r3, [r7, #3]
 800560e:	3b01      	subs	r3, #1
 8005610:	429a      	cmp	r2, r3
 8005612:	d3ec      	bcc.n	80055ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005614:	883b      	ldrh	r3, [r7, #0]
 8005616:	0418      	lsls	r0, r3, #16
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6819      	ldr	r1, [r3, #0]
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	3b01      	subs	r3, #1
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	4302      	orrs	r2, r0
 8005624:	3340      	adds	r3, #64	@ 0x40
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	440b      	add	r3, r1
 800562a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	460b      	mov	r3, r1
 8005644:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	887a      	ldrh	r2, [r7, #2]
 800564c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800568a:	4b05      	ldr	r3, [pc, #20]	@ (80056a0 <HAL_PCDEx_ActivateLPM+0x44>)
 800568c:	4313      	orrs	r3, r2
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	10000003 	.word	0x10000003

080056a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80056aa:	2300      	movs	r3, #0
 80056ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80056ae:	4b23      	ldr	r3, [pc, #140]	@ (800573c <HAL_PWREx_EnableOverDrive+0x98>)
 80056b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b2:	4a22      	ldr	r2, [pc, #136]	@ (800573c <HAL_PWREx_EnableOverDrive+0x98>)
 80056b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80056ba:	4b20      	ldr	r3, [pc, #128]	@ (800573c <HAL_PWREx_EnableOverDrive+0x98>)
 80056bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056c2:	603b      	str	r3, [r7, #0]
 80056c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80056c6:	4b1e      	ldr	r3, [pc, #120]	@ (8005740 <HAL_PWREx_EnableOverDrive+0x9c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a1d      	ldr	r2, [pc, #116]	@ (8005740 <HAL_PWREx_EnableOverDrive+0x9c>)
 80056cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056d0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056d2:	f7fd fa97 	bl	8002c04 <HAL_GetTick>
 80056d6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80056d8:	e009      	b.n	80056ee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80056da:	f7fd fa93 	bl	8002c04 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80056e8:	d901      	bls.n	80056ee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e022      	b.n	8005734 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80056ee:	4b14      	ldr	r3, [pc, #80]	@ (8005740 <HAL_PWREx_EnableOverDrive+0x9c>)
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056fa:	d1ee      	bne.n	80056da <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80056fc:	4b10      	ldr	r3, [pc, #64]	@ (8005740 <HAL_PWREx_EnableOverDrive+0x9c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a0f      	ldr	r2, [pc, #60]	@ (8005740 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005702:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005706:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005708:	f7fd fa7c 	bl	8002c04 <HAL_GetTick>
 800570c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800570e:	e009      	b.n	8005724 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005710:	f7fd fa78 	bl	8002c04 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800571e:	d901      	bls.n	8005724 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e007      	b.n	8005734 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005724:	4b06      	ldr	r3, [pc, #24]	@ (8005740 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800572c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005730:	d1ee      	bne.n	8005710 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3708      	adds	r7, #8
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	40023800 	.word	0x40023800
 8005740:	40007000 	.word	0x40007000

08005744 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800574c:	2300      	movs	r3, #0
 800574e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e291      	b.n	8005c7e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b00      	cmp	r3, #0
 8005764:	f000 8087 	beq.w	8005876 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005768:	4b96      	ldr	r3, [pc, #600]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f003 030c 	and.w	r3, r3, #12
 8005770:	2b04      	cmp	r3, #4
 8005772:	d00c      	beq.n	800578e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005774:	4b93      	ldr	r3, [pc, #588]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f003 030c 	and.w	r3, r3, #12
 800577c:	2b08      	cmp	r3, #8
 800577e:	d112      	bne.n	80057a6 <HAL_RCC_OscConfig+0x62>
 8005780:	4b90      	ldr	r3, [pc, #576]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005788:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800578c:	d10b      	bne.n	80057a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800578e:	4b8d      	ldr	r3, [pc, #564]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d06c      	beq.n	8005874 <HAL_RCC_OscConfig+0x130>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d168      	bne.n	8005874 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e26b      	b.n	8005c7e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057ae:	d106      	bne.n	80057be <HAL_RCC_OscConfig+0x7a>
 80057b0:	4b84      	ldr	r3, [pc, #528]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a83      	ldr	r2, [pc, #524]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 80057b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057ba:	6013      	str	r3, [r2, #0]
 80057bc:	e02e      	b.n	800581c <HAL_RCC_OscConfig+0xd8>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10c      	bne.n	80057e0 <HAL_RCC_OscConfig+0x9c>
 80057c6:	4b7f      	ldr	r3, [pc, #508]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a7e      	ldr	r2, [pc, #504]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 80057cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057d0:	6013      	str	r3, [r2, #0]
 80057d2:	4b7c      	ldr	r3, [pc, #496]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a7b      	ldr	r2, [pc, #492]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 80057d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057dc:	6013      	str	r3, [r2, #0]
 80057de:	e01d      	b.n	800581c <HAL_RCC_OscConfig+0xd8>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057e8:	d10c      	bne.n	8005804 <HAL_RCC_OscConfig+0xc0>
 80057ea:	4b76      	ldr	r3, [pc, #472]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a75      	ldr	r2, [pc, #468]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 80057f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	4b73      	ldr	r3, [pc, #460]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a72      	ldr	r2, [pc, #456]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 80057fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005800:	6013      	str	r3, [r2, #0]
 8005802:	e00b      	b.n	800581c <HAL_RCC_OscConfig+0xd8>
 8005804:	4b6f      	ldr	r3, [pc, #444]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a6e      	ldr	r2, [pc, #440]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 800580a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800580e:	6013      	str	r3, [r2, #0]
 8005810:	4b6c      	ldr	r3, [pc, #432]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a6b      	ldr	r2, [pc, #428]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 8005816:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800581a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d013      	beq.n	800584c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005824:	f7fd f9ee 	bl	8002c04 <HAL_GetTick>
 8005828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800582a:	e008      	b.n	800583e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800582c:	f7fd f9ea 	bl	8002c04 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b64      	cmp	r3, #100	@ 0x64
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e21f      	b.n	8005c7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800583e:	4b61      	ldr	r3, [pc, #388]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0f0      	beq.n	800582c <HAL_RCC_OscConfig+0xe8>
 800584a:	e014      	b.n	8005876 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800584c:	f7fd f9da 	bl	8002c04 <HAL_GetTick>
 8005850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005852:	e008      	b.n	8005866 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005854:	f7fd f9d6 	bl	8002c04 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b64      	cmp	r3, #100	@ 0x64
 8005860:	d901      	bls.n	8005866 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e20b      	b.n	8005c7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005866:	4b57      	ldr	r3, [pc, #348]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1f0      	bne.n	8005854 <HAL_RCC_OscConfig+0x110>
 8005872:	e000      	b.n	8005876 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d069      	beq.n	8005956 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005882:	4b50      	ldr	r3, [pc, #320]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 030c 	and.w	r3, r3, #12
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00b      	beq.n	80058a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800588e:	4b4d      	ldr	r3, [pc, #308]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f003 030c 	and.w	r3, r3, #12
 8005896:	2b08      	cmp	r3, #8
 8005898:	d11c      	bne.n	80058d4 <HAL_RCC_OscConfig+0x190>
 800589a:	4b4a      	ldr	r3, [pc, #296]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d116      	bne.n	80058d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058a6:	4b47      	ldr	r3, [pc, #284]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d005      	beq.n	80058be <HAL_RCC_OscConfig+0x17a>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d001      	beq.n	80058be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e1df      	b.n	8005c7e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058be:	4b41      	ldr	r3, [pc, #260]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	493d      	ldr	r1, [pc, #244]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058d2:	e040      	b.n	8005956 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d023      	beq.n	8005924 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058dc:	4b39      	ldr	r3, [pc, #228]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a38      	ldr	r2, [pc, #224]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 80058e2:	f043 0301 	orr.w	r3, r3, #1
 80058e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e8:	f7fd f98c 	bl	8002c04 <HAL_GetTick>
 80058ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058ee:	e008      	b.n	8005902 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058f0:	f7fd f988 	bl	8002c04 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e1bd      	b.n	8005c7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005902:	4b30      	ldr	r3, [pc, #192]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0f0      	beq.n	80058f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800590e:	4b2d      	ldr	r3, [pc, #180]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	00db      	lsls	r3, r3, #3
 800591c:	4929      	ldr	r1, [pc, #164]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 800591e:	4313      	orrs	r3, r2
 8005920:	600b      	str	r3, [r1, #0]
 8005922:	e018      	b.n	8005956 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005924:	4b27      	ldr	r3, [pc, #156]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a26      	ldr	r2, [pc, #152]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 800592a:	f023 0301 	bic.w	r3, r3, #1
 800592e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005930:	f7fd f968 	bl	8002c04 <HAL_GetTick>
 8005934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005936:	e008      	b.n	800594a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005938:	f7fd f964 	bl	8002c04 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b02      	cmp	r3, #2
 8005944:	d901      	bls.n	800594a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e199      	b.n	8005c7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800594a:	4b1e      	ldr	r3, [pc, #120]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1f0      	bne.n	8005938 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0308 	and.w	r3, r3, #8
 800595e:	2b00      	cmp	r3, #0
 8005960:	d038      	beq.n	80059d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d019      	beq.n	800599e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800596a:	4b16      	ldr	r3, [pc, #88]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 800596c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800596e:	4a15      	ldr	r2, [pc, #84]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 8005970:	f043 0301 	orr.w	r3, r3, #1
 8005974:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005976:	f7fd f945 	bl	8002c04 <HAL_GetTick>
 800597a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800597c:	e008      	b.n	8005990 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800597e:	f7fd f941 	bl	8002c04 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b02      	cmp	r3, #2
 800598a:	d901      	bls.n	8005990 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e176      	b.n	8005c7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005990:	4b0c      	ldr	r3, [pc, #48]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 8005992:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b00      	cmp	r3, #0
 800599a:	d0f0      	beq.n	800597e <HAL_RCC_OscConfig+0x23a>
 800599c:	e01a      	b.n	80059d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800599e:	4b09      	ldr	r3, [pc, #36]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 80059a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059a2:	4a08      	ldr	r2, [pc, #32]	@ (80059c4 <HAL_RCC_OscConfig+0x280>)
 80059a4:	f023 0301 	bic.w	r3, r3, #1
 80059a8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059aa:	f7fd f92b 	bl	8002c04 <HAL_GetTick>
 80059ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059b0:	e00a      	b.n	80059c8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059b2:	f7fd f927 	bl	8002c04 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d903      	bls.n	80059c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e15c      	b.n	8005c7e <HAL_RCC_OscConfig+0x53a>
 80059c4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059c8:	4b91      	ldr	r3, [pc, #580]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 80059ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1ee      	bne.n	80059b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0304 	and.w	r3, r3, #4
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 80a4 	beq.w	8005b2a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059e2:	4b8b      	ldr	r3, [pc, #556]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 80059e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10d      	bne.n	8005a0a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80059ee:	4b88      	ldr	r3, [pc, #544]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 80059f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f2:	4a87      	ldr	r2, [pc, #540]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 80059f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80059fa:	4b85      	ldr	r3, [pc, #532]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 80059fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a02:	60bb      	str	r3, [r7, #8]
 8005a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a06:	2301      	movs	r3, #1
 8005a08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a0a:	4b82      	ldr	r3, [pc, #520]	@ (8005c14 <HAL_RCC_OscConfig+0x4d0>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d118      	bne.n	8005a48 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005a16:	4b7f      	ldr	r3, [pc, #508]	@ (8005c14 <HAL_RCC_OscConfig+0x4d0>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a7e      	ldr	r2, [pc, #504]	@ (8005c14 <HAL_RCC_OscConfig+0x4d0>)
 8005a1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a22:	f7fd f8ef 	bl	8002c04 <HAL_GetTick>
 8005a26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a28:	e008      	b.n	8005a3c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a2a:	f7fd f8eb 	bl	8002c04 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	2b64      	cmp	r3, #100	@ 0x64
 8005a36:	d901      	bls.n	8005a3c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e120      	b.n	8005c7e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a3c:	4b75      	ldr	r3, [pc, #468]	@ (8005c14 <HAL_RCC_OscConfig+0x4d0>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d0f0      	beq.n	8005a2a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d106      	bne.n	8005a5e <HAL_RCC_OscConfig+0x31a>
 8005a50:	4b6f      	ldr	r3, [pc, #444]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 8005a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a54:	4a6e      	ldr	r2, [pc, #440]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 8005a56:	f043 0301 	orr.w	r3, r3, #1
 8005a5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a5c:	e02d      	b.n	8005aba <HAL_RCC_OscConfig+0x376>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10c      	bne.n	8005a80 <HAL_RCC_OscConfig+0x33c>
 8005a66:	4b6a      	ldr	r3, [pc, #424]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 8005a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a6a:	4a69      	ldr	r2, [pc, #420]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 8005a6c:	f023 0301 	bic.w	r3, r3, #1
 8005a70:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a72:	4b67      	ldr	r3, [pc, #412]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 8005a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a76:	4a66      	ldr	r2, [pc, #408]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 8005a78:	f023 0304 	bic.w	r3, r3, #4
 8005a7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a7e:	e01c      	b.n	8005aba <HAL_RCC_OscConfig+0x376>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	2b05      	cmp	r3, #5
 8005a86:	d10c      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x35e>
 8005a88:	4b61      	ldr	r3, [pc, #388]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 8005a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a8c:	4a60      	ldr	r2, [pc, #384]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 8005a8e:	f043 0304 	orr.w	r3, r3, #4
 8005a92:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a94:	4b5e      	ldr	r3, [pc, #376]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 8005a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a98:	4a5d      	ldr	r2, [pc, #372]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 8005a9a:	f043 0301 	orr.w	r3, r3, #1
 8005a9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005aa0:	e00b      	b.n	8005aba <HAL_RCC_OscConfig+0x376>
 8005aa2:	4b5b      	ldr	r3, [pc, #364]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 8005aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aa6:	4a5a      	ldr	r2, [pc, #360]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 8005aa8:	f023 0301 	bic.w	r3, r3, #1
 8005aac:	6713      	str	r3, [r2, #112]	@ 0x70
 8005aae:	4b58      	ldr	r3, [pc, #352]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 8005ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ab2:	4a57      	ldr	r2, [pc, #348]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 8005ab4:	f023 0304 	bic.w	r3, r3, #4
 8005ab8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d015      	beq.n	8005aee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ac2:	f7fd f89f 	bl	8002c04 <HAL_GetTick>
 8005ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ac8:	e00a      	b.n	8005ae0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aca:	f7fd f89b 	bl	8002c04 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d901      	bls.n	8005ae0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e0ce      	b.n	8005c7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ae0:	4b4b      	ldr	r3, [pc, #300]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 8005ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d0ee      	beq.n	8005aca <HAL_RCC_OscConfig+0x386>
 8005aec:	e014      	b.n	8005b18 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aee:	f7fd f889 	bl	8002c04 <HAL_GetTick>
 8005af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005af4:	e00a      	b.n	8005b0c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005af6:	f7fd f885 	bl	8002c04 <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d901      	bls.n	8005b0c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e0b8      	b.n	8005c7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b0c:	4b40      	ldr	r3, [pc, #256]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 8005b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b10:	f003 0302 	and.w	r3, r3, #2
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1ee      	bne.n	8005af6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b18:	7dfb      	ldrb	r3, [r7, #23]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d105      	bne.n	8005b2a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b1e:	4b3c      	ldr	r3, [pc, #240]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 8005b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b22:	4a3b      	ldr	r2, [pc, #236]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 8005b24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b28:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f000 80a4 	beq.w	8005c7c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b34:	4b36      	ldr	r3, [pc, #216]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f003 030c 	and.w	r3, r3, #12
 8005b3c:	2b08      	cmp	r3, #8
 8005b3e:	d06b      	beq.n	8005c18 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d149      	bne.n	8005bdc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b48:	4b31      	ldr	r3, [pc, #196]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a30      	ldr	r2, [pc, #192]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 8005b4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b54:	f7fd f856 	bl	8002c04 <HAL_GetTick>
 8005b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b5a:	e008      	b.n	8005b6e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b5c:	f7fd f852 	bl	8002c04 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d901      	bls.n	8005b6e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e087      	b.n	8005c7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b6e:	4b28      	ldr	r3, [pc, #160]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1f0      	bne.n	8005b5c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	69da      	ldr	r2, [r3, #28]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	431a      	orrs	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b88:	019b      	lsls	r3, r3, #6
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b90:	085b      	lsrs	r3, r3, #1
 8005b92:	3b01      	subs	r3, #1
 8005b94:	041b      	lsls	r3, r3, #16
 8005b96:	431a      	orrs	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b9c:	061b      	lsls	r3, r3, #24
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 8005ba2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005ba6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ba8:	4b19      	ldr	r3, [pc, #100]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a18      	ldr	r2, [pc, #96]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 8005bae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005bb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb4:	f7fd f826 	bl	8002c04 <HAL_GetTick>
 8005bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bba:	e008      	b.n	8005bce <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bbc:	f7fd f822 	bl	8002c04 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d901      	bls.n	8005bce <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e057      	b.n	8005c7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bce:	4b10      	ldr	r3, [pc, #64]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d0f0      	beq.n	8005bbc <HAL_RCC_OscConfig+0x478>
 8005bda:	e04f      	b.n	8005c7c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a0b      	ldr	r2, [pc, #44]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 8005be2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be8:	f7fd f80c 	bl	8002c04 <HAL_GetTick>
 8005bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bee:	e008      	b.n	8005c02 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bf0:	f7fd f808 	bl	8002c04 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d901      	bls.n	8005c02 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e03d      	b.n	8005c7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c02:	4b03      	ldr	r3, [pc, #12]	@ (8005c10 <HAL_RCC_OscConfig+0x4cc>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1f0      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x4ac>
 8005c0e:	e035      	b.n	8005c7c <HAL_RCC_OscConfig+0x538>
 8005c10:	40023800 	.word	0x40023800
 8005c14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005c18:	4b1b      	ldr	r3, [pc, #108]	@ (8005c88 <HAL_RCC_OscConfig+0x544>)
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d028      	beq.n	8005c78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d121      	bne.n	8005c78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d11a      	bne.n	8005c78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005c48:	4013      	ands	r3, r2
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005c4e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d111      	bne.n	8005c78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c5e:	085b      	lsrs	r3, r3, #1
 8005c60:	3b01      	subs	r3, #1
 8005c62:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d107      	bne.n	8005c78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c72:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d001      	beq.n	8005c7c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e000      	b.n	8005c7e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3718      	adds	r7, #24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	40023800 	.word	0x40023800

08005c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005c96:	2300      	movs	r3, #0
 8005c98:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e0d0      	b.n	8005e46 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ca4:	4b6a      	ldr	r3, [pc, #424]	@ (8005e50 <HAL_RCC_ClockConfig+0x1c4>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 030f 	and.w	r3, r3, #15
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d910      	bls.n	8005cd4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cb2:	4b67      	ldr	r3, [pc, #412]	@ (8005e50 <HAL_RCC_ClockConfig+0x1c4>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f023 020f 	bic.w	r2, r3, #15
 8005cba:	4965      	ldr	r1, [pc, #404]	@ (8005e50 <HAL_RCC_ClockConfig+0x1c4>)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cc2:	4b63      	ldr	r3, [pc, #396]	@ (8005e50 <HAL_RCC_ClockConfig+0x1c4>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 030f 	and.w	r3, r3, #15
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d001      	beq.n	8005cd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e0b8      	b.n	8005e46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d020      	beq.n	8005d22 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d005      	beq.n	8005cf8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cec:	4b59      	ldr	r3, [pc, #356]	@ (8005e54 <HAL_RCC_ClockConfig+0x1c8>)
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	4a58      	ldr	r2, [pc, #352]	@ (8005e54 <HAL_RCC_ClockConfig+0x1c8>)
 8005cf2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005cf6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0308 	and.w	r3, r3, #8
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d005      	beq.n	8005d10 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d04:	4b53      	ldr	r3, [pc, #332]	@ (8005e54 <HAL_RCC_ClockConfig+0x1c8>)
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	4a52      	ldr	r2, [pc, #328]	@ (8005e54 <HAL_RCC_ClockConfig+0x1c8>)
 8005d0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005d0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d10:	4b50      	ldr	r3, [pc, #320]	@ (8005e54 <HAL_RCC_ClockConfig+0x1c8>)
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	494d      	ldr	r1, [pc, #308]	@ (8005e54 <HAL_RCC_ClockConfig+0x1c8>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d040      	beq.n	8005db0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d107      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d36:	4b47      	ldr	r3, [pc, #284]	@ (8005e54 <HAL_RCC_ClockConfig+0x1c8>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d115      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e07f      	b.n	8005e46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d107      	bne.n	8005d5e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d4e:	4b41      	ldr	r3, [pc, #260]	@ (8005e54 <HAL_RCC_ClockConfig+0x1c8>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d109      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e073      	b.n	8005e46 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d5e:	4b3d      	ldr	r3, [pc, #244]	@ (8005e54 <HAL_RCC_ClockConfig+0x1c8>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e06b      	b.n	8005e46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d6e:	4b39      	ldr	r3, [pc, #228]	@ (8005e54 <HAL_RCC_ClockConfig+0x1c8>)
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f023 0203 	bic.w	r2, r3, #3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	4936      	ldr	r1, [pc, #216]	@ (8005e54 <HAL_RCC_ClockConfig+0x1c8>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d80:	f7fc ff40 	bl	8002c04 <HAL_GetTick>
 8005d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d86:	e00a      	b.n	8005d9e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d88:	f7fc ff3c 	bl	8002c04 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d901      	bls.n	8005d9e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e053      	b.n	8005e46 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d9e:	4b2d      	ldr	r3, [pc, #180]	@ (8005e54 <HAL_RCC_ClockConfig+0x1c8>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f003 020c 	and.w	r2, r3, #12
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d1eb      	bne.n	8005d88 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005db0:	4b27      	ldr	r3, [pc, #156]	@ (8005e50 <HAL_RCC_ClockConfig+0x1c4>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 030f 	and.w	r3, r3, #15
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d210      	bcs.n	8005de0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dbe:	4b24      	ldr	r3, [pc, #144]	@ (8005e50 <HAL_RCC_ClockConfig+0x1c4>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f023 020f 	bic.w	r2, r3, #15
 8005dc6:	4922      	ldr	r1, [pc, #136]	@ (8005e50 <HAL_RCC_ClockConfig+0x1c4>)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dce:	4b20      	ldr	r3, [pc, #128]	@ (8005e50 <HAL_RCC_ClockConfig+0x1c4>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 030f 	and.w	r3, r3, #15
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d001      	beq.n	8005de0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e032      	b.n	8005e46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d008      	beq.n	8005dfe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dec:	4b19      	ldr	r3, [pc, #100]	@ (8005e54 <HAL_RCC_ClockConfig+0x1c8>)
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	4916      	ldr	r1, [pc, #88]	@ (8005e54 <HAL_RCC_ClockConfig+0x1c8>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0308 	and.w	r3, r3, #8
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d009      	beq.n	8005e1e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e0a:	4b12      	ldr	r3, [pc, #72]	@ (8005e54 <HAL_RCC_ClockConfig+0x1c8>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	490e      	ldr	r1, [pc, #56]	@ (8005e54 <HAL_RCC_ClockConfig+0x1c8>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e1e:	f000 f831 	bl	8005e84 <HAL_RCC_GetSysClockFreq>
 8005e22:	4602      	mov	r2, r0
 8005e24:	4b0b      	ldr	r3, [pc, #44]	@ (8005e54 <HAL_RCC_ClockConfig+0x1c8>)
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	091b      	lsrs	r3, r3, #4
 8005e2a:	f003 030f 	and.w	r3, r3, #15
 8005e2e:	490a      	ldr	r1, [pc, #40]	@ (8005e58 <HAL_RCC_ClockConfig+0x1cc>)
 8005e30:	5ccb      	ldrb	r3, [r1, r3]
 8005e32:	fa22 f303 	lsr.w	r3, r2, r3
 8005e36:	4a09      	ldr	r2, [pc, #36]	@ (8005e5c <HAL_RCC_ClockConfig+0x1d0>)
 8005e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e3a:	4b09      	ldr	r3, [pc, #36]	@ (8005e60 <HAL_RCC_ClockConfig+0x1d4>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7fc fe9c 	bl	8002b7c <HAL_InitTick>

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	40023c00 	.word	0x40023c00
 8005e54:	40023800 	.word	0x40023800
 8005e58:	08011dac 	.word	0x08011dac
 8005e5c:	20000000 	.word	0x20000000
 8005e60:	20000004 	.word	0x20000004

08005e64 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005e64:	b480      	push	{r7}
 8005e66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8005e68:	4b05      	ldr	r3, [pc, #20]	@ (8005e80 <HAL_RCC_EnableCSS+0x1c>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a04      	ldr	r2, [pc, #16]	@ (8005e80 <HAL_RCC_EnableCSS+0x1c>)
 8005e6e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e72:	6013      	str	r3, [r2, #0]
}
 8005e74:	bf00      	nop
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	40023800 	.word	0x40023800

08005e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e88:	b094      	sub	sp, #80	@ 0x50
 8005e8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e90:	2300      	movs	r3, #0
 8005e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e94:	2300      	movs	r3, #0
 8005e96:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e9c:	4b79      	ldr	r3, [pc, #484]	@ (8006084 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f003 030c 	and.w	r3, r3, #12
 8005ea4:	2b08      	cmp	r3, #8
 8005ea6:	d00d      	beq.n	8005ec4 <HAL_RCC_GetSysClockFreq+0x40>
 8005ea8:	2b08      	cmp	r3, #8
 8005eaa:	f200 80e1 	bhi.w	8006070 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d002      	beq.n	8005eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8005eb2:	2b04      	cmp	r3, #4
 8005eb4:	d003      	beq.n	8005ebe <HAL_RCC_GetSysClockFreq+0x3a>
 8005eb6:	e0db      	b.n	8006070 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005eb8:	4b73      	ldr	r3, [pc, #460]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x204>)
 8005eba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ebc:	e0db      	b.n	8006076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ebe:	4b73      	ldr	r3, [pc, #460]	@ (800608c <HAL_RCC_GetSysClockFreq+0x208>)
 8005ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ec2:	e0d8      	b.n	8006076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ec4:	4b6f      	ldr	r3, [pc, #444]	@ (8006084 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ecc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005ece:	4b6d      	ldr	r3, [pc, #436]	@ (8006084 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d063      	beq.n	8005fa2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eda:	4b6a      	ldr	r3, [pc, #424]	@ (8006084 <HAL_RCC_GetSysClockFreq+0x200>)
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	099b      	lsrs	r3, r3, #6
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ee4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eec:	633b      	str	r3, [r7, #48]	@ 0x30
 8005eee:	2300      	movs	r3, #0
 8005ef0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ef2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005ef6:	4622      	mov	r2, r4
 8005ef8:	462b      	mov	r3, r5
 8005efa:	f04f 0000 	mov.w	r0, #0
 8005efe:	f04f 0100 	mov.w	r1, #0
 8005f02:	0159      	lsls	r1, r3, #5
 8005f04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f08:	0150      	lsls	r0, r2, #5
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	4621      	mov	r1, r4
 8005f10:	1a51      	subs	r1, r2, r1
 8005f12:	6139      	str	r1, [r7, #16]
 8005f14:	4629      	mov	r1, r5
 8005f16:	eb63 0301 	sbc.w	r3, r3, r1
 8005f1a:	617b      	str	r3, [r7, #20]
 8005f1c:	f04f 0200 	mov.w	r2, #0
 8005f20:	f04f 0300 	mov.w	r3, #0
 8005f24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f28:	4659      	mov	r1, fp
 8005f2a:	018b      	lsls	r3, r1, #6
 8005f2c:	4651      	mov	r1, sl
 8005f2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f32:	4651      	mov	r1, sl
 8005f34:	018a      	lsls	r2, r1, #6
 8005f36:	4651      	mov	r1, sl
 8005f38:	ebb2 0801 	subs.w	r8, r2, r1
 8005f3c:	4659      	mov	r1, fp
 8005f3e:	eb63 0901 	sbc.w	r9, r3, r1
 8005f42:	f04f 0200 	mov.w	r2, #0
 8005f46:	f04f 0300 	mov.w	r3, #0
 8005f4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f56:	4690      	mov	r8, r2
 8005f58:	4699      	mov	r9, r3
 8005f5a:	4623      	mov	r3, r4
 8005f5c:	eb18 0303 	adds.w	r3, r8, r3
 8005f60:	60bb      	str	r3, [r7, #8]
 8005f62:	462b      	mov	r3, r5
 8005f64:	eb49 0303 	adc.w	r3, r9, r3
 8005f68:	60fb      	str	r3, [r7, #12]
 8005f6a:	f04f 0200 	mov.w	r2, #0
 8005f6e:	f04f 0300 	mov.w	r3, #0
 8005f72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f76:	4629      	mov	r1, r5
 8005f78:	024b      	lsls	r3, r1, #9
 8005f7a:	4621      	mov	r1, r4
 8005f7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f80:	4621      	mov	r1, r4
 8005f82:	024a      	lsls	r2, r1, #9
 8005f84:	4610      	mov	r0, r2
 8005f86:	4619      	mov	r1, r3
 8005f88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005f94:	f7fa fe30 	bl	8000bf8 <__aeabi_uldivmod>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fa0:	e058      	b.n	8006054 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fa2:	4b38      	ldr	r3, [pc, #224]	@ (8006084 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	099b      	lsrs	r3, r3, #6
 8005fa8:	2200      	movs	r2, #0
 8005faa:	4618      	mov	r0, r3
 8005fac:	4611      	mov	r1, r2
 8005fae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005fb2:	623b      	str	r3, [r7, #32]
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005fbc:	4642      	mov	r2, r8
 8005fbe:	464b      	mov	r3, r9
 8005fc0:	f04f 0000 	mov.w	r0, #0
 8005fc4:	f04f 0100 	mov.w	r1, #0
 8005fc8:	0159      	lsls	r1, r3, #5
 8005fca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fce:	0150      	lsls	r0, r2, #5
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4641      	mov	r1, r8
 8005fd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8005fda:	4649      	mov	r1, r9
 8005fdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8005fe0:	f04f 0200 	mov.w	r2, #0
 8005fe4:	f04f 0300 	mov.w	r3, #0
 8005fe8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005fec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ff0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ff4:	ebb2 040a 	subs.w	r4, r2, sl
 8005ff8:	eb63 050b 	sbc.w	r5, r3, fp
 8005ffc:	f04f 0200 	mov.w	r2, #0
 8006000:	f04f 0300 	mov.w	r3, #0
 8006004:	00eb      	lsls	r3, r5, #3
 8006006:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800600a:	00e2      	lsls	r2, r4, #3
 800600c:	4614      	mov	r4, r2
 800600e:	461d      	mov	r5, r3
 8006010:	4643      	mov	r3, r8
 8006012:	18e3      	adds	r3, r4, r3
 8006014:	603b      	str	r3, [r7, #0]
 8006016:	464b      	mov	r3, r9
 8006018:	eb45 0303 	adc.w	r3, r5, r3
 800601c:	607b      	str	r3, [r7, #4]
 800601e:	f04f 0200 	mov.w	r2, #0
 8006022:	f04f 0300 	mov.w	r3, #0
 8006026:	e9d7 4500 	ldrd	r4, r5, [r7]
 800602a:	4629      	mov	r1, r5
 800602c:	028b      	lsls	r3, r1, #10
 800602e:	4621      	mov	r1, r4
 8006030:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006034:	4621      	mov	r1, r4
 8006036:	028a      	lsls	r2, r1, #10
 8006038:	4610      	mov	r0, r2
 800603a:	4619      	mov	r1, r3
 800603c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800603e:	2200      	movs	r2, #0
 8006040:	61bb      	str	r3, [r7, #24]
 8006042:	61fa      	str	r2, [r7, #28]
 8006044:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006048:	f7fa fdd6 	bl	8000bf8 <__aeabi_uldivmod>
 800604c:	4602      	mov	r2, r0
 800604e:	460b      	mov	r3, r1
 8006050:	4613      	mov	r3, r2
 8006052:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006054:	4b0b      	ldr	r3, [pc, #44]	@ (8006084 <HAL_RCC_GetSysClockFreq+0x200>)
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	0c1b      	lsrs	r3, r3, #16
 800605a:	f003 0303 	and.w	r3, r3, #3
 800605e:	3301      	adds	r3, #1
 8006060:	005b      	lsls	r3, r3, #1
 8006062:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006064:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006066:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006068:	fbb2 f3f3 	udiv	r3, r2, r3
 800606c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800606e:	e002      	b.n	8006076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006070:	4b05      	ldr	r3, [pc, #20]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x204>)
 8006072:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006074:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006076:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006078:	4618      	mov	r0, r3
 800607a:	3750      	adds	r7, #80	@ 0x50
 800607c:	46bd      	mov	sp, r7
 800607e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006082:	bf00      	nop
 8006084:	40023800 	.word	0x40023800
 8006088:	00f42400 	.word	0x00f42400
 800608c:	007a1200 	.word	0x007a1200

08006090 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006090:	b480      	push	{r7}
 8006092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006094:	4b03      	ldr	r3, [pc, #12]	@ (80060a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006096:	681b      	ldr	r3, [r3, #0]
}
 8006098:	4618      	mov	r0, r3
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	20000000 	.word	0x20000000

080060a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80060ac:	f7ff fff0 	bl	8006090 <HAL_RCC_GetHCLKFreq>
 80060b0:	4602      	mov	r2, r0
 80060b2:	4b05      	ldr	r3, [pc, #20]	@ (80060c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	0a9b      	lsrs	r3, r3, #10
 80060b8:	f003 0307 	and.w	r3, r3, #7
 80060bc:	4903      	ldr	r1, [pc, #12]	@ (80060cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80060be:	5ccb      	ldrb	r3, [r1, r3]
 80060c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	40023800 	.word	0x40023800
 80060cc:	08011dbc 	.word	0x08011dbc

080060d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80060d4:	f7ff ffdc 	bl	8006090 <HAL_RCC_GetHCLKFreq>
 80060d8:	4602      	mov	r2, r0
 80060da:	4b05      	ldr	r3, [pc, #20]	@ (80060f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	0b5b      	lsrs	r3, r3, #13
 80060e0:	f003 0307 	and.w	r3, r3, #7
 80060e4:	4903      	ldr	r1, [pc, #12]	@ (80060f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060e6:	5ccb      	ldrb	r3, [r1, r3]
 80060e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	40023800 	.word	0x40023800
 80060f4:	08011dbc 	.word	0x08011dbc

080060f8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80060fc:	4b06      	ldr	r3, [pc, #24]	@ (8006118 <HAL_RCC_NMI_IRQHandler+0x20>)
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006104:	2b80      	cmp	r3, #128	@ 0x80
 8006106:	d104      	bne.n	8006112 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8006108:	f000 f80a 	bl	8006120 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800610c:	4b03      	ldr	r3, [pc, #12]	@ (800611c <HAL_RCC_NMI_IRQHandler+0x24>)
 800610e:	2280      	movs	r2, #128	@ 0x80
 8006110:	701a      	strb	r2, [r3, #0]
  }
}
 8006112:	bf00      	nop
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	40023800 	.word	0x40023800
 800611c:	4002380e 	.word	0x4002380e

08006120 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8006120:	b480      	push	{r7}
 8006122:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006124:	bf00      	nop
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
	...

08006130 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b088      	sub	sp, #32
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006138:	2300      	movs	r3, #0
 800613a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800613c:	2300      	movs	r3, #0
 800613e:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8006140:	2300      	movs	r3, #0
 8006142:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006144:	2300      	movs	r3, #0
 8006146:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	2b00      	cmp	r3, #0
 8006152:	d012      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006154:	4b65      	ldr	r3, [pc, #404]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	4a64      	ldr	r2, [pc, #400]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800615a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800615e:	6093      	str	r3, [r2, #8]
 8006160:	4b62      	ldr	r3, [pc, #392]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006162:	689a      	ldr	r2, [r3, #8]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006168:	4960      	ldr	r1, [pc, #384]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800616a:	4313      	orrs	r3, r2
 800616c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8006176:	2301      	movs	r3, #1
 8006178:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d017      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006186:	4b59      	ldr	r3, [pc, #356]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006188:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800618c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006194:	4955      	ldr	r1, [pc, #340]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006196:	4313      	orrs	r3, r2
 8006198:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061a4:	d101      	bne.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80061a6:	2301      	movs	r3, #1
 80061a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80061b2:	2301      	movs	r3, #1
 80061b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d017      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80061c2:	4b4a      	ldr	r3, [pc, #296]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80061c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061c8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d0:	4946      	ldr	r1, [pc, #280]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061e0:	d101      	bne.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80061e2:	2301      	movs	r3, #1
 80061e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80061ee:	2301      	movs	r3, #1
 80061f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0320 	and.w	r3, r3, #32
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f000 808b 	beq.w	8006316 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006200:	4b3a      	ldr	r3, [pc, #232]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006204:	4a39      	ldr	r2, [pc, #228]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800620a:	6413      	str	r3, [r2, #64]	@ 0x40
 800620c:	4b37      	ldr	r3, [pc, #220]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800620e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006214:	60fb      	str	r3, [r7, #12]
 8006216:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006218:	4b35      	ldr	r3, [pc, #212]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a34      	ldr	r2, [pc, #208]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800621e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006222:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006224:	f7fc fcee 	bl	8002c04 <HAL_GetTick>
 8006228:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800622a:	e008      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800622c:	f7fc fcea 	bl	8002c04 <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	2b64      	cmp	r3, #100	@ 0x64
 8006238:	d901      	bls.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e2bc      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800623e:	4b2c      	ldr	r3, [pc, #176]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006246:	2b00      	cmp	r3, #0
 8006248:	d0f0      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800624a:	4b28      	ldr	r3, [pc, #160]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800624c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800624e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006252:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d035      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800625e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	429a      	cmp	r2, r3
 8006266:	d02e      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006268:	4b20      	ldr	r3, [pc, #128]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800626a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800626c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006270:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006272:	4b1e      	ldr	r3, [pc, #120]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006276:	4a1d      	ldr	r2, [pc, #116]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800627c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800627e:	4b1b      	ldr	r3, [pc, #108]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006282:	4a1a      	ldr	r2, [pc, #104]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006284:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006288:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800628a:	4a18      	ldr	r2, [pc, #96]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006290:	4b16      	ldr	r3, [pc, #88]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	2b01      	cmp	r3, #1
 800629a:	d114      	bne.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800629c:	f7fc fcb2 	bl	8002c04 <HAL_GetTick>
 80062a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062a2:	e00a      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062a4:	f7fc fcae 	bl	8002c04 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d901      	bls.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e27e      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062ba:	4b0c      	ldr	r3, [pc, #48]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80062bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d0ee      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062d2:	d111      	bne.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80062d4:	4b05      	ldr	r3, [pc, #20]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80062e0:	4b04      	ldr	r3, [pc, #16]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80062e2:	400b      	ands	r3, r1
 80062e4:	4901      	ldr	r1, [pc, #4]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	608b      	str	r3, [r1, #8]
 80062ea:	e00b      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80062ec:	40023800 	.word	0x40023800
 80062f0:	40007000 	.word	0x40007000
 80062f4:	0ffffcff 	.word	0x0ffffcff
 80062f8:	4ba4      	ldr	r3, [pc, #656]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	4aa3      	ldr	r2, [pc, #652]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80062fe:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006302:	6093      	str	r3, [r2, #8]
 8006304:	4ba1      	ldr	r3, [pc, #644]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006306:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006310:	499e      	ldr	r1, [pc, #632]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006312:	4313      	orrs	r3, r2
 8006314:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0310 	and.w	r3, r3, #16
 800631e:	2b00      	cmp	r3, #0
 8006320:	d010      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006322:	4b9a      	ldr	r3, [pc, #616]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006324:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006328:	4a98      	ldr	r2, [pc, #608]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800632a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800632e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006332:	4b96      	ldr	r3, [pc, #600]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006334:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800633c:	4993      	ldr	r1, [pc, #588]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800633e:	4313      	orrs	r3, r2
 8006340:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00a      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006350:	4b8e      	ldr	r3, [pc, #568]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006356:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800635e:	498b      	ldr	r1, [pc, #556]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006360:	4313      	orrs	r3, r2
 8006362:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00a      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006372:	4b86      	ldr	r3, [pc, #536]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006378:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006380:	4982      	ldr	r1, [pc, #520]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006382:	4313      	orrs	r3, r2
 8006384:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00a      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006394:	4b7d      	ldr	r3, [pc, #500]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800639a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063a2:	497a      	ldr	r1, [pc, #488]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00a      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063b6:	4b75      	ldr	r3, [pc, #468]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80063b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063bc:	f023 0203 	bic.w	r2, r3, #3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063c4:	4971      	ldr	r1, [pc, #452]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00a      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063d8:	4b6c      	ldr	r3, [pc, #432]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80063da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063de:	f023 020c 	bic.w	r2, r3, #12
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e6:	4969      	ldr	r1, [pc, #420]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00a      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063fa:	4b64      	ldr	r3, [pc, #400]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80063fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006400:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006408:	4960      	ldr	r1, [pc, #384]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800640a:	4313      	orrs	r3, r2
 800640c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00a      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800641c:	4b5b      	ldr	r3, [pc, #364]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800641e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006422:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800642a:	4958      	ldr	r1, [pc, #352]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800642c:	4313      	orrs	r3, r2
 800642e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00a      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800643e:	4b53      	ldr	r3, [pc, #332]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006444:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800644c:	494f      	ldr	r1, [pc, #316]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800644e:	4313      	orrs	r3, r2
 8006450:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00a      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006460:	4b4a      	ldr	r3, [pc, #296]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006466:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800646e:	4947      	ldr	r1, [pc, #284]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006470:	4313      	orrs	r3, r2
 8006472:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00a      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006482:	4b42      	ldr	r3, [pc, #264]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006488:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006490:	493e      	ldr	r1, [pc, #248]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006492:	4313      	orrs	r3, r2
 8006494:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00a      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80064a4:	4b39      	ldr	r3, [pc, #228]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80064a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064aa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064b2:	4936      	ldr	r1, [pc, #216]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d011      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80064c6:	4b31      	ldr	r3, [pc, #196]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80064c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064cc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064d4:	492d      	ldr	r1, [pc, #180]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80064d6:	4313      	orrs	r3, r2
 80064d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064e4:	d101      	bne.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80064e6:	2301      	movs	r3, #1
 80064e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00a      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064f6:	4b25      	ldr	r3, [pc, #148]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80064f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064fc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006504:	4921      	ldr	r1, [pc, #132]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006506:	4313      	orrs	r3, r2
 8006508:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00a      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006518:	4b1c      	ldr	r3, [pc, #112]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800651a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800651e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006526:	4919      	ldr	r1, [pc, #100]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006528:	4313      	orrs	r3, r2
 800652a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00a      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800653a:	4b14      	ldr	r3, [pc, #80]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800653c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006540:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006548:	4910      	ldr	r1, [pc, #64]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800654a:	4313      	orrs	r3, r2
 800654c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d006      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 809d 	beq.w	800669e <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006564:	4b09      	ldr	r3, [pc, #36]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a08      	ldr	r2, [pc, #32]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800656a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800656e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006570:	f7fc fb48 	bl	8002c04 <HAL_GetTick>
 8006574:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006576:	e00b      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006578:	f7fc fb44 	bl	8002c04 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	2b64      	cmp	r3, #100	@ 0x64
 8006584:	d904      	bls.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e116      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800658a:	bf00      	nop
 800658c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006590:	4b8b      	ldr	r3, [pc, #556]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1ed      	bne.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d017      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d113      	bne.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80065b0:	4b83      	ldr	r3, [pc, #524]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80065b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065b6:	0e1b      	lsrs	r3, r3, #24
 80065b8:	f003 030f 	and.w	r3, r3, #15
 80065bc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	019a      	lsls	r2, r3, #6
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	061b      	lsls	r3, r3, #24
 80065c8:	431a      	orrs	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	071b      	lsls	r3, r3, #28
 80065d0:	497b      	ldr	r1, [pc, #492]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d004      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065ec:	d00a      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d024      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006602:	d11f      	bne.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006604:	4b6e      	ldr	r3, [pc, #440]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006606:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800660a:	0f1b      	lsrs	r3, r3, #28
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	019a      	lsls	r2, r3, #6
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	061b      	lsls	r3, r3, #24
 800661e:	431a      	orrs	r2, r3
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	071b      	lsls	r3, r3, #28
 8006624:	4966      	ldr	r1, [pc, #408]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006626:	4313      	orrs	r3, r2
 8006628:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800662c:	4b64      	ldr	r3, [pc, #400]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800662e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006632:	f023 021f 	bic.w	r2, r3, #31
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	69db      	ldr	r3, [r3, #28]
 800663a:	3b01      	subs	r3, #1
 800663c:	4960      	ldr	r1, [pc, #384]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800663e:	4313      	orrs	r3, r2
 8006640:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00d      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	019a      	lsls	r2, r3, #6
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	061b      	lsls	r3, r3, #24
 800665c:	431a      	orrs	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	071b      	lsls	r3, r3, #28
 8006664:	4956      	ldr	r1, [pc, #344]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006666:	4313      	orrs	r3, r2
 8006668:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800666c:	4b54      	ldr	r3, [pc, #336]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a53      	ldr	r2, [pc, #332]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006672:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006676:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006678:	f7fc fac4 	bl	8002c04 <HAL_GetTick>
 800667c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800667e:	e008      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006680:	f7fc fac0 	bl	8002c04 <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	2b64      	cmp	r3, #100	@ 0x64
 800668c:	d901      	bls.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	e092      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006692:	4b4b      	ldr	r3, [pc, #300]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d0f0      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	f040 8088 	bne.w	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80066a6:	4b46      	ldr	r3, [pc, #280]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a45      	ldr	r2, [pc, #276]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80066ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066b2:	f7fc faa7 	bl	8002c04 <HAL_GetTick>
 80066b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80066b8:	e008      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80066ba:	f7fc faa3 	bl	8002c04 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	2b64      	cmp	r3, #100	@ 0x64
 80066c6:	d901      	bls.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e075      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80066cc:	4b3c      	ldr	r3, [pc, #240]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066d8:	d0ef      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d009      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d024      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d120      	bne.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006702:	4b2f      	ldr	r3, [pc, #188]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006708:	0c1b      	lsrs	r3, r3, #16
 800670a:	f003 0303 	and.w	r3, r3, #3
 800670e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	019a      	lsls	r2, r3, #6
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	041b      	lsls	r3, r3, #16
 800671a:	431a      	orrs	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	061b      	lsls	r3, r3, #24
 8006722:	4927      	ldr	r1, [pc, #156]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006724:	4313      	orrs	r3, r2
 8006726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800672a:	4b25      	ldr	r3, [pc, #148]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800672c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006730:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a1b      	ldr	r3, [r3, #32]
 8006738:	3b01      	subs	r3, #1
 800673a:	021b      	lsls	r3, r3, #8
 800673c:	4920      	ldr	r1, [pc, #128]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800673e:	4313      	orrs	r3, r2
 8006740:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d018      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006754:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006758:	d113      	bne.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800675a:	4b19      	ldr	r3, [pc, #100]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800675c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006760:	0e1b      	lsrs	r3, r3, #24
 8006762:	f003 030f 	and.w	r3, r3, #15
 8006766:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	019a      	lsls	r2, r3, #6
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	041b      	lsls	r3, r3, #16
 8006774:	431a      	orrs	r2, r3
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	061b      	lsls	r3, r3, #24
 800677a:	4911      	ldr	r1, [pc, #68]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800677c:	4313      	orrs	r3, r2
 800677e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006782:	4b0f      	ldr	r3, [pc, #60]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a0e      	ldr	r2, [pc, #56]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006788:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800678c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800678e:	f7fc fa39 	bl	8002c04 <HAL_GetTick>
 8006792:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006794:	e008      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006796:	f7fc fa35 	bl	8002c04 <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	2b64      	cmp	r3, #100	@ 0x64
 80067a2:	d901      	bls.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e007      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80067a8:	4b05      	ldr	r3, [pc, #20]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067b4:	d1ef      	bne.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3720      	adds	r7, #32
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	40023800 	.word	0x40023800

080067c4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e022      	b.n	800681c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d105      	bne.n	80067ee <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f7fb fbb1 	bl	8001f50 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2203      	movs	r2, #3
 80067f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f814 	bl	8006824 <HAL_SD_InitCard>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d001      	beq.n	8006806 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e00a      	b.n	800681c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3708      	adds	r7, #8
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006824:	b5b0      	push	{r4, r5, r7, lr}
 8006826:	b08e      	sub	sp, #56	@ 0x38
 8006828:	af04      	add	r7, sp, #16
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800682c:	2300      	movs	r3, #0
 800682e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006830:	2300      	movs	r3, #0
 8006832:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006834:	2300      	movs	r3, #0
 8006836:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006838:	2300      	movs	r3, #0
 800683a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800683c:	2300      	movs	r3, #0
 800683e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006840:	2376      	movs	r3, #118	@ 0x76
 8006842:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681d      	ldr	r5, [r3, #0]
 8006848:	466c      	mov	r4, sp
 800684a:	f107 0314 	add.w	r3, r7, #20
 800684e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006852:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006856:	f107 0308 	add.w	r3, r7, #8
 800685a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800685c:	4628      	mov	r0, r5
 800685e:	f003 fb6d 	bl	8009f3c <SDMMC_Init>
 8006862:	4603      	mov	r3, r0
 8006864:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8006868:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800686c:	2b00      	cmp	r3, #0
 800686e:	d001      	beq.n	8006874 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e059      	b.n	8006928 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685a      	ldr	r2, [r3, #4]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006882:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4618      	mov	r0, r3
 800688a:	f003 fba1 	bl	8009fd0 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800689c:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800689e:	2002      	movs	r0, #2
 80068a0:	f7fc f9bc 	bl	8002c1c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 ff01 	bl	80076ac <SD_PowerON>
 80068aa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068ac:	6a3b      	ldr	r3, [r7, #32]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00b      	beq.n	80068ca <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068be:	6a3b      	ldr	r3, [r7, #32]
 80068c0:	431a      	orrs	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e02e      	b.n	8006928 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fe20 	bl	8007510 <SD_InitCard>
 80068d0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068d2:	6a3b      	ldr	r3, [r7, #32]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00b      	beq.n	80068f0 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	431a      	orrs	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e01b      	b.n	8006928 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80068f8:	4618      	mov	r0, r3
 80068fa:	f003 fbfb 	bl	800a0f4 <SDMMC_CmdBlockLength>
 80068fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006900:	6a3b      	ldr	r3, [r7, #32]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00f      	beq.n	8006926 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a09      	ldr	r2, [pc, #36]	@ (8006930 <HAL_SD_InitCard+0x10c>)
 800690c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006912:	6a3b      	ldr	r3, [r7, #32]
 8006914:	431a      	orrs	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e000      	b.n	8006928 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3728      	adds	r7, #40	@ 0x28
 800692c:	46bd      	mov	sp, r7
 800692e:	bdb0      	pop	{r4, r5, r7, pc}
 8006930:	004005ff 	.word	0x004005ff

08006934 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b092      	sub	sp, #72	@ 0x48
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
 8006940:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006942:	f7fc f95f 	bl	8002c04 <HAL_GetTick>
 8006946:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d107      	bne.n	8006966 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800695a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e1bd      	b.n	8006ce2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b01      	cmp	r3, #1
 8006970:	f040 81b0 	bne.w	8006cd4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800697a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	441a      	add	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006984:	429a      	cmp	r2, r3
 8006986:	d907      	bls.n	8006998 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800698c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e1a4      	b.n	8006ce2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2203      	movs	r2, #3
 800699c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2200      	movs	r2, #0
 80069a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d002      	beq.n	80069b6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80069b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b2:	025b      	lsls	r3, r3, #9
 80069b4:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80069b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80069ba:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	025b      	lsls	r3, r3, #9
 80069c0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80069c2:	2390      	movs	r3, #144	@ 0x90
 80069c4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80069c6:	2302      	movs	r3, #2
 80069c8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80069ce:	2301      	movs	r3, #1
 80069d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f107 0214 	add.w	r2, r7, #20
 80069da:	4611      	mov	r1, r2
 80069dc:	4618      	mov	r0, r3
 80069de:	f003 fb5d 	bl	800a09c <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d90a      	bls.n	80069fe <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2202      	movs	r2, #2
 80069ec:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80069f4:	4618      	mov	r0, r3
 80069f6:	f003 fbc1 	bl	800a17c <SDMMC_CmdReadMultiBlock>
 80069fa:	6478      	str	r0, [r7, #68]	@ 0x44
 80069fc:	e009      	b.n	8006a12 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2201      	movs	r2, #1
 8006a02:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f003 fb94 	bl	800a138 <SDMMC_CmdReadSingleBlock>
 8006a10:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d012      	beq.n	8006a3e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a7a      	ldr	r2, [pc, #488]	@ (8006c08 <HAL_SD_ReadBlocks+0x2d4>)
 8006a1e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a26:	431a      	orrs	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e151      	b.n	8006ce2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006a42:	e061      	b.n	8006b08 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d03c      	beq.n	8006acc <HAL_SD_ReadBlocks+0x198>
 8006a52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d039      	beq.n	8006acc <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006a58:	2300      	movs	r3, #0
 8006a5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a5c:	e033      	b.n	8006ac6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f003 fa96 	bl	8009f94 <SDMMC_ReadFIFO>
 8006a68:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a70:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a74:	3301      	adds	r3, #1
 8006a76:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006a78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a80:	0a1b      	lsrs	r3, r3, #8
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a86:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a90:	3b01      	subs	r3, #1
 8006a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a96:	0c1b      	lsrs	r3, r3, #16
 8006a98:	b2da      	uxtb	r2, r3
 8006a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a9c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aac:	0e1b      	lsrs	r3, r3, #24
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ab2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006aba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006abc:	3b01      	subs	r3, #1
 8006abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8006ac0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ac6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ac8:	2b07      	cmp	r3, #7
 8006aca:	d9c8      	bls.n	8006a5e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006acc:	f7fc f89a 	bl	8002c04 <HAL_GetTick>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d902      	bls.n	8006ae2 <HAL_SD_ReadBlocks+0x1ae>
 8006adc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d112      	bne.n	8006b08 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a48      	ldr	r2, [pc, #288]	@ (8006c08 <HAL_SD_ReadBlocks+0x2d4>)
 8006ae8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aee:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e0ec      	b.n	8006ce2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b0e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d096      	beq.n	8006a44 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d022      	beq.n	8006b6a <HAL_SD_ReadBlocks+0x236>
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d91f      	bls.n	8006b6a <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b2e:	2b03      	cmp	r3, #3
 8006b30:	d01b      	beq.n	8006b6a <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f003 fb86 	bl	800a248 <SDMMC_CmdStopTransfer>
 8006b3c:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006b3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d012      	beq.n	8006b6a <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a2f      	ldr	r2, [pc, #188]	@ (8006c08 <HAL_SD_ReadBlocks+0x2d4>)
 8006b4a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b52:	431a      	orrs	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e0bb      	b.n	8006ce2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b70:	f003 0308 	and.w	r3, r3, #8
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d012      	beq.n	8006b9e <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a22      	ldr	r2, [pc, #136]	@ (8006c08 <HAL_SD_ReadBlocks+0x2d4>)
 8006b7e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b84:	f043 0208 	orr.w	r2, r3, #8
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e0a1      	b.n	8006ce2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ba4:	f003 0302 	and.w	r3, r3, #2
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d012      	beq.n	8006bd2 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a15      	ldr	r2, [pc, #84]	@ (8006c08 <HAL_SD_ReadBlocks+0x2d4>)
 8006bb2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bb8:	f043 0202 	orr.w	r2, r3, #2
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e087      	b.n	8006ce2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bd8:	f003 0320 	and.w	r3, r3, #32
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d064      	beq.n	8006caa <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a08      	ldr	r2, [pc, #32]	@ (8006c08 <HAL_SD_ReadBlocks+0x2d4>)
 8006be6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bec:	f043 0220 	orr.w	r2, r3, #32
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e06d      	b.n	8006ce2 <HAL_SD_ReadBlocks+0x3ae>
 8006c06:	bf00      	nop
 8006c08:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4618      	mov	r0, r3
 8006c12:	f003 f9bf 	bl	8009f94 <SDMMC_ReadFIFO>
 8006c16:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c1a:	b2da      	uxtb	r2, r3
 8006c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c1e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c22:	3301      	adds	r3, #1
 8006c24:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c2e:	0a1b      	lsrs	r3, r3, #8
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c34:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c38:	3301      	adds	r3, #1
 8006c3a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006c3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c44:	0c1b      	lsrs	r3, r3, #16
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c4a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c4e:	3301      	adds	r3, #1
 8006c50:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c54:	3b01      	subs	r3, #1
 8006c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c5a:	0e1b      	lsrs	r3, r3, #24
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c60:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c64:	3301      	adds	r3, #1
 8006c66:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006c6e:	f7fb ffc9 	bl	8002c04 <HAL_GetTick>
 8006c72:	4602      	mov	r2, r0
 8006c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d902      	bls.n	8006c84 <HAL_SD_ReadBlocks+0x350>
 8006c7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d112      	bne.n	8006caa <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a18      	ldr	r2, [pc, #96]	@ (8006cec <HAL_SD_ReadBlocks+0x3b8>)
 8006c8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c90:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e01b      	b.n	8006ce2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d002      	beq.n	8006cbe <HAL_SD_ReadBlocks+0x38a>
 8006cb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1a6      	bne.n	8006c0c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006cc6:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	e006      	b.n	8006ce2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
  }
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3748      	adds	r7, #72	@ 0x48
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	004005ff 	.word	0x004005ff

08006cf0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b092      	sub	sp, #72	@ 0x48
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
 8006cfc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006cfe:	f7fb ff81 	bl	8002c04 <HAL_GetTick>
 8006d02:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d107      	bne.n	8006d22 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d16:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e165      	b.n	8006fee <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	f040 8158 	bne.w	8006fe0 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006d36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	441a      	add	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d907      	bls.n	8006d54 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d48:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e14c      	b.n	8006fee <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2203      	movs	r2, #3
 8006d58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2200      	movs	r2, #0
 8006d62:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d002      	beq.n	8006d72 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d6e:	025b      	lsls	r3, r3, #9
 8006d70:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006d72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006d76:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	025b      	lsls	r3, r3, #9
 8006d7c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006d7e:	2390      	movs	r3, #144	@ 0x90
 8006d80:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006d82:	2300      	movs	r3, #0
 8006d84:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006d86:	2300      	movs	r3, #0
 8006d88:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f107 0218 	add.w	r2, r7, #24
 8006d96:	4611      	mov	r1, r2
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f003 f97f 	bl	800a09c <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d90a      	bls.n	8006dba <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2220      	movs	r2, #32
 8006da8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006db0:	4618      	mov	r0, r3
 8006db2:	f003 fa27 	bl	800a204 <SDMMC_CmdWriteMultiBlock>
 8006db6:	6478      	str	r0, [r7, #68]	@ 0x44
 8006db8:	e009      	b.n	8006dce <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2210      	movs	r2, #16
 8006dbe:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f003 f9fa 	bl	800a1c0 <SDMMC_CmdWriteSingleBlock>
 8006dcc:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006dce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d012      	beq.n	8006dfa <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a87      	ldr	r2, [pc, #540]	@ (8006ff8 <HAL_SD_WriteBlocks+0x308>)
 8006dda:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006de0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006de2:	431a      	orrs	r2, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e0f9      	b.n	8006fee <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006dfe:	e065      	b.n	8006ecc <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d040      	beq.n	8006e90 <HAL_SD_WriteBlocks+0x1a0>
 8006e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d03d      	beq.n	8006e90 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006e14:	2300      	movs	r3, #0
 8006e16:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e18:	e037      	b.n	8006e8a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8006e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e22:	3301      	adds	r3, #1
 8006e24:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	021a      	lsls	r2, r3, #8
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006e3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e40:	3b01      	subs	r3, #1
 8006e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	041a      	lsls	r2, r3, #16
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e52:	3301      	adds	r3, #1
 8006e54:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006e56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	061a      	lsls	r2, r3, #24
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e70:	3b01      	subs	r3, #1
 8006e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f107 0214 	add.w	r2, r7, #20
 8006e7c:	4611      	mov	r1, r2
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f003 f895 	bl	8009fae <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006e84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e86:	3301      	adds	r3, #1
 8006e88:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e8c:	2b07      	cmp	r3, #7
 8006e8e:	d9c4      	bls.n	8006e1a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006e90:	f7fb feb8 	bl	8002c04 <HAL_GetTick>
 8006e94:	4602      	mov	r2, r0
 8006e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d902      	bls.n	8006ea6 <HAL_SD_WriteBlocks+0x1b6>
 8006ea0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d112      	bne.n	8006ecc <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a53      	ldr	r2, [pc, #332]	@ (8006ff8 <HAL_SD_WriteBlocks+0x308>)
 8006eac:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006eb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006eb4:	431a      	orrs	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e090      	b.n	8006fee <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ed2:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d092      	beq.n	8006e00 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d022      	beq.n	8006f2e <HAL_SD_WriteBlocks+0x23e>
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d91f      	bls.n	8006f2e <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ef2:	2b03      	cmp	r3, #3
 8006ef4:	d01b      	beq.n	8006f2e <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4618      	mov	r0, r3
 8006efc:	f003 f9a4 	bl	800a248 <SDMMC_CmdStopTransfer>
 8006f00:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006f02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d012      	beq.n	8006f2e <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a3a      	ldr	r2, [pc, #232]	@ (8006ff8 <HAL_SD_WriteBlocks+0x308>)
 8006f0e:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f16:	431a      	orrs	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e05f      	b.n	8006fee <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f34:	f003 0308 	and.w	r3, r3, #8
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d012      	beq.n	8006f62 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a2d      	ldr	r2, [pc, #180]	@ (8006ff8 <HAL_SD_WriteBlocks+0x308>)
 8006f42:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f48:	f043 0208 	orr.w	r2, r3, #8
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e045      	b.n	8006fee <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f68:	f003 0302 	and.w	r3, r3, #2
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d012      	beq.n	8006f96 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a20      	ldr	r2, [pc, #128]	@ (8006ff8 <HAL_SD_WriteBlocks+0x308>)
 8006f76:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f7c:	f043 0202 	orr.w	r2, r3, #2
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e02b      	b.n	8006fee <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f9c:	f003 0310 	and.w	r3, r3, #16
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d012      	beq.n	8006fca <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a13      	ldr	r2, [pc, #76]	@ (8006ff8 <HAL_SD_WriteBlocks+0x308>)
 8006faa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb0:	f043 0210 	orr.w	r2, r3, #16
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e011      	b.n	8006fee <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006fd2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	e006      	b.n	8006fee <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
  }
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3748      	adds	r7, #72	@ 0x48
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	004005ff 	.word	0x004005ff

08006ffc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800700a:	0f9b      	lsrs	r3, r3, #30
 800700c:	b2da      	uxtb	r2, r3
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007016:	0e9b      	lsrs	r3, r3, #26
 8007018:	b2db      	uxtb	r3, r3
 800701a:	f003 030f 	and.w	r3, r3, #15
 800701e:	b2da      	uxtb	r2, r3
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007028:	0e1b      	lsrs	r3, r3, #24
 800702a:	b2db      	uxtb	r3, r3
 800702c:	f003 0303 	and.w	r3, r3, #3
 8007030:	b2da      	uxtb	r2, r3
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800703a:	0c1b      	lsrs	r3, r3, #16
 800703c:	b2da      	uxtb	r2, r3
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007046:	0a1b      	lsrs	r3, r3, #8
 8007048:	b2da      	uxtb	r2, r3
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007052:	b2da      	uxtb	r2, r3
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800705c:	0d1b      	lsrs	r3, r3, #20
 800705e:	b29a      	uxth	r2, r3
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007068:	0c1b      	lsrs	r3, r3, #16
 800706a:	b2db      	uxtb	r3, r3
 800706c:	f003 030f 	and.w	r3, r3, #15
 8007070:	b2da      	uxtb	r2, r3
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800707a:	0bdb      	lsrs	r3, r3, #15
 800707c:	b2db      	uxtb	r3, r3
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	b2da      	uxtb	r2, r3
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800708c:	0b9b      	lsrs	r3, r3, #14
 800708e:	b2db      	uxtb	r3, r3
 8007090:	f003 0301 	and.w	r3, r3, #1
 8007094:	b2da      	uxtb	r2, r3
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800709e:	0b5b      	lsrs	r3, r3, #13
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070b0:	0b1b      	lsrs	r3, r3, #12
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	f003 0301 	and.w	r3, r3, #1
 80070b8:	b2da      	uxtb	r2, r3
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	2200      	movs	r2, #0
 80070c2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d163      	bne.n	8007194 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070d0:	009a      	lsls	r2, r3, #2
 80070d2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80070d6:	4013      	ands	r3, r2
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80070dc:	0f92      	lsrs	r2, r2, #30
 80070de:	431a      	orrs	r2, r3
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070e8:	0edb      	lsrs	r3, r3, #27
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	f003 0307 	and.w	r3, r3, #7
 80070f0:	b2da      	uxtb	r2, r3
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070fa:	0e1b      	lsrs	r3, r3, #24
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	f003 0307 	and.w	r3, r3, #7
 8007102:	b2da      	uxtb	r2, r3
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800710c:	0d5b      	lsrs	r3, r3, #21
 800710e:	b2db      	uxtb	r3, r3
 8007110:	f003 0307 	and.w	r3, r3, #7
 8007114:	b2da      	uxtb	r2, r3
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800711e:	0c9b      	lsrs	r3, r3, #18
 8007120:	b2db      	uxtb	r3, r3
 8007122:	f003 0307 	and.w	r3, r3, #7
 8007126:	b2da      	uxtb	r2, r3
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007130:	0bdb      	lsrs	r3, r3, #15
 8007132:	b2db      	uxtb	r3, r3
 8007134:	f003 0307 	and.w	r3, r3, #7
 8007138:	b2da      	uxtb	r2, r3
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	1c5a      	adds	r2, r3, #1
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	7e1b      	ldrb	r3, [r3, #24]
 800714c:	b2db      	uxtb	r3, r3
 800714e:	f003 0307 	and.w	r3, r3, #7
 8007152:	3302      	adds	r3, #2
 8007154:	2201      	movs	r2, #1
 8007156:	fa02 f303 	lsl.w	r3, r2, r3
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800715e:	fb03 f202 	mul.w	r2, r3, r2
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	7a1b      	ldrb	r3, [r3, #8]
 800716a:	b2db      	uxtb	r3, r3
 800716c:	f003 030f 	and.w	r3, r3, #15
 8007170:	2201      	movs	r2, #1
 8007172:	409a      	lsls	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007180:	0a52      	lsrs	r2, r2, #9
 8007182:	fb03 f202 	mul.w	r2, r3, r2
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007190:	661a      	str	r2, [r3, #96]	@ 0x60
 8007192:	e031      	b.n	80071f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007198:	2b01      	cmp	r3, #1
 800719a:	d11d      	bne.n	80071d8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80071a0:	041b      	lsls	r3, r3, #16
 80071a2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071aa:	0c1b      	lsrs	r3, r3, #16
 80071ac:	431a      	orrs	r2, r3
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	3301      	adds	r3, #1
 80071b8:	029a      	lsls	r2, r3, #10
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071cc:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	661a      	str	r2, [r3, #96]	@ 0x60
 80071d6:	e00f      	b.n	80071f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a58      	ldr	r2, [pc, #352]	@ (8007340 <HAL_SD_GetCardCSD+0x344>)
 80071de:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071e4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e09d      	b.n	8007334 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071fc:	0b9b      	lsrs	r3, r3, #14
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	f003 0301 	and.w	r3, r3, #1
 8007204:	b2da      	uxtb	r2, r3
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800720e:	09db      	lsrs	r3, r3, #7
 8007210:	b2db      	uxtb	r3, r3
 8007212:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007216:	b2da      	uxtb	r2, r3
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007220:	b2db      	uxtb	r3, r3
 8007222:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007226:	b2da      	uxtb	r2, r3
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007230:	0fdb      	lsrs	r3, r3, #31
 8007232:	b2da      	uxtb	r2, r3
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800723c:	0f5b      	lsrs	r3, r3, #29
 800723e:	b2db      	uxtb	r3, r3
 8007240:	f003 0303 	and.w	r3, r3, #3
 8007244:	b2da      	uxtb	r2, r3
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800724e:	0e9b      	lsrs	r3, r3, #26
 8007250:	b2db      	uxtb	r3, r3
 8007252:	f003 0307 	and.w	r3, r3, #7
 8007256:	b2da      	uxtb	r2, r3
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007260:	0d9b      	lsrs	r3, r3, #22
 8007262:	b2db      	uxtb	r3, r3
 8007264:	f003 030f 	and.w	r3, r3, #15
 8007268:	b2da      	uxtb	r2, r3
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007272:	0d5b      	lsrs	r3, r3, #21
 8007274:	b2db      	uxtb	r3, r3
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	b2da      	uxtb	r2, r3
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800728e:	0c1b      	lsrs	r3, r3, #16
 8007290:	b2db      	uxtb	r3, r3
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	b2da      	uxtb	r2, r3
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072a2:	0bdb      	lsrs	r3, r3, #15
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	f003 0301 	and.w	r3, r3, #1
 80072aa:	b2da      	uxtb	r2, r3
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072b6:	0b9b      	lsrs	r3, r3, #14
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	b2da      	uxtb	r2, r3
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072ca:	0b5b      	lsrs	r3, r3, #13
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	f003 0301 	and.w	r3, r3, #1
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072de:	0b1b      	lsrs	r3, r3, #12
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	b2da      	uxtb	r2, r3
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072f2:	0a9b      	lsrs	r3, r3, #10
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	f003 0303 	and.w	r3, r3, #3
 80072fa:	b2da      	uxtb	r2, r3
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007306:	0a1b      	lsrs	r3, r3, #8
 8007308:	b2db      	uxtb	r3, r3
 800730a:	f003 0303 	and.w	r3, r3, #3
 800730e:	b2da      	uxtb	r2, r3
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800731a:	085b      	lsrs	r3, r3, #1
 800731c:	b2db      	uxtb	r3, r3
 800731e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007322:	b2da      	uxtb	r2, r3
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr
 8007340:	004005ff 	.word	0x004005ff

08007344 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800739c:	b5b0      	push	{r4, r5, r7, lr}
 800739e:	b08e      	sub	sp, #56	@ 0x38
 80073a0:	af04      	add	r7, sp, #16
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80073a6:	2300      	movs	r3, #0
 80073a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2203      	movs	r2, #3
 80073b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073b8:	2b03      	cmp	r3, #3
 80073ba:	d02e      	beq.n	800741a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073c2:	d106      	bne.n	80073d2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80073d0:	e029      	b.n	8007426 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073d8:	d10a      	bne.n	80073f0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fa1c 	bl	8007818 <SD_WideBus_Enable>
 80073e0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073e6:	6a3b      	ldr	r3, [r7, #32]
 80073e8:	431a      	orrs	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	639a      	str	r2, [r3, #56]	@ 0x38
 80073ee:	e01a      	b.n	8007426 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10a      	bne.n	800740c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 fa59 	bl	80078ae <SD_WideBus_Disable>
 80073fc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007402:	6a3b      	ldr	r3, [r7, #32]
 8007404:	431a      	orrs	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	639a      	str	r2, [r3, #56]	@ 0x38
 800740a:	e00c      	b.n	8007426 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007410:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	639a      	str	r2, [r3, #56]	@ 0x38
 8007418:	e005      	b.n	8007426 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800741e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00b      	beq.n	8007446 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a26      	ldr	r2, [pc, #152]	@ (80074cc <HAL_SD_ConfigWideBusOperation+0x130>)
 8007434:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2201      	movs	r2, #1
 800743a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007444:	e01f      	b.n	8007486 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	695b      	ldr	r3, [r3, #20]
 8007460:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681d      	ldr	r5, [r3, #0]
 800746c:	466c      	mov	r4, sp
 800746e:	f107 0314 	add.w	r3, r7, #20
 8007472:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007476:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800747a:	f107 0308 	add.w	r3, r7, #8
 800747e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007480:	4628      	mov	r0, r5
 8007482:	f002 fd5b 	bl	8009f3c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800748e:	4618      	mov	r0, r3
 8007490:	f002 fe30 	bl	800a0f4 <SDMMC_CmdBlockLength>
 8007494:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00c      	beq.n	80074b6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a0a      	ldr	r2, [pc, #40]	@ (80074cc <HAL_SD_ConfigWideBusOperation+0x130>)
 80074a2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074a8:	6a3b      	ldr	r3, [r7, #32]
 80074aa:	431a      	orrs	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 80074be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3728      	adds	r7, #40	@ 0x28
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bdb0      	pop	{r4, r5, r7, pc}
 80074ca:	bf00      	nop
 80074cc:	004005ff 	.word	0x004005ff

080074d0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80074d8:	2300      	movs	r3, #0
 80074da:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80074dc:	f107 030c 	add.w	r3, r7, #12
 80074e0:	4619      	mov	r1, r3
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f970 	bl	80077c8 <SD_SendStatus>
 80074e8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d005      	beq.n	80074fc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	431a      	orrs	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	0a5b      	lsrs	r3, r3, #9
 8007500:	f003 030f 	and.w	r3, r3, #15
 8007504:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007506:	693b      	ldr	r3, [r7, #16]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3718      	adds	r7, #24
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007510:	b5b0      	push	{r4, r5, r7, lr}
 8007512:	b094      	sub	sp, #80	@ 0x50
 8007514:	af04      	add	r7, sp, #16
 8007516:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007518:	2301      	movs	r3, #1
 800751a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4618      	mov	r0, r3
 8007522:	f002 fd63 	bl	8009fec <SDMMC_GetPowerState>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d102      	bne.n	8007532 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800752c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8007530:	e0b8      	b.n	80076a4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007536:	2b03      	cmp	r3, #3
 8007538:	d02f      	beq.n	800759a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4618      	mov	r0, r3
 8007540:	f002 ff8d 	bl	800a45e <SDMMC_CmdSendCID>
 8007544:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007548:	2b00      	cmp	r3, #0
 800754a:	d001      	beq.n	8007550 <SD_InitCard+0x40>
    {
      return errorstate;
 800754c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800754e:	e0a9      	b.n	80076a4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2100      	movs	r1, #0
 8007556:	4618      	mov	r0, r3
 8007558:	f002 fd8d 	bl	800a076 <SDMMC_GetResponse>
 800755c:	4602      	mov	r2, r0
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2104      	movs	r1, #4
 8007568:	4618      	mov	r0, r3
 800756a:	f002 fd84 	bl	800a076 <SDMMC_GetResponse>
 800756e:	4602      	mov	r2, r0
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2108      	movs	r1, #8
 800757a:	4618      	mov	r0, r3
 800757c:	f002 fd7b 	bl	800a076 <SDMMC_GetResponse>
 8007580:	4602      	mov	r2, r0
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	210c      	movs	r1, #12
 800758c:	4618      	mov	r0, r3
 800758e:	f002 fd72 	bl	800a076 <SDMMC_GetResponse>
 8007592:	4602      	mov	r2, r0
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800759e:	2b03      	cmp	r3, #3
 80075a0:	d00d      	beq.n	80075be <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f107 020e 	add.w	r2, r7, #14
 80075aa:	4611      	mov	r1, r2
 80075ac:	4618      	mov	r0, r3
 80075ae:	f002 ff93 	bl	800a4d8 <SDMMC_CmdSetRelAdd>
 80075b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80075b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d001      	beq.n	80075be <SD_InitCard+0xae>
    {
      return errorstate;
 80075ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075bc:	e072      	b.n	80076a4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075c2:	2b03      	cmp	r3, #3
 80075c4:	d036      	beq.n	8007634 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80075c6:	89fb      	ldrh	r3, [r7, #14]
 80075c8:	461a      	mov	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075d6:	041b      	lsls	r3, r3, #16
 80075d8:	4619      	mov	r1, r3
 80075da:	4610      	mov	r0, r2
 80075dc:	f002 ff5d 	bl	800a49a <SDMMC_CmdSendCSD>
 80075e0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80075e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d001      	beq.n	80075ec <SD_InitCard+0xdc>
    {
      return errorstate;
 80075e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075ea:	e05b      	b.n	80076a4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2100      	movs	r1, #0
 80075f2:	4618      	mov	r0, r3
 80075f4:	f002 fd3f 	bl	800a076 <SDMMC_GetResponse>
 80075f8:	4602      	mov	r2, r0
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2104      	movs	r1, #4
 8007604:	4618      	mov	r0, r3
 8007606:	f002 fd36 	bl	800a076 <SDMMC_GetResponse>
 800760a:	4602      	mov	r2, r0
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2108      	movs	r1, #8
 8007616:	4618      	mov	r0, r3
 8007618:	f002 fd2d 	bl	800a076 <SDMMC_GetResponse>
 800761c:	4602      	mov	r2, r0
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	210c      	movs	r1, #12
 8007628:	4618      	mov	r0, r3
 800762a:	f002 fd24 	bl	800a076 <SDMMC_GetResponse>
 800762e:	4602      	mov	r2, r0
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2104      	movs	r1, #4
 800763a:	4618      	mov	r0, r3
 800763c:	f002 fd1b 	bl	800a076 <SDMMC_GetResponse>
 8007640:	4603      	mov	r3, r0
 8007642:	0d1a      	lsrs	r2, r3, #20
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007648:	f107 0310 	add.w	r3, r7, #16
 800764c:	4619      	mov	r1, r3
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7ff fcd4 	bl	8006ffc <HAL_SD_GetCardCSD>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d002      	beq.n	8007660 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800765a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800765e:	e021      	b.n	80076a4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6819      	ldr	r1, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007668:	041b      	lsls	r3, r3, #16
 800766a:	2200      	movs	r2, #0
 800766c:	461c      	mov	r4, r3
 800766e:	4615      	mov	r5, r2
 8007670:	4622      	mov	r2, r4
 8007672:	462b      	mov	r3, r5
 8007674:	4608      	mov	r0, r1
 8007676:	f002 fe09 	bl	800a28c <SDMMC_CmdSelDesel>
 800767a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800767c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800767e:	2b00      	cmp	r3, #0
 8007680:	d001      	beq.n	8007686 <SD_InitCard+0x176>
  {
    return errorstate;
 8007682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007684:	e00e      	b.n	80076a4 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681d      	ldr	r5, [r3, #0]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	466c      	mov	r4, sp
 800768e:	f103 0210 	add.w	r2, r3, #16
 8007692:	ca07      	ldmia	r2, {r0, r1, r2}
 8007694:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007698:	3304      	adds	r3, #4
 800769a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800769c:	4628      	mov	r0, r5
 800769e:	f002 fc4d 	bl	8009f3c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3740      	adds	r7, #64	@ 0x40
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bdb0      	pop	{r4, r5, r7, pc}

080076ac <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076b4:	2300      	movs	r3, #0
 80076b6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80076b8:	2300      	movs	r3, #0
 80076ba:	617b      	str	r3, [r7, #20]
 80076bc:	2300      	movs	r3, #0
 80076be:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4618      	mov	r0, r3
 80076c6:	f002 fe04 	bl	800a2d2 <SDMMC_CmdGoIdleState>
 80076ca:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	e072      	b.n	80077bc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4618      	mov	r0, r3
 80076dc:	f002 fe17 	bl	800a30e <SDMMC_CmdOperCond>
 80076e0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00d      	beq.n	8007704 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f002 fded 	bl	800a2d2 <SDMMC_CmdGoIdleState>
 80076f8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d004      	beq.n	800770a <SD_PowerON+0x5e>
    {
      return errorstate;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	e05b      	b.n	80077bc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800770e:	2b01      	cmp	r3, #1
 8007710:	d137      	bne.n	8007782 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2100      	movs	r1, #0
 8007718:	4618      	mov	r0, r3
 800771a:	f002 fe17 	bl	800a34c <SDMMC_CmdAppCommand>
 800771e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d02d      	beq.n	8007782 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007726:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800772a:	e047      	b.n	80077bc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2100      	movs	r1, #0
 8007732:	4618      	mov	r0, r3
 8007734:	f002 fe0a 	bl	800a34c <SDMMC_CmdAppCommand>
 8007738:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d001      	beq.n	8007744 <SD_PowerON+0x98>
    {
      return errorstate;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	e03b      	b.n	80077bc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	491e      	ldr	r1, [pc, #120]	@ (80077c4 <SD_PowerON+0x118>)
 800774a:	4618      	mov	r0, r3
 800774c:	f002 fe20 	bl	800a390 <SDMMC_CmdAppOperCommand>
 8007750:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d002      	beq.n	800775e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007758:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800775c:	e02e      	b.n	80077bc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2100      	movs	r1, #0
 8007764:	4618      	mov	r0, r3
 8007766:	f002 fc86 	bl	800a076 <SDMMC_GetResponse>
 800776a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	0fdb      	lsrs	r3, r3, #31
 8007770:	2b01      	cmp	r3, #1
 8007772:	d101      	bne.n	8007778 <SD_PowerON+0xcc>
 8007774:	2301      	movs	r3, #1
 8007776:	e000      	b.n	800777a <SD_PowerON+0xce>
 8007778:	2300      	movs	r3, #0
 800777a:	613b      	str	r3, [r7, #16]

    count++;
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	3301      	adds	r3, #1
 8007780:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007788:	4293      	cmp	r3, r2
 800778a:	d802      	bhi.n	8007792 <SD_PowerON+0xe6>
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d0cc      	beq.n	800772c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007798:	4293      	cmp	r3, r2
 800779a:	d902      	bls.n	80077a2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800779c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80077a0:	e00c      	b.n	80077bc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d003      	beq.n	80077b4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	645a      	str	r2, [r3, #68]	@ 0x44
 80077b2:	e002      	b.n	80077ba <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3718      	adds	r7, #24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	c1100000 	.word	0xc1100000

080077c8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d102      	bne.n	80077de <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80077d8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80077dc:	e018      	b.n	8007810 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077e6:	041b      	lsls	r3, r3, #16
 80077e8:	4619      	mov	r1, r3
 80077ea:	4610      	mov	r0, r2
 80077ec:	f002 fe95 	bl	800a51a <SDMMC_CmdSendStatus>
 80077f0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <SD_SendStatus+0x34>
  {
    return errorstate;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	e009      	b.n	8007810 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2100      	movs	r1, #0
 8007802:	4618      	mov	r0, r3
 8007804:	f002 fc37 	bl	800a076 <SDMMC_GetResponse>
 8007808:	4602      	mov	r2, r0
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b086      	sub	sp, #24
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007820:	2300      	movs	r3, #0
 8007822:	60fb      	str	r3, [r7, #12]
 8007824:	2300      	movs	r3, #0
 8007826:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2100      	movs	r1, #0
 800782e:	4618      	mov	r0, r3
 8007830:	f002 fc21 	bl	800a076 <SDMMC_GetResponse>
 8007834:	4603      	mov	r3, r0
 8007836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800783a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800783e:	d102      	bne.n	8007846 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007840:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007844:	e02f      	b.n	80078a6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007846:	f107 030c 	add.w	r3, r7, #12
 800784a:	4619      	mov	r1, r3
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f879 	bl	8007944 <SD_FindSCR>
 8007852:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d001      	beq.n	800785e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	e023      	b.n	80078a6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007864:	2b00      	cmp	r3, #0
 8007866:	d01c      	beq.n	80078a2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007870:	041b      	lsls	r3, r3, #16
 8007872:	4619      	mov	r1, r3
 8007874:	4610      	mov	r0, r2
 8007876:	f002 fd69 	bl	800a34c <SDMMC_CmdAppCommand>
 800787a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d001      	beq.n	8007886 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	e00f      	b.n	80078a6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2102      	movs	r1, #2
 800788c:	4618      	mov	r0, r3
 800788e:	f002 fda3 	bl	800a3d8 <SDMMC_CmdBusWidth>
 8007892:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d001      	beq.n	800789e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	e003      	b.n	80078a6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800789e:	2300      	movs	r3, #0
 80078a0:	e001      	b.n	80078a6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80078a2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3718      	adds	r7, #24
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b086      	sub	sp, #24
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80078b6:	2300      	movs	r3, #0
 80078b8:	60fb      	str	r3, [r7, #12]
 80078ba:	2300      	movs	r3, #0
 80078bc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2100      	movs	r1, #0
 80078c4:	4618      	mov	r0, r3
 80078c6:	f002 fbd6 	bl	800a076 <SDMMC_GetResponse>
 80078ca:	4603      	mov	r3, r0
 80078cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80078d4:	d102      	bne.n	80078dc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80078d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80078da:	e02f      	b.n	800793c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80078dc:	f107 030c 	add.w	r3, r7, #12
 80078e0:	4619      	mov	r1, r3
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f82e 	bl	8007944 <SD_FindSCR>
 80078e8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d001      	beq.n	80078f4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	e023      	b.n	800793c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d01c      	beq.n	8007938 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007906:	041b      	lsls	r3, r3, #16
 8007908:	4619      	mov	r1, r3
 800790a:	4610      	mov	r0, r2
 800790c:	f002 fd1e 	bl	800a34c <SDMMC_CmdAppCommand>
 8007910:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d001      	beq.n	800791c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	e00f      	b.n	800793c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2100      	movs	r1, #0
 8007922:	4618      	mov	r0, r3
 8007924:	f002 fd58 	bl	800a3d8 <SDMMC_CmdBusWidth>
 8007928:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d001      	beq.n	8007934 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	e003      	b.n	800793c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007934:	2300      	movs	r3, #0
 8007936:	e001      	b.n	800793c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007938:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800793c:	4618      	mov	r0, r3
 800793e:	3718      	adds	r7, #24
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007944:	b590      	push	{r4, r7, lr}
 8007946:	b08f      	sub	sp, #60	@ 0x3c
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800794e:	f7fb f959 	bl	8002c04 <HAL_GetTick>
 8007952:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8007954:	2300      	movs	r3, #0
 8007956:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007958:	2300      	movs	r3, #0
 800795a:	60bb      	str	r3, [r7, #8]
 800795c:	2300      	movs	r3, #0
 800795e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2108      	movs	r1, #8
 800796a:	4618      	mov	r0, r3
 800796c:	f002 fbc2 	bl	800a0f4 <SDMMC_CmdBlockLength>
 8007970:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007974:	2b00      	cmp	r3, #0
 8007976:	d001      	beq.n	800797c <SD_FindSCR+0x38>
  {
    return errorstate;
 8007978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800797a:	e0b2      	b.n	8007ae2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007984:	041b      	lsls	r3, r3, #16
 8007986:	4619      	mov	r1, r3
 8007988:	4610      	mov	r0, r2
 800798a:	f002 fcdf 	bl	800a34c <SDMMC_CmdAppCommand>
 800798e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <SD_FindSCR+0x56>
  {
    return errorstate;
 8007996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007998:	e0a3      	b.n	8007ae2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800799a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800799e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80079a0:	2308      	movs	r3, #8
 80079a2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80079a4:	2330      	movs	r3, #48	@ 0x30
 80079a6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80079a8:	2302      	movs	r3, #2
 80079aa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80079ac:	2300      	movs	r3, #0
 80079ae:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80079b0:	2301      	movs	r3, #1
 80079b2:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f107 0210 	add.w	r2, r7, #16
 80079bc:	4611      	mov	r1, r2
 80079be:	4618      	mov	r0, r3
 80079c0:	f002 fb6c 	bl	800a09c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4618      	mov	r0, r3
 80079ca:	f002 fd27 	bl	800a41c <SDMMC_CmdSendSCR>
 80079ce:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80079d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d02a      	beq.n	8007a2c <SD_FindSCR+0xe8>
  {
    return errorstate;
 80079d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d8:	e083      	b.n	8007ae2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00f      	beq.n	8007a08 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6819      	ldr	r1, [r3, #0]
 80079ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	f107 0208 	add.w	r2, r7, #8
 80079f4:	18d4      	adds	r4, r2, r3
 80079f6:	4608      	mov	r0, r1
 80079f8:	f002 facc 	bl	8009f94 <SDMMC_ReadFIFO>
 80079fc:	4603      	mov	r3, r0
 80079fe:	6023      	str	r3, [r4, #0]
      index++;
 8007a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a02:	3301      	adds	r3, #1
 8007a04:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a06:	e006      	b.n	8007a16 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d012      	beq.n	8007a3c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007a16:	f7fb f8f5 	bl	8002c04 <HAL_GetTick>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a24:	d102      	bne.n	8007a2c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007a26:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007a2a:	e05a      	b.n	8007ae2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a32:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d0cf      	beq.n	80079da <SD_FindSCR+0x96>
 8007a3a:	e000      	b.n	8007a3e <SD_FindSCR+0xfa>
      break;
 8007a3c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a44:	f003 0308 	and.w	r3, r3, #8
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d005      	beq.n	8007a58 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2208      	movs	r2, #8
 8007a52:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007a54:	2308      	movs	r3, #8
 8007a56:	e044      	b.n	8007ae2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a5e:	f003 0302 	and.w	r3, r3, #2
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d005      	beq.n	8007a72 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007a6e:	2302      	movs	r3, #2
 8007a70:	e037      	b.n	8007ae2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a78:	f003 0320 	and.w	r3, r3, #32
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d005      	beq.n	8007a8c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2220      	movs	r2, #32
 8007a86:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007a88:	2320      	movs	r3, #32
 8007a8a:	e02a      	b.n	8007ae2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007a94:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	061a      	lsls	r2, r3, #24
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	021b      	lsls	r3, r3, #8
 8007a9e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007aa2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	0a1b      	lsrs	r3, r3, #8
 8007aa8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007aac:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	0e1b      	lsrs	r3, r3, #24
 8007ab2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ab6:	601a      	str	r2, [r3, #0]
    scr++;
 8007ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aba:	3304      	adds	r3, #4
 8007abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	061a      	lsls	r2, r3, #24
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	021b      	lsls	r3, r3, #8
 8007ac6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007aca:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	0a1b      	lsrs	r3, r3, #8
 8007ad0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007ad4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	0e1b      	lsrs	r3, r3, #24
 8007ada:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ade:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	373c      	adds	r7, #60	@ 0x3c
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd90      	pop	{r4, r7, pc}

08007aea <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b084      	sub	sp, #16
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d101      	bne.n	8007afc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e09d      	b.n	8007c38 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d108      	bne.n	8007b16 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b0c:	d009      	beq.n	8007b22 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	61da      	str	r2, [r3, #28]
 8007b14:	e005      	b.n	8007b22 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d106      	bne.n	8007b42 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7fa fa8d 	bl	800205c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2202      	movs	r2, #2
 8007b46:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b58:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007b62:	d902      	bls.n	8007b6a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007b64:	2300      	movs	r3, #0
 8007b66:	60fb      	str	r3, [r7, #12]
 8007b68:	e002      	b.n	8007b70 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007b6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007b6e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007b78:	d007      	beq.n	8007b8a <HAL_SPI_Init+0xa0>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007b82:	d002      	beq.n	8007b8a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007b9a:	431a      	orrs	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	f003 0302 	and.w	r3, r3, #2
 8007ba4:	431a      	orrs	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	f003 0301 	and.w	r3, r3, #1
 8007bae:	431a      	orrs	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	699b      	ldr	r3, [r3, #24]
 8007bb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007bb8:	431a      	orrs	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	69db      	ldr	r3, [r3, #28]
 8007bbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007bc2:	431a      	orrs	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a1b      	ldr	r3, [r3, #32]
 8007bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bcc:	ea42 0103 	orr.w	r1, r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bd4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	430a      	orrs	r2, r1
 8007bde:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	0c1b      	lsrs	r3, r3, #16
 8007be6:	f003 0204 	and.w	r2, r3, #4
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bee:	f003 0310 	and.w	r3, r3, #16
 8007bf2:	431a      	orrs	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bf8:	f003 0308 	and.w	r3, r3, #8
 8007bfc:	431a      	orrs	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007c06:	ea42 0103 	orr.w	r1, r2, r3
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	430a      	orrs	r2, r1
 8007c16:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	69da      	ldr	r2, [r3, #28]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007c26:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b08a      	sub	sp, #40	@ 0x28
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	607a      	str	r2, [r7, #4]
 8007c4c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007c52:	2300      	movs	r3, #0
 8007c54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d101      	bne.n	8007c66 <HAL_SPI_TransmitReceive+0x26>
 8007c62:	2302      	movs	r3, #2
 8007c64:	e20a      	b.n	800807c <HAL_SPI_TransmitReceive+0x43c>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c6e:	f7fa ffc9 	bl	8002c04 <HAL_GetTick>
 8007c72:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007c7a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007c82:	887b      	ldrh	r3, [r7, #2]
 8007c84:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007c86:	887b      	ldrh	r3, [r7, #2]
 8007c88:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007c8a:	7efb      	ldrb	r3, [r7, #27]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d00e      	beq.n	8007cae <HAL_SPI_TransmitReceive+0x6e>
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c96:	d106      	bne.n	8007ca6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d102      	bne.n	8007ca6 <HAL_SPI_TransmitReceive+0x66>
 8007ca0:	7efb      	ldrb	r3, [r7, #27]
 8007ca2:	2b04      	cmp	r3, #4
 8007ca4:	d003      	beq.n	8007cae <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007ca6:	2302      	movs	r3, #2
 8007ca8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007cac:	e1e0      	b.n	8008070 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d005      	beq.n	8007cc0 <HAL_SPI_TransmitReceive+0x80>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d002      	beq.n	8007cc0 <HAL_SPI_TransmitReceive+0x80>
 8007cba:	887b      	ldrh	r3, [r7, #2]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d103      	bne.n	8007cc8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007cc6:	e1d3      	b.n	8008070 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	2b04      	cmp	r3, #4
 8007cd2:	d003      	beq.n	8007cdc <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2205      	movs	r2, #5
 8007cd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	887a      	ldrh	r2, [r7, #2]
 8007cec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	887a      	ldrh	r2, [r7, #2]
 8007cf4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	887a      	ldrh	r2, [r7, #2]
 8007d02:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	887a      	ldrh	r2, [r7, #2]
 8007d08:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2200      	movs	r2, #0
 8007d14:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007d1e:	d802      	bhi.n	8007d26 <HAL_SPI_TransmitReceive+0xe6>
 8007d20:	8a3b      	ldrh	r3, [r7, #16]
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d908      	bls.n	8007d38 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	685a      	ldr	r2, [r3, #4]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007d34:	605a      	str	r2, [r3, #4]
 8007d36:	e007      	b.n	8007d48 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	685a      	ldr	r2, [r3, #4]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007d46:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d52:	2b40      	cmp	r3, #64	@ 0x40
 8007d54:	d007      	beq.n	8007d66 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007d6e:	f240 8081 	bls.w	8007e74 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d002      	beq.n	8007d80 <HAL_SPI_TransmitReceive+0x140>
 8007d7a:	8a7b      	ldrh	r3, [r7, #18]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d16d      	bne.n	8007e5c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d84:	881a      	ldrh	r2, [r3, #0]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d90:	1c9a      	adds	r2, r3, #2
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007da4:	e05a      	b.n	8007e5c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	f003 0302 	and.w	r3, r3, #2
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d11b      	bne.n	8007dec <HAL_SPI_TransmitReceive+0x1ac>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d016      	beq.n	8007dec <HAL_SPI_TransmitReceive+0x1ac>
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d113      	bne.n	8007dec <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc8:	881a      	ldrh	r2, [r3, #0]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd4:	1c9a      	adds	r2, r3, #2
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	3b01      	subs	r3, #1
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007de8:	2300      	movs	r3, #0
 8007dea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	f003 0301 	and.w	r3, r3, #1
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d11c      	bne.n	8007e34 <HAL_SPI_TransmitReceive+0x1f4>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d016      	beq.n	8007e34 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68da      	ldr	r2, [r3, #12]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e10:	b292      	uxth	r2, r2
 8007e12:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e18:	1c9a      	adds	r2, r3, #2
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	3b01      	subs	r3, #1
 8007e28:	b29a      	uxth	r2, r3
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e30:	2301      	movs	r3, #1
 8007e32:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007e34:	f7fa fee6 	bl	8002c04 <HAL_GetTick>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	1ad3      	subs	r3, r2, r3
 8007e3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d80b      	bhi.n	8007e5c <HAL_SPI_TransmitReceive+0x21c>
 8007e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e4a:	d007      	beq.n	8007e5c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007e5a:	e109      	b.n	8008070 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d19f      	bne.n	8007da6 <HAL_SPI_TransmitReceive+0x166>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d199      	bne.n	8007da6 <HAL_SPI_TransmitReceive+0x166>
 8007e72:	e0e3      	b.n	800803c <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d003      	beq.n	8007e84 <HAL_SPI_TransmitReceive+0x244>
 8007e7c:	8a7b      	ldrh	r3, [r7, #18]
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	f040 80cf 	bne.w	8008022 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d912      	bls.n	8007eb4 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e92:	881a      	ldrh	r2, [r3, #0]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e9e:	1c9a      	adds	r2, r3, #2
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	3b02      	subs	r3, #2
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007eb2:	e0b6      	b.n	8008022 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	330c      	adds	r3, #12
 8007ebe:	7812      	ldrb	r2, [r2, #0]
 8007ec0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ec6:	1c5a      	adds	r2, r3, #1
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007eda:	e0a2      	b.n	8008022 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	f003 0302 	and.w	r3, r3, #2
 8007ee6:	2b02      	cmp	r3, #2
 8007ee8:	d134      	bne.n	8007f54 <HAL_SPI_TransmitReceive+0x314>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d02f      	beq.n	8007f54 <HAL_SPI_TransmitReceive+0x314>
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d12c      	bne.n	8007f54 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d912      	bls.n	8007f2a <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f08:	881a      	ldrh	r2, [r3, #0]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f14:	1c9a      	adds	r2, r3, #2
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	3b02      	subs	r3, #2
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007f28:	e012      	b.n	8007f50 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	330c      	adds	r3, #12
 8007f34:	7812      	ldrb	r2, [r2, #0]
 8007f36:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f3c:	1c5a      	adds	r2, r3, #1
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	b29a      	uxth	r2, r3
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f50:	2300      	movs	r3, #0
 8007f52:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	f003 0301 	and.w	r3, r3, #1
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d148      	bne.n	8007ff4 <HAL_SPI_TransmitReceive+0x3b4>
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d042      	beq.n	8007ff4 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d923      	bls.n	8007fc2 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	68da      	ldr	r2, [r3, #12]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f84:	b292      	uxth	r2, r2
 8007f86:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f8c:	1c9a      	adds	r2, r3, #2
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	3b02      	subs	r3, #2
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d81f      	bhi.n	8007ff0 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	685a      	ldr	r2, [r3, #4]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007fbe:	605a      	str	r2, [r3, #4]
 8007fc0:	e016      	b.n	8007ff0 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f103 020c 	add.w	r2, r3, #12
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fce:	7812      	ldrb	r2, [r2, #0]
 8007fd0:	b2d2      	uxtb	r2, r2
 8007fd2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd8:	1c5a      	adds	r2, r3, #1
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007ff4:	f7fa fe06 	bl	8002c04 <HAL_GetTick>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008000:	429a      	cmp	r2, r3
 8008002:	d803      	bhi.n	800800c <HAL_SPI_TransmitReceive+0x3cc>
 8008004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008006:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800800a:	d102      	bne.n	8008012 <HAL_SPI_TransmitReceive+0x3d2>
 800800c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800800e:	2b00      	cmp	r3, #0
 8008010:	d107      	bne.n	8008022 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8008012:	2303      	movs	r3, #3
 8008014:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8008020:	e026      	b.n	8008070 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008026:	b29b      	uxth	r3, r3
 8008028:	2b00      	cmp	r3, #0
 800802a:	f47f af57 	bne.w	8007edc <HAL_SPI_TransmitReceive+0x29c>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008034:	b29b      	uxth	r3, r3
 8008036:	2b00      	cmp	r3, #0
 8008038:	f47f af50 	bne.w	8007edc <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800803c:	69fa      	ldr	r2, [r7, #28]
 800803e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f000 f93d 	bl	80082c0 <SPI_EndRxTxTransaction>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d005      	beq.n	8008058 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2220      	movs	r2, #32
 8008056:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800805c:	2b00      	cmp	r3, #0
 800805e:	d003      	beq.n	8008068 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008066:	e003      	b.n	8008070 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2200      	movs	r2, #0
 8008074:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008078:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800807c:	4618      	mov	r0, r3
 800807e:	3728      	adds	r7, #40	@ 0x28
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b088      	sub	sp, #32
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	603b      	str	r3, [r7, #0]
 8008090:	4613      	mov	r3, r2
 8008092:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008094:	f7fa fdb6 	bl	8002c04 <HAL_GetTick>
 8008098:	4602      	mov	r2, r0
 800809a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800809c:	1a9b      	subs	r3, r3, r2
 800809e:	683a      	ldr	r2, [r7, #0]
 80080a0:	4413      	add	r3, r2
 80080a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80080a4:	f7fa fdae 	bl	8002c04 <HAL_GetTick>
 80080a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80080aa:	4b39      	ldr	r3, [pc, #228]	@ (8008190 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	015b      	lsls	r3, r3, #5
 80080b0:	0d1b      	lsrs	r3, r3, #20
 80080b2:	69fa      	ldr	r2, [r7, #28]
 80080b4:	fb02 f303 	mul.w	r3, r2, r3
 80080b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080ba:	e054      	b.n	8008166 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080c2:	d050      	beq.n	8008166 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80080c4:	f7fa fd9e 	bl	8002c04 <HAL_GetTick>
 80080c8:	4602      	mov	r2, r0
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	69fa      	ldr	r2, [r7, #28]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d902      	bls.n	80080da <SPI_WaitFlagStateUntilTimeout+0x56>
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d13d      	bne.n	8008156 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	685a      	ldr	r2, [r3, #4]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80080e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80080f2:	d111      	bne.n	8008118 <SPI_WaitFlagStateUntilTimeout+0x94>
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080fc:	d004      	beq.n	8008108 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008106:	d107      	bne.n	8008118 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008116:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800811c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008120:	d10f      	bne.n	8008142 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008130:	601a      	str	r2, [r3, #0]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008140:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e017      	b.n	8008186 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d101      	bne.n	8008160 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800815c:	2300      	movs	r3, #0
 800815e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	3b01      	subs	r3, #1
 8008164:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	689a      	ldr	r2, [r3, #8]
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	4013      	ands	r3, r2
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	429a      	cmp	r2, r3
 8008174:	bf0c      	ite	eq
 8008176:	2301      	moveq	r3, #1
 8008178:	2300      	movne	r3, #0
 800817a:	b2db      	uxtb	r3, r3
 800817c:	461a      	mov	r2, r3
 800817e:	79fb      	ldrb	r3, [r7, #7]
 8008180:	429a      	cmp	r2, r3
 8008182:	d19b      	bne.n	80080bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3720      	adds	r7, #32
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	20000000 	.word	0x20000000

08008194 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b08a      	sub	sp, #40	@ 0x28
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	607a      	str	r2, [r7, #4]
 80081a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80081a2:	2300      	movs	r3, #0
 80081a4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80081a6:	f7fa fd2d 	bl	8002c04 <HAL_GetTick>
 80081aa:	4602      	mov	r2, r0
 80081ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ae:	1a9b      	subs	r3, r3, r2
 80081b0:	683a      	ldr	r2, [r7, #0]
 80081b2:	4413      	add	r3, r2
 80081b4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80081b6:	f7fa fd25 	bl	8002c04 <HAL_GetTick>
 80081ba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	330c      	adds	r3, #12
 80081c2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80081c4:	4b3d      	ldr	r3, [pc, #244]	@ (80082bc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	4613      	mov	r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4413      	add	r3, r2
 80081ce:	00da      	lsls	r2, r3, #3
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	0d1b      	lsrs	r3, r3, #20
 80081d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081d6:	fb02 f303 	mul.w	r3, r2, r3
 80081da:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80081dc:	e060      	b.n	80082a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80081e4:	d107      	bne.n	80081f6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d104      	bne.n	80081f6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80081f4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081fc:	d050      	beq.n	80082a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80081fe:	f7fa fd01 	bl	8002c04 <HAL_GetTick>
 8008202:	4602      	mov	r2, r0
 8008204:	6a3b      	ldr	r3, [r7, #32]
 8008206:	1ad3      	subs	r3, r2, r3
 8008208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800820a:	429a      	cmp	r2, r3
 800820c:	d902      	bls.n	8008214 <SPI_WaitFifoStateUntilTimeout+0x80>
 800820e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008210:	2b00      	cmp	r3, #0
 8008212:	d13d      	bne.n	8008290 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	685a      	ldr	r2, [r3, #4]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008222:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800822c:	d111      	bne.n	8008252 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008236:	d004      	beq.n	8008242 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008240:	d107      	bne.n	8008252 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008250:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008256:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800825a:	d10f      	bne.n	800827c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800826a:	601a      	str	r2, [r3, #0]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800827a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800828c:	2303      	movs	r3, #3
 800828e:	e010      	b.n	80082b2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d101      	bne.n	800829a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008296:	2300      	movs	r3, #0
 8008298:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	3b01      	subs	r3, #1
 800829e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	689a      	ldr	r2, [r3, #8]
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	4013      	ands	r3, r2
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d196      	bne.n	80081de <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3728      	adds	r7, #40	@ 0x28
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	20000000 	.word	0x20000000

080082c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b088      	sub	sp, #32
 80082c4:	af02      	add	r7, sp, #8
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	9300      	str	r3, [sp, #0]
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f7ff ff5b 	bl	8008194 <SPI_WaitFifoStateUntilTimeout>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d007      	beq.n	80082f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082e8:	f043 0220 	orr.w	r2, r3, #32
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80082f0:	2303      	movs	r3, #3
 80082f2:	e046      	b.n	8008382 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80082f4:	4b25      	ldr	r3, [pc, #148]	@ (800838c <SPI_EndRxTxTransaction+0xcc>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a25      	ldr	r2, [pc, #148]	@ (8008390 <SPI_EndRxTxTransaction+0xd0>)
 80082fa:	fba2 2303 	umull	r2, r3, r2, r3
 80082fe:	0d5b      	lsrs	r3, r3, #21
 8008300:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008304:	fb02 f303 	mul.w	r3, r2, r3
 8008308:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008312:	d112      	bne.n	800833a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	2200      	movs	r2, #0
 800831c:	2180      	movs	r1, #128	@ 0x80
 800831e:	68f8      	ldr	r0, [r7, #12]
 8008320:	f7ff feb0 	bl	8008084 <SPI_WaitFlagStateUntilTimeout>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d016      	beq.n	8008358 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800832e:	f043 0220 	orr.w	r2, r3, #32
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e023      	b.n	8008382 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d00a      	beq.n	8008356 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	3b01      	subs	r3, #1
 8008344:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008350:	2b80      	cmp	r3, #128	@ 0x80
 8008352:	d0f2      	beq.n	800833a <SPI_EndRxTxTransaction+0x7a>
 8008354:	e000      	b.n	8008358 <SPI_EndRxTxTransaction+0x98>
        break;
 8008356:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	9300      	str	r3, [sp, #0]
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	2200      	movs	r2, #0
 8008360:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	f7ff ff15 	bl	8008194 <SPI_WaitFifoStateUntilTimeout>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d007      	beq.n	8008380 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008374:	f043 0220 	orr.w	r2, r3, #32
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800837c:	2303      	movs	r3, #3
 800837e:	e000      	b.n	8008382 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	4618      	mov	r0, r3
 8008384:	3718      	adds	r7, #24
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	20000000 	.word	0x20000000
 8008390:	165e9f81 	.word	0x165e9f81

08008394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d101      	bne.n	80083a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e049      	b.n	800843a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d106      	bne.n	80083c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f7f9 ff36 	bl	800222c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2202      	movs	r2, #2
 80083c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	3304      	adds	r3, #4
 80083d0:	4619      	mov	r1, r3
 80083d2:	4610      	mov	r0, r2
 80083d4:	f000 fa6a 	bl	80088ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2201      	movs	r2, #1
 80083e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b082      	sub	sp, #8
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d101      	bne.n	8008454 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e049      	b.n	80084e8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800845a:	b2db      	uxtb	r3, r3
 800845c:	2b00      	cmp	r3, #0
 800845e:	d106      	bne.n	800846e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f7f9 fe8b 	bl	8002184 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2202      	movs	r2, #2
 8008472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	3304      	adds	r3, #4
 800847e:	4619      	mov	r1, r3
 8008480:	4610      	mov	r0, r2
 8008482:	f000 fa13 	bl	80088ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2201      	movs	r2, #1
 8008492:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2201      	movs	r2, #1
 800849a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2201      	movs	r2, #1
 80084a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2201      	movs	r2, #1
 80084aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2201      	movs	r2, #1
 80084b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2201      	movs	r2, #1
 80084ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2201      	movs	r2, #1
 80084c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2201      	movs	r2, #1
 80084ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2201      	movs	r2, #1
 80084d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2201      	movs	r2, #1
 80084da:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2201      	movs	r2, #1
 80084e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80084e6:	2300      	movs	r3, #0
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3708      	adds	r7, #8
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b086      	sub	sp, #24
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084fc:	2300      	movs	r3, #0
 80084fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008506:	2b01      	cmp	r3, #1
 8008508:	d101      	bne.n	800850e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800850a:	2302      	movs	r3, #2
 800850c:	e0ff      	b.n	800870e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2201      	movs	r2, #1
 8008512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2b14      	cmp	r3, #20
 800851a:	f200 80f0 	bhi.w	80086fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800851e:	a201      	add	r2, pc, #4	@ (adr r2, 8008524 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008524:	08008579 	.word	0x08008579
 8008528:	080086ff 	.word	0x080086ff
 800852c:	080086ff 	.word	0x080086ff
 8008530:	080086ff 	.word	0x080086ff
 8008534:	080085b9 	.word	0x080085b9
 8008538:	080086ff 	.word	0x080086ff
 800853c:	080086ff 	.word	0x080086ff
 8008540:	080086ff 	.word	0x080086ff
 8008544:	080085fb 	.word	0x080085fb
 8008548:	080086ff 	.word	0x080086ff
 800854c:	080086ff 	.word	0x080086ff
 8008550:	080086ff 	.word	0x080086ff
 8008554:	0800863b 	.word	0x0800863b
 8008558:	080086ff 	.word	0x080086ff
 800855c:	080086ff 	.word	0x080086ff
 8008560:	080086ff 	.word	0x080086ff
 8008564:	0800867d 	.word	0x0800867d
 8008568:	080086ff 	.word	0x080086ff
 800856c:	080086ff 	.word	0x080086ff
 8008570:	080086ff 	.word	0x080086ff
 8008574:	080086bd 	.word	0x080086bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68b9      	ldr	r1, [r7, #8]
 800857e:	4618      	mov	r0, r3
 8008580:	f000 fa40 	bl	8008a04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	699a      	ldr	r2, [r3, #24]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f042 0208 	orr.w	r2, r2, #8
 8008592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	699a      	ldr	r2, [r3, #24]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f022 0204 	bic.w	r2, r2, #4
 80085a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6999      	ldr	r1, [r3, #24]
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	691a      	ldr	r2, [r3, #16]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	430a      	orrs	r2, r1
 80085b4:	619a      	str	r2, [r3, #24]
      break;
 80085b6:	e0a5      	b.n	8008704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68b9      	ldr	r1, [r7, #8]
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 fa92 	bl	8008ae8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	699a      	ldr	r2, [r3, #24]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80085d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	699a      	ldr	r2, [r3, #24]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	6999      	ldr	r1, [r3, #24]
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	021a      	lsls	r2, r3, #8
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	430a      	orrs	r2, r1
 80085f6:	619a      	str	r2, [r3, #24]
      break;
 80085f8:	e084      	b.n	8008704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68b9      	ldr	r1, [r7, #8]
 8008600:	4618      	mov	r0, r3
 8008602:	f000 fae9 	bl	8008bd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	69da      	ldr	r2, [r3, #28]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f042 0208 	orr.w	r2, r2, #8
 8008614:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	69da      	ldr	r2, [r3, #28]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f022 0204 	bic.w	r2, r2, #4
 8008624:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	69d9      	ldr	r1, [r3, #28]
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	691a      	ldr	r2, [r3, #16]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	430a      	orrs	r2, r1
 8008636:	61da      	str	r2, [r3, #28]
      break;
 8008638:	e064      	b.n	8008704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68b9      	ldr	r1, [r7, #8]
 8008640:	4618      	mov	r0, r3
 8008642:	f000 fb3f 	bl	8008cc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	69da      	ldr	r2, [r3, #28]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008654:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	69da      	ldr	r2, [r3, #28]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008664:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	69d9      	ldr	r1, [r3, #28]
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	021a      	lsls	r2, r3, #8
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	430a      	orrs	r2, r1
 8008678:	61da      	str	r2, [r3, #28]
      break;
 800867a:	e043      	b.n	8008704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68b9      	ldr	r1, [r7, #8]
 8008682:	4618      	mov	r0, r3
 8008684:	f000 fb76 	bl	8008d74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f042 0208 	orr.w	r2, r2, #8
 8008696:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f022 0204 	bic.w	r2, r2, #4
 80086a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	691a      	ldr	r2, [r3, #16]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	430a      	orrs	r2, r1
 80086b8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80086ba:	e023      	b.n	8008704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68b9      	ldr	r1, [r7, #8]
 80086c2:	4618      	mov	r0, r3
 80086c4:	f000 fba8 	bl	8008e18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80086d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	021a      	lsls	r2, r3, #8
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	430a      	orrs	r2, r1
 80086fa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80086fc:	e002      	b.n	8008704 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	75fb      	strb	r3, [r7, #23]
      break;
 8008702:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800870c:	7dfb      	ldrb	r3, [r7, #23]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3718      	adds	r7, #24
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop

08008718 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800872c:	2b01      	cmp	r3, #1
 800872e:	d101      	bne.n	8008734 <HAL_TIM_ConfigClockSource+0x1c>
 8008730:	2302      	movs	r3, #2
 8008732:	e0b4      	b.n	800889e <HAL_TIM_ConfigClockSource+0x186>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2202      	movs	r2, #2
 8008740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800874c:	68ba      	ldr	r2, [r7, #8]
 800874e:	4b56      	ldr	r3, [pc, #344]	@ (80088a8 <HAL_TIM_ConfigClockSource+0x190>)
 8008750:	4013      	ands	r3, r2
 8008752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800875a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800876c:	d03e      	beq.n	80087ec <HAL_TIM_ConfigClockSource+0xd4>
 800876e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008772:	f200 8087 	bhi.w	8008884 <HAL_TIM_ConfigClockSource+0x16c>
 8008776:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800877a:	f000 8086 	beq.w	800888a <HAL_TIM_ConfigClockSource+0x172>
 800877e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008782:	d87f      	bhi.n	8008884 <HAL_TIM_ConfigClockSource+0x16c>
 8008784:	2b70      	cmp	r3, #112	@ 0x70
 8008786:	d01a      	beq.n	80087be <HAL_TIM_ConfigClockSource+0xa6>
 8008788:	2b70      	cmp	r3, #112	@ 0x70
 800878a:	d87b      	bhi.n	8008884 <HAL_TIM_ConfigClockSource+0x16c>
 800878c:	2b60      	cmp	r3, #96	@ 0x60
 800878e:	d050      	beq.n	8008832 <HAL_TIM_ConfigClockSource+0x11a>
 8008790:	2b60      	cmp	r3, #96	@ 0x60
 8008792:	d877      	bhi.n	8008884 <HAL_TIM_ConfigClockSource+0x16c>
 8008794:	2b50      	cmp	r3, #80	@ 0x50
 8008796:	d03c      	beq.n	8008812 <HAL_TIM_ConfigClockSource+0xfa>
 8008798:	2b50      	cmp	r3, #80	@ 0x50
 800879a:	d873      	bhi.n	8008884 <HAL_TIM_ConfigClockSource+0x16c>
 800879c:	2b40      	cmp	r3, #64	@ 0x40
 800879e:	d058      	beq.n	8008852 <HAL_TIM_ConfigClockSource+0x13a>
 80087a0:	2b40      	cmp	r3, #64	@ 0x40
 80087a2:	d86f      	bhi.n	8008884 <HAL_TIM_ConfigClockSource+0x16c>
 80087a4:	2b30      	cmp	r3, #48	@ 0x30
 80087a6:	d064      	beq.n	8008872 <HAL_TIM_ConfigClockSource+0x15a>
 80087a8:	2b30      	cmp	r3, #48	@ 0x30
 80087aa:	d86b      	bhi.n	8008884 <HAL_TIM_ConfigClockSource+0x16c>
 80087ac:	2b20      	cmp	r3, #32
 80087ae:	d060      	beq.n	8008872 <HAL_TIM_ConfigClockSource+0x15a>
 80087b0:	2b20      	cmp	r3, #32
 80087b2:	d867      	bhi.n	8008884 <HAL_TIM_ConfigClockSource+0x16c>
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d05c      	beq.n	8008872 <HAL_TIM_ConfigClockSource+0x15a>
 80087b8:	2b10      	cmp	r3, #16
 80087ba:	d05a      	beq.n	8008872 <HAL_TIM_ConfigClockSource+0x15a>
 80087bc:	e062      	b.n	8008884 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80087ce:	f000 fbf1 	bl	8008fb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80087e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	68ba      	ldr	r2, [r7, #8]
 80087e8:	609a      	str	r2, [r3, #8]
      break;
 80087ea:	e04f      	b.n	800888c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80087fc:	f000 fbda 	bl	8008fb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	689a      	ldr	r2, [r3, #8]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800880e:	609a      	str	r2, [r3, #8]
      break;
 8008810:	e03c      	b.n	800888c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800881e:	461a      	mov	r2, r3
 8008820:	f000 fb4e 	bl	8008ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2150      	movs	r1, #80	@ 0x50
 800882a:	4618      	mov	r0, r3
 800882c:	f000 fba7 	bl	8008f7e <TIM_ITRx_SetConfig>
      break;
 8008830:	e02c      	b.n	800888c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800883e:	461a      	mov	r2, r3
 8008840:	f000 fb6d 	bl	8008f1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2160      	movs	r1, #96	@ 0x60
 800884a:	4618      	mov	r0, r3
 800884c:	f000 fb97 	bl	8008f7e <TIM_ITRx_SetConfig>
      break;
 8008850:	e01c      	b.n	800888c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800885e:	461a      	mov	r2, r3
 8008860:	f000 fb2e 	bl	8008ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2140      	movs	r1, #64	@ 0x40
 800886a:	4618      	mov	r0, r3
 800886c:	f000 fb87 	bl	8008f7e <TIM_ITRx_SetConfig>
      break;
 8008870:	e00c      	b.n	800888c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4619      	mov	r1, r3
 800887c:	4610      	mov	r0, r2
 800887e:	f000 fb7e 	bl	8008f7e <TIM_ITRx_SetConfig>
      break;
 8008882:	e003      	b.n	800888c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	73fb      	strb	r3, [r7, #15]
      break;
 8008888:	e000      	b.n	800888c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800888a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800889c:	7bfb      	ldrb	r3, [r7, #15]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	fffeff88 	.word	0xfffeff88

080088ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a46      	ldr	r2, [pc, #280]	@ (80089d8 <TIM_Base_SetConfig+0x12c>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d013      	beq.n	80088ec <TIM_Base_SetConfig+0x40>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088ca:	d00f      	beq.n	80088ec <TIM_Base_SetConfig+0x40>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4a43      	ldr	r2, [pc, #268]	@ (80089dc <TIM_Base_SetConfig+0x130>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d00b      	beq.n	80088ec <TIM_Base_SetConfig+0x40>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4a42      	ldr	r2, [pc, #264]	@ (80089e0 <TIM_Base_SetConfig+0x134>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d007      	beq.n	80088ec <TIM_Base_SetConfig+0x40>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4a41      	ldr	r2, [pc, #260]	@ (80089e4 <TIM_Base_SetConfig+0x138>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d003      	beq.n	80088ec <TIM_Base_SetConfig+0x40>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	4a40      	ldr	r2, [pc, #256]	@ (80089e8 <TIM_Base_SetConfig+0x13c>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d108      	bne.n	80088fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4a35      	ldr	r2, [pc, #212]	@ (80089d8 <TIM_Base_SetConfig+0x12c>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d02b      	beq.n	800895e <TIM_Base_SetConfig+0xb2>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800890c:	d027      	beq.n	800895e <TIM_Base_SetConfig+0xb2>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4a32      	ldr	r2, [pc, #200]	@ (80089dc <TIM_Base_SetConfig+0x130>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d023      	beq.n	800895e <TIM_Base_SetConfig+0xb2>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4a31      	ldr	r2, [pc, #196]	@ (80089e0 <TIM_Base_SetConfig+0x134>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d01f      	beq.n	800895e <TIM_Base_SetConfig+0xb2>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4a30      	ldr	r2, [pc, #192]	@ (80089e4 <TIM_Base_SetConfig+0x138>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d01b      	beq.n	800895e <TIM_Base_SetConfig+0xb2>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4a2f      	ldr	r2, [pc, #188]	@ (80089e8 <TIM_Base_SetConfig+0x13c>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d017      	beq.n	800895e <TIM_Base_SetConfig+0xb2>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a2e      	ldr	r2, [pc, #184]	@ (80089ec <TIM_Base_SetConfig+0x140>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d013      	beq.n	800895e <TIM_Base_SetConfig+0xb2>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a2d      	ldr	r2, [pc, #180]	@ (80089f0 <TIM_Base_SetConfig+0x144>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d00f      	beq.n	800895e <TIM_Base_SetConfig+0xb2>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a2c      	ldr	r2, [pc, #176]	@ (80089f4 <TIM_Base_SetConfig+0x148>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d00b      	beq.n	800895e <TIM_Base_SetConfig+0xb2>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a2b      	ldr	r2, [pc, #172]	@ (80089f8 <TIM_Base_SetConfig+0x14c>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d007      	beq.n	800895e <TIM_Base_SetConfig+0xb2>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4a2a      	ldr	r2, [pc, #168]	@ (80089fc <TIM_Base_SetConfig+0x150>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d003      	beq.n	800895e <TIM_Base_SetConfig+0xb2>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a29      	ldr	r2, [pc, #164]	@ (8008a00 <TIM_Base_SetConfig+0x154>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d108      	bne.n	8008970 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	4313      	orrs	r3, r2
 800896e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	695b      	ldr	r3, [r3, #20]
 800897a:	4313      	orrs	r3, r2
 800897c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	689a      	ldr	r2, [r3, #8]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a10      	ldr	r2, [pc, #64]	@ (80089d8 <TIM_Base_SetConfig+0x12c>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d003      	beq.n	80089a4 <TIM_Base_SetConfig+0xf8>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a12      	ldr	r2, [pc, #72]	@ (80089e8 <TIM_Base_SetConfig+0x13c>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d103      	bne.n	80089ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	691a      	ldr	r2, [r3, #16]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	f003 0301 	and.w	r3, r3, #1
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d105      	bne.n	80089ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	f023 0201 	bic.w	r2, r3, #1
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	611a      	str	r2, [r3, #16]
  }
}
 80089ca:	bf00      	nop
 80089cc:	3714      	adds	r7, #20
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	40010000 	.word	0x40010000
 80089dc:	40000400 	.word	0x40000400
 80089e0:	40000800 	.word	0x40000800
 80089e4:	40000c00 	.word	0x40000c00
 80089e8:	40010400 	.word	0x40010400
 80089ec:	40014000 	.word	0x40014000
 80089f0:	40014400 	.word	0x40014400
 80089f4:	40014800 	.word	0x40014800
 80089f8:	40001800 	.word	0x40001800
 80089fc:	40001c00 	.word	0x40001c00
 8008a00:	40002000 	.word	0x40002000

08008a04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b087      	sub	sp, #28
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a1b      	ldr	r3, [r3, #32]
 8008a12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6a1b      	ldr	r3, [r3, #32]
 8008a18:	f023 0201 	bic.w	r2, r3, #1
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	699b      	ldr	r3, [r3, #24]
 8008a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	4b2b      	ldr	r3, [pc, #172]	@ (8008adc <TIM_OC1_SetConfig+0xd8>)
 8008a30:	4013      	ands	r3, r2
 8008a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f023 0303 	bic.w	r3, r3, #3
 8008a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	f023 0302 	bic.w	r3, r3, #2
 8008a4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	697a      	ldr	r2, [r7, #20]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a21      	ldr	r2, [pc, #132]	@ (8008ae0 <TIM_OC1_SetConfig+0xdc>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d003      	beq.n	8008a68 <TIM_OC1_SetConfig+0x64>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a20      	ldr	r2, [pc, #128]	@ (8008ae4 <TIM_OC1_SetConfig+0xe0>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d10c      	bne.n	8008a82 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	f023 0308 	bic.w	r3, r3, #8
 8008a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	697a      	ldr	r2, [r7, #20]
 8008a76:	4313      	orrs	r3, r2
 8008a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	f023 0304 	bic.w	r3, r3, #4
 8008a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4a16      	ldr	r2, [pc, #88]	@ (8008ae0 <TIM_OC1_SetConfig+0xdc>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d003      	beq.n	8008a92 <TIM_OC1_SetConfig+0x8e>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4a15      	ldr	r2, [pc, #84]	@ (8008ae4 <TIM_OC1_SetConfig+0xe0>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d111      	bne.n	8008ab6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	695b      	ldr	r3, [r3, #20]
 8008aa6:	693a      	ldr	r2, [r7, #16]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	699b      	ldr	r3, [r3, #24]
 8008ab0:	693a      	ldr	r2, [r7, #16]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	693a      	ldr	r2, [r7, #16]
 8008aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	685a      	ldr	r2, [r3, #4]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	697a      	ldr	r2, [r7, #20]
 8008ace:	621a      	str	r2, [r3, #32]
}
 8008ad0:	bf00      	nop
 8008ad2:	371c      	adds	r7, #28
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr
 8008adc:	fffeff8f 	.word	0xfffeff8f
 8008ae0:	40010000 	.word	0x40010000
 8008ae4:	40010400 	.word	0x40010400

08008ae8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b087      	sub	sp, #28
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a1b      	ldr	r3, [r3, #32]
 8008af6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a1b      	ldr	r3, [r3, #32]
 8008afc:	f023 0210 	bic.w	r2, r3, #16
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	699b      	ldr	r3, [r3, #24]
 8008b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	4b2e      	ldr	r3, [pc, #184]	@ (8008bcc <TIM_OC2_SetConfig+0xe4>)
 8008b14:	4013      	ands	r3, r2
 8008b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	021b      	lsls	r3, r3, #8
 8008b26:	68fa      	ldr	r2, [r7, #12]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	f023 0320 	bic.w	r3, r3, #32
 8008b32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	011b      	lsls	r3, r3, #4
 8008b3a:	697a      	ldr	r2, [r7, #20]
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4a23      	ldr	r2, [pc, #140]	@ (8008bd0 <TIM_OC2_SetConfig+0xe8>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d003      	beq.n	8008b50 <TIM_OC2_SetConfig+0x68>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a22      	ldr	r2, [pc, #136]	@ (8008bd4 <TIM_OC2_SetConfig+0xec>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d10d      	bne.n	8008b6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	011b      	lsls	r3, r3, #4
 8008b5e:	697a      	ldr	r2, [r7, #20]
 8008b60:	4313      	orrs	r3, r2
 8008b62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4a18      	ldr	r2, [pc, #96]	@ (8008bd0 <TIM_OC2_SetConfig+0xe8>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d003      	beq.n	8008b7c <TIM_OC2_SetConfig+0x94>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4a17      	ldr	r2, [pc, #92]	@ (8008bd4 <TIM_OC2_SetConfig+0xec>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d113      	bne.n	8008ba4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008b82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	695b      	ldr	r3, [r3, #20]
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	693a      	ldr	r2, [r7, #16]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	699b      	ldr	r3, [r3, #24]
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	693a      	ldr	r2, [r7, #16]
 8008ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	685a      	ldr	r2, [r3, #4]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	697a      	ldr	r2, [r7, #20]
 8008bbc:	621a      	str	r2, [r3, #32]
}
 8008bbe:	bf00      	nop
 8008bc0:	371c      	adds	r7, #28
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	feff8fff 	.word	0xfeff8fff
 8008bd0:	40010000 	.word	0x40010000
 8008bd4:	40010400 	.word	0x40010400

08008bd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b087      	sub	sp, #28
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a1b      	ldr	r3, [r3, #32]
 8008be6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6a1b      	ldr	r3, [r3, #32]
 8008bec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	69db      	ldr	r3, [r3, #28]
 8008bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	4b2d      	ldr	r3, [pc, #180]	@ (8008cb8 <TIM_OC3_SetConfig+0xe0>)
 8008c04:	4013      	ands	r3, r2
 8008c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f023 0303 	bic.w	r3, r3, #3
 8008c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	68fa      	ldr	r2, [r7, #12]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	021b      	lsls	r3, r3, #8
 8008c28:	697a      	ldr	r2, [r7, #20]
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a22      	ldr	r2, [pc, #136]	@ (8008cbc <TIM_OC3_SetConfig+0xe4>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d003      	beq.n	8008c3e <TIM_OC3_SetConfig+0x66>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a21      	ldr	r2, [pc, #132]	@ (8008cc0 <TIM_OC3_SetConfig+0xe8>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d10d      	bne.n	8008c5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008c44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	021b      	lsls	r3, r3, #8
 8008c4c:	697a      	ldr	r2, [r7, #20]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008c58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4a17      	ldr	r2, [pc, #92]	@ (8008cbc <TIM_OC3_SetConfig+0xe4>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d003      	beq.n	8008c6a <TIM_OC3_SetConfig+0x92>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a16      	ldr	r2, [pc, #88]	@ (8008cc0 <TIM_OC3_SetConfig+0xe8>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d113      	bne.n	8008c92 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008c70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008c78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	695b      	ldr	r3, [r3, #20]
 8008c7e:	011b      	lsls	r3, r3, #4
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	699b      	ldr	r3, [r3, #24]
 8008c8a:	011b      	lsls	r3, r3, #4
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	693a      	ldr	r2, [r7, #16]
 8008c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	685a      	ldr	r2, [r3, #4]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	697a      	ldr	r2, [r7, #20]
 8008caa:	621a      	str	r2, [r3, #32]
}
 8008cac:	bf00      	nop
 8008cae:	371c      	adds	r7, #28
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr
 8008cb8:	fffeff8f 	.word	0xfffeff8f
 8008cbc:	40010000 	.word	0x40010000
 8008cc0:	40010400 	.word	0x40010400

08008cc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b087      	sub	sp, #28
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6a1b      	ldr	r3, [r3, #32]
 8008cd8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	69db      	ldr	r3, [r3, #28]
 8008cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	4b1e      	ldr	r3, [pc, #120]	@ (8008d68 <TIM_OC4_SetConfig+0xa4>)
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008cfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	021b      	lsls	r3, r3, #8
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008d0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	031b      	lsls	r3, r3, #12
 8008d16:	693a      	ldr	r2, [r7, #16]
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a13      	ldr	r2, [pc, #76]	@ (8008d6c <TIM_OC4_SetConfig+0xa8>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d003      	beq.n	8008d2c <TIM_OC4_SetConfig+0x68>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a12      	ldr	r2, [pc, #72]	@ (8008d70 <TIM_OC4_SetConfig+0xac>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d109      	bne.n	8008d40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	695b      	ldr	r3, [r3, #20]
 8008d38:	019b      	lsls	r3, r3, #6
 8008d3a:	697a      	ldr	r2, [r7, #20]
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	697a      	ldr	r2, [r7, #20]
 8008d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	685a      	ldr	r2, [r3, #4]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	693a      	ldr	r2, [r7, #16]
 8008d58:	621a      	str	r2, [r3, #32]
}
 8008d5a:	bf00      	nop
 8008d5c:	371c      	adds	r7, #28
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr
 8008d66:	bf00      	nop
 8008d68:	feff8fff 	.word	0xfeff8fff
 8008d6c:	40010000 	.word	0x40010000
 8008d70:	40010400 	.word	0x40010400

08008d74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b087      	sub	sp, #28
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a1b      	ldr	r3, [r3, #32]
 8008d82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6a1b      	ldr	r3, [r3, #32]
 8008d88:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8008e0c <TIM_OC5_SetConfig+0x98>)
 8008da0:	4013      	ands	r3, r2
 8008da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008db4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	041b      	lsls	r3, r3, #16
 8008dbc:	693a      	ldr	r2, [r7, #16]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a12      	ldr	r2, [pc, #72]	@ (8008e10 <TIM_OC5_SetConfig+0x9c>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d003      	beq.n	8008dd2 <TIM_OC5_SetConfig+0x5e>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a11      	ldr	r2, [pc, #68]	@ (8008e14 <TIM_OC5_SetConfig+0xa0>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d109      	bne.n	8008de6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008dd8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	695b      	ldr	r3, [r3, #20]
 8008dde:	021b      	lsls	r3, r3, #8
 8008de0:	697a      	ldr	r2, [r7, #20]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	697a      	ldr	r2, [r7, #20]
 8008dea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	68fa      	ldr	r2, [r7, #12]
 8008df0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	685a      	ldr	r2, [r3, #4]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	693a      	ldr	r2, [r7, #16]
 8008dfe:	621a      	str	r2, [r3, #32]
}
 8008e00:	bf00      	nop
 8008e02:	371c      	adds	r7, #28
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr
 8008e0c:	fffeff8f 	.word	0xfffeff8f
 8008e10:	40010000 	.word	0x40010000
 8008e14:	40010400 	.word	0x40010400

08008e18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b087      	sub	sp, #28
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6a1b      	ldr	r3, [r3, #32]
 8008e26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a1b      	ldr	r3, [r3, #32]
 8008e2c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	4b1c      	ldr	r3, [pc, #112]	@ (8008eb4 <TIM_OC6_SetConfig+0x9c>)
 8008e44:	4013      	ands	r3, r2
 8008e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	021b      	lsls	r3, r3, #8
 8008e4e:	68fa      	ldr	r2, [r7, #12]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008e5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	051b      	lsls	r3, r3, #20
 8008e62:	693a      	ldr	r2, [r7, #16]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a13      	ldr	r2, [pc, #76]	@ (8008eb8 <TIM_OC6_SetConfig+0xa0>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d003      	beq.n	8008e78 <TIM_OC6_SetConfig+0x60>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a12      	ldr	r2, [pc, #72]	@ (8008ebc <TIM_OC6_SetConfig+0xa4>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d109      	bne.n	8008e8c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	029b      	lsls	r3, r3, #10
 8008e86:	697a      	ldr	r2, [r7, #20]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	697a      	ldr	r2, [r7, #20]
 8008e90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	685a      	ldr	r2, [r3, #4]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	621a      	str	r2, [r3, #32]
}
 8008ea6:	bf00      	nop
 8008ea8:	371c      	adds	r7, #28
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop
 8008eb4:	feff8fff 	.word	0xfeff8fff
 8008eb8:	40010000 	.word	0x40010000
 8008ebc:	40010400 	.word	0x40010400

08008ec0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b087      	sub	sp, #28
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6a1b      	ldr	r3, [r3, #32]
 8008ed0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6a1b      	ldr	r3, [r3, #32]
 8008ed6:	f023 0201 	bic.w	r2, r3, #1
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	699b      	ldr	r3, [r3, #24]
 8008ee2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008eea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	011b      	lsls	r3, r3, #4
 8008ef0:	693a      	ldr	r2, [r7, #16]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f023 030a 	bic.w	r3, r3, #10
 8008efc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008efe:	697a      	ldr	r2, [r7, #20]
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	693a      	ldr	r2, [r7, #16]
 8008f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	697a      	ldr	r2, [r7, #20]
 8008f10:	621a      	str	r2, [r3, #32]
}
 8008f12:	bf00      	nop
 8008f14:	371c      	adds	r7, #28
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr

08008f1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f1e:	b480      	push	{r7}
 8008f20:	b087      	sub	sp, #28
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	60f8      	str	r0, [r7, #12]
 8008f26:	60b9      	str	r1, [r7, #8]
 8008f28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6a1b      	ldr	r3, [r3, #32]
 8008f2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6a1b      	ldr	r3, [r3, #32]
 8008f34:	f023 0210 	bic.w	r2, r3, #16
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	699b      	ldr	r3, [r3, #24]
 8008f40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008f48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	031b      	lsls	r3, r3, #12
 8008f4e:	693a      	ldr	r2, [r7, #16]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008f5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	011b      	lsls	r3, r3, #4
 8008f60:	697a      	ldr	r2, [r7, #20]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	693a      	ldr	r2, [r7, #16]
 8008f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	697a      	ldr	r2, [r7, #20]
 8008f70:	621a      	str	r2, [r3, #32]
}
 8008f72:	bf00      	nop
 8008f74:	371c      	adds	r7, #28
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr

08008f7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b085      	sub	sp, #20
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
 8008f86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f96:	683a      	ldr	r2, [r7, #0]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	f043 0307 	orr.w	r3, r3, #7
 8008fa0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	68fa      	ldr	r2, [r7, #12]
 8008fa6:	609a      	str	r2, [r3, #8]
}
 8008fa8:	bf00      	nop
 8008faa:	3714      	adds	r7, #20
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b087      	sub	sp, #28
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	60f8      	str	r0, [r7, #12]
 8008fbc:	60b9      	str	r1, [r7, #8]
 8008fbe:	607a      	str	r2, [r7, #4]
 8008fc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008fce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	021a      	lsls	r2, r3, #8
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	431a      	orrs	r2, r3
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	697a      	ldr	r2, [r7, #20]
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	697a      	ldr	r2, [r7, #20]
 8008fe6:	609a      	str	r2, [r3, #8]
}
 8008fe8:	bf00      	nop
 8008fea:	371c      	adds	r7, #28
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b085      	sub	sp, #20
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009004:	2b01      	cmp	r3, #1
 8009006:	d101      	bne.n	800900c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009008:	2302      	movs	r3, #2
 800900a:	e06d      	b.n	80090e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2201      	movs	r2, #1
 8009010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2202      	movs	r2, #2
 8009018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a30      	ldr	r2, [pc, #192]	@ (80090f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d004      	beq.n	8009040 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a2f      	ldr	r2, [pc, #188]	@ (80090f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d108      	bne.n	8009052 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009046:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	68fa      	ldr	r2, [r7, #12]
 800904e:	4313      	orrs	r3, r2
 8009050:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009058:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	4313      	orrs	r3, r2
 8009062:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a20      	ldr	r2, [pc, #128]	@ (80090f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d022      	beq.n	80090bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800907e:	d01d      	beq.n	80090bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a1d      	ldr	r2, [pc, #116]	@ (80090fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d018      	beq.n	80090bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a1c      	ldr	r2, [pc, #112]	@ (8009100 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d013      	beq.n	80090bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a1a      	ldr	r2, [pc, #104]	@ (8009104 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d00e      	beq.n	80090bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a15      	ldr	r2, [pc, #84]	@ (80090f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d009      	beq.n	80090bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a16      	ldr	r2, [pc, #88]	@ (8009108 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d004      	beq.n	80090bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a15      	ldr	r2, [pc, #84]	@ (800910c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d10c      	bne.n	80090d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	68ba      	ldr	r2, [r7, #8]
 80090ca:	4313      	orrs	r3, r2
 80090cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	68ba      	ldr	r2, [r7, #8]
 80090d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2201      	movs	r2, #1
 80090da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80090e6:	2300      	movs	r3, #0
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3714      	adds	r7, #20
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr
 80090f4:	40010000 	.word	0x40010000
 80090f8:	40010400 	.word	0x40010400
 80090fc:	40000400 	.word	0x40000400
 8009100:	40000800 	.word	0x40000800
 8009104:	40000c00 	.word	0x40000c00
 8009108:	40014000 	.word	0x40014000
 800910c:	40001800 	.word	0x40001800

08009110 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009110:	b480      	push	{r7}
 8009112:	b085      	sub	sp, #20
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800911a:	2300      	movs	r3, #0
 800911c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009124:	2b01      	cmp	r3, #1
 8009126:	d101      	bne.n	800912c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009128:	2302      	movs	r3, #2
 800912a:	e065      	b.n	80091f8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	4313      	orrs	r3, r2
 8009140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	4313      	orrs	r3, r2
 800914e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	4313      	orrs	r3, r2
 800915c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4313      	orrs	r3, r2
 800916a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	4313      	orrs	r3, r2
 8009178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	695b      	ldr	r3, [r3, #20]
 8009184:	4313      	orrs	r3, r2
 8009186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009192:	4313      	orrs	r3, r2
 8009194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	699b      	ldr	r3, [r3, #24]
 80091a0:	041b      	lsls	r3, r3, #16
 80091a2:	4313      	orrs	r3, r2
 80091a4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a16      	ldr	r2, [pc, #88]	@ (8009204 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d004      	beq.n	80091ba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a14      	ldr	r2, [pc, #80]	@ (8009208 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d115      	bne.n	80091e6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091c4:	051b      	lsls	r3, r3, #20
 80091c6:	4313      	orrs	r3, r2
 80091c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	69db      	ldr	r3, [r3, #28]
 80091d4:	4313      	orrs	r3, r2
 80091d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	6a1b      	ldr	r3, [r3, #32]
 80091e2:	4313      	orrs	r3, r2
 80091e4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	68fa      	ldr	r2, [r7, #12]
 80091ec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3714      	adds	r7, #20
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr
 8009204:	40010000 	.word	0x40010000
 8009208:	40010400 	.word	0x40010400

0800920c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d101      	bne.n	800921e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	e040      	b.n	80092a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009222:	2b00      	cmp	r3, #0
 8009224:	d106      	bne.n	8009234 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f7f9 f866 	bl	8002300 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2224      	movs	r2, #36	@ 0x24
 8009238:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f022 0201 	bic.w	r2, r2, #1
 8009248:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800924e:	2b00      	cmp	r3, #0
 8009250:	d002      	beq.n	8009258 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 faf0 	bl	8009838 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 f889 	bl	8009370 <UART_SetConfig>
 800925e:	4603      	mov	r3, r0
 8009260:	2b01      	cmp	r3, #1
 8009262:	d101      	bne.n	8009268 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	e01b      	b.n	80092a0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	685a      	ldr	r2, [r3, #4]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009276:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	689a      	ldr	r2, [r3, #8]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009286:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f042 0201 	orr.w	r2, r2, #1
 8009296:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 fb6f 	bl	800997c <UART_CheckIdleState>
 800929e:	4603      	mov	r3, r0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b08a      	sub	sp, #40	@ 0x28
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	4613      	mov	r3, r2
 80092b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092bc:	2b20      	cmp	r3, #32
 80092be:	d132      	bne.n	8009326 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d002      	beq.n	80092cc <HAL_UART_Receive_DMA+0x24>
 80092c6:	88fb      	ldrh	r3, [r7, #6]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d101      	bne.n	80092d0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	e02b      	b.n	8009328 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2200      	movs	r2, #0
 80092d4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d018      	beq.n	8009316 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	e853 3f00 	ldrex	r3, [r3]
 80092f0:	613b      	str	r3, [r7, #16]
   return(result);
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80092f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	461a      	mov	r2, r3
 8009300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009302:	623b      	str	r3, [r7, #32]
 8009304:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009306:	69f9      	ldr	r1, [r7, #28]
 8009308:	6a3a      	ldr	r2, [r7, #32]
 800930a:	e841 2300 	strex	r3, r2, [r1]
 800930e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d1e6      	bne.n	80092e4 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009316:	88fb      	ldrh	r3, [r7, #6]
 8009318:	461a      	mov	r2, r3
 800931a:	68b9      	ldr	r1, [r7, #8]
 800931c:	68f8      	ldr	r0, [r7, #12]
 800931e:	f000 fbf1 	bl	8009b04 <UART_Start_Receive_DMA>
 8009322:	4603      	mov	r3, r0
 8009324:	e000      	b.n	8009328 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8009326:	2302      	movs	r3, #2
  }
}
 8009328:	4618      	mov	r0, r3
 800932a:	3728      	adds	r7, #40	@ 0x28
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	460b      	mov	r3, r1
 8009362:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009364:	bf00      	nop
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b088      	sub	sp, #32
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009378:	2300      	movs	r3, #0
 800937a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	689a      	ldr	r2, [r3, #8]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	431a      	orrs	r2, r3
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	695b      	ldr	r3, [r3, #20]
 800938a:	431a      	orrs	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	69db      	ldr	r3, [r3, #28]
 8009390:	4313      	orrs	r3, r2
 8009392:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	4ba6      	ldr	r3, [pc, #664]	@ (8009634 <UART_SetConfig+0x2c4>)
 800939c:	4013      	ands	r3, r2
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	6812      	ldr	r2, [r2, #0]
 80093a2:	6979      	ldr	r1, [r7, #20]
 80093a4:	430b      	orrs	r3, r1
 80093a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	68da      	ldr	r2, [r3, #12]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	430a      	orrs	r2, r1
 80093bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	699b      	ldr	r3, [r3, #24]
 80093c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6a1b      	ldr	r3, [r3, #32]
 80093c8:	697a      	ldr	r2, [r7, #20]
 80093ca:	4313      	orrs	r3, r2
 80093cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	697a      	ldr	r2, [r7, #20]
 80093de:	430a      	orrs	r2, r1
 80093e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a94      	ldr	r2, [pc, #592]	@ (8009638 <UART_SetConfig+0x2c8>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d120      	bne.n	800942e <UART_SetConfig+0xbe>
 80093ec:	4b93      	ldr	r3, [pc, #588]	@ (800963c <UART_SetConfig+0x2cc>)
 80093ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093f2:	f003 0303 	and.w	r3, r3, #3
 80093f6:	2b03      	cmp	r3, #3
 80093f8:	d816      	bhi.n	8009428 <UART_SetConfig+0xb8>
 80093fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009400 <UART_SetConfig+0x90>)
 80093fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009400:	08009411 	.word	0x08009411
 8009404:	0800941d 	.word	0x0800941d
 8009408:	08009417 	.word	0x08009417
 800940c:	08009423 	.word	0x08009423
 8009410:	2301      	movs	r3, #1
 8009412:	77fb      	strb	r3, [r7, #31]
 8009414:	e150      	b.n	80096b8 <UART_SetConfig+0x348>
 8009416:	2302      	movs	r3, #2
 8009418:	77fb      	strb	r3, [r7, #31]
 800941a:	e14d      	b.n	80096b8 <UART_SetConfig+0x348>
 800941c:	2304      	movs	r3, #4
 800941e:	77fb      	strb	r3, [r7, #31]
 8009420:	e14a      	b.n	80096b8 <UART_SetConfig+0x348>
 8009422:	2308      	movs	r3, #8
 8009424:	77fb      	strb	r3, [r7, #31]
 8009426:	e147      	b.n	80096b8 <UART_SetConfig+0x348>
 8009428:	2310      	movs	r3, #16
 800942a:	77fb      	strb	r3, [r7, #31]
 800942c:	e144      	b.n	80096b8 <UART_SetConfig+0x348>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a83      	ldr	r2, [pc, #524]	@ (8009640 <UART_SetConfig+0x2d0>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d132      	bne.n	800949e <UART_SetConfig+0x12e>
 8009438:	4b80      	ldr	r3, [pc, #512]	@ (800963c <UART_SetConfig+0x2cc>)
 800943a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800943e:	f003 030c 	and.w	r3, r3, #12
 8009442:	2b0c      	cmp	r3, #12
 8009444:	d828      	bhi.n	8009498 <UART_SetConfig+0x128>
 8009446:	a201      	add	r2, pc, #4	@ (adr r2, 800944c <UART_SetConfig+0xdc>)
 8009448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944c:	08009481 	.word	0x08009481
 8009450:	08009499 	.word	0x08009499
 8009454:	08009499 	.word	0x08009499
 8009458:	08009499 	.word	0x08009499
 800945c:	0800948d 	.word	0x0800948d
 8009460:	08009499 	.word	0x08009499
 8009464:	08009499 	.word	0x08009499
 8009468:	08009499 	.word	0x08009499
 800946c:	08009487 	.word	0x08009487
 8009470:	08009499 	.word	0x08009499
 8009474:	08009499 	.word	0x08009499
 8009478:	08009499 	.word	0x08009499
 800947c:	08009493 	.word	0x08009493
 8009480:	2300      	movs	r3, #0
 8009482:	77fb      	strb	r3, [r7, #31]
 8009484:	e118      	b.n	80096b8 <UART_SetConfig+0x348>
 8009486:	2302      	movs	r3, #2
 8009488:	77fb      	strb	r3, [r7, #31]
 800948a:	e115      	b.n	80096b8 <UART_SetConfig+0x348>
 800948c:	2304      	movs	r3, #4
 800948e:	77fb      	strb	r3, [r7, #31]
 8009490:	e112      	b.n	80096b8 <UART_SetConfig+0x348>
 8009492:	2308      	movs	r3, #8
 8009494:	77fb      	strb	r3, [r7, #31]
 8009496:	e10f      	b.n	80096b8 <UART_SetConfig+0x348>
 8009498:	2310      	movs	r3, #16
 800949a:	77fb      	strb	r3, [r7, #31]
 800949c:	e10c      	b.n	80096b8 <UART_SetConfig+0x348>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a68      	ldr	r2, [pc, #416]	@ (8009644 <UART_SetConfig+0x2d4>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d120      	bne.n	80094ea <UART_SetConfig+0x17a>
 80094a8:	4b64      	ldr	r3, [pc, #400]	@ (800963c <UART_SetConfig+0x2cc>)
 80094aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094ae:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80094b2:	2b30      	cmp	r3, #48	@ 0x30
 80094b4:	d013      	beq.n	80094de <UART_SetConfig+0x16e>
 80094b6:	2b30      	cmp	r3, #48	@ 0x30
 80094b8:	d814      	bhi.n	80094e4 <UART_SetConfig+0x174>
 80094ba:	2b20      	cmp	r3, #32
 80094bc:	d009      	beq.n	80094d2 <UART_SetConfig+0x162>
 80094be:	2b20      	cmp	r3, #32
 80094c0:	d810      	bhi.n	80094e4 <UART_SetConfig+0x174>
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d002      	beq.n	80094cc <UART_SetConfig+0x15c>
 80094c6:	2b10      	cmp	r3, #16
 80094c8:	d006      	beq.n	80094d8 <UART_SetConfig+0x168>
 80094ca:	e00b      	b.n	80094e4 <UART_SetConfig+0x174>
 80094cc:	2300      	movs	r3, #0
 80094ce:	77fb      	strb	r3, [r7, #31]
 80094d0:	e0f2      	b.n	80096b8 <UART_SetConfig+0x348>
 80094d2:	2302      	movs	r3, #2
 80094d4:	77fb      	strb	r3, [r7, #31]
 80094d6:	e0ef      	b.n	80096b8 <UART_SetConfig+0x348>
 80094d8:	2304      	movs	r3, #4
 80094da:	77fb      	strb	r3, [r7, #31]
 80094dc:	e0ec      	b.n	80096b8 <UART_SetConfig+0x348>
 80094de:	2308      	movs	r3, #8
 80094e0:	77fb      	strb	r3, [r7, #31]
 80094e2:	e0e9      	b.n	80096b8 <UART_SetConfig+0x348>
 80094e4:	2310      	movs	r3, #16
 80094e6:	77fb      	strb	r3, [r7, #31]
 80094e8:	e0e6      	b.n	80096b8 <UART_SetConfig+0x348>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a56      	ldr	r2, [pc, #344]	@ (8009648 <UART_SetConfig+0x2d8>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d120      	bne.n	8009536 <UART_SetConfig+0x1c6>
 80094f4:	4b51      	ldr	r3, [pc, #324]	@ (800963c <UART_SetConfig+0x2cc>)
 80094f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80094fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8009500:	d013      	beq.n	800952a <UART_SetConfig+0x1ba>
 8009502:	2bc0      	cmp	r3, #192	@ 0xc0
 8009504:	d814      	bhi.n	8009530 <UART_SetConfig+0x1c0>
 8009506:	2b80      	cmp	r3, #128	@ 0x80
 8009508:	d009      	beq.n	800951e <UART_SetConfig+0x1ae>
 800950a:	2b80      	cmp	r3, #128	@ 0x80
 800950c:	d810      	bhi.n	8009530 <UART_SetConfig+0x1c0>
 800950e:	2b00      	cmp	r3, #0
 8009510:	d002      	beq.n	8009518 <UART_SetConfig+0x1a8>
 8009512:	2b40      	cmp	r3, #64	@ 0x40
 8009514:	d006      	beq.n	8009524 <UART_SetConfig+0x1b4>
 8009516:	e00b      	b.n	8009530 <UART_SetConfig+0x1c0>
 8009518:	2300      	movs	r3, #0
 800951a:	77fb      	strb	r3, [r7, #31]
 800951c:	e0cc      	b.n	80096b8 <UART_SetConfig+0x348>
 800951e:	2302      	movs	r3, #2
 8009520:	77fb      	strb	r3, [r7, #31]
 8009522:	e0c9      	b.n	80096b8 <UART_SetConfig+0x348>
 8009524:	2304      	movs	r3, #4
 8009526:	77fb      	strb	r3, [r7, #31]
 8009528:	e0c6      	b.n	80096b8 <UART_SetConfig+0x348>
 800952a:	2308      	movs	r3, #8
 800952c:	77fb      	strb	r3, [r7, #31]
 800952e:	e0c3      	b.n	80096b8 <UART_SetConfig+0x348>
 8009530:	2310      	movs	r3, #16
 8009532:	77fb      	strb	r3, [r7, #31]
 8009534:	e0c0      	b.n	80096b8 <UART_SetConfig+0x348>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a44      	ldr	r2, [pc, #272]	@ (800964c <UART_SetConfig+0x2dc>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d125      	bne.n	800958c <UART_SetConfig+0x21c>
 8009540:	4b3e      	ldr	r3, [pc, #248]	@ (800963c <UART_SetConfig+0x2cc>)
 8009542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009546:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800954a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800954e:	d017      	beq.n	8009580 <UART_SetConfig+0x210>
 8009550:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009554:	d817      	bhi.n	8009586 <UART_SetConfig+0x216>
 8009556:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800955a:	d00b      	beq.n	8009574 <UART_SetConfig+0x204>
 800955c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009560:	d811      	bhi.n	8009586 <UART_SetConfig+0x216>
 8009562:	2b00      	cmp	r3, #0
 8009564:	d003      	beq.n	800956e <UART_SetConfig+0x1fe>
 8009566:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800956a:	d006      	beq.n	800957a <UART_SetConfig+0x20a>
 800956c:	e00b      	b.n	8009586 <UART_SetConfig+0x216>
 800956e:	2300      	movs	r3, #0
 8009570:	77fb      	strb	r3, [r7, #31]
 8009572:	e0a1      	b.n	80096b8 <UART_SetConfig+0x348>
 8009574:	2302      	movs	r3, #2
 8009576:	77fb      	strb	r3, [r7, #31]
 8009578:	e09e      	b.n	80096b8 <UART_SetConfig+0x348>
 800957a:	2304      	movs	r3, #4
 800957c:	77fb      	strb	r3, [r7, #31]
 800957e:	e09b      	b.n	80096b8 <UART_SetConfig+0x348>
 8009580:	2308      	movs	r3, #8
 8009582:	77fb      	strb	r3, [r7, #31]
 8009584:	e098      	b.n	80096b8 <UART_SetConfig+0x348>
 8009586:	2310      	movs	r3, #16
 8009588:	77fb      	strb	r3, [r7, #31]
 800958a:	e095      	b.n	80096b8 <UART_SetConfig+0x348>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a2f      	ldr	r2, [pc, #188]	@ (8009650 <UART_SetConfig+0x2e0>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d125      	bne.n	80095e2 <UART_SetConfig+0x272>
 8009596:	4b29      	ldr	r3, [pc, #164]	@ (800963c <UART_SetConfig+0x2cc>)
 8009598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800959c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80095a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80095a4:	d017      	beq.n	80095d6 <UART_SetConfig+0x266>
 80095a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80095aa:	d817      	bhi.n	80095dc <UART_SetConfig+0x26c>
 80095ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80095b0:	d00b      	beq.n	80095ca <UART_SetConfig+0x25a>
 80095b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80095b6:	d811      	bhi.n	80095dc <UART_SetConfig+0x26c>
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d003      	beq.n	80095c4 <UART_SetConfig+0x254>
 80095bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095c0:	d006      	beq.n	80095d0 <UART_SetConfig+0x260>
 80095c2:	e00b      	b.n	80095dc <UART_SetConfig+0x26c>
 80095c4:	2301      	movs	r3, #1
 80095c6:	77fb      	strb	r3, [r7, #31]
 80095c8:	e076      	b.n	80096b8 <UART_SetConfig+0x348>
 80095ca:	2302      	movs	r3, #2
 80095cc:	77fb      	strb	r3, [r7, #31]
 80095ce:	e073      	b.n	80096b8 <UART_SetConfig+0x348>
 80095d0:	2304      	movs	r3, #4
 80095d2:	77fb      	strb	r3, [r7, #31]
 80095d4:	e070      	b.n	80096b8 <UART_SetConfig+0x348>
 80095d6:	2308      	movs	r3, #8
 80095d8:	77fb      	strb	r3, [r7, #31]
 80095da:	e06d      	b.n	80096b8 <UART_SetConfig+0x348>
 80095dc:	2310      	movs	r3, #16
 80095de:	77fb      	strb	r3, [r7, #31]
 80095e0:	e06a      	b.n	80096b8 <UART_SetConfig+0x348>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a1b      	ldr	r2, [pc, #108]	@ (8009654 <UART_SetConfig+0x2e4>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d138      	bne.n	800965e <UART_SetConfig+0x2ee>
 80095ec:	4b13      	ldr	r3, [pc, #76]	@ (800963c <UART_SetConfig+0x2cc>)
 80095ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095f2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80095f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80095fa:	d017      	beq.n	800962c <UART_SetConfig+0x2bc>
 80095fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009600:	d82a      	bhi.n	8009658 <UART_SetConfig+0x2e8>
 8009602:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009606:	d00b      	beq.n	8009620 <UART_SetConfig+0x2b0>
 8009608:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800960c:	d824      	bhi.n	8009658 <UART_SetConfig+0x2e8>
 800960e:	2b00      	cmp	r3, #0
 8009610:	d003      	beq.n	800961a <UART_SetConfig+0x2aa>
 8009612:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009616:	d006      	beq.n	8009626 <UART_SetConfig+0x2b6>
 8009618:	e01e      	b.n	8009658 <UART_SetConfig+0x2e8>
 800961a:	2300      	movs	r3, #0
 800961c:	77fb      	strb	r3, [r7, #31]
 800961e:	e04b      	b.n	80096b8 <UART_SetConfig+0x348>
 8009620:	2302      	movs	r3, #2
 8009622:	77fb      	strb	r3, [r7, #31]
 8009624:	e048      	b.n	80096b8 <UART_SetConfig+0x348>
 8009626:	2304      	movs	r3, #4
 8009628:	77fb      	strb	r3, [r7, #31]
 800962a:	e045      	b.n	80096b8 <UART_SetConfig+0x348>
 800962c:	2308      	movs	r3, #8
 800962e:	77fb      	strb	r3, [r7, #31]
 8009630:	e042      	b.n	80096b8 <UART_SetConfig+0x348>
 8009632:	bf00      	nop
 8009634:	efff69f3 	.word	0xefff69f3
 8009638:	40011000 	.word	0x40011000
 800963c:	40023800 	.word	0x40023800
 8009640:	40004400 	.word	0x40004400
 8009644:	40004800 	.word	0x40004800
 8009648:	40004c00 	.word	0x40004c00
 800964c:	40005000 	.word	0x40005000
 8009650:	40011400 	.word	0x40011400
 8009654:	40007800 	.word	0x40007800
 8009658:	2310      	movs	r3, #16
 800965a:	77fb      	strb	r3, [r7, #31]
 800965c:	e02c      	b.n	80096b8 <UART_SetConfig+0x348>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a72      	ldr	r2, [pc, #456]	@ (800982c <UART_SetConfig+0x4bc>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d125      	bne.n	80096b4 <UART_SetConfig+0x344>
 8009668:	4b71      	ldr	r3, [pc, #452]	@ (8009830 <UART_SetConfig+0x4c0>)
 800966a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800966e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009672:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009676:	d017      	beq.n	80096a8 <UART_SetConfig+0x338>
 8009678:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800967c:	d817      	bhi.n	80096ae <UART_SetConfig+0x33e>
 800967e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009682:	d00b      	beq.n	800969c <UART_SetConfig+0x32c>
 8009684:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009688:	d811      	bhi.n	80096ae <UART_SetConfig+0x33e>
 800968a:	2b00      	cmp	r3, #0
 800968c:	d003      	beq.n	8009696 <UART_SetConfig+0x326>
 800968e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009692:	d006      	beq.n	80096a2 <UART_SetConfig+0x332>
 8009694:	e00b      	b.n	80096ae <UART_SetConfig+0x33e>
 8009696:	2300      	movs	r3, #0
 8009698:	77fb      	strb	r3, [r7, #31]
 800969a:	e00d      	b.n	80096b8 <UART_SetConfig+0x348>
 800969c:	2302      	movs	r3, #2
 800969e:	77fb      	strb	r3, [r7, #31]
 80096a0:	e00a      	b.n	80096b8 <UART_SetConfig+0x348>
 80096a2:	2304      	movs	r3, #4
 80096a4:	77fb      	strb	r3, [r7, #31]
 80096a6:	e007      	b.n	80096b8 <UART_SetConfig+0x348>
 80096a8:	2308      	movs	r3, #8
 80096aa:	77fb      	strb	r3, [r7, #31]
 80096ac:	e004      	b.n	80096b8 <UART_SetConfig+0x348>
 80096ae:	2310      	movs	r3, #16
 80096b0:	77fb      	strb	r3, [r7, #31]
 80096b2:	e001      	b.n	80096b8 <UART_SetConfig+0x348>
 80096b4:	2310      	movs	r3, #16
 80096b6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	69db      	ldr	r3, [r3, #28]
 80096bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096c0:	d15b      	bne.n	800977a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80096c2:	7ffb      	ldrb	r3, [r7, #31]
 80096c4:	2b08      	cmp	r3, #8
 80096c6:	d828      	bhi.n	800971a <UART_SetConfig+0x3aa>
 80096c8:	a201      	add	r2, pc, #4	@ (adr r2, 80096d0 <UART_SetConfig+0x360>)
 80096ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ce:	bf00      	nop
 80096d0:	080096f5 	.word	0x080096f5
 80096d4:	080096fd 	.word	0x080096fd
 80096d8:	08009705 	.word	0x08009705
 80096dc:	0800971b 	.word	0x0800971b
 80096e0:	0800970b 	.word	0x0800970b
 80096e4:	0800971b 	.word	0x0800971b
 80096e8:	0800971b 	.word	0x0800971b
 80096ec:	0800971b 	.word	0x0800971b
 80096f0:	08009713 	.word	0x08009713
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096f4:	f7fc fcd8 	bl	80060a8 <HAL_RCC_GetPCLK1Freq>
 80096f8:	61b8      	str	r0, [r7, #24]
        break;
 80096fa:	e013      	b.n	8009724 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096fc:	f7fc fce8 	bl	80060d0 <HAL_RCC_GetPCLK2Freq>
 8009700:	61b8      	str	r0, [r7, #24]
        break;
 8009702:	e00f      	b.n	8009724 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009704:	4b4b      	ldr	r3, [pc, #300]	@ (8009834 <UART_SetConfig+0x4c4>)
 8009706:	61bb      	str	r3, [r7, #24]
        break;
 8009708:	e00c      	b.n	8009724 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800970a:	f7fc fbbb 	bl	8005e84 <HAL_RCC_GetSysClockFreq>
 800970e:	61b8      	str	r0, [r7, #24]
        break;
 8009710:	e008      	b.n	8009724 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009712:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009716:	61bb      	str	r3, [r7, #24]
        break;
 8009718:	e004      	b.n	8009724 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800971a:	2300      	movs	r3, #0
 800971c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	77bb      	strb	r3, [r7, #30]
        break;
 8009722:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d074      	beq.n	8009814 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800972a:	69bb      	ldr	r3, [r7, #24]
 800972c:	005a      	lsls	r2, r3, #1
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	085b      	lsrs	r3, r3, #1
 8009734:	441a      	add	r2, r3
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	fbb2 f3f3 	udiv	r3, r2, r3
 800973e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	2b0f      	cmp	r3, #15
 8009744:	d916      	bls.n	8009774 <UART_SetConfig+0x404>
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800974c:	d212      	bcs.n	8009774 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	b29b      	uxth	r3, r3
 8009752:	f023 030f 	bic.w	r3, r3, #15
 8009756:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	085b      	lsrs	r3, r3, #1
 800975c:	b29b      	uxth	r3, r3
 800975e:	f003 0307 	and.w	r3, r3, #7
 8009762:	b29a      	uxth	r2, r3
 8009764:	89fb      	ldrh	r3, [r7, #14]
 8009766:	4313      	orrs	r3, r2
 8009768:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	89fa      	ldrh	r2, [r7, #14]
 8009770:	60da      	str	r2, [r3, #12]
 8009772:	e04f      	b.n	8009814 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	77bb      	strb	r3, [r7, #30]
 8009778:	e04c      	b.n	8009814 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800977a:	7ffb      	ldrb	r3, [r7, #31]
 800977c:	2b08      	cmp	r3, #8
 800977e:	d828      	bhi.n	80097d2 <UART_SetConfig+0x462>
 8009780:	a201      	add	r2, pc, #4	@ (adr r2, 8009788 <UART_SetConfig+0x418>)
 8009782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009786:	bf00      	nop
 8009788:	080097ad 	.word	0x080097ad
 800978c:	080097b5 	.word	0x080097b5
 8009790:	080097bd 	.word	0x080097bd
 8009794:	080097d3 	.word	0x080097d3
 8009798:	080097c3 	.word	0x080097c3
 800979c:	080097d3 	.word	0x080097d3
 80097a0:	080097d3 	.word	0x080097d3
 80097a4:	080097d3 	.word	0x080097d3
 80097a8:	080097cb 	.word	0x080097cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097ac:	f7fc fc7c 	bl	80060a8 <HAL_RCC_GetPCLK1Freq>
 80097b0:	61b8      	str	r0, [r7, #24]
        break;
 80097b2:	e013      	b.n	80097dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097b4:	f7fc fc8c 	bl	80060d0 <HAL_RCC_GetPCLK2Freq>
 80097b8:	61b8      	str	r0, [r7, #24]
        break;
 80097ba:	e00f      	b.n	80097dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80097bc:	4b1d      	ldr	r3, [pc, #116]	@ (8009834 <UART_SetConfig+0x4c4>)
 80097be:	61bb      	str	r3, [r7, #24]
        break;
 80097c0:	e00c      	b.n	80097dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80097c2:	f7fc fb5f 	bl	8005e84 <HAL_RCC_GetSysClockFreq>
 80097c6:	61b8      	str	r0, [r7, #24]
        break;
 80097c8:	e008      	b.n	80097dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097ce:	61bb      	str	r3, [r7, #24]
        break;
 80097d0:	e004      	b.n	80097dc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80097d2:	2300      	movs	r3, #0
 80097d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80097d6:	2301      	movs	r3, #1
 80097d8:	77bb      	strb	r3, [r7, #30]
        break;
 80097da:	bf00      	nop
    }

    if (pclk != 0U)
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d018      	beq.n	8009814 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	085a      	lsrs	r2, r3, #1
 80097e8:	69bb      	ldr	r3, [r7, #24]
 80097ea:	441a      	add	r2, r3
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80097f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	2b0f      	cmp	r3, #15
 80097fa:	d909      	bls.n	8009810 <UART_SetConfig+0x4a0>
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009802:	d205      	bcs.n	8009810 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	b29a      	uxth	r2, r3
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	60da      	str	r2, [r3, #12]
 800980e:	e001      	b.n	8009814 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009810:	2301      	movs	r3, #1
 8009812:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009820:	7fbb      	ldrb	r3, [r7, #30]
}
 8009822:	4618      	mov	r0, r3
 8009824:	3720      	adds	r7, #32
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	40007c00 	.word	0x40007c00
 8009830:	40023800 	.word	0x40023800
 8009834:	00f42400 	.word	0x00f42400

08009838 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009844:	f003 0308 	and.w	r3, r3, #8
 8009848:	2b00      	cmp	r3, #0
 800984a:	d00a      	beq.n	8009862 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	430a      	orrs	r2, r1
 8009860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009866:	f003 0301 	and.w	r3, r3, #1
 800986a:	2b00      	cmp	r3, #0
 800986c:	d00a      	beq.n	8009884 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	430a      	orrs	r2, r1
 8009882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009888:	f003 0302 	and.w	r3, r3, #2
 800988c:	2b00      	cmp	r3, #0
 800988e:	d00a      	beq.n	80098a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	430a      	orrs	r2, r1
 80098a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098aa:	f003 0304 	and.w	r3, r3, #4
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d00a      	beq.n	80098c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	430a      	orrs	r2, r1
 80098c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098cc:	f003 0310 	and.w	r3, r3, #16
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d00a      	beq.n	80098ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	430a      	orrs	r2, r1
 80098e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098ee:	f003 0320 	and.w	r3, r3, #32
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00a      	beq.n	800990c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	430a      	orrs	r2, r1
 800990a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009914:	2b00      	cmp	r3, #0
 8009916:	d01a      	beq.n	800994e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	430a      	orrs	r2, r1
 800992c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009932:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009936:	d10a      	bne.n	800994e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	430a      	orrs	r2, r1
 800994c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00a      	beq.n	8009970 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	430a      	orrs	r2, r1
 800996e:	605a      	str	r2, [r3, #4]
  }
}
 8009970:	bf00      	nop
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b08c      	sub	sp, #48	@ 0x30
 8009980:	af02      	add	r7, sp, #8
 8009982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800998c:	f7f9 f93a 	bl	8002c04 <HAL_GetTick>
 8009990:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f003 0308 	and.w	r3, r3, #8
 800999c:	2b08      	cmp	r3, #8
 800999e:	d12e      	bne.n	80099fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80099a4:	9300      	str	r3, [sp, #0]
 80099a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a8:	2200      	movs	r2, #0
 80099aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 f83b 	bl	8009a2a <UART_WaitOnFlagUntilTimeout>
 80099b4:	4603      	mov	r3, r0
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d021      	beq.n	80099fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	e853 3f00 	ldrex	r3, [r3]
 80099c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80099ce:	623b      	str	r3, [r7, #32]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	461a      	mov	r2, r3
 80099d6:	6a3b      	ldr	r3, [r7, #32]
 80099d8:	61fb      	str	r3, [r7, #28]
 80099da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099dc:	69b9      	ldr	r1, [r7, #24]
 80099de:	69fa      	ldr	r2, [r7, #28]
 80099e0:	e841 2300 	strex	r3, r2, [r1]
 80099e4:	617b      	str	r3, [r7, #20]
   return(result);
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d1e6      	bne.n	80099ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2220      	movs	r2, #32
 80099f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099fa:	2303      	movs	r3, #3
 80099fc:	e011      	b.n	8009a22 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2220      	movs	r2, #32
 8009a02:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2220      	movs	r2, #32
 8009a08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009a20:	2300      	movs	r3, #0
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3728      	adds	r7, #40	@ 0x28
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}

08009a2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a2a:	b580      	push	{r7, lr}
 8009a2c:	b084      	sub	sp, #16
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	60f8      	str	r0, [r7, #12]
 8009a32:	60b9      	str	r1, [r7, #8]
 8009a34:	603b      	str	r3, [r7, #0]
 8009a36:	4613      	mov	r3, r2
 8009a38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a3a:	e04f      	b.n	8009adc <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a42:	d04b      	beq.n	8009adc <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a44:	f7f9 f8de 	bl	8002c04 <HAL_GetTick>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	1ad3      	subs	r3, r2, r3
 8009a4e:	69ba      	ldr	r2, [r7, #24]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d302      	bcc.n	8009a5a <UART_WaitOnFlagUntilTimeout+0x30>
 8009a54:	69bb      	ldr	r3, [r7, #24]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d101      	bne.n	8009a5e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009a5a:	2303      	movs	r3, #3
 8009a5c:	e04e      	b.n	8009afc <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f003 0304 	and.w	r3, r3, #4
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d037      	beq.n	8009adc <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	2b80      	cmp	r3, #128	@ 0x80
 8009a70:	d034      	beq.n	8009adc <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	2b40      	cmp	r3, #64	@ 0x40
 8009a76:	d031      	beq.n	8009adc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	69db      	ldr	r3, [r3, #28]
 8009a7e:	f003 0308 	and.w	r3, r3, #8
 8009a82:	2b08      	cmp	r3, #8
 8009a84:	d110      	bne.n	8009aa8 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	2208      	movs	r2, #8
 8009a8c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a8e:	68f8      	ldr	r0, [r7, #12]
 8009a90:	f000 f8fe 	bl	8009c90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2208      	movs	r2, #8
 8009a98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	e029      	b.n	8009afc <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	69db      	ldr	r3, [r3, #28]
 8009aae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ab2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ab6:	d111      	bne.n	8009adc <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009ac0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ac2:	68f8      	ldr	r0, [r7, #12]
 8009ac4:	f000 f8e4 	bl	8009c90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2220      	movs	r2, #32
 8009acc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009ad8:	2303      	movs	r3, #3
 8009ada:	e00f      	b.n	8009afc <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	69da      	ldr	r2, [r3, #28]
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	4013      	ands	r3, r2
 8009ae6:	68ba      	ldr	r2, [r7, #8]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	bf0c      	ite	eq
 8009aec:	2301      	moveq	r3, #1
 8009aee:	2300      	movne	r3, #0
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	461a      	mov	r2, r3
 8009af4:	79fb      	ldrb	r3, [r7, #7]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d0a0      	beq.n	8009a3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009afa:	2300      	movs	r3, #0
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3710      	adds	r7, #16
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b096      	sub	sp, #88	@ 0x58
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	4613      	mov	r3, r2
 8009b10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	68ba      	ldr	r2, [r7, #8]
 8009b16:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	88fa      	ldrh	r2, [r7, #6]
 8009b1c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2200      	movs	r2, #0
 8009b24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2222      	movs	r2, #34	@ 0x22
 8009b2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d028      	beq.n	8009b8a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b3c:	4a3e      	ldr	r2, [pc, #248]	@ (8009c38 <UART_Start_Receive_DMA+0x134>)
 8009b3e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b44:	4a3d      	ldr	r2, [pc, #244]	@ (8009c3c <UART_Start_Receive_DMA+0x138>)
 8009b46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b4c:	4a3c      	ldr	r2, [pc, #240]	@ (8009c40 <UART_Start_Receive_DMA+0x13c>)
 8009b4e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b54:	2200      	movs	r2, #0
 8009b56:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	3324      	adds	r3, #36	@ 0x24
 8009b62:	4619      	mov	r1, r3
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b68:	461a      	mov	r2, r3
 8009b6a:	88fb      	ldrh	r3, [r7, #6]
 8009b6c:	f7f9 fd46 	bl	80035fc <HAL_DMA_Start_IT>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d009      	beq.n	8009b8a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2210      	movs	r2, #16
 8009b7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2220      	movs	r2, #32
 8009b82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8009b86:	2301      	movs	r3, #1
 8009b88:	e051      	b.n	8009c2e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	691b      	ldr	r3, [r3, #16]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d018      	beq.n	8009bc4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b9a:	e853 3f00 	ldrex	r3, [r3]
 8009b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ba2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ba6:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	461a      	mov	r2, r3
 8009bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009bb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bb2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009bb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009bb8:	e841 2300 	strex	r3, r2, [r1]
 8009bbc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009bbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d1e6      	bne.n	8009b92 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	3308      	adds	r3, #8
 8009bca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bce:	e853 3f00 	ldrex	r3, [r3]
 8009bd2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bd6:	f043 0301 	orr.w	r3, r3, #1
 8009bda:	653b      	str	r3, [r7, #80]	@ 0x50
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	3308      	adds	r3, #8
 8009be2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009be4:	637a      	str	r2, [r7, #52]	@ 0x34
 8009be6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009bea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009bec:	e841 2300 	strex	r3, r2, [r1]
 8009bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d1e5      	bne.n	8009bc4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	3308      	adds	r3, #8
 8009bfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	e853 3f00 	ldrex	r3, [r3]
 8009c06:	613b      	str	r3, [r7, #16]
   return(result);
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	3308      	adds	r3, #8
 8009c16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009c18:	623a      	str	r2, [r7, #32]
 8009c1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c1c:	69f9      	ldr	r1, [r7, #28]
 8009c1e:	6a3a      	ldr	r2, [r7, #32]
 8009c20:	e841 2300 	strex	r3, r2, [r1]
 8009c24:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d1e5      	bne.n	8009bf8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3758      	adds	r7, #88	@ 0x58
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	08009d59 	.word	0x08009d59
 8009c3c:	08009e81 	.word	0x08009e81
 8009c40:	08009ebf 	.word	0x08009ebf

08009c44 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b089      	sub	sp, #36	@ 0x24
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	e853 3f00 	ldrex	r3, [r3]
 8009c58:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009c60:	61fb      	str	r3, [r7, #28]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	461a      	mov	r2, r3
 8009c68:	69fb      	ldr	r3, [r7, #28]
 8009c6a:	61bb      	str	r3, [r7, #24]
 8009c6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6e:	6979      	ldr	r1, [r7, #20]
 8009c70:	69ba      	ldr	r2, [r7, #24]
 8009c72:	e841 2300 	strex	r3, r2, [r1]
 8009c76:	613b      	str	r3, [r7, #16]
   return(result);
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d1e6      	bne.n	8009c4c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2220      	movs	r2, #32
 8009c82:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8009c84:	bf00      	nop
 8009c86:	3724      	adds	r7, #36	@ 0x24
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b095      	sub	sp, #84	@ 0x54
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ca0:	e853 3f00 	ldrex	r3, [r3]
 8009ca4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ca8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009cac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cb6:	643b      	str	r3, [r7, #64]	@ 0x40
 8009cb8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009cbc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009cbe:	e841 2300 	strex	r3, r2, [r1]
 8009cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d1e6      	bne.n	8009c98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	3308      	adds	r3, #8
 8009cd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd2:	6a3b      	ldr	r3, [r7, #32]
 8009cd4:	e853 3f00 	ldrex	r3, [r3]
 8009cd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	f023 0301 	bic.w	r3, r3, #1
 8009ce0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	3308      	adds	r3, #8
 8009ce8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009cea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009cec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009cf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cf2:	e841 2300 	strex	r3, r2, [r1]
 8009cf6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d1e5      	bne.n	8009cca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d118      	bne.n	8009d38 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	e853 3f00 	ldrex	r3, [r3]
 8009d12:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	f023 0310 	bic.w	r3, r3, #16
 8009d1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	461a      	mov	r2, r3
 8009d22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d24:	61bb      	str	r3, [r7, #24]
 8009d26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d28:	6979      	ldr	r1, [r7, #20]
 8009d2a:	69ba      	ldr	r2, [r7, #24]
 8009d2c:	e841 2300 	strex	r3, r2, [r1]
 8009d30:	613b      	str	r3, [r7, #16]
   return(result);
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d1e6      	bne.n	8009d06 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2220      	movs	r2, #32
 8009d3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009d4c:	bf00      	nop
 8009d4e:	3754      	adds	r7, #84	@ 0x54
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b09c      	sub	sp, #112	@ 0x70
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d64:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	69db      	ldr	r3, [r3, #28]
 8009d6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d6e:	d071      	beq.n	8009e54 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009d70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d72:	2200      	movs	r2, #0
 8009d74:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d80:	e853 3f00 	ldrex	r3, [r3]
 8009d84:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009d86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	461a      	mov	r2, r3
 8009d94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d96:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d98:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009d9c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009d9e:	e841 2300 	strex	r3, r2, [r1]
 8009da2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009da4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d1e6      	bne.n	8009d78 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009daa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	3308      	adds	r3, #8
 8009db0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009db4:	e853 3f00 	ldrex	r3, [r3]
 8009db8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dbc:	f023 0301 	bic.w	r3, r3, #1
 8009dc0:	667b      	str	r3, [r7, #100]	@ 0x64
 8009dc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	3308      	adds	r3, #8
 8009dc8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009dca:	647a      	str	r2, [r7, #68]	@ 0x44
 8009dcc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009dd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009dd2:	e841 2300 	strex	r3, r2, [r1]
 8009dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009dd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d1e5      	bne.n	8009daa <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009dde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	3308      	adds	r3, #8
 8009de4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de8:	e853 3f00 	ldrex	r3, [r3]
 8009dec:	623b      	str	r3, [r7, #32]
   return(result);
 8009dee:	6a3b      	ldr	r3, [r7, #32]
 8009df0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009df4:	663b      	str	r3, [r7, #96]	@ 0x60
 8009df6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	3308      	adds	r3, #8
 8009dfc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009dfe:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e06:	e841 2300 	strex	r3, r2, [r1]
 8009e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d1e5      	bne.n	8009dde <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009e12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e14:	2220      	movs	r2, #32
 8009e16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d118      	bne.n	8009e54 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	e853 3f00 	ldrex	r3, [r3]
 8009e2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f023 0310 	bic.w	r3, r3, #16
 8009e36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e40:	61fb      	str	r3, [r7, #28]
 8009e42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e44:	69b9      	ldr	r1, [r7, #24]
 8009e46:	69fa      	ldr	r2, [r7, #28]
 8009e48:	e841 2300 	strex	r3, r2, [r1]
 8009e4c:	617b      	str	r3, [r7, #20]
   return(result);
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d1e6      	bne.n	8009e22 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e56:	2200      	movs	r2, #0
 8009e58:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d107      	bne.n	8009e72 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009e68:	4619      	mov	r1, r3
 8009e6a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009e6c:	f7ff fa74 	bl	8009358 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e70:	e002      	b.n	8009e78 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8009e72:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009e74:	f7f7 f9ca 	bl	800120c <HAL_UART_RxCpltCallback>
}
 8009e78:	bf00      	nop
 8009e7a:	3770      	adds	r7, #112	@ 0x70
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e8c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2201      	movs	r2, #1
 8009e92:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d109      	bne.n	8009eb0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009ea2:	085b      	lsrs	r3, r3, #1
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	68f8      	ldr	r0, [r7, #12]
 8009eaa:	f7ff fa55 	bl	8009358 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009eae:	e002      	b.n	8009eb6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009eb0:	68f8      	ldr	r0, [r7, #12]
 8009eb2:	f7ff fa3d 	bl	8009330 <HAL_UART_RxHalfCpltCallback>
}
 8009eb6:	bf00      	nop
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b086      	sub	sp, #24
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eca:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ed0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ed8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ee4:	2b80      	cmp	r3, #128	@ 0x80
 8009ee6:	d109      	bne.n	8009efc <UART_DMAError+0x3e>
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	2b21      	cmp	r3, #33	@ 0x21
 8009eec:	d106      	bne.n	8009efc <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8009ef6:	6978      	ldr	r0, [r7, #20]
 8009ef8:	f7ff fea4 	bl	8009c44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f06:	2b40      	cmp	r3, #64	@ 0x40
 8009f08:	d109      	bne.n	8009f1e <UART_DMAError+0x60>
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2b22      	cmp	r3, #34	@ 0x22
 8009f0e:	d106      	bne.n	8009f1e <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8009f18:	6978      	ldr	r0, [r7, #20]
 8009f1a:	f7ff feb9 	bl	8009c90 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f24:	f043 0210 	orr.w	r2, r3, #16
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f2e:	6978      	ldr	r0, [r7, #20]
 8009f30:	f7ff fa08 	bl	8009344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f34:	bf00      	nop
 8009f36:	3718      	adds	r7, #24
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009f3c:	b084      	sub	sp, #16
 8009f3e:	b480      	push	{r7}
 8009f40:	b085      	sub	sp, #20
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
 8009f46:	f107 001c 	add.w	r0, r7, #28
 8009f4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009f52:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009f54:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009f56:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8009f5a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8009f5e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8009f62:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8009f66:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009f68:	68fa      	ldr	r2, [r7, #12]
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	685a      	ldr	r2, [r3, #4]
 8009f72:	4b07      	ldr	r3, [pc, #28]	@ (8009f90 <SDMMC_Init+0x54>)
 8009f74:	4013      	ands	r3, r2
 8009f76:	68fa      	ldr	r2, [r7, #12]
 8009f78:	431a      	orrs	r2, r3
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009f7e:	2300      	movs	r3, #0
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3714      	adds	r7, #20
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	b004      	add	sp, #16
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop
 8009f90:	ffff8100 	.word	0xffff8100

08009f94 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	370c      	adds	r7, #12
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr

08009fae <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8009fae:	b480      	push	{r7}
 8009fb0:	b083      	sub	sp, #12
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
 8009fb6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009fc2:	2300      	movs	r3, #0
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	370c      	adds	r7, #12
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2203      	movs	r2, #3
 8009fdc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009fde:	2300      	movs	r3, #0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr

08009fec <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f003 0303 	and.w	r3, r3, #3
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	370c      	adds	r7, #12
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr

0800a008 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a008:	b480      	push	{r7}
 800a00a:	b085      	sub	sp, #20
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a012:	2300      	movs	r3, #0
 800a014:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a026:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a02c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a032:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a034:	68fa      	ldr	r2, [r7, #12]
 800a036:	4313      	orrs	r3, r2
 800a038:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	68da      	ldr	r2, [r3, #12]
 800a03e:	4b06      	ldr	r3, [pc, #24]	@ (800a058 <SDMMC_SendCommand+0x50>)
 800a040:	4013      	ands	r3, r2
 800a042:	68fa      	ldr	r2, [r7, #12]
 800a044:	431a      	orrs	r2, r3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3714      	adds	r7, #20
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr
 800a058:	fffff000 	.word	0xfffff000

0800a05c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	691b      	ldr	r3, [r3, #16]
 800a068:	b2db      	uxtb	r3, r3
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	370c      	adds	r7, #12
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a076:	b480      	push	{r7}
 800a078:	b085      	sub	sp, #20
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	3314      	adds	r3, #20
 800a084:	461a      	mov	r2, r3
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	4413      	add	r3, r2
 800a08a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
}  
 800a090:	4618      	mov	r0, r3
 800a092:	3714      	adds	r7, #20
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr

0800a09c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b085      	sub	sp, #20
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	685a      	ldr	r2, [r3, #4]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a0c2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a0c8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a0ce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a0d0:	68fa      	ldr	r2, [r7, #12]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0da:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	431a      	orrs	r2, r3
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a0e6:	2300      	movs	r3, #0

}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3714      	adds	r7, #20
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b088      	sub	sp, #32
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a102:	2310      	movs	r3, #16
 800a104:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a106:	2340      	movs	r3, #64	@ 0x40
 800a108:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a10a:	2300      	movs	r3, #0
 800a10c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a10e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a112:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a114:	f107 0308 	add.w	r3, r7, #8
 800a118:	4619      	mov	r1, r3
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f7ff ff74 	bl	800a008 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a120:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a124:	2110      	movs	r1, #16
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 fa1a 	bl	800a560 <SDMMC_GetCmdResp1>
 800a12c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a12e:	69fb      	ldr	r3, [r7, #28]
}
 800a130:	4618      	mov	r0, r3
 800a132:	3720      	adds	r7, #32
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b088      	sub	sp, #32
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a146:	2311      	movs	r3, #17
 800a148:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a14a:	2340      	movs	r3, #64	@ 0x40
 800a14c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a14e:	2300      	movs	r3, #0
 800a150:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a152:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a156:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a158:	f107 0308 	add.w	r3, r7, #8
 800a15c:	4619      	mov	r1, r3
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f7ff ff52 	bl	800a008 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a164:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a168:	2111      	movs	r1, #17
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 f9f8 	bl	800a560 <SDMMC_GetCmdResp1>
 800a170:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a172:	69fb      	ldr	r3, [r7, #28]
}
 800a174:	4618      	mov	r0, r3
 800a176:	3720      	adds	r7, #32
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b088      	sub	sp, #32
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a18a:	2312      	movs	r3, #18
 800a18c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a18e:	2340      	movs	r3, #64	@ 0x40
 800a190:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a192:	2300      	movs	r3, #0
 800a194:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a196:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a19a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a19c:	f107 0308 	add.w	r3, r7, #8
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f7ff ff30 	bl	800a008 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a1a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1ac:	2112      	movs	r1, #18
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 f9d6 	bl	800a560 <SDMMC_GetCmdResp1>
 800a1b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1b6:	69fb      	ldr	r3, [r7, #28]
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3720      	adds	r7, #32
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b088      	sub	sp, #32
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a1ce:	2318      	movs	r3, #24
 800a1d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a1d2:	2340      	movs	r3, #64	@ 0x40
 800a1d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a1da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a1e0:	f107 0308 	add.w	r3, r7, #8
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f7ff ff0e 	bl	800a008 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a1ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1f0:	2118      	movs	r1, #24
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 f9b4 	bl	800a560 <SDMMC_GetCmdResp1>
 800a1f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1fa:	69fb      	ldr	r3, [r7, #28]
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3720      	adds	r7, #32
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b088      	sub	sp, #32
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a212:	2319      	movs	r3, #25
 800a214:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a216:	2340      	movs	r3, #64	@ 0x40
 800a218:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a21a:	2300      	movs	r3, #0
 800a21c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a21e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a222:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a224:	f107 0308 	add.w	r3, r7, #8
 800a228:	4619      	mov	r1, r3
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f7ff feec 	bl	800a008 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a230:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a234:	2119      	movs	r1, #25
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 f992 	bl	800a560 <SDMMC_GetCmdResp1>
 800a23c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a23e:	69fb      	ldr	r3, [r7, #28]
}
 800a240:	4618      	mov	r0, r3
 800a242:	3720      	adds	r7, #32
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b088      	sub	sp, #32
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a250:	2300      	movs	r3, #0
 800a252:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a254:	230c      	movs	r3, #12
 800a256:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a258:	2340      	movs	r3, #64	@ 0x40
 800a25a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a25c:	2300      	movs	r3, #0
 800a25e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a260:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a264:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a266:	f107 0308 	add.w	r3, r7, #8
 800a26a:	4619      	mov	r1, r3
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f7ff fecb 	bl	800a008 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a272:	4a05      	ldr	r2, [pc, #20]	@ (800a288 <SDMMC_CmdStopTransfer+0x40>)
 800a274:	210c      	movs	r1, #12
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 f972 	bl	800a560 <SDMMC_GetCmdResp1>
 800a27c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a27e:	69fb      	ldr	r3, [r7, #28]
}
 800a280:	4618      	mov	r0, r3
 800a282:	3720      	adds	r7, #32
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}
 800a288:	05f5e100 	.word	0x05f5e100

0800a28c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b08a      	sub	sp, #40	@ 0x28
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a29c:	2307      	movs	r3, #7
 800a29e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a2a0:	2340      	movs	r3, #64	@ 0x40
 800a2a2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a2a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a2ac:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a2ae:	f107 0310 	add.w	r3, r7, #16
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	68f8      	ldr	r0, [r7, #12]
 800a2b6:	f7ff fea7 	bl	800a008 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a2ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2be:	2107      	movs	r1, #7
 800a2c0:	68f8      	ldr	r0, [r7, #12]
 800a2c2:	f000 f94d 	bl	800a560 <SDMMC_GetCmdResp1>
 800a2c6:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800a2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3728      	adds	r7, #40	@ 0x28
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}

0800a2d2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a2d2:	b580      	push	{r7, lr}
 800a2d4:	b088      	sub	sp, #32
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a2ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a2ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a2f0:	f107 0308 	add.w	r3, r7, #8
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f7ff fe86 	bl	800a008 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 fb67 	bl	800a9d0 <SDMMC_GetCmdError>
 800a302:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a304:	69fb      	ldr	r3, [r7, #28]
}
 800a306:	4618      	mov	r0, r3
 800a308:	3720      	adds	r7, #32
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b088      	sub	sp, #32
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a316:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a31a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a31c:	2308      	movs	r3, #8
 800a31e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a320:	2340      	movs	r3, #64	@ 0x40
 800a322:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a324:	2300      	movs	r3, #0
 800a326:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a328:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a32c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a32e:	f107 0308 	add.w	r3, r7, #8
 800a332:	4619      	mov	r1, r3
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f7ff fe67 	bl	800a008 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 fafa 	bl	800a934 <SDMMC_GetCmdResp7>
 800a340:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a342:	69fb      	ldr	r3, [r7, #28]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3720      	adds	r7, #32
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b088      	sub	sp, #32
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a35a:	2337      	movs	r3, #55	@ 0x37
 800a35c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a35e:	2340      	movs	r3, #64	@ 0x40
 800a360:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a362:	2300      	movs	r3, #0
 800a364:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a366:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a36a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a36c:	f107 0308 	add.w	r3, r7, #8
 800a370:	4619      	mov	r1, r3
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f7ff fe48 	bl	800a008 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a37c:	2137      	movs	r1, #55	@ 0x37
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 f8ee 	bl	800a560 <SDMMC_GetCmdResp1>
 800a384:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a386:	69fb      	ldr	r3, [r7, #28]
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3720      	adds	r7, #32
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b088      	sub	sp, #32
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a39a:	683a      	ldr	r2, [r7, #0]
 800a39c:	4b0d      	ldr	r3, [pc, #52]	@ (800a3d4 <SDMMC_CmdAppOperCommand+0x44>)
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a3a2:	2329      	movs	r3, #41	@ 0x29
 800a3a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a3a6:	2340      	movs	r3, #64	@ 0x40
 800a3a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a3ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a3b4:	f107 0308 	add.w	r3, r7, #8
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f7ff fe24 	bl	800a008 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f000 fa03 	bl	800a7cc <SDMMC_GetCmdResp3>
 800a3c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3c8:	69fb      	ldr	r3, [r7, #28]
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3720      	adds	r7, #32
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	80100000 	.word	0x80100000

0800a3d8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b088      	sub	sp, #32
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a3e6:	2306      	movs	r3, #6
 800a3e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a3ea:	2340      	movs	r3, #64	@ 0x40
 800a3ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a3f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a3f8:	f107 0308 	add.w	r3, r7, #8
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f7ff fe02 	bl	800a008 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a404:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a408:	2106      	movs	r1, #6
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 f8a8 	bl	800a560 <SDMMC_GetCmdResp1>
 800a410:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a412:	69fb      	ldr	r3, [r7, #28]
}
 800a414:	4618      	mov	r0, r3
 800a416:	3720      	adds	r7, #32
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b088      	sub	sp, #32
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a424:	2300      	movs	r3, #0
 800a426:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a428:	2333      	movs	r3, #51	@ 0x33
 800a42a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a42c:	2340      	movs	r3, #64	@ 0x40
 800a42e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a430:	2300      	movs	r3, #0
 800a432:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a434:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a438:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a43a:	f107 0308 	add.w	r3, r7, #8
 800a43e:	4619      	mov	r1, r3
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f7ff fde1 	bl	800a008 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a44a:	2133      	movs	r1, #51	@ 0x33
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 f887 	bl	800a560 <SDMMC_GetCmdResp1>
 800a452:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a454:	69fb      	ldr	r3, [r7, #28]
}
 800a456:	4618      	mov	r0, r3
 800a458:	3720      	adds	r7, #32
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}

0800a45e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a45e:	b580      	push	{r7, lr}
 800a460:	b088      	sub	sp, #32
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a466:	2300      	movs	r3, #0
 800a468:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a46a:	2302      	movs	r3, #2
 800a46c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a46e:	23c0      	movs	r3, #192	@ 0xc0
 800a470:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a472:	2300      	movs	r3, #0
 800a474:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a476:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a47a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a47c:	f107 0308 	add.w	r3, r7, #8
 800a480:	4619      	mov	r1, r3
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f7ff fdc0 	bl	800a008 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f000 f957 	bl	800a73c <SDMMC_GetCmdResp2>
 800a48e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a490:	69fb      	ldr	r3, [r7, #28]
}
 800a492:	4618      	mov	r0, r3
 800a494:	3720      	adds	r7, #32
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b088      	sub	sp, #32
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
 800a4a2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a4a8:	2309      	movs	r3, #9
 800a4aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a4ac:	23c0      	movs	r3, #192	@ 0xc0
 800a4ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a4b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a4ba:	f107 0308 	add.w	r3, r7, #8
 800a4be:	4619      	mov	r1, r3
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f7ff fda1 	bl	800a008 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 f938 	bl	800a73c <SDMMC_GetCmdResp2>
 800a4cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4ce:	69fb      	ldr	r3, [r7, #28]
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3720      	adds	r7, #32
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b088      	sub	sp, #32
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a4e6:	2303      	movs	r3, #3
 800a4e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a4ea:	2340      	movs	r3, #64	@ 0x40
 800a4ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a4f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a4f8:	f107 0308 	add.w	r3, r7, #8
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f7ff fd82 	bl	800a008 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a504:	683a      	ldr	r2, [r7, #0]
 800a506:	2103      	movs	r1, #3
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 f99d 	bl	800a848 <SDMMC_GetCmdResp6>
 800a50e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a510:	69fb      	ldr	r3, [r7, #28]
}
 800a512:	4618      	mov	r0, r3
 800a514:	3720      	adds	r7, #32
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}

0800a51a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a51a:	b580      	push	{r7, lr}
 800a51c:	b088      	sub	sp, #32
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
 800a522:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a528:	230d      	movs	r3, #13
 800a52a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a52c:	2340      	movs	r3, #64	@ 0x40
 800a52e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a530:	2300      	movs	r3, #0
 800a532:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a534:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a538:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a53a:	f107 0308 	add.w	r3, r7, #8
 800a53e:	4619      	mov	r1, r3
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f7ff fd61 	bl	800a008 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a54a:	210d      	movs	r1, #13
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 f807 	bl	800a560 <SDMMC_GetCmdResp1>
 800a552:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a554:	69fb      	ldr	r3, [r7, #28]
}
 800a556:	4618      	mov	r0, r3
 800a558:	3720      	adds	r7, #32
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
	...

0800a560 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b088      	sub	sp, #32
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	460b      	mov	r3, r1
 800a56a:	607a      	str	r2, [r7, #4]
 800a56c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a56e:	4b70      	ldr	r3, [pc, #448]	@ (800a730 <SDMMC_GetCmdResp1+0x1d0>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4a70      	ldr	r2, [pc, #448]	@ (800a734 <SDMMC_GetCmdResp1+0x1d4>)
 800a574:	fba2 2303 	umull	r2, r3, r2, r3
 800a578:	0a5a      	lsrs	r2, r3, #9
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	fb02 f303 	mul.w	r3, r2, r3
 800a580:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a582:	69fb      	ldr	r3, [r7, #28]
 800a584:	1e5a      	subs	r2, r3, #1
 800a586:	61fa      	str	r2, [r7, #28]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d102      	bne.n	800a592 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a58c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a590:	e0c9      	b.n	800a726 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a596:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d0ef      	beq.n	800a582 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d1ea      	bne.n	800a582 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5b0:	f003 0304 	and.w	r3, r3, #4
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d004      	beq.n	800a5c2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2204      	movs	r2, #4
 800a5bc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5be:	2304      	movs	r3, #4
 800a5c0:	e0b1      	b.n	800a726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5c6:	f003 0301 	and.w	r3, r3, #1
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d004      	beq.n	800a5d8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	e0a6      	b.n	800a726 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	22c5      	movs	r2, #197	@ 0xc5
 800a5dc:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a5de:	68f8      	ldr	r0, [r7, #12]
 800a5e0:	f7ff fd3c 	bl	800a05c <SDMMC_GetCommandResponse>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	7afb      	ldrb	r3, [r7, #11]
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d001      	beq.n	800a5f2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	e099      	b.n	800a726 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a5f2:	2100      	movs	r1, #0
 800a5f4:	68f8      	ldr	r0, [r7, #12]
 800a5f6:	f7ff fd3e 	bl	800a076 <SDMMC_GetResponse>
 800a5fa:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a5fc:	697a      	ldr	r2, [r7, #20]
 800a5fe:	4b4e      	ldr	r3, [pc, #312]	@ (800a738 <SDMMC_GetCmdResp1+0x1d8>)
 800a600:	4013      	ands	r3, r2
 800a602:	2b00      	cmp	r3, #0
 800a604:	d101      	bne.n	800a60a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a606:	2300      	movs	r3, #0
 800a608:	e08d      	b.n	800a726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	da02      	bge.n	800a616 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a610:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a614:	e087      	b.n	800a726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d001      	beq.n	800a624 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a620:	2340      	movs	r3, #64	@ 0x40
 800a622:	e080      	b.n	800a726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d001      	beq.n	800a632 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a62e:	2380      	movs	r3, #128	@ 0x80
 800a630:	e079      	b.n	800a726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d002      	beq.n	800a642 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a63c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a640:	e071      	b.n	800a726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d002      	beq.n	800a652 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a64c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a650:	e069      	b.n	800a726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d002      	beq.n	800a662 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a65c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a660:	e061      	b.n	800a726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d002      	beq.n	800a672 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a66c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a670:	e059      	b.n	800a726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d002      	beq.n	800a682 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a67c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a680:	e051      	b.n	800a726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d002      	beq.n	800a692 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a68c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a690:	e049      	b.n	800a726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d002      	beq.n	800a6a2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a69c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a6a0:	e041      	b.n	800a726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d002      	beq.n	800a6b2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a6ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a6b0:	e039      	b.n	800a726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d002      	beq.n	800a6c2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a6bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a6c0:	e031      	b.n	800a726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d002      	beq.n	800a6d2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a6cc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a6d0:	e029      	b.n	800a726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d002      	beq.n	800a6e2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a6dc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a6e0:	e021      	b.n	800a726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d002      	beq.n	800a6f2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a6ec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a6f0:	e019      	b.n	800a726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d002      	beq.n	800a702 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a6fc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a700:	e011      	b.n	800a726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d002      	beq.n	800a712 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a70c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a710:	e009      	b.n	800a726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	f003 0308 	and.w	r3, r3, #8
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d002      	beq.n	800a722 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a71c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a720:	e001      	b.n	800a726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a722:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a726:	4618      	mov	r0, r3
 800a728:	3720      	adds	r7, #32
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	20000000 	.word	0x20000000
 800a734:	10624dd3 	.word	0x10624dd3
 800a738:	fdffe008 	.word	0xfdffe008

0800a73c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b085      	sub	sp, #20
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a744:	4b1f      	ldr	r3, [pc, #124]	@ (800a7c4 <SDMMC_GetCmdResp2+0x88>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a1f      	ldr	r2, [pc, #124]	@ (800a7c8 <SDMMC_GetCmdResp2+0x8c>)
 800a74a:	fba2 2303 	umull	r2, r3, r2, r3
 800a74e:	0a5b      	lsrs	r3, r3, #9
 800a750:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a754:	fb02 f303 	mul.w	r3, r2, r3
 800a758:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	1e5a      	subs	r2, r3, #1
 800a75e:	60fa      	str	r2, [r7, #12]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d102      	bne.n	800a76a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a764:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a768:	e026      	b.n	800a7b8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a76e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a776:	2b00      	cmp	r3, #0
 800a778:	d0ef      	beq.n	800a75a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a780:	2b00      	cmp	r3, #0
 800a782:	d1ea      	bne.n	800a75a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a788:	f003 0304 	and.w	r3, r3, #4
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d004      	beq.n	800a79a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2204      	movs	r2, #4
 800a794:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a796:	2304      	movs	r3, #4
 800a798:	e00e      	b.n	800a7b8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a79e:	f003 0301 	and.w	r3, r3, #1
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d004      	beq.n	800a7b0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	e003      	b.n	800a7b8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	22c5      	movs	r2, #197	@ 0xc5
 800a7b4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a7b6:	2300      	movs	r3, #0
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3714      	adds	r7, #20
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr
 800a7c4:	20000000 	.word	0x20000000
 800a7c8:	10624dd3 	.word	0x10624dd3

0800a7cc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b085      	sub	sp, #20
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a7d4:	4b1a      	ldr	r3, [pc, #104]	@ (800a840 <SDMMC_GetCmdResp3+0x74>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4a1a      	ldr	r2, [pc, #104]	@ (800a844 <SDMMC_GetCmdResp3+0x78>)
 800a7da:	fba2 2303 	umull	r2, r3, r2, r3
 800a7de:	0a5b      	lsrs	r3, r3, #9
 800a7e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7e4:	fb02 f303 	mul.w	r3, r2, r3
 800a7e8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	1e5a      	subs	r2, r3, #1
 800a7ee:	60fa      	str	r2, [r7, #12]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d102      	bne.n	800a7fa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a7f4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a7f8:	e01b      	b.n	800a832 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7fe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a806:	2b00      	cmp	r3, #0
 800a808:	d0ef      	beq.n	800a7ea <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a810:	2b00      	cmp	r3, #0
 800a812:	d1ea      	bne.n	800a7ea <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a818:	f003 0304 	and.w	r3, r3, #4
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d004      	beq.n	800a82a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2204      	movs	r2, #4
 800a824:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a826:	2304      	movs	r3, #4
 800a828:	e003      	b.n	800a832 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	22c5      	movs	r2, #197	@ 0xc5
 800a82e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a830:	2300      	movs	r3, #0
}
 800a832:	4618      	mov	r0, r3
 800a834:	3714      	adds	r7, #20
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr
 800a83e:	bf00      	nop
 800a840:	20000000 	.word	0x20000000
 800a844:	10624dd3 	.word	0x10624dd3

0800a848 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b088      	sub	sp, #32
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	460b      	mov	r3, r1
 800a852:	607a      	str	r2, [r7, #4]
 800a854:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a856:	4b35      	ldr	r3, [pc, #212]	@ (800a92c <SDMMC_GetCmdResp6+0xe4>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4a35      	ldr	r2, [pc, #212]	@ (800a930 <SDMMC_GetCmdResp6+0xe8>)
 800a85c:	fba2 2303 	umull	r2, r3, r2, r3
 800a860:	0a5b      	lsrs	r3, r3, #9
 800a862:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a866:	fb02 f303 	mul.w	r3, r2, r3
 800a86a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a86c:	69fb      	ldr	r3, [r7, #28]
 800a86e:	1e5a      	subs	r2, r3, #1
 800a870:	61fa      	str	r2, [r7, #28]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d102      	bne.n	800a87c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a876:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a87a:	e052      	b.n	800a922 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a880:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a882:	69bb      	ldr	r3, [r7, #24]
 800a884:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d0ef      	beq.n	800a86c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a88c:	69bb      	ldr	r3, [r7, #24]
 800a88e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a892:	2b00      	cmp	r3, #0
 800a894:	d1ea      	bne.n	800a86c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a89a:	f003 0304 	and.w	r3, r3, #4
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d004      	beq.n	800a8ac <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2204      	movs	r2, #4
 800a8a6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a8a8:	2304      	movs	r3, #4
 800a8aa:	e03a      	b.n	800a922 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8b0:	f003 0301 	and.w	r3, r3, #1
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d004      	beq.n	800a8c2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e02f      	b.n	800a922 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f7ff fbca 	bl	800a05c <SDMMC_GetCommandResponse>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	7afb      	ldrb	r3, [r7, #11]
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d001      	beq.n	800a8d6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e025      	b.n	800a922 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	22c5      	movs	r2, #197	@ 0xc5
 800a8da:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a8dc:	2100      	movs	r1, #0
 800a8de:	68f8      	ldr	r0, [r7, #12]
 800a8e0:	f7ff fbc9 	bl	800a076 <SDMMC_GetResponse>
 800a8e4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d106      	bne.n	800a8fe <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	0c1b      	lsrs	r3, r3, #16
 800a8f4:	b29a      	uxth	r2, r3
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	e011      	b.n	800a922 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a904:	2b00      	cmp	r3, #0
 800a906:	d002      	beq.n	800a90e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a908:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a90c:	e009      	b.n	800a922 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a914:	2b00      	cmp	r3, #0
 800a916:	d002      	beq.n	800a91e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a918:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a91c:	e001      	b.n	800a922 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a91e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a922:	4618      	mov	r0, r3
 800a924:	3720      	adds	r7, #32
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
 800a92a:	bf00      	nop
 800a92c:	20000000 	.word	0x20000000
 800a930:	10624dd3 	.word	0x10624dd3

0800a934 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a934:	b480      	push	{r7}
 800a936:	b085      	sub	sp, #20
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a93c:	4b22      	ldr	r3, [pc, #136]	@ (800a9c8 <SDMMC_GetCmdResp7+0x94>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4a22      	ldr	r2, [pc, #136]	@ (800a9cc <SDMMC_GetCmdResp7+0x98>)
 800a942:	fba2 2303 	umull	r2, r3, r2, r3
 800a946:	0a5b      	lsrs	r3, r3, #9
 800a948:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a94c:	fb02 f303 	mul.w	r3, r2, r3
 800a950:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	1e5a      	subs	r2, r3, #1
 800a956:	60fa      	str	r2, [r7, #12]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d102      	bne.n	800a962 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a95c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a960:	e02c      	b.n	800a9bc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a966:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d0ef      	beq.n	800a952 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d1ea      	bne.n	800a952 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a980:	f003 0304 	and.w	r3, r3, #4
 800a984:	2b00      	cmp	r3, #0
 800a986:	d004      	beq.n	800a992 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2204      	movs	r2, #4
 800a98c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a98e:	2304      	movs	r3, #4
 800a990:	e014      	b.n	800a9bc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a996:	f003 0301 	and.w	r3, r3, #1
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d004      	beq.n	800a9a8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	e009      	b.n	800a9bc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d002      	beq.n	800a9ba <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2240      	movs	r2, #64	@ 0x40
 800a9b8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a9ba:	2300      	movs	r3, #0
  
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3714      	adds	r7, #20
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr
 800a9c8:	20000000 	.word	0x20000000
 800a9cc:	10624dd3 	.word	0x10624dd3

0800a9d0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b085      	sub	sp, #20
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a9d8:	4b11      	ldr	r3, [pc, #68]	@ (800aa20 <SDMMC_GetCmdError+0x50>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4a11      	ldr	r2, [pc, #68]	@ (800aa24 <SDMMC_GetCmdError+0x54>)
 800a9de:	fba2 2303 	umull	r2, r3, r2, r3
 800a9e2:	0a5b      	lsrs	r3, r3, #9
 800a9e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9e8:	fb02 f303 	mul.w	r3, r2, r3
 800a9ec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	1e5a      	subs	r2, r3, #1
 800a9f2:	60fa      	str	r2, [r7, #12]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d102      	bne.n	800a9fe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a9f8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a9fc:	e009      	b.n	800aa12 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d0f1      	beq.n	800a9ee <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	22c5      	movs	r2, #197	@ 0xc5
 800aa0e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800aa10:	2300      	movs	r3, #0
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3714      	adds	r7, #20
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr
 800aa1e:	bf00      	nop
 800aa20:	20000000 	.word	0x20000000
 800aa24:	10624dd3 	.word	0x10624dd3

0800aa28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aa28:	b084      	sub	sp, #16
 800aa2a:	b580      	push	{r7, lr}
 800aa2c:	b084      	sub	sp, #16
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
 800aa32:	f107 001c 	add.w	r0, r7, #28
 800aa36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aa3a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d127      	bne.n	800aa92 <USB_CoreInit+0x6a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa46:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	68da      	ldr	r2, [r3, #12]
 800aa52:	4b3a      	ldr	r3, [pc, #232]	@ (800ab3c <USB_CoreInit+0x114>)
 800aa54:	4013      	ands	r3, r2
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	f043 0210 	orr.w	r2, r3, #16
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	68db      	ldr	r3, [r3, #12]
 800aa6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800aa72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	d105      	bne.n	800aa86 <USB_CoreInit+0x5e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	68db      	ldr	r3, [r3, #12]
 800aa7e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f001 fb1c 	bl	800c0c4 <USB_CoreReset>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	73fb      	strb	r3, [r7, #15]
 800aa90:	e03c      	b.n	800ab0c <USB_CoreInit+0xe4>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800aa92:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800aa96:	2b03      	cmp	r3, #3
 800aa98:	d127      	bne.n	800aaea <USB_CoreInit+0xc2>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa9e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	68da      	ldr	r2, [r3, #12]
 800aaaa:	4b24      	ldr	r3, [pc, #144]	@ (800ab3c <USB_CoreInit+0x114>)
 800aaac:	4013      	ands	r3, r2
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	68db      	ldr	r3, [r3, #12]
 800aab6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	68db      	ldr	r3, [r3, #12]
 800aac2:	f023 0210 	bic.w	r2, r3, #16
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 800aaca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d105      	bne.n	800aade <USB_CoreInit+0xb6>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f001 faf0 	bl	800c0c4 <USB_CoreReset>
 800aae4:	4603      	mov	r3, r0
 800aae6:	73fb      	strb	r3, [r7, #15]
 800aae8:	e010      	b.n	800ab0c <USB_CoreInit+0xe4>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	68db      	ldr	r3, [r3, #12]
 800aaee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f001 fae4 	bl	800c0c4 <USB_CoreReset>
 800aafc:	4603      	mov	r3, r0
 800aafe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab04:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800ab0c:	7fbb      	ldrb	r3, [r7, #30]
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	d10b      	bne.n	800ab2a <USB_CoreInit+0x102>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	689b      	ldr	r3, [r3, #8]
 800ab16:	f043 0206 	orr.w	r2, r3, #6
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	f043 0220 	orr.w	r2, r3, #32
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ab2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3710      	adds	r7, #16
 800ab30:	46bd      	mov	sp, r7
 800ab32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab36:	b004      	add	sp, #16
 800ab38:	4770      	bx	lr
 800ab3a:	bf00      	nop
 800ab3c:	ffbdffbf 	.word	0xffbdffbf

0800ab40 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b087      	sub	sp, #28
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	60b9      	str	r1, [r7, #8]
 800ab4a:	4613      	mov	r3, r2
 800ab4c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ab4e:	79fb      	ldrb	r3, [r7, #7]
 800ab50:	2b02      	cmp	r3, #2
 800ab52:	d165      	bne.n	800ac20 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	4a41      	ldr	r2, [pc, #260]	@ (800ac5c <USB_SetTurnaroundTime+0x11c>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d906      	bls.n	800ab6a <USB_SetTurnaroundTime+0x2a>
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	4a40      	ldr	r2, [pc, #256]	@ (800ac60 <USB_SetTurnaroundTime+0x120>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d202      	bcs.n	800ab6a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ab64:	230f      	movs	r3, #15
 800ab66:	617b      	str	r3, [r7, #20]
 800ab68:	e062      	b.n	800ac30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	4a3c      	ldr	r2, [pc, #240]	@ (800ac60 <USB_SetTurnaroundTime+0x120>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d306      	bcc.n	800ab80 <USB_SetTurnaroundTime+0x40>
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	4a3b      	ldr	r2, [pc, #236]	@ (800ac64 <USB_SetTurnaroundTime+0x124>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d202      	bcs.n	800ab80 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ab7a:	230e      	movs	r3, #14
 800ab7c:	617b      	str	r3, [r7, #20]
 800ab7e:	e057      	b.n	800ac30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	4a38      	ldr	r2, [pc, #224]	@ (800ac64 <USB_SetTurnaroundTime+0x124>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d306      	bcc.n	800ab96 <USB_SetTurnaroundTime+0x56>
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	4a37      	ldr	r2, [pc, #220]	@ (800ac68 <USB_SetTurnaroundTime+0x128>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d202      	bcs.n	800ab96 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ab90:	230d      	movs	r3, #13
 800ab92:	617b      	str	r3, [r7, #20]
 800ab94:	e04c      	b.n	800ac30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	4a33      	ldr	r2, [pc, #204]	@ (800ac68 <USB_SetTurnaroundTime+0x128>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d306      	bcc.n	800abac <USB_SetTurnaroundTime+0x6c>
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	4a32      	ldr	r2, [pc, #200]	@ (800ac6c <USB_SetTurnaroundTime+0x12c>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d802      	bhi.n	800abac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800aba6:	230c      	movs	r3, #12
 800aba8:	617b      	str	r3, [r7, #20]
 800abaa:	e041      	b.n	800ac30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	4a2f      	ldr	r2, [pc, #188]	@ (800ac6c <USB_SetTurnaroundTime+0x12c>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d906      	bls.n	800abc2 <USB_SetTurnaroundTime+0x82>
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	4a2e      	ldr	r2, [pc, #184]	@ (800ac70 <USB_SetTurnaroundTime+0x130>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d802      	bhi.n	800abc2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800abbc:	230b      	movs	r3, #11
 800abbe:	617b      	str	r3, [r7, #20]
 800abc0:	e036      	b.n	800ac30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	4a2a      	ldr	r2, [pc, #168]	@ (800ac70 <USB_SetTurnaroundTime+0x130>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d906      	bls.n	800abd8 <USB_SetTurnaroundTime+0x98>
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	4a29      	ldr	r2, [pc, #164]	@ (800ac74 <USB_SetTurnaroundTime+0x134>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d802      	bhi.n	800abd8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800abd2:	230a      	movs	r3, #10
 800abd4:	617b      	str	r3, [r7, #20]
 800abd6:	e02b      	b.n	800ac30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	4a26      	ldr	r2, [pc, #152]	@ (800ac74 <USB_SetTurnaroundTime+0x134>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d906      	bls.n	800abee <USB_SetTurnaroundTime+0xae>
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	4a25      	ldr	r2, [pc, #148]	@ (800ac78 <USB_SetTurnaroundTime+0x138>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d202      	bcs.n	800abee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800abe8:	2309      	movs	r3, #9
 800abea:	617b      	str	r3, [r7, #20]
 800abec:	e020      	b.n	800ac30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	4a21      	ldr	r2, [pc, #132]	@ (800ac78 <USB_SetTurnaroundTime+0x138>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d306      	bcc.n	800ac04 <USB_SetTurnaroundTime+0xc4>
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	4a20      	ldr	r2, [pc, #128]	@ (800ac7c <USB_SetTurnaroundTime+0x13c>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d802      	bhi.n	800ac04 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800abfe:	2308      	movs	r3, #8
 800ac00:	617b      	str	r3, [r7, #20]
 800ac02:	e015      	b.n	800ac30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	4a1d      	ldr	r2, [pc, #116]	@ (800ac7c <USB_SetTurnaroundTime+0x13c>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d906      	bls.n	800ac1a <USB_SetTurnaroundTime+0xda>
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	4a1c      	ldr	r2, [pc, #112]	@ (800ac80 <USB_SetTurnaroundTime+0x140>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d202      	bcs.n	800ac1a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ac14:	2307      	movs	r3, #7
 800ac16:	617b      	str	r3, [r7, #20]
 800ac18:	e00a      	b.n	800ac30 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ac1a:	2306      	movs	r3, #6
 800ac1c:	617b      	str	r3, [r7, #20]
 800ac1e:	e007      	b.n	800ac30 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ac20:	79fb      	ldrb	r3, [r7, #7]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d102      	bne.n	800ac2c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ac26:	2309      	movs	r3, #9
 800ac28:	617b      	str	r3, [r7, #20]
 800ac2a:	e001      	b.n	800ac30 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ac2c:	2309      	movs	r3, #9
 800ac2e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	68db      	ldr	r3, [r3, #12]
 800ac34:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	68da      	ldr	r2, [r3, #12]
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	029b      	lsls	r3, r3, #10
 800ac44:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800ac48:	431a      	orrs	r2, r3
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ac4e:	2300      	movs	r3, #0
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	371c      	adds	r7, #28
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr
 800ac5c:	00d8acbf 	.word	0x00d8acbf
 800ac60:	00e4e1c0 	.word	0x00e4e1c0
 800ac64:	00f42400 	.word	0x00f42400
 800ac68:	01067380 	.word	0x01067380
 800ac6c:	011a499f 	.word	0x011a499f
 800ac70:	01312cff 	.word	0x01312cff
 800ac74:	014ca43f 	.word	0x014ca43f
 800ac78:	016e3600 	.word	0x016e3600
 800ac7c:	01a6ab1f 	.word	0x01a6ab1f
 800ac80:	01e84800 	.word	0x01e84800

0800ac84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b083      	sub	sp, #12
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	f043 0201 	orr.w	r2, r3, #1
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ac98:	2300      	movs	r3, #0
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	370c      	adds	r7, #12
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr

0800aca6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aca6:	b480      	push	{r7}
 800aca8:	b083      	sub	sp, #12
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	689b      	ldr	r3, [r3, #8]
 800acb2:	f023 0201 	bic.w	r2, r3, #1
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800acba:	2300      	movs	r3, #0
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	370c      	adds	r7, #12
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	460b      	mov	r3, r1
 800acd2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800acd4:	2300      	movs	r3, #0
 800acd6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	68db      	ldr	r3, [r3, #12]
 800acdc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ace4:	78fb      	ldrb	r3, [r7, #3]
 800ace6:	2b01      	cmp	r3, #1
 800ace8:	d115      	bne.n	800ad16 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800acf6:	200a      	movs	r0, #10
 800acf8:	f7f7 ff90 	bl	8002c1c <HAL_Delay>
      ms += 10U;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	330a      	adds	r3, #10
 800ad00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f001 f94d 	bl	800bfa2 <USB_GetMode>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d01e      	beq.n	800ad4c <USB_SetCurrentMode+0x84>
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	2bc7      	cmp	r3, #199	@ 0xc7
 800ad12:	d9f0      	bls.n	800acf6 <USB_SetCurrentMode+0x2e>
 800ad14:	e01a      	b.n	800ad4c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ad16:	78fb      	ldrb	r3, [r7, #3]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d115      	bne.n	800ad48 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	68db      	ldr	r3, [r3, #12]
 800ad20:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ad28:	200a      	movs	r0, #10
 800ad2a:	f7f7 ff77 	bl	8002c1c <HAL_Delay>
      ms += 10U;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	330a      	adds	r3, #10
 800ad32:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f001 f934 	bl	800bfa2 <USB_GetMode>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d005      	beq.n	800ad4c <USB_SetCurrentMode+0x84>
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2bc7      	cmp	r3, #199	@ 0xc7
 800ad44:	d9f0      	bls.n	800ad28 <USB_SetCurrentMode+0x60>
 800ad46:	e001      	b.n	800ad4c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	e005      	b.n	800ad58 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2bc8      	cmp	r3, #200	@ 0xc8
 800ad50:	d101      	bne.n	800ad56 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ad52:	2301      	movs	r3, #1
 800ad54:	e000      	b.n	800ad58 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ad56:	2300      	movs	r3, #0
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3710      	adds	r7, #16
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ad60:	b084      	sub	sp, #16
 800ad62:	b580      	push	{r7, lr}
 800ad64:	b086      	sub	sp, #24
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
 800ad6a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ad6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ad72:	2300      	movs	r3, #0
 800ad74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	613b      	str	r3, [r7, #16]
 800ad7e:	e009      	b.n	800ad94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	3340      	adds	r3, #64	@ 0x40
 800ad86:	009b      	lsls	r3, r3, #2
 800ad88:	4413      	add	r3, r2
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	3301      	adds	r3, #1
 800ad92:	613b      	str	r3, [r7, #16]
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	2b0e      	cmp	r3, #14
 800ad98:	d9f2      	bls.n	800ad80 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ad9a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d11c      	bne.n	800addc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	68fa      	ldr	r2, [r7, #12]
 800adac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800adb0:	f043 0302 	orr.w	r3, r3, #2
 800adb4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adba:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	601a      	str	r2, [r3, #0]
 800adda:	e005      	b.n	800ade8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ade0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800adee:	461a      	mov	r2, r3
 800adf0:	2300      	movs	r3, #0
 800adf2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800adf4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d10d      	bne.n	800ae18 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800adfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d104      	bne.n	800ae0e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ae04:	2100      	movs	r1, #0
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 f97a 	bl	800b100 <USB_SetDevSpeed>
 800ae0c:	e01a      	b.n	800ae44 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ae0e:	2101      	movs	r1, #1
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 f975 	bl	800b100 <USB_SetDevSpeed>
 800ae16:	e015      	b.n	800ae44 <USB_DevInit+0xe4>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800ae18:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800ae1c:	2b03      	cmp	r3, #3
 800ae1e:	d10d      	bne.n	800ae3c <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ae20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d104      	bne.n	800ae32 <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ae28:	2100      	movs	r1, #0
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 f968 	bl	800b100 <USB_SetDevSpeed>
 800ae30:	e008      	b.n	800ae44 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ae32:	2101      	movs	r1, #1
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f000 f963 	bl	800b100 <USB_SetDevSpeed>
 800ae3a:	e003      	b.n	800ae44 <USB_DevInit+0xe4>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ae3c:	2103      	movs	r1, #3
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 f95e 	bl	800b100 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ae44:	2110      	movs	r1, #16
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 f8fa 	bl	800b040 <USB_FlushTxFifo>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d001      	beq.n	800ae56 <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 800ae52:	2301      	movs	r3, #1
 800ae54:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f000 f924 	bl	800b0a4 <USB_FlushRxFifo>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d001      	beq.n	800ae66 <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 800ae62:	2301      	movs	r3, #1
 800ae64:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	2300      	movs	r3, #0
 800ae70:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae78:	461a      	mov	r2, r3
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae84:	461a      	mov	r2, r3
 800ae86:	2300      	movs	r3, #0
 800ae88:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	613b      	str	r3, [r7, #16]
 800ae8e:	e043      	b.n	800af18 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	015a      	lsls	r2, r3, #5
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	4413      	add	r3, r2
 800ae98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aea2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aea6:	d118      	bne.n	800aeda <USB_DevInit+0x17a>
    {
      if (i == 0U)
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d10a      	bne.n	800aec4 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	015a      	lsls	r2, r3, #5
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	4413      	add	r3, r2
 800aeb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aeba:	461a      	mov	r2, r3
 800aebc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800aec0:	6013      	str	r3, [r2, #0]
 800aec2:	e013      	b.n	800aeec <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	015a      	lsls	r2, r3, #5
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	4413      	add	r3, r2
 800aecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aed0:	461a      	mov	r2, r3
 800aed2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800aed6:	6013      	str	r3, [r2, #0]
 800aed8:	e008      	b.n	800aeec <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	015a      	lsls	r2, r3, #5
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	4413      	add	r3, r2
 800aee2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aee6:	461a      	mov	r2, r3
 800aee8:	2300      	movs	r3, #0
 800aeea:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	015a      	lsls	r2, r3, #5
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	4413      	add	r3, r2
 800aef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aef8:	461a      	mov	r2, r3
 800aefa:	2300      	movs	r3, #0
 800aefc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	015a      	lsls	r2, r3, #5
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	4413      	add	r3, r2
 800af06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af0a:	461a      	mov	r2, r3
 800af0c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800af10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	3301      	adds	r3, #1
 800af16:	613b      	str	r3, [r7, #16]
 800af18:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800af1c:	461a      	mov	r2, r3
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	4293      	cmp	r3, r2
 800af22:	d3b5      	bcc.n	800ae90 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af24:	2300      	movs	r3, #0
 800af26:	613b      	str	r3, [r7, #16]
 800af28:	e043      	b.n	800afb2 <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	015a      	lsls	r2, r3, #5
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	4413      	add	r3, r2
 800af32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800af3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af40:	d118      	bne.n	800af74 <USB_DevInit+0x214>
    {
      if (i == 0U)
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d10a      	bne.n	800af5e <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	015a      	lsls	r2, r3, #5
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	4413      	add	r3, r2
 800af50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af54:	461a      	mov	r2, r3
 800af56:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800af5a:	6013      	str	r3, [r2, #0]
 800af5c:	e013      	b.n	800af86 <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	015a      	lsls	r2, r3, #5
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	4413      	add	r3, r2
 800af66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af6a:	461a      	mov	r2, r3
 800af6c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800af70:	6013      	str	r3, [r2, #0]
 800af72:	e008      	b.n	800af86 <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	015a      	lsls	r2, r3, #5
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	4413      	add	r3, r2
 800af7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af80:	461a      	mov	r2, r3
 800af82:	2300      	movs	r3, #0
 800af84:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	015a      	lsls	r2, r3, #5
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	4413      	add	r3, r2
 800af8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af92:	461a      	mov	r2, r3
 800af94:	2300      	movs	r3, #0
 800af96:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	015a      	lsls	r2, r3, #5
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	4413      	add	r3, r2
 800afa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afa4:	461a      	mov	r2, r3
 800afa6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800afaa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	3301      	adds	r3, #1
 800afb0:	613b      	str	r3, [r7, #16]
 800afb2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800afb6:	461a      	mov	r2, r3
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	4293      	cmp	r3, r2
 800afbc:	d3b5      	bcc.n	800af2a <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800afc4:	691b      	ldr	r3, [r3, #16]
 800afc6:	68fa      	ldr	r2, [r7, #12]
 800afc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800afcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800afd0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2200      	movs	r2, #0
 800afd6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800afde:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800afe0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d105      	bne.n	800aff4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	699b      	ldr	r3, [r3, #24]
 800afec:	f043 0210 	orr.w	r2, r3, #16
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	699a      	ldr	r2, [r3, #24]
 800aff8:	4b0f      	ldr	r3, [pc, #60]	@ (800b038 <USB_DevInit+0x2d8>)
 800affa:	4313      	orrs	r3, r2
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b000:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b004:	2b00      	cmp	r3, #0
 800b006:	d005      	beq.n	800b014 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	699b      	ldr	r3, [r3, #24]
 800b00c:	f043 0208 	orr.w	r2, r3, #8
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b014:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d105      	bne.n	800b028 <USB_DevInit+0x2c8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	699a      	ldr	r2, [r3, #24]
 800b020:	4b06      	ldr	r3, [pc, #24]	@ (800b03c <USB_DevInit+0x2dc>)
 800b022:	4313      	orrs	r3, r2
 800b024:	687a      	ldr	r2, [r7, #4]
 800b026:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b028:	7dfb      	ldrb	r3, [r7, #23]
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3718      	adds	r7, #24
 800b02e:	46bd      	mov	sp, r7
 800b030:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b034:	b004      	add	sp, #16
 800b036:	4770      	bx	lr
 800b038:	803c3800 	.word	0x803c3800
 800b03c:	40000004 	.word	0x40000004

0800b040 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b040:	b480      	push	{r7}
 800b042:	b085      	sub	sp, #20
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b04a:	2300      	movs	r3, #0
 800b04c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	3301      	adds	r3, #1
 800b052:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b05a:	d901      	bls.n	800b060 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b05c:	2303      	movs	r3, #3
 800b05e:	e01b      	b.n	800b098 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	691b      	ldr	r3, [r3, #16]
 800b064:	2b00      	cmp	r3, #0
 800b066:	daf2      	bge.n	800b04e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b068:	2300      	movs	r3, #0
 800b06a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	019b      	lsls	r3, r3, #6
 800b070:	f043 0220 	orr.w	r2, r3, #32
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	3301      	adds	r3, #1
 800b07c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b084:	d901      	bls.n	800b08a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b086:	2303      	movs	r3, #3
 800b088:	e006      	b.n	800b098 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	691b      	ldr	r3, [r3, #16]
 800b08e:	f003 0320 	and.w	r3, r3, #32
 800b092:	2b20      	cmp	r3, #32
 800b094:	d0f0      	beq.n	800b078 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b096:	2300      	movs	r3, #0
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3714      	adds	r7, #20
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr

0800b0a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b085      	sub	sp, #20
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b0bc:	d901      	bls.n	800b0c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b0be:	2303      	movs	r3, #3
 800b0c0:	e018      	b.n	800b0f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	691b      	ldr	r3, [r3, #16]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	daf2      	bge.n	800b0b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2210      	movs	r2, #16
 800b0d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b0e0:	d901      	bls.n	800b0e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b0e2:	2303      	movs	r3, #3
 800b0e4:	e006      	b.n	800b0f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	691b      	ldr	r3, [r3, #16]
 800b0ea:	f003 0310 	and.w	r3, r3, #16
 800b0ee:	2b10      	cmp	r3, #16
 800b0f0:	d0f0      	beq.n	800b0d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b0f2:	2300      	movs	r3, #0
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3714      	adds	r7, #20
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr

0800b100 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b100:	b480      	push	{r7}
 800b102:	b085      	sub	sp, #20
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	460b      	mov	r3, r1
 800b10a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	78fb      	ldrb	r3, [r7, #3]
 800b11a:	68f9      	ldr	r1, [r7, #12]
 800b11c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b120:	4313      	orrs	r3, r2
 800b122:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b124:	2300      	movs	r3, #0
}
 800b126:	4618      	mov	r0, r3
 800b128:	3714      	adds	r7, #20
 800b12a:	46bd      	mov	sp, r7
 800b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b130:	4770      	bx	lr

0800b132 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800b132:	b480      	push	{r7}
 800b134:	b087      	sub	sp, #28
 800b136:	af00      	add	r7, sp, #0
 800b138:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b144:	689b      	ldr	r3, [r3, #8]
 800b146:	f003 0306 	and.w	r3, r3, #6
 800b14a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d102      	bne.n	800b158 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b152:	2300      	movs	r3, #0
 800b154:	75fb      	strb	r3, [r7, #23]
 800b156:	e00a      	b.n	800b16e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2b02      	cmp	r3, #2
 800b15c:	d002      	beq.n	800b164 <USB_GetDevSpeed+0x32>
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2b06      	cmp	r3, #6
 800b162:	d102      	bne.n	800b16a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b164:	2302      	movs	r3, #2
 800b166:	75fb      	strb	r3, [r7, #23]
 800b168:	e001      	b.n	800b16e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b16a:	230f      	movs	r3, #15
 800b16c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b16e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b170:	4618      	mov	r0, r3
 800b172:	371c      	adds	r7, #28
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr

0800b17c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b085      	sub	sp, #20
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	785b      	ldrb	r3, [r3, #1]
 800b194:	2b01      	cmp	r3, #1
 800b196:	d139      	bne.n	800b20c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b19e:	69da      	ldr	r2, [r3, #28]
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	f003 030f 	and.w	r3, r3, #15
 800b1a8:	2101      	movs	r1, #1
 800b1aa:	fa01 f303 	lsl.w	r3, r1, r3
 800b1ae:	b29b      	uxth	r3, r3
 800b1b0:	68f9      	ldr	r1, [r7, #12]
 800b1b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	015a      	lsls	r2, r3, #5
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	4413      	add	r3, r2
 800b1c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d153      	bne.n	800b278 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	015a      	lsls	r2, r3, #5
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	4413      	add	r3, r2
 800b1d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	689b      	ldr	r3, [r3, #8]
 800b1e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	791b      	ldrb	r3, [r3, #4]
 800b1ea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b1ec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	059b      	lsls	r3, r3, #22
 800b1f2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b1f4:	431a      	orrs	r2, r3
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	0159      	lsls	r1, r3, #5
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	440b      	add	r3, r1
 800b1fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b202:	4619      	mov	r1, r3
 800b204:	4b20      	ldr	r3, [pc, #128]	@ (800b288 <USB_ActivateEndpoint+0x10c>)
 800b206:	4313      	orrs	r3, r2
 800b208:	600b      	str	r3, [r1, #0]
 800b20a:	e035      	b.n	800b278 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b212:	69da      	ldr	r2, [r3, #28]
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	f003 030f 	and.w	r3, r3, #15
 800b21c:	2101      	movs	r1, #1
 800b21e:	fa01 f303 	lsl.w	r3, r1, r3
 800b222:	041b      	lsls	r3, r3, #16
 800b224:	68f9      	ldr	r1, [r7, #12]
 800b226:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b22a:	4313      	orrs	r3, r2
 800b22c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	015a      	lsls	r2, r3, #5
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	4413      	add	r3, r2
 800b236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b240:	2b00      	cmp	r3, #0
 800b242:	d119      	bne.n	800b278 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	015a      	lsls	r2, r3, #5
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	4413      	add	r3, r2
 800b24c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b250:	681a      	ldr	r2, [r3, #0]
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	689b      	ldr	r3, [r3, #8]
 800b256:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	791b      	ldrb	r3, [r3, #4]
 800b25e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b260:	430b      	orrs	r3, r1
 800b262:	431a      	orrs	r2, r3
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	0159      	lsls	r1, r3, #5
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	440b      	add	r3, r1
 800b26c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b270:	4619      	mov	r1, r3
 800b272:	4b05      	ldr	r3, [pc, #20]	@ (800b288 <USB_ActivateEndpoint+0x10c>)
 800b274:	4313      	orrs	r3, r2
 800b276:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b278:	2300      	movs	r3, #0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3714      	adds	r7, #20
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr
 800b286:	bf00      	nop
 800b288:	10008000 	.word	0x10008000

0800b28c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b085      	sub	sp, #20
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	785b      	ldrb	r3, [r3, #1]
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d161      	bne.n	800b36c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	015a      	lsls	r2, r3, #5
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	4413      	add	r3, r2
 800b2b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b2ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b2be:	d11f      	bne.n	800b300 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	015a      	lsls	r2, r3, #5
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	4413      	add	r3, r2
 800b2c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	68ba      	ldr	r2, [r7, #8]
 800b2d0:	0151      	lsls	r1, r2, #5
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	440a      	add	r2, r1
 800b2d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2da:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b2de:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	015a      	lsls	r2, r3, #5
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	4413      	add	r3, r2
 800b2e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	68ba      	ldr	r2, [r7, #8]
 800b2f0:	0151      	lsls	r1, r2, #5
 800b2f2:	68fa      	ldr	r2, [r7, #12]
 800b2f4:	440a      	add	r2, r1
 800b2f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b2fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b306:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	f003 030f 	and.w	r3, r3, #15
 800b310:	2101      	movs	r1, #1
 800b312:	fa01 f303 	lsl.w	r3, r1, r3
 800b316:	b29b      	uxth	r3, r3
 800b318:	43db      	mvns	r3, r3
 800b31a:	68f9      	ldr	r1, [r7, #12]
 800b31c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b320:	4013      	ands	r3, r2
 800b322:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b32a:	69da      	ldr	r2, [r3, #28]
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	781b      	ldrb	r3, [r3, #0]
 800b330:	f003 030f 	and.w	r3, r3, #15
 800b334:	2101      	movs	r1, #1
 800b336:	fa01 f303 	lsl.w	r3, r1, r3
 800b33a:	b29b      	uxth	r3, r3
 800b33c:	43db      	mvns	r3, r3
 800b33e:	68f9      	ldr	r1, [r7, #12]
 800b340:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b344:	4013      	ands	r3, r2
 800b346:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	015a      	lsls	r2, r3, #5
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	4413      	add	r3, r2
 800b350:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b354:	681a      	ldr	r2, [r3, #0]
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	0159      	lsls	r1, r3, #5
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	440b      	add	r3, r1
 800b35e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b362:	4619      	mov	r1, r3
 800b364:	4b35      	ldr	r3, [pc, #212]	@ (800b43c <USB_DeactivateEndpoint+0x1b0>)
 800b366:	4013      	ands	r3, r2
 800b368:	600b      	str	r3, [r1, #0]
 800b36a:	e060      	b.n	800b42e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	015a      	lsls	r2, r3, #5
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	4413      	add	r3, r2
 800b374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b37e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b382:	d11f      	bne.n	800b3c4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	015a      	lsls	r2, r3, #5
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	4413      	add	r3, r2
 800b38c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	68ba      	ldr	r2, [r7, #8]
 800b394:	0151      	lsls	r1, r2, #5
 800b396:	68fa      	ldr	r2, [r7, #12]
 800b398:	440a      	add	r2, r1
 800b39a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b39e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b3a2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	015a      	lsls	r2, r3, #5
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	4413      	add	r3, r2
 800b3ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	68ba      	ldr	r2, [r7, #8]
 800b3b4:	0151      	lsls	r1, r2, #5
 800b3b6:	68fa      	ldr	r2, [r7, #12]
 800b3b8:	440a      	add	r2, r1
 800b3ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b3be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b3c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	f003 030f 	and.w	r3, r3, #15
 800b3d4:	2101      	movs	r1, #1
 800b3d6:	fa01 f303 	lsl.w	r3, r1, r3
 800b3da:	041b      	lsls	r3, r3, #16
 800b3dc:	43db      	mvns	r3, r3
 800b3de:	68f9      	ldr	r1, [r7, #12]
 800b3e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b3e4:	4013      	ands	r3, r2
 800b3e6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3ee:	69da      	ldr	r2, [r3, #28]
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	781b      	ldrb	r3, [r3, #0]
 800b3f4:	f003 030f 	and.w	r3, r3, #15
 800b3f8:	2101      	movs	r1, #1
 800b3fa:	fa01 f303 	lsl.w	r3, r1, r3
 800b3fe:	041b      	lsls	r3, r3, #16
 800b400:	43db      	mvns	r3, r3
 800b402:	68f9      	ldr	r1, [r7, #12]
 800b404:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b408:	4013      	ands	r3, r2
 800b40a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	015a      	lsls	r2, r3, #5
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	4413      	add	r3, r2
 800b414:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b418:	681a      	ldr	r2, [r3, #0]
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	0159      	lsls	r1, r3, #5
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	440b      	add	r3, r1
 800b422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b426:	4619      	mov	r1, r3
 800b428:	4b05      	ldr	r3, [pc, #20]	@ (800b440 <USB_DeactivateEndpoint+0x1b4>)
 800b42a:	4013      	ands	r3, r2
 800b42c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b42e:	2300      	movs	r3, #0
}
 800b430:	4618      	mov	r0, r3
 800b432:	3714      	adds	r7, #20
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr
 800b43c:	ec337800 	.word	0xec337800
 800b440:	eff37800 	.word	0xeff37800

0800b444 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b08a      	sub	sp, #40	@ 0x28
 800b448:	af02      	add	r7, sp, #8
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	60b9      	str	r1, [r7, #8]
 800b44e:	4613      	mov	r3, r2
 800b450:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	785b      	ldrb	r3, [r3, #1]
 800b460:	2b01      	cmp	r3, #1
 800b462:	f040 8181 	bne.w	800b768 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	691b      	ldr	r3, [r3, #16]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d132      	bne.n	800b4d4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b46e:	69bb      	ldr	r3, [r7, #24]
 800b470:	015a      	lsls	r2, r3, #5
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	4413      	add	r3, r2
 800b476:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b47a:	691a      	ldr	r2, [r3, #16]
 800b47c:	69bb      	ldr	r3, [r7, #24]
 800b47e:	0159      	lsls	r1, r3, #5
 800b480:	69fb      	ldr	r3, [r7, #28]
 800b482:	440b      	add	r3, r1
 800b484:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b488:	4619      	mov	r1, r3
 800b48a:	4ba5      	ldr	r3, [pc, #660]	@ (800b720 <USB_EPStartXfer+0x2dc>)
 800b48c:	4013      	ands	r3, r2
 800b48e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b490:	69bb      	ldr	r3, [r7, #24]
 800b492:	015a      	lsls	r2, r3, #5
 800b494:	69fb      	ldr	r3, [r7, #28]
 800b496:	4413      	add	r3, r2
 800b498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b49c:	691b      	ldr	r3, [r3, #16]
 800b49e:	69ba      	ldr	r2, [r7, #24]
 800b4a0:	0151      	lsls	r1, r2, #5
 800b4a2:	69fa      	ldr	r2, [r7, #28]
 800b4a4:	440a      	add	r2, r1
 800b4a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b4ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b4b0:	69bb      	ldr	r3, [r7, #24]
 800b4b2:	015a      	lsls	r2, r3, #5
 800b4b4:	69fb      	ldr	r3, [r7, #28]
 800b4b6:	4413      	add	r3, r2
 800b4b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4bc:	691a      	ldr	r2, [r3, #16]
 800b4be:	69bb      	ldr	r3, [r7, #24]
 800b4c0:	0159      	lsls	r1, r3, #5
 800b4c2:	69fb      	ldr	r3, [r7, #28]
 800b4c4:	440b      	add	r3, r1
 800b4c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	4b95      	ldr	r3, [pc, #596]	@ (800b724 <USB_EPStartXfer+0x2e0>)
 800b4ce:	4013      	ands	r3, r2
 800b4d0:	610b      	str	r3, [r1, #16]
 800b4d2:	e092      	b.n	800b5fa <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b4d4:	69bb      	ldr	r3, [r7, #24]
 800b4d6:	015a      	lsls	r2, r3, #5
 800b4d8:	69fb      	ldr	r3, [r7, #28]
 800b4da:	4413      	add	r3, r2
 800b4dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4e0:	691a      	ldr	r2, [r3, #16]
 800b4e2:	69bb      	ldr	r3, [r7, #24]
 800b4e4:	0159      	lsls	r1, r3, #5
 800b4e6:	69fb      	ldr	r3, [r7, #28]
 800b4e8:	440b      	add	r3, r1
 800b4ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	4b8c      	ldr	r3, [pc, #560]	@ (800b724 <USB_EPStartXfer+0x2e0>)
 800b4f2:	4013      	ands	r3, r2
 800b4f4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b4f6:	69bb      	ldr	r3, [r7, #24]
 800b4f8:	015a      	lsls	r2, r3, #5
 800b4fa:	69fb      	ldr	r3, [r7, #28]
 800b4fc:	4413      	add	r3, r2
 800b4fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b502:	691a      	ldr	r2, [r3, #16]
 800b504:	69bb      	ldr	r3, [r7, #24]
 800b506:	0159      	lsls	r1, r3, #5
 800b508:	69fb      	ldr	r3, [r7, #28]
 800b50a:	440b      	add	r3, r1
 800b50c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b510:	4619      	mov	r1, r3
 800b512:	4b83      	ldr	r3, [pc, #524]	@ (800b720 <USB_EPStartXfer+0x2dc>)
 800b514:	4013      	ands	r3, r2
 800b516:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800b518:	69bb      	ldr	r3, [r7, #24]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d11a      	bne.n	800b554 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	691a      	ldr	r2, [r3, #16]
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	429a      	cmp	r2, r3
 800b528:	d903      	bls.n	800b532 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	689a      	ldr	r2, [r3, #8]
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b532:	69bb      	ldr	r3, [r7, #24]
 800b534:	015a      	lsls	r2, r3, #5
 800b536:	69fb      	ldr	r3, [r7, #28]
 800b538:	4413      	add	r3, r2
 800b53a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b53e:	691b      	ldr	r3, [r3, #16]
 800b540:	69ba      	ldr	r2, [r7, #24]
 800b542:	0151      	lsls	r1, r2, #5
 800b544:	69fa      	ldr	r2, [r7, #28]
 800b546:	440a      	add	r2, r1
 800b548:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b54c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b550:	6113      	str	r3, [r2, #16]
 800b552:	e01b      	b.n	800b58c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b554:	69bb      	ldr	r3, [r7, #24]
 800b556:	015a      	lsls	r2, r3, #5
 800b558:	69fb      	ldr	r3, [r7, #28]
 800b55a:	4413      	add	r3, r2
 800b55c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b560:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	6919      	ldr	r1, [r3, #16]
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	689b      	ldr	r3, [r3, #8]
 800b56a:	440b      	add	r3, r1
 800b56c:	1e59      	subs	r1, r3, #1
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	689b      	ldr	r3, [r3, #8]
 800b572:	fbb1 f3f3 	udiv	r3, r1, r3
 800b576:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b578:	4b6b      	ldr	r3, [pc, #428]	@ (800b728 <USB_EPStartXfer+0x2e4>)
 800b57a:	400b      	ands	r3, r1
 800b57c:	69b9      	ldr	r1, [r7, #24]
 800b57e:	0148      	lsls	r0, r1, #5
 800b580:	69f9      	ldr	r1, [r7, #28]
 800b582:	4401      	add	r1, r0
 800b584:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b588:	4313      	orrs	r3, r2
 800b58a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b58c:	69bb      	ldr	r3, [r7, #24]
 800b58e:	015a      	lsls	r2, r3, #5
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	4413      	add	r3, r2
 800b594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b598:	691a      	ldr	r2, [r3, #16]
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	691b      	ldr	r3, [r3, #16]
 800b59e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b5a2:	69b9      	ldr	r1, [r7, #24]
 800b5a4:	0148      	lsls	r0, r1, #5
 800b5a6:	69f9      	ldr	r1, [r7, #28]
 800b5a8:	4401      	add	r1, r0
 800b5aa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	791b      	ldrb	r3, [r3, #4]
 800b5b6:	2b01      	cmp	r3, #1
 800b5b8:	d11f      	bne.n	800b5fa <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b5ba:	69bb      	ldr	r3, [r7, #24]
 800b5bc:	015a      	lsls	r2, r3, #5
 800b5be:	69fb      	ldr	r3, [r7, #28]
 800b5c0:	4413      	add	r3, r2
 800b5c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5c6:	691b      	ldr	r3, [r3, #16]
 800b5c8:	69ba      	ldr	r2, [r7, #24]
 800b5ca:	0151      	lsls	r1, r2, #5
 800b5cc:	69fa      	ldr	r2, [r7, #28]
 800b5ce:	440a      	add	r2, r1
 800b5d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b5d4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800b5d8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b5da:	69bb      	ldr	r3, [r7, #24]
 800b5dc:	015a      	lsls	r2, r3, #5
 800b5de:	69fb      	ldr	r3, [r7, #28]
 800b5e0:	4413      	add	r3, r2
 800b5e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5e6:	691b      	ldr	r3, [r3, #16]
 800b5e8:	69ba      	ldr	r2, [r7, #24]
 800b5ea:	0151      	lsls	r1, r2, #5
 800b5ec:	69fa      	ldr	r2, [r7, #28]
 800b5ee:	440a      	add	r2, r1
 800b5f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b5f4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b5f8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b5fa:	79fb      	ldrb	r3, [r7, #7]
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d14b      	bne.n	800b698 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	69db      	ldr	r3, [r3, #28]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d009      	beq.n	800b61c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b608:	69bb      	ldr	r3, [r7, #24]
 800b60a:	015a      	lsls	r2, r3, #5
 800b60c:	69fb      	ldr	r3, [r7, #28]
 800b60e:	4413      	add	r3, r2
 800b610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b614:	461a      	mov	r2, r3
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	69db      	ldr	r3, [r3, #28]
 800b61a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	791b      	ldrb	r3, [r3, #4]
 800b620:	2b01      	cmp	r3, #1
 800b622:	d128      	bne.n	800b676 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b624:	69fb      	ldr	r3, [r7, #28]
 800b626:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b62a:	689b      	ldr	r3, [r3, #8]
 800b62c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b630:	2b00      	cmp	r3, #0
 800b632:	d110      	bne.n	800b656 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b634:	69bb      	ldr	r3, [r7, #24]
 800b636:	015a      	lsls	r2, r3, #5
 800b638:	69fb      	ldr	r3, [r7, #28]
 800b63a:	4413      	add	r3, r2
 800b63c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	69ba      	ldr	r2, [r7, #24]
 800b644:	0151      	lsls	r1, r2, #5
 800b646:	69fa      	ldr	r2, [r7, #28]
 800b648:	440a      	add	r2, r1
 800b64a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b64e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b652:	6013      	str	r3, [r2, #0]
 800b654:	e00f      	b.n	800b676 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b656:	69bb      	ldr	r3, [r7, #24]
 800b658:	015a      	lsls	r2, r3, #5
 800b65a:	69fb      	ldr	r3, [r7, #28]
 800b65c:	4413      	add	r3, r2
 800b65e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	69ba      	ldr	r2, [r7, #24]
 800b666:	0151      	lsls	r1, r2, #5
 800b668:	69fa      	ldr	r2, [r7, #28]
 800b66a:	440a      	add	r2, r1
 800b66c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b674:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b676:	69bb      	ldr	r3, [r7, #24]
 800b678:	015a      	lsls	r2, r3, #5
 800b67a:	69fb      	ldr	r3, [r7, #28]
 800b67c:	4413      	add	r3, r2
 800b67e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	69ba      	ldr	r2, [r7, #24]
 800b686:	0151      	lsls	r1, r2, #5
 800b688:	69fa      	ldr	r2, [r7, #28]
 800b68a:	440a      	add	r2, r1
 800b68c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b690:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b694:	6013      	str	r3, [r2, #0]
 800b696:	e16a      	b.n	800b96e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b698:	69bb      	ldr	r3, [r7, #24]
 800b69a:	015a      	lsls	r2, r3, #5
 800b69c:	69fb      	ldr	r3, [r7, #28]
 800b69e:	4413      	add	r3, r2
 800b6a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	69ba      	ldr	r2, [r7, #24]
 800b6a8:	0151      	lsls	r1, r2, #5
 800b6aa:	69fa      	ldr	r2, [r7, #28]
 800b6ac:	440a      	add	r2, r1
 800b6ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b6b2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b6b6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	791b      	ldrb	r3, [r3, #4]
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d015      	beq.n	800b6ec <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	691b      	ldr	r3, [r3, #16]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	f000 8152 	beq.w	800b96e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b6ca:	69fb      	ldr	r3, [r7, #28]
 800b6cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	781b      	ldrb	r3, [r3, #0]
 800b6d6:	f003 030f 	and.w	r3, r3, #15
 800b6da:	2101      	movs	r1, #1
 800b6dc:	fa01 f303 	lsl.w	r3, r1, r3
 800b6e0:	69f9      	ldr	r1, [r7, #28]
 800b6e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	634b      	str	r3, [r1, #52]	@ 0x34
 800b6ea:	e140      	b.n	800b96e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b6ec:	69fb      	ldr	r3, [r7, #28]
 800b6ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6f2:	689b      	ldr	r3, [r3, #8]
 800b6f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d117      	bne.n	800b72c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b6fc:	69bb      	ldr	r3, [r7, #24]
 800b6fe:	015a      	lsls	r2, r3, #5
 800b700:	69fb      	ldr	r3, [r7, #28]
 800b702:	4413      	add	r3, r2
 800b704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	69ba      	ldr	r2, [r7, #24]
 800b70c:	0151      	lsls	r1, r2, #5
 800b70e:	69fa      	ldr	r2, [r7, #28]
 800b710:	440a      	add	r2, r1
 800b712:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b716:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b71a:	6013      	str	r3, [r2, #0]
 800b71c:	e016      	b.n	800b74c <USB_EPStartXfer+0x308>
 800b71e:	bf00      	nop
 800b720:	e007ffff 	.word	0xe007ffff
 800b724:	fff80000 	.word	0xfff80000
 800b728:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b72c:	69bb      	ldr	r3, [r7, #24]
 800b72e:	015a      	lsls	r2, r3, #5
 800b730:	69fb      	ldr	r3, [r7, #28]
 800b732:	4413      	add	r3, r2
 800b734:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	69ba      	ldr	r2, [r7, #24]
 800b73c:	0151      	lsls	r1, r2, #5
 800b73e:	69fa      	ldr	r2, [r7, #28]
 800b740:	440a      	add	r2, r1
 800b742:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b746:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b74a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	68d9      	ldr	r1, [r3, #12]
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	781a      	ldrb	r2, [r3, #0]
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	691b      	ldr	r3, [r3, #16]
 800b758:	b298      	uxth	r0, r3
 800b75a:	79fb      	ldrb	r3, [r7, #7]
 800b75c:	9300      	str	r3, [sp, #0]
 800b75e:	4603      	mov	r3, r0
 800b760:	68f8      	ldr	r0, [r7, #12]
 800b762:	f000 f9b9 	bl	800bad8 <USB_WritePacket>
 800b766:	e102      	b.n	800b96e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b768:	69bb      	ldr	r3, [r7, #24]
 800b76a:	015a      	lsls	r2, r3, #5
 800b76c:	69fb      	ldr	r3, [r7, #28]
 800b76e:	4413      	add	r3, r2
 800b770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b774:	691a      	ldr	r2, [r3, #16]
 800b776:	69bb      	ldr	r3, [r7, #24]
 800b778:	0159      	lsls	r1, r3, #5
 800b77a:	69fb      	ldr	r3, [r7, #28]
 800b77c:	440b      	add	r3, r1
 800b77e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b782:	4619      	mov	r1, r3
 800b784:	4b7c      	ldr	r3, [pc, #496]	@ (800b978 <USB_EPStartXfer+0x534>)
 800b786:	4013      	ands	r3, r2
 800b788:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	015a      	lsls	r2, r3, #5
 800b78e:	69fb      	ldr	r3, [r7, #28]
 800b790:	4413      	add	r3, r2
 800b792:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b796:	691a      	ldr	r2, [r3, #16]
 800b798:	69bb      	ldr	r3, [r7, #24]
 800b79a:	0159      	lsls	r1, r3, #5
 800b79c:	69fb      	ldr	r3, [r7, #28]
 800b79e:	440b      	add	r3, r1
 800b7a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	4b75      	ldr	r3, [pc, #468]	@ (800b97c <USB_EPStartXfer+0x538>)
 800b7a8:	4013      	ands	r3, r2
 800b7aa:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800b7ac:	69bb      	ldr	r3, [r7, #24]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d12f      	bne.n	800b812 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	691b      	ldr	r3, [r3, #16]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d003      	beq.n	800b7c2 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	689a      	ldr	r2, [r3, #8]
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	689a      	ldr	r2, [r3, #8]
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b7ca:	69bb      	ldr	r3, [r7, #24]
 800b7cc:	015a      	lsls	r2, r3, #5
 800b7ce:	69fb      	ldr	r3, [r7, #28]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7d6:	691a      	ldr	r2, [r3, #16]
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	6a1b      	ldr	r3, [r3, #32]
 800b7dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b7e0:	69b9      	ldr	r1, [r7, #24]
 800b7e2:	0148      	lsls	r0, r1, #5
 800b7e4:	69f9      	ldr	r1, [r7, #28]
 800b7e6:	4401      	add	r1, r0
 800b7e8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b7f0:	69bb      	ldr	r3, [r7, #24]
 800b7f2:	015a      	lsls	r2, r3, #5
 800b7f4:	69fb      	ldr	r3, [r7, #28]
 800b7f6:	4413      	add	r3, r2
 800b7f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7fc:	691b      	ldr	r3, [r3, #16]
 800b7fe:	69ba      	ldr	r2, [r7, #24]
 800b800:	0151      	lsls	r1, r2, #5
 800b802:	69fa      	ldr	r2, [r7, #28]
 800b804:	440a      	add	r2, r1
 800b806:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b80a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b80e:	6113      	str	r3, [r2, #16]
 800b810:	e05f      	b.n	800b8d2 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	691b      	ldr	r3, [r3, #16]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d123      	bne.n	800b862 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b81a:	69bb      	ldr	r3, [r7, #24]
 800b81c:	015a      	lsls	r2, r3, #5
 800b81e:	69fb      	ldr	r3, [r7, #28]
 800b820:	4413      	add	r3, r2
 800b822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b826:	691a      	ldr	r2, [r3, #16]
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	689b      	ldr	r3, [r3, #8]
 800b82c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b830:	69b9      	ldr	r1, [r7, #24]
 800b832:	0148      	lsls	r0, r1, #5
 800b834:	69f9      	ldr	r1, [r7, #28]
 800b836:	4401      	add	r1, r0
 800b838:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b83c:	4313      	orrs	r3, r2
 800b83e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b840:	69bb      	ldr	r3, [r7, #24]
 800b842:	015a      	lsls	r2, r3, #5
 800b844:	69fb      	ldr	r3, [r7, #28]
 800b846:	4413      	add	r3, r2
 800b848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b84c:	691b      	ldr	r3, [r3, #16]
 800b84e:	69ba      	ldr	r2, [r7, #24]
 800b850:	0151      	lsls	r1, r2, #5
 800b852:	69fa      	ldr	r2, [r7, #28]
 800b854:	440a      	add	r2, r1
 800b856:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b85a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b85e:	6113      	str	r3, [r2, #16]
 800b860:	e037      	b.n	800b8d2 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	691a      	ldr	r2, [r3, #16]
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	689b      	ldr	r3, [r3, #8]
 800b86a:	4413      	add	r3, r2
 800b86c:	1e5a      	subs	r2, r3, #1
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	689b      	ldr	r3, [r3, #8]
 800b872:	fbb2 f3f3 	udiv	r3, r2, r3
 800b876:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	8afa      	ldrh	r2, [r7, #22]
 800b87e:	fb03 f202 	mul.w	r2, r3, r2
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b886:	69bb      	ldr	r3, [r7, #24]
 800b888:	015a      	lsls	r2, r3, #5
 800b88a:	69fb      	ldr	r3, [r7, #28]
 800b88c:	4413      	add	r3, r2
 800b88e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b892:	691a      	ldr	r2, [r3, #16]
 800b894:	8afb      	ldrh	r3, [r7, #22]
 800b896:	04d9      	lsls	r1, r3, #19
 800b898:	4b39      	ldr	r3, [pc, #228]	@ (800b980 <USB_EPStartXfer+0x53c>)
 800b89a:	400b      	ands	r3, r1
 800b89c:	69b9      	ldr	r1, [r7, #24]
 800b89e:	0148      	lsls	r0, r1, #5
 800b8a0:	69f9      	ldr	r1, [r7, #28]
 800b8a2:	4401      	add	r1, r0
 800b8a4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b8a8:	4313      	orrs	r3, r2
 800b8aa:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b8ac:	69bb      	ldr	r3, [r7, #24]
 800b8ae:	015a      	lsls	r2, r3, #5
 800b8b0:	69fb      	ldr	r3, [r7, #28]
 800b8b2:	4413      	add	r3, r2
 800b8b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8b8:	691a      	ldr	r2, [r3, #16]
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	6a1b      	ldr	r3, [r3, #32]
 800b8be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b8c2:	69b9      	ldr	r1, [r7, #24]
 800b8c4:	0148      	lsls	r0, r1, #5
 800b8c6:	69f9      	ldr	r1, [r7, #28]
 800b8c8:	4401      	add	r1, r0
 800b8ca:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b8d2:	79fb      	ldrb	r3, [r7, #7]
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d10d      	bne.n	800b8f4 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	68db      	ldr	r3, [r3, #12]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d009      	beq.n	800b8f4 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	68d9      	ldr	r1, [r3, #12]
 800b8e4:	69bb      	ldr	r3, [r7, #24]
 800b8e6:	015a      	lsls	r2, r3, #5
 800b8e8:	69fb      	ldr	r3, [r7, #28]
 800b8ea:	4413      	add	r3, r2
 800b8ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8f0:	460a      	mov	r2, r1
 800b8f2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	791b      	ldrb	r3, [r3, #4]
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d128      	bne.n	800b94e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b8fc:	69fb      	ldr	r3, [r7, #28]
 800b8fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b902:	689b      	ldr	r3, [r3, #8]
 800b904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d110      	bne.n	800b92e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b90c:	69bb      	ldr	r3, [r7, #24]
 800b90e:	015a      	lsls	r2, r3, #5
 800b910:	69fb      	ldr	r3, [r7, #28]
 800b912:	4413      	add	r3, r2
 800b914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	69ba      	ldr	r2, [r7, #24]
 800b91c:	0151      	lsls	r1, r2, #5
 800b91e:	69fa      	ldr	r2, [r7, #28]
 800b920:	440a      	add	r2, r1
 800b922:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b926:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b92a:	6013      	str	r3, [r2, #0]
 800b92c:	e00f      	b.n	800b94e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b92e:	69bb      	ldr	r3, [r7, #24]
 800b930:	015a      	lsls	r2, r3, #5
 800b932:	69fb      	ldr	r3, [r7, #28]
 800b934:	4413      	add	r3, r2
 800b936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	69ba      	ldr	r2, [r7, #24]
 800b93e:	0151      	lsls	r1, r2, #5
 800b940:	69fa      	ldr	r2, [r7, #28]
 800b942:	440a      	add	r2, r1
 800b944:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b94c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b94e:	69bb      	ldr	r3, [r7, #24]
 800b950:	015a      	lsls	r2, r3, #5
 800b952:	69fb      	ldr	r3, [r7, #28]
 800b954:	4413      	add	r3, r2
 800b956:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	69ba      	ldr	r2, [r7, #24]
 800b95e:	0151      	lsls	r1, r2, #5
 800b960:	69fa      	ldr	r2, [r7, #28]
 800b962:	440a      	add	r2, r1
 800b964:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b968:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b96c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b96e:	2300      	movs	r3, #0
}
 800b970:	4618      	mov	r0, r3
 800b972:	3720      	adds	r7, #32
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}
 800b978:	fff80000 	.word	0xfff80000
 800b97c:	e007ffff 	.word	0xe007ffff
 800b980:	1ff80000 	.word	0x1ff80000

0800b984 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b984:	b480      	push	{r7}
 800b986:	b087      	sub	sp, #28
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b98e:	2300      	movs	r3, #0
 800b990:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b992:	2300      	movs	r3, #0
 800b994:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	785b      	ldrb	r3, [r3, #1]
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d14a      	bne.n	800ba38 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	781b      	ldrb	r3, [r3, #0]
 800b9a6:	015a      	lsls	r2, r3, #5
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	4413      	add	r3, r2
 800b9ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b9b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b9ba:	f040 8086 	bne.w	800baca <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	015a      	lsls	r2, r3, #5
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	4413      	add	r3, r2
 800b9c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	683a      	ldr	r2, [r7, #0]
 800b9d0:	7812      	ldrb	r2, [r2, #0]
 800b9d2:	0151      	lsls	r1, r2, #5
 800b9d4:	693a      	ldr	r2, [r7, #16]
 800b9d6:	440a      	add	r2, r1
 800b9d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b9dc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b9e0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	781b      	ldrb	r3, [r3, #0]
 800b9e6:	015a      	lsls	r2, r3, #5
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	4413      	add	r3, r2
 800b9ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	683a      	ldr	r2, [r7, #0]
 800b9f4:	7812      	ldrb	r2, [r2, #0]
 800b9f6:	0151      	lsls	r1, r2, #5
 800b9f8:	693a      	ldr	r2, [r7, #16]
 800b9fa:	440a      	add	r2, r1
 800b9fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ba00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ba04:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	3301      	adds	r3, #1
 800ba0a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d902      	bls.n	800ba1c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ba16:	2301      	movs	r3, #1
 800ba18:	75fb      	strb	r3, [r7, #23]
          break;
 800ba1a:	e056      	b.n	800baca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	781b      	ldrb	r3, [r3, #0]
 800ba20:	015a      	lsls	r2, r3, #5
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	4413      	add	r3, r2
 800ba26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ba30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ba34:	d0e7      	beq.n	800ba06 <USB_EPStopXfer+0x82>
 800ba36:	e048      	b.n	800baca <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	015a      	lsls	r2, r3, #5
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	4413      	add	r3, r2
 800ba42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ba4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ba50:	d13b      	bne.n	800baca <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	781b      	ldrb	r3, [r3, #0]
 800ba56:	015a      	lsls	r2, r3, #5
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	4413      	add	r3, r2
 800ba5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	683a      	ldr	r2, [r7, #0]
 800ba64:	7812      	ldrb	r2, [r2, #0]
 800ba66:	0151      	lsls	r1, r2, #5
 800ba68:	693a      	ldr	r2, [r7, #16]
 800ba6a:	440a      	add	r2, r1
 800ba6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba70:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ba74:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	781b      	ldrb	r3, [r3, #0]
 800ba7a:	015a      	lsls	r2, r3, #5
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	4413      	add	r3, r2
 800ba80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	683a      	ldr	r2, [r7, #0]
 800ba88:	7812      	ldrb	r2, [r2, #0]
 800ba8a:	0151      	lsls	r1, r2, #5
 800ba8c:	693a      	ldr	r2, [r7, #16]
 800ba8e:	440a      	add	r2, r1
 800ba90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ba98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	3301      	adds	r3, #1
 800ba9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d902      	bls.n	800bab0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800baaa:	2301      	movs	r3, #1
 800baac:	75fb      	strb	r3, [r7, #23]
          break;
 800baae:	e00c      	b.n	800baca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	015a      	lsls	r2, r3, #5
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	4413      	add	r3, r2
 800baba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bac4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bac8:	d0e7      	beq.n	800ba9a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800baca:	7dfb      	ldrb	r3, [r7, #23]
}
 800bacc:	4618      	mov	r0, r3
 800bace:	371c      	adds	r7, #28
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr

0800bad8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bad8:	b480      	push	{r7}
 800bada:	b089      	sub	sp, #36	@ 0x24
 800badc:	af00      	add	r7, sp, #0
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	60b9      	str	r1, [r7, #8]
 800bae2:	4611      	mov	r1, r2
 800bae4:	461a      	mov	r2, r3
 800bae6:	460b      	mov	r3, r1
 800bae8:	71fb      	strb	r3, [r7, #7]
 800baea:	4613      	mov	r3, r2
 800baec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800baf6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d123      	bne.n	800bb46 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bafe:	88bb      	ldrh	r3, [r7, #4]
 800bb00:	3303      	adds	r3, #3
 800bb02:	089b      	lsrs	r3, r3, #2
 800bb04:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bb06:	2300      	movs	r3, #0
 800bb08:	61bb      	str	r3, [r7, #24]
 800bb0a:	e018      	b.n	800bb3e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bb0c:	79fb      	ldrb	r3, [r7, #7]
 800bb0e:	031a      	lsls	r2, r3, #12
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	4413      	add	r3, r2
 800bb14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bb18:	461a      	mov	r2, r3
 800bb1a:	69fb      	ldr	r3, [r7, #28]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bb20:	69fb      	ldr	r3, [r7, #28]
 800bb22:	3301      	adds	r3, #1
 800bb24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bb26:	69fb      	ldr	r3, [r7, #28]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	3301      	adds	r3, #1
 800bb30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bb32:	69fb      	ldr	r3, [r7, #28]
 800bb34:	3301      	adds	r3, #1
 800bb36:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bb38:	69bb      	ldr	r3, [r7, #24]
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	61bb      	str	r3, [r7, #24]
 800bb3e:	69ba      	ldr	r2, [r7, #24]
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d3e2      	bcc.n	800bb0c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bb46:	2300      	movs	r3, #0
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3724      	adds	r7, #36	@ 0x24
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr

0800bb54 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b08b      	sub	sp, #44	@ 0x2c
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	60f8      	str	r0, [r7, #12]
 800bb5c:	60b9      	str	r1, [r7, #8]
 800bb5e:	4613      	mov	r3, r2
 800bb60:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bb6a:	88fb      	ldrh	r3, [r7, #6]
 800bb6c:	089b      	lsrs	r3, r3, #2
 800bb6e:	b29b      	uxth	r3, r3
 800bb70:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bb72:	88fb      	ldrh	r3, [r7, #6]
 800bb74:	f003 0303 	and.w	r3, r3, #3
 800bb78:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	623b      	str	r3, [r7, #32]
 800bb7e:	e014      	b.n	800bbaa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bb80:	69bb      	ldr	r3, [r7, #24]
 800bb82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bb86:	681a      	ldr	r2, [r3, #0]
 800bb88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb8a:	601a      	str	r2, [r3, #0]
    pDest++;
 800bb8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb8e:	3301      	adds	r3, #1
 800bb90:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800bb92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb94:	3301      	adds	r3, #1
 800bb96:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800bb98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800bb9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba0:	3301      	adds	r3, #1
 800bba2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800bba4:	6a3b      	ldr	r3, [r7, #32]
 800bba6:	3301      	adds	r3, #1
 800bba8:	623b      	str	r3, [r7, #32]
 800bbaa:	6a3a      	ldr	r2, [r7, #32]
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	d3e6      	bcc.n	800bb80 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bbb2:	8bfb      	ldrh	r3, [r7, #30]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d01e      	beq.n	800bbf6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bbbc:	69bb      	ldr	r3, [r7, #24]
 800bbbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	f107 0310 	add.w	r3, r7, #16
 800bbc8:	6812      	ldr	r2, [r2, #0]
 800bbca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bbcc:	693a      	ldr	r2, [r7, #16]
 800bbce:	6a3b      	ldr	r3, [r7, #32]
 800bbd0:	b2db      	uxtb	r3, r3
 800bbd2:	00db      	lsls	r3, r3, #3
 800bbd4:	fa22 f303 	lsr.w	r3, r2, r3
 800bbd8:	b2da      	uxtb	r2, r3
 800bbda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbdc:	701a      	strb	r2, [r3, #0]
      i++;
 800bbde:	6a3b      	ldr	r3, [r7, #32]
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	623b      	str	r3, [r7, #32]
      pDest++;
 800bbe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800bbea:	8bfb      	ldrh	r3, [r7, #30]
 800bbec:	3b01      	subs	r3, #1
 800bbee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bbf0:	8bfb      	ldrh	r3, [r7, #30]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d1ea      	bne.n	800bbcc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bbf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	372c      	adds	r7, #44	@ 0x2c
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr

0800bc04 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b085      	sub	sp, #20
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	781b      	ldrb	r3, [r3, #0]
 800bc16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	785b      	ldrb	r3, [r3, #1]
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d12c      	bne.n	800bc7a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	015a      	lsls	r2, r3, #5
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	4413      	add	r3, r2
 800bc28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	db12      	blt.n	800bc58 <USB_EPSetStall+0x54>
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d00f      	beq.n	800bc58 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	015a      	lsls	r2, r3, #5
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	4413      	add	r3, r2
 800bc40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	68ba      	ldr	r2, [r7, #8]
 800bc48:	0151      	lsls	r1, r2, #5
 800bc4a:	68fa      	ldr	r2, [r7, #12]
 800bc4c:	440a      	add	r2, r1
 800bc4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bc52:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800bc56:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	015a      	lsls	r2, r3, #5
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	4413      	add	r3, r2
 800bc60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	68ba      	ldr	r2, [r7, #8]
 800bc68:	0151      	lsls	r1, r2, #5
 800bc6a:	68fa      	ldr	r2, [r7, #12]
 800bc6c:	440a      	add	r2, r1
 800bc6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bc72:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bc76:	6013      	str	r3, [r2, #0]
 800bc78:	e02b      	b.n	800bcd2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	015a      	lsls	r2, r3, #5
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	4413      	add	r3, r2
 800bc82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	db12      	blt.n	800bcb2 <USB_EPSetStall+0xae>
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d00f      	beq.n	800bcb2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	015a      	lsls	r2, r3, #5
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	4413      	add	r3, r2
 800bc9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	68ba      	ldr	r2, [r7, #8]
 800bca2:	0151      	lsls	r1, r2, #5
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	440a      	add	r2, r1
 800bca8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bcac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800bcb0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	015a      	lsls	r2, r3, #5
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	4413      	add	r3, r2
 800bcba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	68ba      	ldr	r2, [r7, #8]
 800bcc2:	0151      	lsls	r1, r2, #5
 800bcc4:	68fa      	ldr	r2, [r7, #12]
 800bcc6:	440a      	add	r2, r1
 800bcc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bccc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bcd0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bcd2:	2300      	movs	r3, #0
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3714      	adds	r7, #20
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr

0800bce0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b085      	sub	sp, #20
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	785b      	ldrb	r3, [r3, #1]
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d128      	bne.n	800bd4e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	015a      	lsls	r2, r3, #5
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	4413      	add	r3, r2
 800bd04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	68ba      	ldr	r2, [r7, #8]
 800bd0c:	0151      	lsls	r1, r2, #5
 800bd0e:	68fa      	ldr	r2, [r7, #12]
 800bd10:	440a      	add	r2, r1
 800bd12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd16:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bd1a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	791b      	ldrb	r3, [r3, #4]
 800bd20:	2b03      	cmp	r3, #3
 800bd22:	d003      	beq.n	800bd2c <USB_EPClearStall+0x4c>
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	791b      	ldrb	r3, [r3, #4]
 800bd28:	2b02      	cmp	r3, #2
 800bd2a:	d138      	bne.n	800bd9e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	015a      	lsls	r2, r3, #5
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	4413      	add	r3, r2
 800bd34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	68ba      	ldr	r2, [r7, #8]
 800bd3c:	0151      	lsls	r1, r2, #5
 800bd3e:	68fa      	ldr	r2, [r7, #12]
 800bd40:	440a      	add	r2, r1
 800bd42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bd4a:	6013      	str	r3, [r2, #0]
 800bd4c:	e027      	b.n	800bd9e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	015a      	lsls	r2, r3, #5
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	4413      	add	r3, r2
 800bd56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	68ba      	ldr	r2, [r7, #8]
 800bd5e:	0151      	lsls	r1, r2, #5
 800bd60:	68fa      	ldr	r2, [r7, #12]
 800bd62:	440a      	add	r2, r1
 800bd64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bd68:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bd6c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	791b      	ldrb	r3, [r3, #4]
 800bd72:	2b03      	cmp	r3, #3
 800bd74:	d003      	beq.n	800bd7e <USB_EPClearStall+0x9e>
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	791b      	ldrb	r3, [r3, #4]
 800bd7a:	2b02      	cmp	r3, #2
 800bd7c:	d10f      	bne.n	800bd9e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	015a      	lsls	r2, r3, #5
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	4413      	add	r3, r2
 800bd86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	68ba      	ldr	r2, [r7, #8]
 800bd8e:	0151      	lsls	r1, r2, #5
 800bd90:	68fa      	ldr	r2, [r7, #12]
 800bd92:	440a      	add	r2, r1
 800bd94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bd98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bd9c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bd9e:	2300      	movs	r3, #0
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3714      	adds	r7, #20
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr

0800bdac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bdac:	b480      	push	{r7}
 800bdae:	b085      	sub	sp, #20
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	68fa      	ldr	r2, [r7, #12]
 800bdc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bdca:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800bdce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdd6:	681a      	ldr	r2, [r3, #0]
 800bdd8:	78fb      	ldrb	r3, [r7, #3]
 800bdda:	011b      	lsls	r3, r3, #4
 800bddc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800bde0:	68f9      	ldr	r1, [r7, #12]
 800bde2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bde6:	4313      	orrs	r3, r2
 800bde8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bdea:	2300      	movs	r3, #0
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3714      	adds	r7, #20
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr

0800bdf8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b085      	sub	sp, #20
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	68fa      	ldr	r2, [r7, #12]
 800be0e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800be12:	f023 0303 	bic.w	r3, r3, #3
 800be16:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	68fa      	ldr	r2, [r7, #12]
 800be22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800be26:	f023 0302 	bic.w	r3, r3, #2
 800be2a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800be2c:	2300      	movs	r3, #0
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3714      	adds	r7, #20
 800be32:	46bd      	mov	sp, r7
 800be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be38:	4770      	bx	lr

0800be3a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800be3a:	b480      	push	{r7}
 800be3c:	b085      	sub	sp, #20
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	68fa      	ldr	r2, [r7, #12]
 800be50:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800be54:	f023 0303 	bic.w	r3, r3, #3
 800be58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be60:	685b      	ldr	r3, [r3, #4]
 800be62:	68fa      	ldr	r2, [r7, #12]
 800be64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800be68:	f043 0302 	orr.w	r3, r3, #2
 800be6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800be6e:	2300      	movs	r3, #0
}
 800be70:	4618      	mov	r0, r3
 800be72:	3714      	adds	r7, #20
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b085      	sub	sp, #20
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	695b      	ldr	r3, [r3, #20]
 800be88:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	699b      	ldr	r3, [r3, #24]
 800be8e:	68fa      	ldr	r2, [r7, #12]
 800be90:	4013      	ands	r3, r2
 800be92:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800be94:	68fb      	ldr	r3, [r7, #12]
}
 800be96:	4618      	mov	r0, r3
 800be98:	3714      	adds	r7, #20
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr

0800bea2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bea2:	b480      	push	{r7}
 800bea4:	b085      	sub	sp, #20
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800beb4:	699b      	ldr	r3, [r3, #24]
 800beb6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bebe:	69db      	ldr	r3, [r3, #28]
 800bec0:	68ba      	ldr	r2, [r7, #8]
 800bec2:	4013      	ands	r3, r2
 800bec4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	0c1b      	lsrs	r3, r3, #16
}
 800beca:	4618      	mov	r0, r3
 800becc:	3714      	adds	r7, #20
 800bece:	46bd      	mov	sp, r7
 800bed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed4:	4770      	bx	lr

0800bed6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bed6:	b480      	push	{r7}
 800bed8:	b085      	sub	sp, #20
 800beda:	af00      	add	r7, sp, #0
 800bedc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bee8:	699b      	ldr	r3, [r3, #24]
 800beea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bef2:	69db      	ldr	r3, [r3, #28]
 800bef4:	68ba      	ldr	r2, [r7, #8]
 800bef6:	4013      	ands	r3, r2
 800bef8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	b29b      	uxth	r3, r3
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3714      	adds	r7, #20
 800bf02:	46bd      	mov	sp, r7
 800bf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf08:	4770      	bx	lr

0800bf0a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bf0a:	b480      	push	{r7}
 800bf0c:	b085      	sub	sp, #20
 800bf0e:	af00      	add	r7, sp, #0
 800bf10:	6078      	str	r0, [r7, #4]
 800bf12:	460b      	mov	r3, r1
 800bf14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bf1a:	78fb      	ldrb	r3, [r7, #3]
 800bf1c:	015a      	lsls	r2, r3, #5
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	4413      	add	r3, r2
 800bf22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf30:	695b      	ldr	r3, [r3, #20]
 800bf32:	68ba      	ldr	r2, [r7, #8]
 800bf34:	4013      	ands	r3, r2
 800bf36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bf38:	68bb      	ldr	r3, [r7, #8]
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3714      	adds	r7, #20
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf44:	4770      	bx	lr

0800bf46 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bf46:	b480      	push	{r7}
 800bf48:	b087      	sub	sp, #28
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	6078      	str	r0, [r7, #4]
 800bf4e:	460b      	mov	r3, r1
 800bf50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf5c:	691b      	ldr	r3, [r3, #16]
 800bf5e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf68:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bf6a:	78fb      	ldrb	r3, [r7, #3]
 800bf6c:	f003 030f 	and.w	r3, r3, #15
 800bf70:	68fa      	ldr	r2, [r7, #12]
 800bf72:	fa22 f303 	lsr.w	r3, r2, r3
 800bf76:	01db      	lsls	r3, r3, #7
 800bf78:	b2db      	uxtb	r3, r3
 800bf7a:	693a      	ldr	r2, [r7, #16]
 800bf7c:	4313      	orrs	r3, r2
 800bf7e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bf80:	78fb      	ldrb	r3, [r7, #3]
 800bf82:	015a      	lsls	r2, r3, #5
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	4413      	add	r3, r2
 800bf88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf8c:	689b      	ldr	r3, [r3, #8]
 800bf8e:	693a      	ldr	r2, [r7, #16]
 800bf90:	4013      	ands	r3, r2
 800bf92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bf94:	68bb      	ldr	r3, [r7, #8]
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	371c      	adds	r7, #28
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr

0800bfa2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800bfa2:	b480      	push	{r7}
 800bfa4:	b083      	sub	sp, #12
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	695b      	ldr	r3, [r3, #20]
 800bfae:	f003 0301 	and.w	r3, r3, #1
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	370c      	adds	r7, #12
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr
	...

0800bfc0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b085      	sub	sp, #20
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bfda:	4619      	mov	r1, r3
 800bfdc:	4b09      	ldr	r3, [pc, #36]	@ (800c004 <USB_ActivateSetup+0x44>)
 800bfde:	4013      	ands	r3, r2
 800bfe0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	68fa      	ldr	r2, [r7, #12]
 800bfec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bff0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bff4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bff6:	2300      	movs	r3, #0
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3714      	adds	r7, #20
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr
 800c004:	fffff800 	.word	0xfffff800

0800c008 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800c008:	b480      	push	{r7}
 800c00a:	b087      	sub	sp, #28
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	60f8      	str	r0, [r7, #12]
 800c010:	460b      	mov	r3, r1
 800c012:	607a      	str	r2, [r7, #4]
 800c014:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	333c      	adds	r3, #60	@ 0x3c
 800c01e:	3304      	adds	r3, #4
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	4a26      	ldr	r2, [pc, #152]	@ (800c0c0 <USB_EP0_OutStart+0xb8>)
 800c028:	4293      	cmp	r3, r2
 800c02a:	d90a      	bls.n	800c042 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c038:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c03c:	d101      	bne.n	800c042 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c03e:	2300      	movs	r3, #0
 800c040:	e037      	b.n	800c0b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c048:	461a      	mov	r2, r3
 800c04a:	2300      	movs	r3, #0
 800c04c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c054:	691b      	ldr	r3, [r3, #16]
 800c056:	697a      	ldr	r2, [r7, #20]
 800c058:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c05c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c060:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c068:	691b      	ldr	r3, [r3, #16]
 800c06a:	697a      	ldr	r2, [r7, #20]
 800c06c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c070:	f043 0318 	orr.w	r3, r3, #24
 800c074:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c07c:	691b      	ldr	r3, [r3, #16]
 800c07e:	697a      	ldr	r2, [r7, #20]
 800c080:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c084:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800c088:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c08a:	7afb      	ldrb	r3, [r7, #11]
 800c08c:	2b01      	cmp	r3, #1
 800c08e:	d10f      	bne.n	800c0b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c096:	461a      	mov	r2, r3
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	697a      	ldr	r2, [r7, #20]
 800c0a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c0aa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800c0ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c0b0:	2300      	movs	r3, #0
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	371c      	adds	r7, #28
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0bc:	4770      	bx	lr
 800c0be:	bf00      	nop
 800c0c0:	4f54300a 	.word	0x4f54300a

0800c0c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b085      	sub	sp, #20
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c0dc:	d901      	bls.n	800c0e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c0de:	2303      	movs	r3, #3
 800c0e0:	e01b      	b.n	800c11a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	691b      	ldr	r3, [r3, #16]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	daf2      	bge.n	800c0d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	691b      	ldr	r3, [r3, #16]
 800c0f2:	f043 0201 	orr.w	r2, r3, #1
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	3301      	adds	r3, #1
 800c0fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c106:	d901      	bls.n	800c10c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c108:	2303      	movs	r3, #3
 800c10a:	e006      	b.n	800c11a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	691b      	ldr	r3, [r3, #16]
 800c110:	f003 0301 	and.w	r3, r3, #1
 800c114:	2b01      	cmp	r3, #1
 800c116:	d0f0      	beq.n	800c0fa <USB_CoreReset+0x36>

  return HAL_OK;
 800c118:	2300      	movs	r3, #0
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3714      	adds	r7, #20
 800c11e:	46bd      	mov	sp, r7
 800c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c124:	4770      	bx	lr
	...

0800c128 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c12c:	4904      	ldr	r1, [pc, #16]	@ (800c140 <MX_FATFS_Init+0x18>)
 800c12e:	4805      	ldr	r0, [pc, #20]	@ (800c144 <MX_FATFS_Init+0x1c>)
 800c130:	f002 f9e0 	bl	800e4f4 <FATFS_LinkDriver>
 800c134:	4603      	mov	r3, r0
 800c136:	461a      	mov	r2, r3
 800c138:	4b03      	ldr	r3, [pc, #12]	@ (800c148 <MX_FATFS_Init+0x20>)
 800c13a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c13c:	bf00      	nop
 800c13e:	bd80      	pop	{r7, pc}
 800c140:	20000b74 	.word	0x20000b74
 800c144:	08011dcc 	.word	0x08011dcc
 800c148:	20000b70 	.word	0x20000b70

0800c14c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c152:	2300      	movs	r3, #0
 800c154:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c156:	f000 f879 	bl	800c24c <BSP_SD_IsDetected>
 800c15a:	4603      	mov	r3, r0
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d001      	beq.n	800c164 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c160:	2302      	movs	r3, #2
 800c162:	e012      	b.n	800c18a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c164:	480b      	ldr	r0, [pc, #44]	@ (800c194 <BSP_SD_Init+0x48>)
 800c166:	f7fa fb2d 	bl	80067c4 <HAL_SD_Init>
 800c16a:	4603      	mov	r3, r0
 800c16c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c16e:	79fb      	ldrb	r3, [r7, #7]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d109      	bne.n	800c188 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c174:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800c178:	4806      	ldr	r0, [pc, #24]	@ (800c194 <BSP_SD_Init+0x48>)
 800c17a:	f7fb f90f 	bl	800739c <HAL_SD_ConfigWideBusOperation>
 800c17e:	4603      	mov	r3, r0
 800c180:	2b00      	cmp	r3, #0
 800c182:	d001      	beq.n	800c188 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c184:	2301      	movs	r3, #1
 800c186:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c188:	79fb      	ldrb	r3, [r7, #7]
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3708      	adds	r7, #8
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop
 800c194:	200003f0 	.word	0x200003f0

0800c198 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b088      	sub	sp, #32
 800c19c:	af02      	add	r7, sp, #8
 800c19e:	60f8      	str	r0, [r7, #12]
 800c1a0:	60b9      	str	r1, [r7, #8]
 800c1a2:	607a      	str	r2, [r7, #4]
 800c1a4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	9300      	str	r3, [sp, #0]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	68ba      	ldr	r2, [r7, #8]
 800c1b2:	68f9      	ldr	r1, [r7, #12]
 800c1b4:	4806      	ldr	r0, [pc, #24]	@ (800c1d0 <BSP_SD_ReadBlocks+0x38>)
 800c1b6:	f7fa fbbd 	bl	8006934 <HAL_SD_ReadBlocks>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d001      	beq.n	800c1c4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c1c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3718      	adds	r7, #24
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	200003f0 	.word	0x200003f0

0800c1d4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b088      	sub	sp, #32
 800c1d8:	af02      	add	r7, sp, #8
 800c1da:	60f8      	str	r0, [r7, #12]
 800c1dc:	60b9      	str	r1, [r7, #8]
 800c1de:	607a      	str	r2, [r7, #4]
 800c1e0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	9300      	str	r3, [sp, #0]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	68ba      	ldr	r2, [r7, #8]
 800c1ee:	68f9      	ldr	r1, [r7, #12]
 800c1f0:	4806      	ldr	r0, [pc, #24]	@ (800c20c <BSP_SD_WriteBlocks+0x38>)
 800c1f2:	f7fa fd7d 	bl	8006cf0 <HAL_SD_WriteBlocks>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d001      	beq.n	800c200 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c200:	7dfb      	ldrb	r3, [r7, #23]
}
 800c202:	4618      	mov	r0, r3
 800c204:	3718      	adds	r7, #24
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	200003f0 	.word	0x200003f0

0800c210 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c214:	4805      	ldr	r0, [pc, #20]	@ (800c22c <BSP_SD_GetCardState+0x1c>)
 800c216:	f7fb f95b 	bl	80074d0 <HAL_SD_GetCardState>
 800c21a:	4603      	mov	r3, r0
 800c21c:	2b04      	cmp	r3, #4
 800c21e:	bf14      	ite	ne
 800c220:	2301      	movne	r3, #1
 800c222:	2300      	moveq	r3, #0
 800c224:	b2db      	uxtb	r3, r3
}
 800c226:	4618      	mov	r0, r3
 800c228:	bd80      	pop	{r7, pc}
 800c22a:	bf00      	nop
 800c22c:	200003f0 	.word	0x200003f0

0800c230 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c238:	6879      	ldr	r1, [r7, #4]
 800c23a:	4803      	ldr	r0, [pc, #12]	@ (800c248 <BSP_SD_GetCardInfo+0x18>)
 800c23c:	f7fb f882 	bl	8007344 <HAL_SD_GetCardInfo>
}
 800c240:	bf00      	nop
 800c242:	3708      	adds	r7, #8
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}
 800c248:	200003f0 	.word	0x200003f0

0800c24c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b082      	sub	sp, #8
 800c250:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c252:	2301      	movs	r3, #1
 800c254:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c256:	f000 f80b 	bl	800c270 <BSP_PlatformIsDetected>
 800c25a:	4603      	mov	r3, r0
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d101      	bne.n	800c264 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c260:	2300      	movs	r3, #0
 800c262:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c264:	79fb      	ldrb	r3, [r7, #7]
 800c266:	b2db      	uxtb	r3, r3
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3708      	adds	r7, #8
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c276:	2301      	movs	r3, #1
 800c278:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c27a:	2110      	movs	r1, #16
 800c27c:	4806      	ldr	r0, [pc, #24]	@ (800c298 <BSP_PlatformIsDetected+0x28>)
 800c27e:	f7f7 fe23 	bl	8003ec8 <HAL_GPIO_ReadPin>
 800c282:	4603      	mov	r3, r0
 800c284:	2b00      	cmp	r3, #0
 800c286:	d001      	beq.n	800c28c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800c288:	2300      	movs	r3, #0
 800c28a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c28c:	79fb      	ldrb	r3, [r7, #7]
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3708      	adds	r7, #8
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
 800c296:	bf00      	nop
 800c298:	40020000 	.word	0x40020000

0800c29c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b082      	sub	sp, #8
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c2a6:	4b0b      	ldr	r3, [pc, #44]	@ (800c2d4 <SD_CheckStatus+0x38>)
 800c2a8:	2201      	movs	r2, #1
 800c2aa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c2ac:	f7ff ffb0 	bl	800c210 <BSP_SD_GetCardState>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d107      	bne.n	800c2c6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c2b6:	4b07      	ldr	r3, [pc, #28]	@ (800c2d4 <SD_CheckStatus+0x38>)
 800c2b8:	781b      	ldrb	r3, [r3, #0]
 800c2ba:	b2db      	uxtb	r3, r3
 800c2bc:	f023 0301 	bic.w	r3, r3, #1
 800c2c0:	b2da      	uxtb	r2, r3
 800c2c2:	4b04      	ldr	r3, [pc, #16]	@ (800c2d4 <SD_CheckStatus+0x38>)
 800c2c4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c2c6:	4b03      	ldr	r3, [pc, #12]	@ (800c2d4 <SD_CheckStatus+0x38>)
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	b2db      	uxtb	r3, r3
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3708      	adds	r7, #8
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}
 800c2d4:	20000009 	.word	0x20000009

0800c2d8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b082      	sub	sp, #8
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	4603      	mov	r3, r0
 800c2e0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800c2e2:	4b0b      	ldr	r3, [pc, #44]	@ (800c310 <SD_initialize+0x38>)
 800c2e4:	2201      	movs	r2, #1
 800c2e6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c2e8:	f7ff ff30 	bl	800c14c <BSP_SD_Init>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d107      	bne.n	800c302 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800c2f2:	79fb      	ldrb	r3, [r7, #7]
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f7ff ffd1 	bl	800c29c <SD_CheckStatus>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	4b04      	ldr	r3, [pc, #16]	@ (800c310 <SD_initialize+0x38>)
 800c300:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c302:	4b03      	ldr	r3, [pc, #12]	@ (800c310 <SD_initialize+0x38>)
 800c304:	781b      	ldrb	r3, [r3, #0]
 800c306:	b2db      	uxtb	r3, r3
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3708      	adds	r7, #8
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}
 800c310:	20000009 	.word	0x20000009

0800c314 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b082      	sub	sp, #8
 800c318:	af00      	add	r7, sp, #0
 800c31a:	4603      	mov	r3, r0
 800c31c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c31e:	79fb      	ldrb	r3, [r7, #7]
 800c320:	4618      	mov	r0, r3
 800c322:	f7ff ffbb 	bl	800c29c <SD_CheckStatus>
 800c326:	4603      	mov	r3, r0
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3708      	adds	r7, #8
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b086      	sub	sp, #24
 800c334:	af00      	add	r7, sp, #0
 800c336:	60b9      	str	r1, [r7, #8]
 800c338:	607a      	str	r2, [r7, #4]
 800c33a:	603b      	str	r3, [r7, #0]
 800c33c:	4603      	mov	r3, r0
 800c33e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c340:	2301      	movs	r3, #1
 800c342:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800c344:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c348:	683a      	ldr	r2, [r7, #0]
 800c34a:	6879      	ldr	r1, [r7, #4]
 800c34c:	68b8      	ldr	r0, [r7, #8]
 800c34e:	f7ff ff23 	bl	800c198 <BSP_SD_ReadBlocks>
 800c352:	4603      	mov	r3, r0
 800c354:	2b00      	cmp	r3, #0
 800c356:	d107      	bne.n	800c368 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c358:	bf00      	nop
 800c35a:	f7ff ff59 	bl	800c210 <BSP_SD_GetCardState>
 800c35e:	4603      	mov	r3, r0
 800c360:	2b00      	cmp	r3, #0
 800c362:	d1fa      	bne.n	800c35a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800c364:	2300      	movs	r3, #0
 800c366:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c368:	7dfb      	ldrb	r3, [r7, #23]
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3718      	adds	r7, #24
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}

0800c372 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c372:	b580      	push	{r7, lr}
 800c374:	b086      	sub	sp, #24
 800c376:	af00      	add	r7, sp, #0
 800c378:	60b9      	str	r1, [r7, #8]
 800c37a:	607a      	str	r2, [r7, #4]
 800c37c:	603b      	str	r3, [r7, #0]
 800c37e:	4603      	mov	r3, r0
 800c380:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c382:	2301      	movs	r3, #1
 800c384:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800c386:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c38a:	683a      	ldr	r2, [r7, #0]
 800c38c:	6879      	ldr	r1, [r7, #4]
 800c38e:	68b8      	ldr	r0, [r7, #8]
 800c390:	f7ff ff20 	bl	800c1d4 <BSP_SD_WriteBlocks>
 800c394:	4603      	mov	r3, r0
 800c396:	2b00      	cmp	r3, #0
 800c398:	d107      	bne.n	800c3aa <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800c39a:	bf00      	nop
 800c39c:	f7ff ff38 	bl	800c210 <BSP_SD_GetCardState>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d1fa      	bne.n	800c39c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c3aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3718      	adds	r7, #24
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}

0800c3b4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b08c      	sub	sp, #48	@ 0x30
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	603a      	str	r2, [r7, #0]
 800c3be:	71fb      	strb	r3, [r7, #7]
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c3ca:	4b25      	ldr	r3, [pc, #148]	@ (800c460 <SD_ioctl+0xac>)
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	b2db      	uxtb	r3, r3
 800c3d0:	f003 0301 	and.w	r3, r3, #1
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d001      	beq.n	800c3dc <SD_ioctl+0x28>
 800c3d8:	2303      	movs	r3, #3
 800c3da:	e03c      	b.n	800c456 <SD_ioctl+0xa2>

  switch (cmd)
 800c3dc:	79bb      	ldrb	r3, [r7, #6]
 800c3de:	2b03      	cmp	r3, #3
 800c3e0:	d834      	bhi.n	800c44c <SD_ioctl+0x98>
 800c3e2:	a201      	add	r2, pc, #4	@ (adr r2, 800c3e8 <SD_ioctl+0x34>)
 800c3e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3e8:	0800c3f9 	.word	0x0800c3f9
 800c3ec:	0800c401 	.word	0x0800c401
 800c3f0:	0800c419 	.word	0x0800c419
 800c3f4:	0800c433 	.word	0x0800c433
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c3fe:	e028      	b.n	800c452 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c400:	f107 030c 	add.w	r3, r7, #12
 800c404:	4618      	mov	r0, r3
 800c406:	f7ff ff13 	bl	800c230 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c40a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c410:	2300      	movs	r3, #0
 800c412:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c416:	e01c      	b.n	800c452 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c418:	f107 030c 	add.w	r3, r7, #12
 800c41c:	4618      	mov	r0, r3
 800c41e:	f7ff ff07 	bl	800c230 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c424:	b29a      	uxth	r2, r3
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c42a:	2300      	movs	r3, #0
 800c42c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c430:	e00f      	b.n	800c452 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c432:	f107 030c 	add.w	r3, r7, #12
 800c436:	4618      	mov	r0, r3
 800c438:	f7ff fefa 	bl	800c230 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c43c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c43e:	0a5a      	lsrs	r2, r3, #9
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c444:	2300      	movs	r3, #0
 800c446:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c44a:	e002      	b.n	800c452 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c44c:	2304      	movs	r3, #4
 800c44e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800c452:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c456:	4618      	mov	r0, r3
 800c458:	3730      	adds	r7, #48	@ 0x30
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}
 800c45e:	bf00      	nop
 800c460:	20000009 	.word	0x20000009

0800c464 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b084      	sub	sp, #16
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	460b      	mov	r3, r1
 800c46e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c470:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800c474:	f002 fdd8 	bl	800f028 <malloc>
 800c478:	4603      	mov	r3, r0
 800c47a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d109      	bne.n	800c496 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	32b0      	adds	r2, #176	@ 0xb0
 800c48c:	2100      	movs	r1, #0
 800c48e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c492:	2302      	movs	r3, #2
 800c494:	e0d4      	b.n	800c640 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c496:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800c49a:	2100      	movs	r1, #0
 800c49c:	68f8      	ldr	r0, [r7, #12]
 800c49e:	f003 fc12 	bl	800fcc6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	32b0      	adds	r2, #176	@ 0xb0
 800c4ac:	68f9      	ldr	r1, [r7, #12]
 800c4ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	32b0      	adds	r2, #176	@ 0xb0
 800c4bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	7c1b      	ldrb	r3, [r3, #16]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d138      	bne.n	800c540 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c4ce:	4b5e      	ldr	r3, [pc, #376]	@ (800c648 <USBD_CDC_Init+0x1e4>)
 800c4d0:	7819      	ldrb	r1, [r3, #0]
 800c4d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c4d6:	2202      	movs	r2, #2
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f002 fc02 	bl	800ece2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c4de:	4b5a      	ldr	r3, [pc, #360]	@ (800c648 <USBD_CDC_Init+0x1e4>)
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	f003 020f 	and.w	r2, r3, #15
 800c4e6:	6879      	ldr	r1, [r7, #4]
 800c4e8:	4613      	mov	r3, r2
 800c4ea:	009b      	lsls	r3, r3, #2
 800c4ec:	4413      	add	r3, r2
 800c4ee:	009b      	lsls	r3, r3, #2
 800c4f0:	440b      	add	r3, r1
 800c4f2:	3324      	adds	r3, #36	@ 0x24
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c4f8:	4b54      	ldr	r3, [pc, #336]	@ (800c64c <USBD_CDC_Init+0x1e8>)
 800c4fa:	7819      	ldrb	r1, [r3, #0]
 800c4fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c500:	2202      	movs	r2, #2
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f002 fbed 	bl	800ece2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c508:	4b50      	ldr	r3, [pc, #320]	@ (800c64c <USBD_CDC_Init+0x1e8>)
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	f003 020f 	and.w	r2, r3, #15
 800c510:	6879      	ldr	r1, [r7, #4]
 800c512:	4613      	mov	r3, r2
 800c514:	009b      	lsls	r3, r3, #2
 800c516:	4413      	add	r3, r2
 800c518:	009b      	lsls	r3, r3, #2
 800c51a:	440b      	add	r3, r1
 800c51c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c520:	2201      	movs	r2, #1
 800c522:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c524:	4b4a      	ldr	r3, [pc, #296]	@ (800c650 <USBD_CDC_Init+0x1ec>)
 800c526:	781b      	ldrb	r3, [r3, #0]
 800c528:	f003 020f 	and.w	r2, r3, #15
 800c52c:	6879      	ldr	r1, [r7, #4]
 800c52e:	4613      	mov	r3, r2
 800c530:	009b      	lsls	r3, r3, #2
 800c532:	4413      	add	r3, r2
 800c534:	009b      	lsls	r3, r3, #2
 800c536:	440b      	add	r3, r1
 800c538:	3326      	adds	r3, #38	@ 0x26
 800c53a:	2210      	movs	r2, #16
 800c53c:	801a      	strh	r2, [r3, #0]
 800c53e:	e035      	b.n	800c5ac <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c540:	4b41      	ldr	r3, [pc, #260]	@ (800c648 <USBD_CDC_Init+0x1e4>)
 800c542:	7819      	ldrb	r1, [r3, #0]
 800c544:	2340      	movs	r3, #64	@ 0x40
 800c546:	2202      	movs	r2, #2
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f002 fbca 	bl	800ece2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c54e:	4b3e      	ldr	r3, [pc, #248]	@ (800c648 <USBD_CDC_Init+0x1e4>)
 800c550:	781b      	ldrb	r3, [r3, #0]
 800c552:	f003 020f 	and.w	r2, r3, #15
 800c556:	6879      	ldr	r1, [r7, #4]
 800c558:	4613      	mov	r3, r2
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	4413      	add	r3, r2
 800c55e:	009b      	lsls	r3, r3, #2
 800c560:	440b      	add	r3, r1
 800c562:	3324      	adds	r3, #36	@ 0x24
 800c564:	2201      	movs	r2, #1
 800c566:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c568:	4b38      	ldr	r3, [pc, #224]	@ (800c64c <USBD_CDC_Init+0x1e8>)
 800c56a:	7819      	ldrb	r1, [r3, #0]
 800c56c:	2340      	movs	r3, #64	@ 0x40
 800c56e:	2202      	movs	r2, #2
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f002 fbb6 	bl	800ece2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c576:	4b35      	ldr	r3, [pc, #212]	@ (800c64c <USBD_CDC_Init+0x1e8>)
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	f003 020f 	and.w	r2, r3, #15
 800c57e:	6879      	ldr	r1, [r7, #4]
 800c580:	4613      	mov	r3, r2
 800c582:	009b      	lsls	r3, r3, #2
 800c584:	4413      	add	r3, r2
 800c586:	009b      	lsls	r3, r3, #2
 800c588:	440b      	add	r3, r1
 800c58a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c58e:	2201      	movs	r2, #1
 800c590:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c592:	4b2f      	ldr	r3, [pc, #188]	@ (800c650 <USBD_CDC_Init+0x1ec>)
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	f003 020f 	and.w	r2, r3, #15
 800c59a:	6879      	ldr	r1, [r7, #4]
 800c59c:	4613      	mov	r3, r2
 800c59e:	009b      	lsls	r3, r3, #2
 800c5a0:	4413      	add	r3, r2
 800c5a2:	009b      	lsls	r3, r3, #2
 800c5a4:	440b      	add	r3, r1
 800c5a6:	3326      	adds	r3, #38	@ 0x26
 800c5a8:	2210      	movs	r2, #16
 800c5aa:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c5ac:	4b28      	ldr	r3, [pc, #160]	@ (800c650 <USBD_CDC_Init+0x1ec>)
 800c5ae:	7819      	ldrb	r1, [r3, #0]
 800c5b0:	2308      	movs	r3, #8
 800c5b2:	2203      	movs	r2, #3
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f002 fb94 	bl	800ece2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c5ba:	4b25      	ldr	r3, [pc, #148]	@ (800c650 <USBD_CDC_Init+0x1ec>)
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	f003 020f 	and.w	r2, r3, #15
 800c5c2:	6879      	ldr	r1, [r7, #4]
 800c5c4:	4613      	mov	r3, r2
 800c5c6:	009b      	lsls	r3, r3, #2
 800c5c8:	4413      	add	r3, r2
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	440b      	add	r3, r1
 800c5ce:	3324      	adds	r3, #36	@ 0x24
 800c5d0:	2201      	movs	r2, #1
 800c5d2:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c5e2:	687a      	ldr	r2, [r7, #4]
 800c5e4:	33b0      	adds	r3, #176	@ 0xb0
 800c5e6:	009b      	lsls	r3, r3, #2
 800c5e8:	4413      	add	r3, r2
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800c606:	2b00      	cmp	r3, #0
 800c608:	d101      	bne.n	800c60e <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800c60a:	2302      	movs	r3, #2
 800c60c:	e018      	b.n	800c640 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	7c1b      	ldrb	r3, [r3, #16]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d10a      	bne.n	800c62c <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c616:	4b0d      	ldr	r3, [pc, #52]	@ (800c64c <USBD_CDC_Init+0x1e8>)
 800c618:	7819      	ldrb	r1, [r3, #0]
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c620:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f002 fc4b 	bl	800eec0 <USBD_LL_PrepareReceive>
 800c62a:	e008      	b.n	800c63e <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c62c:	4b07      	ldr	r3, [pc, #28]	@ (800c64c <USBD_CDC_Init+0x1e8>)
 800c62e:	7819      	ldrb	r1, [r3, #0]
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c636:	2340      	movs	r3, #64	@ 0x40
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f002 fc41 	bl	800eec0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c63e:	2300      	movs	r3, #0
}
 800c640:	4618      	mov	r0, r3
 800c642:	3710      	adds	r7, #16
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}
 800c648:	20000093 	.word	0x20000093
 800c64c:	20000094 	.word	0x20000094
 800c650:	20000095 	.word	0x20000095

0800c654 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b082      	sub	sp, #8
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	460b      	mov	r3, r1
 800c65e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c660:	4b3a      	ldr	r3, [pc, #232]	@ (800c74c <USBD_CDC_DeInit+0xf8>)
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	4619      	mov	r1, r3
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f002 fb61 	bl	800ed2e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c66c:	4b37      	ldr	r3, [pc, #220]	@ (800c74c <USBD_CDC_DeInit+0xf8>)
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	f003 020f 	and.w	r2, r3, #15
 800c674:	6879      	ldr	r1, [r7, #4]
 800c676:	4613      	mov	r3, r2
 800c678:	009b      	lsls	r3, r3, #2
 800c67a:	4413      	add	r3, r2
 800c67c:	009b      	lsls	r3, r3, #2
 800c67e:	440b      	add	r3, r1
 800c680:	3324      	adds	r3, #36	@ 0x24
 800c682:	2200      	movs	r2, #0
 800c684:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c686:	4b32      	ldr	r3, [pc, #200]	@ (800c750 <USBD_CDC_DeInit+0xfc>)
 800c688:	781b      	ldrb	r3, [r3, #0]
 800c68a:	4619      	mov	r1, r3
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f002 fb4e 	bl	800ed2e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c692:	4b2f      	ldr	r3, [pc, #188]	@ (800c750 <USBD_CDC_DeInit+0xfc>)
 800c694:	781b      	ldrb	r3, [r3, #0]
 800c696:	f003 020f 	and.w	r2, r3, #15
 800c69a:	6879      	ldr	r1, [r7, #4]
 800c69c:	4613      	mov	r3, r2
 800c69e:	009b      	lsls	r3, r3, #2
 800c6a0:	4413      	add	r3, r2
 800c6a2:	009b      	lsls	r3, r3, #2
 800c6a4:	440b      	add	r3, r1
 800c6a6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c6ae:	4b29      	ldr	r3, [pc, #164]	@ (800c754 <USBD_CDC_DeInit+0x100>)
 800c6b0:	781b      	ldrb	r3, [r3, #0]
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f002 fb3a 	bl	800ed2e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c6ba:	4b26      	ldr	r3, [pc, #152]	@ (800c754 <USBD_CDC_DeInit+0x100>)
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	f003 020f 	and.w	r2, r3, #15
 800c6c2:	6879      	ldr	r1, [r7, #4]
 800c6c4:	4613      	mov	r3, r2
 800c6c6:	009b      	lsls	r3, r3, #2
 800c6c8:	4413      	add	r3, r2
 800c6ca:	009b      	lsls	r3, r3, #2
 800c6cc:	440b      	add	r3, r1
 800c6ce:	3324      	adds	r3, #36	@ 0x24
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c6d4:	4b1f      	ldr	r3, [pc, #124]	@ (800c754 <USBD_CDC_DeInit+0x100>)
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	f003 020f 	and.w	r2, r3, #15
 800c6dc:	6879      	ldr	r1, [r7, #4]
 800c6de:	4613      	mov	r3, r2
 800c6e0:	009b      	lsls	r3, r3, #2
 800c6e2:	4413      	add	r3, r2
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	440b      	add	r3, r1
 800c6e8:	3326      	adds	r3, #38	@ 0x26
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	32b0      	adds	r2, #176	@ 0xb0
 800c6f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d01f      	beq.n	800c740 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	33b0      	adds	r3, #176	@ 0xb0
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	4413      	add	r3, r2
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	685b      	ldr	r3, [r3, #4]
 800c712:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	32b0      	adds	r2, #176	@ 0xb0
 800c71e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c722:	4618      	mov	r0, r3
 800c724:	f002 fc88 	bl	800f038 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	32b0      	adds	r2, #176	@ 0xb0
 800c732:	2100      	movs	r1, #0
 800c734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2200      	movs	r2, #0
 800c73c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c740:	2300      	movs	r3, #0
}
 800c742:	4618      	mov	r0, r3
 800c744:	3708      	adds	r7, #8
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	20000093 	.word	0x20000093
 800c750:	20000094 	.word	0x20000094
 800c754:	20000095 	.word	0x20000095

0800c758 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b086      	sub	sp, #24
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	32b0      	adds	r2, #176	@ 0xb0
 800c76c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c770:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c772:	2300      	movs	r3, #0
 800c774:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c776:	2300      	movs	r3, #0
 800c778:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c77a:	2300      	movs	r3, #0
 800c77c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d101      	bne.n	800c788 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c784:	2303      	movs	r3, #3
 800c786:	e0bf      	b.n	800c908 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	781b      	ldrb	r3, [r3, #0]
 800c78c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c790:	2b00      	cmp	r3, #0
 800c792:	d050      	beq.n	800c836 <USBD_CDC_Setup+0xde>
 800c794:	2b20      	cmp	r3, #32
 800c796:	f040 80af 	bne.w	800c8f8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	88db      	ldrh	r3, [r3, #6]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d03a      	beq.n	800c818 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	781b      	ldrb	r3, [r3, #0]
 800c7a6:	b25b      	sxtb	r3, r3
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	da1b      	bge.n	800c7e4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	33b0      	adds	r3, #176	@ 0xb0
 800c7b6:	009b      	lsls	r3, r3, #2
 800c7b8:	4413      	add	r3, r2
 800c7ba:	685b      	ldr	r3, [r3, #4]
 800c7bc:	689b      	ldr	r3, [r3, #8]
 800c7be:	683a      	ldr	r2, [r7, #0]
 800c7c0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c7c2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c7c4:	683a      	ldr	r2, [r7, #0]
 800c7c6:	88d2      	ldrh	r2, [r2, #6]
 800c7c8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	88db      	ldrh	r3, [r3, #6]
 800c7ce:	2b07      	cmp	r3, #7
 800c7d0:	bf28      	it	cs
 800c7d2:	2307      	movcs	r3, #7
 800c7d4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	89fa      	ldrh	r2, [r7, #14]
 800c7da:	4619      	mov	r1, r3
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f001 fdbd 	bl	800e35c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c7e2:	e090      	b.n	800c906 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	785a      	ldrb	r2, [r3, #1]
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	88db      	ldrh	r3, [r3, #6]
 800c7f2:	2b3f      	cmp	r3, #63	@ 0x3f
 800c7f4:	d803      	bhi.n	800c7fe <USBD_CDC_Setup+0xa6>
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	88db      	ldrh	r3, [r3, #6]
 800c7fa:	b2da      	uxtb	r2, r3
 800c7fc:	e000      	b.n	800c800 <USBD_CDC_Setup+0xa8>
 800c7fe:	2240      	movs	r2, #64	@ 0x40
 800c800:	693b      	ldr	r3, [r7, #16]
 800c802:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c806:	6939      	ldr	r1, [r7, #16]
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800c80e:	461a      	mov	r2, r3
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f001 fdcf 	bl	800e3b4 <USBD_CtlPrepareRx>
      break;
 800c816:	e076      	b.n	800c906 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c81e:	687a      	ldr	r2, [r7, #4]
 800c820:	33b0      	adds	r3, #176	@ 0xb0
 800c822:	009b      	lsls	r3, r3, #2
 800c824:	4413      	add	r3, r2
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	689b      	ldr	r3, [r3, #8]
 800c82a:	683a      	ldr	r2, [r7, #0]
 800c82c:	7850      	ldrb	r0, [r2, #1]
 800c82e:	2200      	movs	r2, #0
 800c830:	6839      	ldr	r1, [r7, #0]
 800c832:	4798      	blx	r3
      break;
 800c834:	e067      	b.n	800c906 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	785b      	ldrb	r3, [r3, #1]
 800c83a:	2b0b      	cmp	r3, #11
 800c83c:	d851      	bhi.n	800c8e2 <USBD_CDC_Setup+0x18a>
 800c83e:	a201      	add	r2, pc, #4	@ (adr r2, 800c844 <USBD_CDC_Setup+0xec>)
 800c840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c844:	0800c875 	.word	0x0800c875
 800c848:	0800c8f1 	.word	0x0800c8f1
 800c84c:	0800c8e3 	.word	0x0800c8e3
 800c850:	0800c8e3 	.word	0x0800c8e3
 800c854:	0800c8e3 	.word	0x0800c8e3
 800c858:	0800c8e3 	.word	0x0800c8e3
 800c85c:	0800c8e3 	.word	0x0800c8e3
 800c860:	0800c8e3 	.word	0x0800c8e3
 800c864:	0800c8e3 	.word	0x0800c8e3
 800c868:	0800c8e3 	.word	0x0800c8e3
 800c86c:	0800c89f 	.word	0x0800c89f
 800c870:	0800c8c9 	.word	0x0800c8c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	2b03      	cmp	r3, #3
 800c87e:	d107      	bne.n	800c890 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c880:	f107 030a 	add.w	r3, r7, #10
 800c884:	2202      	movs	r2, #2
 800c886:	4619      	mov	r1, r3
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f001 fd67 	bl	800e35c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c88e:	e032      	b.n	800c8f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c890:	6839      	ldr	r1, [r7, #0]
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f001 fce5 	bl	800e262 <USBD_CtlError>
            ret = USBD_FAIL;
 800c898:	2303      	movs	r3, #3
 800c89a:	75fb      	strb	r3, [r7, #23]
          break;
 800c89c:	e02b      	b.n	800c8f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8a4:	b2db      	uxtb	r3, r3
 800c8a6:	2b03      	cmp	r3, #3
 800c8a8:	d107      	bne.n	800c8ba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c8aa:	f107 030d 	add.w	r3, r7, #13
 800c8ae:	2201      	movs	r2, #1
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f001 fd52 	bl	800e35c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c8b8:	e01d      	b.n	800c8f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c8ba:	6839      	ldr	r1, [r7, #0]
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f001 fcd0 	bl	800e262 <USBD_CtlError>
            ret = USBD_FAIL;
 800c8c2:	2303      	movs	r3, #3
 800c8c4:	75fb      	strb	r3, [r7, #23]
          break;
 800c8c6:	e016      	b.n	800c8f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8ce:	b2db      	uxtb	r3, r3
 800c8d0:	2b03      	cmp	r3, #3
 800c8d2:	d00f      	beq.n	800c8f4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c8d4:	6839      	ldr	r1, [r7, #0]
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f001 fcc3 	bl	800e262 <USBD_CtlError>
            ret = USBD_FAIL;
 800c8dc:	2303      	movs	r3, #3
 800c8de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c8e0:	e008      	b.n	800c8f4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c8e2:	6839      	ldr	r1, [r7, #0]
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f001 fcbc 	bl	800e262 <USBD_CtlError>
          ret = USBD_FAIL;
 800c8ea:	2303      	movs	r3, #3
 800c8ec:	75fb      	strb	r3, [r7, #23]
          break;
 800c8ee:	e002      	b.n	800c8f6 <USBD_CDC_Setup+0x19e>
          break;
 800c8f0:	bf00      	nop
 800c8f2:	e008      	b.n	800c906 <USBD_CDC_Setup+0x1ae>
          break;
 800c8f4:	bf00      	nop
      }
      break;
 800c8f6:	e006      	b.n	800c906 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c8f8:	6839      	ldr	r1, [r7, #0]
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f001 fcb1 	bl	800e262 <USBD_CtlError>
      ret = USBD_FAIL;
 800c900:	2303      	movs	r3, #3
 800c902:	75fb      	strb	r3, [r7, #23]
      break;
 800c904:	bf00      	nop
  }

  return (uint8_t)ret;
 800c906:	7dfb      	ldrb	r3, [r7, #23]
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3718      	adds	r7, #24
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b084      	sub	sp, #16
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	460b      	mov	r3, r1
 800c91a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c922:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	32b0      	adds	r2, #176	@ 0xb0
 800c92e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d101      	bne.n	800c93a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c936:	2303      	movs	r3, #3
 800c938:	e065      	b.n	800ca06 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	32b0      	adds	r2, #176	@ 0xb0
 800c944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c948:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c94a:	78fb      	ldrb	r3, [r7, #3]
 800c94c:	f003 020f 	and.w	r2, r3, #15
 800c950:	6879      	ldr	r1, [r7, #4]
 800c952:	4613      	mov	r3, r2
 800c954:	009b      	lsls	r3, r3, #2
 800c956:	4413      	add	r3, r2
 800c958:	009b      	lsls	r3, r3, #2
 800c95a:	440b      	add	r3, r1
 800c95c:	3318      	adds	r3, #24
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d02f      	beq.n	800c9c4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c964:	78fb      	ldrb	r3, [r7, #3]
 800c966:	f003 020f 	and.w	r2, r3, #15
 800c96a:	6879      	ldr	r1, [r7, #4]
 800c96c:	4613      	mov	r3, r2
 800c96e:	009b      	lsls	r3, r3, #2
 800c970:	4413      	add	r3, r2
 800c972:	009b      	lsls	r3, r3, #2
 800c974:	440b      	add	r3, r1
 800c976:	3318      	adds	r3, #24
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	78fb      	ldrb	r3, [r7, #3]
 800c97c:	f003 010f 	and.w	r1, r3, #15
 800c980:	68f8      	ldr	r0, [r7, #12]
 800c982:	460b      	mov	r3, r1
 800c984:	00db      	lsls	r3, r3, #3
 800c986:	440b      	add	r3, r1
 800c988:	009b      	lsls	r3, r3, #2
 800c98a:	4403      	add	r3, r0
 800c98c:	331c      	adds	r3, #28
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	fbb2 f1f3 	udiv	r1, r2, r3
 800c994:	fb01 f303 	mul.w	r3, r1, r3
 800c998:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d112      	bne.n	800c9c4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c99e:	78fb      	ldrb	r3, [r7, #3]
 800c9a0:	f003 020f 	and.w	r2, r3, #15
 800c9a4:	6879      	ldr	r1, [r7, #4]
 800c9a6:	4613      	mov	r3, r2
 800c9a8:	009b      	lsls	r3, r3, #2
 800c9aa:	4413      	add	r3, r2
 800c9ac:	009b      	lsls	r3, r3, #2
 800c9ae:	440b      	add	r3, r1
 800c9b0:	3318      	adds	r3, #24
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c9b6:	78f9      	ldrb	r1, [r7, #3]
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f002 fa5e 	bl	800ee7e <USBD_LL_Transmit>
 800c9c2:	e01f      	b.n	800ca04 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c9d2:	687a      	ldr	r2, [r7, #4]
 800c9d4:	33b0      	adds	r3, #176	@ 0xb0
 800c9d6:	009b      	lsls	r3, r3, #2
 800c9d8:	4413      	add	r3, r2
 800c9da:	685b      	ldr	r3, [r3, #4]
 800c9dc:	691b      	ldr	r3, [r3, #16]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d010      	beq.n	800ca04 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c9e8:	687a      	ldr	r2, [r7, #4]
 800c9ea:	33b0      	adds	r3, #176	@ 0xb0
 800c9ec:	009b      	lsls	r3, r3, #2
 800c9ee:	4413      	add	r3, r2
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	691b      	ldr	r3, [r3, #16]
 800c9f4:	68ba      	ldr	r2, [r7, #8]
 800c9f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c9fa:	68ba      	ldr	r2, [r7, #8]
 800c9fc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ca00:	78fa      	ldrb	r2, [r7, #3]
 800ca02:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ca04:	2300      	movs	r3, #0
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3710      	adds	r7, #16
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}

0800ca0e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ca0e:	b580      	push	{r7, lr}
 800ca10:	b084      	sub	sp, #16
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	6078      	str	r0, [r7, #4]
 800ca16:	460b      	mov	r3, r1
 800ca18:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	32b0      	adds	r2, #176	@ 0xb0
 800ca24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca28:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	32b0      	adds	r2, #176	@ 0xb0
 800ca34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d101      	bne.n	800ca40 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ca3c:	2303      	movs	r3, #3
 800ca3e:	e01a      	b.n	800ca76 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ca40:	78fb      	ldrb	r3, [r7, #3]
 800ca42:	4619      	mov	r1, r3
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f002 fa5c 	bl	800ef02 <USBD_LL_GetRxDataSize>
 800ca4a:	4602      	mov	r2, r0
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ca58:	687a      	ldr	r2, [r7, #4]
 800ca5a:	33b0      	adds	r3, #176	@ 0xb0
 800ca5c:	009b      	lsls	r3, r3, #2
 800ca5e:	4413      	add	r3, r2
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	68db      	ldr	r3, [r3, #12]
 800ca64:	68fa      	ldr	r2, [r7, #12]
 800ca66:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ca6a:	68fa      	ldr	r2, [r7, #12]
 800ca6c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ca70:	4611      	mov	r1, r2
 800ca72:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ca74:	2300      	movs	r3, #0
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3710      	adds	r7, #16
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}

0800ca7e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ca7e:	b580      	push	{r7, lr}
 800ca80:	b084      	sub	sp, #16
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	32b0      	adds	r2, #176	@ 0xb0
 800ca90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca94:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d101      	bne.n	800caa0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ca9c:	2303      	movs	r3, #3
 800ca9e:	e024      	b.n	800caea <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800caa6:	687a      	ldr	r2, [r7, #4]
 800caa8:	33b0      	adds	r3, #176	@ 0xb0
 800caaa:	009b      	lsls	r3, r3, #2
 800caac:	4413      	add	r3, r2
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d019      	beq.n	800cae8 <USBD_CDC_EP0_RxReady+0x6a>
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800caba:	2bff      	cmp	r3, #255	@ 0xff
 800cabc:	d014      	beq.n	800cae8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cac4:	687a      	ldr	r2, [r7, #4]
 800cac6:	33b0      	adds	r3, #176	@ 0xb0
 800cac8:	009b      	lsls	r3, r3, #2
 800caca:	4413      	add	r3, r2
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	689b      	ldr	r3, [r3, #8]
 800cad0:	68fa      	ldr	r2, [r7, #12]
 800cad2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800cad6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800cad8:	68fa      	ldr	r2, [r7, #12]
 800cada:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cade:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	22ff      	movs	r2, #255	@ 0xff
 800cae4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800cae8:	2300      	movs	r3, #0
}
 800caea:	4618      	mov	r0, r3
 800caec:	3710      	adds	r7, #16
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}
	...

0800caf4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b086      	sub	sp, #24
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cafc:	2182      	movs	r1, #130	@ 0x82
 800cafe:	4818      	ldr	r0, [pc, #96]	@ (800cb60 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cb00:	f000 fd4f 	bl	800d5a2 <USBD_GetEpDesc>
 800cb04:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cb06:	2101      	movs	r1, #1
 800cb08:	4815      	ldr	r0, [pc, #84]	@ (800cb60 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cb0a:	f000 fd4a 	bl	800d5a2 <USBD_GetEpDesc>
 800cb0e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cb10:	2181      	movs	r1, #129	@ 0x81
 800cb12:	4813      	ldr	r0, [pc, #76]	@ (800cb60 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cb14:	f000 fd45 	bl	800d5a2 <USBD_GetEpDesc>
 800cb18:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d002      	beq.n	800cb26 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	2210      	movs	r2, #16
 800cb24:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d006      	beq.n	800cb3a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cb2c:	693b      	ldr	r3, [r7, #16]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cb34:	711a      	strb	r2, [r3, #4]
 800cb36:	2200      	movs	r2, #0
 800cb38:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d006      	beq.n	800cb4e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	2200      	movs	r2, #0
 800cb44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cb48:	711a      	strb	r2, [r3, #4]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2243      	movs	r2, #67	@ 0x43
 800cb52:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cb54:	4b02      	ldr	r3, [pc, #8]	@ (800cb60 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3718      	adds	r7, #24
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}
 800cb5e:	bf00      	nop
 800cb60:	20000050 	.word	0x20000050

0800cb64 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b086      	sub	sp, #24
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cb6c:	2182      	movs	r1, #130	@ 0x82
 800cb6e:	4818      	ldr	r0, [pc, #96]	@ (800cbd0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cb70:	f000 fd17 	bl	800d5a2 <USBD_GetEpDesc>
 800cb74:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cb76:	2101      	movs	r1, #1
 800cb78:	4815      	ldr	r0, [pc, #84]	@ (800cbd0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cb7a:	f000 fd12 	bl	800d5a2 <USBD_GetEpDesc>
 800cb7e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cb80:	2181      	movs	r1, #129	@ 0x81
 800cb82:	4813      	ldr	r0, [pc, #76]	@ (800cbd0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cb84:	f000 fd0d 	bl	800d5a2 <USBD_GetEpDesc>
 800cb88:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d002      	beq.n	800cb96 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800cb90:	697b      	ldr	r3, [r7, #20]
 800cb92:	2210      	movs	r2, #16
 800cb94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d006      	beq.n	800cbaa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	2200      	movs	r2, #0
 800cba0:	711a      	strb	r2, [r3, #4]
 800cba2:	2200      	movs	r2, #0
 800cba4:	f042 0202 	orr.w	r2, r2, #2
 800cba8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d006      	beq.n	800cbbe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	711a      	strb	r2, [r3, #4]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	f042 0202 	orr.w	r2, r2, #2
 800cbbc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2243      	movs	r2, #67	@ 0x43
 800cbc2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cbc4:	4b02      	ldr	r3, [pc, #8]	@ (800cbd0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3718      	adds	r7, #24
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}
 800cbce:	bf00      	nop
 800cbd0:	20000050 	.word	0x20000050

0800cbd4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b086      	sub	sp, #24
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cbdc:	2182      	movs	r1, #130	@ 0x82
 800cbde:	4818      	ldr	r0, [pc, #96]	@ (800cc40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cbe0:	f000 fcdf 	bl	800d5a2 <USBD_GetEpDesc>
 800cbe4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cbe6:	2101      	movs	r1, #1
 800cbe8:	4815      	ldr	r0, [pc, #84]	@ (800cc40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cbea:	f000 fcda 	bl	800d5a2 <USBD_GetEpDesc>
 800cbee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cbf0:	2181      	movs	r1, #129	@ 0x81
 800cbf2:	4813      	ldr	r0, [pc, #76]	@ (800cc40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cbf4:	f000 fcd5 	bl	800d5a2 <USBD_GetEpDesc>
 800cbf8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d002      	beq.n	800cc06 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	2210      	movs	r2, #16
 800cc04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d006      	beq.n	800cc1a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cc14:	711a      	strb	r2, [r3, #4]
 800cc16:	2200      	movs	r2, #0
 800cc18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d006      	beq.n	800cc2e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	2200      	movs	r2, #0
 800cc24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cc28:	711a      	strb	r2, [r3, #4]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2243      	movs	r2, #67	@ 0x43
 800cc32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cc34:	4b02      	ldr	r3, [pc, #8]	@ (800cc40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3718      	adds	r7, #24
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	20000050 	.word	0x20000050

0800cc44 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b083      	sub	sp, #12
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	220a      	movs	r2, #10
 800cc50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cc52:	4b03      	ldr	r3, [pc, #12]	@ (800cc60 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	370c      	adds	r7, #12
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5e:	4770      	bx	lr
 800cc60:	2000000c 	.word	0x2000000c

0800cc64 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cc64:	b480      	push	{r7}
 800cc66:	b083      	sub	sp, #12
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d101      	bne.n	800cc78 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cc74:	2303      	movs	r3, #3
 800cc76:	e009      	b.n	800cc8c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	33b0      	adds	r3, #176	@ 0xb0
 800cc82:	009b      	lsls	r3, r3, #2
 800cc84:	4413      	add	r3, r2
 800cc86:	683a      	ldr	r2, [r7, #0]
 800cc88:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800cc8a:	2300      	movs	r3, #0
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	370c      	adds	r7, #12
 800cc90:	46bd      	mov	sp, r7
 800cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc96:	4770      	bx	lr

0800cc98 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b087      	sub	sp, #28
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	60f8      	str	r0, [r7, #12]
 800cca0:	60b9      	str	r1, [r7, #8]
 800cca2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	32b0      	adds	r2, #176	@ 0xb0
 800ccae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccb2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d101      	bne.n	800ccbe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ccba:	2303      	movs	r3, #3
 800ccbc:	e008      	b.n	800ccd0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	68ba      	ldr	r2, [r7, #8]
 800ccc2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ccce:	2300      	movs	r3, #0
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	371c      	adds	r7, #28
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr

0800ccdc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ccdc:	b480      	push	{r7}
 800ccde:	b085      	sub	sp, #20
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	32b0      	adds	r2, #176	@ 0xb0
 800ccf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccf4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d101      	bne.n	800cd00 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ccfc:	2303      	movs	r3, #3
 800ccfe:	e004      	b.n	800cd0a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	683a      	ldr	r2, [r7, #0]
 800cd04:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800cd08:	2300      	movs	r3, #0
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3714      	adds	r7, #20
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr
	...

0800cd18 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b084      	sub	sp, #16
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	32b0      	adds	r2, #176	@ 0xb0
 800cd2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd2e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800cd30:	2301      	movs	r3, #1
 800cd32:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d101      	bne.n	800cd3e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800cd3a:	2303      	movs	r3, #3
 800cd3c:	e025      	b.n	800cd8a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800cd3e:	68bb      	ldr	r3, [r7, #8]
 800cd40:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d11f      	bne.n	800cd88 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	2201      	movs	r2, #1
 800cd4c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800cd50:	4b10      	ldr	r3, [pc, #64]	@ (800cd94 <USBD_CDC_TransmitPacket+0x7c>)
 800cd52:	781b      	ldrb	r3, [r3, #0]
 800cd54:	f003 020f 	and.w	r2, r3, #15
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	4613      	mov	r3, r2
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	4413      	add	r3, r2
 800cd66:	009b      	lsls	r3, r3, #2
 800cd68:	4403      	add	r3, r0
 800cd6a:	3318      	adds	r3, #24
 800cd6c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800cd6e:	4b09      	ldr	r3, [pc, #36]	@ (800cd94 <USBD_CDC_TransmitPacket+0x7c>)
 800cd70:	7819      	ldrb	r1, [r3, #0]
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f002 f87d 	bl	800ee7e <USBD_LL_Transmit>

    ret = USBD_OK;
 800cd84:	2300      	movs	r3, #0
 800cd86:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800cd88:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3710      	adds	r7, #16
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}
 800cd92:	bf00      	nop
 800cd94:	20000093 	.word	0x20000093

0800cd98 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b084      	sub	sp, #16
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	32b0      	adds	r2, #176	@ 0xb0
 800cdaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	32b0      	adds	r2, #176	@ 0xb0
 800cdba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d101      	bne.n	800cdc6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800cdc2:	2303      	movs	r3, #3
 800cdc4:	e018      	b.n	800cdf8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	7c1b      	ldrb	r3, [r3, #16]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d10a      	bne.n	800cde4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cdce:	4b0c      	ldr	r3, [pc, #48]	@ (800ce00 <USBD_CDC_ReceivePacket+0x68>)
 800cdd0:	7819      	ldrb	r1, [r3, #0]
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cdd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f002 f86f 	bl	800eec0 <USBD_LL_PrepareReceive>
 800cde2:	e008      	b.n	800cdf6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cde4:	4b06      	ldr	r3, [pc, #24]	@ (800ce00 <USBD_CDC_ReceivePacket+0x68>)
 800cde6:	7819      	ldrb	r1, [r3, #0]
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cdee:	2340      	movs	r3, #64	@ 0x40
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f002 f865 	bl	800eec0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cdf6:	2300      	movs	r3, #0
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3710      	adds	r7, #16
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}
 800ce00:	20000094 	.word	0x20000094

0800ce04 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b086      	sub	sp, #24
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	60f8      	str	r0, [r7, #12]
 800ce0c:	60b9      	str	r1, [r7, #8]
 800ce0e:	4613      	mov	r3, r2
 800ce10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d101      	bne.n	800ce1c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ce18:	2303      	movs	r3, #3
 800ce1a:	e01f      	b.n	800ce5c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	2200      	movs	r2, #0
 800ce28:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d003      	beq.n	800ce42 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	68ba      	ldr	r2, [r7, #8]
 800ce3e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2201      	movs	r2, #1
 800ce46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	79fa      	ldrb	r2, [r7, #7]
 800ce4e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ce50:	68f8      	ldr	r0, [r7, #12]
 800ce52:	f001 fedb 	bl	800ec0c <USBD_LL_Init>
 800ce56:	4603      	mov	r3, r0
 800ce58:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ce5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3718      	adds	r7, #24
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}

0800ce64 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b084      	sub	sp, #16
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
 800ce6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d101      	bne.n	800ce7c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ce78:	2303      	movs	r3, #3
 800ce7a:	e025      	b.n	800cec8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	683a      	ldr	r2, [r7, #0]
 800ce80:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	32ae      	adds	r2, #174	@ 0xae
 800ce8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d00f      	beq.n	800ceb8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	32ae      	adds	r2, #174	@ 0xae
 800cea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cea8:	f107 020e 	add.w	r2, r7, #14
 800ceac:	4610      	mov	r0, r2
 800ceae:	4798      	blx	r3
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cebe:	1c5a      	adds	r2, r3, #1
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800cec6:	2300      	movs	r3, #0
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3710      	adds	r7, #16
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b082      	sub	sp, #8
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f001 fee7 	bl	800ecac <USBD_LL_Start>
 800cede:	4603      	mov	r3, r0
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3708      	adds	r7, #8
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b083      	sub	sp, #12
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cef0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	370c      	adds	r7, #12
 800cef6:	46bd      	mov	sp, r7
 800cef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefc:	4770      	bx	lr

0800cefe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cefe:	b580      	push	{r7, lr}
 800cf00:	b084      	sub	sp, #16
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
 800cf06:	460b      	mov	r3, r1
 800cf08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d009      	beq.n	800cf2c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	78fa      	ldrb	r2, [r7, #3]
 800cf22:	4611      	mov	r1, r2
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	4798      	blx	r3
 800cf28:	4603      	mov	r3, r0
 800cf2a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cf2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3710      	adds	r7, #16
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}

0800cf36 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf36:	b580      	push	{r7, lr}
 800cf38:	b084      	sub	sp, #16
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	6078      	str	r0, [r7, #4]
 800cf3e:	460b      	mov	r3, r1
 800cf40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf42:	2300      	movs	r3, #0
 800cf44:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	78fa      	ldrb	r2, [r7, #3]
 800cf50:	4611      	mov	r1, r2
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	4798      	blx	r3
 800cf56:	4603      	mov	r3, r0
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d001      	beq.n	800cf60 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800cf5c:	2303      	movs	r3, #3
 800cf5e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cf60:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3710      	adds	r7, #16
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}

0800cf6a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cf6a:	b580      	push	{r7, lr}
 800cf6c:	b084      	sub	sp, #16
 800cf6e:	af00      	add	r7, sp, #0
 800cf70:	6078      	str	r0, [r7, #4]
 800cf72:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cf7a:	6839      	ldr	r1, [r7, #0]
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f001 f936 	bl	800e1ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2201      	movs	r2, #1
 800cf86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800cf90:	461a      	mov	r2, r3
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cf9e:	f003 031f 	and.w	r3, r3, #31
 800cfa2:	2b02      	cmp	r3, #2
 800cfa4:	d01a      	beq.n	800cfdc <USBD_LL_SetupStage+0x72>
 800cfa6:	2b02      	cmp	r3, #2
 800cfa8:	d822      	bhi.n	800cff0 <USBD_LL_SetupStage+0x86>
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d002      	beq.n	800cfb4 <USBD_LL_SetupStage+0x4a>
 800cfae:	2b01      	cmp	r3, #1
 800cfb0:	d00a      	beq.n	800cfc8 <USBD_LL_SetupStage+0x5e>
 800cfb2:	e01d      	b.n	800cff0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cfba:	4619      	mov	r1, r3
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f000 fb63 	bl	800d688 <USBD_StdDevReq>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	73fb      	strb	r3, [r7, #15]
      break;
 800cfc6:	e020      	b.n	800d00a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cfce:	4619      	mov	r1, r3
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f000 fbcb 	bl	800d76c <USBD_StdItfReq>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	73fb      	strb	r3, [r7, #15]
      break;
 800cfda:	e016      	b.n	800d00a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f000 fc2d 	bl	800d844 <USBD_StdEPReq>
 800cfea:	4603      	mov	r3, r0
 800cfec:	73fb      	strb	r3, [r7, #15]
      break;
 800cfee:	e00c      	b.n	800d00a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cff6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cffa:	b2db      	uxtb	r3, r3
 800cffc:	4619      	mov	r1, r3
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f001 feb4 	bl	800ed6c <USBD_LL_StallEP>
 800d004:	4603      	mov	r3, r0
 800d006:	73fb      	strb	r3, [r7, #15]
      break;
 800d008:	bf00      	nop
  }

  return ret;
 800d00a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3710      	adds	r7, #16
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}

0800d014 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b086      	sub	sp, #24
 800d018:	af00      	add	r7, sp, #0
 800d01a:	60f8      	str	r0, [r7, #12]
 800d01c:	460b      	mov	r3, r1
 800d01e:	607a      	str	r2, [r7, #4]
 800d020:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d022:	2300      	movs	r3, #0
 800d024:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d026:	7afb      	ldrb	r3, [r7, #11]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d16e      	bne.n	800d10a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d032:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d03a:	2b03      	cmp	r3, #3
 800d03c:	f040 8098 	bne.w	800d170 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	689a      	ldr	r2, [r3, #8]
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	68db      	ldr	r3, [r3, #12]
 800d048:	429a      	cmp	r2, r3
 800d04a:	d913      	bls.n	800d074 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	689a      	ldr	r2, [r3, #8]
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	68db      	ldr	r3, [r3, #12]
 800d054:	1ad2      	subs	r2, r2, r3
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	68da      	ldr	r2, [r3, #12]
 800d05e:	693b      	ldr	r3, [r7, #16]
 800d060:	689b      	ldr	r3, [r3, #8]
 800d062:	4293      	cmp	r3, r2
 800d064:	bf28      	it	cs
 800d066:	4613      	movcs	r3, r2
 800d068:	461a      	mov	r2, r3
 800d06a:	6879      	ldr	r1, [r7, #4]
 800d06c:	68f8      	ldr	r0, [r7, #12]
 800d06e:	f001 f9be 	bl	800e3ee <USBD_CtlContinueRx>
 800d072:	e07d      	b.n	800d170 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d07a:	f003 031f 	and.w	r3, r3, #31
 800d07e:	2b02      	cmp	r3, #2
 800d080:	d014      	beq.n	800d0ac <USBD_LL_DataOutStage+0x98>
 800d082:	2b02      	cmp	r3, #2
 800d084:	d81d      	bhi.n	800d0c2 <USBD_LL_DataOutStage+0xae>
 800d086:	2b00      	cmp	r3, #0
 800d088:	d002      	beq.n	800d090 <USBD_LL_DataOutStage+0x7c>
 800d08a:	2b01      	cmp	r3, #1
 800d08c:	d003      	beq.n	800d096 <USBD_LL_DataOutStage+0x82>
 800d08e:	e018      	b.n	800d0c2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d090:	2300      	movs	r3, #0
 800d092:	75bb      	strb	r3, [r7, #22]
            break;
 800d094:	e018      	b.n	800d0c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d09c:	b2db      	uxtb	r3, r3
 800d09e:	4619      	mov	r1, r3
 800d0a0:	68f8      	ldr	r0, [r7, #12]
 800d0a2:	f000 fa64 	bl	800d56e <USBD_CoreFindIF>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	75bb      	strb	r3, [r7, #22]
            break;
 800d0aa:	e00d      	b.n	800d0c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	4619      	mov	r1, r3
 800d0b6:	68f8      	ldr	r0, [r7, #12]
 800d0b8:	f000 fa66 	bl	800d588 <USBD_CoreFindEP>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	75bb      	strb	r3, [r7, #22]
            break;
 800d0c0:	e002      	b.n	800d0c8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	75bb      	strb	r3, [r7, #22]
            break;
 800d0c6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d0c8:	7dbb      	ldrb	r3, [r7, #22]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d119      	bne.n	800d102 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d0d4:	b2db      	uxtb	r3, r3
 800d0d6:	2b03      	cmp	r3, #3
 800d0d8:	d113      	bne.n	800d102 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d0da:	7dba      	ldrb	r2, [r7, #22]
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	32ae      	adds	r2, #174	@ 0xae
 800d0e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0e4:	691b      	ldr	r3, [r3, #16]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d00b      	beq.n	800d102 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d0ea:	7dba      	ldrb	r2, [r7, #22]
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d0f2:	7dba      	ldrb	r2, [r7, #22]
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	32ae      	adds	r2, #174	@ 0xae
 800d0f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0fc:	691b      	ldr	r3, [r3, #16]
 800d0fe:	68f8      	ldr	r0, [r7, #12]
 800d100:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d102:	68f8      	ldr	r0, [r7, #12]
 800d104:	f001 f984 	bl	800e410 <USBD_CtlSendStatus>
 800d108:	e032      	b.n	800d170 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d10a:	7afb      	ldrb	r3, [r7, #11]
 800d10c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d110:	b2db      	uxtb	r3, r3
 800d112:	4619      	mov	r1, r3
 800d114:	68f8      	ldr	r0, [r7, #12]
 800d116:	f000 fa37 	bl	800d588 <USBD_CoreFindEP>
 800d11a:	4603      	mov	r3, r0
 800d11c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d11e:	7dbb      	ldrb	r3, [r7, #22]
 800d120:	2bff      	cmp	r3, #255	@ 0xff
 800d122:	d025      	beq.n	800d170 <USBD_LL_DataOutStage+0x15c>
 800d124:	7dbb      	ldrb	r3, [r7, #22]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d122      	bne.n	800d170 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d130:	b2db      	uxtb	r3, r3
 800d132:	2b03      	cmp	r3, #3
 800d134:	d117      	bne.n	800d166 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d136:	7dba      	ldrb	r2, [r7, #22]
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	32ae      	adds	r2, #174	@ 0xae
 800d13c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d140:	699b      	ldr	r3, [r3, #24]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d00f      	beq.n	800d166 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d146:	7dba      	ldrb	r2, [r7, #22]
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d14e:	7dba      	ldrb	r2, [r7, #22]
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	32ae      	adds	r2, #174	@ 0xae
 800d154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d158:	699b      	ldr	r3, [r3, #24]
 800d15a:	7afa      	ldrb	r2, [r7, #11]
 800d15c:	4611      	mov	r1, r2
 800d15e:	68f8      	ldr	r0, [r7, #12]
 800d160:	4798      	blx	r3
 800d162:	4603      	mov	r3, r0
 800d164:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d166:	7dfb      	ldrb	r3, [r7, #23]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d001      	beq.n	800d170 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d16c:	7dfb      	ldrb	r3, [r7, #23]
 800d16e:	e000      	b.n	800d172 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d170:	2300      	movs	r3, #0
}
 800d172:	4618      	mov	r0, r3
 800d174:	3718      	adds	r7, #24
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}

0800d17a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d17a:	b580      	push	{r7, lr}
 800d17c:	b086      	sub	sp, #24
 800d17e:	af00      	add	r7, sp, #0
 800d180:	60f8      	str	r0, [r7, #12]
 800d182:	460b      	mov	r3, r1
 800d184:	607a      	str	r2, [r7, #4]
 800d186:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d188:	7afb      	ldrb	r3, [r7, #11]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d16f      	bne.n	800d26e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	3314      	adds	r3, #20
 800d192:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d19a:	2b02      	cmp	r3, #2
 800d19c:	d15a      	bne.n	800d254 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	689a      	ldr	r2, [r3, #8]
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	68db      	ldr	r3, [r3, #12]
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	d914      	bls.n	800d1d4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	689a      	ldr	r2, [r3, #8]
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	68db      	ldr	r3, [r3, #12]
 800d1b2:	1ad2      	subs	r2, r2, r3
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	689b      	ldr	r3, [r3, #8]
 800d1bc:	461a      	mov	r2, r3
 800d1be:	6879      	ldr	r1, [r7, #4]
 800d1c0:	68f8      	ldr	r0, [r7, #12]
 800d1c2:	f001 f8e6 	bl	800e392 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	2100      	movs	r1, #0
 800d1cc:	68f8      	ldr	r0, [r7, #12]
 800d1ce:	f001 fe77 	bl	800eec0 <USBD_LL_PrepareReceive>
 800d1d2:	e03f      	b.n	800d254 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	68da      	ldr	r2, [r3, #12]
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	689b      	ldr	r3, [r3, #8]
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d11c      	bne.n	800d21a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	685a      	ldr	r2, [r3, #4]
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	d316      	bcc.n	800d21a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	685a      	ldr	r2, [r3, #4]
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d1f6:	429a      	cmp	r2, r3
 800d1f8:	d20f      	bcs.n	800d21a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	2100      	movs	r1, #0
 800d1fe:	68f8      	ldr	r0, [r7, #12]
 800d200:	f001 f8c7 	bl	800e392 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	2200      	movs	r2, #0
 800d208:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d20c:	2300      	movs	r3, #0
 800d20e:	2200      	movs	r2, #0
 800d210:	2100      	movs	r1, #0
 800d212:	68f8      	ldr	r0, [r7, #12]
 800d214:	f001 fe54 	bl	800eec0 <USBD_LL_PrepareReceive>
 800d218:	e01c      	b.n	800d254 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d220:	b2db      	uxtb	r3, r3
 800d222:	2b03      	cmp	r3, #3
 800d224:	d10f      	bne.n	800d246 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d22c:	68db      	ldr	r3, [r3, #12]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d009      	beq.n	800d246 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	2200      	movs	r2, #0
 800d236:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d240:	68db      	ldr	r3, [r3, #12]
 800d242:	68f8      	ldr	r0, [r7, #12]
 800d244:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d246:	2180      	movs	r1, #128	@ 0x80
 800d248:	68f8      	ldr	r0, [r7, #12]
 800d24a:	f001 fd8f 	bl	800ed6c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d24e:	68f8      	ldr	r0, [r7, #12]
 800d250:	f001 f8f1 	bl	800e436 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d03a      	beq.n	800d2d4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d25e:	68f8      	ldr	r0, [r7, #12]
 800d260:	f7ff fe42 	bl	800cee8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	2200      	movs	r2, #0
 800d268:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d26c:	e032      	b.n	800d2d4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d26e:	7afb      	ldrb	r3, [r7, #11]
 800d270:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d274:	b2db      	uxtb	r3, r3
 800d276:	4619      	mov	r1, r3
 800d278:	68f8      	ldr	r0, [r7, #12]
 800d27a:	f000 f985 	bl	800d588 <USBD_CoreFindEP>
 800d27e:	4603      	mov	r3, r0
 800d280:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d282:	7dfb      	ldrb	r3, [r7, #23]
 800d284:	2bff      	cmp	r3, #255	@ 0xff
 800d286:	d025      	beq.n	800d2d4 <USBD_LL_DataInStage+0x15a>
 800d288:	7dfb      	ldrb	r3, [r7, #23]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d122      	bne.n	800d2d4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d294:	b2db      	uxtb	r3, r3
 800d296:	2b03      	cmp	r3, #3
 800d298:	d11c      	bne.n	800d2d4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d29a:	7dfa      	ldrb	r2, [r7, #23]
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	32ae      	adds	r2, #174	@ 0xae
 800d2a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2a4:	695b      	ldr	r3, [r3, #20]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d014      	beq.n	800d2d4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d2aa:	7dfa      	ldrb	r2, [r7, #23]
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d2b2:	7dfa      	ldrb	r2, [r7, #23]
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	32ae      	adds	r2, #174	@ 0xae
 800d2b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2bc:	695b      	ldr	r3, [r3, #20]
 800d2be:	7afa      	ldrb	r2, [r7, #11]
 800d2c0:	4611      	mov	r1, r2
 800d2c2:	68f8      	ldr	r0, [r7, #12]
 800d2c4:	4798      	blx	r3
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d2ca:	7dbb      	ldrb	r3, [r7, #22]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d001      	beq.n	800d2d4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d2d0:	7dbb      	ldrb	r3, [r7, #22]
 800d2d2:	e000      	b.n	800d2d6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d2d4:	2300      	movs	r3, #0
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3718      	adds	r7, #24
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}

0800d2de <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d2de:	b580      	push	{r7, lr}
 800d2e0:	b084      	sub	sp, #16
 800d2e2:	af00      	add	r7, sp, #0
 800d2e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2201      	movs	r2, #1
 800d2ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2200      	movs	r2, #0
 800d304:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2200      	movs	r2, #0
 800d30c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d316:	2b00      	cmp	r3, #0
 800d318:	d014      	beq.n	800d344 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d320:	685b      	ldr	r3, [r3, #4]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d00e      	beq.n	800d344 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d32c:	685b      	ldr	r3, [r3, #4]
 800d32e:	687a      	ldr	r2, [r7, #4]
 800d330:	6852      	ldr	r2, [r2, #4]
 800d332:	b2d2      	uxtb	r2, r2
 800d334:	4611      	mov	r1, r2
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	4798      	blx	r3
 800d33a:	4603      	mov	r3, r0
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d001      	beq.n	800d344 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d340:	2303      	movs	r3, #3
 800d342:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d344:	2340      	movs	r3, #64	@ 0x40
 800d346:	2200      	movs	r2, #0
 800d348:	2100      	movs	r1, #0
 800d34a:	6878      	ldr	r0, [r7, #4]
 800d34c:	f001 fcc9 	bl	800ece2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2201      	movs	r2, #1
 800d354:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2240      	movs	r2, #64	@ 0x40
 800d35c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d360:	2340      	movs	r3, #64	@ 0x40
 800d362:	2200      	movs	r2, #0
 800d364:	2180      	movs	r1, #128	@ 0x80
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f001 fcbb 	bl	800ece2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2201      	movs	r2, #1
 800d370:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2240      	movs	r2, #64	@ 0x40
 800d376:	621a      	str	r2, [r3, #32]

  return ret;
 800d378:	7bfb      	ldrb	r3, [r7, #15]
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	3710      	adds	r7, #16
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}

0800d382 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d382:	b480      	push	{r7}
 800d384:	b083      	sub	sp, #12
 800d386:	af00      	add	r7, sp, #0
 800d388:	6078      	str	r0, [r7, #4]
 800d38a:	460b      	mov	r3, r1
 800d38c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	78fa      	ldrb	r2, [r7, #3]
 800d392:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d394:	2300      	movs	r3, #0
}
 800d396:	4618      	mov	r0, r3
 800d398:	370c      	adds	r7, #12
 800d39a:	46bd      	mov	sp, r7
 800d39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a0:	4770      	bx	lr

0800d3a2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d3a2:	b480      	push	{r7}
 800d3a4:	b083      	sub	sp, #12
 800d3a6:	af00      	add	r7, sp, #0
 800d3a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d3b0:	b2db      	uxtb	r3, r3
 800d3b2:	2b04      	cmp	r3, #4
 800d3b4:	d006      	beq.n	800d3c4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d3bc:	b2da      	uxtb	r2, r3
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2204      	movs	r2, #4
 800d3c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800d3cc:	2300      	movs	r3, #0
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	370c      	adds	r7, #12
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d8:	4770      	bx	lr

0800d3da <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d3da:	b480      	push	{r7}
 800d3dc:	b083      	sub	sp, #12
 800d3de:	af00      	add	r7, sp, #0
 800d3e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d3e8:	b2db      	uxtb	r3, r3
 800d3ea:	2b04      	cmp	r3, #4
 800d3ec:	d106      	bne.n	800d3fc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800d3f4:	b2da      	uxtb	r2, r3
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800d3fc:	2300      	movs	r3, #0
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	370c      	adds	r7, #12
 800d402:	46bd      	mov	sp, r7
 800d404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d408:	4770      	bx	lr

0800d40a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d40a:	b580      	push	{r7, lr}
 800d40c:	b082      	sub	sp, #8
 800d40e:	af00      	add	r7, sp, #0
 800d410:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d418:	b2db      	uxtb	r3, r3
 800d41a:	2b03      	cmp	r3, #3
 800d41c:	d110      	bne.n	800d440 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d424:	2b00      	cmp	r3, #0
 800d426:	d00b      	beq.n	800d440 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d42e:	69db      	ldr	r3, [r3, #28]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d005      	beq.n	800d440 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d43a:	69db      	ldr	r3, [r3, #28]
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d440:	2300      	movs	r3, #0
}
 800d442:	4618      	mov	r0, r3
 800d444:	3708      	adds	r7, #8
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}

0800d44a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d44a:	b580      	push	{r7, lr}
 800d44c:	b082      	sub	sp, #8
 800d44e:	af00      	add	r7, sp, #0
 800d450:	6078      	str	r0, [r7, #4]
 800d452:	460b      	mov	r3, r1
 800d454:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	32ae      	adds	r2, #174	@ 0xae
 800d460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d101      	bne.n	800d46c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d468:	2303      	movs	r3, #3
 800d46a:	e01c      	b.n	800d4a6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d472:	b2db      	uxtb	r3, r3
 800d474:	2b03      	cmp	r3, #3
 800d476:	d115      	bne.n	800d4a4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	32ae      	adds	r2, #174	@ 0xae
 800d482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d486:	6a1b      	ldr	r3, [r3, #32]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d00b      	beq.n	800d4a4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	32ae      	adds	r2, #174	@ 0xae
 800d496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d49a:	6a1b      	ldr	r3, [r3, #32]
 800d49c:	78fa      	ldrb	r2, [r7, #3]
 800d49e:	4611      	mov	r1, r2
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d4a4:	2300      	movs	r3, #0
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3708      	adds	r7, #8
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}

0800d4ae <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d4ae:	b580      	push	{r7, lr}
 800d4b0:	b082      	sub	sp, #8
 800d4b2:	af00      	add	r7, sp, #0
 800d4b4:	6078      	str	r0, [r7, #4]
 800d4b6:	460b      	mov	r3, r1
 800d4b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	32ae      	adds	r2, #174	@ 0xae
 800d4c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d101      	bne.n	800d4d0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d4cc:	2303      	movs	r3, #3
 800d4ce:	e01c      	b.n	800d50a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d4d6:	b2db      	uxtb	r3, r3
 800d4d8:	2b03      	cmp	r3, #3
 800d4da:	d115      	bne.n	800d508 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	32ae      	adds	r2, #174	@ 0xae
 800d4e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d00b      	beq.n	800d508 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	32ae      	adds	r2, #174	@ 0xae
 800d4fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d500:	78fa      	ldrb	r2, [r7, #3]
 800d502:	4611      	mov	r1, r2
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d508:	2300      	movs	r3, #0
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3708      	adds	r7, #8
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}

0800d512 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d512:	b480      	push	{r7}
 800d514:	b083      	sub	sp, #12
 800d516:	af00      	add	r7, sp, #0
 800d518:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d51a:	2300      	movs	r3, #0
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	370c      	adds	r7, #12
 800d520:	46bd      	mov	sp, r7
 800d522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d526:	4770      	bx	lr

0800d528 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b084      	sub	sp, #16
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d530:	2300      	movs	r3, #0
 800d532:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2201      	movs	r2, #1
 800d538:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d542:	2b00      	cmp	r3, #0
 800d544:	d00e      	beq.n	800d564 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d54c:	685b      	ldr	r3, [r3, #4]
 800d54e:	687a      	ldr	r2, [r7, #4]
 800d550:	6852      	ldr	r2, [r2, #4]
 800d552:	b2d2      	uxtb	r2, r2
 800d554:	4611      	mov	r1, r2
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	4798      	blx	r3
 800d55a:	4603      	mov	r3, r0
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d001      	beq.n	800d564 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d560:	2303      	movs	r3, #3
 800d562:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d564:	7bfb      	ldrb	r3, [r7, #15]
}
 800d566:	4618      	mov	r0, r3
 800d568:	3710      	adds	r7, #16
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}

0800d56e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d56e:	b480      	push	{r7}
 800d570:	b083      	sub	sp, #12
 800d572:	af00      	add	r7, sp, #0
 800d574:	6078      	str	r0, [r7, #4]
 800d576:	460b      	mov	r3, r1
 800d578:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d57a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	370c      	adds	r7, #12
 800d580:	46bd      	mov	sp, r7
 800d582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d586:	4770      	bx	lr

0800d588 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d588:	b480      	push	{r7}
 800d58a:	b083      	sub	sp, #12
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	460b      	mov	r3, r1
 800d592:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d594:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d596:	4618      	mov	r0, r3
 800d598:	370c      	adds	r7, #12
 800d59a:	46bd      	mov	sp, r7
 800d59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a0:	4770      	bx	lr

0800d5a2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d5a2:	b580      	push	{r7, lr}
 800d5a4:	b086      	sub	sp, #24
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	6078      	str	r0, [r7, #4]
 800d5aa:	460b      	mov	r3, r1
 800d5ac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	885b      	ldrh	r3, [r3, #2]
 800d5be:	b29b      	uxth	r3, r3
 800d5c0:	68fa      	ldr	r2, [r7, #12]
 800d5c2:	7812      	ldrb	r2, [r2, #0]
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	d91f      	bls.n	800d608 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	781b      	ldrb	r3, [r3, #0]
 800d5cc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d5ce:	e013      	b.n	800d5f8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d5d0:	f107 030a 	add.w	r3, r7, #10
 800d5d4:	4619      	mov	r1, r3
 800d5d6:	6978      	ldr	r0, [r7, #20]
 800d5d8:	f000 f81b 	bl	800d612 <USBD_GetNextDesc>
 800d5dc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d5de:	697b      	ldr	r3, [r7, #20]
 800d5e0:	785b      	ldrb	r3, [r3, #1]
 800d5e2:	2b05      	cmp	r3, #5
 800d5e4:	d108      	bne.n	800d5f8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d5ea:	693b      	ldr	r3, [r7, #16]
 800d5ec:	789b      	ldrb	r3, [r3, #2]
 800d5ee:	78fa      	ldrb	r2, [r7, #3]
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	d008      	beq.n	800d606 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	885b      	ldrh	r3, [r3, #2]
 800d5fc:	b29a      	uxth	r2, r3
 800d5fe:	897b      	ldrh	r3, [r7, #10]
 800d600:	429a      	cmp	r2, r3
 800d602:	d8e5      	bhi.n	800d5d0 <USBD_GetEpDesc+0x2e>
 800d604:	e000      	b.n	800d608 <USBD_GetEpDesc+0x66>
          break;
 800d606:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d608:	693b      	ldr	r3, [r7, #16]
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	3718      	adds	r7, #24
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}

0800d612 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d612:	b480      	push	{r7}
 800d614:	b085      	sub	sp, #20
 800d616:	af00      	add	r7, sp, #0
 800d618:	6078      	str	r0, [r7, #4]
 800d61a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	881b      	ldrh	r3, [r3, #0]
 800d624:	68fa      	ldr	r2, [r7, #12]
 800d626:	7812      	ldrb	r2, [r2, #0]
 800d628:	4413      	add	r3, r2
 800d62a:	b29a      	uxth	r2, r3
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	781b      	ldrb	r3, [r3, #0]
 800d634:	461a      	mov	r2, r3
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	4413      	add	r3, r2
 800d63a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d63c:	68fb      	ldr	r3, [r7, #12]
}
 800d63e:	4618      	mov	r0, r3
 800d640:	3714      	adds	r7, #20
 800d642:	46bd      	mov	sp, r7
 800d644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d648:	4770      	bx	lr

0800d64a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d64a:	b480      	push	{r7}
 800d64c:	b087      	sub	sp, #28
 800d64e:	af00      	add	r7, sp, #0
 800d650:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	781b      	ldrb	r3, [r3, #0]
 800d65a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	3301      	adds	r3, #1
 800d660:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	781b      	ldrb	r3, [r3, #0]
 800d666:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d668:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d66c:	021b      	lsls	r3, r3, #8
 800d66e:	b21a      	sxth	r2, r3
 800d670:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d674:	4313      	orrs	r3, r2
 800d676:	b21b      	sxth	r3, r3
 800d678:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d67a:	89fb      	ldrh	r3, [r7, #14]
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	371c      	adds	r7, #28
 800d680:	46bd      	mov	sp, r7
 800d682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d686:	4770      	bx	lr

0800d688 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b084      	sub	sp, #16
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d692:	2300      	movs	r3, #0
 800d694:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d69e:	2b40      	cmp	r3, #64	@ 0x40
 800d6a0:	d005      	beq.n	800d6ae <USBD_StdDevReq+0x26>
 800d6a2:	2b40      	cmp	r3, #64	@ 0x40
 800d6a4:	d857      	bhi.n	800d756 <USBD_StdDevReq+0xce>
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d00f      	beq.n	800d6ca <USBD_StdDevReq+0x42>
 800d6aa:	2b20      	cmp	r3, #32
 800d6ac:	d153      	bne.n	800d756 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	32ae      	adds	r2, #174	@ 0xae
 800d6b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6bc:	689b      	ldr	r3, [r3, #8]
 800d6be:	6839      	ldr	r1, [r7, #0]
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	4798      	blx	r3
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	73fb      	strb	r3, [r7, #15]
      break;
 800d6c8:	e04a      	b.n	800d760 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	785b      	ldrb	r3, [r3, #1]
 800d6ce:	2b09      	cmp	r3, #9
 800d6d0:	d83b      	bhi.n	800d74a <USBD_StdDevReq+0xc2>
 800d6d2:	a201      	add	r2, pc, #4	@ (adr r2, 800d6d8 <USBD_StdDevReq+0x50>)
 800d6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6d8:	0800d72d 	.word	0x0800d72d
 800d6dc:	0800d741 	.word	0x0800d741
 800d6e0:	0800d74b 	.word	0x0800d74b
 800d6e4:	0800d737 	.word	0x0800d737
 800d6e8:	0800d74b 	.word	0x0800d74b
 800d6ec:	0800d70b 	.word	0x0800d70b
 800d6f0:	0800d701 	.word	0x0800d701
 800d6f4:	0800d74b 	.word	0x0800d74b
 800d6f8:	0800d723 	.word	0x0800d723
 800d6fc:	0800d715 	.word	0x0800d715
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d700:	6839      	ldr	r1, [r7, #0]
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f000 fa3c 	bl	800db80 <USBD_GetDescriptor>
          break;
 800d708:	e024      	b.n	800d754 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d70a:	6839      	ldr	r1, [r7, #0]
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f000 fbcb 	bl	800dea8 <USBD_SetAddress>
          break;
 800d712:	e01f      	b.n	800d754 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d714:	6839      	ldr	r1, [r7, #0]
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f000 fc0a 	bl	800df30 <USBD_SetConfig>
 800d71c:	4603      	mov	r3, r0
 800d71e:	73fb      	strb	r3, [r7, #15]
          break;
 800d720:	e018      	b.n	800d754 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d722:	6839      	ldr	r1, [r7, #0]
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f000 fcad 	bl	800e084 <USBD_GetConfig>
          break;
 800d72a:	e013      	b.n	800d754 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d72c:	6839      	ldr	r1, [r7, #0]
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f000 fcde 	bl	800e0f0 <USBD_GetStatus>
          break;
 800d734:	e00e      	b.n	800d754 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d736:	6839      	ldr	r1, [r7, #0]
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f000 fd0d 	bl	800e158 <USBD_SetFeature>
          break;
 800d73e:	e009      	b.n	800d754 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d740:	6839      	ldr	r1, [r7, #0]
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f000 fd31 	bl	800e1aa <USBD_ClrFeature>
          break;
 800d748:	e004      	b.n	800d754 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d74a:	6839      	ldr	r1, [r7, #0]
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f000 fd88 	bl	800e262 <USBD_CtlError>
          break;
 800d752:	bf00      	nop
      }
      break;
 800d754:	e004      	b.n	800d760 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d756:	6839      	ldr	r1, [r7, #0]
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f000 fd82 	bl	800e262 <USBD_CtlError>
      break;
 800d75e:	bf00      	nop
  }

  return ret;
 800d760:	7bfb      	ldrb	r3, [r7, #15]
}
 800d762:	4618      	mov	r0, r3
 800d764:	3710      	adds	r7, #16
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}
 800d76a:	bf00      	nop

0800d76c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b084      	sub	sp, #16
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
 800d774:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d776:	2300      	movs	r3, #0
 800d778:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	781b      	ldrb	r3, [r3, #0]
 800d77e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d782:	2b40      	cmp	r3, #64	@ 0x40
 800d784:	d005      	beq.n	800d792 <USBD_StdItfReq+0x26>
 800d786:	2b40      	cmp	r3, #64	@ 0x40
 800d788:	d852      	bhi.n	800d830 <USBD_StdItfReq+0xc4>
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d001      	beq.n	800d792 <USBD_StdItfReq+0x26>
 800d78e:	2b20      	cmp	r3, #32
 800d790:	d14e      	bne.n	800d830 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d798:	b2db      	uxtb	r3, r3
 800d79a:	3b01      	subs	r3, #1
 800d79c:	2b02      	cmp	r3, #2
 800d79e:	d840      	bhi.n	800d822 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	889b      	ldrh	r3, [r3, #4]
 800d7a4:	b2db      	uxtb	r3, r3
 800d7a6:	2b01      	cmp	r3, #1
 800d7a8:	d836      	bhi.n	800d818 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	889b      	ldrh	r3, [r3, #4]
 800d7ae:	b2db      	uxtb	r3, r3
 800d7b0:	4619      	mov	r1, r3
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f7ff fedb 	bl	800d56e <USBD_CoreFindIF>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d7bc:	7bbb      	ldrb	r3, [r7, #14]
 800d7be:	2bff      	cmp	r3, #255	@ 0xff
 800d7c0:	d01d      	beq.n	800d7fe <USBD_StdItfReq+0x92>
 800d7c2:	7bbb      	ldrb	r3, [r7, #14]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d11a      	bne.n	800d7fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d7c8:	7bba      	ldrb	r2, [r7, #14]
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	32ae      	adds	r2, #174	@ 0xae
 800d7ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7d2:	689b      	ldr	r3, [r3, #8]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d00f      	beq.n	800d7f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d7d8:	7bba      	ldrb	r2, [r7, #14]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d7e0:	7bba      	ldrb	r2, [r7, #14]
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	32ae      	adds	r2, #174	@ 0xae
 800d7e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7ea:	689b      	ldr	r3, [r3, #8]
 800d7ec:	6839      	ldr	r1, [r7, #0]
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	4798      	blx	r3
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d7f6:	e004      	b.n	800d802 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d7f8:	2303      	movs	r3, #3
 800d7fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d7fc:	e001      	b.n	800d802 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d7fe:	2303      	movs	r3, #3
 800d800:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	88db      	ldrh	r3, [r3, #6]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d110      	bne.n	800d82c <USBD_StdItfReq+0xc0>
 800d80a:	7bfb      	ldrb	r3, [r7, #15]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d10d      	bne.n	800d82c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f000 fdfd 	bl	800e410 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d816:	e009      	b.n	800d82c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d818:	6839      	ldr	r1, [r7, #0]
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f000 fd21 	bl	800e262 <USBD_CtlError>
          break;
 800d820:	e004      	b.n	800d82c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d822:	6839      	ldr	r1, [r7, #0]
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f000 fd1c 	bl	800e262 <USBD_CtlError>
          break;
 800d82a:	e000      	b.n	800d82e <USBD_StdItfReq+0xc2>
          break;
 800d82c:	bf00      	nop
      }
      break;
 800d82e:	e004      	b.n	800d83a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d830:	6839      	ldr	r1, [r7, #0]
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	f000 fd15 	bl	800e262 <USBD_CtlError>
      break;
 800d838:	bf00      	nop
  }

  return ret;
 800d83a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3710      	adds	r7, #16
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}

0800d844 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b084      	sub	sp, #16
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d84e:	2300      	movs	r3, #0
 800d850:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	889b      	ldrh	r3, [r3, #4]
 800d856:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	781b      	ldrb	r3, [r3, #0]
 800d85c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d860:	2b40      	cmp	r3, #64	@ 0x40
 800d862:	d007      	beq.n	800d874 <USBD_StdEPReq+0x30>
 800d864:	2b40      	cmp	r3, #64	@ 0x40
 800d866:	f200 817f 	bhi.w	800db68 <USBD_StdEPReq+0x324>
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d02a      	beq.n	800d8c4 <USBD_StdEPReq+0x80>
 800d86e:	2b20      	cmp	r3, #32
 800d870:	f040 817a 	bne.w	800db68 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d874:	7bbb      	ldrb	r3, [r7, #14]
 800d876:	4619      	mov	r1, r3
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	f7ff fe85 	bl	800d588 <USBD_CoreFindEP>
 800d87e:	4603      	mov	r3, r0
 800d880:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d882:	7b7b      	ldrb	r3, [r7, #13]
 800d884:	2bff      	cmp	r3, #255	@ 0xff
 800d886:	f000 8174 	beq.w	800db72 <USBD_StdEPReq+0x32e>
 800d88a:	7b7b      	ldrb	r3, [r7, #13]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	f040 8170 	bne.w	800db72 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d892:	7b7a      	ldrb	r2, [r7, #13]
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d89a:	7b7a      	ldrb	r2, [r7, #13]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	32ae      	adds	r2, #174	@ 0xae
 800d8a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8a4:	689b      	ldr	r3, [r3, #8]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	f000 8163 	beq.w	800db72 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d8ac:	7b7a      	ldrb	r2, [r7, #13]
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	32ae      	adds	r2, #174	@ 0xae
 800d8b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8b6:	689b      	ldr	r3, [r3, #8]
 800d8b8:	6839      	ldr	r1, [r7, #0]
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	4798      	blx	r3
 800d8be:	4603      	mov	r3, r0
 800d8c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d8c2:	e156      	b.n	800db72 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	785b      	ldrb	r3, [r3, #1]
 800d8c8:	2b03      	cmp	r3, #3
 800d8ca:	d008      	beq.n	800d8de <USBD_StdEPReq+0x9a>
 800d8cc:	2b03      	cmp	r3, #3
 800d8ce:	f300 8145 	bgt.w	800db5c <USBD_StdEPReq+0x318>
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	f000 809b 	beq.w	800da0e <USBD_StdEPReq+0x1ca>
 800d8d8:	2b01      	cmp	r3, #1
 800d8da:	d03c      	beq.n	800d956 <USBD_StdEPReq+0x112>
 800d8dc:	e13e      	b.n	800db5c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8e4:	b2db      	uxtb	r3, r3
 800d8e6:	2b02      	cmp	r3, #2
 800d8e8:	d002      	beq.n	800d8f0 <USBD_StdEPReq+0xac>
 800d8ea:	2b03      	cmp	r3, #3
 800d8ec:	d016      	beq.n	800d91c <USBD_StdEPReq+0xd8>
 800d8ee:	e02c      	b.n	800d94a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d8f0:	7bbb      	ldrb	r3, [r7, #14]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d00d      	beq.n	800d912 <USBD_StdEPReq+0xce>
 800d8f6:	7bbb      	ldrb	r3, [r7, #14]
 800d8f8:	2b80      	cmp	r3, #128	@ 0x80
 800d8fa:	d00a      	beq.n	800d912 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d8fc:	7bbb      	ldrb	r3, [r7, #14]
 800d8fe:	4619      	mov	r1, r3
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f001 fa33 	bl	800ed6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d906:	2180      	movs	r1, #128	@ 0x80
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f001 fa2f 	bl	800ed6c <USBD_LL_StallEP>
 800d90e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d910:	e020      	b.n	800d954 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d912:	6839      	ldr	r1, [r7, #0]
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f000 fca4 	bl	800e262 <USBD_CtlError>
              break;
 800d91a:	e01b      	b.n	800d954 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	885b      	ldrh	r3, [r3, #2]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d10e      	bne.n	800d942 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d924:	7bbb      	ldrb	r3, [r7, #14]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d00b      	beq.n	800d942 <USBD_StdEPReq+0xfe>
 800d92a:	7bbb      	ldrb	r3, [r7, #14]
 800d92c:	2b80      	cmp	r3, #128	@ 0x80
 800d92e:	d008      	beq.n	800d942 <USBD_StdEPReq+0xfe>
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	88db      	ldrh	r3, [r3, #6]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d104      	bne.n	800d942 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d938:	7bbb      	ldrb	r3, [r7, #14]
 800d93a:	4619      	mov	r1, r3
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f001 fa15 	bl	800ed6c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f000 fd64 	bl	800e410 <USBD_CtlSendStatus>

              break;
 800d948:	e004      	b.n	800d954 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d94a:	6839      	ldr	r1, [r7, #0]
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f000 fc88 	bl	800e262 <USBD_CtlError>
              break;
 800d952:	bf00      	nop
          }
          break;
 800d954:	e107      	b.n	800db66 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d95c:	b2db      	uxtb	r3, r3
 800d95e:	2b02      	cmp	r3, #2
 800d960:	d002      	beq.n	800d968 <USBD_StdEPReq+0x124>
 800d962:	2b03      	cmp	r3, #3
 800d964:	d016      	beq.n	800d994 <USBD_StdEPReq+0x150>
 800d966:	e04b      	b.n	800da00 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d968:	7bbb      	ldrb	r3, [r7, #14]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d00d      	beq.n	800d98a <USBD_StdEPReq+0x146>
 800d96e:	7bbb      	ldrb	r3, [r7, #14]
 800d970:	2b80      	cmp	r3, #128	@ 0x80
 800d972:	d00a      	beq.n	800d98a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d974:	7bbb      	ldrb	r3, [r7, #14]
 800d976:	4619      	mov	r1, r3
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f001 f9f7 	bl	800ed6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d97e:	2180      	movs	r1, #128	@ 0x80
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f001 f9f3 	bl	800ed6c <USBD_LL_StallEP>
 800d986:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d988:	e040      	b.n	800da0c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d98a:	6839      	ldr	r1, [r7, #0]
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f000 fc68 	bl	800e262 <USBD_CtlError>
              break;
 800d992:	e03b      	b.n	800da0c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	885b      	ldrh	r3, [r3, #2]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d136      	bne.n	800da0a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d99c:	7bbb      	ldrb	r3, [r7, #14]
 800d99e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d004      	beq.n	800d9b0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d9a6:	7bbb      	ldrb	r3, [r7, #14]
 800d9a8:	4619      	mov	r1, r3
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f001 f9fd 	bl	800edaa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f000 fd2d 	bl	800e410 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d9b6:	7bbb      	ldrb	r3, [r7, #14]
 800d9b8:	4619      	mov	r1, r3
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f7ff fde4 	bl	800d588 <USBD_CoreFindEP>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d9c4:	7b7b      	ldrb	r3, [r7, #13]
 800d9c6:	2bff      	cmp	r3, #255	@ 0xff
 800d9c8:	d01f      	beq.n	800da0a <USBD_StdEPReq+0x1c6>
 800d9ca:	7b7b      	ldrb	r3, [r7, #13]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d11c      	bne.n	800da0a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d9d0:	7b7a      	ldrb	r2, [r7, #13]
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d9d8:	7b7a      	ldrb	r2, [r7, #13]
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	32ae      	adds	r2, #174	@ 0xae
 800d9de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9e2:	689b      	ldr	r3, [r3, #8]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d010      	beq.n	800da0a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d9e8:	7b7a      	ldrb	r2, [r7, #13]
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	32ae      	adds	r2, #174	@ 0xae
 800d9ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9f2:	689b      	ldr	r3, [r3, #8]
 800d9f4:	6839      	ldr	r1, [r7, #0]
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	4798      	blx	r3
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d9fe:	e004      	b.n	800da0a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800da00:	6839      	ldr	r1, [r7, #0]
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f000 fc2d 	bl	800e262 <USBD_CtlError>
              break;
 800da08:	e000      	b.n	800da0c <USBD_StdEPReq+0x1c8>
              break;
 800da0a:	bf00      	nop
          }
          break;
 800da0c:	e0ab      	b.n	800db66 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da14:	b2db      	uxtb	r3, r3
 800da16:	2b02      	cmp	r3, #2
 800da18:	d002      	beq.n	800da20 <USBD_StdEPReq+0x1dc>
 800da1a:	2b03      	cmp	r3, #3
 800da1c:	d032      	beq.n	800da84 <USBD_StdEPReq+0x240>
 800da1e:	e097      	b.n	800db50 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800da20:	7bbb      	ldrb	r3, [r7, #14]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d007      	beq.n	800da36 <USBD_StdEPReq+0x1f2>
 800da26:	7bbb      	ldrb	r3, [r7, #14]
 800da28:	2b80      	cmp	r3, #128	@ 0x80
 800da2a:	d004      	beq.n	800da36 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800da2c:	6839      	ldr	r1, [r7, #0]
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f000 fc17 	bl	800e262 <USBD_CtlError>
                break;
 800da34:	e091      	b.n	800db5a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800da36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	da0b      	bge.n	800da56 <USBD_StdEPReq+0x212>
 800da3e:	7bbb      	ldrb	r3, [r7, #14]
 800da40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800da44:	4613      	mov	r3, r2
 800da46:	009b      	lsls	r3, r3, #2
 800da48:	4413      	add	r3, r2
 800da4a:	009b      	lsls	r3, r3, #2
 800da4c:	3310      	adds	r3, #16
 800da4e:	687a      	ldr	r2, [r7, #4]
 800da50:	4413      	add	r3, r2
 800da52:	3304      	adds	r3, #4
 800da54:	e00b      	b.n	800da6e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800da56:	7bbb      	ldrb	r3, [r7, #14]
 800da58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800da5c:	4613      	mov	r3, r2
 800da5e:	009b      	lsls	r3, r3, #2
 800da60:	4413      	add	r3, r2
 800da62:	009b      	lsls	r3, r3, #2
 800da64:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800da68:	687a      	ldr	r2, [r7, #4]
 800da6a:	4413      	add	r3, r2
 800da6c:	3304      	adds	r3, #4
 800da6e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	2200      	movs	r2, #0
 800da74:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	2202      	movs	r2, #2
 800da7a:	4619      	mov	r1, r3
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f000 fc6d 	bl	800e35c <USBD_CtlSendData>
              break;
 800da82:	e06a      	b.n	800db5a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800da84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	da11      	bge.n	800dab0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800da8c:	7bbb      	ldrb	r3, [r7, #14]
 800da8e:	f003 020f 	and.w	r2, r3, #15
 800da92:	6879      	ldr	r1, [r7, #4]
 800da94:	4613      	mov	r3, r2
 800da96:	009b      	lsls	r3, r3, #2
 800da98:	4413      	add	r3, r2
 800da9a:	009b      	lsls	r3, r3, #2
 800da9c:	440b      	add	r3, r1
 800da9e:	3324      	adds	r3, #36	@ 0x24
 800daa0:	881b      	ldrh	r3, [r3, #0]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d117      	bne.n	800dad6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800daa6:	6839      	ldr	r1, [r7, #0]
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f000 fbda 	bl	800e262 <USBD_CtlError>
                  break;
 800daae:	e054      	b.n	800db5a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800dab0:	7bbb      	ldrb	r3, [r7, #14]
 800dab2:	f003 020f 	and.w	r2, r3, #15
 800dab6:	6879      	ldr	r1, [r7, #4]
 800dab8:	4613      	mov	r3, r2
 800daba:	009b      	lsls	r3, r3, #2
 800dabc:	4413      	add	r3, r2
 800dabe:	009b      	lsls	r3, r3, #2
 800dac0:	440b      	add	r3, r1
 800dac2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dac6:	881b      	ldrh	r3, [r3, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d104      	bne.n	800dad6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800dacc:	6839      	ldr	r1, [r7, #0]
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f000 fbc7 	bl	800e262 <USBD_CtlError>
                  break;
 800dad4:	e041      	b.n	800db5a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dad6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	da0b      	bge.n	800daf6 <USBD_StdEPReq+0x2b2>
 800dade:	7bbb      	ldrb	r3, [r7, #14]
 800dae0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dae4:	4613      	mov	r3, r2
 800dae6:	009b      	lsls	r3, r3, #2
 800dae8:	4413      	add	r3, r2
 800daea:	009b      	lsls	r3, r3, #2
 800daec:	3310      	adds	r3, #16
 800daee:	687a      	ldr	r2, [r7, #4]
 800daf0:	4413      	add	r3, r2
 800daf2:	3304      	adds	r3, #4
 800daf4:	e00b      	b.n	800db0e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800daf6:	7bbb      	ldrb	r3, [r7, #14]
 800daf8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dafc:	4613      	mov	r3, r2
 800dafe:	009b      	lsls	r3, r3, #2
 800db00:	4413      	add	r3, r2
 800db02:	009b      	lsls	r3, r3, #2
 800db04:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800db08:	687a      	ldr	r2, [r7, #4]
 800db0a:	4413      	add	r3, r2
 800db0c:	3304      	adds	r3, #4
 800db0e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800db10:	7bbb      	ldrb	r3, [r7, #14]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d002      	beq.n	800db1c <USBD_StdEPReq+0x2d8>
 800db16:	7bbb      	ldrb	r3, [r7, #14]
 800db18:	2b80      	cmp	r3, #128	@ 0x80
 800db1a:	d103      	bne.n	800db24 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	2200      	movs	r2, #0
 800db20:	601a      	str	r2, [r3, #0]
 800db22:	e00e      	b.n	800db42 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800db24:	7bbb      	ldrb	r3, [r7, #14]
 800db26:	4619      	mov	r1, r3
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f001 f95d 	bl	800ede8 <USBD_LL_IsStallEP>
 800db2e:	4603      	mov	r3, r0
 800db30:	2b00      	cmp	r3, #0
 800db32:	d003      	beq.n	800db3c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	2201      	movs	r2, #1
 800db38:	601a      	str	r2, [r3, #0]
 800db3a:	e002      	b.n	800db42 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	2200      	movs	r2, #0
 800db40:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	2202      	movs	r2, #2
 800db46:	4619      	mov	r1, r3
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f000 fc07 	bl	800e35c <USBD_CtlSendData>
              break;
 800db4e:	e004      	b.n	800db5a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800db50:	6839      	ldr	r1, [r7, #0]
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f000 fb85 	bl	800e262 <USBD_CtlError>
              break;
 800db58:	bf00      	nop
          }
          break;
 800db5a:	e004      	b.n	800db66 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800db5c:	6839      	ldr	r1, [r7, #0]
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f000 fb7f 	bl	800e262 <USBD_CtlError>
          break;
 800db64:	bf00      	nop
      }
      break;
 800db66:	e005      	b.n	800db74 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800db68:	6839      	ldr	r1, [r7, #0]
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f000 fb79 	bl	800e262 <USBD_CtlError>
      break;
 800db70:	e000      	b.n	800db74 <USBD_StdEPReq+0x330>
      break;
 800db72:	bf00      	nop
  }

  return ret;
 800db74:	7bfb      	ldrb	r3, [r7, #15]
}
 800db76:	4618      	mov	r0, r3
 800db78:	3710      	adds	r7, #16
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
	...

0800db80 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b084      	sub	sp, #16
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
 800db88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800db8a:	2300      	movs	r3, #0
 800db8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800db8e:	2300      	movs	r3, #0
 800db90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800db92:	2300      	movs	r3, #0
 800db94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	885b      	ldrh	r3, [r3, #2]
 800db9a:	0a1b      	lsrs	r3, r3, #8
 800db9c:	b29b      	uxth	r3, r3
 800db9e:	3b01      	subs	r3, #1
 800dba0:	2b0e      	cmp	r3, #14
 800dba2:	f200 8152 	bhi.w	800de4a <USBD_GetDescriptor+0x2ca>
 800dba6:	a201      	add	r2, pc, #4	@ (adr r2, 800dbac <USBD_GetDescriptor+0x2c>)
 800dba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbac:	0800dc1d 	.word	0x0800dc1d
 800dbb0:	0800dc35 	.word	0x0800dc35
 800dbb4:	0800dc75 	.word	0x0800dc75
 800dbb8:	0800de4b 	.word	0x0800de4b
 800dbbc:	0800de4b 	.word	0x0800de4b
 800dbc0:	0800ddeb 	.word	0x0800ddeb
 800dbc4:	0800de17 	.word	0x0800de17
 800dbc8:	0800de4b 	.word	0x0800de4b
 800dbcc:	0800de4b 	.word	0x0800de4b
 800dbd0:	0800de4b 	.word	0x0800de4b
 800dbd4:	0800de4b 	.word	0x0800de4b
 800dbd8:	0800de4b 	.word	0x0800de4b
 800dbdc:	0800de4b 	.word	0x0800de4b
 800dbe0:	0800de4b 	.word	0x0800de4b
 800dbe4:	0800dbe9 	.word	0x0800dbe9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dbee:	69db      	ldr	r3, [r3, #28]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d00b      	beq.n	800dc0c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dbfa:	69db      	ldr	r3, [r3, #28]
 800dbfc:	687a      	ldr	r2, [r7, #4]
 800dbfe:	7c12      	ldrb	r2, [r2, #16]
 800dc00:	f107 0108 	add.w	r1, r7, #8
 800dc04:	4610      	mov	r0, r2
 800dc06:	4798      	blx	r3
 800dc08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dc0a:	e126      	b.n	800de5a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dc0c:	6839      	ldr	r1, [r7, #0]
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f000 fb27 	bl	800e262 <USBD_CtlError>
        err++;
 800dc14:	7afb      	ldrb	r3, [r7, #11]
 800dc16:	3301      	adds	r3, #1
 800dc18:	72fb      	strb	r3, [r7, #11]
      break;
 800dc1a:	e11e      	b.n	800de5a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	687a      	ldr	r2, [r7, #4]
 800dc26:	7c12      	ldrb	r2, [r2, #16]
 800dc28:	f107 0108 	add.w	r1, r7, #8
 800dc2c:	4610      	mov	r0, r2
 800dc2e:	4798      	blx	r3
 800dc30:	60f8      	str	r0, [r7, #12]
      break;
 800dc32:	e112      	b.n	800de5a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	7c1b      	ldrb	r3, [r3, #16]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d10d      	bne.n	800dc58 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc44:	f107 0208 	add.w	r2, r7, #8
 800dc48:	4610      	mov	r0, r2
 800dc4a:	4798      	blx	r3
 800dc4c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	3301      	adds	r3, #1
 800dc52:	2202      	movs	r2, #2
 800dc54:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dc56:	e100      	b.n	800de5a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc60:	f107 0208 	add.w	r2, r7, #8
 800dc64:	4610      	mov	r0, r2
 800dc66:	4798      	blx	r3
 800dc68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	3301      	adds	r3, #1
 800dc6e:	2202      	movs	r2, #2
 800dc70:	701a      	strb	r2, [r3, #0]
      break;
 800dc72:	e0f2      	b.n	800de5a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	885b      	ldrh	r3, [r3, #2]
 800dc78:	b2db      	uxtb	r3, r3
 800dc7a:	2b05      	cmp	r3, #5
 800dc7c:	f200 80ac 	bhi.w	800ddd8 <USBD_GetDescriptor+0x258>
 800dc80:	a201      	add	r2, pc, #4	@ (adr r2, 800dc88 <USBD_GetDescriptor+0x108>)
 800dc82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc86:	bf00      	nop
 800dc88:	0800dca1 	.word	0x0800dca1
 800dc8c:	0800dcd5 	.word	0x0800dcd5
 800dc90:	0800dd09 	.word	0x0800dd09
 800dc94:	0800dd3d 	.word	0x0800dd3d
 800dc98:	0800dd71 	.word	0x0800dd71
 800dc9c:	0800dda5 	.word	0x0800dda5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dca6:	685b      	ldr	r3, [r3, #4]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d00b      	beq.n	800dcc4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dcb2:	685b      	ldr	r3, [r3, #4]
 800dcb4:	687a      	ldr	r2, [r7, #4]
 800dcb6:	7c12      	ldrb	r2, [r2, #16]
 800dcb8:	f107 0108 	add.w	r1, r7, #8
 800dcbc:	4610      	mov	r0, r2
 800dcbe:	4798      	blx	r3
 800dcc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dcc2:	e091      	b.n	800dde8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dcc4:	6839      	ldr	r1, [r7, #0]
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	f000 facb 	bl	800e262 <USBD_CtlError>
            err++;
 800dccc:	7afb      	ldrb	r3, [r7, #11]
 800dcce:	3301      	adds	r3, #1
 800dcd0:	72fb      	strb	r3, [r7, #11]
          break;
 800dcd2:	e089      	b.n	800dde8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dcda:	689b      	ldr	r3, [r3, #8]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d00b      	beq.n	800dcf8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dce6:	689b      	ldr	r3, [r3, #8]
 800dce8:	687a      	ldr	r2, [r7, #4]
 800dcea:	7c12      	ldrb	r2, [r2, #16]
 800dcec:	f107 0108 	add.w	r1, r7, #8
 800dcf0:	4610      	mov	r0, r2
 800dcf2:	4798      	blx	r3
 800dcf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dcf6:	e077      	b.n	800dde8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dcf8:	6839      	ldr	r1, [r7, #0]
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f000 fab1 	bl	800e262 <USBD_CtlError>
            err++;
 800dd00:	7afb      	ldrb	r3, [r7, #11]
 800dd02:	3301      	adds	r3, #1
 800dd04:	72fb      	strb	r3, [r7, #11]
          break;
 800dd06:	e06f      	b.n	800dde8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dd0e:	68db      	ldr	r3, [r3, #12]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d00b      	beq.n	800dd2c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dd1a:	68db      	ldr	r3, [r3, #12]
 800dd1c:	687a      	ldr	r2, [r7, #4]
 800dd1e:	7c12      	ldrb	r2, [r2, #16]
 800dd20:	f107 0108 	add.w	r1, r7, #8
 800dd24:	4610      	mov	r0, r2
 800dd26:	4798      	blx	r3
 800dd28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd2a:	e05d      	b.n	800dde8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dd2c:	6839      	ldr	r1, [r7, #0]
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f000 fa97 	bl	800e262 <USBD_CtlError>
            err++;
 800dd34:	7afb      	ldrb	r3, [r7, #11]
 800dd36:	3301      	adds	r3, #1
 800dd38:	72fb      	strb	r3, [r7, #11]
          break;
 800dd3a:	e055      	b.n	800dde8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dd42:	691b      	ldr	r3, [r3, #16]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d00b      	beq.n	800dd60 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dd4e:	691b      	ldr	r3, [r3, #16]
 800dd50:	687a      	ldr	r2, [r7, #4]
 800dd52:	7c12      	ldrb	r2, [r2, #16]
 800dd54:	f107 0108 	add.w	r1, r7, #8
 800dd58:	4610      	mov	r0, r2
 800dd5a:	4798      	blx	r3
 800dd5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd5e:	e043      	b.n	800dde8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dd60:	6839      	ldr	r1, [r7, #0]
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f000 fa7d 	bl	800e262 <USBD_CtlError>
            err++;
 800dd68:	7afb      	ldrb	r3, [r7, #11]
 800dd6a:	3301      	adds	r3, #1
 800dd6c:	72fb      	strb	r3, [r7, #11]
          break;
 800dd6e:	e03b      	b.n	800dde8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dd76:	695b      	ldr	r3, [r3, #20]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d00b      	beq.n	800dd94 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dd82:	695b      	ldr	r3, [r3, #20]
 800dd84:	687a      	ldr	r2, [r7, #4]
 800dd86:	7c12      	ldrb	r2, [r2, #16]
 800dd88:	f107 0108 	add.w	r1, r7, #8
 800dd8c:	4610      	mov	r0, r2
 800dd8e:	4798      	blx	r3
 800dd90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd92:	e029      	b.n	800dde8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dd94:	6839      	ldr	r1, [r7, #0]
 800dd96:	6878      	ldr	r0, [r7, #4]
 800dd98:	f000 fa63 	bl	800e262 <USBD_CtlError>
            err++;
 800dd9c:	7afb      	ldrb	r3, [r7, #11]
 800dd9e:	3301      	adds	r3, #1
 800dda0:	72fb      	strb	r3, [r7, #11]
          break;
 800dda2:	e021      	b.n	800dde8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ddaa:	699b      	ldr	r3, [r3, #24]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d00b      	beq.n	800ddc8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ddb6:	699b      	ldr	r3, [r3, #24]
 800ddb8:	687a      	ldr	r2, [r7, #4]
 800ddba:	7c12      	ldrb	r2, [r2, #16]
 800ddbc:	f107 0108 	add.w	r1, r7, #8
 800ddc0:	4610      	mov	r0, r2
 800ddc2:	4798      	blx	r3
 800ddc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ddc6:	e00f      	b.n	800dde8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ddc8:	6839      	ldr	r1, [r7, #0]
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f000 fa49 	bl	800e262 <USBD_CtlError>
            err++;
 800ddd0:	7afb      	ldrb	r3, [r7, #11]
 800ddd2:	3301      	adds	r3, #1
 800ddd4:	72fb      	strb	r3, [r7, #11]
          break;
 800ddd6:	e007      	b.n	800dde8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ddd8:	6839      	ldr	r1, [r7, #0]
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f000 fa41 	bl	800e262 <USBD_CtlError>
          err++;
 800dde0:	7afb      	ldrb	r3, [r7, #11]
 800dde2:	3301      	adds	r3, #1
 800dde4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800dde6:	bf00      	nop
      }
      break;
 800dde8:	e037      	b.n	800de5a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	7c1b      	ldrb	r3, [r3, #16]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d109      	bne.n	800de06 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ddf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ddfa:	f107 0208 	add.w	r2, r7, #8
 800ddfe:	4610      	mov	r0, r2
 800de00:	4798      	blx	r3
 800de02:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800de04:	e029      	b.n	800de5a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800de06:	6839      	ldr	r1, [r7, #0]
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f000 fa2a 	bl	800e262 <USBD_CtlError>
        err++;
 800de0e:	7afb      	ldrb	r3, [r7, #11]
 800de10:	3301      	adds	r3, #1
 800de12:	72fb      	strb	r3, [r7, #11]
      break;
 800de14:	e021      	b.n	800de5a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	7c1b      	ldrb	r3, [r3, #16]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d10d      	bne.n	800de3a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de26:	f107 0208 	add.w	r2, r7, #8
 800de2a:	4610      	mov	r0, r2
 800de2c:	4798      	blx	r3
 800de2e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	3301      	adds	r3, #1
 800de34:	2207      	movs	r2, #7
 800de36:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800de38:	e00f      	b.n	800de5a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800de3a:	6839      	ldr	r1, [r7, #0]
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f000 fa10 	bl	800e262 <USBD_CtlError>
        err++;
 800de42:	7afb      	ldrb	r3, [r7, #11]
 800de44:	3301      	adds	r3, #1
 800de46:	72fb      	strb	r3, [r7, #11]
      break;
 800de48:	e007      	b.n	800de5a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800de4a:	6839      	ldr	r1, [r7, #0]
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f000 fa08 	bl	800e262 <USBD_CtlError>
      err++;
 800de52:	7afb      	ldrb	r3, [r7, #11]
 800de54:	3301      	adds	r3, #1
 800de56:	72fb      	strb	r3, [r7, #11]
      break;
 800de58:	bf00      	nop
  }

  if (err != 0U)
 800de5a:	7afb      	ldrb	r3, [r7, #11]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d11e      	bne.n	800de9e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	88db      	ldrh	r3, [r3, #6]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d016      	beq.n	800de96 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800de68:	893b      	ldrh	r3, [r7, #8]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d00e      	beq.n	800de8c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	88da      	ldrh	r2, [r3, #6]
 800de72:	893b      	ldrh	r3, [r7, #8]
 800de74:	4293      	cmp	r3, r2
 800de76:	bf28      	it	cs
 800de78:	4613      	movcs	r3, r2
 800de7a:	b29b      	uxth	r3, r3
 800de7c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800de7e:	893b      	ldrh	r3, [r7, #8]
 800de80:	461a      	mov	r2, r3
 800de82:	68f9      	ldr	r1, [r7, #12]
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f000 fa69 	bl	800e35c <USBD_CtlSendData>
 800de8a:	e009      	b.n	800dea0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800de8c:	6839      	ldr	r1, [r7, #0]
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f000 f9e7 	bl	800e262 <USBD_CtlError>
 800de94:	e004      	b.n	800dea0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f000 faba 	bl	800e410 <USBD_CtlSendStatus>
 800de9c:	e000      	b.n	800dea0 <USBD_GetDescriptor+0x320>
    return;
 800de9e:	bf00      	nop
  }
}
 800dea0:	3710      	adds	r7, #16
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	bf00      	nop

0800dea8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b084      	sub	sp, #16
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
 800deb0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	889b      	ldrh	r3, [r3, #4]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d131      	bne.n	800df1e <USBD_SetAddress+0x76>
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	88db      	ldrh	r3, [r3, #6]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d12d      	bne.n	800df1e <USBD_SetAddress+0x76>
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	885b      	ldrh	r3, [r3, #2]
 800dec6:	2b7f      	cmp	r3, #127	@ 0x7f
 800dec8:	d829      	bhi.n	800df1e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	885b      	ldrh	r3, [r3, #2]
 800dece:	b2db      	uxtb	r3, r3
 800ded0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ded4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dedc:	b2db      	uxtb	r3, r3
 800dede:	2b03      	cmp	r3, #3
 800dee0:	d104      	bne.n	800deec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800dee2:	6839      	ldr	r1, [r7, #0]
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f000 f9bc 	bl	800e262 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800deea:	e01d      	b.n	800df28 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	7bfa      	ldrb	r2, [r7, #15]
 800def0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800def4:	7bfb      	ldrb	r3, [r7, #15]
 800def6:	4619      	mov	r1, r3
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f000 ffa1 	bl	800ee40 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800defe:	6878      	ldr	r0, [r7, #4]
 800df00:	f000 fa86 	bl	800e410 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800df04:	7bfb      	ldrb	r3, [r7, #15]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d004      	beq.n	800df14 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2202      	movs	r2, #2
 800df0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df12:	e009      	b.n	800df28 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2201      	movs	r2, #1
 800df18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df1c:	e004      	b.n	800df28 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800df1e:	6839      	ldr	r1, [r7, #0]
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f000 f99e 	bl	800e262 <USBD_CtlError>
  }
}
 800df26:	bf00      	nop
 800df28:	bf00      	nop
 800df2a:	3710      	adds	r7, #16
 800df2c:	46bd      	mov	sp, r7
 800df2e:	bd80      	pop	{r7, pc}

0800df30 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b084      	sub	sp, #16
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
 800df38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800df3a:	2300      	movs	r3, #0
 800df3c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	885b      	ldrh	r3, [r3, #2]
 800df42:	b2da      	uxtb	r2, r3
 800df44:	4b4e      	ldr	r3, [pc, #312]	@ (800e080 <USBD_SetConfig+0x150>)
 800df46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800df48:	4b4d      	ldr	r3, [pc, #308]	@ (800e080 <USBD_SetConfig+0x150>)
 800df4a:	781b      	ldrb	r3, [r3, #0]
 800df4c:	2b01      	cmp	r3, #1
 800df4e:	d905      	bls.n	800df5c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800df50:	6839      	ldr	r1, [r7, #0]
 800df52:	6878      	ldr	r0, [r7, #4]
 800df54:	f000 f985 	bl	800e262 <USBD_CtlError>
    return USBD_FAIL;
 800df58:	2303      	movs	r3, #3
 800df5a:	e08c      	b.n	800e076 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800df62:	b2db      	uxtb	r3, r3
 800df64:	2b02      	cmp	r3, #2
 800df66:	d002      	beq.n	800df6e <USBD_SetConfig+0x3e>
 800df68:	2b03      	cmp	r3, #3
 800df6a:	d029      	beq.n	800dfc0 <USBD_SetConfig+0x90>
 800df6c:	e075      	b.n	800e05a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800df6e:	4b44      	ldr	r3, [pc, #272]	@ (800e080 <USBD_SetConfig+0x150>)
 800df70:	781b      	ldrb	r3, [r3, #0]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d020      	beq.n	800dfb8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800df76:	4b42      	ldr	r3, [pc, #264]	@ (800e080 <USBD_SetConfig+0x150>)
 800df78:	781b      	ldrb	r3, [r3, #0]
 800df7a:	461a      	mov	r2, r3
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800df80:	4b3f      	ldr	r3, [pc, #252]	@ (800e080 <USBD_SetConfig+0x150>)
 800df82:	781b      	ldrb	r3, [r3, #0]
 800df84:	4619      	mov	r1, r3
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	f7fe ffb9 	bl	800cefe <USBD_SetClassConfig>
 800df8c:	4603      	mov	r3, r0
 800df8e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800df90:	7bfb      	ldrb	r3, [r7, #15]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d008      	beq.n	800dfa8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800df96:	6839      	ldr	r1, [r7, #0]
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f000 f962 	bl	800e262 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2202      	movs	r2, #2
 800dfa2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dfa6:	e065      	b.n	800e074 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	f000 fa31 	bl	800e410 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2203      	movs	r2, #3
 800dfb2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800dfb6:	e05d      	b.n	800e074 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	f000 fa29 	bl	800e410 <USBD_CtlSendStatus>
      break;
 800dfbe:	e059      	b.n	800e074 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800dfc0:	4b2f      	ldr	r3, [pc, #188]	@ (800e080 <USBD_SetConfig+0x150>)
 800dfc2:	781b      	ldrb	r3, [r3, #0]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d112      	bne.n	800dfee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2202      	movs	r2, #2
 800dfcc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800dfd0:	4b2b      	ldr	r3, [pc, #172]	@ (800e080 <USBD_SetConfig+0x150>)
 800dfd2:	781b      	ldrb	r3, [r3, #0]
 800dfd4:	461a      	mov	r2, r3
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dfda:	4b29      	ldr	r3, [pc, #164]	@ (800e080 <USBD_SetConfig+0x150>)
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	4619      	mov	r1, r3
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	f7fe ffa8 	bl	800cf36 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f000 fa12 	bl	800e410 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dfec:	e042      	b.n	800e074 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800dfee:	4b24      	ldr	r3, [pc, #144]	@ (800e080 <USBD_SetConfig+0x150>)
 800dff0:	781b      	ldrb	r3, [r3, #0]
 800dff2:	461a      	mov	r2, r3
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	685b      	ldr	r3, [r3, #4]
 800dff8:	429a      	cmp	r2, r3
 800dffa:	d02a      	beq.n	800e052 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	685b      	ldr	r3, [r3, #4]
 800e000:	b2db      	uxtb	r3, r3
 800e002:	4619      	mov	r1, r3
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f7fe ff96 	bl	800cf36 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e00a:	4b1d      	ldr	r3, [pc, #116]	@ (800e080 <USBD_SetConfig+0x150>)
 800e00c:	781b      	ldrb	r3, [r3, #0]
 800e00e:	461a      	mov	r2, r3
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e014:	4b1a      	ldr	r3, [pc, #104]	@ (800e080 <USBD_SetConfig+0x150>)
 800e016:	781b      	ldrb	r3, [r3, #0]
 800e018:	4619      	mov	r1, r3
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f7fe ff6f 	bl	800cefe <USBD_SetClassConfig>
 800e020:	4603      	mov	r3, r0
 800e022:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e024:	7bfb      	ldrb	r3, [r7, #15]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d00f      	beq.n	800e04a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e02a:	6839      	ldr	r1, [r7, #0]
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f000 f918 	bl	800e262 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	685b      	ldr	r3, [r3, #4]
 800e036:	b2db      	uxtb	r3, r3
 800e038:	4619      	mov	r1, r3
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f7fe ff7b 	bl	800cf36 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2202      	movs	r2, #2
 800e044:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e048:	e014      	b.n	800e074 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e04a:	6878      	ldr	r0, [r7, #4]
 800e04c:	f000 f9e0 	bl	800e410 <USBD_CtlSendStatus>
      break;
 800e050:	e010      	b.n	800e074 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f000 f9dc 	bl	800e410 <USBD_CtlSendStatus>
      break;
 800e058:	e00c      	b.n	800e074 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e05a:	6839      	ldr	r1, [r7, #0]
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	f000 f900 	bl	800e262 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e062:	4b07      	ldr	r3, [pc, #28]	@ (800e080 <USBD_SetConfig+0x150>)
 800e064:	781b      	ldrb	r3, [r3, #0]
 800e066:	4619      	mov	r1, r3
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	f7fe ff64 	bl	800cf36 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e06e:	2303      	movs	r3, #3
 800e070:	73fb      	strb	r3, [r7, #15]
      break;
 800e072:	bf00      	nop
  }

  return ret;
 800e074:	7bfb      	ldrb	r3, [r7, #15]
}
 800e076:	4618      	mov	r0, r3
 800e078:	3710      	adds	r7, #16
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
 800e07e:	bf00      	nop
 800e080:	20000b78 	.word	0x20000b78

0800e084 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b082      	sub	sp, #8
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	88db      	ldrh	r3, [r3, #6]
 800e092:	2b01      	cmp	r3, #1
 800e094:	d004      	beq.n	800e0a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e096:	6839      	ldr	r1, [r7, #0]
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f000 f8e2 	bl	800e262 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e09e:	e023      	b.n	800e0e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e0a6:	b2db      	uxtb	r3, r3
 800e0a8:	2b02      	cmp	r3, #2
 800e0aa:	dc02      	bgt.n	800e0b2 <USBD_GetConfig+0x2e>
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	dc03      	bgt.n	800e0b8 <USBD_GetConfig+0x34>
 800e0b0:	e015      	b.n	800e0de <USBD_GetConfig+0x5a>
 800e0b2:	2b03      	cmp	r3, #3
 800e0b4:	d00b      	beq.n	800e0ce <USBD_GetConfig+0x4a>
 800e0b6:	e012      	b.n	800e0de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	3308      	adds	r3, #8
 800e0c2:	2201      	movs	r2, #1
 800e0c4:	4619      	mov	r1, r3
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f000 f948 	bl	800e35c <USBD_CtlSendData>
        break;
 800e0cc:	e00c      	b.n	800e0e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	3304      	adds	r3, #4
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	4619      	mov	r1, r3
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f000 f940 	bl	800e35c <USBD_CtlSendData>
        break;
 800e0dc:	e004      	b.n	800e0e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e0de:	6839      	ldr	r1, [r7, #0]
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f000 f8be 	bl	800e262 <USBD_CtlError>
        break;
 800e0e6:	bf00      	nop
}
 800e0e8:	bf00      	nop
 800e0ea:	3708      	adds	r7, #8
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}

0800e0f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b082      	sub	sp, #8
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
 800e0f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e100:	b2db      	uxtb	r3, r3
 800e102:	3b01      	subs	r3, #1
 800e104:	2b02      	cmp	r3, #2
 800e106:	d81e      	bhi.n	800e146 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	88db      	ldrh	r3, [r3, #6]
 800e10c:	2b02      	cmp	r3, #2
 800e10e:	d004      	beq.n	800e11a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e110:	6839      	ldr	r1, [r7, #0]
 800e112:	6878      	ldr	r0, [r7, #4]
 800e114:	f000 f8a5 	bl	800e262 <USBD_CtlError>
        break;
 800e118:	e01a      	b.n	800e150 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2201      	movs	r2, #1
 800e11e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e126:	2b00      	cmp	r3, #0
 800e128:	d005      	beq.n	800e136 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	68db      	ldr	r3, [r3, #12]
 800e12e:	f043 0202 	orr.w	r2, r3, #2
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	330c      	adds	r3, #12
 800e13a:	2202      	movs	r2, #2
 800e13c:	4619      	mov	r1, r3
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f000 f90c 	bl	800e35c <USBD_CtlSendData>
      break;
 800e144:	e004      	b.n	800e150 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e146:	6839      	ldr	r1, [r7, #0]
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f000 f88a 	bl	800e262 <USBD_CtlError>
      break;
 800e14e:	bf00      	nop
  }
}
 800e150:	bf00      	nop
 800e152:	3708      	adds	r7, #8
 800e154:	46bd      	mov	sp, r7
 800e156:	bd80      	pop	{r7, pc}

0800e158 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b082      	sub	sp, #8
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
 800e160:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	885b      	ldrh	r3, [r3, #2]
 800e166:	2b01      	cmp	r3, #1
 800e168:	d107      	bne.n	800e17a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	2201      	movs	r2, #1
 800e16e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f000 f94c 	bl	800e410 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e178:	e013      	b.n	800e1a2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	885b      	ldrh	r3, [r3, #2]
 800e17e:	2b02      	cmp	r3, #2
 800e180:	d10b      	bne.n	800e19a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	889b      	ldrh	r3, [r3, #4]
 800e186:	0a1b      	lsrs	r3, r3, #8
 800e188:	b29b      	uxth	r3, r3
 800e18a:	b2da      	uxtb	r2, r3
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f000 f93c 	bl	800e410 <USBD_CtlSendStatus>
}
 800e198:	e003      	b.n	800e1a2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e19a:	6839      	ldr	r1, [r7, #0]
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f000 f860 	bl	800e262 <USBD_CtlError>
}
 800e1a2:	bf00      	nop
 800e1a4:	3708      	adds	r7, #8
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}

0800e1aa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1aa:	b580      	push	{r7, lr}
 800e1ac:	b082      	sub	sp, #8
 800e1ae:	af00      	add	r7, sp, #0
 800e1b0:	6078      	str	r0, [r7, #4]
 800e1b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e1ba:	b2db      	uxtb	r3, r3
 800e1bc:	3b01      	subs	r3, #1
 800e1be:	2b02      	cmp	r3, #2
 800e1c0:	d80b      	bhi.n	800e1da <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	885b      	ldrh	r3, [r3, #2]
 800e1c6:	2b01      	cmp	r3, #1
 800e1c8:	d10c      	bne.n	800e1e4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	f000 f91c 	bl	800e410 <USBD_CtlSendStatus>
      }
      break;
 800e1d8:	e004      	b.n	800e1e4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e1da:	6839      	ldr	r1, [r7, #0]
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f000 f840 	bl	800e262 <USBD_CtlError>
      break;
 800e1e2:	e000      	b.n	800e1e6 <USBD_ClrFeature+0x3c>
      break;
 800e1e4:	bf00      	nop
  }
}
 800e1e6:	bf00      	nop
 800e1e8:	3708      	adds	r7, #8
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}

0800e1ee <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e1ee:	b580      	push	{r7, lr}
 800e1f0:	b084      	sub	sp, #16
 800e1f2:	af00      	add	r7, sp, #0
 800e1f4:	6078      	str	r0, [r7, #4]
 800e1f6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	781a      	ldrb	r2, [r3, #0]
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	3301      	adds	r3, #1
 800e208:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	781a      	ldrb	r2, [r3, #0]
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	3301      	adds	r3, #1
 800e216:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e218:	68f8      	ldr	r0, [r7, #12]
 800e21a:	f7ff fa16 	bl	800d64a <SWAPBYTE>
 800e21e:	4603      	mov	r3, r0
 800e220:	461a      	mov	r2, r3
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	3301      	adds	r3, #1
 800e22a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	3301      	adds	r3, #1
 800e230:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e232:	68f8      	ldr	r0, [r7, #12]
 800e234:	f7ff fa09 	bl	800d64a <SWAPBYTE>
 800e238:	4603      	mov	r3, r0
 800e23a:	461a      	mov	r2, r3
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	3301      	adds	r3, #1
 800e244:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	3301      	adds	r3, #1
 800e24a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e24c:	68f8      	ldr	r0, [r7, #12]
 800e24e:	f7ff f9fc 	bl	800d64a <SWAPBYTE>
 800e252:	4603      	mov	r3, r0
 800e254:	461a      	mov	r2, r3
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	80da      	strh	r2, [r3, #6]
}
 800e25a:	bf00      	nop
 800e25c:	3710      	adds	r7, #16
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}

0800e262 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e262:	b580      	push	{r7, lr}
 800e264:	b082      	sub	sp, #8
 800e266:	af00      	add	r7, sp, #0
 800e268:	6078      	str	r0, [r7, #4]
 800e26a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e26c:	2180      	movs	r1, #128	@ 0x80
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f000 fd7c 	bl	800ed6c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e274:	2100      	movs	r1, #0
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f000 fd78 	bl	800ed6c <USBD_LL_StallEP>
}
 800e27c:	bf00      	nop
 800e27e:	3708      	adds	r7, #8
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}

0800e284 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b086      	sub	sp, #24
 800e288:	af00      	add	r7, sp, #0
 800e28a:	60f8      	str	r0, [r7, #12]
 800e28c:	60b9      	str	r1, [r7, #8]
 800e28e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e290:	2300      	movs	r3, #0
 800e292:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d042      	beq.n	800e320 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800e29e:	6938      	ldr	r0, [r7, #16]
 800e2a0:	f000 f842 	bl	800e328 <USBD_GetLen>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	3301      	adds	r3, #1
 800e2a8:	005b      	lsls	r3, r3, #1
 800e2aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e2ae:	d808      	bhi.n	800e2c2 <USBD_GetString+0x3e>
 800e2b0:	6938      	ldr	r0, [r7, #16]
 800e2b2:	f000 f839 	bl	800e328 <USBD_GetLen>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	3301      	adds	r3, #1
 800e2ba:	b29b      	uxth	r3, r3
 800e2bc:	005b      	lsls	r3, r3, #1
 800e2be:	b29a      	uxth	r2, r3
 800e2c0:	e001      	b.n	800e2c6 <USBD_GetString+0x42>
 800e2c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e2ca:	7dfb      	ldrb	r3, [r7, #23]
 800e2cc:	68ba      	ldr	r2, [r7, #8]
 800e2ce:	4413      	add	r3, r2
 800e2d0:	687a      	ldr	r2, [r7, #4]
 800e2d2:	7812      	ldrb	r2, [r2, #0]
 800e2d4:	701a      	strb	r2, [r3, #0]
  idx++;
 800e2d6:	7dfb      	ldrb	r3, [r7, #23]
 800e2d8:	3301      	adds	r3, #1
 800e2da:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e2dc:	7dfb      	ldrb	r3, [r7, #23]
 800e2de:	68ba      	ldr	r2, [r7, #8]
 800e2e0:	4413      	add	r3, r2
 800e2e2:	2203      	movs	r2, #3
 800e2e4:	701a      	strb	r2, [r3, #0]
  idx++;
 800e2e6:	7dfb      	ldrb	r3, [r7, #23]
 800e2e8:	3301      	adds	r3, #1
 800e2ea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e2ec:	e013      	b.n	800e316 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800e2ee:	7dfb      	ldrb	r3, [r7, #23]
 800e2f0:	68ba      	ldr	r2, [r7, #8]
 800e2f2:	4413      	add	r3, r2
 800e2f4:	693a      	ldr	r2, [r7, #16]
 800e2f6:	7812      	ldrb	r2, [r2, #0]
 800e2f8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e2fa:	693b      	ldr	r3, [r7, #16]
 800e2fc:	3301      	adds	r3, #1
 800e2fe:	613b      	str	r3, [r7, #16]
    idx++;
 800e300:	7dfb      	ldrb	r3, [r7, #23]
 800e302:	3301      	adds	r3, #1
 800e304:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e306:	7dfb      	ldrb	r3, [r7, #23]
 800e308:	68ba      	ldr	r2, [r7, #8]
 800e30a:	4413      	add	r3, r2
 800e30c:	2200      	movs	r2, #0
 800e30e:	701a      	strb	r2, [r3, #0]
    idx++;
 800e310:	7dfb      	ldrb	r3, [r7, #23]
 800e312:	3301      	adds	r3, #1
 800e314:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e316:	693b      	ldr	r3, [r7, #16]
 800e318:	781b      	ldrb	r3, [r3, #0]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d1e7      	bne.n	800e2ee <USBD_GetString+0x6a>
 800e31e:	e000      	b.n	800e322 <USBD_GetString+0x9e>
    return;
 800e320:	bf00      	nop
  }
}
 800e322:	3718      	adds	r7, #24
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}

0800e328 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e328:	b480      	push	{r7}
 800e32a:	b085      	sub	sp, #20
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e330:	2300      	movs	r3, #0
 800e332:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e338:	e005      	b.n	800e346 <USBD_GetLen+0x1e>
  {
    len++;
 800e33a:	7bfb      	ldrb	r3, [r7, #15]
 800e33c:	3301      	adds	r3, #1
 800e33e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	3301      	adds	r3, #1
 800e344:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	781b      	ldrb	r3, [r3, #0]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d1f5      	bne.n	800e33a <USBD_GetLen+0x12>
  }

  return len;
 800e34e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e350:	4618      	mov	r0, r3
 800e352:	3714      	adds	r7, #20
 800e354:	46bd      	mov	sp, r7
 800e356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35a:	4770      	bx	lr

0800e35c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b084      	sub	sp, #16
 800e360:	af00      	add	r7, sp, #0
 800e362:	60f8      	str	r0, [r7, #12]
 800e364:	60b9      	str	r1, [r7, #8]
 800e366:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	2202      	movs	r2, #2
 800e36c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	687a      	ldr	r2, [r7, #4]
 800e374:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	687a      	ldr	r2, [r7, #4]
 800e37a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	68ba      	ldr	r2, [r7, #8]
 800e380:	2100      	movs	r1, #0
 800e382:	68f8      	ldr	r0, [r7, #12]
 800e384:	f000 fd7b 	bl	800ee7e <USBD_LL_Transmit>

  return USBD_OK;
 800e388:	2300      	movs	r3, #0
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3710      	adds	r7, #16
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}

0800e392 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e392:	b580      	push	{r7, lr}
 800e394:	b084      	sub	sp, #16
 800e396:	af00      	add	r7, sp, #0
 800e398:	60f8      	str	r0, [r7, #12]
 800e39a:	60b9      	str	r1, [r7, #8]
 800e39c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	68ba      	ldr	r2, [r7, #8]
 800e3a2:	2100      	movs	r1, #0
 800e3a4:	68f8      	ldr	r0, [r7, #12]
 800e3a6:	f000 fd6a 	bl	800ee7e <USBD_LL_Transmit>

  return USBD_OK;
 800e3aa:	2300      	movs	r3, #0
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3710      	adds	r7, #16
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b084      	sub	sp, #16
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	60f8      	str	r0, [r7, #12]
 800e3bc:	60b9      	str	r1, [r7, #8]
 800e3be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	2203      	movs	r2, #3
 800e3c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	687a      	ldr	r2, [r7, #4]
 800e3cc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	687a      	ldr	r2, [r7, #4]
 800e3d4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	68ba      	ldr	r2, [r7, #8]
 800e3dc:	2100      	movs	r1, #0
 800e3de:	68f8      	ldr	r0, [r7, #12]
 800e3e0:	f000 fd6e 	bl	800eec0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e3e4:	2300      	movs	r3, #0
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3710      	adds	r7, #16
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}

0800e3ee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e3ee:	b580      	push	{r7, lr}
 800e3f0:	b084      	sub	sp, #16
 800e3f2:	af00      	add	r7, sp, #0
 800e3f4:	60f8      	str	r0, [r7, #12]
 800e3f6:	60b9      	str	r1, [r7, #8]
 800e3f8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	68ba      	ldr	r2, [r7, #8]
 800e3fe:	2100      	movs	r1, #0
 800e400:	68f8      	ldr	r0, [r7, #12]
 800e402:	f000 fd5d 	bl	800eec0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e406:	2300      	movs	r3, #0
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3710      	adds	r7, #16
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}

0800e410 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b082      	sub	sp, #8
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2204      	movs	r2, #4
 800e41c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e420:	2300      	movs	r3, #0
 800e422:	2200      	movs	r2, #0
 800e424:	2100      	movs	r1, #0
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f000 fd29 	bl	800ee7e <USBD_LL_Transmit>

  return USBD_OK;
 800e42c:	2300      	movs	r3, #0
}
 800e42e:	4618      	mov	r0, r3
 800e430:	3708      	adds	r7, #8
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}

0800e436 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e436:	b580      	push	{r7, lr}
 800e438:	b082      	sub	sp, #8
 800e43a:	af00      	add	r7, sp, #0
 800e43c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2205      	movs	r2, #5
 800e442:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e446:	2300      	movs	r3, #0
 800e448:	2200      	movs	r2, #0
 800e44a:	2100      	movs	r1, #0
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	f000 fd37 	bl	800eec0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e452:	2300      	movs	r3, #0
}
 800e454:	4618      	mov	r0, r3
 800e456:	3708      	adds	r7, #8
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}

0800e45c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e45c:	b480      	push	{r7}
 800e45e:	b087      	sub	sp, #28
 800e460:	af00      	add	r7, sp, #0
 800e462:	60f8      	str	r0, [r7, #12]
 800e464:	60b9      	str	r1, [r7, #8]
 800e466:	4613      	mov	r3, r2
 800e468:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e46a:	2301      	movs	r3, #1
 800e46c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e46e:	2300      	movs	r3, #0
 800e470:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e472:	4b1f      	ldr	r3, [pc, #124]	@ (800e4f0 <FATFS_LinkDriverEx+0x94>)
 800e474:	7a5b      	ldrb	r3, [r3, #9]
 800e476:	b2db      	uxtb	r3, r3
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d131      	bne.n	800e4e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e47c:	4b1c      	ldr	r3, [pc, #112]	@ (800e4f0 <FATFS_LinkDriverEx+0x94>)
 800e47e:	7a5b      	ldrb	r3, [r3, #9]
 800e480:	b2db      	uxtb	r3, r3
 800e482:	461a      	mov	r2, r3
 800e484:	4b1a      	ldr	r3, [pc, #104]	@ (800e4f0 <FATFS_LinkDriverEx+0x94>)
 800e486:	2100      	movs	r1, #0
 800e488:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e48a:	4b19      	ldr	r3, [pc, #100]	@ (800e4f0 <FATFS_LinkDriverEx+0x94>)
 800e48c:	7a5b      	ldrb	r3, [r3, #9]
 800e48e:	b2db      	uxtb	r3, r3
 800e490:	4a17      	ldr	r2, [pc, #92]	@ (800e4f0 <FATFS_LinkDriverEx+0x94>)
 800e492:	009b      	lsls	r3, r3, #2
 800e494:	4413      	add	r3, r2
 800e496:	68fa      	ldr	r2, [r7, #12]
 800e498:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e49a:	4b15      	ldr	r3, [pc, #84]	@ (800e4f0 <FATFS_LinkDriverEx+0x94>)
 800e49c:	7a5b      	ldrb	r3, [r3, #9]
 800e49e:	b2db      	uxtb	r3, r3
 800e4a0:	461a      	mov	r2, r3
 800e4a2:	4b13      	ldr	r3, [pc, #76]	@ (800e4f0 <FATFS_LinkDriverEx+0x94>)
 800e4a4:	4413      	add	r3, r2
 800e4a6:	79fa      	ldrb	r2, [r7, #7]
 800e4a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e4aa:	4b11      	ldr	r3, [pc, #68]	@ (800e4f0 <FATFS_LinkDriverEx+0x94>)
 800e4ac:	7a5b      	ldrb	r3, [r3, #9]
 800e4ae:	b2db      	uxtb	r3, r3
 800e4b0:	1c5a      	adds	r2, r3, #1
 800e4b2:	b2d1      	uxtb	r1, r2
 800e4b4:	4a0e      	ldr	r2, [pc, #56]	@ (800e4f0 <FATFS_LinkDriverEx+0x94>)
 800e4b6:	7251      	strb	r1, [r2, #9]
 800e4b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e4ba:	7dbb      	ldrb	r3, [r7, #22]
 800e4bc:	3330      	adds	r3, #48	@ 0x30
 800e4be:	b2da      	uxtb	r2, r3
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	3301      	adds	r3, #1
 800e4c8:	223a      	movs	r2, #58	@ 0x3a
 800e4ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	3302      	adds	r3, #2
 800e4d0:	222f      	movs	r2, #47	@ 0x2f
 800e4d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	3303      	adds	r3, #3
 800e4d8:	2200      	movs	r2, #0
 800e4da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e4e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	371c      	adds	r7, #28
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ec:	4770      	bx	lr
 800e4ee:	bf00      	nop
 800e4f0:	20000b7c 	.word	0x20000b7c

0800e4f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b082      	sub	sp, #8
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
 800e4fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e4fe:	2200      	movs	r2, #0
 800e500:	6839      	ldr	r1, [r7, #0]
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f7ff ffaa 	bl	800e45c <FATFS_LinkDriverEx>
 800e508:	4603      	mov	r3, r0
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	3708      	adds	r7, #8
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}
	...

0800e514 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e518:	2200      	movs	r2, #0
 800e51a:	4912      	ldr	r1, [pc, #72]	@ (800e564 <MX_USB_DEVICE_Init+0x50>)
 800e51c:	4812      	ldr	r0, [pc, #72]	@ (800e568 <MX_USB_DEVICE_Init+0x54>)
 800e51e:	f7fe fc71 	bl	800ce04 <USBD_Init>
 800e522:	4603      	mov	r3, r0
 800e524:	2b00      	cmp	r3, #0
 800e526:	d001      	beq.n	800e52c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e528:	f7f3 fc4a 	bl	8001dc0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e52c:	490f      	ldr	r1, [pc, #60]	@ (800e56c <MX_USB_DEVICE_Init+0x58>)
 800e52e:	480e      	ldr	r0, [pc, #56]	@ (800e568 <MX_USB_DEVICE_Init+0x54>)
 800e530:	f7fe fc98 	bl	800ce64 <USBD_RegisterClass>
 800e534:	4603      	mov	r3, r0
 800e536:	2b00      	cmp	r3, #0
 800e538:	d001      	beq.n	800e53e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e53a:	f7f3 fc41 	bl	8001dc0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e53e:	490c      	ldr	r1, [pc, #48]	@ (800e570 <MX_USB_DEVICE_Init+0x5c>)
 800e540:	4809      	ldr	r0, [pc, #36]	@ (800e568 <MX_USB_DEVICE_Init+0x54>)
 800e542:	f7fe fb8f 	bl	800cc64 <USBD_CDC_RegisterInterface>
 800e546:	4603      	mov	r3, r0
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d001      	beq.n	800e550 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e54c:	f7f3 fc38 	bl	8001dc0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e550:	4805      	ldr	r0, [pc, #20]	@ (800e568 <MX_USB_DEVICE_Init+0x54>)
 800e552:	f7fe fcbd 	bl	800ced0 <USBD_Start>
 800e556:	4603      	mov	r3, r0
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d001      	beq.n	800e560 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e55c:	f7f3 fc30 	bl	8001dc0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e560:	bf00      	nop
 800e562:	bd80      	pop	{r7, pc}
 800e564:	200000ac 	.word	0x200000ac
 800e568:	20000b88 	.word	0x20000b88
 800e56c:	20000018 	.word	0x20000018
 800e570:	20000098 	.word	0x20000098

0800e574 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e578:	2200      	movs	r2, #0
 800e57a:	4905      	ldr	r1, [pc, #20]	@ (800e590 <CDC_Init_FS+0x1c>)
 800e57c:	4805      	ldr	r0, [pc, #20]	@ (800e594 <CDC_Init_FS+0x20>)
 800e57e:	f7fe fb8b 	bl	800cc98 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e582:	4905      	ldr	r1, [pc, #20]	@ (800e598 <CDC_Init_FS+0x24>)
 800e584:	4803      	ldr	r0, [pc, #12]	@ (800e594 <CDC_Init_FS+0x20>)
 800e586:	f7fe fba9 	bl	800ccdc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e58a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e58c:	4618      	mov	r0, r3
 800e58e:	bd80      	pop	{r7, pc}
 800e590:	20001664 	.word	0x20001664
 800e594:	20000b88 	.word	0x20000b88
 800e598:	20000e64 	.word	0x20000e64

0800e59c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e59c:	b480      	push	{r7}
 800e59e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e5a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5aa:	4770      	bx	lr

0800e5ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e5ac:	b480      	push	{r7}
 800e5ae:	b083      	sub	sp, #12
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	6039      	str	r1, [r7, #0]
 800e5b6:	71fb      	strb	r3, [r7, #7]
 800e5b8:	4613      	mov	r3, r2
 800e5ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e5bc:	79fb      	ldrb	r3, [r7, #7]
 800e5be:	2b23      	cmp	r3, #35	@ 0x23
 800e5c0:	d84a      	bhi.n	800e658 <CDC_Control_FS+0xac>
 800e5c2:	a201      	add	r2, pc, #4	@ (adr r2, 800e5c8 <CDC_Control_FS+0x1c>)
 800e5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5c8:	0800e659 	.word	0x0800e659
 800e5cc:	0800e659 	.word	0x0800e659
 800e5d0:	0800e659 	.word	0x0800e659
 800e5d4:	0800e659 	.word	0x0800e659
 800e5d8:	0800e659 	.word	0x0800e659
 800e5dc:	0800e659 	.word	0x0800e659
 800e5e0:	0800e659 	.word	0x0800e659
 800e5e4:	0800e659 	.word	0x0800e659
 800e5e8:	0800e659 	.word	0x0800e659
 800e5ec:	0800e659 	.word	0x0800e659
 800e5f0:	0800e659 	.word	0x0800e659
 800e5f4:	0800e659 	.word	0x0800e659
 800e5f8:	0800e659 	.word	0x0800e659
 800e5fc:	0800e659 	.word	0x0800e659
 800e600:	0800e659 	.word	0x0800e659
 800e604:	0800e659 	.word	0x0800e659
 800e608:	0800e659 	.word	0x0800e659
 800e60c:	0800e659 	.word	0x0800e659
 800e610:	0800e659 	.word	0x0800e659
 800e614:	0800e659 	.word	0x0800e659
 800e618:	0800e659 	.word	0x0800e659
 800e61c:	0800e659 	.word	0x0800e659
 800e620:	0800e659 	.word	0x0800e659
 800e624:	0800e659 	.word	0x0800e659
 800e628:	0800e659 	.word	0x0800e659
 800e62c:	0800e659 	.word	0x0800e659
 800e630:	0800e659 	.word	0x0800e659
 800e634:	0800e659 	.word	0x0800e659
 800e638:	0800e659 	.word	0x0800e659
 800e63c:	0800e659 	.word	0x0800e659
 800e640:	0800e659 	.word	0x0800e659
 800e644:	0800e659 	.word	0x0800e659
 800e648:	0800e659 	.word	0x0800e659
 800e64c:	0800e659 	.word	0x0800e659
 800e650:	0800e659 	.word	0x0800e659
 800e654:	0800e659 	.word	0x0800e659
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e658:	bf00      	nop
  }

  return (USBD_OK);
 800e65a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e65c:	4618      	mov	r0, r3
 800e65e:	370c      	adds	r7, #12
 800e660:	46bd      	mov	sp, r7
 800e662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e666:	4770      	bx	lr

0800e668 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b082      	sub	sp, #8
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
 800e670:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e672:	6879      	ldr	r1, [r7, #4]
 800e674:	4805      	ldr	r0, [pc, #20]	@ (800e68c <CDC_Receive_FS+0x24>)
 800e676:	f7fe fb31 	bl	800ccdc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e67a:	4804      	ldr	r0, [pc, #16]	@ (800e68c <CDC_Receive_FS+0x24>)
 800e67c:	f7fe fb8c 	bl	800cd98 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e680:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e682:	4618      	mov	r0, r3
 800e684:	3708      	adds	r7, #8
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}
 800e68a:	bf00      	nop
 800e68c:	20000b88 	.word	0x20000b88

0800e690 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b084      	sub	sp, #16
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	460b      	mov	r3, r1
 800e69a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e69c:	2300      	movs	r3, #0
 800e69e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e6a0:	4b0d      	ldr	r3, [pc, #52]	@ (800e6d8 <CDC_Transmit_FS+0x48>)
 800e6a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e6a6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e6a8:	68bb      	ldr	r3, [r7, #8]
 800e6aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d001      	beq.n	800e6b6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	e00b      	b.n	800e6ce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e6b6:	887b      	ldrh	r3, [r7, #2]
 800e6b8:	461a      	mov	r2, r3
 800e6ba:	6879      	ldr	r1, [r7, #4]
 800e6bc:	4806      	ldr	r0, [pc, #24]	@ (800e6d8 <CDC_Transmit_FS+0x48>)
 800e6be:	f7fe faeb 	bl	800cc98 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e6c2:	4805      	ldr	r0, [pc, #20]	@ (800e6d8 <CDC_Transmit_FS+0x48>)
 800e6c4:	f7fe fb28 	bl	800cd18 <USBD_CDC_TransmitPacket>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3710      	adds	r7, #16
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}
 800e6d6:	bf00      	nop
 800e6d8:	20000b88 	.word	0x20000b88

0800e6dc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e6dc:	b480      	push	{r7}
 800e6de:	b087      	sub	sp, #28
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	60f8      	str	r0, [r7, #12]
 800e6e4:	60b9      	str	r1, [r7, #8]
 800e6e6:	4613      	mov	r3, r2
 800e6e8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e6ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	371c      	adds	r7, #28
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fc:	4770      	bx	lr
	...

0800e700 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e700:	b480      	push	{r7}
 800e702:	b083      	sub	sp, #12
 800e704:	af00      	add	r7, sp, #0
 800e706:	4603      	mov	r3, r0
 800e708:	6039      	str	r1, [r7, #0]
 800e70a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	2212      	movs	r2, #18
 800e710:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e712:	4b03      	ldr	r3, [pc, #12]	@ (800e720 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e714:	4618      	mov	r0, r3
 800e716:	370c      	adds	r7, #12
 800e718:	46bd      	mov	sp, r7
 800e71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71e:	4770      	bx	lr
 800e720:	200000cc 	.word	0x200000cc

0800e724 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
 800e72a:	4603      	mov	r3, r0
 800e72c:	6039      	str	r1, [r7, #0]
 800e72e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	2204      	movs	r2, #4
 800e734:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e736:	4b03      	ldr	r3, [pc, #12]	@ (800e744 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e738:	4618      	mov	r0, r3
 800e73a:	370c      	adds	r7, #12
 800e73c:	46bd      	mov	sp, r7
 800e73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e742:	4770      	bx	lr
 800e744:	200000ec 	.word	0x200000ec

0800e748 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b082      	sub	sp, #8
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	4603      	mov	r3, r0
 800e750:	6039      	str	r1, [r7, #0]
 800e752:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e754:	79fb      	ldrb	r3, [r7, #7]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d105      	bne.n	800e766 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e75a:	683a      	ldr	r2, [r7, #0]
 800e75c:	4907      	ldr	r1, [pc, #28]	@ (800e77c <USBD_FS_ProductStrDescriptor+0x34>)
 800e75e:	4808      	ldr	r0, [pc, #32]	@ (800e780 <USBD_FS_ProductStrDescriptor+0x38>)
 800e760:	f7ff fd90 	bl	800e284 <USBD_GetString>
 800e764:	e004      	b.n	800e770 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e766:	683a      	ldr	r2, [r7, #0]
 800e768:	4904      	ldr	r1, [pc, #16]	@ (800e77c <USBD_FS_ProductStrDescriptor+0x34>)
 800e76a:	4805      	ldr	r0, [pc, #20]	@ (800e780 <USBD_FS_ProductStrDescriptor+0x38>)
 800e76c:	f7ff fd8a 	bl	800e284 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e770:	4b02      	ldr	r3, [pc, #8]	@ (800e77c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e772:	4618      	mov	r0, r3
 800e774:	3708      	adds	r7, #8
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}
 800e77a:	bf00      	nop
 800e77c:	20001e64 	.word	0x20001e64
 800e780:	08011d64 	.word	0x08011d64

0800e784 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b082      	sub	sp, #8
 800e788:	af00      	add	r7, sp, #0
 800e78a:	4603      	mov	r3, r0
 800e78c:	6039      	str	r1, [r7, #0]
 800e78e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e790:	683a      	ldr	r2, [r7, #0]
 800e792:	4904      	ldr	r1, [pc, #16]	@ (800e7a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e794:	4804      	ldr	r0, [pc, #16]	@ (800e7a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e796:	f7ff fd75 	bl	800e284 <USBD_GetString>
  return USBD_StrDesc;
 800e79a:	4b02      	ldr	r3, [pc, #8]	@ (800e7a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e79c:	4618      	mov	r0, r3
 800e79e:	3708      	adds	r7, #8
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}
 800e7a4:	20001e64 	.word	0x20001e64
 800e7a8:	08011d7c 	.word	0x08011d7c

0800e7ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b082      	sub	sp, #8
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	6039      	str	r1, [r7, #0]
 800e7b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	221a      	movs	r2, #26
 800e7bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e7be:	f000 f855 	bl	800e86c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e7c2:	4b02      	ldr	r3, [pc, #8]	@ (800e7cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	3708      	adds	r7, #8
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}
 800e7cc:	200000f0 	.word	0x200000f0

0800e7d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b082      	sub	sp, #8
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	6039      	str	r1, [r7, #0]
 800e7da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e7dc:	79fb      	ldrb	r3, [r7, #7]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d105      	bne.n	800e7ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e7e2:	683a      	ldr	r2, [r7, #0]
 800e7e4:	4907      	ldr	r1, [pc, #28]	@ (800e804 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e7e6:	4808      	ldr	r0, [pc, #32]	@ (800e808 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e7e8:	f7ff fd4c 	bl	800e284 <USBD_GetString>
 800e7ec:	e004      	b.n	800e7f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e7ee:	683a      	ldr	r2, [r7, #0]
 800e7f0:	4904      	ldr	r1, [pc, #16]	@ (800e804 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e7f2:	4805      	ldr	r0, [pc, #20]	@ (800e808 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e7f4:	f7ff fd46 	bl	800e284 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e7f8:	4b02      	ldr	r3, [pc, #8]	@ (800e804 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	3708      	adds	r7, #8
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}
 800e802:	bf00      	nop
 800e804:	20001e64 	.word	0x20001e64
 800e808:	08011d90 	.word	0x08011d90

0800e80c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b082      	sub	sp, #8
 800e810:	af00      	add	r7, sp, #0
 800e812:	4603      	mov	r3, r0
 800e814:	6039      	str	r1, [r7, #0]
 800e816:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e818:	79fb      	ldrb	r3, [r7, #7]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d105      	bne.n	800e82a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e81e:	683a      	ldr	r2, [r7, #0]
 800e820:	4907      	ldr	r1, [pc, #28]	@ (800e840 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e822:	4808      	ldr	r0, [pc, #32]	@ (800e844 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e824:	f7ff fd2e 	bl	800e284 <USBD_GetString>
 800e828:	e004      	b.n	800e834 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e82a:	683a      	ldr	r2, [r7, #0]
 800e82c:	4904      	ldr	r1, [pc, #16]	@ (800e840 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e82e:	4805      	ldr	r0, [pc, #20]	@ (800e844 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e830:	f7ff fd28 	bl	800e284 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e834:	4b02      	ldr	r3, [pc, #8]	@ (800e840 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e836:	4618      	mov	r0, r3
 800e838:	3708      	adds	r7, #8
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd80      	pop	{r7, pc}
 800e83e:	bf00      	nop
 800e840:	20001e64 	.word	0x20001e64
 800e844:	08011d9c 	.word	0x08011d9c

0800e848 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e848:	b480      	push	{r7}
 800e84a:	b083      	sub	sp, #12
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	4603      	mov	r3, r0
 800e850:	6039      	str	r1, [r7, #0]
 800e852:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	220c      	movs	r2, #12
 800e858:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800e85a:	4b03      	ldr	r3, [pc, #12]	@ (800e868 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800e85c:	4618      	mov	r0, r3
 800e85e:	370c      	adds	r7, #12
 800e860:	46bd      	mov	sp, r7
 800e862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e866:	4770      	bx	lr
 800e868:	200000e0 	.word	0x200000e0

0800e86c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b084      	sub	sp, #16
 800e870:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e872:	4b0f      	ldr	r3, [pc, #60]	@ (800e8b0 <Get_SerialNum+0x44>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e878:	4b0e      	ldr	r3, [pc, #56]	@ (800e8b4 <Get_SerialNum+0x48>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e87e:	4b0e      	ldr	r3, [pc, #56]	@ (800e8b8 <Get_SerialNum+0x4c>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e884:	68fa      	ldr	r2, [r7, #12]
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	4413      	add	r3, r2
 800e88a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d009      	beq.n	800e8a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e892:	2208      	movs	r2, #8
 800e894:	4909      	ldr	r1, [pc, #36]	@ (800e8bc <Get_SerialNum+0x50>)
 800e896:	68f8      	ldr	r0, [r7, #12]
 800e898:	f000 f814 	bl	800e8c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e89c:	2204      	movs	r2, #4
 800e89e:	4908      	ldr	r1, [pc, #32]	@ (800e8c0 <Get_SerialNum+0x54>)
 800e8a0:	68b8      	ldr	r0, [r7, #8]
 800e8a2:	f000 f80f 	bl	800e8c4 <IntToUnicode>
  }
}
 800e8a6:	bf00      	nop
 800e8a8:	3710      	adds	r7, #16
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}
 800e8ae:	bf00      	nop
 800e8b0:	1ff07a10 	.word	0x1ff07a10
 800e8b4:	1ff07a14 	.word	0x1ff07a14
 800e8b8:	1ff07a18 	.word	0x1ff07a18
 800e8bc:	200000f2 	.word	0x200000f2
 800e8c0:	20000102 	.word	0x20000102

0800e8c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b087      	sub	sp, #28
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	60f8      	str	r0, [r7, #12]
 800e8cc:	60b9      	str	r1, [r7, #8]
 800e8ce:	4613      	mov	r3, r2
 800e8d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	75fb      	strb	r3, [r7, #23]
 800e8da:	e027      	b.n	800e92c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	0f1b      	lsrs	r3, r3, #28
 800e8e0:	2b09      	cmp	r3, #9
 800e8e2:	d80b      	bhi.n	800e8fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	0f1b      	lsrs	r3, r3, #28
 800e8e8:	b2da      	uxtb	r2, r3
 800e8ea:	7dfb      	ldrb	r3, [r7, #23]
 800e8ec:	005b      	lsls	r3, r3, #1
 800e8ee:	4619      	mov	r1, r3
 800e8f0:	68bb      	ldr	r3, [r7, #8]
 800e8f2:	440b      	add	r3, r1
 800e8f4:	3230      	adds	r2, #48	@ 0x30
 800e8f6:	b2d2      	uxtb	r2, r2
 800e8f8:	701a      	strb	r2, [r3, #0]
 800e8fa:	e00a      	b.n	800e912 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	0f1b      	lsrs	r3, r3, #28
 800e900:	b2da      	uxtb	r2, r3
 800e902:	7dfb      	ldrb	r3, [r7, #23]
 800e904:	005b      	lsls	r3, r3, #1
 800e906:	4619      	mov	r1, r3
 800e908:	68bb      	ldr	r3, [r7, #8]
 800e90a:	440b      	add	r3, r1
 800e90c:	3237      	adds	r2, #55	@ 0x37
 800e90e:	b2d2      	uxtb	r2, r2
 800e910:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	011b      	lsls	r3, r3, #4
 800e916:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e918:	7dfb      	ldrb	r3, [r7, #23]
 800e91a:	005b      	lsls	r3, r3, #1
 800e91c:	3301      	adds	r3, #1
 800e91e:	68ba      	ldr	r2, [r7, #8]
 800e920:	4413      	add	r3, r2
 800e922:	2200      	movs	r2, #0
 800e924:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e926:	7dfb      	ldrb	r3, [r7, #23]
 800e928:	3301      	adds	r3, #1
 800e92a:	75fb      	strb	r3, [r7, #23]
 800e92c:	7dfa      	ldrb	r2, [r7, #23]
 800e92e:	79fb      	ldrb	r3, [r7, #7]
 800e930:	429a      	cmp	r2, r3
 800e932:	d3d3      	bcc.n	800e8dc <IntToUnicode+0x18>
  }
}
 800e934:	bf00      	nop
 800e936:	bf00      	nop
 800e938:	371c      	adds	r7, #28
 800e93a:	46bd      	mov	sp, r7
 800e93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e940:	4770      	bx	lr
	...

0800e944 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b0aa      	sub	sp, #168	@ 0xa8
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e94c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800e950:	2200      	movs	r2, #0
 800e952:	601a      	str	r2, [r3, #0]
 800e954:	605a      	str	r2, [r3, #4]
 800e956:	609a      	str	r2, [r3, #8]
 800e958:	60da      	str	r2, [r3, #12]
 800e95a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e95c:	f107 0314 	add.w	r3, r7, #20
 800e960:	2280      	movs	r2, #128	@ 0x80
 800e962:	2100      	movs	r1, #0
 800e964:	4618      	mov	r0, r3
 800e966:	f001 f9ae 	bl	800fcc6 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e972:	d151      	bne.n	800ea18 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800e974:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800e978:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800e97a:	2300      	movs	r3, #0
 800e97c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e980:	f107 0314 	add.w	r3, r7, #20
 800e984:	4618      	mov	r0, r3
 800e986:	f7f7 fbd3 	bl	8006130 <HAL_RCCEx_PeriphCLKConfig>
 800e98a:	4603      	mov	r3, r0
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d001      	beq.n	800e994 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800e990:	f7f3 fa16 	bl	8001dc0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e994:	4b22      	ldr	r3, [pc, #136]	@ (800ea20 <HAL_PCD_MspInit+0xdc>)
 800e996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e998:	4a21      	ldr	r2, [pc, #132]	@ (800ea20 <HAL_PCD_MspInit+0xdc>)
 800e99a:	f043 0301 	orr.w	r3, r3, #1
 800e99e:	6313      	str	r3, [r2, #48]	@ 0x30
 800e9a0:	4b1f      	ldr	r3, [pc, #124]	@ (800ea20 <HAL_PCD_MspInit+0xdc>)
 800e9a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9a4:	f003 0301 	and.w	r3, r3, #1
 800e9a8:	613b      	str	r3, [r7, #16]
 800e9aa:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e9ac:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e9b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9b4:	2302      	movs	r3, #2
 800e9b6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e9c0:	2303      	movs	r3, #3
 800e9c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e9c6:	230a      	movs	r3, #10
 800e9c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e9cc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800e9d0:	4619      	mov	r1, r3
 800e9d2:	4814      	ldr	r0, [pc, #80]	@ (800ea24 <HAL_PCD_MspInit+0xe0>)
 800e9d4:	f7f5 f8dc 	bl	8003b90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e9d8:	4b11      	ldr	r3, [pc, #68]	@ (800ea20 <HAL_PCD_MspInit+0xdc>)
 800e9da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e9dc:	4a10      	ldr	r2, [pc, #64]	@ (800ea20 <HAL_PCD_MspInit+0xdc>)
 800e9de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e9e2:	6353      	str	r3, [r2, #52]	@ 0x34
 800e9e4:	4b0e      	ldr	r3, [pc, #56]	@ (800ea20 <HAL_PCD_MspInit+0xdc>)
 800e9e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e9e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e9ec:	60fb      	str	r3, [r7, #12]
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	4b0b      	ldr	r3, [pc, #44]	@ (800ea20 <HAL_PCD_MspInit+0xdc>)
 800e9f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e9f4:	4a0a      	ldr	r2, [pc, #40]	@ (800ea20 <HAL_PCD_MspInit+0xdc>)
 800e9f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e9fa:	6453      	str	r3, [r2, #68]	@ 0x44
 800e9fc:	4b08      	ldr	r3, [pc, #32]	@ (800ea20 <HAL_PCD_MspInit+0xdc>)
 800e9fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ea04:	60bb      	str	r3, [r7, #8]
 800ea06:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ea08:	2200      	movs	r2, #0
 800ea0a:	2100      	movs	r1, #0
 800ea0c:	2043      	movs	r0, #67	@ 0x43
 800ea0e:	f7f4 fc98 	bl	8003342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ea12:	2043      	movs	r0, #67	@ 0x43
 800ea14:	f7f4 fcb1 	bl	800337a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ea18:	bf00      	nop
 800ea1a:	37a8      	adds	r7, #168	@ 0xa8
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}
 800ea20:	40023800 	.word	0x40023800
 800ea24:	40020000 	.word	0x40020000

0800ea28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b082      	sub	sp, #8
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ea3c:	4619      	mov	r1, r3
 800ea3e:	4610      	mov	r0, r2
 800ea40:	f7fe fa93 	bl	800cf6a <USBD_LL_SetupStage>
}
 800ea44:	bf00      	nop
 800ea46:	3708      	adds	r7, #8
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd80      	pop	{r7, pc}

0800ea4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b082      	sub	sp, #8
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
 800ea54:	460b      	mov	r3, r1
 800ea56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800ea5e:	78fa      	ldrb	r2, [r7, #3]
 800ea60:	6879      	ldr	r1, [r7, #4]
 800ea62:	4613      	mov	r3, r2
 800ea64:	00db      	lsls	r3, r3, #3
 800ea66:	4413      	add	r3, r2
 800ea68:	009b      	lsls	r3, r3, #2
 800ea6a:	440b      	add	r3, r1
 800ea6c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ea70:	681a      	ldr	r2, [r3, #0]
 800ea72:	78fb      	ldrb	r3, [r7, #3]
 800ea74:	4619      	mov	r1, r3
 800ea76:	f7fe facd 	bl	800d014 <USBD_LL_DataOutStage>
}
 800ea7a:	bf00      	nop
 800ea7c:	3708      	adds	r7, #8
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}

0800ea82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea82:	b580      	push	{r7, lr}
 800ea84:	b082      	sub	sp, #8
 800ea86:	af00      	add	r7, sp, #0
 800ea88:	6078      	str	r0, [r7, #4]
 800ea8a:	460b      	mov	r3, r1
 800ea8c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800ea94:	78fa      	ldrb	r2, [r7, #3]
 800ea96:	6879      	ldr	r1, [r7, #4]
 800ea98:	4613      	mov	r3, r2
 800ea9a:	00db      	lsls	r3, r3, #3
 800ea9c:	4413      	add	r3, r2
 800ea9e:	009b      	lsls	r3, r3, #2
 800eaa0:	440b      	add	r3, r1
 800eaa2:	3320      	adds	r3, #32
 800eaa4:	681a      	ldr	r2, [r3, #0]
 800eaa6:	78fb      	ldrb	r3, [r7, #3]
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	f7fe fb66 	bl	800d17a <USBD_LL_DataInStage>
}
 800eaae:	bf00      	nop
 800eab0:	3708      	adds	r7, #8
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}

0800eab6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eab6:	b580      	push	{r7, lr}
 800eab8:	b082      	sub	sp, #8
 800eaba:	af00      	add	r7, sp, #0
 800eabc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800eac4:	4618      	mov	r0, r3
 800eac6:	f7fe fca0 	bl	800d40a <USBD_LL_SOF>
}
 800eaca:	bf00      	nop
 800eacc:	3708      	adds	r7, #8
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}

0800ead2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ead2:	b580      	push	{r7, lr}
 800ead4:	b084      	sub	sp, #16
 800ead6:	af00      	add	r7, sp, #0
 800ead8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800eada:	2301      	movs	r3, #1
 800eadc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	79db      	ldrb	r3, [r3, #7]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d102      	bne.n	800eaec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800eae6:	2300      	movs	r3, #0
 800eae8:	73fb      	strb	r3, [r7, #15]
 800eaea:	e008      	b.n	800eafe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	79db      	ldrb	r3, [r3, #7]
 800eaf0:	2b02      	cmp	r3, #2
 800eaf2:	d102      	bne.n	800eafa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800eaf4:	2301      	movs	r3, #1
 800eaf6:	73fb      	strb	r3, [r7, #15]
 800eaf8:	e001      	b.n	800eafe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800eafa:	f7f3 f961 	bl	8001dc0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800eb04:	7bfa      	ldrb	r2, [r7, #15]
 800eb06:	4611      	mov	r1, r2
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f7fe fc3a 	bl	800d382 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800eb14:	4618      	mov	r0, r3
 800eb16:	f7fe fbe2 	bl	800d2de <USBD_LL_Reset>
}
 800eb1a:	bf00      	nop
 800eb1c:	3710      	adds	r7, #16
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}
	...

0800eb24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b082      	sub	sp, #8
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800eb32:	4618      	mov	r0, r3
 800eb34:	f7fe fc35 	bl	800d3a2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	687a      	ldr	r2, [r7, #4]
 800eb44:	6812      	ldr	r2, [r2, #0]
 800eb46:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800eb4a:	f043 0301 	orr.w	r3, r3, #1
 800eb4e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	7adb      	ldrb	r3, [r3, #11]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d005      	beq.n	800eb64 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eb58:	4b04      	ldr	r3, [pc, #16]	@ (800eb6c <HAL_PCD_SuspendCallback+0x48>)
 800eb5a:	691b      	ldr	r3, [r3, #16]
 800eb5c:	4a03      	ldr	r2, [pc, #12]	@ (800eb6c <HAL_PCD_SuspendCallback+0x48>)
 800eb5e:	f043 0306 	orr.w	r3, r3, #6
 800eb62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800eb64:	bf00      	nop
 800eb66:	3708      	adds	r7, #8
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bd80      	pop	{r7, pc}
 800eb6c:	e000ed00 	.word	0xe000ed00

0800eb70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b082      	sub	sp, #8
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f7fe fc2b 	bl	800d3da <USBD_LL_Resume>
}
 800eb84:	bf00      	nop
 800eb86:	3708      	adds	r7, #8
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}

0800eb8c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b082      	sub	sp, #8
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
 800eb94:	460b      	mov	r3, r1
 800eb96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800eb9e:	78fa      	ldrb	r2, [r7, #3]
 800eba0:	4611      	mov	r1, r2
 800eba2:	4618      	mov	r0, r3
 800eba4:	f7fe fc83 	bl	800d4ae <USBD_LL_IsoOUTIncomplete>
}
 800eba8:	bf00      	nop
 800ebaa:	3708      	adds	r7, #8
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}

0800ebb0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b082      	sub	sp, #8
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
 800ebb8:	460b      	mov	r3, r1
 800ebba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800ebc2:	78fa      	ldrb	r2, [r7, #3]
 800ebc4:	4611      	mov	r1, r2
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7fe fc3f 	bl	800d44a <USBD_LL_IsoINIncomplete>
}
 800ebcc:	bf00      	nop
 800ebce:	3708      	adds	r7, #8
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}

0800ebd4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b082      	sub	sp, #8
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f7fe fc95 	bl	800d512 <USBD_LL_DevConnected>
}
 800ebe8:	bf00      	nop
 800ebea:	3708      	adds	r7, #8
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bd80      	pop	{r7, pc}

0800ebf0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b082      	sub	sp, #8
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7fe fc92 	bl	800d528 <USBD_LL_DevDisconnected>
}
 800ec04:	bf00      	nop
 800ec06:	3708      	adds	r7, #8
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}

0800ec0c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b082      	sub	sp, #8
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	781b      	ldrb	r3, [r3, #0]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d13f      	bne.n	800ec9c <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ec1c:	4a22      	ldr	r2, [pc, #136]	@ (800eca8 <USBD_LL_Init+0x9c>)
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	4a20      	ldr	r2, [pc, #128]	@ (800eca8 <USBD_LL_Init+0x9c>)
 800ec28:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ec2c:	4b1e      	ldr	r3, [pc, #120]	@ (800eca8 <USBD_LL_Init+0x9c>)
 800ec2e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ec32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800ec34:	4b1c      	ldr	r3, [pc, #112]	@ (800eca8 <USBD_LL_Init+0x9c>)
 800ec36:	2206      	movs	r2, #6
 800ec38:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ec3a:	4b1b      	ldr	r3, [pc, #108]	@ (800eca8 <USBD_LL_Init+0x9c>)
 800ec3c:	2202      	movs	r2, #2
 800ec3e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ec40:	4b19      	ldr	r3, [pc, #100]	@ (800eca8 <USBD_LL_Init+0x9c>)
 800ec42:	2200      	movs	r2, #0
 800ec44:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ec46:	4b18      	ldr	r3, [pc, #96]	@ (800eca8 <USBD_LL_Init+0x9c>)
 800ec48:	2202      	movs	r2, #2
 800ec4a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ec4c:	4b16      	ldr	r3, [pc, #88]	@ (800eca8 <USBD_LL_Init+0x9c>)
 800ec4e:	2200      	movs	r2, #0
 800ec50:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ec52:	4b15      	ldr	r3, [pc, #84]	@ (800eca8 <USBD_LL_Init+0x9c>)
 800ec54:	2200      	movs	r2, #0
 800ec56:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ec58:	4b13      	ldr	r3, [pc, #76]	@ (800eca8 <USBD_LL_Init+0x9c>)
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800ec5e:	4b12      	ldr	r3, [pc, #72]	@ (800eca8 <USBD_LL_Init+0x9c>)
 800ec60:	2200      	movs	r2, #0
 800ec62:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ec64:	4b10      	ldr	r3, [pc, #64]	@ (800eca8 <USBD_LL_Init+0x9c>)
 800ec66:	2200      	movs	r2, #0
 800ec68:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ec6a:	4b0f      	ldr	r3, [pc, #60]	@ (800eca8 <USBD_LL_Init+0x9c>)
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ec70:	480d      	ldr	r0, [pc, #52]	@ (800eca8 <USBD_LL_Init+0x9c>)
 800ec72:	f7f5 fa8e 	bl	8004192 <HAL_PCD_Init>
 800ec76:	4603      	mov	r3, r0
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d001      	beq.n	800ec80 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800ec7c:	f7f3 f8a0 	bl	8001dc0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ec80:	2180      	movs	r1, #128	@ 0x80
 800ec82:	4809      	ldr	r0, [pc, #36]	@ (800eca8 <USBD_LL_Init+0x9c>)
 800ec84:	f7f6 fcd9 	bl	800563a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ec88:	2240      	movs	r2, #64	@ 0x40
 800ec8a:	2100      	movs	r1, #0
 800ec8c:	4806      	ldr	r0, [pc, #24]	@ (800eca8 <USBD_LL_Init+0x9c>)
 800ec8e:	f7f6 fc8d 	bl	80055ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ec92:	2280      	movs	r2, #128	@ 0x80
 800ec94:	2101      	movs	r1, #1
 800ec96:	4804      	ldr	r0, [pc, #16]	@ (800eca8 <USBD_LL_Init+0x9c>)
 800ec98:	f7f6 fc88 	bl	80055ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ec9c:	2300      	movs	r3, #0
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	3708      	adds	r7, #8
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}
 800eca6:	bf00      	nop
 800eca8:	20002064 	.word	0x20002064

0800ecac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b084      	sub	sp, #16
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f7f5 fb7b 	bl	80043be <HAL_PCD_Start>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eccc:	7bfb      	ldrb	r3, [r7, #15]
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f000 f97e 	bl	800efd0 <USBD_Get_USB_Status>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecd8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecda:	4618      	mov	r0, r3
 800ecdc:	3710      	adds	r7, #16
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}

0800ece2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ece2:	b580      	push	{r7, lr}
 800ece4:	b084      	sub	sp, #16
 800ece6:	af00      	add	r7, sp, #0
 800ece8:	6078      	str	r0, [r7, #4]
 800ecea:	4608      	mov	r0, r1
 800ecec:	4611      	mov	r1, r2
 800ecee:	461a      	mov	r2, r3
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	70fb      	strb	r3, [r7, #3]
 800ecf4:	460b      	mov	r3, r1
 800ecf6:	70bb      	strb	r3, [r7, #2]
 800ecf8:	4613      	mov	r3, r2
 800ecfa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed00:	2300      	movs	r3, #0
 800ed02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ed0a:	78bb      	ldrb	r3, [r7, #2]
 800ed0c:	883a      	ldrh	r2, [r7, #0]
 800ed0e:	78f9      	ldrb	r1, [r7, #3]
 800ed10:	f7f6 f869 	bl	8004de6 <HAL_PCD_EP_Open>
 800ed14:	4603      	mov	r3, r0
 800ed16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed18:	7bfb      	ldrb	r3, [r7, #15]
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f000 f958 	bl	800efd0 <USBD_Get_USB_Status>
 800ed20:	4603      	mov	r3, r0
 800ed22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed24:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3710      	adds	r7, #16
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}

0800ed2e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed2e:	b580      	push	{r7, lr}
 800ed30:	b084      	sub	sp, #16
 800ed32:	af00      	add	r7, sp, #0
 800ed34:	6078      	str	r0, [r7, #4]
 800ed36:	460b      	mov	r3, r1
 800ed38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ed48:	78fa      	ldrb	r2, [r7, #3]
 800ed4a:	4611      	mov	r1, r2
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	f7f6 f8b2 	bl	8004eb6 <HAL_PCD_EP_Close>
 800ed52:	4603      	mov	r3, r0
 800ed54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed56:	7bfb      	ldrb	r3, [r7, #15]
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f000 f939 	bl	800efd0 <USBD_Get_USB_Status>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed62:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed64:	4618      	mov	r0, r3
 800ed66:	3710      	adds	r7, #16
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd80      	pop	{r7, pc}

0800ed6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b084      	sub	sp, #16
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
 800ed74:	460b      	mov	r3, r1
 800ed76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed78:	2300      	movs	r3, #0
 800ed7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ed86:	78fa      	ldrb	r2, [r7, #3]
 800ed88:	4611      	mov	r1, r2
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f7f6 f96a 	bl	8005064 <HAL_PCD_EP_SetStall>
 800ed90:	4603      	mov	r3, r0
 800ed92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed94:	7bfb      	ldrb	r3, [r7, #15]
 800ed96:	4618      	mov	r0, r3
 800ed98:	f000 f91a 	bl	800efd0 <USBD_Get_USB_Status>
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eda0:	7bbb      	ldrb	r3, [r7, #14]
}
 800eda2:	4618      	mov	r0, r3
 800eda4:	3710      	adds	r7, #16
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}

0800edaa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800edaa:	b580      	push	{r7, lr}
 800edac:	b084      	sub	sp, #16
 800edae:	af00      	add	r7, sp, #0
 800edb0:	6078      	str	r0, [r7, #4]
 800edb2:	460b      	mov	r3, r1
 800edb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edb6:	2300      	movs	r3, #0
 800edb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edba:	2300      	movs	r3, #0
 800edbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800edc4:	78fa      	ldrb	r2, [r7, #3]
 800edc6:	4611      	mov	r1, r2
 800edc8:	4618      	mov	r0, r3
 800edca:	f7f6 f9ae 	bl	800512a <HAL_PCD_EP_ClrStall>
 800edce:	4603      	mov	r3, r0
 800edd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edd2:	7bfb      	ldrb	r3, [r7, #15]
 800edd4:	4618      	mov	r0, r3
 800edd6:	f000 f8fb 	bl	800efd0 <USBD_Get_USB_Status>
 800edda:	4603      	mov	r3, r0
 800eddc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edde:	7bbb      	ldrb	r3, [r7, #14]
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3710      	adds	r7, #16
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}

0800ede8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ede8:	b480      	push	{r7}
 800edea:	b085      	sub	sp, #20
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
 800edf0:	460b      	mov	r3, r1
 800edf2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800edfa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800edfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	da0b      	bge.n	800ee1c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ee04:	78fb      	ldrb	r3, [r7, #3]
 800ee06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ee0a:	68f9      	ldr	r1, [r7, #12]
 800ee0c:	4613      	mov	r3, r2
 800ee0e:	00db      	lsls	r3, r3, #3
 800ee10:	4413      	add	r3, r2
 800ee12:	009b      	lsls	r3, r3, #2
 800ee14:	440b      	add	r3, r1
 800ee16:	3316      	adds	r3, #22
 800ee18:	781b      	ldrb	r3, [r3, #0]
 800ee1a:	e00b      	b.n	800ee34 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ee1c:	78fb      	ldrb	r3, [r7, #3]
 800ee1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ee22:	68f9      	ldr	r1, [r7, #12]
 800ee24:	4613      	mov	r3, r2
 800ee26:	00db      	lsls	r3, r3, #3
 800ee28:	4413      	add	r3, r2
 800ee2a:	009b      	lsls	r3, r3, #2
 800ee2c:	440b      	add	r3, r1
 800ee2e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ee32:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ee34:	4618      	mov	r0, r3
 800ee36:	3714      	adds	r7, #20
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3e:	4770      	bx	lr

0800ee40 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b084      	sub	sp, #16
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
 800ee48:	460b      	mov	r3, r1
 800ee4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee50:	2300      	movs	r3, #0
 800ee52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ee5a:	78fa      	ldrb	r2, [r7, #3]
 800ee5c:	4611      	mov	r1, r2
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7f5 ff9d 	bl	8004d9e <HAL_PCD_SetAddress>
 800ee64:	4603      	mov	r3, r0
 800ee66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee68:	7bfb      	ldrb	r3, [r7, #15]
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f000 f8b0 	bl	800efd0 <USBD_Get_USB_Status>
 800ee70:	4603      	mov	r3, r0
 800ee72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee74:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee76:	4618      	mov	r0, r3
 800ee78:	3710      	adds	r7, #16
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}

0800ee7e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ee7e:	b580      	push	{r7, lr}
 800ee80:	b086      	sub	sp, #24
 800ee82:	af00      	add	r7, sp, #0
 800ee84:	60f8      	str	r0, [r7, #12]
 800ee86:	607a      	str	r2, [r7, #4]
 800ee88:	603b      	str	r3, [r7, #0]
 800ee8a:	460b      	mov	r3, r1
 800ee8c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee8e:	2300      	movs	r3, #0
 800ee90:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee92:	2300      	movs	r3, #0
 800ee94:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ee9c:	7af9      	ldrb	r1, [r7, #11]
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	687a      	ldr	r2, [r7, #4]
 800eea2:	f7f6 f8a5 	bl	8004ff0 <HAL_PCD_EP_Transmit>
 800eea6:	4603      	mov	r3, r0
 800eea8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eeaa:	7dfb      	ldrb	r3, [r7, #23]
 800eeac:	4618      	mov	r0, r3
 800eeae:	f000 f88f 	bl	800efd0 <USBD_Get_USB_Status>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800eeb6:	7dbb      	ldrb	r3, [r7, #22]
}
 800eeb8:	4618      	mov	r0, r3
 800eeba:	3718      	adds	r7, #24
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd80      	pop	{r7, pc}

0800eec0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b086      	sub	sp, #24
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	60f8      	str	r0, [r7, #12]
 800eec8:	607a      	str	r2, [r7, #4]
 800eeca:	603b      	str	r3, [r7, #0]
 800eecc:	460b      	mov	r3, r1
 800eece:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eed0:	2300      	movs	r3, #0
 800eed2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eed4:	2300      	movs	r3, #0
 800eed6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800eede:	7af9      	ldrb	r1, [r7, #11]
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	687a      	ldr	r2, [r7, #4]
 800eee4:	f7f6 f831 	bl	8004f4a <HAL_PCD_EP_Receive>
 800eee8:	4603      	mov	r3, r0
 800eeea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eeec:	7dfb      	ldrb	r3, [r7, #23]
 800eeee:	4618      	mov	r0, r3
 800eef0:	f000 f86e 	bl	800efd0 <USBD_Get_USB_Status>
 800eef4:	4603      	mov	r3, r0
 800eef6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800eef8:	7dbb      	ldrb	r3, [r7, #22]
}
 800eefa:	4618      	mov	r0, r3
 800eefc:	3718      	adds	r7, #24
 800eefe:	46bd      	mov	sp, r7
 800ef00:	bd80      	pop	{r7, pc}

0800ef02 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef02:	b580      	push	{r7, lr}
 800ef04:	b082      	sub	sp, #8
 800ef06:	af00      	add	r7, sp, #0
 800ef08:	6078      	str	r0, [r7, #4]
 800ef0a:	460b      	mov	r3, r1
 800ef0c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ef14:	78fa      	ldrb	r2, [r7, #3]
 800ef16:	4611      	mov	r1, r2
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f7f6 f851 	bl	8004fc0 <HAL_PCD_EP_GetRxCount>
 800ef1e:	4603      	mov	r3, r0
}
 800ef20:	4618      	mov	r0, r3
 800ef22:	3708      	adds	r7, #8
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}

0800ef28 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b082      	sub	sp, #8
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
 800ef30:	460b      	mov	r3, r1
 800ef32:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800ef34:	78fb      	ldrb	r3, [r7, #3]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d002      	beq.n	800ef40 <HAL_PCDEx_LPM_Callback+0x18>
 800ef3a:	2b01      	cmp	r3, #1
 800ef3c:	d01f      	beq.n	800ef7e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800ef3e:	e03b      	b.n	800efb8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	7adb      	ldrb	r3, [r3, #11]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d007      	beq.n	800ef58 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ef48:	f000 f83c 	bl	800efc4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ef4c:	4b1c      	ldr	r3, [pc, #112]	@ (800efc0 <HAL_PCDEx_LPM_Callback+0x98>)
 800ef4e:	691b      	ldr	r3, [r3, #16]
 800ef50:	4a1b      	ldr	r2, [pc, #108]	@ (800efc0 <HAL_PCDEx_LPM_Callback+0x98>)
 800ef52:	f023 0306 	bic.w	r3, r3, #6
 800ef56:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	687a      	ldr	r2, [r7, #4]
 800ef64:	6812      	ldr	r2, [r2, #0]
 800ef66:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ef6a:	f023 0301 	bic.w	r3, r3, #1
 800ef6e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800ef76:	4618      	mov	r0, r3
 800ef78:	f7fe fa2f 	bl	800d3da <USBD_LL_Resume>
    break;
 800ef7c:	e01c      	b.n	800efb8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	687a      	ldr	r2, [r7, #4]
 800ef8a:	6812      	ldr	r2, [r2, #0]
 800ef8c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ef90:	f043 0301 	orr.w	r3, r3, #1
 800ef94:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f7fe fa00 	bl	800d3a2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	7adb      	ldrb	r3, [r3, #11]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d005      	beq.n	800efb6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800efaa:	4b05      	ldr	r3, [pc, #20]	@ (800efc0 <HAL_PCDEx_LPM_Callback+0x98>)
 800efac:	691b      	ldr	r3, [r3, #16]
 800efae:	4a04      	ldr	r2, [pc, #16]	@ (800efc0 <HAL_PCDEx_LPM_Callback+0x98>)
 800efb0:	f043 0306 	orr.w	r3, r3, #6
 800efb4:	6113      	str	r3, [r2, #16]
    break;
 800efb6:	bf00      	nop
}
 800efb8:	bf00      	nop
 800efba:	3708      	adds	r7, #8
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}
 800efc0:	e000ed00 	.word	0xe000ed00

0800efc4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800efc8:	f7f2 f9f6 	bl	80013b8 <SystemClock_Config>
}
 800efcc:	bf00      	nop
 800efce:	bd80      	pop	{r7, pc}

0800efd0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800efd0:	b480      	push	{r7}
 800efd2:	b085      	sub	sp, #20
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	4603      	mov	r3, r0
 800efd8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efda:	2300      	movs	r3, #0
 800efdc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800efde:	79fb      	ldrb	r3, [r7, #7]
 800efe0:	2b03      	cmp	r3, #3
 800efe2:	d817      	bhi.n	800f014 <USBD_Get_USB_Status+0x44>
 800efe4:	a201      	add	r2, pc, #4	@ (adr r2, 800efec <USBD_Get_USB_Status+0x1c>)
 800efe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efea:	bf00      	nop
 800efec:	0800effd 	.word	0x0800effd
 800eff0:	0800f003 	.word	0x0800f003
 800eff4:	0800f009 	.word	0x0800f009
 800eff8:	0800f00f 	.word	0x0800f00f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800effc:	2300      	movs	r3, #0
 800effe:	73fb      	strb	r3, [r7, #15]
    break;
 800f000:	e00b      	b.n	800f01a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f002:	2303      	movs	r3, #3
 800f004:	73fb      	strb	r3, [r7, #15]
    break;
 800f006:	e008      	b.n	800f01a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f008:	2301      	movs	r3, #1
 800f00a:	73fb      	strb	r3, [r7, #15]
    break;
 800f00c:	e005      	b.n	800f01a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f00e:	2303      	movs	r3, #3
 800f010:	73fb      	strb	r3, [r7, #15]
    break;
 800f012:	e002      	b.n	800f01a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f014:	2303      	movs	r3, #3
 800f016:	73fb      	strb	r3, [r7, #15]
    break;
 800f018:	bf00      	nop
  }
  return usb_status;
 800f01a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f01c:	4618      	mov	r0, r3
 800f01e:	3714      	adds	r7, #20
 800f020:	46bd      	mov	sp, r7
 800f022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f026:	4770      	bx	lr

0800f028 <malloc>:
 800f028:	4b02      	ldr	r3, [pc, #8]	@ (800f034 <malloc+0xc>)
 800f02a:	4601      	mov	r1, r0
 800f02c:	6818      	ldr	r0, [r3, #0]
 800f02e:	f000 b82d 	b.w	800f08c <_malloc_r>
 800f032:	bf00      	nop
 800f034:	20000118 	.word	0x20000118

0800f038 <free>:
 800f038:	4b02      	ldr	r3, [pc, #8]	@ (800f044 <free+0xc>)
 800f03a:	4601      	mov	r1, r0
 800f03c:	6818      	ldr	r0, [r3, #0]
 800f03e:	f001 bd2b 	b.w	8010a98 <_free_r>
 800f042:	bf00      	nop
 800f044:	20000118 	.word	0x20000118

0800f048 <sbrk_aligned>:
 800f048:	b570      	push	{r4, r5, r6, lr}
 800f04a:	4e0f      	ldr	r6, [pc, #60]	@ (800f088 <sbrk_aligned+0x40>)
 800f04c:	460c      	mov	r4, r1
 800f04e:	6831      	ldr	r1, [r6, #0]
 800f050:	4605      	mov	r5, r0
 800f052:	b911      	cbnz	r1, 800f05a <sbrk_aligned+0x12>
 800f054:	f000 fe78 	bl	800fd48 <_sbrk_r>
 800f058:	6030      	str	r0, [r6, #0]
 800f05a:	4621      	mov	r1, r4
 800f05c:	4628      	mov	r0, r5
 800f05e:	f000 fe73 	bl	800fd48 <_sbrk_r>
 800f062:	1c43      	adds	r3, r0, #1
 800f064:	d103      	bne.n	800f06e <sbrk_aligned+0x26>
 800f066:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800f06a:	4620      	mov	r0, r4
 800f06c:	bd70      	pop	{r4, r5, r6, pc}
 800f06e:	1cc4      	adds	r4, r0, #3
 800f070:	f024 0403 	bic.w	r4, r4, #3
 800f074:	42a0      	cmp	r0, r4
 800f076:	d0f8      	beq.n	800f06a <sbrk_aligned+0x22>
 800f078:	1a21      	subs	r1, r4, r0
 800f07a:	4628      	mov	r0, r5
 800f07c:	f000 fe64 	bl	800fd48 <_sbrk_r>
 800f080:	3001      	adds	r0, #1
 800f082:	d1f2      	bne.n	800f06a <sbrk_aligned+0x22>
 800f084:	e7ef      	b.n	800f066 <sbrk_aligned+0x1e>
 800f086:	bf00      	nop
 800f088:	20002544 	.word	0x20002544

0800f08c <_malloc_r>:
 800f08c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f090:	1ccd      	adds	r5, r1, #3
 800f092:	f025 0503 	bic.w	r5, r5, #3
 800f096:	3508      	adds	r5, #8
 800f098:	2d0c      	cmp	r5, #12
 800f09a:	bf38      	it	cc
 800f09c:	250c      	movcc	r5, #12
 800f09e:	2d00      	cmp	r5, #0
 800f0a0:	4606      	mov	r6, r0
 800f0a2:	db01      	blt.n	800f0a8 <_malloc_r+0x1c>
 800f0a4:	42a9      	cmp	r1, r5
 800f0a6:	d904      	bls.n	800f0b2 <_malloc_r+0x26>
 800f0a8:	230c      	movs	r3, #12
 800f0aa:	6033      	str	r3, [r6, #0]
 800f0ac:	2000      	movs	r0, #0
 800f0ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f188 <_malloc_r+0xfc>
 800f0b6:	f000 f869 	bl	800f18c <__malloc_lock>
 800f0ba:	f8d8 3000 	ldr.w	r3, [r8]
 800f0be:	461c      	mov	r4, r3
 800f0c0:	bb44      	cbnz	r4, 800f114 <_malloc_r+0x88>
 800f0c2:	4629      	mov	r1, r5
 800f0c4:	4630      	mov	r0, r6
 800f0c6:	f7ff ffbf 	bl	800f048 <sbrk_aligned>
 800f0ca:	1c43      	adds	r3, r0, #1
 800f0cc:	4604      	mov	r4, r0
 800f0ce:	d158      	bne.n	800f182 <_malloc_r+0xf6>
 800f0d0:	f8d8 4000 	ldr.w	r4, [r8]
 800f0d4:	4627      	mov	r7, r4
 800f0d6:	2f00      	cmp	r7, #0
 800f0d8:	d143      	bne.n	800f162 <_malloc_r+0xd6>
 800f0da:	2c00      	cmp	r4, #0
 800f0dc:	d04b      	beq.n	800f176 <_malloc_r+0xea>
 800f0de:	6823      	ldr	r3, [r4, #0]
 800f0e0:	4639      	mov	r1, r7
 800f0e2:	4630      	mov	r0, r6
 800f0e4:	eb04 0903 	add.w	r9, r4, r3
 800f0e8:	f000 fe2e 	bl	800fd48 <_sbrk_r>
 800f0ec:	4581      	cmp	r9, r0
 800f0ee:	d142      	bne.n	800f176 <_malloc_r+0xea>
 800f0f0:	6821      	ldr	r1, [r4, #0]
 800f0f2:	1a6d      	subs	r5, r5, r1
 800f0f4:	4629      	mov	r1, r5
 800f0f6:	4630      	mov	r0, r6
 800f0f8:	f7ff ffa6 	bl	800f048 <sbrk_aligned>
 800f0fc:	3001      	adds	r0, #1
 800f0fe:	d03a      	beq.n	800f176 <_malloc_r+0xea>
 800f100:	6823      	ldr	r3, [r4, #0]
 800f102:	442b      	add	r3, r5
 800f104:	6023      	str	r3, [r4, #0]
 800f106:	f8d8 3000 	ldr.w	r3, [r8]
 800f10a:	685a      	ldr	r2, [r3, #4]
 800f10c:	bb62      	cbnz	r2, 800f168 <_malloc_r+0xdc>
 800f10e:	f8c8 7000 	str.w	r7, [r8]
 800f112:	e00f      	b.n	800f134 <_malloc_r+0xa8>
 800f114:	6822      	ldr	r2, [r4, #0]
 800f116:	1b52      	subs	r2, r2, r5
 800f118:	d420      	bmi.n	800f15c <_malloc_r+0xd0>
 800f11a:	2a0b      	cmp	r2, #11
 800f11c:	d917      	bls.n	800f14e <_malloc_r+0xc2>
 800f11e:	1961      	adds	r1, r4, r5
 800f120:	42a3      	cmp	r3, r4
 800f122:	6025      	str	r5, [r4, #0]
 800f124:	bf18      	it	ne
 800f126:	6059      	strne	r1, [r3, #4]
 800f128:	6863      	ldr	r3, [r4, #4]
 800f12a:	bf08      	it	eq
 800f12c:	f8c8 1000 	streq.w	r1, [r8]
 800f130:	5162      	str	r2, [r4, r5]
 800f132:	604b      	str	r3, [r1, #4]
 800f134:	4630      	mov	r0, r6
 800f136:	f000 f82f 	bl	800f198 <__malloc_unlock>
 800f13a:	f104 000b 	add.w	r0, r4, #11
 800f13e:	1d23      	adds	r3, r4, #4
 800f140:	f020 0007 	bic.w	r0, r0, #7
 800f144:	1ac2      	subs	r2, r0, r3
 800f146:	bf1c      	itt	ne
 800f148:	1a1b      	subne	r3, r3, r0
 800f14a:	50a3      	strne	r3, [r4, r2]
 800f14c:	e7af      	b.n	800f0ae <_malloc_r+0x22>
 800f14e:	6862      	ldr	r2, [r4, #4]
 800f150:	42a3      	cmp	r3, r4
 800f152:	bf0c      	ite	eq
 800f154:	f8c8 2000 	streq.w	r2, [r8]
 800f158:	605a      	strne	r2, [r3, #4]
 800f15a:	e7eb      	b.n	800f134 <_malloc_r+0xa8>
 800f15c:	4623      	mov	r3, r4
 800f15e:	6864      	ldr	r4, [r4, #4]
 800f160:	e7ae      	b.n	800f0c0 <_malloc_r+0x34>
 800f162:	463c      	mov	r4, r7
 800f164:	687f      	ldr	r7, [r7, #4]
 800f166:	e7b6      	b.n	800f0d6 <_malloc_r+0x4a>
 800f168:	461a      	mov	r2, r3
 800f16a:	685b      	ldr	r3, [r3, #4]
 800f16c:	42a3      	cmp	r3, r4
 800f16e:	d1fb      	bne.n	800f168 <_malloc_r+0xdc>
 800f170:	2300      	movs	r3, #0
 800f172:	6053      	str	r3, [r2, #4]
 800f174:	e7de      	b.n	800f134 <_malloc_r+0xa8>
 800f176:	230c      	movs	r3, #12
 800f178:	6033      	str	r3, [r6, #0]
 800f17a:	4630      	mov	r0, r6
 800f17c:	f000 f80c 	bl	800f198 <__malloc_unlock>
 800f180:	e794      	b.n	800f0ac <_malloc_r+0x20>
 800f182:	6005      	str	r5, [r0, #0]
 800f184:	e7d6      	b.n	800f134 <_malloc_r+0xa8>
 800f186:	bf00      	nop
 800f188:	20002548 	.word	0x20002548

0800f18c <__malloc_lock>:
 800f18c:	4801      	ldr	r0, [pc, #4]	@ (800f194 <__malloc_lock+0x8>)
 800f18e:	f000 be28 	b.w	800fde2 <__retarget_lock_acquire_recursive>
 800f192:	bf00      	nop
 800f194:	2000268c 	.word	0x2000268c

0800f198 <__malloc_unlock>:
 800f198:	4801      	ldr	r0, [pc, #4]	@ (800f1a0 <__malloc_unlock+0x8>)
 800f19a:	f000 be23 	b.w	800fde4 <__retarget_lock_release_recursive>
 800f19e:	bf00      	nop
 800f1a0:	2000268c 	.word	0x2000268c

0800f1a4 <__cvt>:
 800f1a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f1a8:	ec57 6b10 	vmov	r6, r7, d0
 800f1ac:	2f00      	cmp	r7, #0
 800f1ae:	460c      	mov	r4, r1
 800f1b0:	4619      	mov	r1, r3
 800f1b2:	463b      	mov	r3, r7
 800f1b4:	bfbb      	ittet	lt
 800f1b6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f1ba:	461f      	movlt	r7, r3
 800f1bc:	2300      	movge	r3, #0
 800f1be:	232d      	movlt	r3, #45	@ 0x2d
 800f1c0:	700b      	strb	r3, [r1, #0]
 800f1c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f1c4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f1c8:	4691      	mov	r9, r2
 800f1ca:	f023 0820 	bic.w	r8, r3, #32
 800f1ce:	bfbc      	itt	lt
 800f1d0:	4632      	movlt	r2, r6
 800f1d2:	4616      	movlt	r6, r2
 800f1d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f1d8:	d005      	beq.n	800f1e6 <__cvt+0x42>
 800f1da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f1de:	d100      	bne.n	800f1e2 <__cvt+0x3e>
 800f1e0:	3401      	adds	r4, #1
 800f1e2:	2102      	movs	r1, #2
 800f1e4:	e000      	b.n	800f1e8 <__cvt+0x44>
 800f1e6:	2103      	movs	r1, #3
 800f1e8:	ab03      	add	r3, sp, #12
 800f1ea:	9301      	str	r3, [sp, #4]
 800f1ec:	ab02      	add	r3, sp, #8
 800f1ee:	9300      	str	r3, [sp, #0]
 800f1f0:	ec47 6b10 	vmov	d0, r6, r7
 800f1f4:	4653      	mov	r3, sl
 800f1f6:	4622      	mov	r2, r4
 800f1f8:	f000 fe7e 	bl	800fef8 <_dtoa_r>
 800f1fc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f200:	4605      	mov	r5, r0
 800f202:	d119      	bne.n	800f238 <__cvt+0x94>
 800f204:	f019 0f01 	tst.w	r9, #1
 800f208:	d00e      	beq.n	800f228 <__cvt+0x84>
 800f20a:	eb00 0904 	add.w	r9, r0, r4
 800f20e:	2200      	movs	r2, #0
 800f210:	2300      	movs	r3, #0
 800f212:	4630      	mov	r0, r6
 800f214:	4639      	mov	r1, r7
 800f216:	f7f1 fc7f 	bl	8000b18 <__aeabi_dcmpeq>
 800f21a:	b108      	cbz	r0, 800f220 <__cvt+0x7c>
 800f21c:	f8cd 900c 	str.w	r9, [sp, #12]
 800f220:	2230      	movs	r2, #48	@ 0x30
 800f222:	9b03      	ldr	r3, [sp, #12]
 800f224:	454b      	cmp	r3, r9
 800f226:	d31e      	bcc.n	800f266 <__cvt+0xc2>
 800f228:	9b03      	ldr	r3, [sp, #12]
 800f22a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f22c:	1b5b      	subs	r3, r3, r5
 800f22e:	4628      	mov	r0, r5
 800f230:	6013      	str	r3, [r2, #0]
 800f232:	b004      	add	sp, #16
 800f234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f238:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f23c:	eb00 0904 	add.w	r9, r0, r4
 800f240:	d1e5      	bne.n	800f20e <__cvt+0x6a>
 800f242:	7803      	ldrb	r3, [r0, #0]
 800f244:	2b30      	cmp	r3, #48	@ 0x30
 800f246:	d10a      	bne.n	800f25e <__cvt+0xba>
 800f248:	2200      	movs	r2, #0
 800f24a:	2300      	movs	r3, #0
 800f24c:	4630      	mov	r0, r6
 800f24e:	4639      	mov	r1, r7
 800f250:	f7f1 fc62 	bl	8000b18 <__aeabi_dcmpeq>
 800f254:	b918      	cbnz	r0, 800f25e <__cvt+0xba>
 800f256:	f1c4 0401 	rsb	r4, r4, #1
 800f25a:	f8ca 4000 	str.w	r4, [sl]
 800f25e:	f8da 3000 	ldr.w	r3, [sl]
 800f262:	4499      	add	r9, r3
 800f264:	e7d3      	b.n	800f20e <__cvt+0x6a>
 800f266:	1c59      	adds	r1, r3, #1
 800f268:	9103      	str	r1, [sp, #12]
 800f26a:	701a      	strb	r2, [r3, #0]
 800f26c:	e7d9      	b.n	800f222 <__cvt+0x7e>

0800f26e <__exponent>:
 800f26e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f270:	2900      	cmp	r1, #0
 800f272:	bfba      	itte	lt
 800f274:	4249      	neglt	r1, r1
 800f276:	232d      	movlt	r3, #45	@ 0x2d
 800f278:	232b      	movge	r3, #43	@ 0x2b
 800f27a:	2909      	cmp	r1, #9
 800f27c:	7002      	strb	r2, [r0, #0]
 800f27e:	7043      	strb	r3, [r0, #1]
 800f280:	dd29      	ble.n	800f2d6 <__exponent+0x68>
 800f282:	f10d 0307 	add.w	r3, sp, #7
 800f286:	461d      	mov	r5, r3
 800f288:	270a      	movs	r7, #10
 800f28a:	461a      	mov	r2, r3
 800f28c:	fbb1 f6f7 	udiv	r6, r1, r7
 800f290:	fb07 1416 	mls	r4, r7, r6, r1
 800f294:	3430      	adds	r4, #48	@ 0x30
 800f296:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f29a:	460c      	mov	r4, r1
 800f29c:	2c63      	cmp	r4, #99	@ 0x63
 800f29e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800f2a2:	4631      	mov	r1, r6
 800f2a4:	dcf1      	bgt.n	800f28a <__exponent+0x1c>
 800f2a6:	3130      	adds	r1, #48	@ 0x30
 800f2a8:	1e94      	subs	r4, r2, #2
 800f2aa:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f2ae:	1c41      	adds	r1, r0, #1
 800f2b0:	4623      	mov	r3, r4
 800f2b2:	42ab      	cmp	r3, r5
 800f2b4:	d30a      	bcc.n	800f2cc <__exponent+0x5e>
 800f2b6:	f10d 0309 	add.w	r3, sp, #9
 800f2ba:	1a9b      	subs	r3, r3, r2
 800f2bc:	42ac      	cmp	r4, r5
 800f2be:	bf88      	it	hi
 800f2c0:	2300      	movhi	r3, #0
 800f2c2:	3302      	adds	r3, #2
 800f2c4:	4403      	add	r3, r0
 800f2c6:	1a18      	subs	r0, r3, r0
 800f2c8:	b003      	add	sp, #12
 800f2ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2cc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f2d0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f2d4:	e7ed      	b.n	800f2b2 <__exponent+0x44>
 800f2d6:	2330      	movs	r3, #48	@ 0x30
 800f2d8:	3130      	adds	r1, #48	@ 0x30
 800f2da:	7083      	strb	r3, [r0, #2]
 800f2dc:	70c1      	strb	r1, [r0, #3]
 800f2de:	1d03      	adds	r3, r0, #4
 800f2e0:	e7f1      	b.n	800f2c6 <__exponent+0x58>
	...

0800f2e4 <_printf_float>:
 800f2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2e8:	b08d      	sub	sp, #52	@ 0x34
 800f2ea:	460c      	mov	r4, r1
 800f2ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f2f0:	4616      	mov	r6, r2
 800f2f2:	461f      	mov	r7, r3
 800f2f4:	4605      	mov	r5, r0
 800f2f6:	f000 fcef 	bl	800fcd8 <_localeconv_r>
 800f2fa:	6803      	ldr	r3, [r0, #0]
 800f2fc:	9304      	str	r3, [sp, #16]
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7f0 ffde 	bl	80002c0 <strlen>
 800f304:	2300      	movs	r3, #0
 800f306:	930a      	str	r3, [sp, #40]	@ 0x28
 800f308:	f8d8 3000 	ldr.w	r3, [r8]
 800f30c:	9005      	str	r0, [sp, #20]
 800f30e:	3307      	adds	r3, #7
 800f310:	f023 0307 	bic.w	r3, r3, #7
 800f314:	f103 0208 	add.w	r2, r3, #8
 800f318:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f31c:	f8d4 b000 	ldr.w	fp, [r4]
 800f320:	f8c8 2000 	str.w	r2, [r8]
 800f324:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f328:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f32c:	9307      	str	r3, [sp, #28]
 800f32e:	f8cd 8018 	str.w	r8, [sp, #24]
 800f332:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f336:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f33a:	4b9c      	ldr	r3, [pc, #624]	@ (800f5ac <_printf_float+0x2c8>)
 800f33c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f340:	f7f1 fc1c 	bl	8000b7c <__aeabi_dcmpun>
 800f344:	bb70      	cbnz	r0, 800f3a4 <_printf_float+0xc0>
 800f346:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f34a:	4b98      	ldr	r3, [pc, #608]	@ (800f5ac <_printf_float+0x2c8>)
 800f34c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f350:	f7f1 fbf6 	bl	8000b40 <__aeabi_dcmple>
 800f354:	bb30      	cbnz	r0, 800f3a4 <_printf_float+0xc0>
 800f356:	2200      	movs	r2, #0
 800f358:	2300      	movs	r3, #0
 800f35a:	4640      	mov	r0, r8
 800f35c:	4649      	mov	r1, r9
 800f35e:	f7f1 fbe5 	bl	8000b2c <__aeabi_dcmplt>
 800f362:	b110      	cbz	r0, 800f36a <_printf_float+0x86>
 800f364:	232d      	movs	r3, #45	@ 0x2d
 800f366:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f36a:	4a91      	ldr	r2, [pc, #580]	@ (800f5b0 <_printf_float+0x2cc>)
 800f36c:	4b91      	ldr	r3, [pc, #580]	@ (800f5b4 <_printf_float+0x2d0>)
 800f36e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f372:	bf8c      	ite	hi
 800f374:	4690      	movhi	r8, r2
 800f376:	4698      	movls	r8, r3
 800f378:	2303      	movs	r3, #3
 800f37a:	6123      	str	r3, [r4, #16]
 800f37c:	f02b 0304 	bic.w	r3, fp, #4
 800f380:	6023      	str	r3, [r4, #0]
 800f382:	f04f 0900 	mov.w	r9, #0
 800f386:	9700      	str	r7, [sp, #0]
 800f388:	4633      	mov	r3, r6
 800f38a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f38c:	4621      	mov	r1, r4
 800f38e:	4628      	mov	r0, r5
 800f390:	f000 f9d2 	bl	800f738 <_printf_common>
 800f394:	3001      	adds	r0, #1
 800f396:	f040 808d 	bne.w	800f4b4 <_printf_float+0x1d0>
 800f39a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f39e:	b00d      	add	sp, #52	@ 0x34
 800f3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3a4:	4642      	mov	r2, r8
 800f3a6:	464b      	mov	r3, r9
 800f3a8:	4640      	mov	r0, r8
 800f3aa:	4649      	mov	r1, r9
 800f3ac:	f7f1 fbe6 	bl	8000b7c <__aeabi_dcmpun>
 800f3b0:	b140      	cbz	r0, 800f3c4 <_printf_float+0xe0>
 800f3b2:	464b      	mov	r3, r9
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	bfbc      	itt	lt
 800f3b8:	232d      	movlt	r3, #45	@ 0x2d
 800f3ba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f3be:	4a7e      	ldr	r2, [pc, #504]	@ (800f5b8 <_printf_float+0x2d4>)
 800f3c0:	4b7e      	ldr	r3, [pc, #504]	@ (800f5bc <_printf_float+0x2d8>)
 800f3c2:	e7d4      	b.n	800f36e <_printf_float+0x8a>
 800f3c4:	6863      	ldr	r3, [r4, #4]
 800f3c6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f3ca:	9206      	str	r2, [sp, #24]
 800f3cc:	1c5a      	adds	r2, r3, #1
 800f3ce:	d13b      	bne.n	800f448 <_printf_float+0x164>
 800f3d0:	2306      	movs	r3, #6
 800f3d2:	6063      	str	r3, [r4, #4]
 800f3d4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f3d8:	2300      	movs	r3, #0
 800f3da:	6022      	str	r2, [r4, #0]
 800f3dc:	9303      	str	r3, [sp, #12]
 800f3de:	ab0a      	add	r3, sp, #40	@ 0x28
 800f3e0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f3e4:	ab09      	add	r3, sp, #36	@ 0x24
 800f3e6:	9300      	str	r3, [sp, #0]
 800f3e8:	6861      	ldr	r1, [r4, #4]
 800f3ea:	ec49 8b10 	vmov	d0, r8, r9
 800f3ee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f3f2:	4628      	mov	r0, r5
 800f3f4:	f7ff fed6 	bl	800f1a4 <__cvt>
 800f3f8:	9b06      	ldr	r3, [sp, #24]
 800f3fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f3fc:	2b47      	cmp	r3, #71	@ 0x47
 800f3fe:	4680      	mov	r8, r0
 800f400:	d129      	bne.n	800f456 <_printf_float+0x172>
 800f402:	1cc8      	adds	r0, r1, #3
 800f404:	db02      	blt.n	800f40c <_printf_float+0x128>
 800f406:	6863      	ldr	r3, [r4, #4]
 800f408:	4299      	cmp	r1, r3
 800f40a:	dd41      	ble.n	800f490 <_printf_float+0x1ac>
 800f40c:	f1aa 0a02 	sub.w	sl, sl, #2
 800f410:	fa5f fa8a 	uxtb.w	sl, sl
 800f414:	3901      	subs	r1, #1
 800f416:	4652      	mov	r2, sl
 800f418:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f41c:	9109      	str	r1, [sp, #36]	@ 0x24
 800f41e:	f7ff ff26 	bl	800f26e <__exponent>
 800f422:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f424:	1813      	adds	r3, r2, r0
 800f426:	2a01      	cmp	r2, #1
 800f428:	4681      	mov	r9, r0
 800f42a:	6123      	str	r3, [r4, #16]
 800f42c:	dc02      	bgt.n	800f434 <_printf_float+0x150>
 800f42e:	6822      	ldr	r2, [r4, #0]
 800f430:	07d2      	lsls	r2, r2, #31
 800f432:	d501      	bpl.n	800f438 <_printf_float+0x154>
 800f434:	3301      	adds	r3, #1
 800f436:	6123      	str	r3, [r4, #16]
 800f438:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d0a2      	beq.n	800f386 <_printf_float+0xa2>
 800f440:	232d      	movs	r3, #45	@ 0x2d
 800f442:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f446:	e79e      	b.n	800f386 <_printf_float+0xa2>
 800f448:	9a06      	ldr	r2, [sp, #24]
 800f44a:	2a47      	cmp	r2, #71	@ 0x47
 800f44c:	d1c2      	bne.n	800f3d4 <_printf_float+0xf0>
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d1c0      	bne.n	800f3d4 <_printf_float+0xf0>
 800f452:	2301      	movs	r3, #1
 800f454:	e7bd      	b.n	800f3d2 <_printf_float+0xee>
 800f456:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f45a:	d9db      	bls.n	800f414 <_printf_float+0x130>
 800f45c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f460:	d118      	bne.n	800f494 <_printf_float+0x1b0>
 800f462:	2900      	cmp	r1, #0
 800f464:	6863      	ldr	r3, [r4, #4]
 800f466:	dd0b      	ble.n	800f480 <_printf_float+0x19c>
 800f468:	6121      	str	r1, [r4, #16]
 800f46a:	b913      	cbnz	r3, 800f472 <_printf_float+0x18e>
 800f46c:	6822      	ldr	r2, [r4, #0]
 800f46e:	07d0      	lsls	r0, r2, #31
 800f470:	d502      	bpl.n	800f478 <_printf_float+0x194>
 800f472:	3301      	adds	r3, #1
 800f474:	440b      	add	r3, r1
 800f476:	6123      	str	r3, [r4, #16]
 800f478:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f47a:	f04f 0900 	mov.w	r9, #0
 800f47e:	e7db      	b.n	800f438 <_printf_float+0x154>
 800f480:	b913      	cbnz	r3, 800f488 <_printf_float+0x1a4>
 800f482:	6822      	ldr	r2, [r4, #0]
 800f484:	07d2      	lsls	r2, r2, #31
 800f486:	d501      	bpl.n	800f48c <_printf_float+0x1a8>
 800f488:	3302      	adds	r3, #2
 800f48a:	e7f4      	b.n	800f476 <_printf_float+0x192>
 800f48c:	2301      	movs	r3, #1
 800f48e:	e7f2      	b.n	800f476 <_printf_float+0x192>
 800f490:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f494:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f496:	4299      	cmp	r1, r3
 800f498:	db05      	blt.n	800f4a6 <_printf_float+0x1c2>
 800f49a:	6823      	ldr	r3, [r4, #0]
 800f49c:	6121      	str	r1, [r4, #16]
 800f49e:	07d8      	lsls	r0, r3, #31
 800f4a0:	d5ea      	bpl.n	800f478 <_printf_float+0x194>
 800f4a2:	1c4b      	adds	r3, r1, #1
 800f4a4:	e7e7      	b.n	800f476 <_printf_float+0x192>
 800f4a6:	2900      	cmp	r1, #0
 800f4a8:	bfd4      	ite	le
 800f4aa:	f1c1 0202 	rsble	r2, r1, #2
 800f4ae:	2201      	movgt	r2, #1
 800f4b0:	4413      	add	r3, r2
 800f4b2:	e7e0      	b.n	800f476 <_printf_float+0x192>
 800f4b4:	6823      	ldr	r3, [r4, #0]
 800f4b6:	055a      	lsls	r2, r3, #21
 800f4b8:	d407      	bmi.n	800f4ca <_printf_float+0x1e6>
 800f4ba:	6923      	ldr	r3, [r4, #16]
 800f4bc:	4642      	mov	r2, r8
 800f4be:	4631      	mov	r1, r6
 800f4c0:	4628      	mov	r0, r5
 800f4c2:	47b8      	blx	r7
 800f4c4:	3001      	adds	r0, #1
 800f4c6:	d12b      	bne.n	800f520 <_printf_float+0x23c>
 800f4c8:	e767      	b.n	800f39a <_printf_float+0xb6>
 800f4ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f4ce:	f240 80dd 	bls.w	800f68c <_printf_float+0x3a8>
 800f4d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	2300      	movs	r3, #0
 800f4da:	f7f1 fb1d 	bl	8000b18 <__aeabi_dcmpeq>
 800f4de:	2800      	cmp	r0, #0
 800f4e0:	d033      	beq.n	800f54a <_printf_float+0x266>
 800f4e2:	4a37      	ldr	r2, [pc, #220]	@ (800f5c0 <_printf_float+0x2dc>)
 800f4e4:	2301      	movs	r3, #1
 800f4e6:	4631      	mov	r1, r6
 800f4e8:	4628      	mov	r0, r5
 800f4ea:	47b8      	blx	r7
 800f4ec:	3001      	adds	r0, #1
 800f4ee:	f43f af54 	beq.w	800f39a <_printf_float+0xb6>
 800f4f2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f4f6:	4543      	cmp	r3, r8
 800f4f8:	db02      	blt.n	800f500 <_printf_float+0x21c>
 800f4fa:	6823      	ldr	r3, [r4, #0]
 800f4fc:	07d8      	lsls	r0, r3, #31
 800f4fe:	d50f      	bpl.n	800f520 <_printf_float+0x23c>
 800f500:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f504:	4631      	mov	r1, r6
 800f506:	4628      	mov	r0, r5
 800f508:	47b8      	blx	r7
 800f50a:	3001      	adds	r0, #1
 800f50c:	f43f af45 	beq.w	800f39a <_printf_float+0xb6>
 800f510:	f04f 0900 	mov.w	r9, #0
 800f514:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800f518:	f104 0a1a 	add.w	sl, r4, #26
 800f51c:	45c8      	cmp	r8, r9
 800f51e:	dc09      	bgt.n	800f534 <_printf_float+0x250>
 800f520:	6823      	ldr	r3, [r4, #0]
 800f522:	079b      	lsls	r3, r3, #30
 800f524:	f100 8103 	bmi.w	800f72e <_printf_float+0x44a>
 800f528:	68e0      	ldr	r0, [r4, #12]
 800f52a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f52c:	4298      	cmp	r0, r3
 800f52e:	bfb8      	it	lt
 800f530:	4618      	movlt	r0, r3
 800f532:	e734      	b.n	800f39e <_printf_float+0xba>
 800f534:	2301      	movs	r3, #1
 800f536:	4652      	mov	r2, sl
 800f538:	4631      	mov	r1, r6
 800f53a:	4628      	mov	r0, r5
 800f53c:	47b8      	blx	r7
 800f53e:	3001      	adds	r0, #1
 800f540:	f43f af2b 	beq.w	800f39a <_printf_float+0xb6>
 800f544:	f109 0901 	add.w	r9, r9, #1
 800f548:	e7e8      	b.n	800f51c <_printf_float+0x238>
 800f54a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	dc39      	bgt.n	800f5c4 <_printf_float+0x2e0>
 800f550:	4a1b      	ldr	r2, [pc, #108]	@ (800f5c0 <_printf_float+0x2dc>)
 800f552:	2301      	movs	r3, #1
 800f554:	4631      	mov	r1, r6
 800f556:	4628      	mov	r0, r5
 800f558:	47b8      	blx	r7
 800f55a:	3001      	adds	r0, #1
 800f55c:	f43f af1d 	beq.w	800f39a <_printf_float+0xb6>
 800f560:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f564:	ea59 0303 	orrs.w	r3, r9, r3
 800f568:	d102      	bne.n	800f570 <_printf_float+0x28c>
 800f56a:	6823      	ldr	r3, [r4, #0]
 800f56c:	07d9      	lsls	r1, r3, #31
 800f56e:	d5d7      	bpl.n	800f520 <_printf_float+0x23c>
 800f570:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f574:	4631      	mov	r1, r6
 800f576:	4628      	mov	r0, r5
 800f578:	47b8      	blx	r7
 800f57a:	3001      	adds	r0, #1
 800f57c:	f43f af0d 	beq.w	800f39a <_printf_float+0xb6>
 800f580:	f04f 0a00 	mov.w	sl, #0
 800f584:	f104 0b1a 	add.w	fp, r4, #26
 800f588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f58a:	425b      	negs	r3, r3
 800f58c:	4553      	cmp	r3, sl
 800f58e:	dc01      	bgt.n	800f594 <_printf_float+0x2b0>
 800f590:	464b      	mov	r3, r9
 800f592:	e793      	b.n	800f4bc <_printf_float+0x1d8>
 800f594:	2301      	movs	r3, #1
 800f596:	465a      	mov	r2, fp
 800f598:	4631      	mov	r1, r6
 800f59a:	4628      	mov	r0, r5
 800f59c:	47b8      	blx	r7
 800f59e:	3001      	adds	r0, #1
 800f5a0:	f43f aefb 	beq.w	800f39a <_printf_float+0xb6>
 800f5a4:	f10a 0a01 	add.w	sl, sl, #1
 800f5a8:	e7ee      	b.n	800f588 <_printf_float+0x2a4>
 800f5aa:	bf00      	nop
 800f5ac:	7fefffff 	.word	0x7fefffff
 800f5b0:	08011de4 	.word	0x08011de4
 800f5b4:	08011de0 	.word	0x08011de0
 800f5b8:	08011dec 	.word	0x08011dec
 800f5bc:	08011de8 	.word	0x08011de8
 800f5c0:	08011df0 	.word	0x08011df0
 800f5c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f5c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f5ca:	4553      	cmp	r3, sl
 800f5cc:	bfa8      	it	ge
 800f5ce:	4653      	movge	r3, sl
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	4699      	mov	r9, r3
 800f5d4:	dc36      	bgt.n	800f644 <_printf_float+0x360>
 800f5d6:	f04f 0b00 	mov.w	fp, #0
 800f5da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f5de:	f104 021a 	add.w	r2, r4, #26
 800f5e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f5e4:	9306      	str	r3, [sp, #24]
 800f5e6:	eba3 0309 	sub.w	r3, r3, r9
 800f5ea:	455b      	cmp	r3, fp
 800f5ec:	dc31      	bgt.n	800f652 <_printf_float+0x36e>
 800f5ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5f0:	459a      	cmp	sl, r3
 800f5f2:	dc3a      	bgt.n	800f66a <_printf_float+0x386>
 800f5f4:	6823      	ldr	r3, [r4, #0]
 800f5f6:	07da      	lsls	r2, r3, #31
 800f5f8:	d437      	bmi.n	800f66a <_printf_float+0x386>
 800f5fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5fc:	ebaa 0903 	sub.w	r9, sl, r3
 800f600:	9b06      	ldr	r3, [sp, #24]
 800f602:	ebaa 0303 	sub.w	r3, sl, r3
 800f606:	4599      	cmp	r9, r3
 800f608:	bfa8      	it	ge
 800f60a:	4699      	movge	r9, r3
 800f60c:	f1b9 0f00 	cmp.w	r9, #0
 800f610:	dc33      	bgt.n	800f67a <_printf_float+0x396>
 800f612:	f04f 0800 	mov.w	r8, #0
 800f616:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f61a:	f104 0b1a 	add.w	fp, r4, #26
 800f61e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f620:	ebaa 0303 	sub.w	r3, sl, r3
 800f624:	eba3 0309 	sub.w	r3, r3, r9
 800f628:	4543      	cmp	r3, r8
 800f62a:	f77f af79 	ble.w	800f520 <_printf_float+0x23c>
 800f62e:	2301      	movs	r3, #1
 800f630:	465a      	mov	r2, fp
 800f632:	4631      	mov	r1, r6
 800f634:	4628      	mov	r0, r5
 800f636:	47b8      	blx	r7
 800f638:	3001      	adds	r0, #1
 800f63a:	f43f aeae 	beq.w	800f39a <_printf_float+0xb6>
 800f63e:	f108 0801 	add.w	r8, r8, #1
 800f642:	e7ec      	b.n	800f61e <_printf_float+0x33a>
 800f644:	4642      	mov	r2, r8
 800f646:	4631      	mov	r1, r6
 800f648:	4628      	mov	r0, r5
 800f64a:	47b8      	blx	r7
 800f64c:	3001      	adds	r0, #1
 800f64e:	d1c2      	bne.n	800f5d6 <_printf_float+0x2f2>
 800f650:	e6a3      	b.n	800f39a <_printf_float+0xb6>
 800f652:	2301      	movs	r3, #1
 800f654:	4631      	mov	r1, r6
 800f656:	4628      	mov	r0, r5
 800f658:	9206      	str	r2, [sp, #24]
 800f65a:	47b8      	blx	r7
 800f65c:	3001      	adds	r0, #1
 800f65e:	f43f ae9c 	beq.w	800f39a <_printf_float+0xb6>
 800f662:	9a06      	ldr	r2, [sp, #24]
 800f664:	f10b 0b01 	add.w	fp, fp, #1
 800f668:	e7bb      	b.n	800f5e2 <_printf_float+0x2fe>
 800f66a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f66e:	4631      	mov	r1, r6
 800f670:	4628      	mov	r0, r5
 800f672:	47b8      	blx	r7
 800f674:	3001      	adds	r0, #1
 800f676:	d1c0      	bne.n	800f5fa <_printf_float+0x316>
 800f678:	e68f      	b.n	800f39a <_printf_float+0xb6>
 800f67a:	9a06      	ldr	r2, [sp, #24]
 800f67c:	464b      	mov	r3, r9
 800f67e:	4442      	add	r2, r8
 800f680:	4631      	mov	r1, r6
 800f682:	4628      	mov	r0, r5
 800f684:	47b8      	blx	r7
 800f686:	3001      	adds	r0, #1
 800f688:	d1c3      	bne.n	800f612 <_printf_float+0x32e>
 800f68a:	e686      	b.n	800f39a <_printf_float+0xb6>
 800f68c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f690:	f1ba 0f01 	cmp.w	sl, #1
 800f694:	dc01      	bgt.n	800f69a <_printf_float+0x3b6>
 800f696:	07db      	lsls	r3, r3, #31
 800f698:	d536      	bpl.n	800f708 <_printf_float+0x424>
 800f69a:	2301      	movs	r3, #1
 800f69c:	4642      	mov	r2, r8
 800f69e:	4631      	mov	r1, r6
 800f6a0:	4628      	mov	r0, r5
 800f6a2:	47b8      	blx	r7
 800f6a4:	3001      	adds	r0, #1
 800f6a6:	f43f ae78 	beq.w	800f39a <_printf_float+0xb6>
 800f6aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f6ae:	4631      	mov	r1, r6
 800f6b0:	4628      	mov	r0, r5
 800f6b2:	47b8      	blx	r7
 800f6b4:	3001      	adds	r0, #1
 800f6b6:	f43f ae70 	beq.w	800f39a <_printf_float+0xb6>
 800f6ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f6be:	2200      	movs	r2, #0
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800f6c6:	f7f1 fa27 	bl	8000b18 <__aeabi_dcmpeq>
 800f6ca:	b9c0      	cbnz	r0, 800f6fe <_printf_float+0x41a>
 800f6cc:	4653      	mov	r3, sl
 800f6ce:	f108 0201 	add.w	r2, r8, #1
 800f6d2:	4631      	mov	r1, r6
 800f6d4:	4628      	mov	r0, r5
 800f6d6:	47b8      	blx	r7
 800f6d8:	3001      	adds	r0, #1
 800f6da:	d10c      	bne.n	800f6f6 <_printf_float+0x412>
 800f6dc:	e65d      	b.n	800f39a <_printf_float+0xb6>
 800f6de:	2301      	movs	r3, #1
 800f6e0:	465a      	mov	r2, fp
 800f6e2:	4631      	mov	r1, r6
 800f6e4:	4628      	mov	r0, r5
 800f6e6:	47b8      	blx	r7
 800f6e8:	3001      	adds	r0, #1
 800f6ea:	f43f ae56 	beq.w	800f39a <_printf_float+0xb6>
 800f6ee:	f108 0801 	add.w	r8, r8, #1
 800f6f2:	45d0      	cmp	r8, sl
 800f6f4:	dbf3      	blt.n	800f6de <_printf_float+0x3fa>
 800f6f6:	464b      	mov	r3, r9
 800f6f8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f6fc:	e6df      	b.n	800f4be <_printf_float+0x1da>
 800f6fe:	f04f 0800 	mov.w	r8, #0
 800f702:	f104 0b1a 	add.w	fp, r4, #26
 800f706:	e7f4      	b.n	800f6f2 <_printf_float+0x40e>
 800f708:	2301      	movs	r3, #1
 800f70a:	4642      	mov	r2, r8
 800f70c:	e7e1      	b.n	800f6d2 <_printf_float+0x3ee>
 800f70e:	2301      	movs	r3, #1
 800f710:	464a      	mov	r2, r9
 800f712:	4631      	mov	r1, r6
 800f714:	4628      	mov	r0, r5
 800f716:	47b8      	blx	r7
 800f718:	3001      	adds	r0, #1
 800f71a:	f43f ae3e 	beq.w	800f39a <_printf_float+0xb6>
 800f71e:	f108 0801 	add.w	r8, r8, #1
 800f722:	68e3      	ldr	r3, [r4, #12]
 800f724:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f726:	1a5b      	subs	r3, r3, r1
 800f728:	4543      	cmp	r3, r8
 800f72a:	dcf0      	bgt.n	800f70e <_printf_float+0x42a>
 800f72c:	e6fc      	b.n	800f528 <_printf_float+0x244>
 800f72e:	f04f 0800 	mov.w	r8, #0
 800f732:	f104 0919 	add.w	r9, r4, #25
 800f736:	e7f4      	b.n	800f722 <_printf_float+0x43e>

0800f738 <_printf_common>:
 800f738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f73c:	4616      	mov	r6, r2
 800f73e:	4698      	mov	r8, r3
 800f740:	688a      	ldr	r2, [r1, #8]
 800f742:	690b      	ldr	r3, [r1, #16]
 800f744:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f748:	4293      	cmp	r3, r2
 800f74a:	bfb8      	it	lt
 800f74c:	4613      	movlt	r3, r2
 800f74e:	6033      	str	r3, [r6, #0]
 800f750:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f754:	4607      	mov	r7, r0
 800f756:	460c      	mov	r4, r1
 800f758:	b10a      	cbz	r2, 800f75e <_printf_common+0x26>
 800f75a:	3301      	adds	r3, #1
 800f75c:	6033      	str	r3, [r6, #0]
 800f75e:	6823      	ldr	r3, [r4, #0]
 800f760:	0699      	lsls	r1, r3, #26
 800f762:	bf42      	ittt	mi
 800f764:	6833      	ldrmi	r3, [r6, #0]
 800f766:	3302      	addmi	r3, #2
 800f768:	6033      	strmi	r3, [r6, #0]
 800f76a:	6825      	ldr	r5, [r4, #0]
 800f76c:	f015 0506 	ands.w	r5, r5, #6
 800f770:	d106      	bne.n	800f780 <_printf_common+0x48>
 800f772:	f104 0a19 	add.w	sl, r4, #25
 800f776:	68e3      	ldr	r3, [r4, #12]
 800f778:	6832      	ldr	r2, [r6, #0]
 800f77a:	1a9b      	subs	r3, r3, r2
 800f77c:	42ab      	cmp	r3, r5
 800f77e:	dc26      	bgt.n	800f7ce <_printf_common+0x96>
 800f780:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f784:	6822      	ldr	r2, [r4, #0]
 800f786:	3b00      	subs	r3, #0
 800f788:	bf18      	it	ne
 800f78a:	2301      	movne	r3, #1
 800f78c:	0692      	lsls	r2, r2, #26
 800f78e:	d42b      	bmi.n	800f7e8 <_printf_common+0xb0>
 800f790:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f794:	4641      	mov	r1, r8
 800f796:	4638      	mov	r0, r7
 800f798:	47c8      	blx	r9
 800f79a:	3001      	adds	r0, #1
 800f79c:	d01e      	beq.n	800f7dc <_printf_common+0xa4>
 800f79e:	6823      	ldr	r3, [r4, #0]
 800f7a0:	6922      	ldr	r2, [r4, #16]
 800f7a2:	f003 0306 	and.w	r3, r3, #6
 800f7a6:	2b04      	cmp	r3, #4
 800f7a8:	bf02      	ittt	eq
 800f7aa:	68e5      	ldreq	r5, [r4, #12]
 800f7ac:	6833      	ldreq	r3, [r6, #0]
 800f7ae:	1aed      	subeq	r5, r5, r3
 800f7b0:	68a3      	ldr	r3, [r4, #8]
 800f7b2:	bf0c      	ite	eq
 800f7b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f7b8:	2500      	movne	r5, #0
 800f7ba:	4293      	cmp	r3, r2
 800f7bc:	bfc4      	itt	gt
 800f7be:	1a9b      	subgt	r3, r3, r2
 800f7c0:	18ed      	addgt	r5, r5, r3
 800f7c2:	2600      	movs	r6, #0
 800f7c4:	341a      	adds	r4, #26
 800f7c6:	42b5      	cmp	r5, r6
 800f7c8:	d11a      	bne.n	800f800 <_printf_common+0xc8>
 800f7ca:	2000      	movs	r0, #0
 800f7cc:	e008      	b.n	800f7e0 <_printf_common+0xa8>
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	4652      	mov	r2, sl
 800f7d2:	4641      	mov	r1, r8
 800f7d4:	4638      	mov	r0, r7
 800f7d6:	47c8      	blx	r9
 800f7d8:	3001      	adds	r0, #1
 800f7da:	d103      	bne.n	800f7e4 <_printf_common+0xac>
 800f7dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f7e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7e4:	3501      	adds	r5, #1
 800f7e6:	e7c6      	b.n	800f776 <_printf_common+0x3e>
 800f7e8:	18e1      	adds	r1, r4, r3
 800f7ea:	1c5a      	adds	r2, r3, #1
 800f7ec:	2030      	movs	r0, #48	@ 0x30
 800f7ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f7f2:	4422      	add	r2, r4
 800f7f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f7f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f7fc:	3302      	adds	r3, #2
 800f7fe:	e7c7      	b.n	800f790 <_printf_common+0x58>
 800f800:	2301      	movs	r3, #1
 800f802:	4622      	mov	r2, r4
 800f804:	4641      	mov	r1, r8
 800f806:	4638      	mov	r0, r7
 800f808:	47c8      	blx	r9
 800f80a:	3001      	adds	r0, #1
 800f80c:	d0e6      	beq.n	800f7dc <_printf_common+0xa4>
 800f80e:	3601      	adds	r6, #1
 800f810:	e7d9      	b.n	800f7c6 <_printf_common+0x8e>
	...

0800f814 <_printf_i>:
 800f814:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f818:	7e0f      	ldrb	r7, [r1, #24]
 800f81a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f81c:	2f78      	cmp	r7, #120	@ 0x78
 800f81e:	4691      	mov	r9, r2
 800f820:	4680      	mov	r8, r0
 800f822:	460c      	mov	r4, r1
 800f824:	469a      	mov	sl, r3
 800f826:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f82a:	d807      	bhi.n	800f83c <_printf_i+0x28>
 800f82c:	2f62      	cmp	r7, #98	@ 0x62
 800f82e:	d80a      	bhi.n	800f846 <_printf_i+0x32>
 800f830:	2f00      	cmp	r7, #0
 800f832:	f000 80d1 	beq.w	800f9d8 <_printf_i+0x1c4>
 800f836:	2f58      	cmp	r7, #88	@ 0x58
 800f838:	f000 80b8 	beq.w	800f9ac <_printf_i+0x198>
 800f83c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f840:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f844:	e03a      	b.n	800f8bc <_printf_i+0xa8>
 800f846:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f84a:	2b15      	cmp	r3, #21
 800f84c:	d8f6      	bhi.n	800f83c <_printf_i+0x28>
 800f84e:	a101      	add	r1, pc, #4	@ (adr r1, 800f854 <_printf_i+0x40>)
 800f850:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f854:	0800f8ad 	.word	0x0800f8ad
 800f858:	0800f8c1 	.word	0x0800f8c1
 800f85c:	0800f83d 	.word	0x0800f83d
 800f860:	0800f83d 	.word	0x0800f83d
 800f864:	0800f83d 	.word	0x0800f83d
 800f868:	0800f83d 	.word	0x0800f83d
 800f86c:	0800f8c1 	.word	0x0800f8c1
 800f870:	0800f83d 	.word	0x0800f83d
 800f874:	0800f83d 	.word	0x0800f83d
 800f878:	0800f83d 	.word	0x0800f83d
 800f87c:	0800f83d 	.word	0x0800f83d
 800f880:	0800f9bf 	.word	0x0800f9bf
 800f884:	0800f8eb 	.word	0x0800f8eb
 800f888:	0800f979 	.word	0x0800f979
 800f88c:	0800f83d 	.word	0x0800f83d
 800f890:	0800f83d 	.word	0x0800f83d
 800f894:	0800f9e1 	.word	0x0800f9e1
 800f898:	0800f83d 	.word	0x0800f83d
 800f89c:	0800f8eb 	.word	0x0800f8eb
 800f8a0:	0800f83d 	.word	0x0800f83d
 800f8a4:	0800f83d 	.word	0x0800f83d
 800f8a8:	0800f981 	.word	0x0800f981
 800f8ac:	6833      	ldr	r3, [r6, #0]
 800f8ae:	1d1a      	adds	r2, r3, #4
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	6032      	str	r2, [r6, #0]
 800f8b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f8b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f8bc:	2301      	movs	r3, #1
 800f8be:	e09c      	b.n	800f9fa <_printf_i+0x1e6>
 800f8c0:	6833      	ldr	r3, [r6, #0]
 800f8c2:	6820      	ldr	r0, [r4, #0]
 800f8c4:	1d19      	adds	r1, r3, #4
 800f8c6:	6031      	str	r1, [r6, #0]
 800f8c8:	0606      	lsls	r6, r0, #24
 800f8ca:	d501      	bpl.n	800f8d0 <_printf_i+0xbc>
 800f8cc:	681d      	ldr	r5, [r3, #0]
 800f8ce:	e003      	b.n	800f8d8 <_printf_i+0xc4>
 800f8d0:	0645      	lsls	r5, r0, #25
 800f8d2:	d5fb      	bpl.n	800f8cc <_printf_i+0xb8>
 800f8d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f8d8:	2d00      	cmp	r5, #0
 800f8da:	da03      	bge.n	800f8e4 <_printf_i+0xd0>
 800f8dc:	232d      	movs	r3, #45	@ 0x2d
 800f8de:	426d      	negs	r5, r5
 800f8e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f8e4:	4858      	ldr	r0, [pc, #352]	@ (800fa48 <_printf_i+0x234>)
 800f8e6:	230a      	movs	r3, #10
 800f8e8:	e011      	b.n	800f90e <_printf_i+0xfa>
 800f8ea:	6821      	ldr	r1, [r4, #0]
 800f8ec:	6833      	ldr	r3, [r6, #0]
 800f8ee:	0608      	lsls	r0, r1, #24
 800f8f0:	f853 5b04 	ldr.w	r5, [r3], #4
 800f8f4:	d402      	bmi.n	800f8fc <_printf_i+0xe8>
 800f8f6:	0649      	lsls	r1, r1, #25
 800f8f8:	bf48      	it	mi
 800f8fa:	b2ad      	uxthmi	r5, r5
 800f8fc:	2f6f      	cmp	r7, #111	@ 0x6f
 800f8fe:	4852      	ldr	r0, [pc, #328]	@ (800fa48 <_printf_i+0x234>)
 800f900:	6033      	str	r3, [r6, #0]
 800f902:	bf14      	ite	ne
 800f904:	230a      	movne	r3, #10
 800f906:	2308      	moveq	r3, #8
 800f908:	2100      	movs	r1, #0
 800f90a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f90e:	6866      	ldr	r6, [r4, #4]
 800f910:	60a6      	str	r6, [r4, #8]
 800f912:	2e00      	cmp	r6, #0
 800f914:	db05      	blt.n	800f922 <_printf_i+0x10e>
 800f916:	6821      	ldr	r1, [r4, #0]
 800f918:	432e      	orrs	r6, r5
 800f91a:	f021 0104 	bic.w	r1, r1, #4
 800f91e:	6021      	str	r1, [r4, #0]
 800f920:	d04b      	beq.n	800f9ba <_printf_i+0x1a6>
 800f922:	4616      	mov	r6, r2
 800f924:	fbb5 f1f3 	udiv	r1, r5, r3
 800f928:	fb03 5711 	mls	r7, r3, r1, r5
 800f92c:	5dc7      	ldrb	r7, [r0, r7]
 800f92e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f932:	462f      	mov	r7, r5
 800f934:	42bb      	cmp	r3, r7
 800f936:	460d      	mov	r5, r1
 800f938:	d9f4      	bls.n	800f924 <_printf_i+0x110>
 800f93a:	2b08      	cmp	r3, #8
 800f93c:	d10b      	bne.n	800f956 <_printf_i+0x142>
 800f93e:	6823      	ldr	r3, [r4, #0]
 800f940:	07df      	lsls	r7, r3, #31
 800f942:	d508      	bpl.n	800f956 <_printf_i+0x142>
 800f944:	6923      	ldr	r3, [r4, #16]
 800f946:	6861      	ldr	r1, [r4, #4]
 800f948:	4299      	cmp	r1, r3
 800f94a:	bfde      	ittt	le
 800f94c:	2330      	movle	r3, #48	@ 0x30
 800f94e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f952:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800f956:	1b92      	subs	r2, r2, r6
 800f958:	6122      	str	r2, [r4, #16]
 800f95a:	f8cd a000 	str.w	sl, [sp]
 800f95e:	464b      	mov	r3, r9
 800f960:	aa03      	add	r2, sp, #12
 800f962:	4621      	mov	r1, r4
 800f964:	4640      	mov	r0, r8
 800f966:	f7ff fee7 	bl	800f738 <_printf_common>
 800f96a:	3001      	adds	r0, #1
 800f96c:	d14a      	bne.n	800fa04 <_printf_i+0x1f0>
 800f96e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f972:	b004      	add	sp, #16
 800f974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f978:	6823      	ldr	r3, [r4, #0]
 800f97a:	f043 0320 	orr.w	r3, r3, #32
 800f97e:	6023      	str	r3, [r4, #0]
 800f980:	4832      	ldr	r0, [pc, #200]	@ (800fa4c <_printf_i+0x238>)
 800f982:	2778      	movs	r7, #120	@ 0x78
 800f984:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f988:	6823      	ldr	r3, [r4, #0]
 800f98a:	6831      	ldr	r1, [r6, #0]
 800f98c:	061f      	lsls	r7, r3, #24
 800f98e:	f851 5b04 	ldr.w	r5, [r1], #4
 800f992:	d402      	bmi.n	800f99a <_printf_i+0x186>
 800f994:	065f      	lsls	r7, r3, #25
 800f996:	bf48      	it	mi
 800f998:	b2ad      	uxthmi	r5, r5
 800f99a:	6031      	str	r1, [r6, #0]
 800f99c:	07d9      	lsls	r1, r3, #31
 800f99e:	bf44      	itt	mi
 800f9a0:	f043 0320 	orrmi.w	r3, r3, #32
 800f9a4:	6023      	strmi	r3, [r4, #0]
 800f9a6:	b11d      	cbz	r5, 800f9b0 <_printf_i+0x19c>
 800f9a8:	2310      	movs	r3, #16
 800f9aa:	e7ad      	b.n	800f908 <_printf_i+0xf4>
 800f9ac:	4826      	ldr	r0, [pc, #152]	@ (800fa48 <_printf_i+0x234>)
 800f9ae:	e7e9      	b.n	800f984 <_printf_i+0x170>
 800f9b0:	6823      	ldr	r3, [r4, #0]
 800f9b2:	f023 0320 	bic.w	r3, r3, #32
 800f9b6:	6023      	str	r3, [r4, #0]
 800f9b8:	e7f6      	b.n	800f9a8 <_printf_i+0x194>
 800f9ba:	4616      	mov	r6, r2
 800f9bc:	e7bd      	b.n	800f93a <_printf_i+0x126>
 800f9be:	6833      	ldr	r3, [r6, #0]
 800f9c0:	6825      	ldr	r5, [r4, #0]
 800f9c2:	6961      	ldr	r1, [r4, #20]
 800f9c4:	1d18      	adds	r0, r3, #4
 800f9c6:	6030      	str	r0, [r6, #0]
 800f9c8:	062e      	lsls	r6, r5, #24
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	d501      	bpl.n	800f9d2 <_printf_i+0x1be>
 800f9ce:	6019      	str	r1, [r3, #0]
 800f9d0:	e002      	b.n	800f9d8 <_printf_i+0x1c4>
 800f9d2:	0668      	lsls	r0, r5, #25
 800f9d4:	d5fb      	bpl.n	800f9ce <_printf_i+0x1ba>
 800f9d6:	8019      	strh	r1, [r3, #0]
 800f9d8:	2300      	movs	r3, #0
 800f9da:	6123      	str	r3, [r4, #16]
 800f9dc:	4616      	mov	r6, r2
 800f9de:	e7bc      	b.n	800f95a <_printf_i+0x146>
 800f9e0:	6833      	ldr	r3, [r6, #0]
 800f9e2:	1d1a      	adds	r2, r3, #4
 800f9e4:	6032      	str	r2, [r6, #0]
 800f9e6:	681e      	ldr	r6, [r3, #0]
 800f9e8:	6862      	ldr	r2, [r4, #4]
 800f9ea:	2100      	movs	r1, #0
 800f9ec:	4630      	mov	r0, r6
 800f9ee:	f7f0 fc17 	bl	8000220 <memchr>
 800f9f2:	b108      	cbz	r0, 800f9f8 <_printf_i+0x1e4>
 800f9f4:	1b80      	subs	r0, r0, r6
 800f9f6:	6060      	str	r0, [r4, #4]
 800f9f8:	6863      	ldr	r3, [r4, #4]
 800f9fa:	6123      	str	r3, [r4, #16]
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fa02:	e7aa      	b.n	800f95a <_printf_i+0x146>
 800fa04:	6923      	ldr	r3, [r4, #16]
 800fa06:	4632      	mov	r2, r6
 800fa08:	4649      	mov	r1, r9
 800fa0a:	4640      	mov	r0, r8
 800fa0c:	47d0      	blx	sl
 800fa0e:	3001      	adds	r0, #1
 800fa10:	d0ad      	beq.n	800f96e <_printf_i+0x15a>
 800fa12:	6823      	ldr	r3, [r4, #0]
 800fa14:	079b      	lsls	r3, r3, #30
 800fa16:	d413      	bmi.n	800fa40 <_printf_i+0x22c>
 800fa18:	68e0      	ldr	r0, [r4, #12]
 800fa1a:	9b03      	ldr	r3, [sp, #12]
 800fa1c:	4298      	cmp	r0, r3
 800fa1e:	bfb8      	it	lt
 800fa20:	4618      	movlt	r0, r3
 800fa22:	e7a6      	b.n	800f972 <_printf_i+0x15e>
 800fa24:	2301      	movs	r3, #1
 800fa26:	4632      	mov	r2, r6
 800fa28:	4649      	mov	r1, r9
 800fa2a:	4640      	mov	r0, r8
 800fa2c:	47d0      	blx	sl
 800fa2e:	3001      	adds	r0, #1
 800fa30:	d09d      	beq.n	800f96e <_printf_i+0x15a>
 800fa32:	3501      	adds	r5, #1
 800fa34:	68e3      	ldr	r3, [r4, #12]
 800fa36:	9903      	ldr	r1, [sp, #12]
 800fa38:	1a5b      	subs	r3, r3, r1
 800fa3a:	42ab      	cmp	r3, r5
 800fa3c:	dcf2      	bgt.n	800fa24 <_printf_i+0x210>
 800fa3e:	e7eb      	b.n	800fa18 <_printf_i+0x204>
 800fa40:	2500      	movs	r5, #0
 800fa42:	f104 0619 	add.w	r6, r4, #25
 800fa46:	e7f5      	b.n	800fa34 <_printf_i+0x220>
 800fa48:	08011df2 	.word	0x08011df2
 800fa4c:	08011e03 	.word	0x08011e03

0800fa50 <std>:
 800fa50:	2300      	movs	r3, #0
 800fa52:	b510      	push	{r4, lr}
 800fa54:	4604      	mov	r4, r0
 800fa56:	e9c0 3300 	strd	r3, r3, [r0]
 800fa5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fa5e:	6083      	str	r3, [r0, #8]
 800fa60:	8181      	strh	r1, [r0, #12]
 800fa62:	6643      	str	r3, [r0, #100]	@ 0x64
 800fa64:	81c2      	strh	r2, [r0, #14]
 800fa66:	6183      	str	r3, [r0, #24]
 800fa68:	4619      	mov	r1, r3
 800fa6a:	2208      	movs	r2, #8
 800fa6c:	305c      	adds	r0, #92	@ 0x5c
 800fa6e:	f000 f92a 	bl	800fcc6 <memset>
 800fa72:	4b0d      	ldr	r3, [pc, #52]	@ (800faa8 <std+0x58>)
 800fa74:	6263      	str	r3, [r4, #36]	@ 0x24
 800fa76:	4b0d      	ldr	r3, [pc, #52]	@ (800faac <std+0x5c>)
 800fa78:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fa7a:	4b0d      	ldr	r3, [pc, #52]	@ (800fab0 <std+0x60>)
 800fa7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fa7e:	4b0d      	ldr	r3, [pc, #52]	@ (800fab4 <std+0x64>)
 800fa80:	6323      	str	r3, [r4, #48]	@ 0x30
 800fa82:	4b0d      	ldr	r3, [pc, #52]	@ (800fab8 <std+0x68>)
 800fa84:	6224      	str	r4, [r4, #32]
 800fa86:	429c      	cmp	r4, r3
 800fa88:	d006      	beq.n	800fa98 <std+0x48>
 800fa8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fa8e:	4294      	cmp	r4, r2
 800fa90:	d002      	beq.n	800fa98 <std+0x48>
 800fa92:	33d0      	adds	r3, #208	@ 0xd0
 800fa94:	429c      	cmp	r4, r3
 800fa96:	d105      	bne.n	800faa4 <std+0x54>
 800fa98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fa9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800faa0:	f000 b99e 	b.w	800fde0 <__retarget_lock_init_recursive>
 800faa4:	bd10      	pop	{r4, pc}
 800faa6:	bf00      	nop
 800faa8:	0800fc41 	.word	0x0800fc41
 800faac:	0800fc63 	.word	0x0800fc63
 800fab0:	0800fc9b 	.word	0x0800fc9b
 800fab4:	0800fcbf 	.word	0x0800fcbf
 800fab8:	2000254c 	.word	0x2000254c

0800fabc <stdio_exit_handler>:
 800fabc:	4a02      	ldr	r2, [pc, #8]	@ (800fac8 <stdio_exit_handler+0xc>)
 800fabe:	4903      	ldr	r1, [pc, #12]	@ (800facc <stdio_exit_handler+0x10>)
 800fac0:	4803      	ldr	r0, [pc, #12]	@ (800fad0 <stdio_exit_handler+0x14>)
 800fac2:	f000 b869 	b.w	800fb98 <_fwalk_sglue>
 800fac6:	bf00      	nop
 800fac8:	2000010c 	.word	0x2000010c
 800facc:	080115d9 	.word	0x080115d9
 800fad0:	2000011c 	.word	0x2000011c

0800fad4 <cleanup_stdio>:
 800fad4:	6841      	ldr	r1, [r0, #4]
 800fad6:	4b0c      	ldr	r3, [pc, #48]	@ (800fb08 <cleanup_stdio+0x34>)
 800fad8:	4299      	cmp	r1, r3
 800fada:	b510      	push	{r4, lr}
 800fadc:	4604      	mov	r4, r0
 800fade:	d001      	beq.n	800fae4 <cleanup_stdio+0x10>
 800fae0:	f001 fd7a 	bl	80115d8 <_fflush_r>
 800fae4:	68a1      	ldr	r1, [r4, #8]
 800fae6:	4b09      	ldr	r3, [pc, #36]	@ (800fb0c <cleanup_stdio+0x38>)
 800fae8:	4299      	cmp	r1, r3
 800faea:	d002      	beq.n	800faf2 <cleanup_stdio+0x1e>
 800faec:	4620      	mov	r0, r4
 800faee:	f001 fd73 	bl	80115d8 <_fflush_r>
 800faf2:	68e1      	ldr	r1, [r4, #12]
 800faf4:	4b06      	ldr	r3, [pc, #24]	@ (800fb10 <cleanup_stdio+0x3c>)
 800faf6:	4299      	cmp	r1, r3
 800faf8:	d004      	beq.n	800fb04 <cleanup_stdio+0x30>
 800fafa:	4620      	mov	r0, r4
 800fafc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb00:	f001 bd6a 	b.w	80115d8 <_fflush_r>
 800fb04:	bd10      	pop	{r4, pc}
 800fb06:	bf00      	nop
 800fb08:	2000254c 	.word	0x2000254c
 800fb0c:	200025b4 	.word	0x200025b4
 800fb10:	2000261c 	.word	0x2000261c

0800fb14 <global_stdio_init.part.0>:
 800fb14:	b510      	push	{r4, lr}
 800fb16:	4b0b      	ldr	r3, [pc, #44]	@ (800fb44 <global_stdio_init.part.0+0x30>)
 800fb18:	4c0b      	ldr	r4, [pc, #44]	@ (800fb48 <global_stdio_init.part.0+0x34>)
 800fb1a:	4a0c      	ldr	r2, [pc, #48]	@ (800fb4c <global_stdio_init.part.0+0x38>)
 800fb1c:	601a      	str	r2, [r3, #0]
 800fb1e:	4620      	mov	r0, r4
 800fb20:	2200      	movs	r2, #0
 800fb22:	2104      	movs	r1, #4
 800fb24:	f7ff ff94 	bl	800fa50 <std>
 800fb28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fb2c:	2201      	movs	r2, #1
 800fb2e:	2109      	movs	r1, #9
 800fb30:	f7ff ff8e 	bl	800fa50 <std>
 800fb34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fb38:	2202      	movs	r2, #2
 800fb3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb3e:	2112      	movs	r1, #18
 800fb40:	f7ff bf86 	b.w	800fa50 <std>
 800fb44:	20002684 	.word	0x20002684
 800fb48:	2000254c 	.word	0x2000254c
 800fb4c:	0800fabd 	.word	0x0800fabd

0800fb50 <__sfp_lock_acquire>:
 800fb50:	4801      	ldr	r0, [pc, #4]	@ (800fb58 <__sfp_lock_acquire+0x8>)
 800fb52:	f000 b946 	b.w	800fde2 <__retarget_lock_acquire_recursive>
 800fb56:	bf00      	nop
 800fb58:	2000268d 	.word	0x2000268d

0800fb5c <__sfp_lock_release>:
 800fb5c:	4801      	ldr	r0, [pc, #4]	@ (800fb64 <__sfp_lock_release+0x8>)
 800fb5e:	f000 b941 	b.w	800fde4 <__retarget_lock_release_recursive>
 800fb62:	bf00      	nop
 800fb64:	2000268d 	.word	0x2000268d

0800fb68 <__sinit>:
 800fb68:	b510      	push	{r4, lr}
 800fb6a:	4604      	mov	r4, r0
 800fb6c:	f7ff fff0 	bl	800fb50 <__sfp_lock_acquire>
 800fb70:	6a23      	ldr	r3, [r4, #32]
 800fb72:	b11b      	cbz	r3, 800fb7c <__sinit+0x14>
 800fb74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb78:	f7ff bff0 	b.w	800fb5c <__sfp_lock_release>
 800fb7c:	4b04      	ldr	r3, [pc, #16]	@ (800fb90 <__sinit+0x28>)
 800fb7e:	6223      	str	r3, [r4, #32]
 800fb80:	4b04      	ldr	r3, [pc, #16]	@ (800fb94 <__sinit+0x2c>)
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d1f5      	bne.n	800fb74 <__sinit+0xc>
 800fb88:	f7ff ffc4 	bl	800fb14 <global_stdio_init.part.0>
 800fb8c:	e7f2      	b.n	800fb74 <__sinit+0xc>
 800fb8e:	bf00      	nop
 800fb90:	0800fad5 	.word	0x0800fad5
 800fb94:	20002684 	.word	0x20002684

0800fb98 <_fwalk_sglue>:
 800fb98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb9c:	4607      	mov	r7, r0
 800fb9e:	4688      	mov	r8, r1
 800fba0:	4614      	mov	r4, r2
 800fba2:	2600      	movs	r6, #0
 800fba4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fba8:	f1b9 0901 	subs.w	r9, r9, #1
 800fbac:	d505      	bpl.n	800fbba <_fwalk_sglue+0x22>
 800fbae:	6824      	ldr	r4, [r4, #0]
 800fbb0:	2c00      	cmp	r4, #0
 800fbb2:	d1f7      	bne.n	800fba4 <_fwalk_sglue+0xc>
 800fbb4:	4630      	mov	r0, r6
 800fbb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbba:	89ab      	ldrh	r3, [r5, #12]
 800fbbc:	2b01      	cmp	r3, #1
 800fbbe:	d907      	bls.n	800fbd0 <_fwalk_sglue+0x38>
 800fbc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fbc4:	3301      	adds	r3, #1
 800fbc6:	d003      	beq.n	800fbd0 <_fwalk_sglue+0x38>
 800fbc8:	4629      	mov	r1, r5
 800fbca:	4638      	mov	r0, r7
 800fbcc:	47c0      	blx	r8
 800fbce:	4306      	orrs	r6, r0
 800fbd0:	3568      	adds	r5, #104	@ 0x68
 800fbd2:	e7e9      	b.n	800fba8 <_fwalk_sglue+0x10>

0800fbd4 <sniprintf>:
 800fbd4:	b40c      	push	{r2, r3}
 800fbd6:	b530      	push	{r4, r5, lr}
 800fbd8:	4b18      	ldr	r3, [pc, #96]	@ (800fc3c <sniprintf+0x68>)
 800fbda:	1e0c      	subs	r4, r1, #0
 800fbdc:	681d      	ldr	r5, [r3, #0]
 800fbde:	b09d      	sub	sp, #116	@ 0x74
 800fbe0:	da08      	bge.n	800fbf4 <sniprintf+0x20>
 800fbe2:	238b      	movs	r3, #139	@ 0x8b
 800fbe4:	602b      	str	r3, [r5, #0]
 800fbe6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fbea:	b01d      	add	sp, #116	@ 0x74
 800fbec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fbf0:	b002      	add	sp, #8
 800fbf2:	4770      	bx	lr
 800fbf4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fbf8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fbfc:	f04f 0300 	mov.w	r3, #0
 800fc00:	931b      	str	r3, [sp, #108]	@ 0x6c
 800fc02:	bf14      	ite	ne
 800fc04:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800fc08:	4623      	moveq	r3, r4
 800fc0a:	9304      	str	r3, [sp, #16]
 800fc0c:	9307      	str	r3, [sp, #28]
 800fc0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fc12:	9002      	str	r0, [sp, #8]
 800fc14:	9006      	str	r0, [sp, #24]
 800fc16:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fc1a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fc1c:	ab21      	add	r3, sp, #132	@ 0x84
 800fc1e:	a902      	add	r1, sp, #8
 800fc20:	4628      	mov	r0, r5
 800fc22:	9301      	str	r3, [sp, #4]
 800fc24:	f001 fb58 	bl	80112d8 <_svfiprintf_r>
 800fc28:	1c43      	adds	r3, r0, #1
 800fc2a:	bfbc      	itt	lt
 800fc2c:	238b      	movlt	r3, #139	@ 0x8b
 800fc2e:	602b      	strlt	r3, [r5, #0]
 800fc30:	2c00      	cmp	r4, #0
 800fc32:	d0da      	beq.n	800fbea <sniprintf+0x16>
 800fc34:	9b02      	ldr	r3, [sp, #8]
 800fc36:	2200      	movs	r2, #0
 800fc38:	701a      	strb	r2, [r3, #0]
 800fc3a:	e7d6      	b.n	800fbea <sniprintf+0x16>
 800fc3c:	20000118 	.word	0x20000118

0800fc40 <__sread>:
 800fc40:	b510      	push	{r4, lr}
 800fc42:	460c      	mov	r4, r1
 800fc44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc48:	f000 f86c 	bl	800fd24 <_read_r>
 800fc4c:	2800      	cmp	r0, #0
 800fc4e:	bfab      	itete	ge
 800fc50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fc52:	89a3      	ldrhlt	r3, [r4, #12]
 800fc54:	181b      	addge	r3, r3, r0
 800fc56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fc5a:	bfac      	ite	ge
 800fc5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fc5e:	81a3      	strhlt	r3, [r4, #12]
 800fc60:	bd10      	pop	{r4, pc}

0800fc62 <__swrite>:
 800fc62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc66:	461f      	mov	r7, r3
 800fc68:	898b      	ldrh	r3, [r1, #12]
 800fc6a:	05db      	lsls	r3, r3, #23
 800fc6c:	4605      	mov	r5, r0
 800fc6e:	460c      	mov	r4, r1
 800fc70:	4616      	mov	r6, r2
 800fc72:	d505      	bpl.n	800fc80 <__swrite+0x1e>
 800fc74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc78:	2302      	movs	r3, #2
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	f000 f840 	bl	800fd00 <_lseek_r>
 800fc80:	89a3      	ldrh	r3, [r4, #12]
 800fc82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fc8a:	81a3      	strh	r3, [r4, #12]
 800fc8c:	4632      	mov	r2, r6
 800fc8e:	463b      	mov	r3, r7
 800fc90:	4628      	mov	r0, r5
 800fc92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc96:	f000 b867 	b.w	800fd68 <_write_r>

0800fc9a <__sseek>:
 800fc9a:	b510      	push	{r4, lr}
 800fc9c:	460c      	mov	r4, r1
 800fc9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fca2:	f000 f82d 	bl	800fd00 <_lseek_r>
 800fca6:	1c43      	adds	r3, r0, #1
 800fca8:	89a3      	ldrh	r3, [r4, #12]
 800fcaa:	bf15      	itete	ne
 800fcac:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fcae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fcb2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fcb6:	81a3      	strheq	r3, [r4, #12]
 800fcb8:	bf18      	it	ne
 800fcba:	81a3      	strhne	r3, [r4, #12]
 800fcbc:	bd10      	pop	{r4, pc}

0800fcbe <__sclose>:
 800fcbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcc2:	f000 b80d 	b.w	800fce0 <_close_r>

0800fcc6 <memset>:
 800fcc6:	4402      	add	r2, r0
 800fcc8:	4603      	mov	r3, r0
 800fcca:	4293      	cmp	r3, r2
 800fccc:	d100      	bne.n	800fcd0 <memset+0xa>
 800fcce:	4770      	bx	lr
 800fcd0:	f803 1b01 	strb.w	r1, [r3], #1
 800fcd4:	e7f9      	b.n	800fcca <memset+0x4>
	...

0800fcd8 <_localeconv_r>:
 800fcd8:	4800      	ldr	r0, [pc, #0]	@ (800fcdc <_localeconv_r+0x4>)
 800fcda:	4770      	bx	lr
 800fcdc:	20000258 	.word	0x20000258

0800fce0 <_close_r>:
 800fce0:	b538      	push	{r3, r4, r5, lr}
 800fce2:	4d06      	ldr	r5, [pc, #24]	@ (800fcfc <_close_r+0x1c>)
 800fce4:	2300      	movs	r3, #0
 800fce6:	4604      	mov	r4, r0
 800fce8:	4608      	mov	r0, r1
 800fcea:	602b      	str	r3, [r5, #0]
 800fcec:	f7f2 fe94 	bl	8002a18 <_close>
 800fcf0:	1c43      	adds	r3, r0, #1
 800fcf2:	d102      	bne.n	800fcfa <_close_r+0x1a>
 800fcf4:	682b      	ldr	r3, [r5, #0]
 800fcf6:	b103      	cbz	r3, 800fcfa <_close_r+0x1a>
 800fcf8:	6023      	str	r3, [r4, #0]
 800fcfa:	bd38      	pop	{r3, r4, r5, pc}
 800fcfc:	20002688 	.word	0x20002688

0800fd00 <_lseek_r>:
 800fd00:	b538      	push	{r3, r4, r5, lr}
 800fd02:	4d07      	ldr	r5, [pc, #28]	@ (800fd20 <_lseek_r+0x20>)
 800fd04:	4604      	mov	r4, r0
 800fd06:	4608      	mov	r0, r1
 800fd08:	4611      	mov	r1, r2
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	602a      	str	r2, [r5, #0]
 800fd0e:	461a      	mov	r2, r3
 800fd10:	f7f2 fea9 	bl	8002a66 <_lseek>
 800fd14:	1c43      	adds	r3, r0, #1
 800fd16:	d102      	bne.n	800fd1e <_lseek_r+0x1e>
 800fd18:	682b      	ldr	r3, [r5, #0]
 800fd1a:	b103      	cbz	r3, 800fd1e <_lseek_r+0x1e>
 800fd1c:	6023      	str	r3, [r4, #0]
 800fd1e:	bd38      	pop	{r3, r4, r5, pc}
 800fd20:	20002688 	.word	0x20002688

0800fd24 <_read_r>:
 800fd24:	b538      	push	{r3, r4, r5, lr}
 800fd26:	4d07      	ldr	r5, [pc, #28]	@ (800fd44 <_read_r+0x20>)
 800fd28:	4604      	mov	r4, r0
 800fd2a:	4608      	mov	r0, r1
 800fd2c:	4611      	mov	r1, r2
 800fd2e:	2200      	movs	r2, #0
 800fd30:	602a      	str	r2, [r5, #0]
 800fd32:	461a      	mov	r2, r3
 800fd34:	f7f2 fe37 	bl	80029a6 <_read>
 800fd38:	1c43      	adds	r3, r0, #1
 800fd3a:	d102      	bne.n	800fd42 <_read_r+0x1e>
 800fd3c:	682b      	ldr	r3, [r5, #0]
 800fd3e:	b103      	cbz	r3, 800fd42 <_read_r+0x1e>
 800fd40:	6023      	str	r3, [r4, #0]
 800fd42:	bd38      	pop	{r3, r4, r5, pc}
 800fd44:	20002688 	.word	0x20002688

0800fd48 <_sbrk_r>:
 800fd48:	b538      	push	{r3, r4, r5, lr}
 800fd4a:	4d06      	ldr	r5, [pc, #24]	@ (800fd64 <_sbrk_r+0x1c>)
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	4604      	mov	r4, r0
 800fd50:	4608      	mov	r0, r1
 800fd52:	602b      	str	r3, [r5, #0]
 800fd54:	f7f2 fe94 	bl	8002a80 <_sbrk>
 800fd58:	1c43      	adds	r3, r0, #1
 800fd5a:	d102      	bne.n	800fd62 <_sbrk_r+0x1a>
 800fd5c:	682b      	ldr	r3, [r5, #0]
 800fd5e:	b103      	cbz	r3, 800fd62 <_sbrk_r+0x1a>
 800fd60:	6023      	str	r3, [r4, #0]
 800fd62:	bd38      	pop	{r3, r4, r5, pc}
 800fd64:	20002688 	.word	0x20002688

0800fd68 <_write_r>:
 800fd68:	b538      	push	{r3, r4, r5, lr}
 800fd6a:	4d07      	ldr	r5, [pc, #28]	@ (800fd88 <_write_r+0x20>)
 800fd6c:	4604      	mov	r4, r0
 800fd6e:	4608      	mov	r0, r1
 800fd70:	4611      	mov	r1, r2
 800fd72:	2200      	movs	r2, #0
 800fd74:	602a      	str	r2, [r5, #0]
 800fd76:	461a      	mov	r2, r3
 800fd78:	f7f2 fe32 	bl	80029e0 <_write>
 800fd7c:	1c43      	adds	r3, r0, #1
 800fd7e:	d102      	bne.n	800fd86 <_write_r+0x1e>
 800fd80:	682b      	ldr	r3, [r5, #0]
 800fd82:	b103      	cbz	r3, 800fd86 <_write_r+0x1e>
 800fd84:	6023      	str	r3, [r4, #0]
 800fd86:	bd38      	pop	{r3, r4, r5, pc}
 800fd88:	20002688 	.word	0x20002688

0800fd8c <__errno>:
 800fd8c:	4b01      	ldr	r3, [pc, #4]	@ (800fd94 <__errno+0x8>)
 800fd8e:	6818      	ldr	r0, [r3, #0]
 800fd90:	4770      	bx	lr
 800fd92:	bf00      	nop
 800fd94:	20000118 	.word	0x20000118

0800fd98 <__libc_init_array>:
 800fd98:	b570      	push	{r4, r5, r6, lr}
 800fd9a:	4d0d      	ldr	r5, [pc, #52]	@ (800fdd0 <__libc_init_array+0x38>)
 800fd9c:	4c0d      	ldr	r4, [pc, #52]	@ (800fdd4 <__libc_init_array+0x3c>)
 800fd9e:	1b64      	subs	r4, r4, r5
 800fda0:	10a4      	asrs	r4, r4, #2
 800fda2:	2600      	movs	r6, #0
 800fda4:	42a6      	cmp	r6, r4
 800fda6:	d109      	bne.n	800fdbc <__libc_init_array+0x24>
 800fda8:	4d0b      	ldr	r5, [pc, #44]	@ (800fdd8 <__libc_init_array+0x40>)
 800fdaa:	4c0c      	ldr	r4, [pc, #48]	@ (800fddc <__libc_init_array+0x44>)
 800fdac:	f001 ffa2 	bl	8011cf4 <_init>
 800fdb0:	1b64      	subs	r4, r4, r5
 800fdb2:	10a4      	asrs	r4, r4, #2
 800fdb4:	2600      	movs	r6, #0
 800fdb6:	42a6      	cmp	r6, r4
 800fdb8:	d105      	bne.n	800fdc6 <__libc_init_array+0x2e>
 800fdba:	bd70      	pop	{r4, r5, r6, pc}
 800fdbc:	f855 3b04 	ldr.w	r3, [r5], #4
 800fdc0:	4798      	blx	r3
 800fdc2:	3601      	adds	r6, #1
 800fdc4:	e7ee      	b.n	800fda4 <__libc_init_array+0xc>
 800fdc6:	f855 3b04 	ldr.w	r3, [r5], #4
 800fdca:	4798      	blx	r3
 800fdcc:	3601      	adds	r6, #1
 800fdce:	e7f2      	b.n	800fdb6 <__libc_init_array+0x1e>
 800fdd0:	0801215c 	.word	0x0801215c
 800fdd4:	0801215c 	.word	0x0801215c
 800fdd8:	0801215c 	.word	0x0801215c
 800fddc:	08012160 	.word	0x08012160

0800fde0 <__retarget_lock_init_recursive>:
 800fde0:	4770      	bx	lr

0800fde2 <__retarget_lock_acquire_recursive>:
 800fde2:	4770      	bx	lr

0800fde4 <__retarget_lock_release_recursive>:
 800fde4:	4770      	bx	lr

0800fde6 <quorem>:
 800fde6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdea:	6903      	ldr	r3, [r0, #16]
 800fdec:	690c      	ldr	r4, [r1, #16]
 800fdee:	42a3      	cmp	r3, r4
 800fdf0:	4607      	mov	r7, r0
 800fdf2:	db7e      	blt.n	800fef2 <quorem+0x10c>
 800fdf4:	3c01      	subs	r4, #1
 800fdf6:	f101 0814 	add.w	r8, r1, #20
 800fdfa:	00a3      	lsls	r3, r4, #2
 800fdfc:	f100 0514 	add.w	r5, r0, #20
 800fe00:	9300      	str	r3, [sp, #0]
 800fe02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fe06:	9301      	str	r3, [sp, #4]
 800fe08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fe0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe10:	3301      	adds	r3, #1
 800fe12:	429a      	cmp	r2, r3
 800fe14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fe18:	fbb2 f6f3 	udiv	r6, r2, r3
 800fe1c:	d32e      	bcc.n	800fe7c <quorem+0x96>
 800fe1e:	f04f 0a00 	mov.w	sl, #0
 800fe22:	46c4      	mov	ip, r8
 800fe24:	46ae      	mov	lr, r5
 800fe26:	46d3      	mov	fp, sl
 800fe28:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fe2c:	b298      	uxth	r0, r3
 800fe2e:	fb06 a000 	mla	r0, r6, r0, sl
 800fe32:	0c02      	lsrs	r2, r0, #16
 800fe34:	0c1b      	lsrs	r3, r3, #16
 800fe36:	fb06 2303 	mla	r3, r6, r3, r2
 800fe3a:	f8de 2000 	ldr.w	r2, [lr]
 800fe3e:	b280      	uxth	r0, r0
 800fe40:	b292      	uxth	r2, r2
 800fe42:	1a12      	subs	r2, r2, r0
 800fe44:	445a      	add	r2, fp
 800fe46:	f8de 0000 	ldr.w	r0, [lr]
 800fe4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fe4e:	b29b      	uxth	r3, r3
 800fe50:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fe54:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fe58:	b292      	uxth	r2, r2
 800fe5a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fe5e:	45e1      	cmp	r9, ip
 800fe60:	f84e 2b04 	str.w	r2, [lr], #4
 800fe64:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fe68:	d2de      	bcs.n	800fe28 <quorem+0x42>
 800fe6a:	9b00      	ldr	r3, [sp, #0]
 800fe6c:	58eb      	ldr	r3, [r5, r3]
 800fe6e:	b92b      	cbnz	r3, 800fe7c <quorem+0x96>
 800fe70:	9b01      	ldr	r3, [sp, #4]
 800fe72:	3b04      	subs	r3, #4
 800fe74:	429d      	cmp	r5, r3
 800fe76:	461a      	mov	r2, r3
 800fe78:	d32f      	bcc.n	800feda <quorem+0xf4>
 800fe7a:	613c      	str	r4, [r7, #16]
 800fe7c:	4638      	mov	r0, r7
 800fe7e:	f001 f8c7 	bl	8011010 <__mcmp>
 800fe82:	2800      	cmp	r0, #0
 800fe84:	db25      	blt.n	800fed2 <quorem+0xec>
 800fe86:	4629      	mov	r1, r5
 800fe88:	2000      	movs	r0, #0
 800fe8a:	f858 2b04 	ldr.w	r2, [r8], #4
 800fe8e:	f8d1 c000 	ldr.w	ip, [r1]
 800fe92:	fa1f fe82 	uxth.w	lr, r2
 800fe96:	fa1f f38c 	uxth.w	r3, ip
 800fe9a:	eba3 030e 	sub.w	r3, r3, lr
 800fe9e:	4403      	add	r3, r0
 800fea0:	0c12      	lsrs	r2, r2, #16
 800fea2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fea6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800feaa:	b29b      	uxth	r3, r3
 800feac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800feb0:	45c1      	cmp	r9, r8
 800feb2:	f841 3b04 	str.w	r3, [r1], #4
 800feb6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800feba:	d2e6      	bcs.n	800fe8a <quorem+0xa4>
 800febc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fec0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fec4:	b922      	cbnz	r2, 800fed0 <quorem+0xea>
 800fec6:	3b04      	subs	r3, #4
 800fec8:	429d      	cmp	r5, r3
 800feca:	461a      	mov	r2, r3
 800fecc:	d30b      	bcc.n	800fee6 <quorem+0x100>
 800fece:	613c      	str	r4, [r7, #16]
 800fed0:	3601      	adds	r6, #1
 800fed2:	4630      	mov	r0, r6
 800fed4:	b003      	add	sp, #12
 800fed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feda:	6812      	ldr	r2, [r2, #0]
 800fedc:	3b04      	subs	r3, #4
 800fede:	2a00      	cmp	r2, #0
 800fee0:	d1cb      	bne.n	800fe7a <quorem+0x94>
 800fee2:	3c01      	subs	r4, #1
 800fee4:	e7c6      	b.n	800fe74 <quorem+0x8e>
 800fee6:	6812      	ldr	r2, [r2, #0]
 800fee8:	3b04      	subs	r3, #4
 800feea:	2a00      	cmp	r2, #0
 800feec:	d1ef      	bne.n	800fece <quorem+0xe8>
 800feee:	3c01      	subs	r4, #1
 800fef0:	e7ea      	b.n	800fec8 <quorem+0xe2>
 800fef2:	2000      	movs	r0, #0
 800fef4:	e7ee      	b.n	800fed4 <quorem+0xee>
	...

0800fef8 <_dtoa_r>:
 800fef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fefc:	69c7      	ldr	r7, [r0, #28]
 800fefe:	b097      	sub	sp, #92	@ 0x5c
 800ff00:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ff04:	ec55 4b10 	vmov	r4, r5, d0
 800ff08:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ff0a:	9107      	str	r1, [sp, #28]
 800ff0c:	4681      	mov	r9, r0
 800ff0e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ff10:	9311      	str	r3, [sp, #68]	@ 0x44
 800ff12:	b97f      	cbnz	r7, 800ff34 <_dtoa_r+0x3c>
 800ff14:	2010      	movs	r0, #16
 800ff16:	f7ff f887 	bl	800f028 <malloc>
 800ff1a:	4602      	mov	r2, r0
 800ff1c:	f8c9 001c 	str.w	r0, [r9, #28]
 800ff20:	b920      	cbnz	r0, 800ff2c <_dtoa_r+0x34>
 800ff22:	4ba9      	ldr	r3, [pc, #676]	@ (80101c8 <_dtoa_r+0x2d0>)
 800ff24:	21ef      	movs	r1, #239	@ 0xef
 800ff26:	48a9      	ldr	r0, [pc, #676]	@ (80101cc <_dtoa_r+0x2d4>)
 800ff28:	f001 fba6 	bl	8011678 <__assert_func>
 800ff2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ff30:	6007      	str	r7, [r0, #0]
 800ff32:	60c7      	str	r7, [r0, #12]
 800ff34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ff38:	6819      	ldr	r1, [r3, #0]
 800ff3a:	b159      	cbz	r1, 800ff54 <_dtoa_r+0x5c>
 800ff3c:	685a      	ldr	r2, [r3, #4]
 800ff3e:	604a      	str	r2, [r1, #4]
 800ff40:	2301      	movs	r3, #1
 800ff42:	4093      	lsls	r3, r2
 800ff44:	608b      	str	r3, [r1, #8]
 800ff46:	4648      	mov	r0, r9
 800ff48:	f000 fe30 	bl	8010bac <_Bfree>
 800ff4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ff50:	2200      	movs	r2, #0
 800ff52:	601a      	str	r2, [r3, #0]
 800ff54:	1e2b      	subs	r3, r5, #0
 800ff56:	bfb9      	ittee	lt
 800ff58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ff5c:	9305      	strlt	r3, [sp, #20]
 800ff5e:	2300      	movge	r3, #0
 800ff60:	6033      	strge	r3, [r6, #0]
 800ff62:	9f05      	ldr	r7, [sp, #20]
 800ff64:	4b9a      	ldr	r3, [pc, #616]	@ (80101d0 <_dtoa_r+0x2d8>)
 800ff66:	bfbc      	itt	lt
 800ff68:	2201      	movlt	r2, #1
 800ff6a:	6032      	strlt	r2, [r6, #0]
 800ff6c:	43bb      	bics	r3, r7
 800ff6e:	d112      	bne.n	800ff96 <_dtoa_r+0x9e>
 800ff70:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ff72:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ff76:	6013      	str	r3, [r2, #0]
 800ff78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ff7c:	4323      	orrs	r3, r4
 800ff7e:	f000 855a 	beq.w	8010a36 <_dtoa_r+0xb3e>
 800ff82:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ff84:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80101e4 <_dtoa_r+0x2ec>
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	f000 855c 	beq.w	8010a46 <_dtoa_r+0xb4e>
 800ff8e:	f10a 0303 	add.w	r3, sl, #3
 800ff92:	f000 bd56 	b.w	8010a42 <_dtoa_r+0xb4a>
 800ff96:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	ec51 0b17 	vmov	r0, r1, d7
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ffa6:	f7f0 fdb7 	bl	8000b18 <__aeabi_dcmpeq>
 800ffaa:	4680      	mov	r8, r0
 800ffac:	b158      	cbz	r0, 800ffc6 <_dtoa_r+0xce>
 800ffae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ffb0:	2301      	movs	r3, #1
 800ffb2:	6013      	str	r3, [r2, #0]
 800ffb4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ffb6:	b113      	cbz	r3, 800ffbe <_dtoa_r+0xc6>
 800ffb8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ffba:	4b86      	ldr	r3, [pc, #536]	@ (80101d4 <_dtoa_r+0x2dc>)
 800ffbc:	6013      	str	r3, [r2, #0]
 800ffbe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80101e8 <_dtoa_r+0x2f0>
 800ffc2:	f000 bd40 	b.w	8010a46 <_dtoa_r+0xb4e>
 800ffc6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800ffca:	aa14      	add	r2, sp, #80	@ 0x50
 800ffcc:	a915      	add	r1, sp, #84	@ 0x54
 800ffce:	4648      	mov	r0, r9
 800ffd0:	f001 f8ce 	bl	8011170 <__d2b>
 800ffd4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ffd8:	9002      	str	r0, [sp, #8]
 800ffda:	2e00      	cmp	r6, #0
 800ffdc:	d078      	beq.n	80100d0 <_dtoa_r+0x1d8>
 800ffde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ffe0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800ffe4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ffe8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ffec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fff0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fff4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fff8:	4619      	mov	r1, r3
 800fffa:	2200      	movs	r2, #0
 800fffc:	4b76      	ldr	r3, [pc, #472]	@ (80101d8 <_dtoa_r+0x2e0>)
 800fffe:	f7f0 f96b 	bl	80002d8 <__aeabi_dsub>
 8010002:	a36b      	add	r3, pc, #428	@ (adr r3, 80101b0 <_dtoa_r+0x2b8>)
 8010004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010008:	f7f0 fb1e 	bl	8000648 <__aeabi_dmul>
 801000c:	a36a      	add	r3, pc, #424	@ (adr r3, 80101b8 <_dtoa_r+0x2c0>)
 801000e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010012:	f7f0 f963 	bl	80002dc <__adddf3>
 8010016:	4604      	mov	r4, r0
 8010018:	4630      	mov	r0, r6
 801001a:	460d      	mov	r5, r1
 801001c:	f7f0 faaa 	bl	8000574 <__aeabi_i2d>
 8010020:	a367      	add	r3, pc, #412	@ (adr r3, 80101c0 <_dtoa_r+0x2c8>)
 8010022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010026:	f7f0 fb0f 	bl	8000648 <__aeabi_dmul>
 801002a:	4602      	mov	r2, r0
 801002c:	460b      	mov	r3, r1
 801002e:	4620      	mov	r0, r4
 8010030:	4629      	mov	r1, r5
 8010032:	f7f0 f953 	bl	80002dc <__adddf3>
 8010036:	4604      	mov	r4, r0
 8010038:	460d      	mov	r5, r1
 801003a:	f7f0 fdb5 	bl	8000ba8 <__aeabi_d2iz>
 801003e:	2200      	movs	r2, #0
 8010040:	4607      	mov	r7, r0
 8010042:	2300      	movs	r3, #0
 8010044:	4620      	mov	r0, r4
 8010046:	4629      	mov	r1, r5
 8010048:	f7f0 fd70 	bl	8000b2c <__aeabi_dcmplt>
 801004c:	b140      	cbz	r0, 8010060 <_dtoa_r+0x168>
 801004e:	4638      	mov	r0, r7
 8010050:	f7f0 fa90 	bl	8000574 <__aeabi_i2d>
 8010054:	4622      	mov	r2, r4
 8010056:	462b      	mov	r3, r5
 8010058:	f7f0 fd5e 	bl	8000b18 <__aeabi_dcmpeq>
 801005c:	b900      	cbnz	r0, 8010060 <_dtoa_r+0x168>
 801005e:	3f01      	subs	r7, #1
 8010060:	2f16      	cmp	r7, #22
 8010062:	d852      	bhi.n	801010a <_dtoa_r+0x212>
 8010064:	4b5d      	ldr	r3, [pc, #372]	@ (80101dc <_dtoa_r+0x2e4>)
 8010066:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801006a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801006e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010072:	f7f0 fd5b 	bl	8000b2c <__aeabi_dcmplt>
 8010076:	2800      	cmp	r0, #0
 8010078:	d049      	beq.n	801010e <_dtoa_r+0x216>
 801007a:	3f01      	subs	r7, #1
 801007c:	2300      	movs	r3, #0
 801007e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010080:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010082:	1b9b      	subs	r3, r3, r6
 8010084:	1e5a      	subs	r2, r3, #1
 8010086:	bf45      	ittet	mi
 8010088:	f1c3 0301 	rsbmi	r3, r3, #1
 801008c:	9300      	strmi	r3, [sp, #0]
 801008e:	2300      	movpl	r3, #0
 8010090:	2300      	movmi	r3, #0
 8010092:	9206      	str	r2, [sp, #24]
 8010094:	bf54      	ite	pl
 8010096:	9300      	strpl	r3, [sp, #0]
 8010098:	9306      	strmi	r3, [sp, #24]
 801009a:	2f00      	cmp	r7, #0
 801009c:	db39      	blt.n	8010112 <_dtoa_r+0x21a>
 801009e:	9b06      	ldr	r3, [sp, #24]
 80100a0:	970d      	str	r7, [sp, #52]	@ 0x34
 80100a2:	443b      	add	r3, r7
 80100a4:	9306      	str	r3, [sp, #24]
 80100a6:	2300      	movs	r3, #0
 80100a8:	9308      	str	r3, [sp, #32]
 80100aa:	9b07      	ldr	r3, [sp, #28]
 80100ac:	2b09      	cmp	r3, #9
 80100ae:	d863      	bhi.n	8010178 <_dtoa_r+0x280>
 80100b0:	2b05      	cmp	r3, #5
 80100b2:	bfc4      	itt	gt
 80100b4:	3b04      	subgt	r3, #4
 80100b6:	9307      	strgt	r3, [sp, #28]
 80100b8:	9b07      	ldr	r3, [sp, #28]
 80100ba:	f1a3 0302 	sub.w	r3, r3, #2
 80100be:	bfcc      	ite	gt
 80100c0:	2400      	movgt	r4, #0
 80100c2:	2401      	movle	r4, #1
 80100c4:	2b03      	cmp	r3, #3
 80100c6:	d863      	bhi.n	8010190 <_dtoa_r+0x298>
 80100c8:	e8df f003 	tbb	[pc, r3]
 80100cc:	2b375452 	.word	0x2b375452
 80100d0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80100d4:	441e      	add	r6, r3
 80100d6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80100da:	2b20      	cmp	r3, #32
 80100dc:	bfc1      	itttt	gt
 80100de:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80100e2:	409f      	lslgt	r7, r3
 80100e4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80100e8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80100ec:	bfd6      	itet	le
 80100ee:	f1c3 0320 	rsble	r3, r3, #32
 80100f2:	ea47 0003 	orrgt.w	r0, r7, r3
 80100f6:	fa04 f003 	lslle.w	r0, r4, r3
 80100fa:	f7f0 fa2b 	bl	8000554 <__aeabi_ui2d>
 80100fe:	2201      	movs	r2, #1
 8010100:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010104:	3e01      	subs	r6, #1
 8010106:	9212      	str	r2, [sp, #72]	@ 0x48
 8010108:	e776      	b.n	800fff8 <_dtoa_r+0x100>
 801010a:	2301      	movs	r3, #1
 801010c:	e7b7      	b.n	801007e <_dtoa_r+0x186>
 801010e:	9010      	str	r0, [sp, #64]	@ 0x40
 8010110:	e7b6      	b.n	8010080 <_dtoa_r+0x188>
 8010112:	9b00      	ldr	r3, [sp, #0]
 8010114:	1bdb      	subs	r3, r3, r7
 8010116:	9300      	str	r3, [sp, #0]
 8010118:	427b      	negs	r3, r7
 801011a:	9308      	str	r3, [sp, #32]
 801011c:	2300      	movs	r3, #0
 801011e:	930d      	str	r3, [sp, #52]	@ 0x34
 8010120:	e7c3      	b.n	80100aa <_dtoa_r+0x1b2>
 8010122:	2301      	movs	r3, #1
 8010124:	9309      	str	r3, [sp, #36]	@ 0x24
 8010126:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010128:	eb07 0b03 	add.w	fp, r7, r3
 801012c:	f10b 0301 	add.w	r3, fp, #1
 8010130:	2b01      	cmp	r3, #1
 8010132:	9303      	str	r3, [sp, #12]
 8010134:	bfb8      	it	lt
 8010136:	2301      	movlt	r3, #1
 8010138:	e006      	b.n	8010148 <_dtoa_r+0x250>
 801013a:	2301      	movs	r3, #1
 801013c:	9309      	str	r3, [sp, #36]	@ 0x24
 801013e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010140:	2b00      	cmp	r3, #0
 8010142:	dd28      	ble.n	8010196 <_dtoa_r+0x29e>
 8010144:	469b      	mov	fp, r3
 8010146:	9303      	str	r3, [sp, #12]
 8010148:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801014c:	2100      	movs	r1, #0
 801014e:	2204      	movs	r2, #4
 8010150:	f102 0514 	add.w	r5, r2, #20
 8010154:	429d      	cmp	r5, r3
 8010156:	d926      	bls.n	80101a6 <_dtoa_r+0x2ae>
 8010158:	6041      	str	r1, [r0, #4]
 801015a:	4648      	mov	r0, r9
 801015c:	f000 fce6 	bl	8010b2c <_Balloc>
 8010160:	4682      	mov	sl, r0
 8010162:	2800      	cmp	r0, #0
 8010164:	d142      	bne.n	80101ec <_dtoa_r+0x2f4>
 8010166:	4b1e      	ldr	r3, [pc, #120]	@ (80101e0 <_dtoa_r+0x2e8>)
 8010168:	4602      	mov	r2, r0
 801016a:	f240 11af 	movw	r1, #431	@ 0x1af
 801016e:	e6da      	b.n	800ff26 <_dtoa_r+0x2e>
 8010170:	2300      	movs	r3, #0
 8010172:	e7e3      	b.n	801013c <_dtoa_r+0x244>
 8010174:	2300      	movs	r3, #0
 8010176:	e7d5      	b.n	8010124 <_dtoa_r+0x22c>
 8010178:	2401      	movs	r4, #1
 801017a:	2300      	movs	r3, #0
 801017c:	9307      	str	r3, [sp, #28]
 801017e:	9409      	str	r4, [sp, #36]	@ 0x24
 8010180:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8010184:	2200      	movs	r2, #0
 8010186:	f8cd b00c 	str.w	fp, [sp, #12]
 801018a:	2312      	movs	r3, #18
 801018c:	920c      	str	r2, [sp, #48]	@ 0x30
 801018e:	e7db      	b.n	8010148 <_dtoa_r+0x250>
 8010190:	2301      	movs	r3, #1
 8010192:	9309      	str	r3, [sp, #36]	@ 0x24
 8010194:	e7f4      	b.n	8010180 <_dtoa_r+0x288>
 8010196:	f04f 0b01 	mov.w	fp, #1
 801019a:	f8cd b00c 	str.w	fp, [sp, #12]
 801019e:	465b      	mov	r3, fp
 80101a0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80101a4:	e7d0      	b.n	8010148 <_dtoa_r+0x250>
 80101a6:	3101      	adds	r1, #1
 80101a8:	0052      	lsls	r2, r2, #1
 80101aa:	e7d1      	b.n	8010150 <_dtoa_r+0x258>
 80101ac:	f3af 8000 	nop.w
 80101b0:	636f4361 	.word	0x636f4361
 80101b4:	3fd287a7 	.word	0x3fd287a7
 80101b8:	8b60c8b3 	.word	0x8b60c8b3
 80101bc:	3fc68a28 	.word	0x3fc68a28
 80101c0:	509f79fb 	.word	0x509f79fb
 80101c4:	3fd34413 	.word	0x3fd34413
 80101c8:	08011e21 	.word	0x08011e21
 80101cc:	08011e38 	.word	0x08011e38
 80101d0:	7ff00000 	.word	0x7ff00000
 80101d4:	08011df1 	.word	0x08011df1
 80101d8:	3ff80000 	.word	0x3ff80000
 80101dc:	08011f88 	.word	0x08011f88
 80101e0:	08011e90 	.word	0x08011e90
 80101e4:	08011e1d 	.word	0x08011e1d
 80101e8:	08011df0 	.word	0x08011df0
 80101ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80101f0:	6018      	str	r0, [r3, #0]
 80101f2:	9b03      	ldr	r3, [sp, #12]
 80101f4:	2b0e      	cmp	r3, #14
 80101f6:	f200 80a1 	bhi.w	801033c <_dtoa_r+0x444>
 80101fa:	2c00      	cmp	r4, #0
 80101fc:	f000 809e 	beq.w	801033c <_dtoa_r+0x444>
 8010200:	2f00      	cmp	r7, #0
 8010202:	dd33      	ble.n	801026c <_dtoa_r+0x374>
 8010204:	4b9c      	ldr	r3, [pc, #624]	@ (8010478 <_dtoa_r+0x580>)
 8010206:	f007 020f 	and.w	r2, r7, #15
 801020a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801020e:	ed93 7b00 	vldr	d7, [r3]
 8010212:	05f8      	lsls	r0, r7, #23
 8010214:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8010218:	ea4f 1427 	mov.w	r4, r7, asr #4
 801021c:	d516      	bpl.n	801024c <_dtoa_r+0x354>
 801021e:	4b97      	ldr	r3, [pc, #604]	@ (801047c <_dtoa_r+0x584>)
 8010220:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010224:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010228:	f7f0 fb38 	bl	800089c <__aeabi_ddiv>
 801022c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010230:	f004 040f 	and.w	r4, r4, #15
 8010234:	2603      	movs	r6, #3
 8010236:	4d91      	ldr	r5, [pc, #580]	@ (801047c <_dtoa_r+0x584>)
 8010238:	b954      	cbnz	r4, 8010250 <_dtoa_r+0x358>
 801023a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801023e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010242:	f7f0 fb2b 	bl	800089c <__aeabi_ddiv>
 8010246:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801024a:	e028      	b.n	801029e <_dtoa_r+0x3a6>
 801024c:	2602      	movs	r6, #2
 801024e:	e7f2      	b.n	8010236 <_dtoa_r+0x33e>
 8010250:	07e1      	lsls	r1, r4, #31
 8010252:	d508      	bpl.n	8010266 <_dtoa_r+0x36e>
 8010254:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010258:	e9d5 2300 	ldrd	r2, r3, [r5]
 801025c:	f7f0 f9f4 	bl	8000648 <__aeabi_dmul>
 8010260:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010264:	3601      	adds	r6, #1
 8010266:	1064      	asrs	r4, r4, #1
 8010268:	3508      	adds	r5, #8
 801026a:	e7e5      	b.n	8010238 <_dtoa_r+0x340>
 801026c:	f000 80af 	beq.w	80103ce <_dtoa_r+0x4d6>
 8010270:	427c      	negs	r4, r7
 8010272:	4b81      	ldr	r3, [pc, #516]	@ (8010478 <_dtoa_r+0x580>)
 8010274:	4d81      	ldr	r5, [pc, #516]	@ (801047c <_dtoa_r+0x584>)
 8010276:	f004 020f 	and.w	r2, r4, #15
 801027a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801027e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010282:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010286:	f7f0 f9df 	bl	8000648 <__aeabi_dmul>
 801028a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801028e:	1124      	asrs	r4, r4, #4
 8010290:	2300      	movs	r3, #0
 8010292:	2602      	movs	r6, #2
 8010294:	2c00      	cmp	r4, #0
 8010296:	f040 808f 	bne.w	80103b8 <_dtoa_r+0x4c0>
 801029a:	2b00      	cmp	r3, #0
 801029c:	d1d3      	bne.n	8010246 <_dtoa_r+0x34e>
 801029e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80102a0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	f000 8094 	beq.w	80103d2 <_dtoa_r+0x4da>
 80102aa:	4b75      	ldr	r3, [pc, #468]	@ (8010480 <_dtoa_r+0x588>)
 80102ac:	2200      	movs	r2, #0
 80102ae:	4620      	mov	r0, r4
 80102b0:	4629      	mov	r1, r5
 80102b2:	f7f0 fc3b 	bl	8000b2c <__aeabi_dcmplt>
 80102b6:	2800      	cmp	r0, #0
 80102b8:	f000 808b 	beq.w	80103d2 <_dtoa_r+0x4da>
 80102bc:	9b03      	ldr	r3, [sp, #12]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	f000 8087 	beq.w	80103d2 <_dtoa_r+0x4da>
 80102c4:	f1bb 0f00 	cmp.w	fp, #0
 80102c8:	dd34      	ble.n	8010334 <_dtoa_r+0x43c>
 80102ca:	4620      	mov	r0, r4
 80102cc:	4b6d      	ldr	r3, [pc, #436]	@ (8010484 <_dtoa_r+0x58c>)
 80102ce:	2200      	movs	r2, #0
 80102d0:	4629      	mov	r1, r5
 80102d2:	f7f0 f9b9 	bl	8000648 <__aeabi_dmul>
 80102d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80102da:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80102de:	3601      	adds	r6, #1
 80102e0:	465c      	mov	r4, fp
 80102e2:	4630      	mov	r0, r6
 80102e4:	f7f0 f946 	bl	8000574 <__aeabi_i2d>
 80102e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80102ec:	f7f0 f9ac 	bl	8000648 <__aeabi_dmul>
 80102f0:	4b65      	ldr	r3, [pc, #404]	@ (8010488 <_dtoa_r+0x590>)
 80102f2:	2200      	movs	r2, #0
 80102f4:	f7ef fff2 	bl	80002dc <__adddf3>
 80102f8:	4605      	mov	r5, r0
 80102fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80102fe:	2c00      	cmp	r4, #0
 8010300:	d16a      	bne.n	80103d8 <_dtoa_r+0x4e0>
 8010302:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010306:	4b61      	ldr	r3, [pc, #388]	@ (801048c <_dtoa_r+0x594>)
 8010308:	2200      	movs	r2, #0
 801030a:	f7ef ffe5 	bl	80002d8 <__aeabi_dsub>
 801030e:	4602      	mov	r2, r0
 8010310:	460b      	mov	r3, r1
 8010312:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010316:	462a      	mov	r2, r5
 8010318:	4633      	mov	r3, r6
 801031a:	f7f0 fc25 	bl	8000b68 <__aeabi_dcmpgt>
 801031e:	2800      	cmp	r0, #0
 8010320:	f040 8298 	bne.w	8010854 <_dtoa_r+0x95c>
 8010324:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010328:	462a      	mov	r2, r5
 801032a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801032e:	f7f0 fbfd 	bl	8000b2c <__aeabi_dcmplt>
 8010332:	bb38      	cbnz	r0, 8010384 <_dtoa_r+0x48c>
 8010334:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8010338:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801033c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801033e:	2b00      	cmp	r3, #0
 8010340:	f2c0 8157 	blt.w	80105f2 <_dtoa_r+0x6fa>
 8010344:	2f0e      	cmp	r7, #14
 8010346:	f300 8154 	bgt.w	80105f2 <_dtoa_r+0x6fa>
 801034a:	4b4b      	ldr	r3, [pc, #300]	@ (8010478 <_dtoa_r+0x580>)
 801034c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010350:	ed93 7b00 	vldr	d7, [r3]
 8010354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010356:	2b00      	cmp	r3, #0
 8010358:	ed8d 7b00 	vstr	d7, [sp]
 801035c:	f280 80e5 	bge.w	801052a <_dtoa_r+0x632>
 8010360:	9b03      	ldr	r3, [sp, #12]
 8010362:	2b00      	cmp	r3, #0
 8010364:	f300 80e1 	bgt.w	801052a <_dtoa_r+0x632>
 8010368:	d10c      	bne.n	8010384 <_dtoa_r+0x48c>
 801036a:	4b48      	ldr	r3, [pc, #288]	@ (801048c <_dtoa_r+0x594>)
 801036c:	2200      	movs	r2, #0
 801036e:	ec51 0b17 	vmov	r0, r1, d7
 8010372:	f7f0 f969 	bl	8000648 <__aeabi_dmul>
 8010376:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801037a:	f7f0 fbeb 	bl	8000b54 <__aeabi_dcmpge>
 801037e:	2800      	cmp	r0, #0
 8010380:	f000 8266 	beq.w	8010850 <_dtoa_r+0x958>
 8010384:	2400      	movs	r4, #0
 8010386:	4625      	mov	r5, r4
 8010388:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801038a:	4656      	mov	r6, sl
 801038c:	ea6f 0803 	mvn.w	r8, r3
 8010390:	2700      	movs	r7, #0
 8010392:	4621      	mov	r1, r4
 8010394:	4648      	mov	r0, r9
 8010396:	f000 fc09 	bl	8010bac <_Bfree>
 801039a:	2d00      	cmp	r5, #0
 801039c:	f000 80bd 	beq.w	801051a <_dtoa_r+0x622>
 80103a0:	b12f      	cbz	r7, 80103ae <_dtoa_r+0x4b6>
 80103a2:	42af      	cmp	r7, r5
 80103a4:	d003      	beq.n	80103ae <_dtoa_r+0x4b6>
 80103a6:	4639      	mov	r1, r7
 80103a8:	4648      	mov	r0, r9
 80103aa:	f000 fbff 	bl	8010bac <_Bfree>
 80103ae:	4629      	mov	r1, r5
 80103b0:	4648      	mov	r0, r9
 80103b2:	f000 fbfb 	bl	8010bac <_Bfree>
 80103b6:	e0b0      	b.n	801051a <_dtoa_r+0x622>
 80103b8:	07e2      	lsls	r2, r4, #31
 80103ba:	d505      	bpl.n	80103c8 <_dtoa_r+0x4d0>
 80103bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80103c0:	f7f0 f942 	bl	8000648 <__aeabi_dmul>
 80103c4:	3601      	adds	r6, #1
 80103c6:	2301      	movs	r3, #1
 80103c8:	1064      	asrs	r4, r4, #1
 80103ca:	3508      	adds	r5, #8
 80103cc:	e762      	b.n	8010294 <_dtoa_r+0x39c>
 80103ce:	2602      	movs	r6, #2
 80103d0:	e765      	b.n	801029e <_dtoa_r+0x3a6>
 80103d2:	9c03      	ldr	r4, [sp, #12]
 80103d4:	46b8      	mov	r8, r7
 80103d6:	e784      	b.n	80102e2 <_dtoa_r+0x3ea>
 80103d8:	4b27      	ldr	r3, [pc, #156]	@ (8010478 <_dtoa_r+0x580>)
 80103da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80103dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80103e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80103e4:	4454      	add	r4, sl
 80103e6:	2900      	cmp	r1, #0
 80103e8:	d054      	beq.n	8010494 <_dtoa_r+0x59c>
 80103ea:	4929      	ldr	r1, [pc, #164]	@ (8010490 <_dtoa_r+0x598>)
 80103ec:	2000      	movs	r0, #0
 80103ee:	f7f0 fa55 	bl	800089c <__aeabi_ddiv>
 80103f2:	4633      	mov	r3, r6
 80103f4:	462a      	mov	r2, r5
 80103f6:	f7ef ff6f 	bl	80002d8 <__aeabi_dsub>
 80103fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80103fe:	4656      	mov	r6, sl
 8010400:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010404:	f7f0 fbd0 	bl	8000ba8 <__aeabi_d2iz>
 8010408:	4605      	mov	r5, r0
 801040a:	f7f0 f8b3 	bl	8000574 <__aeabi_i2d>
 801040e:	4602      	mov	r2, r0
 8010410:	460b      	mov	r3, r1
 8010412:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010416:	f7ef ff5f 	bl	80002d8 <__aeabi_dsub>
 801041a:	3530      	adds	r5, #48	@ 0x30
 801041c:	4602      	mov	r2, r0
 801041e:	460b      	mov	r3, r1
 8010420:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010424:	f806 5b01 	strb.w	r5, [r6], #1
 8010428:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801042c:	f7f0 fb7e 	bl	8000b2c <__aeabi_dcmplt>
 8010430:	2800      	cmp	r0, #0
 8010432:	d172      	bne.n	801051a <_dtoa_r+0x622>
 8010434:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010438:	4911      	ldr	r1, [pc, #68]	@ (8010480 <_dtoa_r+0x588>)
 801043a:	2000      	movs	r0, #0
 801043c:	f7ef ff4c 	bl	80002d8 <__aeabi_dsub>
 8010440:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010444:	f7f0 fb72 	bl	8000b2c <__aeabi_dcmplt>
 8010448:	2800      	cmp	r0, #0
 801044a:	f040 80b4 	bne.w	80105b6 <_dtoa_r+0x6be>
 801044e:	42a6      	cmp	r6, r4
 8010450:	f43f af70 	beq.w	8010334 <_dtoa_r+0x43c>
 8010454:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010458:	4b0a      	ldr	r3, [pc, #40]	@ (8010484 <_dtoa_r+0x58c>)
 801045a:	2200      	movs	r2, #0
 801045c:	f7f0 f8f4 	bl	8000648 <__aeabi_dmul>
 8010460:	4b08      	ldr	r3, [pc, #32]	@ (8010484 <_dtoa_r+0x58c>)
 8010462:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010466:	2200      	movs	r2, #0
 8010468:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801046c:	f7f0 f8ec 	bl	8000648 <__aeabi_dmul>
 8010470:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010474:	e7c4      	b.n	8010400 <_dtoa_r+0x508>
 8010476:	bf00      	nop
 8010478:	08011f88 	.word	0x08011f88
 801047c:	08011f60 	.word	0x08011f60
 8010480:	3ff00000 	.word	0x3ff00000
 8010484:	40240000 	.word	0x40240000
 8010488:	401c0000 	.word	0x401c0000
 801048c:	40140000 	.word	0x40140000
 8010490:	3fe00000 	.word	0x3fe00000
 8010494:	4631      	mov	r1, r6
 8010496:	4628      	mov	r0, r5
 8010498:	f7f0 f8d6 	bl	8000648 <__aeabi_dmul>
 801049c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80104a0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80104a2:	4656      	mov	r6, sl
 80104a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80104a8:	f7f0 fb7e 	bl	8000ba8 <__aeabi_d2iz>
 80104ac:	4605      	mov	r5, r0
 80104ae:	f7f0 f861 	bl	8000574 <__aeabi_i2d>
 80104b2:	4602      	mov	r2, r0
 80104b4:	460b      	mov	r3, r1
 80104b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80104ba:	f7ef ff0d 	bl	80002d8 <__aeabi_dsub>
 80104be:	3530      	adds	r5, #48	@ 0x30
 80104c0:	f806 5b01 	strb.w	r5, [r6], #1
 80104c4:	4602      	mov	r2, r0
 80104c6:	460b      	mov	r3, r1
 80104c8:	42a6      	cmp	r6, r4
 80104ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80104ce:	f04f 0200 	mov.w	r2, #0
 80104d2:	d124      	bne.n	801051e <_dtoa_r+0x626>
 80104d4:	4baf      	ldr	r3, [pc, #700]	@ (8010794 <_dtoa_r+0x89c>)
 80104d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80104da:	f7ef feff 	bl	80002dc <__adddf3>
 80104de:	4602      	mov	r2, r0
 80104e0:	460b      	mov	r3, r1
 80104e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80104e6:	f7f0 fb3f 	bl	8000b68 <__aeabi_dcmpgt>
 80104ea:	2800      	cmp	r0, #0
 80104ec:	d163      	bne.n	80105b6 <_dtoa_r+0x6be>
 80104ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80104f2:	49a8      	ldr	r1, [pc, #672]	@ (8010794 <_dtoa_r+0x89c>)
 80104f4:	2000      	movs	r0, #0
 80104f6:	f7ef feef 	bl	80002d8 <__aeabi_dsub>
 80104fa:	4602      	mov	r2, r0
 80104fc:	460b      	mov	r3, r1
 80104fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010502:	f7f0 fb13 	bl	8000b2c <__aeabi_dcmplt>
 8010506:	2800      	cmp	r0, #0
 8010508:	f43f af14 	beq.w	8010334 <_dtoa_r+0x43c>
 801050c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801050e:	1e73      	subs	r3, r6, #1
 8010510:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010512:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010516:	2b30      	cmp	r3, #48	@ 0x30
 8010518:	d0f8      	beq.n	801050c <_dtoa_r+0x614>
 801051a:	4647      	mov	r7, r8
 801051c:	e03b      	b.n	8010596 <_dtoa_r+0x69e>
 801051e:	4b9e      	ldr	r3, [pc, #632]	@ (8010798 <_dtoa_r+0x8a0>)
 8010520:	f7f0 f892 	bl	8000648 <__aeabi_dmul>
 8010524:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010528:	e7bc      	b.n	80104a4 <_dtoa_r+0x5ac>
 801052a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801052e:	4656      	mov	r6, sl
 8010530:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010534:	4620      	mov	r0, r4
 8010536:	4629      	mov	r1, r5
 8010538:	f7f0 f9b0 	bl	800089c <__aeabi_ddiv>
 801053c:	f7f0 fb34 	bl	8000ba8 <__aeabi_d2iz>
 8010540:	4680      	mov	r8, r0
 8010542:	f7f0 f817 	bl	8000574 <__aeabi_i2d>
 8010546:	e9dd 2300 	ldrd	r2, r3, [sp]
 801054a:	f7f0 f87d 	bl	8000648 <__aeabi_dmul>
 801054e:	4602      	mov	r2, r0
 8010550:	460b      	mov	r3, r1
 8010552:	4620      	mov	r0, r4
 8010554:	4629      	mov	r1, r5
 8010556:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801055a:	f7ef febd 	bl	80002d8 <__aeabi_dsub>
 801055e:	f806 4b01 	strb.w	r4, [r6], #1
 8010562:	9d03      	ldr	r5, [sp, #12]
 8010564:	eba6 040a 	sub.w	r4, r6, sl
 8010568:	42a5      	cmp	r5, r4
 801056a:	4602      	mov	r2, r0
 801056c:	460b      	mov	r3, r1
 801056e:	d133      	bne.n	80105d8 <_dtoa_r+0x6e0>
 8010570:	f7ef feb4 	bl	80002dc <__adddf3>
 8010574:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010578:	4604      	mov	r4, r0
 801057a:	460d      	mov	r5, r1
 801057c:	f7f0 faf4 	bl	8000b68 <__aeabi_dcmpgt>
 8010580:	b9c0      	cbnz	r0, 80105b4 <_dtoa_r+0x6bc>
 8010582:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010586:	4620      	mov	r0, r4
 8010588:	4629      	mov	r1, r5
 801058a:	f7f0 fac5 	bl	8000b18 <__aeabi_dcmpeq>
 801058e:	b110      	cbz	r0, 8010596 <_dtoa_r+0x69e>
 8010590:	f018 0f01 	tst.w	r8, #1
 8010594:	d10e      	bne.n	80105b4 <_dtoa_r+0x6bc>
 8010596:	9902      	ldr	r1, [sp, #8]
 8010598:	4648      	mov	r0, r9
 801059a:	f000 fb07 	bl	8010bac <_Bfree>
 801059e:	2300      	movs	r3, #0
 80105a0:	7033      	strb	r3, [r6, #0]
 80105a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80105a4:	3701      	adds	r7, #1
 80105a6:	601f      	str	r7, [r3, #0]
 80105a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	f000 824b 	beq.w	8010a46 <_dtoa_r+0xb4e>
 80105b0:	601e      	str	r6, [r3, #0]
 80105b2:	e248      	b.n	8010a46 <_dtoa_r+0xb4e>
 80105b4:	46b8      	mov	r8, r7
 80105b6:	4633      	mov	r3, r6
 80105b8:	461e      	mov	r6, r3
 80105ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80105be:	2a39      	cmp	r2, #57	@ 0x39
 80105c0:	d106      	bne.n	80105d0 <_dtoa_r+0x6d8>
 80105c2:	459a      	cmp	sl, r3
 80105c4:	d1f8      	bne.n	80105b8 <_dtoa_r+0x6c0>
 80105c6:	2230      	movs	r2, #48	@ 0x30
 80105c8:	f108 0801 	add.w	r8, r8, #1
 80105cc:	f88a 2000 	strb.w	r2, [sl]
 80105d0:	781a      	ldrb	r2, [r3, #0]
 80105d2:	3201      	adds	r2, #1
 80105d4:	701a      	strb	r2, [r3, #0]
 80105d6:	e7a0      	b.n	801051a <_dtoa_r+0x622>
 80105d8:	4b6f      	ldr	r3, [pc, #444]	@ (8010798 <_dtoa_r+0x8a0>)
 80105da:	2200      	movs	r2, #0
 80105dc:	f7f0 f834 	bl	8000648 <__aeabi_dmul>
 80105e0:	2200      	movs	r2, #0
 80105e2:	2300      	movs	r3, #0
 80105e4:	4604      	mov	r4, r0
 80105e6:	460d      	mov	r5, r1
 80105e8:	f7f0 fa96 	bl	8000b18 <__aeabi_dcmpeq>
 80105ec:	2800      	cmp	r0, #0
 80105ee:	d09f      	beq.n	8010530 <_dtoa_r+0x638>
 80105f0:	e7d1      	b.n	8010596 <_dtoa_r+0x69e>
 80105f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80105f4:	2a00      	cmp	r2, #0
 80105f6:	f000 80ea 	beq.w	80107ce <_dtoa_r+0x8d6>
 80105fa:	9a07      	ldr	r2, [sp, #28]
 80105fc:	2a01      	cmp	r2, #1
 80105fe:	f300 80cd 	bgt.w	801079c <_dtoa_r+0x8a4>
 8010602:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010604:	2a00      	cmp	r2, #0
 8010606:	f000 80c1 	beq.w	801078c <_dtoa_r+0x894>
 801060a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801060e:	9c08      	ldr	r4, [sp, #32]
 8010610:	9e00      	ldr	r6, [sp, #0]
 8010612:	9a00      	ldr	r2, [sp, #0]
 8010614:	441a      	add	r2, r3
 8010616:	9200      	str	r2, [sp, #0]
 8010618:	9a06      	ldr	r2, [sp, #24]
 801061a:	2101      	movs	r1, #1
 801061c:	441a      	add	r2, r3
 801061e:	4648      	mov	r0, r9
 8010620:	9206      	str	r2, [sp, #24]
 8010622:	f000 fb77 	bl	8010d14 <__i2b>
 8010626:	4605      	mov	r5, r0
 8010628:	b166      	cbz	r6, 8010644 <_dtoa_r+0x74c>
 801062a:	9b06      	ldr	r3, [sp, #24]
 801062c:	2b00      	cmp	r3, #0
 801062e:	dd09      	ble.n	8010644 <_dtoa_r+0x74c>
 8010630:	42b3      	cmp	r3, r6
 8010632:	9a00      	ldr	r2, [sp, #0]
 8010634:	bfa8      	it	ge
 8010636:	4633      	movge	r3, r6
 8010638:	1ad2      	subs	r2, r2, r3
 801063a:	9200      	str	r2, [sp, #0]
 801063c:	9a06      	ldr	r2, [sp, #24]
 801063e:	1af6      	subs	r6, r6, r3
 8010640:	1ad3      	subs	r3, r2, r3
 8010642:	9306      	str	r3, [sp, #24]
 8010644:	9b08      	ldr	r3, [sp, #32]
 8010646:	b30b      	cbz	r3, 801068c <_dtoa_r+0x794>
 8010648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801064a:	2b00      	cmp	r3, #0
 801064c:	f000 80c6 	beq.w	80107dc <_dtoa_r+0x8e4>
 8010650:	2c00      	cmp	r4, #0
 8010652:	f000 80c0 	beq.w	80107d6 <_dtoa_r+0x8de>
 8010656:	4629      	mov	r1, r5
 8010658:	4622      	mov	r2, r4
 801065a:	4648      	mov	r0, r9
 801065c:	f000 fc12 	bl	8010e84 <__pow5mult>
 8010660:	9a02      	ldr	r2, [sp, #8]
 8010662:	4601      	mov	r1, r0
 8010664:	4605      	mov	r5, r0
 8010666:	4648      	mov	r0, r9
 8010668:	f000 fb6a 	bl	8010d40 <__multiply>
 801066c:	9902      	ldr	r1, [sp, #8]
 801066e:	4680      	mov	r8, r0
 8010670:	4648      	mov	r0, r9
 8010672:	f000 fa9b 	bl	8010bac <_Bfree>
 8010676:	9b08      	ldr	r3, [sp, #32]
 8010678:	1b1b      	subs	r3, r3, r4
 801067a:	9308      	str	r3, [sp, #32]
 801067c:	f000 80b1 	beq.w	80107e2 <_dtoa_r+0x8ea>
 8010680:	9a08      	ldr	r2, [sp, #32]
 8010682:	4641      	mov	r1, r8
 8010684:	4648      	mov	r0, r9
 8010686:	f000 fbfd 	bl	8010e84 <__pow5mult>
 801068a:	9002      	str	r0, [sp, #8]
 801068c:	2101      	movs	r1, #1
 801068e:	4648      	mov	r0, r9
 8010690:	f000 fb40 	bl	8010d14 <__i2b>
 8010694:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010696:	4604      	mov	r4, r0
 8010698:	2b00      	cmp	r3, #0
 801069a:	f000 81d8 	beq.w	8010a4e <_dtoa_r+0xb56>
 801069e:	461a      	mov	r2, r3
 80106a0:	4601      	mov	r1, r0
 80106a2:	4648      	mov	r0, r9
 80106a4:	f000 fbee 	bl	8010e84 <__pow5mult>
 80106a8:	9b07      	ldr	r3, [sp, #28]
 80106aa:	2b01      	cmp	r3, #1
 80106ac:	4604      	mov	r4, r0
 80106ae:	f300 809f 	bgt.w	80107f0 <_dtoa_r+0x8f8>
 80106b2:	9b04      	ldr	r3, [sp, #16]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	f040 8097 	bne.w	80107e8 <_dtoa_r+0x8f0>
 80106ba:	9b05      	ldr	r3, [sp, #20]
 80106bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	f040 8093 	bne.w	80107ec <_dtoa_r+0x8f4>
 80106c6:	9b05      	ldr	r3, [sp, #20]
 80106c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80106cc:	0d1b      	lsrs	r3, r3, #20
 80106ce:	051b      	lsls	r3, r3, #20
 80106d0:	b133      	cbz	r3, 80106e0 <_dtoa_r+0x7e8>
 80106d2:	9b00      	ldr	r3, [sp, #0]
 80106d4:	3301      	adds	r3, #1
 80106d6:	9300      	str	r3, [sp, #0]
 80106d8:	9b06      	ldr	r3, [sp, #24]
 80106da:	3301      	adds	r3, #1
 80106dc:	9306      	str	r3, [sp, #24]
 80106de:	2301      	movs	r3, #1
 80106e0:	9308      	str	r3, [sp, #32]
 80106e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	f000 81b8 	beq.w	8010a5a <_dtoa_r+0xb62>
 80106ea:	6923      	ldr	r3, [r4, #16]
 80106ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80106f0:	6918      	ldr	r0, [r3, #16]
 80106f2:	f000 fac3 	bl	8010c7c <__hi0bits>
 80106f6:	f1c0 0020 	rsb	r0, r0, #32
 80106fa:	9b06      	ldr	r3, [sp, #24]
 80106fc:	4418      	add	r0, r3
 80106fe:	f010 001f 	ands.w	r0, r0, #31
 8010702:	f000 8082 	beq.w	801080a <_dtoa_r+0x912>
 8010706:	f1c0 0320 	rsb	r3, r0, #32
 801070a:	2b04      	cmp	r3, #4
 801070c:	dd73      	ble.n	80107f6 <_dtoa_r+0x8fe>
 801070e:	9b00      	ldr	r3, [sp, #0]
 8010710:	f1c0 001c 	rsb	r0, r0, #28
 8010714:	4403      	add	r3, r0
 8010716:	9300      	str	r3, [sp, #0]
 8010718:	9b06      	ldr	r3, [sp, #24]
 801071a:	4403      	add	r3, r0
 801071c:	4406      	add	r6, r0
 801071e:	9306      	str	r3, [sp, #24]
 8010720:	9b00      	ldr	r3, [sp, #0]
 8010722:	2b00      	cmp	r3, #0
 8010724:	dd05      	ble.n	8010732 <_dtoa_r+0x83a>
 8010726:	9902      	ldr	r1, [sp, #8]
 8010728:	461a      	mov	r2, r3
 801072a:	4648      	mov	r0, r9
 801072c:	f000 fc04 	bl	8010f38 <__lshift>
 8010730:	9002      	str	r0, [sp, #8]
 8010732:	9b06      	ldr	r3, [sp, #24]
 8010734:	2b00      	cmp	r3, #0
 8010736:	dd05      	ble.n	8010744 <_dtoa_r+0x84c>
 8010738:	4621      	mov	r1, r4
 801073a:	461a      	mov	r2, r3
 801073c:	4648      	mov	r0, r9
 801073e:	f000 fbfb 	bl	8010f38 <__lshift>
 8010742:	4604      	mov	r4, r0
 8010744:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010746:	2b00      	cmp	r3, #0
 8010748:	d061      	beq.n	801080e <_dtoa_r+0x916>
 801074a:	9802      	ldr	r0, [sp, #8]
 801074c:	4621      	mov	r1, r4
 801074e:	f000 fc5f 	bl	8011010 <__mcmp>
 8010752:	2800      	cmp	r0, #0
 8010754:	da5b      	bge.n	801080e <_dtoa_r+0x916>
 8010756:	2300      	movs	r3, #0
 8010758:	9902      	ldr	r1, [sp, #8]
 801075a:	220a      	movs	r2, #10
 801075c:	4648      	mov	r0, r9
 801075e:	f000 fa47 	bl	8010bf0 <__multadd>
 8010762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010764:	9002      	str	r0, [sp, #8]
 8010766:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 801076a:	2b00      	cmp	r3, #0
 801076c:	f000 8177 	beq.w	8010a5e <_dtoa_r+0xb66>
 8010770:	4629      	mov	r1, r5
 8010772:	2300      	movs	r3, #0
 8010774:	220a      	movs	r2, #10
 8010776:	4648      	mov	r0, r9
 8010778:	f000 fa3a 	bl	8010bf0 <__multadd>
 801077c:	f1bb 0f00 	cmp.w	fp, #0
 8010780:	4605      	mov	r5, r0
 8010782:	dc6f      	bgt.n	8010864 <_dtoa_r+0x96c>
 8010784:	9b07      	ldr	r3, [sp, #28]
 8010786:	2b02      	cmp	r3, #2
 8010788:	dc49      	bgt.n	801081e <_dtoa_r+0x926>
 801078a:	e06b      	b.n	8010864 <_dtoa_r+0x96c>
 801078c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801078e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010792:	e73c      	b.n	801060e <_dtoa_r+0x716>
 8010794:	3fe00000 	.word	0x3fe00000
 8010798:	40240000 	.word	0x40240000
 801079c:	9b03      	ldr	r3, [sp, #12]
 801079e:	1e5c      	subs	r4, r3, #1
 80107a0:	9b08      	ldr	r3, [sp, #32]
 80107a2:	42a3      	cmp	r3, r4
 80107a4:	db09      	blt.n	80107ba <_dtoa_r+0x8c2>
 80107a6:	1b1c      	subs	r4, r3, r4
 80107a8:	9b03      	ldr	r3, [sp, #12]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	f6bf af30 	bge.w	8010610 <_dtoa_r+0x718>
 80107b0:	9b00      	ldr	r3, [sp, #0]
 80107b2:	9a03      	ldr	r2, [sp, #12]
 80107b4:	1a9e      	subs	r6, r3, r2
 80107b6:	2300      	movs	r3, #0
 80107b8:	e72b      	b.n	8010612 <_dtoa_r+0x71a>
 80107ba:	9b08      	ldr	r3, [sp, #32]
 80107bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80107be:	9408      	str	r4, [sp, #32]
 80107c0:	1ae3      	subs	r3, r4, r3
 80107c2:	441a      	add	r2, r3
 80107c4:	9e00      	ldr	r6, [sp, #0]
 80107c6:	9b03      	ldr	r3, [sp, #12]
 80107c8:	920d      	str	r2, [sp, #52]	@ 0x34
 80107ca:	2400      	movs	r4, #0
 80107cc:	e721      	b.n	8010612 <_dtoa_r+0x71a>
 80107ce:	9c08      	ldr	r4, [sp, #32]
 80107d0:	9e00      	ldr	r6, [sp, #0]
 80107d2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80107d4:	e728      	b.n	8010628 <_dtoa_r+0x730>
 80107d6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80107da:	e751      	b.n	8010680 <_dtoa_r+0x788>
 80107dc:	9a08      	ldr	r2, [sp, #32]
 80107de:	9902      	ldr	r1, [sp, #8]
 80107e0:	e750      	b.n	8010684 <_dtoa_r+0x78c>
 80107e2:	f8cd 8008 	str.w	r8, [sp, #8]
 80107e6:	e751      	b.n	801068c <_dtoa_r+0x794>
 80107e8:	2300      	movs	r3, #0
 80107ea:	e779      	b.n	80106e0 <_dtoa_r+0x7e8>
 80107ec:	9b04      	ldr	r3, [sp, #16]
 80107ee:	e777      	b.n	80106e0 <_dtoa_r+0x7e8>
 80107f0:	2300      	movs	r3, #0
 80107f2:	9308      	str	r3, [sp, #32]
 80107f4:	e779      	b.n	80106ea <_dtoa_r+0x7f2>
 80107f6:	d093      	beq.n	8010720 <_dtoa_r+0x828>
 80107f8:	9a00      	ldr	r2, [sp, #0]
 80107fa:	331c      	adds	r3, #28
 80107fc:	441a      	add	r2, r3
 80107fe:	9200      	str	r2, [sp, #0]
 8010800:	9a06      	ldr	r2, [sp, #24]
 8010802:	441a      	add	r2, r3
 8010804:	441e      	add	r6, r3
 8010806:	9206      	str	r2, [sp, #24]
 8010808:	e78a      	b.n	8010720 <_dtoa_r+0x828>
 801080a:	4603      	mov	r3, r0
 801080c:	e7f4      	b.n	80107f8 <_dtoa_r+0x900>
 801080e:	9b03      	ldr	r3, [sp, #12]
 8010810:	2b00      	cmp	r3, #0
 8010812:	46b8      	mov	r8, r7
 8010814:	dc20      	bgt.n	8010858 <_dtoa_r+0x960>
 8010816:	469b      	mov	fp, r3
 8010818:	9b07      	ldr	r3, [sp, #28]
 801081a:	2b02      	cmp	r3, #2
 801081c:	dd1e      	ble.n	801085c <_dtoa_r+0x964>
 801081e:	f1bb 0f00 	cmp.w	fp, #0
 8010822:	f47f adb1 	bne.w	8010388 <_dtoa_r+0x490>
 8010826:	4621      	mov	r1, r4
 8010828:	465b      	mov	r3, fp
 801082a:	2205      	movs	r2, #5
 801082c:	4648      	mov	r0, r9
 801082e:	f000 f9df 	bl	8010bf0 <__multadd>
 8010832:	4601      	mov	r1, r0
 8010834:	4604      	mov	r4, r0
 8010836:	9802      	ldr	r0, [sp, #8]
 8010838:	f000 fbea 	bl	8011010 <__mcmp>
 801083c:	2800      	cmp	r0, #0
 801083e:	f77f ada3 	ble.w	8010388 <_dtoa_r+0x490>
 8010842:	4656      	mov	r6, sl
 8010844:	2331      	movs	r3, #49	@ 0x31
 8010846:	f806 3b01 	strb.w	r3, [r6], #1
 801084a:	f108 0801 	add.w	r8, r8, #1
 801084e:	e59f      	b.n	8010390 <_dtoa_r+0x498>
 8010850:	9c03      	ldr	r4, [sp, #12]
 8010852:	46b8      	mov	r8, r7
 8010854:	4625      	mov	r5, r4
 8010856:	e7f4      	b.n	8010842 <_dtoa_r+0x94a>
 8010858:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801085c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801085e:	2b00      	cmp	r3, #0
 8010860:	f000 8101 	beq.w	8010a66 <_dtoa_r+0xb6e>
 8010864:	2e00      	cmp	r6, #0
 8010866:	dd05      	ble.n	8010874 <_dtoa_r+0x97c>
 8010868:	4629      	mov	r1, r5
 801086a:	4632      	mov	r2, r6
 801086c:	4648      	mov	r0, r9
 801086e:	f000 fb63 	bl	8010f38 <__lshift>
 8010872:	4605      	mov	r5, r0
 8010874:	9b08      	ldr	r3, [sp, #32]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d05c      	beq.n	8010934 <_dtoa_r+0xa3c>
 801087a:	6869      	ldr	r1, [r5, #4]
 801087c:	4648      	mov	r0, r9
 801087e:	f000 f955 	bl	8010b2c <_Balloc>
 8010882:	4606      	mov	r6, r0
 8010884:	b928      	cbnz	r0, 8010892 <_dtoa_r+0x99a>
 8010886:	4b82      	ldr	r3, [pc, #520]	@ (8010a90 <_dtoa_r+0xb98>)
 8010888:	4602      	mov	r2, r0
 801088a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801088e:	f7ff bb4a 	b.w	800ff26 <_dtoa_r+0x2e>
 8010892:	692a      	ldr	r2, [r5, #16]
 8010894:	3202      	adds	r2, #2
 8010896:	0092      	lsls	r2, r2, #2
 8010898:	f105 010c 	add.w	r1, r5, #12
 801089c:	300c      	adds	r0, #12
 801089e:	f000 fedd 	bl	801165c <memcpy>
 80108a2:	2201      	movs	r2, #1
 80108a4:	4631      	mov	r1, r6
 80108a6:	4648      	mov	r0, r9
 80108a8:	f000 fb46 	bl	8010f38 <__lshift>
 80108ac:	f10a 0301 	add.w	r3, sl, #1
 80108b0:	9300      	str	r3, [sp, #0]
 80108b2:	eb0a 030b 	add.w	r3, sl, fp
 80108b6:	9308      	str	r3, [sp, #32]
 80108b8:	9b04      	ldr	r3, [sp, #16]
 80108ba:	f003 0301 	and.w	r3, r3, #1
 80108be:	462f      	mov	r7, r5
 80108c0:	9306      	str	r3, [sp, #24]
 80108c2:	4605      	mov	r5, r0
 80108c4:	9b00      	ldr	r3, [sp, #0]
 80108c6:	9802      	ldr	r0, [sp, #8]
 80108c8:	4621      	mov	r1, r4
 80108ca:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80108ce:	f7ff fa8a 	bl	800fde6 <quorem>
 80108d2:	4603      	mov	r3, r0
 80108d4:	3330      	adds	r3, #48	@ 0x30
 80108d6:	9003      	str	r0, [sp, #12]
 80108d8:	4639      	mov	r1, r7
 80108da:	9802      	ldr	r0, [sp, #8]
 80108dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80108de:	f000 fb97 	bl	8011010 <__mcmp>
 80108e2:	462a      	mov	r2, r5
 80108e4:	9004      	str	r0, [sp, #16]
 80108e6:	4621      	mov	r1, r4
 80108e8:	4648      	mov	r0, r9
 80108ea:	f000 fbad 	bl	8011048 <__mdiff>
 80108ee:	68c2      	ldr	r2, [r0, #12]
 80108f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108f2:	4606      	mov	r6, r0
 80108f4:	bb02      	cbnz	r2, 8010938 <_dtoa_r+0xa40>
 80108f6:	4601      	mov	r1, r0
 80108f8:	9802      	ldr	r0, [sp, #8]
 80108fa:	f000 fb89 	bl	8011010 <__mcmp>
 80108fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010900:	4602      	mov	r2, r0
 8010902:	4631      	mov	r1, r6
 8010904:	4648      	mov	r0, r9
 8010906:	920c      	str	r2, [sp, #48]	@ 0x30
 8010908:	9309      	str	r3, [sp, #36]	@ 0x24
 801090a:	f000 f94f 	bl	8010bac <_Bfree>
 801090e:	9b07      	ldr	r3, [sp, #28]
 8010910:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010912:	9e00      	ldr	r6, [sp, #0]
 8010914:	ea42 0103 	orr.w	r1, r2, r3
 8010918:	9b06      	ldr	r3, [sp, #24]
 801091a:	4319      	orrs	r1, r3
 801091c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801091e:	d10d      	bne.n	801093c <_dtoa_r+0xa44>
 8010920:	2b39      	cmp	r3, #57	@ 0x39
 8010922:	d027      	beq.n	8010974 <_dtoa_r+0xa7c>
 8010924:	9a04      	ldr	r2, [sp, #16]
 8010926:	2a00      	cmp	r2, #0
 8010928:	dd01      	ble.n	801092e <_dtoa_r+0xa36>
 801092a:	9b03      	ldr	r3, [sp, #12]
 801092c:	3331      	adds	r3, #49	@ 0x31
 801092e:	f88b 3000 	strb.w	r3, [fp]
 8010932:	e52e      	b.n	8010392 <_dtoa_r+0x49a>
 8010934:	4628      	mov	r0, r5
 8010936:	e7b9      	b.n	80108ac <_dtoa_r+0x9b4>
 8010938:	2201      	movs	r2, #1
 801093a:	e7e2      	b.n	8010902 <_dtoa_r+0xa0a>
 801093c:	9904      	ldr	r1, [sp, #16]
 801093e:	2900      	cmp	r1, #0
 8010940:	db04      	blt.n	801094c <_dtoa_r+0xa54>
 8010942:	9807      	ldr	r0, [sp, #28]
 8010944:	4301      	orrs	r1, r0
 8010946:	9806      	ldr	r0, [sp, #24]
 8010948:	4301      	orrs	r1, r0
 801094a:	d120      	bne.n	801098e <_dtoa_r+0xa96>
 801094c:	2a00      	cmp	r2, #0
 801094e:	ddee      	ble.n	801092e <_dtoa_r+0xa36>
 8010950:	9902      	ldr	r1, [sp, #8]
 8010952:	9300      	str	r3, [sp, #0]
 8010954:	2201      	movs	r2, #1
 8010956:	4648      	mov	r0, r9
 8010958:	f000 faee 	bl	8010f38 <__lshift>
 801095c:	4621      	mov	r1, r4
 801095e:	9002      	str	r0, [sp, #8]
 8010960:	f000 fb56 	bl	8011010 <__mcmp>
 8010964:	2800      	cmp	r0, #0
 8010966:	9b00      	ldr	r3, [sp, #0]
 8010968:	dc02      	bgt.n	8010970 <_dtoa_r+0xa78>
 801096a:	d1e0      	bne.n	801092e <_dtoa_r+0xa36>
 801096c:	07da      	lsls	r2, r3, #31
 801096e:	d5de      	bpl.n	801092e <_dtoa_r+0xa36>
 8010970:	2b39      	cmp	r3, #57	@ 0x39
 8010972:	d1da      	bne.n	801092a <_dtoa_r+0xa32>
 8010974:	2339      	movs	r3, #57	@ 0x39
 8010976:	f88b 3000 	strb.w	r3, [fp]
 801097a:	4633      	mov	r3, r6
 801097c:	461e      	mov	r6, r3
 801097e:	3b01      	subs	r3, #1
 8010980:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010984:	2a39      	cmp	r2, #57	@ 0x39
 8010986:	d04e      	beq.n	8010a26 <_dtoa_r+0xb2e>
 8010988:	3201      	adds	r2, #1
 801098a:	701a      	strb	r2, [r3, #0]
 801098c:	e501      	b.n	8010392 <_dtoa_r+0x49a>
 801098e:	2a00      	cmp	r2, #0
 8010990:	dd03      	ble.n	801099a <_dtoa_r+0xaa2>
 8010992:	2b39      	cmp	r3, #57	@ 0x39
 8010994:	d0ee      	beq.n	8010974 <_dtoa_r+0xa7c>
 8010996:	3301      	adds	r3, #1
 8010998:	e7c9      	b.n	801092e <_dtoa_r+0xa36>
 801099a:	9a00      	ldr	r2, [sp, #0]
 801099c:	9908      	ldr	r1, [sp, #32]
 801099e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80109a2:	428a      	cmp	r2, r1
 80109a4:	d028      	beq.n	80109f8 <_dtoa_r+0xb00>
 80109a6:	9902      	ldr	r1, [sp, #8]
 80109a8:	2300      	movs	r3, #0
 80109aa:	220a      	movs	r2, #10
 80109ac:	4648      	mov	r0, r9
 80109ae:	f000 f91f 	bl	8010bf0 <__multadd>
 80109b2:	42af      	cmp	r7, r5
 80109b4:	9002      	str	r0, [sp, #8]
 80109b6:	f04f 0300 	mov.w	r3, #0
 80109ba:	f04f 020a 	mov.w	r2, #10
 80109be:	4639      	mov	r1, r7
 80109c0:	4648      	mov	r0, r9
 80109c2:	d107      	bne.n	80109d4 <_dtoa_r+0xadc>
 80109c4:	f000 f914 	bl	8010bf0 <__multadd>
 80109c8:	4607      	mov	r7, r0
 80109ca:	4605      	mov	r5, r0
 80109cc:	9b00      	ldr	r3, [sp, #0]
 80109ce:	3301      	adds	r3, #1
 80109d0:	9300      	str	r3, [sp, #0]
 80109d2:	e777      	b.n	80108c4 <_dtoa_r+0x9cc>
 80109d4:	f000 f90c 	bl	8010bf0 <__multadd>
 80109d8:	4629      	mov	r1, r5
 80109da:	4607      	mov	r7, r0
 80109dc:	2300      	movs	r3, #0
 80109de:	220a      	movs	r2, #10
 80109e0:	4648      	mov	r0, r9
 80109e2:	f000 f905 	bl	8010bf0 <__multadd>
 80109e6:	4605      	mov	r5, r0
 80109e8:	e7f0      	b.n	80109cc <_dtoa_r+0xad4>
 80109ea:	f1bb 0f00 	cmp.w	fp, #0
 80109ee:	bfcc      	ite	gt
 80109f0:	465e      	movgt	r6, fp
 80109f2:	2601      	movle	r6, #1
 80109f4:	4456      	add	r6, sl
 80109f6:	2700      	movs	r7, #0
 80109f8:	9902      	ldr	r1, [sp, #8]
 80109fa:	9300      	str	r3, [sp, #0]
 80109fc:	2201      	movs	r2, #1
 80109fe:	4648      	mov	r0, r9
 8010a00:	f000 fa9a 	bl	8010f38 <__lshift>
 8010a04:	4621      	mov	r1, r4
 8010a06:	9002      	str	r0, [sp, #8]
 8010a08:	f000 fb02 	bl	8011010 <__mcmp>
 8010a0c:	2800      	cmp	r0, #0
 8010a0e:	dcb4      	bgt.n	801097a <_dtoa_r+0xa82>
 8010a10:	d102      	bne.n	8010a18 <_dtoa_r+0xb20>
 8010a12:	9b00      	ldr	r3, [sp, #0]
 8010a14:	07db      	lsls	r3, r3, #31
 8010a16:	d4b0      	bmi.n	801097a <_dtoa_r+0xa82>
 8010a18:	4633      	mov	r3, r6
 8010a1a:	461e      	mov	r6, r3
 8010a1c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010a20:	2a30      	cmp	r2, #48	@ 0x30
 8010a22:	d0fa      	beq.n	8010a1a <_dtoa_r+0xb22>
 8010a24:	e4b5      	b.n	8010392 <_dtoa_r+0x49a>
 8010a26:	459a      	cmp	sl, r3
 8010a28:	d1a8      	bne.n	801097c <_dtoa_r+0xa84>
 8010a2a:	2331      	movs	r3, #49	@ 0x31
 8010a2c:	f108 0801 	add.w	r8, r8, #1
 8010a30:	f88a 3000 	strb.w	r3, [sl]
 8010a34:	e4ad      	b.n	8010392 <_dtoa_r+0x49a>
 8010a36:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010a38:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8010a94 <_dtoa_r+0xb9c>
 8010a3c:	b11b      	cbz	r3, 8010a46 <_dtoa_r+0xb4e>
 8010a3e:	f10a 0308 	add.w	r3, sl, #8
 8010a42:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010a44:	6013      	str	r3, [r2, #0]
 8010a46:	4650      	mov	r0, sl
 8010a48:	b017      	add	sp, #92	@ 0x5c
 8010a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a4e:	9b07      	ldr	r3, [sp, #28]
 8010a50:	2b01      	cmp	r3, #1
 8010a52:	f77f ae2e 	ble.w	80106b2 <_dtoa_r+0x7ba>
 8010a56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010a58:	9308      	str	r3, [sp, #32]
 8010a5a:	2001      	movs	r0, #1
 8010a5c:	e64d      	b.n	80106fa <_dtoa_r+0x802>
 8010a5e:	f1bb 0f00 	cmp.w	fp, #0
 8010a62:	f77f aed9 	ble.w	8010818 <_dtoa_r+0x920>
 8010a66:	4656      	mov	r6, sl
 8010a68:	9802      	ldr	r0, [sp, #8]
 8010a6a:	4621      	mov	r1, r4
 8010a6c:	f7ff f9bb 	bl	800fde6 <quorem>
 8010a70:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8010a74:	f806 3b01 	strb.w	r3, [r6], #1
 8010a78:	eba6 020a 	sub.w	r2, r6, sl
 8010a7c:	4593      	cmp	fp, r2
 8010a7e:	ddb4      	ble.n	80109ea <_dtoa_r+0xaf2>
 8010a80:	9902      	ldr	r1, [sp, #8]
 8010a82:	2300      	movs	r3, #0
 8010a84:	220a      	movs	r2, #10
 8010a86:	4648      	mov	r0, r9
 8010a88:	f000 f8b2 	bl	8010bf0 <__multadd>
 8010a8c:	9002      	str	r0, [sp, #8]
 8010a8e:	e7eb      	b.n	8010a68 <_dtoa_r+0xb70>
 8010a90:	08011e90 	.word	0x08011e90
 8010a94:	08011e14 	.word	0x08011e14

08010a98 <_free_r>:
 8010a98:	b538      	push	{r3, r4, r5, lr}
 8010a9a:	4605      	mov	r5, r0
 8010a9c:	2900      	cmp	r1, #0
 8010a9e:	d041      	beq.n	8010b24 <_free_r+0x8c>
 8010aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010aa4:	1f0c      	subs	r4, r1, #4
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	bfb8      	it	lt
 8010aaa:	18e4      	addlt	r4, r4, r3
 8010aac:	f7fe fb6e 	bl	800f18c <__malloc_lock>
 8010ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8010b28 <_free_r+0x90>)
 8010ab2:	6813      	ldr	r3, [r2, #0]
 8010ab4:	b933      	cbnz	r3, 8010ac4 <_free_r+0x2c>
 8010ab6:	6063      	str	r3, [r4, #4]
 8010ab8:	6014      	str	r4, [r2, #0]
 8010aba:	4628      	mov	r0, r5
 8010abc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ac0:	f7fe bb6a 	b.w	800f198 <__malloc_unlock>
 8010ac4:	42a3      	cmp	r3, r4
 8010ac6:	d908      	bls.n	8010ada <_free_r+0x42>
 8010ac8:	6820      	ldr	r0, [r4, #0]
 8010aca:	1821      	adds	r1, r4, r0
 8010acc:	428b      	cmp	r3, r1
 8010ace:	bf01      	itttt	eq
 8010ad0:	6819      	ldreq	r1, [r3, #0]
 8010ad2:	685b      	ldreq	r3, [r3, #4]
 8010ad4:	1809      	addeq	r1, r1, r0
 8010ad6:	6021      	streq	r1, [r4, #0]
 8010ad8:	e7ed      	b.n	8010ab6 <_free_r+0x1e>
 8010ada:	461a      	mov	r2, r3
 8010adc:	685b      	ldr	r3, [r3, #4]
 8010ade:	b10b      	cbz	r3, 8010ae4 <_free_r+0x4c>
 8010ae0:	42a3      	cmp	r3, r4
 8010ae2:	d9fa      	bls.n	8010ada <_free_r+0x42>
 8010ae4:	6811      	ldr	r1, [r2, #0]
 8010ae6:	1850      	adds	r0, r2, r1
 8010ae8:	42a0      	cmp	r0, r4
 8010aea:	d10b      	bne.n	8010b04 <_free_r+0x6c>
 8010aec:	6820      	ldr	r0, [r4, #0]
 8010aee:	4401      	add	r1, r0
 8010af0:	1850      	adds	r0, r2, r1
 8010af2:	4283      	cmp	r3, r0
 8010af4:	6011      	str	r1, [r2, #0]
 8010af6:	d1e0      	bne.n	8010aba <_free_r+0x22>
 8010af8:	6818      	ldr	r0, [r3, #0]
 8010afa:	685b      	ldr	r3, [r3, #4]
 8010afc:	6053      	str	r3, [r2, #4]
 8010afe:	4408      	add	r0, r1
 8010b00:	6010      	str	r0, [r2, #0]
 8010b02:	e7da      	b.n	8010aba <_free_r+0x22>
 8010b04:	d902      	bls.n	8010b0c <_free_r+0x74>
 8010b06:	230c      	movs	r3, #12
 8010b08:	602b      	str	r3, [r5, #0]
 8010b0a:	e7d6      	b.n	8010aba <_free_r+0x22>
 8010b0c:	6820      	ldr	r0, [r4, #0]
 8010b0e:	1821      	adds	r1, r4, r0
 8010b10:	428b      	cmp	r3, r1
 8010b12:	bf04      	itt	eq
 8010b14:	6819      	ldreq	r1, [r3, #0]
 8010b16:	685b      	ldreq	r3, [r3, #4]
 8010b18:	6063      	str	r3, [r4, #4]
 8010b1a:	bf04      	itt	eq
 8010b1c:	1809      	addeq	r1, r1, r0
 8010b1e:	6021      	streq	r1, [r4, #0]
 8010b20:	6054      	str	r4, [r2, #4]
 8010b22:	e7ca      	b.n	8010aba <_free_r+0x22>
 8010b24:	bd38      	pop	{r3, r4, r5, pc}
 8010b26:	bf00      	nop
 8010b28:	20002548 	.word	0x20002548

08010b2c <_Balloc>:
 8010b2c:	b570      	push	{r4, r5, r6, lr}
 8010b2e:	69c6      	ldr	r6, [r0, #28]
 8010b30:	4604      	mov	r4, r0
 8010b32:	460d      	mov	r5, r1
 8010b34:	b976      	cbnz	r6, 8010b54 <_Balloc+0x28>
 8010b36:	2010      	movs	r0, #16
 8010b38:	f7fe fa76 	bl	800f028 <malloc>
 8010b3c:	4602      	mov	r2, r0
 8010b3e:	61e0      	str	r0, [r4, #28]
 8010b40:	b920      	cbnz	r0, 8010b4c <_Balloc+0x20>
 8010b42:	4b18      	ldr	r3, [pc, #96]	@ (8010ba4 <_Balloc+0x78>)
 8010b44:	4818      	ldr	r0, [pc, #96]	@ (8010ba8 <_Balloc+0x7c>)
 8010b46:	216b      	movs	r1, #107	@ 0x6b
 8010b48:	f000 fd96 	bl	8011678 <__assert_func>
 8010b4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010b50:	6006      	str	r6, [r0, #0]
 8010b52:	60c6      	str	r6, [r0, #12]
 8010b54:	69e6      	ldr	r6, [r4, #28]
 8010b56:	68f3      	ldr	r3, [r6, #12]
 8010b58:	b183      	cbz	r3, 8010b7c <_Balloc+0x50>
 8010b5a:	69e3      	ldr	r3, [r4, #28]
 8010b5c:	68db      	ldr	r3, [r3, #12]
 8010b5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010b62:	b9b8      	cbnz	r0, 8010b94 <_Balloc+0x68>
 8010b64:	2101      	movs	r1, #1
 8010b66:	fa01 f605 	lsl.w	r6, r1, r5
 8010b6a:	1d72      	adds	r2, r6, #5
 8010b6c:	0092      	lsls	r2, r2, #2
 8010b6e:	4620      	mov	r0, r4
 8010b70:	f000 fda0 	bl	80116b4 <_calloc_r>
 8010b74:	b160      	cbz	r0, 8010b90 <_Balloc+0x64>
 8010b76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010b7a:	e00e      	b.n	8010b9a <_Balloc+0x6e>
 8010b7c:	2221      	movs	r2, #33	@ 0x21
 8010b7e:	2104      	movs	r1, #4
 8010b80:	4620      	mov	r0, r4
 8010b82:	f000 fd97 	bl	80116b4 <_calloc_r>
 8010b86:	69e3      	ldr	r3, [r4, #28]
 8010b88:	60f0      	str	r0, [r6, #12]
 8010b8a:	68db      	ldr	r3, [r3, #12]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d1e4      	bne.n	8010b5a <_Balloc+0x2e>
 8010b90:	2000      	movs	r0, #0
 8010b92:	bd70      	pop	{r4, r5, r6, pc}
 8010b94:	6802      	ldr	r2, [r0, #0]
 8010b96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010ba0:	e7f7      	b.n	8010b92 <_Balloc+0x66>
 8010ba2:	bf00      	nop
 8010ba4:	08011e21 	.word	0x08011e21
 8010ba8:	08011ea1 	.word	0x08011ea1

08010bac <_Bfree>:
 8010bac:	b570      	push	{r4, r5, r6, lr}
 8010bae:	69c6      	ldr	r6, [r0, #28]
 8010bb0:	4605      	mov	r5, r0
 8010bb2:	460c      	mov	r4, r1
 8010bb4:	b976      	cbnz	r6, 8010bd4 <_Bfree+0x28>
 8010bb6:	2010      	movs	r0, #16
 8010bb8:	f7fe fa36 	bl	800f028 <malloc>
 8010bbc:	4602      	mov	r2, r0
 8010bbe:	61e8      	str	r0, [r5, #28]
 8010bc0:	b920      	cbnz	r0, 8010bcc <_Bfree+0x20>
 8010bc2:	4b09      	ldr	r3, [pc, #36]	@ (8010be8 <_Bfree+0x3c>)
 8010bc4:	4809      	ldr	r0, [pc, #36]	@ (8010bec <_Bfree+0x40>)
 8010bc6:	218f      	movs	r1, #143	@ 0x8f
 8010bc8:	f000 fd56 	bl	8011678 <__assert_func>
 8010bcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010bd0:	6006      	str	r6, [r0, #0]
 8010bd2:	60c6      	str	r6, [r0, #12]
 8010bd4:	b13c      	cbz	r4, 8010be6 <_Bfree+0x3a>
 8010bd6:	69eb      	ldr	r3, [r5, #28]
 8010bd8:	6862      	ldr	r2, [r4, #4]
 8010bda:	68db      	ldr	r3, [r3, #12]
 8010bdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010be0:	6021      	str	r1, [r4, #0]
 8010be2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010be6:	bd70      	pop	{r4, r5, r6, pc}
 8010be8:	08011e21 	.word	0x08011e21
 8010bec:	08011ea1 	.word	0x08011ea1

08010bf0 <__multadd>:
 8010bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bf4:	690d      	ldr	r5, [r1, #16]
 8010bf6:	4607      	mov	r7, r0
 8010bf8:	460c      	mov	r4, r1
 8010bfa:	461e      	mov	r6, r3
 8010bfc:	f101 0c14 	add.w	ip, r1, #20
 8010c00:	2000      	movs	r0, #0
 8010c02:	f8dc 3000 	ldr.w	r3, [ip]
 8010c06:	b299      	uxth	r1, r3
 8010c08:	fb02 6101 	mla	r1, r2, r1, r6
 8010c0c:	0c1e      	lsrs	r6, r3, #16
 8010c0e:	0c0b      	lsrs	r3, r1, #16
 8010c10:	fb02 3306 	mla	r3, r2, r6, r3
 8010c14:	b289      	uxth	r1, r1
 8010c16:	3001      	adds	r0, #1
 8010c18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010c1c:	4285      	cmp	r5, r0
 8010c1e:	f84c 1b04 	str.w	r1, [ip], #4
 8010c22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010c26:	dcec      	bgt.n	8010c02 <__multadd+0x12>
 8010c28:	b30e      	cbz	r6, 8010c6e <__multadd+0x7e>
 8010c2a:	68a3      	ldr	r3, [r4, #8]
 8010c2c:	42ab      	cmp	r3, r5
 8010c2e:	dc19      	bgt.n	8010c64 <__multadd+0x74>
 8010c30:	6861      	ldr	r1, [r4, #4]
 8010c32:	4638      	mov	r0, r7
 8010c34:	3101      	adds	r1, #1
 8010c36:	f7ff ff79 	bl	8010b2c <_Balloc>
 8010c3a:	4680      	mov	r8, r0
 8010c3c:	b928      	cbnz	r0, 8010c4a <__multadd+0x5a>
 8010c3e:	4602      	mov	r2, r0
 8010c40:	4b0c      	ldr	r3, [pc, #48]	@ (8010c74 <__multadd+0x84>)
 8010c42:	480d      	ldr	r0, [pc, #52]	@ (8010c78 <__multadd+0x88>)
 8010c44:	21ba      	movs	r1, #186	@ 0xba
 8010c46:	f000 fd17 	bl	8011678 <__assert_func>
 8010c4a:	6922      	ldr	r2, [r4, #16]
 8010c4c:	3202      	adds	r2, #2
 8010c4e:	f104 010c 	add.w	r1, r4, #12
 8010c52:	0092      	lsls	r2, r2, #2
 8010c54:	300c      	adds	r0, #12
 8010c56:	f000 fd01 	bl	801165c <memcpy>
 8010c5a:	4621      	mov	r1, r4
 8010c5c:	4638      	mov	r0, r7
 8010c5e:	f7ff ffa5 	bl	8010bac <_Bfree>
 8010c62:	4644      	mov	r4, r8
 8010c64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010c68:	3501      	adds	r5, #1
 8010c6a:	615e      	str	r6, [r3, #20]
 8010c6c:	6125      	str	r5, [r4, #16]
 8010c6e:	4620      	mov	r0, r4
 8010c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c74:	08011e90 	.word	0x08011e90
 8010c78:	08011ea1 	.word	0x08011ea1

08010c7c <__hi0bits>:
 8010c7c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010c80:	4603      	mov	r3, r0
 8010c82:	bf36      	itet	cc
 8010c84:	0403      	lslcc	r3, r0, #16
 8010c86:	2000      	movcs	r0, #0
 8010c88:	2010      	movcc	r0, #16
 8010c8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010c8e:	bf3c      	itt	cc
 8010c90:	021b      	lslcc	r3, r3, #8
 8010c92:	3008      	addcc	r0, #8
 8010c94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010c98:	bf3c      	itt	cc
 8010c9a:	011b      	lslcc	r3, r3, #4
 8010c9c:	3004      	addcc	r0, #4
 8010c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010ca2:	bf3c      	itt	cc
 8010ca4:	009b      	lslcc	r3, r3, #2
 8010ca6:	3002      	addcc	r0, #2
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	db05      	blt.n	8010cb8 <__hi0bits+0x3c>
 8010cac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010cb0:	f100 0001 	add.w	r0, r0, #1
 8010cb4:	bf08      	it	eq
 8010cb6:	2020      	moveq	r0, #32
 8010cb8:	4770      	bx	lr

08010cba <__lo0bits>:
 8010cba:	6803      	ldr	r3, [r0, #0]
 8010cbc:	4602      	mov	r2, r0
 8010cbe:	f013 0007 	ands.w	r0, r3, #7
 8010cc2:	d00b      	beq.n	8010cdc <__lo0bits+0x22>
 8010cc4:	07d9      	lsls	r1, r3, #31
 8010cc6:	d421      	bmi.n	8010d0c <__lo0bits+0x52>
 8010cc8:	0798      	lsls	r0, r3, #30
 8010cca:	bf49      	itett	mi
 8010ccc:	085b      	lsrmi	r3, r3, #1
 8010cce:	089b      	lsrpl	r3, r3, #2
 8010cd0:	2001      	movmi	r0, #1
 8010cd2:	6013      	strmi	r3, [r2, #0]
 8010cd4:	bf5c      	itt	pl
 8010cd6:	6013      	strpl	r3, [r2, #0]
 8010cd8:	2002      	movpl	r0, #2
 8010cda:	4770      	bx	lr
 8010cdc:	b299      	uxth	r1, r3
 8010cde:	b909      	cbnz	r1, 8010ce4 <__lo0bits+0x2a>
 8010ce0:	0c1b      	lsrs	r3, r3, #16
 8010ce2:	2010      	movs	r0, #16
 8010ce4:	b2d9      	uxtb	r1, r3
 8010ce6:	b909      	cbnz	r1, 8010cec <__lo0bits+0x32>
 8010ce8:	3008      	adds	r0, #8
 8010cea:	0a1b      	lsrs	r3, r3, #8
 8010cec:	0719      	lsls	r1, r3, #28
 8010cee:	bf04      	itt	eq
 8010cf0:	091b      	lsreq	r3, r3, #4
 8010cf2:	3004      	addeq	r0, #4
 8010cf4:	0799      	lsls	r1, r3, #30
 8010cf6:	bf04      	itt	eq
 8010cf8:	089b      	lsreq	r3, r3, #2
 8010cfa:	3002      	addeq	r0, #2
 8010cfc:	07d9      	lsls	r1, r3, #31
 8010cfe:	d403      	bmi.n	8010d08 <__lo0bits+0x4e>
 8010d00:	085b      	lsrs	r3, r3, #1
 8010d02:	f100 0001 	add.w	r0, r0, #1
 8010d06:	d003      	beq.n	8010d10 <__lo0bits+0x56>
 8010d08:	6013      	str	r3, [r2, #0]
 8010d0a:	4770      	bx	lr
 8010d0c:	2000      	movs	r0, #0
 8010d0e:	4770      	bx	lr
 8010d10:	2020      	movs	r0, #32
 8010d12:	4770      	bx	lr

08010d14 <__i2b>:
 8010d14:	b510      	push	{r4, lr}
 8010d16:	460c      	mov	r4, r1
 8010d18:	2101      	movs	r1, #1
 8010d1a:	f7ff ff07 	bl	8010b2c <_Balloc>
 8010d1e:	4602      	mov	r2, r0
 8010d20:	b928      	cbnz	r0, 8010d2e <__i2b+0x1a>
 8010d22:	4b05      	ldr	r3, [pc, #20]	@ (8010d38 <__i2b+0x24>)
 8010d24:	4805      	ldr	r0, [pc, #20]	@ (8010d3c <__i2b+0x28>)
 8010d26:	f240 1145 	movw	r1, #325	@ 0x145
 8010d2a:	f000 fca5 	bl	8011678 <__assert_func>
 8010d2e:	2301      	movs	r3, #1
 8010d30:	6144      	str	r4, [r0, #20]
 8010d32:	6103      	str	r3, [r0, #16]
 8010d34:	bd10      	pop	{r4, pc}
 8010d36:	bf00      	nop
 8010d38:	08011e90 	.word	0x08011e90
 8010d3c:	08011ea1 	.word	0x08011ea1

08010d40 <__multiply>:
 8010d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d44:	4617      	mov	r7, r2
 8010d46:	690a      	ldr	r2, [r1, #16]
 8010d48:	693b      	ldr	r3, [r7, #16]
 8010d4a:	429a      	cmp	r2, r3
 8010d4c:	bfa8      	it	ge
 8010d4e:	463b      	movge	r3, r7
 8010d50:	4689      	mov	r9, r1
 8010d52:	bfa4      	itt	ge
 8010d54:	460f      	movge	r7, r1
 8010d56:	4699      	movge	r9, r3
 8010d58:	693d      	ldr	r5, [r7, #16]
 8010d5a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010d5e:	68bb      	ldr	r3, [r7, #8]
 8010d60:	6879      	ldr	r1, [r7, #4]
 8010d62:	eb05 060a 	add.w	r6, r5, sl
 8010d66:	42b3      	cmp	r3, r6
 8010d68:	b085      	sub	sp, #20
 8010d6a:	bfb8      	it	lt
 8010d6c:	3101      	addlt	r1, #1
 8010d6e:	f7ff fedd 	bl	8010b2c <_Balloc>
 8010d72:	b930      	cbnz	r0, 8010d82 <__multiply+0x42>
 8010d74:	4602      	mov	r2, r0
 8010d76:	4b41      	ldr	r3, [pc, #260]	@ (8010e7c <__multiply+0x13c>)
 8010d78:	4841      	ldr	r0, [pc, #260]	@ (8010e80 <__multiply+0x140>)
 8010d7a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010d7e:	f000 fc7b 	bl	8011678 <__assert_func>
 8010d82:	f100 0414 	add.w	r4, r0, #20
 8010d86:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8010d8a:	4623      	mov	r3, r4
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	4573      	cmp	r3, lr
 8010d90:	d320      	bcc.n	8010dd4 <__multiply+0x94>
 8010d92:	f107 0814 	add.w	r8, r7, #20
 8010d96:	f109 0114 	add.w	r1, r9, #20
 8010d9a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8010d9e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8010da2:	9302      	str	r3, [sp, #8]
 8010da4:	1beb      	subs	r3, r5, r7
 8010da6:	3b15      	subs	r3, #21
 8010da8:	f023 0303 	bic.w	r3, r3, #3
 8010dac:	3304      	adds	r3, #4
 8010dae:	3715      	adds	r7, #21
 8010db0:	42bd      	cmp	r5, r7
 8010db2:	bf38      	it	cc
 8010db4:	2304      	movcc	r3, #4
 8010db6:	9301      	str	r3, [sp, #4]
 8010db8:	9b02      	ldr	r3, [sp, #8]
 8010dba:	9103      	str	r1, [sp, #12]
 8010dbc:	428b      	cmp	r3, r1
 8010dbe:	d80c      	bhi.n	8010dda <__multiply+0x9a>
 8010dc0:	2e00      	cmp	r6, #0
 8010dc2:	dd03      	ble.n	8010dcc <__multiply+0x8c>
 8010dc4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d055      	beq.n	8010e78 <__multiply+0x138>
 8010dcc:	6106      	str	r6, [r0, #16]
 8010dce:	b005      	add	sp, #20
 8010dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dd4:	f843 2b04 	str.w	r2, [r3], #4
 8010dd8:	e7d9      	b.n	8010d8e <__multiply+0x4e>
 8010dda:	f8b1 a000 	ldrh.w	sl, [r1]
 8010dde:	f1ba 0f00 	cmp.w	sl, #0
 8010de2:	d01f      	beq.n	8010e24 <__multiply+0xe4>
 8010de4:	46c4      	mov	ip, r8
 8010de6:	46a1      	mov	r9, r4
 8010de8:	2700      	movs	r7, #0
 8010dea:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010dee:	f8d9 3000 	ldr.w	r3, [r9]
 8010df2:	fa1f fb82 	uxth.w	fp, r2
 8010df6:	b29b      	uxth	r3, r3
 8010df8:	fb0a 330b 	mla	r3, sl, fp, r3
 8010dfc:	443b      	add	r3, r7
 8010dfe:	f8d9 7000 	ldr.w	r7, [r9]
 8010e02:	0c12      	lsrs	r2, r2, #16
 8010e04:	0c3f      	lsrs	r7, r7, #16
 8010e06:	fb0a 7202 	mla	r2, sl, r2, r7
 8010e0a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8010e0e:	b29b      	uxth	r3, r3
 8010e10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010e14:	4565      	cmp	r5, ip
 8010e16:	f849 3b04 	str.w	r3, [r9], #4
 8010e1a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8010e1e:	d8e4      	bhi.n	8010dea <__multiply+0xaa>
 8010e20:	9b01      	ldr	r3, [sp, #4]
 8010e22:	50e7      	str	r7, [r4, r3]
 8010e24:	9b03      	ldr	r3, [sp, #12]
 8010e26:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010e2a:	3104      	adds	r1, #4
 8010e2c:	f1b9 0f00 	cmp.w	r9, #0
 8010e30:	d020      	beq.n	8010e74 <__multiply+0x134>
 8010e32:	6823      	ldr	r3, [r4, #0]
 8010e34:	4647      	mov	r7, r8
 8010e36:	46a4      	mov	ip, r4
 8010e38:	f04f 0a00 	mov.w	sl, #0
 8010e3c:	f8b7 b000 	ldrh.w	fp, [r7]
 8010e40:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8010e44:	fb09 220b 	mla	r2, r9, fp, r2
 8010e48:	4452      	add	r2, sl
 8010e4a:	b29b      	uxth	r3, r3
 8010e4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010e50:	f84c 3b04 	str.w	r3, [ip], #4
 8010e54:	f857 3b04 	ldr.w	r3, [r7], #4
 8010e58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010e5c:	f8bc 3000 	ldrh.w	r3, [ip]
 8010e60:	fb09 330a 	mla	r3, r9, sl, r3
 8010e64:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8010e68:	42bd      	cmp	r5, r7
 8010e6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010e6e:	d8e5      	bhi.n	8010e3c <__multiply+0xfc>
 8010e70:	9a01      	ldr	r2, [sp, #4]
 8010e72:	50a3      	str	r3, [r4, r2]
 8010e74:	3404      	adds	r4, #4
 8010e76:	e79f      	b.n	8010db8 <__multiply+0x78>
 8010e78:	3e01      	subs	r6, #1
 8010e7a:	e7a1      	b.n	8010dc0 <__multiply+0x80>
 8010e7c:	08011e90 	.word	0x08011e90
 8010e80:	08011ea1 	.word	0x08011ea1

08010e84 <__pow5mult>:
 8010e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e88:	4615      	mov	r5, r2
 8010e8a:	f012 0203 	ands.w	r2, r2, #3
 8010e8e:	4607      	mov	r7, r0
 8010e90:	460e      	mov	r6, r1
 8010e92:	d007      	beq.n	8010ea4 <__pow5mult+0x20>
 8010e94:	4c25      	ldr	r4, [pc, #148]	@ (8010f2c <__pow5mult+0xa8>)
 8010e96:	3a01      	subs	r2, #1
 8010e98:	2300      	movs	r3, #0
 8010e9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010e9e:	f7ff fea7 	bl	8010bf0 <__multadd>
 8010ea2:	4606      	mov	r6, r0
 8010ea4:	10ad      	asrs	r5, r5, #2
 8010ea6:	d03d      	beq.n	8010f24 <__pow5mult+0xa0>
 8010ea8:	69fc      	ldr	r4, [r7, #28]
 8010eaa:	b97c      	cbnz	r4, 8010ecc <__pow5mult+0x48>
 8010eac:	2010      	movs	r0, #16
 8010eae:	f7fe f8bb 	bl	800f028 <malloc>
 8010eb2:	4602      	mov	r2, r0
 8010eb4:	61f8      	str	r0, [r7, #28]
 8010eb6:	b928      	cbnz	r0, 8010ec4 <__pow5mult+0x40>
 8010eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8010f30 <__pow5mult+0xac>)
 8010eba:	481e      	ldr	r0, [pc, #120]	@ (8010f34 <__pow5mult+0xb0>)
 8010ebc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010ec0:	f000 fbda 	bl	8011678 <__assert_func>
 8010ec4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010ec8:	6004      	str	r4, [r0, #0]
 8010eca:	60c4      	str	r4, [r0, #12]
 8010ecc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010ed0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010ed4:	b94c      	cbnz	r4, 8010eea <__pow5mult+0x66>
 8010ed6:	f240 2171 	movw	r1, #625	@ 0x271
 8010eda:	4638      	mov	r0, r7
 8010edc:	f7ff ff1a 	bl	8010d14 <__i2b>
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	f8c8 0008 	str.w	r0, [r8, #8]
 8010ee6:	4604      	mov	r4, r0
 8010ee8:	6003      	str	r3, [r0, #0]
 8010eea:	f04f 0900 	mov.w	r9, #0
 8010eee:	07eb      	lsls	r3, r5, #31
 8010ef0:	d50a      	bpl.n	8010f08 <__pow5mult+0x84>
 8010ef2:	4631      	mov	r1, r6
 8010ef4:	4622      	mov	r2, r4
 8010ef6:	4638      	mov	r0, r7
 8010ef8:	f7ff ff22 	bl	8010d40 <__multiply>
 8010efc:	4631      	mov	r1, r6
 8010efe:	4680      	mov	r8, r0
 8010f00:	4638      	mov	r0, r7
 8010f02:	f7ff fe53 	bl	8010bac <_Bfree>
 8010f06:	4646      	mov	r6, r8
 8010f08:	106d      	asrs	r5, r5, #1
 8010f0a:	d00b      	beq.n	8010f24 <__pow5mult+0xa0>
 8010f0c:	6820      	ldr	r0, [r4, #0]
 8010f0e:	b938      	cbnz	r0, 8010f20 <__pow5mult+0x9c>
 8010f10:	4622      	mov	r2, r4
 8010f12:	4621      	mov	r1, r4
 8010f14:	4638      	mov	r0, r7
 8010f16:	f7ff ff13 	bl	8010d40 <__multiply>
 8010f1a:	6020      	str	r0, [r4, #0]
 8010f1c:	f8c0 9000 	str.w	r9, [r0]
 8010f20:	4604      	mov	r4, r0
 8010f22:	e7e4      	b.n	8010eee <__pow5mult+0x6a>
 8010f24:	4630      	mov	r0, r6
 8010f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f2a:	bf00      	nop
 8010f2c:	08011f54 	.word	0x08011f54
 8010f30:	08011e21 	.word	0x08011e21
 8010f34:	08011ea1 	.word	0x08011ea1

08010f38 <__lshift>:
 8010f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f3c:	460c      	mov	r4, r1
 8010f3e:	6849      	ldr	r1, [r1, #4]
 8010f40:	6923      	ldr	r3, [r4, #16]
 8010f42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010f46:	68a3      	ldr	r3, [r4, #8]
 8010f48:	4607      	mov	r7, r0
 8010f4a:	4691      	mov	r9, r2
 8010f4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010f50:	f108 0601 	add.w	r6, r8, #1
 8010f54:	42b3      	cmp	r3, r6
 8010f56:	db0b      	blt.n	8010f70 <__lshift+0x38>
 8010f58:	4638      	mov	r0, r7
 8010f5a:	f7ff fde7 	bl	8010b2c <_Balloc>
 8010f5e:	4605      	mov	r5, r0
 8010f60:	b948      	cbnz	r0, 8010f76 <__lshift+0x3e>
 8010f62:	4602      	mov	r2, r0
 8010f64:	4b28      	ldr	r3, [pc, #160]	@ (8011008 <__lshift+0xd0>)
 8010f66:	4829      	ldr	r0, [pc, #164]	@ (801100c <__lshift+0xd4>)
 8010f68:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010f6c:	f000 fb84 	bl	8011678 <__assert_func>
 8010f70:	3101      	adds	r1, #1
 8010f72:	005b      	lsls	r3, r3, #1
 8010f74:	e7ee      	b.n	8010f54 <__lshift+0x1c>
 8010f76:	2300      	movs	r3, #0
 8010f78:	f100 0114 	add.w	r1, r0, #20
 8010f7c:	f100 0210 	add.w	r2, r0, #16
 8010f80:	4618      	mov	r0, r3
 8010f82:	4553      	cmp	r3, sl
 8010f84:	db33      	blt.n	8010fee <__lshift+0xb6>
 8010f86:	6920      	ldr	r0, [r4, #16]
 8010f88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010f8c:	f104 0314 	add.w	r3, r4, #20
 8010f90:	f019 091f 	ands.w	r9, r9, #31
 8010f94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010f98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010f9c:	d02b      	beq.n	8010ff6 <__lshift+0xbe>
 8010f9e:	f1c9 0e20 	rsb	lr, r9, #32
 8010fa2:	468a      	mov	sl, r1
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	6818      	ldr	r0, [r3, #0]
 8010fa8:	fa00 f009 	lsl.w	r0, r0, r9
 8010fac:	4310      	orrs	r0, r2
 8010fae:	f84a 0b04 	str.w	r0, [sl], #4
 8010fb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010fb6:	459c      	cmp	ip, r3
 8010fb8:	fa22 f20e 	lsr.w	r2, r2, lr
 8010fbc:	d8f3      	bhi.n	8010fa6 <__lshift+0x6e>
 8010fbe:	ebac 0304 	sub.w	r3, ip, r4
 8010fc2:	3b15      	subs	r3, #21
 8010fc4:	f023 0303 	bic.w	r3, r3, #3
 8010fc8:	3304      	adds	r3, #4
 8010fca:	f104 0015 	add.w	r0, r4, #21
 8010fce:	4560      	cmp	r0, ip
 8010fd0:	bf88      	it	hi
 8010fd2:	2304      	movhi	r3, #4
 8010fd4:	50ca      	str	r2, [r1, r3]
 8010fd6:	b10a      	cbz	r2, 8010fdc <__lshift+0xa4>
 8010fd8:	f108 0602 	add.w	r6, r8, #2
 8010fdc:	3e01      	subs	r6, #1
 8010fde:	4638      	mov	r0, r7
 8010fe0:	612e      	str	r6, [r5, #16]
 8010fe2:	4621      	mov	r1, r4
 8010fe4:	f7ff fde2 	bl	8010bac <_Bfree>
 8010fe8:	4628      	mov	r0, r5
 8010fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fee:	f842 0f04 	str.w	r0, [r2, #4]!
 8010ff2:	3301      	adds	r3, #1
 8010ff4:	e7c5      	b.n	8010f82 <__lshift+0x4a>
 8010ff6:	3904      	subs	r1, #4
 8010ff8:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ffc:	f841 2f04 	str.w	r2, [r1, #4]!
 8011000:	459c      	cmp	ip, r3
 8011002:	d8f9      	bhi.n	8010ff8 <__lshift+0xc0>
 8011004:	e7ea      	b.n	8010fdc <__lshift+0xa4>
 8011006:	bf00      	nop
 8011008:	08011e90 	.word	0x08011e90
 801100c:	08011ea1 	.word	0x08011ea1

08011010 <__mcmp>:
 8011010:	690a      	ldr	r2, [r1, #16]
 8011012:	4603      	mov	r3, r0
 8011014:	6900      	ldr	r0, [r0, #16]
 8011016:	1a80      	subs	r0, r0, r2
 8011018:	b530      	push	{r4, r5, lr}
 801101a:	d10e      	bne.n	801103a <__mcmp+0x2a>
 801101c:	3314      	adds	r3, #20
 801101e:	3114      	adds	r1, #20
 8011020:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011024:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011028:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801102c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011030:	4295      	cmp	r5, r2
 8011032:	d003      	beq.n	801103c <__mcmp+0x2c>
 8011034:	d205      	bcs.n	8011042 <__mcmp+0x32>
 8011036:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801103a:	bd30      	pop	{r4, r5, pc}
 801103c:	42a3      	cmp	r3, r4
 801103e:	d3f3      	bcc.n	8011028 <__mcmp+0x18>
 8011040:	e7fb      	b.n	801103a <__mcmp+0x2a>
 8011042:	2001      	movs	r0, #1
 8011044:	e7f9      	b.n	801103a <__mcmp+0x2a>
	...

08011048 <__mdiff>:
 8011048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801104c:	4689      	mov	r9, r1
 801104e:	4606      	mov	r6, r0
 8011050:	4611      	mov	r1, r2
 8011052:	4648      	mov	r0, r9
 8011054:	4614      	mov	r4, r2
 8011056:	f7ff ffdb 	bl	8011010 <__mcmp>
 801105a:	1e05      	subs	r5, r0, #0
 801105c:	d112      	bne.n	8011084 <__mdiff+0x3c>
 801105e:	4629      	mov	r1, r5
 8011060:	4630      	mov	r0, r6
 8011062:	f7ff fd63 	bl	8010b2c <_Balloc>
 8011066:	4602      	mov	r2, r0
 8011068:	b928      	cbnz	r0, 8011076 <__mdiff+0x2e>
 801106a:	4b3f      	ldr	r3, [pc, #252]	@ (8011168 <__mdiff+0x120>)
 801106c:	f240 2137 	movw	r1, #567	@ 0x237
 8011070:	483e      	ldr	r0, [pc, #248]	@ (801116c <__mdiff+0x124>)
 8011072:	f000 fb01 	bl	8011678 <__assert_func>
 8011076:	2301      	movs	r3, #1
 8011078:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801107c:	4610      	mov	r0, r2
 801107e:	b003      	add	sp, #12
 8011080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011084:	bfbc      	itt	lt
 8011086:	464b      	movlt	r3, r9
 8011088:	46a1      	movlt	r9, r4
 801108a:	4630      	mov	r0, r6
 801108c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011090:	bfba      	itte	lt
 8011092:	461c      	movlt	r4, r3
 8011094:	2501      	movlt	r5, #1
 8011096:	2500      	movge	r5, #0
 8011098:	f7ff fd48 	bl	8010b2c <_Balloc>
 801109c:	4602      	mov	r2, r0
 801109e:	b918      	cbnz	r0, 80110a8 <__mdiff+0x60>
 80110a0:	4b31      	ldr	r3, [pc, #196]	@ (8011168 <__mdiff+0x120>)
 80110a2:	f240 2145 	movw	r1, #581	@ 0x245
 80110a6:	e7e3      	b.n	8011070 <__mdiff+0x28>
 80110a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80110ac:	6926      	ldr	r6, [r4, #16]
 80110ae:	60c5      	str	r5, [r0, #12]
 80110b0:	f109 0310 	add.w	r3, r9, #16
 80110b4:	f109 0514 	add.w	r5, r9, #20
 80110b8:	f104 0e14 	add.w	lr, r4, #20
 80110bc:	f100 0b14 	add.w	fp, r0, #20
 80110c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80110c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80110c8:	9301      	str	r3, [sp, #4]
 80110ca:	46d9      	mov	r9, fp
 80110cc:	f04f 0c00 	mov.w	ip, #0
 80110d0:	9b01      	ldr	r3, [sp, #4]
 80110d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80110d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80110da:	9301      	str	r3, [sp, #4]
 80110dc:	fa1f f38a 	uxth.w	r3, sl
 80110e0:	4619      	mov	r1, r3
 80110e2:	b283      	uxth	r3, r0
 80110e4:	1acb      	subs	r3, r1, r3
 80110e6:	0c00      	lsrs	r0, r0, #16
 80110e8:	4463      	add	r3, ip
 80110ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80110ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80110f2:	b29b      	uxth	r3, r3
 80110f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80110f8:	4576      	cmp	r6, lr
 80110fa:	f849 3b04 	str.w	r3, [r9], #4
 80110fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011102:	d8e5      	bhi.n	80110d0 <__mdiff+0x88>
 8011104:	1b33      	subs	r3, r6, r4
 8011106:	3b15      	subs	r3, #21
 8011108:	f023 0303 	bic.w	r3, r3, #3
 801110c:	3415      	adds	r4, #21
 801110e:	3304      	adds	r3, #4
 8011110:	42a6      	cmp	r6, r4
 8011112:	bf38      	it	cc
 8011114:	2304      	movcc	r3, #4
 8011116:	441d      	add	r5, r3
 8011118:	445b      	add	r3, fp
 801111a:	461e      	mov	r6, r3
 801111c:	462c      	mov	r4, r5
 801111e:	4544      	cmp	r4, r8
 8011120:	d30e      	bcc.n	8011140 <__mdiff+0xf8>
 8011122:	f108 0103 	add.w	r1, r8, #3
 8011126:	1b49      	subs	r1, r1, r5
 8011128:	f021 0103 	bic.w	r1, r1, #3
 801112c:	3d03      	subs	r5, #3
 801112e:	45a8      	cmp	r8, r5
 8011130:	bf38      	it	cc
 8011132:	2100      	movcc	r1, #0
 8011134:	440b      	add	r3, r1
 8011136:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801113a:	b191      	cbz	r1, 8011162 <__mdiff+0x11a>
 801113c:	6117      	str	r7, [r2, #16]
 801113e:	e79d      	b.n	801107c <__mdiff+0x34>
 8011140:	f854 1b04 	ldr.w	r1, [r4], #4
 8011144:	46e6      	mov	lr, ip
 8011146:	0c08      	lsrs	r0, r1, #16
 8011148:	fa1c fc81 	uxtah	ip, ip, r1
 801114c:	4471      	add	r1, lr
 801114e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011152:	b289      	uxth	r1, r1
 8011154:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011158:	f846 1b04 	str.w	r1, [r6], #4
 801115c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011160:	e7dd      	b.n	801111e <__mdiff+0xd6>
 8011162:	3f01      	subs	r7, #1
 8011164:	e7e7      	b.n	8011136 <__mdiff+0xee>
 8011166:	bf00      	nop
 8011168:	08011e90 	.word	0x08011e90
 801116c:	08011ea1 	.word	0x08011ea1

08011170 <__d2b>:
 8011170:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011174:	460f      	mov	r7, r1
 8011176:	2101      	movs	r1, #1
 8011178:	ec59 8b10 	vmov	r8, r9, d0
 801117c:	4616      	mov	r6, r2
 801117e:	f7ff fcd5 	bl	8010b2c <_Balloc>
 8011182:	4604      	mov	r4, r0
 8011184:	b930      	cbnz	r0, 8011194 <__d2b+0x24>
 8011186:	4602      	mov	r2, r0
 8011188:	4b23      	ldr	r3, [pc, #140]	@ (8011218 <__d2b+0xa8>)
 801118a:	4824      	ldr	r0, [pc, #144]	@ (801121c <__d2b+0xac>)
 801118c:	f240 310f 	movw	r1, #783	@ 0x30f
 8011190:	f000 fa72 	bl	8011678 <__assert_func>
 8011194:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011198:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801119c:	b10d      	cbz	r5, 80111a2 <__d2b+0x32>
 801119e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80111a2:	9301      	str	r3, [sp, #4]
 80111a4:	f1b8 0300 	subs.w	r3, r8, #0
 80111a8:	d023      	beq.n	80111f2 <__d2b+0x82>
 80111aa:	4668      	mov	r0, sp
 80111ac:	9300      	str	r3, [sp, #0]
 80111ae:	f7ff fd84 	bl	8010cba <__lo0bits>
 80111b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80111b6:	b1d0      	cbz	r0, 80111ee <__d2b+0x7e>
 80111b8:	f1c0 0320 	rsb	r3, r0, #32
 80111bc:	fa02 f303 	lsl.w	r3, r2, r3
 80111c0:	430b      	orrs	r3, r1
 80111c2:	40c2      	lsrs	r2, r0
 80111c4:	6163      	str	r3, [r4, #20]
 80111c6:	9201      	str	r2, [sp, #4]
 80111c8:	9b01      	ldr	r3, [sp, #4]
 80111ca:	61a3      	str	r3, [r4, #24]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	bf0c      	ite	eq
 80111d0:	2201      	moveq	r2, #1
 80111d2:	2202      	movne	r2, #2
 80111d4:	6122      	str	r2, [r4, #16]
 80111d6:	b1a5      	cbz	r5, 8011202 <__d2b+0x92>
 80111d8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80111dc:	4405      	add	r5, r0
 80111de:	603d      	str	r5, [r7, #0]
 80111e0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80111e4:	6030      	str	r0, [r6, #0]
 80111e6:	4620      	mov	r0, r4
 80111e8:	b003      	add	sp, #12
 80111ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80111ee:	6161      	str	r1, [r4, #20]
 80111f0:	e7ea      	b.n	80111c8 <__d2b+0x58>
 80111f2:	a801      	add	r0, sp, #4
 80111f4:	f7ff fd61 	bl	8010cba <__lo0bits>
 80111f8:	9b01      	ldr	r3, [sp, #4]
 80111fa:	6163      	str	r3, [r4, #20]
 80111fc:	3020      	adds	r0, #32
 80111fe:	2201      	movs	r2, #1
 8011200:	e7e8      	b.n	80111d4 <__d2b+0x64>
 8011202:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011206:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801120a:	6038      	str	r0, [r7, #0]
 801120c:	6918      	ldr	r0, [r3, #16]
 801120e:	f7ff fd35 	bl	8010c7c <__hi0bits>
 8011212:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011216:	e7e5      	b.n	80111e4 <__d2b+0x74>
 8011218:	08011e90 	.word	0x08011e90
 801121c:	08011ea1 	.word	0x08011ea1

08011220 <__ssputs_r>:
 8011220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011224:	688e      	ldr	r6, [r1, #8]
 8011226:	461f      	mov	r7, r3
 8011228:	42be      	cmp	r6, r7
 801122a:	680b      	ldr	r3, [r1, #0]
 801122c:	4682      	mov	sl, r0
 801122e:	460c      	mov	r4, r1
 8011230:	4690      	mov	r8, r2
 8011232:	d82d      	bhi.n	8011290 <__ssputs_r+0x70>
 8011234:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011238:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801123c:	d026      	beq.n	801128c <__ssputs_r+0x6c>
 801123e:	6965      	ldr	r5, [r4, #20]
 8011240:	6909      	ldr	r1, [r1, #16]
 8011242:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011246:	eba3 0901 	sub.w	r9, r3, r1
 801124a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801124e:	1c7b      	adds	r3, r7, #1
 8011250:	444b      	add	r3, r9
 8011252:	106d      	asrs	r5, r5, #1
 8011254:	429d      	cmp	r5, r3
 8011256:	bf38      	it	cc
 8011258:	461d      	movcc	r5, r3
 801125a:	0553      	lsls	r3, r2, #21
 801125c:	d527      	bpl.n	80112ae <__ssputs_r+0x8e>
 801125e:	4629      	mov	r1, r5
 8011260:	f7fd ff14 	bl	800f08c <_malloc_r>
 8011264:	4606      	mov	r6, r0
 8011266:	b360      	cbz	r0, 80112c2 <__ssputs_r+0xa2>
 8011268:	6921      	ldr	r1, [r4, #16]
 801126a:	464a      	mov	r2, r9
 801126c:	f000 f9f6 	bl	801165c <memcpy>
 8011270:	89a3      	ldrh	r3, [r4, #12]
 8011272:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801127a:	81a3      	strh	r3, [r4, #12]
 801127c:	6126      	str	r6, [r4, #16]
 801127e:	6165      	str	r5, [r4, #20]
 8011280:	444e      	add	r6, r9
 8011282:	eba5 0509 	sub.w	r5, r5, r9
 8011286:	6026      	str	r6, [r4, #0]
 8011288:	60a5      	str	r5, [r4, #8]
 801128a:	463e      	mov	r6, r7
 801128c:	42be      	cmp	r6, r7
 801128e:	d900      	bls.n	8011292 <__ssputs_r+0x72>
 8011290:	463e      	mov	r6, r7
 8011292:	6820      	ldr	r0, [r4, #0]
 8011294:	4632      	mov	r2, r6
 8011296:	4641      	mov	r1, r8
 8011298:	f000 f9c6 	bl	8011628 <memmove>
 801129c:	68a3      	ldr	r3, [r4, #8]
 801129e:	1b9b      	subs	r3, r3, r6
 80112a0:	60a3      	str	r3, [r4, #8]
 80112a2:	6823      	ldr	r3, [r4, #0]
 80112a4:	4433      	add	r3, r6
 80112a6:	6023      	str	r3, [r4, #0]
 80112a8:	2000      	movs	r0, #0
 80112aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112ae:	462a      	mov	r2, r5
 80112b0:	f000 fa26 	bl	8011700 <_realloc_r>
 80112b4:	4606      	mov	r6, r0
 80112b6:	2800      	cmp	r0, #0
 80112b8:	d1e0      	bne.n	801127c <__ssputs_r+0x5c>
 80112ba:	6921      	ldr	r1, [r4, #16]
 80112bc:	4650      	mov	r0, sl
 80112be:	f7ff fbeb 	bl	8010a98 <_free_r>
 80112c2:	230c      	movs	r3, #12
 80112c4:	f8ca 3000 	str.w	r3, [sl]
 80112c8:	89a3      	ldrh	r3, [r4, #12]
 80112ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80112ce:	81a3      	strh	r3, [r4, #12]
 80112d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80112d4:	e7e9      	b.n	80112aa <__ssputs_r+0x8a>
	...

080112d8 <_svfiprintf_r>:
 80112d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112dc:	4698      	mov	r8, r3
 80112de:	898b      	ldrh	r3, [r1, #12]
 80112e0:	061b      	lsls	r3, r3, #24
 80112e2:	b09d      	sub	sp, #116	@ 0x74
 80112e4:	4607      	mov	r7, r0
 80112e6:	460d      	mov	r5, r1
 80112e8:	4614      	mov	r4, r2
 80112ea:	d510      	bpl.n	801130e <_svfiprintf_r+0x36>
 80112ec:	690b      	ldr	r3, [r1, #16]
 80112ee:	b973      	cbnz	r3, 801130e <_svfiprintf_r+0x36>
 80112f0:	2140      	movs	r1, #64	@ 0x40
 80112f2:	f7fd fecb 	bl	800f08c <_malloc_r>
 80112f6:	6028      	str	r0, [r5, #0]
 80112f8:	6128      	str	r0, [r5, #16]
 80112fa:	b930      	cbnz	r0, 801130a <_svfiprintf_r+0x32>
 80112fc:	230c      	movs	r3, #12
 80112fe:	603b      	str	r3, [r7, #0]
 8011300:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011304:	b01d      	add	sp, #116	@ 0x74
 8011306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801130a:	2340      	movs	r3, #64	@ 0x40
 801130c:	616b      	str	r3, [r5, #20]
 801130e:	2300      	movs	r3, #0
 8011310:	9309      	str	r3, [sp, #36]	@ 0x24
 8011312:	2320      	movs	r3, #32
 8011314:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011318:	f8cd 800c 	str.w	r8, [sp, #12]
 801131c:	2330      	movs	r3, #48	@ 0x30
 801131e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80114bc <_svfiprintf_r+0x1e4>
 8011322:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011326:	f04f 0901 	mov.w	r9, #1
 801132a:	4623      	mov	r3, r4
 801132c:	469a      	mov	sl, r3
 801132e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011332:	b10a      	cbz	r2, 8011338 <_svfiprintf_r+0x60>
 8011334:	2a25      	cmp	r2, #37	@ 0x25
 8011336:	d1f9      	bne.n	801132c <_svfiprintf_r+0x54>
 8011338:	ebba 0b04 	subs.w	fp, sl, r4
 801133c:	d00b      	beq.n	8011356 <_svfiprintf_r+0x7e>
 801133e:	465b      	mov	r3, fp
 8011340:	4622      	mov	r2, r4
 8011342:	4629      	mov	r1, r5
 8011344:	4638      	mov	r0, r7
 8011346:	f7ff ff6b 	bl	8011220 <__ssputs_r>
 801134a:	3001      	adds	r0, #1
 801134c:	f000 80a7 	beq.w	801149e <_svfiprintf_r+0x1c6>
 8011350:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011352:	445a      	add	r2, fp
 8011354:	9209      	str	r2, [sp, #36]	@ 0x24
 8011356:	f89a 3000 	ldrb.w	r3, [sl]
 801135a:	2b00      	cmp	r3, #0
 801135c:	f000 809f 	beq.w	801149e <_svfiprintf_r+0x1c6>
 8011360:	2300      	movs	r3, #0
 8011362:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011366:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801136a:	f10a 0a01 	add.w	sl, sl, #1
 801136e:	9304      	str	r3, [sp, #16]
 8011370:	9307      	str	r3, [sp, #28]
 8011372:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011376:	931a      	str	r3, [sp, #104]	@ 0x68
 8011378:	4654      	mov	r4, sl
 801137a:	2205      	movs	r2, #5
 801137c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011380:	484e      	ldr	r0, [pc, #312]	@ (80114bc <_svfiprintf_r+0x1e4>)
 8011382:	f7ee ff4d 	bl	8000220 <memchr>
 8011386:	9a04      	ldr	r2, [sp, #16]
 8011388:	b9d8      	cbnz	r0, 80113c2 <_svfiprintf_r+0xea>
 801138a:	06d0      	lsls	r0, r2, #27
 801138c:	bf44      	itt	mi
 801138e:	2320      	movmi	r3, #32
 8011390:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011394:	0711      	lsls	r1, r2, #28
 8011396:	bf44      	itt	mi
 8011398:	232b      	movmi	r3, #43	@ 0x2b
 801139a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801139e:	f89a 3000 	ldrb.w	r3, [sl]
 80113a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80113a4:	d015      	beq.n	80113d2 <_svfiprintf_r+0xfa>
 80113a6:	9a07      	ldr	r2, [sp, #28]
 80113a8:	4654      	mov	r4, sl
 80113aa:	2000      	movs	r0, #0
 80113ac:	f04f 0c0a 	mov.w	ip, #10
 80113b0:	4621      	mov	r1, r4
 80113b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80113b6:	3b30      	subs	r3, #48	@ 0x30
 80113b8:	2b09      	cmp	r3, #9
 80113ba:	d94b      	bls.n	8011454 <_svfiprintf_r+0x17c>
 80113bc:	b1b0      	cbz	r0, 80113ec <_svfiprintf_r+0x114>
 80113be:	9207      	str	r2, [sp, #28]
 80113c0:	e014      	b.n	80113ec <_svfiprintf_r+0x114>
 80113c2:	eba0 0308 	sub.w	r3, r0, r8
 80113c6:	fa09 f303 	lsl.w	r3, r9, r3
 80113ca:	4313      	orrs	r3, r2
 80113cc:	9304      	str	r3, [sp, #16]
 80113ce:	46a2      	mov	sl, r4
 80113d0:	e7d2      	b.n	8011378 <_svfiprintf_r+0xa0>
 80113d2:	9b03      	ldr	r3, [sp, #12]
 80113d4:	1d19      	adds	r1, r3, #4
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	9103      	str	r1, [sp, #12]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	bfbb      	ittet	lt
 80113de:	425b      	neglt	r3, r3
 80113e0:	f042 0202 	orrlt.w	r2, r2, #2
 80113e4:	9307      	strge	r3, [sp, #28]
 80113e6:	9307      	strlt	r3, [sp, #28]
 80113e8:	bfb8      	it	lt
 80113ea:	9204      	strlt	r2, [sp, #16]
 80113ec:	7823      	ldrb	r3, [r4, #0]
 80113ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80113f0:	d10a      	bne.n	8011408 <_svfiprintf_r+0x130>
 80113f2:	7863      	ldrb	r3, [r4, #1]
 80113f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80113f6:	d132      	bne.n	801145e <_svfiprintf_r+0x186>
 80113f8:	9b03      	ldr	r3, [sp, #12]
 80113fa:	1d1a      	adds	r2, r3, #4
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	9203      	str	r2, [sp, #12]
 8011400:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011404:	3402      	adds	r4, #2
 8011406:	9305      	str	r3, [sp, #20]
 8011408:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80114cc <_svfiprintf_r+0x1f4>
 801140c:	7821      	ldrb	r1, [r4, #0]
 801140e:	2203      	movs	r2, #3
 8011410:	4650      	mov	r0, sl
 8011412:	f7ee ff05 	bl	8000220 <memchr>
 8011416:	b138      	cbz	r0, 8011428 <_svfiprintf_r+0x150>
 8011418:	9b04      	ldr	r3, [sp, #16]
 801141a:	eba0 000a 	sub.w	r0, r0, sl
 801141e:	2240      	movs	r2, #64	@ 0x40
 8011420:	4082      	lsls	r2, r0
 8011422:	4313      	orrs	r3, r2
 8011424:	3401      	adds	r4, #1
 8011426:	9304      	str	r3, [sp, #16]
 8011428:	f814 1b01 	ldrb.w	r1, [r4], #1
 801142c:	4824      	ldr	r0, [pc, #144]	@ (80114c0 <_svfiprintf_r+0x1e8>)
 801142e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011432:	2206      	movs	r2, #6
 8011434:	f7ee fef4 	bl	8000220 <memchr>
 8011438:	2800      	cmp	r0, #0
 801143a:	d036      	beq.n	80114aa <_svfiprintf_r+0x1d2>
 801143c:	4b21      	ldr	r3, [pc, #132]	@ (80114c4 <_svfiprintf_r+0x1ec>)
 801143e:	bb1b      	cbnz	r3, 8011488 <_svfiprintf_r+0x1b0>
 8011440:	9b03      	ldr	r3, [sp, #12]
 8011442:	3307      	adds	r3, #7
 8011444:	f023 0307 	bic.w	r3, r3, #7
 8011448:	3308      	adds	r3, #8
 801144a:	9303      	str	r3, [sp, #12]
 801144c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801144e:	4433      	add	r3, r6
 8011450:	9309      	str	r3, [sp, #36]	@ 0x24
 8011452:	e76a      	b.n	801132a <_svfiprintf_r+0x52>
 8011454:	fb0c 3202 	mla	r2, ip, r2, r3
 8011458:	460c      	mov	r4, r1
 801145a:	2001      	movs	r0, #1
 801145c:	e7a8      	b.n	80113b0 <_svfiprintf_r+0xd8>
 801145e:	2300      	movs	r3, #0
 8011460:	3401      	adds	r4, #1
 8011462:	9305      	str	r3, [sp, #20]
 8011464:	4619      	mov	r1, r3
 8011466:	f04f 0c0a 	mov.w	ip, #10
 801146a:	4620      	mov	r0, r4
 801146c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011470:	3a30      	subs	r2, #48	@ 0x30
 8011472:	2a09      	cmp	r2, #9
 8011474:	d903      	bls.n	801147e <_svfiprintf_r+0x1a6>
 8011476:	2b00      	cmp	r3, #0
 8011478:	d0c6      	beq.n	8011408 <_svfiprintf_r+0x130>
 801147a:	9105      	str	r1, [sp, #20]
 801147c:	e7c4      	b.n	8011408 <_svfiprintf_r+0x130>
 801147e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011482:	4604      	mov	r4, r0
 8011484:	2301      	movs	r3, #1
 8011486:	e7f0      	b.n	801146a <_svfiprintf_r+0x192>
 8011488:	ab03      	add	r3, sp, #12
 801148a:	9300      	str	r3, [sp, #0]
 801148c:	462a      	mov	r2, r5
 801148e:	4b0e      	ldr	r3, [pc, #56]	@ (80114c8 <_svfiprintf_r+0x1f0>)
 8011490:	a904      	add	r1, sp, #16
 8011492:	4638      	mov	r0, r7
 8011494:	f7fd ff26 	bl	800f2e4 <_printf_float>
 8011498:	1c42      	adds	r2, r0, #1
 801149a:	4606      	mov	r6, r0
 801149c:	d1d6      	bne.n	801144c <_svfiprintf_r+0x174>
 801149e:	89ab      	ldrh	r3, [r5, #12]
 80114a0:	065b      	lsls	r3, r3, #25
 80114a2:	f53f af2d 	bmi.w	8011300 <_svfiprintf_r+0x28>
 80114a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80114a8:	e72c      	b.n	8011304 <_svfiprintf_r+0x2c>
 80114aa:	ab03      	add	r3, sp, #12
 80114ac:	9300      	str	r3, [sp, #0]
 80114ae:	462a      	mov	r2, r5
 80114b0:	4b05      	ldr	r3, [pc, #20]	@ (80114c8 <_svfiprintf_r+0x1f0>)
 80114b2:	a904      	add	r1, sp, #16
 80114b4:	4638      	mov	r0, r7
 80114b6:	f7fe f9ad 	bl	800f814 <_printf_i>
 80114ba:	e7ed      	b.n	8011498 <_svfiprintf_r+0x1c0>
 80114bc:	08011efa 	.word	0x08011efa
 80114c0:	08011f04 	.word	0x08011f04
 80114c4:	0800f2e5 	.word	0x0800f2e5
 80114c8:	08011221 	.word	0x08011221
 80114cc:	08011f00 	.word	0x08011f00

080114d0 <__sflush_r>:
 80114d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80114d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114d8:	0716      	lsls	r6, r2, #28
 80114da:	4605      	mov	r5, r0
 80114dc:	460c      	mov	r4, r1
 80114de:	d454      	bmi.n	801158a <__sflush_r+0xba>
 80114e0:	684b      	ldr	r3, [r1, #4]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	dc02      	bgt.n	80114ec <__sflush_r+0x1c>
 80114e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	dd48      	ble.n	801157e <__sflush_r+0xae>
 80114ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80114ee:	2e00      	cmp	r6, #0
 80114f0:	d045      	beq.n	801157e <__sflush_r+0xae>
 80114f2:	2300      	movs	r3, #0
 80114f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80114f8:	682f      	ldr	r7, [r5, #0]
 80114fa:	6a21      	ldr	r1, [r4, #32]
 80114fc:	602b      	str	r3, [r5, #0]
 80114fe:	d030      	beq.n	8011562 <__sflush_r+0x92>
 8011500:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011502:	89a3      	ldrh	r3, [r4, #12]
 8011504:	0759      	lsls	r1, r3, #29
 8011506:	d505      	bpl.n	8011514 <__sflush_r+0x44>
 8011508:	6863      	ldr	r3, [r4, #4]
 801150a:	1ad2      	subs	r2, r2, r3
 801150c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801150e:	b10b      	cbz	r3, 8011514 <__sflush_r+0x44>
 8011510:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011512:	1ad2      	subs	r2, r2, r3
 8011514:	2300      	movs	r3, #0
 8011516:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011518:	6a21      	ldr	r1, [r4, #32]
 801151a:	4628      	mov	r0, r5
 801151c:	47b0      	blx	r6
 801151e:	1c43      	adds	r3, r0, #1
 8011520:	89a3      	ldrh	r3, [r4, #12]
 8011522:	d106      	bne.n	8011532 <__sflush_r+0x62>
 8011524:	6829      	ldr	r1, [r5, #0]
 8011526:	291d      	cmp	r1, #29
 8011528:	d82b      	bhi.n	8011582 <__sflush_r+0xb2>
 801152a:	4a2a      	ldr	r2, [pc, #168]	@ (80115d4 <__sflush_r+0x104>)
 801152c:	40ca      	lsrs	r2, r1
 801152e:	07d6      	lsls	r6, r2, #31
 8011530:	d527      	bpl.n	8011582 <__sflush_r+0xb2>
 8011532:	2200      	movs	r2, #0
 8011534:	6062      	str	r2, [r4, #4]
 8011536:	04d9      	lsls	r1, r3, #19
 8011538:	6922      	ldr	r2, [r4, #16]
 801153a:	6022      	str	r2, [r4, #0]
 801153c:	d504      	bpl.n	8011548 <__sflush_r+0x78>
 801153e:	1c42      	adds	r2, r0, #1
 8011540:	d101      	bne.n	8011546 <__sflush_r+0x76>
 8011542:	682b      	ldr	r3, [r5, #0]
 8011544:	b903      	cbnz	r3, 8011548 <__sflush_r+0x78>
 8011546:	6560      	str	r0, [r4, #84]	@ 0x54
 8011548:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801154a:	602f      	str	r7, [r5, #0]
 801154c:	b1b9      	cbz	r1, 801157e <__sflush_r+0xae>
 801154e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011552:	4299      	cmp	r1, r3
 8011554:	d002      	beq.n	801155c <__sflush_r+0x8c>
 8011556:	4628      	mov	r0, r5
 8011558:	f7ff fa9e 	bl	8010a98 <_free_r>
 801155c:	2300      	movs	r3, #0
 801155e:	6363      	str	r3, [r4, #52]	@ 0x34
 8011560:	e00d      	b.n	801157e <__sflush_r+0xae>
 8011562:	2301      	movs	r3, #1
 8011564:	4628      	mov	r0, r5
 8011566:	47b0      	blx	r6
 8011568:	4602      	mov	r2, r0
 801156a:	1c50      	adds	r0, r2, #1
 801156c:	d1c9      	bne.n	8011502 <__sflush_r+0x32>
 801156e:	682b      	ldr	r3, [r5, #0]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d0c6      	beq.n	8011502 <__sflush_r+0x32>
 8011574:	2b1d      	cmp	r3, #29
 8011576:	d001      	beq.n	801157c <__sflush_r+0xac>
 8011578:	2b16      	cmp	r3, #22
 801157a:	d11e      	bne.n	80115ba <__sflush_r+0xea>
 801157c:	602f      	str	r7, [r5, #0]
 801157e:	2000      	movs	r0, #0
 8011580:	e022      	b.n	80115c8 <__sflush_r+0xf8>
 8011582:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011586:	b21b      	sxth	r3, r3
 8011588:	e01b      	b.n	80115c2 <__sflush_r+0xf2>
 801158a:	690f      	ldr	r7, [r1, #16]
 801158c:	2f00      	cmp	r7, #0
 801158e:	d0f6      	beq.n	801157e <__sflush_r+0xae>
 8011590:	0793      	lsls	r3, r2, #30
 8011592:	680e      	ldr	r6, [r1, #0]
 8011594:	bf08      	it	eq
 8011596:	694b      	ldreq	r3, [r1, #20]
 8011598:	600f      	str	r7, [r1, #0]
 801159a:	bf18      	it	ne
 801159c:	2300      	movne	r3, #0
 801159e:	eba6 0807 	sub.w	r8, r6, r7
 80115a2:	608b      	str	r3, [r1, #8]
 80115a4:	f1b8 0f00 	cmp.w	r8, #0
 80115a8:	dde9      	ble.n	801157e <__sflush_r+0xae>
 80115aa:	6a21      	ldr	r1, [r4, #32]
 80115ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80115ae:	4643      	mov	r3, r8
 80115b0:	463a      	mov	r2, r7
 80115b2:	4628      	mov	r0, r5
 80115b4:	47b0      	blx	r6
 80115b6:	2800      	cmp	r0, #0
 80115b8:	dc08      	bgt.n	80115cc <__sflush_r+0xfc>
 80115ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80115c2:	81a3      	strh	r3, [r4, #12]
 80115c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80115c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115cc:	4407      	add	r7, r0
 80115ce:	eba8 0800 	sub.w	r8, r8, r0
 80115d2:	e7e7      	b.n	80115a4 <__sflush_r+0xd4>
 80115d4:	20400001 	.word	0x20400001

080115d8 <_fflush_r>:
 80115d8:	b538      	push	{r3, r4, r5, lr}
 80115da:	690b      	ldr	r3, [r1, #16]
 80115dc:	4605      	mov	r5, r0
 80115de:	460c      	mov	r4, r1
 80115e0:	b913      	cbnz	r3, 80115e8 <_fflush_r+0x10>
 80115e2:	2500      	movs	r5, #0
 80115e4:	4628      	mov	r0, r5
 80115e6:	bd38      	pop	{r3, r4, r5, pc}
 80115e8:	b118      	cbz	r0, 80115f2 <_fflush_r+0x1a>
 80115ea:	6a03      	ldr	r3, [r0, #32]
 80115ec:	b90b      	cbnz	r3, 80115f2 <_fflush_r+0x1a>
 80115ee:	f7fe fabb 	bl	800fb68 <__sinit>
 80115f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d0f3      	beq.n	80115e2 <_fflush_r+0xa>
 80115fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80115fc:	07d0      	lsls	r0, r2, #31
 80115fe:	d404      	bmi.n	801160a <_fflush_r+0x32>
 8011600:	0599      	lsls	r1, r3, #22
 8011602:	d402      	bmi.n	801160a <_fflush_r+0x32>
 8011604:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011606:	f7fe fbec 	bl	800fde2 <__retarget_lock_acquire_recursive>
 801160a:	4628      	mov	r0, r5
 801160c:	4621      	mov	r1, r4
 801160e:	f7ff ff5f 	bl	80114d0 <__sflush_r>
 8011612:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011614:	07da      	lsls	r2, r3, #31
 8011616:	4605      	mov	r5, r0
 8011618:	d4e4      	bmi.n	80115e4 <_fflush_r+0xc>
 801161a:	89a3      	ldrh	r3, [r4, #12]
 801161c:	059b      	lsls	r3, r3, #22
 801161e:	d4e1      	bmi.n	80115e4 <_fflush_r+0xc>
 8011620:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011622:	f7fe fbdf 	bl	800fde4 <__retarget_lock_release_recursive>
 8011626:	e7dd      	b.n	80115e4 <_fflush_r+0xc>

08011628 <memmove>:
 8011628:	4288      	cmp	r0, r1
 801162a:	b510      	push	{r4, lr}
 801162c:	eb01 0402 	add.w	r4, r1, r2
 8011630:	d902      	bls.n	8011638 <memmove+0x10>
 8011632:	4284      	cmp	r4, r0
 8011634:	4623      	mov	r3, r4
 8011636:	d807      	bhi.n	8011648 <memmove+0x20>
 8011638:	1e43      	subs	r3, r0, #1
 801163a:	42a1      	cmp	r1, r4
 801163c:	d008      	beq.n	8011650 <memmove+0x28>
 801163e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011642:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011646:	e7f8      	b.n	801163a <memmove+0x12>
 8011648:	4402      	add	r2, r0
 801164a:	4601      	mov	r1, r0
 801164c:	428a      	cmp	r2, r1
 801164e:	d100      	bne.n	8011652 <memmove+0x2a>
 8011650:	bd10      	pop	{r4, pc}
 8011652:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011656:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801165a:	e7f7      	b.n	801164c <memmove+0x24>

0801165c <memcpy>:
 801165c:	440a      	add	r2, r1
 801165e:	4291      	cmp	r1, r2
 8011660:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8011664:	d100      	bne.n	8011668 <memcpy+0xc>
 8011666:	4770      	bx	lr
 8011668:	b510      	push	{r4, lr}
 801166a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801166e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011672:	4291      	cmp	r1, r2
 8011674:	d1f9      	bne.n	801166a <memcpy+0xe>
 8011676:	bd10      	pop	{r4, pc}

08011678 <__assert_func>:
 8011678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801167a:	4614      	mov	r4, r2
 801167c:	461a      	mov	r2, r3
 801167e:	4b09      	ldr	r3, [pc, #36]	@ (80116a4 <__assert_func+0x2c>)
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	4605      	mov	r5, r0
 8011684:	68d8      	ldr	r0, [r3, #12]
 8011686:	b14c      	cbz	r4, 801169c <__assert_func+0x24>
 8011688:	4b07      	ldr	r3, [pc, #28]	@ (80116a8 <__assert_func+0x30>)
 801168a:	9100      	str	r1, [sp, #0]
 801168c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011690:	4906      	ldr	r1, [pc, #24]	@ (80116ac <__assert_func+0x34>)
 8011692:	462b      	mov	r3, r5
 8011694:	f000 f870 	bl	8011778 <fiprintf>
 8011698:	f000 f880 	bl	801179c <abort>
 801169c:	4b04      	ldr	r3, [pc, #16]	@ (80116b0 <__assert_func+0x38>)
 801169e:	461c      	mov	r4, r3
 80116a0:	e7f3      	b.n	801168a <__assert_func+0x12>
 80116a2:	bf00      	nop
 80116a4:	20000118 	.word	0x20000118
 80116a8:	08011f15 	.word	0x08011f15
 80116ac:	08011f22 	.word	0x08011f22
 80116b0:	08011f50 	.word	0x08011f50

080116b4 <_calloc_r>:
 80116b4:	b570      	push	{r4, r5, r6, lr}
 80116b6:	fba1 5402 	umull	r5, r4, r1, r2
 80116ba:	b934      	cbnz	r4, 80116ca <_calloc_r+0x16>
 80116bc:	4629      	mov	r1, r5
 80116be:	f7fd fce5 	bl	800f08c <_malloc_r>
 80116c2:	4606      	mov	r6, r0
 80116c4:	b928      	cbnz	r0, 80116d2 <_calloc_r+0x1e>
 80116c6:	4630      	mov	r0, r6
 80116c8:	bd70      	pop	{r4, r5, r6, pc}
 80116ca:	220c      	movs	r2, #12
 80116cc:	6002      	str	r2, [r0, #0]
 80116ce:	2600      	movs	r6, #0
 80116d0:	e7f9      	b.n	80116c6 <_calloc_r+0x12>
 80116d2:	462a      	mov	r2, r5
 80116d4:	4621      	mov	r1, r4
 80116d6:	f7fe faf6 	bl	800fcc6 <memset>
 80116da:	e7f4      	b.n	80116c6 <_calloc_r+0x12>

080116dc <__ascii_mbtowc>:
 80116dc:	b082      	sub	sp, #8
 80116de:	b901      	cbnz	r1, 80116e2 <__ascii_mbtowc+0x6>
 80116e0:	a901      	add	r1, sp, #4
 80116e2:	b142      	cbz	r2, 80116f6 <__ascii_mbtowc+0x1a>
 80116e4:	b14b      	cbz	r3, 80116fa <__ascii_mbtowc+0x1e>
 80116e6:	7813      	ldrb	r3, [r2, #0]
 80116e8:	600b      	str	r3, [r1, #0]
 80116ea:	7812      	ldrb	r2, [r2, #0]
 80116ec:	1e10      	subs	r0, r2, #0
 80116ee:	bf18      	it	ne
 80116f0:	2001      	movne	r0, #1
 80116f2:	b002      	add	sp, #8
 80116f4:	4770      	bx	lr
 80116f6:	4610      	mov	r0, r2
 80116f8:	e7fb      	b.n	80116f2 <__ascii_mbtowc+0x16>
 80116fa:	f06f 0001 	mvn.w	r0, #1
 80116fe:	e7f8      	b.n	80116f2 <__ascii_mbtowc+0x16>

08011700 <_realloc_r>:
 8011700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011704:	4607      	mov	r7, r0
 8011706:	4614      	mov	r4, r2
 8011708:	460d      	mov	r5, r1
 801170a:	b921      	cbnz	r1, 8011716 <_realloc_r+0x16>
 801170c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011710:	4611      	mov	r1, r2
 8011712:	f7fd bcbb 	b.w	800f08c <_malloc_r>
 8011716:	b92a      	cbnz	r2, 8011724 <_realloc_r+0x24>
 8011718:	f7ff f9be 	bl	8010a98 <_free_r>
 801171c:	4625      	mov	r5, r4
 801171e:	4628      	mov	r0, r5
 8011720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011724:	f000 f841 	bl	80117aa <_malloc_usable_size_r>
 8011728:	4284      	cmp	r4, r0
 801172a:	4606      	mov	r6, r0
 801172c:	d802      	bhi.n	8011734 <_realloc_r+0x34>
 801172e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011732:	d8f4      	bhi.n	801171e <_realloc_r+0x1e>
 8011734:	4621      	mov	r1, r4
 8011736:	4638      	mov	r0, r7
 8011738:	f7fd fca8 	bl	800f08c <_malloc_r>
 801173c:	4680      	mov	r8, r0
 801173e:	b908      	cbnz	r0, 8011744 <_realloc_r+0x44>
 8011740:	4645      	mov	r5, r8
 8011742:	e7ec      	b.n	801171e <_realloc_r+0x1e>
 8011744:	42b4      	cmp	r4, r6
 8011746:	4622      	mov	r2, r4
 8011748:	4629      	mov	r1, r5
 801174a:	bf28      	it	cs
 801174c:	4632      	movcs	r2, r6
 801174e:	f7ff ff85 	bl	801165c <memcpy>
 8011752:	4629      	mov	r1, r5
 8011754:	4638      	mov	r0, r7
 8011756:	f7ff f99f 	bl	8010a98 <_free_r>
 801175a:	e7f1      	b.n	8011740 <_realloc_r+0x40>

0801175c <__ascii_wctomb>:
 801175c:	4603      	mov	r3, r0
 801175e:	4608      	mov	r0, r1
 8011760:	b141      	cbz	r1, 8011774 <__ascii_wctomb+0x18>
 8011762:	2aff      	cmp	r2, #255	@ 0xff
 8011764:	d904      	bls.n	8011770 <__ascii_wctomb+0x14>
 8011766:	228a      	movs	r2, #138	@ 0x8a
 8011768:	601a      	str	r2, [r3, #0]
 801176a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801176e:	4770      	bx	lr
 8011770:	700a      	strb	r2, [r1, #0]
 8011772:	2001      	movs	r0, #1
 8011774:	4770      	bx	lr
	...

08011778 <fiprintf>:
 8011778:	b40e      	push	{r1, r2, r3}
 801177a:	b503      	push	{r0, r1, lr}
 801177c:	4601      	mov	r1, r0
 801177e:	ab03      	add	r3, sp, #12
 8011780:	4805      	ldr	r0, [pc, #20]	@ (8011798 <fiprintf+0x20>)
 8011782:	f853 2b04 	ldr.w	r2, [r3], #4
 8011786:	6800      	ldr	r0, [r0, #0]
 8011788:	9301      	str	r3, [sp, #4]
 801178a:	f000 f83f 	bl	801180c <_vfiprintf_r>
 801178e:	b002      	add	sp, #8
 8011790:	f85d eb04 	ldr.w	lr, [sp], #4
 8011794:	b003      	add	sp, #12
 8011796:	4770      	bx	lr
 8011798:	20000118 	.word	0x20000118

0801179c <abort>:
 801179c:	b508      	push	{r3, lr}
 801179e:	2006      	movs	r0, #6
 80117a0:	f000 fa08 	bl	8011bb4 <raise>
 80117a4:	2001      	movs	r0, #1
 80117a6:	f7f1 f8f3 	bl	8002990 <_exit>

080117aa <_malloc_usable_size_r>:
 80117aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80117ae:	1f18      	subs	r0, r3, #4
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	bfbc      	itt	lt
 80117b4:	580b      	ldrlt	r3, [r1, r0]
 80117b6:	18c0      	addlt	r0, r0, r3
 80117b8:	4770      	bx	lr

080117ba <__sfputc_r>:
 80117ba:	6893      	ldr	r3, [r2, #8]
 80117bc:	3b01      	subs	r3, #1
 80117be:	2b00      	cmp	r3, #0
 80117c0:	b410      	push	{r4}
 80117c2:	6093      	str	r3, [r2, #8]
 80117c4:	da08      	bge.n	80117d8 <__sfputc_r+0x1e>
 80117c6:	6994      	ldr	r4, [r2, #24]
 80117c8:	42a3      	cmp	r3, r4
 80117ca:	db01      	blt.n	80117d0 <__sfputc_r+0x16>
 80117cc:	290a      	cmp	r1, #10
 80117ce:	d103      	bne.n	80117d8 <__sfputc_r+0x1e>
 80117d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80117d4:	f000 b932 	b.w	8011a3c <__swbuf_r>
 80117d8:	6813      	ldr	r3, [r2, #0]
 80117da:	1c58      	adds	r0, r3, #1
 80117dc:	6010      	str	r0, [r2, #0]
 80117de:	7019      	strb	r1, [r3, #0]
 80117e0:	4608      	mov	r0, r1
 80117e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80117e6:	4770      	bx	lr

080117e8 <__sfputs_r>:
 80117e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117ea:	4606      	mov	r6, r0
 80117ec:	460f      	mov	r7, r1
 80117ee:	4614      	mov	r4, r2
 80117f0:	18d5      	adds	r5, r2, r3
 80117f2:	42ac      	cmp	r4, r5
 80117f4:	d101      	bne.n	80117fa <__sfputs_r+0x12>
 80117f6:	2000      	movs	r0, #0
 80117f8:	e007      	b.n	801180a <__sfputs_r+0x22>
 80117fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117fe:	463a      	mov	r2, r7
 8011800:	4630      	mov	r0, r6
 8011802:	f7ff ffda 	bl	80117ba <__sfputc_r>
 8011806:	1c43      	adds	r3, r0, #1
 8011808:	d1f3      	bne.n	80117f2 <__sfputs_r+0xa>
 801180a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801180c <_vfiprintf_r>:
 801180c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011810:	460d      	mov	r5, r1
 8011812:	b09d      	sub	sp, #116	@ 0x74
 8011814:	4614      	mov	r4, r2
 8011816:	4698      	mov	r8, r3
 8011818:	4606      	mov	r6, r0
 801181a:	b118      	cbz	r0, 8011824 <_vfiprintf_r+0x18>
 801181c:	6a03      	ldr	r3, [r0, #32]
 801181e:	b90b      	cbnz	r3, 8011824 <_vfiprintf_r+0x18>
 8011820:	f7fe f9a2 	bl	800fb68 <__sinit>
 8011824:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011826:	07d9      	lsls	r1, r3, #31
 8011828:	d405      	bmi.n	8011836 <_vfiprintf_r+0x2a>
 801182a:	89ab      	ldrh	r3, [r5, #12]
 801182c:	059a      	lsls	r2, r3, #22
 801182e:	d402      	bmi.n	8011836 <_vfiprintf_r+0x2a>
 8011830:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011832:	f7fe fad6 	bl	800fde2 <__retarget_lock_acquire_recursive>
 8011836:	89ab      	ldrh	r3, [r5, #12]
 8011838:	071b      	lsls	r3, r3, #28
 801183a:	d501      	bpl.n	8011840 <_vfiprintf_r+0x34>
 801183c:	692b      	ldr	r3, [r5, #16]
 801183e:	b99b      	cbnz	r3, 8011868 <_vfiprintf_r+0x5c>
 8011840:	4629      	mov	r1, r5
 8011842:	4630      	mov	r0, r6
 8011844:	f000 f938 	bl	8011ab8 <__swsetup_r>
 8011848:	b170      	cbz	r0, 8011868 <_vfiprintf_r+0x5c>
 801184a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801184c:	07dc      	lsls	r4, r3, #31
 801184e:	d504      	bpl.n	801185a <_vfiprintf_r+0x4e>
 8011850:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011854:	b01d      	add	sp, #116	@ 0x74
 8011856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801185a:	89ab      	ldrh	r3, [r5, #12]
 801185c:	0598      	lsls	r0, r3, #22
 801185e:	d4f7      	bmi.n	8011850 <_vfiprintf_r+0x44>
 8011860:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011862:	f7fe fabf 	bl	800fde4 <__retarget_lock_release_recursive>
 8011866:	e7f3      	b.n	8011850 <_vfiprintf_r+0x44>
 8011868:	2300      	movs	r3, #0
 801186a:	9309      	str	r3, [sp, #36]	@ 0x24
 801186c:	2320      	movs	r3, #32
 801186e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011872:	f8cd 800c 	str.w	r8, [sp, #12]
 8011876:	2330      	movs	r3, #48	@ 0x30
 8011878:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011a28 <_vfiprintf_r+0x21c>
 801187c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011880:	f04f 0901 	mov.w	r9, #1
 8011884:	4623      	mov	r3, r4
 8011886:	469a      	mov	sl, r3
 8011888:	f813 2b01 	ldrb.w	r2, [r3], #1
 801188c:	b10a      	cbz	r2, 8011892 <_vfiprintf_r+0x86>
 801188e:	2a25      	cmp	r2, #37	@ 0x25
 8011890:	d1f9      	bne.n	8011886 <_vfiprintf_r+0x7a>
 8011892:	ebba 0b04 	subs.w	fp, sl, r4
 8011896:	d00b      	beq.n	80118b0 <_vfiprintf_r+0xa4>
 8011898:	465b      	mov	r3, fp
 801189a:	4622      	mov	r2, r4
 801189c:	4629      	mov	r1, r5
 801189e:	4630      	mov	r0, r6
 80118a0:	f7ff ffa2 	bl	80117e8 <__sfputs_r>
 80118a4:	3001      	adds	r0, #1
 80118a6:	f000 80a7 	beq.w	80119f8 <_vfiprintf_r+0x1ec>
 80118aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80118ac:	445a      	add	r2, fp
 80118ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80118b0:	f89a 3000 	ldrb.w	r3, [sl]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	f000 809f 	beq.w	80119f8 <_vfiprintf_r+0x1ec>
 80118ba:	2300      	movs	r3, #0
 80118bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80118c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80118c4:	f10a 0a01 	add.w	sl, sl, #1
 80118c8:	9304      	str	r3, [sp, #16]
 80118ca:	9307      	str	r3, [sp, #28]
 80118cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80118d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80118d2:	4654      	mov	r4, sl
 80118d4:	2205      	movs	r2, #5
 80118d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118da:	4853      	ldr	r0, [pc, #332]	@ (8011a28 <_vfiprintf_r+0x21c>)
 80118dc:	f7ee fca0 	bl	8000220 <memchr>
 80118e0:	9a04      	ldr	r2, [sp, #16]
 80118e2:	b9d8      	cbnz	r0, 801191c <_vfiprintf_r+0x110>
 80118e4:	06d1      	lsls	r1, r2, #27
 80118e6:	bf44      	itt	mi
 80118e8:	2320      	movmi	r3, #32
 80118ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80118ee:	0713      	lsls	r3, r2, #28
 80118f0:	bf44      	itt	mi
 80118f2:	232b      	movmi	r3, #43	@ 0x2b
 80118f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80118f8:	f89a 3000 	ldrb.w	r3, [sl]
 80118fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80118fe:	d015      	beq.n	801192c <_vfiprintf_r+0x120>
 8011900:	9a07      	ldr	r2, [sp, #28]
 8011902:	4654      	mov	r4, sl
 8011904:	2000      	movs	r0, #0
 8011906:	f04f 0c0a 	mov.w	ip, #10
 801190a:	4621      	mov	r1, r4
 801190c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011910:	3b30      	subs	r3, #48	@ 0x30
 8011912:	2b09      	cmp	r3, #9
 8011914:	d94b      	bls.n	80119ae <_vfiprintf_r+0x1a2>
 8011916:	b1b0      	cbz	r0, 8011946 <_vfiprintf_r+0x13a>
 8011918:	9207      	str	r2, [sp, #28]
 801191a:	e014      	b.n	8011946 <_vfiprintf_r+0x13a>
 801191c:	eba0 0308 	sub.w	r3, r0, r8
 8011920:	fa09 f303 	lsl.w	r3, r9, r3
 8011924:	4313      	orrs	r3, r2
 8011926:	9304      	str	r3, [sp, #16]
 8011928:	46a2      	mov	sl, r4
 801192a:	e7d2      	b.n	80118d2 <_vfiprintf_r+0xc6>
 801192c:	9b03      	ldr	r3, [sp, #12]
 801192e:	1d19      	adds	r1, r3, #4
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	9103      	str	r1, [sp, #12]
 8011934:	2b00      	cmp	r3, #0
 8011936:	bfbb      	ittet	lt
 8011938:	425b      	neglt	r3, r3
 801193a:	f042 0202 	orrlt.w	r2, r2, #2
 801193e:	9307      	strge	r3, [sp, #28]
 8011940:	9307      	strlt	r3, [sp, #28]
 8011942:	bfb8      	it	lt
 8011944:	9204      	strlt	r2, [sp, #16]
 8011946:	7823      	ldrb	r3, [r4, #0]
 8011948:	2b2e      	cmp	r3, #46	@ 0x2e
 801194a:	d10a      	bne.n	8011962 <_vfiprintf_r+0x156>
 801194c:	7863      	ldrb	r3, [r4, #1]
 801194e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011950:	d132      	bne.n	80119b8 <_vfiprintf_r+0x1ac>
 8011952:	9b03      	ldr	r3, [sp, #12]
 8011954:	1d1a      	adds	r2, r3, #4
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	9203      	str	r2, [sp, #12]
 801195a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801195e:	3402      	adds	r4, #2
 8011960:	9305      	str	r3, [sp, #20]
 8011962:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011a38 <_vfiprintf_r+0x22c>
 8011966:	7821      	ldrb	r1, [r4, #0]
 8011968:	2203      	movs	r2, #3
 801196a:	4650      	mov	r0, sl
 801196c:	f7ee fc58 	bl	8000220 <memchr>
 8011970:	b138      	cbz	r0, 8011982 <_vfiprintf_r+0x176>
 8011972:	9b04      	ldr	r3, [sp, #16]
 8011974:	eba0 000a 	sub.w	r0, r0, sl
 8011978:	2240      	movs	r2, #64	@ 0x40
 801197a:	4082      	lsls	r2, r0
 801197c:	4313      	orrs	r3, r2
 801197e:	3401      	adds	r4, #1
 8011980:	9304      	str	r3, [sp, #16]
 8011982:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011986:	4829      	ldr	r0, [pc, #164]	@ (8011a2c <_vfiprintf_r+0x220>)
 8011988:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801198c:	2206      	movs	r2, #6
 801198e:	f7ee fc47 	bl	8000220 <memchr>
 8011992:	2800      	cmp	r0, #0
 8011994:	d03f      	beq.n	8011a16 <_vfiprintf_r+0x20a>
 8011996:	4b26      	ldr	r3, [pc, #152]	@ (8011a30 <_vfiprintf_r+0x224>)
 8011998:	bb1b      	cbnz	r3, 80119e2 <_vfiprintf_r+0x1d6>
 801199a:	9b03      	ldr	r3, [sp, #12]
 801199c:	3307      	adds	r3, #7
 801199e:	f023 0307 	bic.w	r3, r3, #7
 80119a2:	3308      	adds	r3, #8
 80119a4:	9303      	str	r3, [sp, #12]
 80119a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80119a8:	443b      	add	r3, r7
 80119aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80119ac:	e76a      	b.n	8011884 <_vfiprintf_r+0x78>
 80119ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80119b2:	460c      	mov	r4, r1
 80119b4:	2001      	movs	r0, #1
 80119b6:	e7a8      	b.n	801190a <_vfiprintf_r+0xfe>
 80119b8:	2300      	movs	r3, #0
 80119ba:	3401      	adds	r4, #1
 80119bc:	9305      	str	r3, [sp, #20]
 80119be:	4619      	mov	r1, r3
 80119c0:	f04f 0c0a 	mov.w	ip, #10
 80119c4:	4620      	mov	r0, r4
 80119c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80119ca:	3a30      	subs	r2, #48	@ 0x30
 80119cc:	2a09      	cmp	r2, #9
 80119ce:	d903      	bls.n	80119d8 <_vfiprintf_r+0x1cc>
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d0c6      	beq.n	8011962 <_vfiprintf_r+0x156>
 80119d4:	9105      	str	r1, [sp, #20]
 80119d6:	e7c4      	b.n	8011962 <_vfiprintf_r+0x156>
 80119d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80119dc:	4604      	mov	r4, r0
 80119de:	2301      	movs	r3, #1
 80119e0:	e7f0      	b.n	80119c4 <_vfiprintf_r+0x1b8>
 80119e2:	ab03      	add	r3, sp, #12
 80119e4:	9300      	str	r3, [sp, #0]
 80119e6:	462a      	mov	r2, r5
 80119e8:	4b12      	ldr	r3, [pc, #72]	@ (8011a34 <_vfiprintf_r+0x228>)
 80119ea:	a904      	add	r1, sp, #16
 80119ec:	4630      	mov	r0, r6
 80119ee:	f7fd fc79 	bl	800f2e4 <_printf_float>
 80119f2:	4607      	mov	r7, r0
 80119f4:	1c78      	adds	r0, r7, #1
 80119f6:	d1d6      	bne.n	80119a6 <_vfiprintf_r+0x19a>
 80119f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80119fa:	07d9      	lsls	r1, r3, #31
 80119fc:	d405      	bmi.n	8011a0a <_vfiprintf_r+0x1fe>
 80119fe:	89ab      	ldrh	r3, [r5, #12]
 8011a00:	059a      	lsls	r2, r3, #22
 8011a02:	d402      	bmi.n	8011a0a <_vfiprintf_r+0x1fe>
 8011a04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011a06:	f7fe f9ed 	bl	800fde4 <__retarget_lock_release_recursive>
 8011a0a:	89ab      	ldrh	r3, [r5, #12]
 8011a0c:	065b      	lsls	r3, r3, #25
 8011a0e:	f53f af1f 	bmi.w	8011850 <_vfiprintf_r+0x44>
 8011a12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011a14:	e71e      	b.n	8011854 <_vfiprintf_r+0x48>
 8011a16:	ab03      	add	r3, sp, #12
 8011a18:	9300      	str	r3, [sp, #0]
 8011a1a:	462a      	mov	r2, r5
 8011a1c:	4b05      	ldr	r3, [pc, #20]	@ (8011a34 <_vfiprintf_r+0x228>)
 8011a1e:	a904      	add	r1, sp, #16
 8011a20:	4630      	mov	r0, r6
 8011a22:	f7fd fef7 	bl	800f814 <_printf_i>
 8011a26:	e7e4      	b.n	80119f2 <_vfiprintf_r+0x1e6>
 8011a28:	08011efa 	.word	0x08011efa
 8011a2c:	08011f04 	.word	0x08011f04
 8011a30:	0800f2e5 	.word	0x0800f2e5
 8011a34:	080117e9 	.word	0x080117e9
 8011a38:	08011f00 	.word	0x08011f00

08011a3c <__swbuf_r>:
 8011a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a3e:	460e      	mov	r6, r1
 8011a40:	4614      	mov	r4, r2
 8011a42:	4605      	mov	r5, r0
 8011a44:	b118      	cbz	r0, 8011a4e <__swbuf_r+0x12>
 8011a46:	6a03      	ldr	r3, [r0, #32]
 8011a48:	b90b      	cbnz	r3, 8011a4e <__swbuf_r+0x12>
 8011a4a:	f7fe f88d 	bl	800fb68 <__sinit>
 8011a4e:	69a3      	ldr	r3, [r4, #24]
 8011a50:	60a3      	str	r3, [r4, #8]
 8011a52:	89a3      	ldrh	r3, [r4, #12]
 8011a54:	071a      	lsls	r2, r3, #28
 8011a56:	d501      	bpl.n	8011a5c <__swbuf_r+0x20>
 8011a58:	6923      	ldr	r3, [r4, #16]
 8011a5a:	b943      	cbnz	r3, 8011a6e <__swbuf_r+0x32>
 8011a5c:	4621      	mov	r1, r4
 8011a5e:	4628      	mov	r0, r5
 8011a60:	f000 f82a 	bl	8011ab8 <__swsetup_r>
 8011a64:	b118      	cbz	r0, 8011a6e <__swbuf_r+0x32>
 8011a66:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8011a6a:	4638      	mov	r0, r7
 8011a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a6e:	6823      	ldr	r3, [r4, #0]
 8011a70:	6922      	ldr	r2, [r4, #16]
 8011a72:	1a98      	subs	r0, r3, r2
 8011a74:	6963      	ldr	r3, [r4, #20]
 8011a76:	b2f6      	uxtb	r6, r6
 8011a78:	4283      	cmp	r3, r0
 8011a7a:	4637      	mov	r7, r6
 8011a7c:	dc05      	bgt.n	8011a8a <__swbuf_r+0x4e>
 8011a7e:	4621      	mov	r1, r4
 8011a80:	4628      	mov	r0, r5
 8011a82:	f7ff fda9 	bl	80115d8 <_fflush_r>
 8011a86:	2800      	cmp	r0, #0
 8011a88:	d1ed      	bne.n	8011a66 <__swbuf_r+0x2a>
 8011a8a:	68a3      	ldr	r3, [r4, #8]
 8011a8c:	3b01      	subs	r3, #1
 8011a8e:	60a3      	str	r3, [r4, #8]
 8011a90:	6823      	ldr	r3, [r4, #0]
 8011a92:	1c5a      	adds	r2, r3, #1
 8011a94:	6022      	str	r2, [r4, #0]
 8011a96:	701e      	strb	r6, [r3, #0]
 8011a98:	6962      	ldr	r2, [r4, #20]
 8011a9a:	1c43      	adds	r3, r0, #1
 8011a9c:	429a      	cmp	r2, r3
 8011a9e:	d004      	beq.n	8011aaa <__swbuf_r+0x6e>
 8011aa0:	89a3      	ldrh	r3, [r4, #12]
 8011aa2:	07db      	lsls	r3, r3, #31
 8011aa4:	d5e1      	bpl.n	8011a6a <__swbuf_r+0x2e>
 8011aa6:	2e0a      	cmp	r6, #10
 8011aa8:	d1df      	bne.n	8011a6a <__swbuf_r+0x2e>
 8011aaa:	4621      	mov	r1, r4
 8011aac:	4628      	mov	r0, r5
 8011aae:	f7ff fd93 	bl	80115d8 <_fflush_r>
 8011ab2:	2800      	cmp	r0, #0
 8011ab4:	d0d9      	beq.n	8011a6a <__swbuf_r+0x2e>
 8011ab6:	e7d6      	b.n	8011a66 <__swbuf_r+0x2a>

08011ab8 <__swsetup_r>:
 8011ab8:	b538      	push	{r3, r4, r5, lr}
 8011aba:	4b29      	ldr	r3, [pc, #164]	@ (8011b60 <__swsetup_r+0xa8>)
 8011abc:	4605      	mov	r5, r0
 8011abe:	6818      	ldr	r0, [r3, #0]
 8011ac0:	460c      	mov	r4, r1
 8011ac2:	b118      	cbz	r0, 8011acc <__swsetup_r+0x14>
 8011ac4:	6a03      	ldr	r3, [r0, #32]
 8011ac6:	b90b      	cbnz	r3, 8011acc <__swsetup_r+0x14>
 8011ac8:	f7fe f84e 	bl	800fb68 <__sinit>
 8011acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ad0:	0719      	lsls	r1, r3, #28
 8011ad2:	d422      	bmi.n	8011b1a <__swsetup_r+0x62>
 8011ad4:	06da      	lsls	r2, r3, #27
 8011ad6:	d407      	bmi.n	8011ae8 <__swsetup_r+0x30>
 8011ad8:	2209      	movs	r2, #9
 8011ada:	602a      	str	r2, [r5, #0]
 8011adc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ae0:	81a3      	strh	r3, [r4, #12]
 8011ae2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011ae6:	e033      	b.n	8011b50 <__swsetup_r+0x98>
 8011ae8:	0758      	lsls	r0, r3, #29
 8011aea:	d512      	bpl.n	8011b12 <__swsetup_r+0x5a>
 8011aec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011aee:	b141      	cbz	r1, 8011b02 <__swsetup_r+0x4a>
 8011af0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011af4:	4299      	cmp	r1, r3
 8011af6:	d002      	beq.n	8011afe <__swsetup_r+0x46>
 8011af8:	4628      	mov	r0, r5
 8011afa:	f7fe ffcd 	bl	8010a98 <_free_r>
 8011afe:	2300      	movs	r3, #0
 8011b00:	6363      	str	r3, [r4, #52]	@ 0x34
 8011b02:	89a3      	ldrh	r3, [r4, #12]
 8011b04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011b08:	81a3      	strh	r3, [r4, #12]
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	6063      	str	r3, [r4, #4]
 8011b0e:	6923      	ldr	r3, [r4, #16]
 8011b10:	6023      	str	r3, [r4, #0]
 8011b12:	89a3      	ldrh	r3, [r4, #12]
 8011b14:	f043 0308 	orr.w	r3, r3, #8
 8011b18:	81a3      	strh	r3, [r4, #12]
 8011b1a:	6923      	ldr	r3, [r4, #16]
 8011b1c:	b94b      	cbnz	r3, 8011b32 <__swsetup_r+0x7a>
 8011b1e:	89a3      	ldrh	r3, [r4, #12]
 8011b20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011b24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011b28:	d003      	beq.n	8011b32 <__swsetup_r+0x7a>
 8011b2a:	4621      	mov	r1, r4
 8011b2c:	4628      	mov	r0, r5
 8011b2e:	f000 f883 	bl	8011c38 <__smakebuf_r>
 8011b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b36:	f013 0201 	ands.w	r2, r3, #1
 8011b3a:	d00a      	beq.n	8011b52 <__swsetup_r+0x9a>
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	60a2      	str	r2, [r4, #8]
 8011b40:	6962      	ldr	r2, [r4, #20]
 8011b42:	4252      	negs	r2, r2
 8011b44:	61a2      	str	r2, [r4, #24]
 8011b46:	6922      	ldr	r2, [r4, #16]
 8011b48:	b942      	cbnz	r2, 8011b5c <__swsetup_r+0xa4>
 8011b4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011b4e:	d1c5      	bne.n	8011adc <__swsetup_r+0x24>
 8011b50:	bd38      	pop	{r3, r4, r5, pc}
 8011b52:	0799      	lsls	r1, r3, #30
 8011b54:	bf58      	it	pl
 8011b56:	6962      	ldrpl	r2, [r4, #20]
 8011b58:	60a2      	str	r2, [r4, #8]
 8011b5a:	e7f4      	b.n	8011b46 <__swsetup_r+0x8e>
 8011b5c:	2000      	movs	r0, #0
 8011b5e:	e7f7      	b.n	8011b50 <__swsetup_r+0x98>
 8011b60:	20000118 	.word	0x20000118

08011b64 <_raise_r>:
 8011b64:	291f      	cmp	r1, #31
 8011b66:	b538      	push	{r3, r4, r5, lr}
 8011b68:	4605      	mov	r5, r0
 8011b6a:	460c      	mov	r4, r1
 8011b6c:	d904      	bls.n	8011b78 <_raise_r+0x14>
 8011b6e:	2316      	movs	r3, #22
 8011b70:	6003      	str	r3, [r0, #0]
 8011b72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011b76:	bd38      	pop	{r3, r4, r5, pc}
 8011b78:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011b7a:	b112      	cbz	r2, 8011b82 <_raise_r+0x1e>
 8011b7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011b80:	b94b      	cbnz	r3, 8011b96 <_raise_r+0x32>
 8011b82:	4628      	mov	r0, r5
 8011b84:	f000 f830 	bl	8011be8 <_getpid_r>
 8011b88:	4622      	mov	r2, r4
 8011b8a:	4601      	mov	r1, r0
 8011b8c:	4628      	mov	r0, r5
 8011b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b92:	f000 b817 	b.w	8011bc4 <_kill_r>
 8011b96:	2b01      	cmp	r3, #1
 8011b98:	d00a      	beq.n	8011bb0 <_raise_r+0x4c>
 8011b9a:	1c59      	adds	r1, r3, #1
 8011b9c:	d103      	bne.n	8011ba6 <_raise_r+0x42>
 8011b9e:	2316      	movs	r3, #22
 8011ba0:	6003      	str	r3, [r0, #0]
 8011ba2:	2001      	movs	r0, #1
 8011ba4:	e7e7      	b.n	8011b76 <_raise_r+0x12>
 8011ba6:	2100      	movs	r1, #0
 8011ba8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011bac:	4620      	mov	r0, r4
 8011bae:	4798      	blx	r3
 8011bb0:	2000      	movs	r0, #0
 8011bb2:	e7e0      	b.n	8011b76 <_raise_r+0x12>

08011bb4 <raise>:
 8011bb4:	4b02      	ldr	r3, [pc, #8]	@ (8011bc0 <raise+0xc>)
 8011bb6:	4601      	mov	r1, r0
 8011bb8:	6818      	ldr	r0, [r3, #0]
 8011bba:	f7ff bfd3 	b.w	8011b64 <_raise_r>
 8011bbe:	bf00      	nop
 8011bc0:	20000118 	.word	0x20000118

08011bc4 <_kill_r>:
 8011bc4:	b538      	push	{r3, r4, r5, lr}
 8011bc6:	4d07      	ldr	r5, [pc, #28]	@ (8011be4 <_kill_r+0x20>)
 8011bc8:	2300      	movs	r3, #0
 8011bca:	4604      	mov	r4, r0
 8011bcc:	4608      	mov	r0, r1
 8011bce:	4611      	mov	r1, r2
 8011bd0:	602b      	str	r3, [r5, #0]
 8011bd2:	f7f0 fecd 	bl	8002970 <_kill>
 8011bd6:	1c43      	adds	r3, r0, #1
 8011bd8:	d102      	bne.n	8011be0 <_kill_r+0x1c>
 8011bda:	682b      	ldr	r3, [r5, #0]
 8011bdc:	b103      	cbz	r3, 8011be0 <_kill_r+0x1c>
 8011bde:	6023      	str	r3, [r4, #0]
 8011be0:	bd38      	pop	{r3, r4, r5, pc}
 8011be2:	bf00      	nop
 8011be4:	20002688 	.word	0x20002688

08011be8 <_getpid_r>:
 8011be8:	f7f0 beba 	b.w	8002960 <_getpid>

08011bec <__swhatbuf_r>:
 8011bec:	b570      	push	{r4, r5, r6, lr}
 8011bee:	460c      	mov	r4, r1
 8011bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bf4:	2900      	cmp	r1, #0
 8011bf6:	b096      	sub	sp, #88	@ 0x58
 8011bf8:	4615      	mov	r5, r2
 8011bfa:	461e      	mov	r6, r3
 8011bfc:	da0d      	bge.n	8011c1a <__swhatbuf_r+0x2e>
 8011bfe:	89a3      	ldrh	r3, [r4, #12]
 8011c00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011c04:	f04f 0100 	mov.w	r1, #0
 8011c08:	bf14      	ite	ne
 8011c0a:	2340      	movne	r3, #64	@ 0x40
 8011c0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011c10:	2000      	movs	r0, #0
 8011c12:	6031      	str	r1, [r6, #0]
 8011c14:	602b      	str	r3, [r5, #0]
 8011c16:	b016      	add	sp, #88	@ 0x58
 8011c18:	bd70      	pop	{r4, r5, r6, pc}
 8011c1a:	466a      	mov	r2, sp
 8011c1c:	f000 f848 	bl	8011cb0 <_fstat_r>
 8011c20:	2800      	cmp	r0, #0
 8011c22:	dbec      	blt.n	8011bfe <__swhatbuf_r+0x12>
 8011c24:	9901      	ldr	r1, [sp, #4]
 8011c26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011c2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011c2e:	4259      	negs	r1, r3
 8011c30:	4159      	adcs	r1, r3
 8011c32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011c36:	e7eb      	b.n	8011c10 <__swhatbuf_r+0x24>

08011c38 <__smakebuf_r>:
 8011c38:	898b      	ldrh	r3, [r1, #12]
 8011c3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011c3c:	079d      	lsls	r5, r3, #30
 8011c3e:	4606      	mov	r6, r0
 8011c40:	460c      	mov	r4, r1
 8011c42:	d507      	bpl.n	8011c54 <__smakebuf_r+0x1c>
 8011c44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011c48:	6023      	str	r3, [r4, #0]
 8011c4a:	6123      	str	r3, [r4, #16]
 8011c4c:	2301      	movs	r3, #1
 8011c4e:	6163      	str	r3, [r4, #20]
 8011c50:	b003      	add	sp, #12
 8011c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c54:	ab01      	add	r3, sp, #4
 8011c56:	466a      	mov	r2, sp
 8011c58:	f7ff ffc8 	bl	8011bec <__swhatbuf_r>
 8011c5c:	9f00      	ldr	r7, [sp, #0]
 8011c5e:	4605      	mov	r5, r0
 8011c60:	4639      	mov	r1, r7
 8011c62:	4630      	mov	r0, r6
 8011c64:	f7fd fa12 	bl	800f08c <_malloc_r>
 8011c68:	b948      	cbnz	r0, 8011c7e <__smakebuf_r+0x46>
 8011c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c6e:	059a      	lsls	r2, r3, #22
 8011c70:	d4ee      	bmi.n	8011c50 <__smakebuf_r+0x18>
 8011c72:	f023 0303 	bic.w	r3, r3, #3
 8011c76:	f043 0302 	orr.w	r3, r3, #2
 8011c7a:	81a3      	strh	r3, [r4, #12]
 8011c7c:	e7e2      	b.n	8011c44 <__smakebuf_r+0xc>
 8011c7e:	89a3      	ldrh	r3, [r4, #12]
 8011c80:	6020      	str	r0, [r4, #0]
 8011c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c86:	81a3      	strh	r3, [r4, #12]
 8011c88:	9b01      	ldr	r3, [sp, #4]
 8011c8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011c8e:	b15b      	cbz	r3, 8011ca8 <__smakebuf_r+0x70>
 8011c90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c94:	4630      	mov	r0, r6
 8011c96:	f000 f81d 	bl	8011cd4 <_isatty_r>
 8011c9a:	b128      	cbz	r0, 8011ca8 <__smakebuf_r+0x70>
 8011c9c:	89a3      	ldrh	r3, [r4, #12]
 8011c9e:	f023 0303 	bic.w	r3, r3, #3
 8011ca2:	f043 0301 	orr.w	r3, r3, #1
 8011ca6:	81a3      	strh	r3, [r4, #12]
 8011ca8:	89a3      	ldrh	r3, [r4, #12]
 8011caa:	431d      	orrs	r5, r3
 8011cac:	81a5      	strh	r5, [r4, #12]
 8011cae:	e7cf      	b.n	8011c50 <__smakebuf_r+0x18>

08011cb0 <_fstat_r>:
 8011cb0:	b538      	push	{r3, r4, r5, lr}
 8011cb2:	4d07      	ldr	r5, [pc, #28]	@ (8011cd0 <_fstat_r+0x20>)
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	4604      	mov	r4, r0
 8011cb8:	4608      	mov	r0, r1
 8011cba:	4611      	mov	r1, r2
 8011cbc:	602b      	str	r3, [r5, #0]
 8011cbe:	f7f0 feb7 	bl	8002a30 <_fstat>
 8011cc2:	1c43      	adds	r3, r0, #1
 8011cc4:	d102      	bne.n	8011ccc <_fstat_r+0x1c>
 8011cc6:	682b      	ldr	r3, [r5, #0]
 8011cc8:	b103      	cbz	r3, 8011ccc <_fstat_r+0x1c>
 8011cca:	6023      	str	r3, [r4, #0]
 8011ccc:	bd38      	pop	{r3, r4, r5, pc}
 8011cce:	bf00      	nop
 8011cd0:	20002688 	.word	0x20002688

08011cd4 <_isatty_r>:
 8011cd4:	b538      	push	{r3, r4, r5, lr}
 8011cd6:	4d06      	ldr	r5, [pc, #24]	@ (8011cf0 <_isatty_r+0x1c>)
 8011cd8:	2300      	movs	r3, #0
 8011cda:	4604      	mov	r4, r0
 8011cdc:	4608      	mov	r0, r1
 8011cde:	602b      	str	r3, [r5, #0]
 8011ce0:	f7f0 feb6 	bl	8002a50 <_isatty>
 8011ce4:	1c43      	adds	r3, r0, #1
 8011ce6:	d102      	bne.n	8011cee <_isatty_r+0x1a>
 8011ce8:	682b      	ldr	r3, [r5, #0]
 8011cea:	b103      	cbz	r3, 8011cee <_isatty_r+0x1a>
 8011cec:	6023      	str	r3, [r4, #0]
 8011cee:	bd38      	pop	{r3, r4, r5, pc}
 8011cf0:	20002688 	.word	0x20002688

08011cf4 <_init>:
 8011cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cf6:	bf00      	nop
 8011cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011cfa:	bc08      	pop	{r3}
 8011cfc:	469e      	mov	lr, r3
 8011cfe:	4770      	bx	lr

08011d00 <_fini>:
 8011d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d02:	bf00      	nop
 8011d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d06:	bc08      	pop	{r3}
 8011d08:	469e      	mov	lr, r3
 8011d0a:	4770      	bx	lr
