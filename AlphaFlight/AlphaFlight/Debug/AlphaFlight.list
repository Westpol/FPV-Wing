
AlphaFlight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011ddc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08011fc0  08011fc0  00012fc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080123cc  080123cc  000142d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080123cc  080123cc  000133cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080123d4  080123d4  000142d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080123d4  080123d4  000133d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080123d8  080123d8  000133d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d4  20000000  080123dc  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023d8  200002d4  080126b0  000142d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200026ac  080126b0  000146ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000142d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002610c  00000000  00000000  00014304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000562e  00000000  00000000  0003a410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020d8  00000000  00000000  0003fa40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001953  00000000  00000000  00041b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a9d3  00000000  00000000  0004346b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a49b  00000000  00000000  0006de3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f07f1  00000000  00000000  000982d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00188aca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b40  00000000  00000000  00188b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00192650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002d4 	.word	0x200002d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011fa4 	.word	0x08011fa4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002d8 	.word	0x200002d8
 800021c:	08011fa4 	.word	0x08011fa4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <BMI_INIT>:
static GPIO_TypeDef *accel_port;
static uint16_t accel_pin;

Gyro_Data gyro_data;

int BMI_INIT(SPI_HandleTypeDef *hspi, GPIO_TypeDef *GYRO_GPIOx, uint16_t GYRO_PIN, GPIO_TypeDef *ACCEL_GPIOx, uint16_t ACCEL_PIN){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af02      	add	r7, sp, #8
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	4613      	mov	r3, r2
 8000f32:	80fb      	strh	r3, [r7, #6]
	gyro_data.gyro_x_raw = 0;
 8000f34:	4b5e      	ldr	r3, [pc, #376]	@ (80010b0 <BMI_INIT+0x18c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	801a      	strh	r2, [r3, #0]
	gyro_data.gyro_y_raw = 0;
 8000f3a:	4b5d      	ldr	r3, [pc, #372]	@ (80010b0 <BMI_INIT+0x18c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	805a      	strh	r2, [r3, #2]
	gyro_data.gyro_z_raw = 0;
 8000f40:	4b5b      	ldr	r3, [pc, #364]	@ (80010b0 <BMI_INIT+0x18c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	809a      	strh	r2, [r3, #4]
	bmi088_spi = hspi;
 8000f46:	4a5b      	ldr	r2, [pc, #364]	@ (80010b4 <BMI_INIT+0x190>)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	6013      	str	r3, [r2, #0]
	gyro_port = GYRO_GPIOx;
 8000f4c:	4a5a      	ldr	r2, [pc, #360]	@ (80010b8 <BMI_INIT+0x194>)
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	6013      	str	r3, [r2, #0]
	gyro_pin = GYRO_PIN;
 8000f52:	4a5a      	ldr	r2, [pc, #360]	@ (80010bc <BMI_INIT+0x198>)
 8000f54:	88fb      	ldrh	r3, [r7, #6]
 8000f56:	8013      	strh	r3, [r2, #0]
	accel_port = ACCEL_GPIOx;
 8000f58:	4a59      	ldr	r2, [pc, #356]	@ (80010c0 <BMI_INIT+0x19c>)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	6013      	str	r3, [r2, #0]
	accel_pin = ACCEL_PIN;
 8000f5e:	4a59      	ldr	r2, [pc, #356]	@ (80010c4 <BMI_INIT+0x1a0>)
 8000f60:	8c3b      	ldrh	r3, [r7, #32]
 8000f62:	8013      	strh	r3, [r2, #0]
	uint8_t tx_buffer[2] = {0x00 | READ_BYTE, 0x00};
 8000f64:	2380      	movs	r3, #128	@ 0x80
 8000f66:	82bb      	strh	r3, [r7, #20]
	uint8_t rx_buffer[2] = {0x00, 0x00};
 8000f68:	2300      	movs	r3, #0
 8000f6a:	823b      	strh	r3, [r7, #16]

	HAL_GPIO_WritePin(gyro_port, gyro_pin, GPIO_PIN_RESET);
 8000f6c:	4b52      	ldr	r3, [pc, #328]	@ (80010b8 <BMI_INIT+0x194>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a52      	ldr	r2, [pc, #328]	@ (80010bc <BMI_INIT+0x198>)
 8000f72:	8811      	ldrh	r1, [r2, #0]
 8000f74:	2200      	movs	r2, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f003 f914 	bl	80041a4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(bmi088_spi, tx_buffer, rx_buffer, 2, 100);
 8000f7c:	4b4d      	ldr	r3, [pc, #308]	@ (80010b4 <BMI_INIT+0x190>)
 8000f7e:	6818      	ldr	r0, [r3, #0]
 8000f80:	f107 0210 	add.w	r2, r7, #16
 8000f84:	f107 0114 	add.w	r1, r7, #20
 8000f88:	2364      	movs	r3, #100	@ 0x64
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	f006 ffad 	bl	8007eec <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(gyro_port, gyro_pin, GPIO_PIN_SET);
 8000f92:	4b49      	ldr	r3, [pc, #292]	@ (80010b8 <BMI_INIT+0x194>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a49      	ldr	r2, [pc, #292]	@ (80010bc <BMI_INIT+0x198>)
 8000f98:	8811      	ldrh	r1, [r2, #0]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f003 f901 	bl	80041a4 <HAL_GPIO_WritePin>


	if(rx_buffer[1] != 0x0F){
 8000fa2:	7c7b      	ldrb	r3, [r7, #17]
 8000fa4:	2b0f      	cmp	r3, #15
 8000fa6:	d001      	beq.n	8000fac <BMI_INIT+0x88>
		return 1;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e07d      	b.n	80010a8 <BMI_INIT+0x184>
	}

	HAL_GPIO_WritePin(accel_port, accel_pin, GPIO_PIN_RESET);
 8000fac:	4b44      	ldr	r3, [pc, #272]	@ (80010c0 <BMI_INIT+0x19c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a44      	ldr	r2, [pc, #272]	@ (80010c4 <BMI_INIT+0x1a0>)
 8000fb2:	8811      	ldrh	r1, [r2, #0]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f003 f8f4 	bl	80041a4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(bmi088_spi, tx_buffer, rx_buffer, 2, 100);
 8000fbc:	4b3d      	ldr	r3, [pc, #244]	@ (80010b4 <BMI_INIT+0x190>)
 8000fbe:	6818      	ldr	r0, [r3, #0]
 8000fc0:	f107 0210 	add.w	r2, r7, #16
 8000fc4:	f107 0114 	add.w	r1, r7, #20
 8000fc8:	2364      	movs	r3, #100	@ 0x64
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	2302      	movs	r3, #2
 8000fce:	f006 ff8d 	bl	8007eec <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(accel_port, accel_pin, GPIO_PIN_SET);
 8000fd2:	4b3b      	ldr	r3, [pc, #236]	@ (80010c0 <BMI_INIT+0x19c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a3b      	ldr	r2, [pc, #236]	@ (80010c4 <BMI_INIT+0x1a0>)
 8000fd8:	8811      	ldrh	r1, [r2, #0]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f003 f8e1 	bl	80041a4 <HAL_GPIO_WritePin>

	if(rx_buffer[1] != 0x1E){
 8000fe2:	7c7b      	ldrb	r3, [r7, #17]
 8000fe4:	2b1e      	cmp	r3, #30
 8000fe6:	d001      	beq.n	8000fec <BMI_INIT+0xc8>
		return 1;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e05d      	b.n	80010a8 <BMI_INIT+0x184>
	}

	// dummy setup here
	tx_buffer[0] = GYRO_RANGE_ADRESS & WRITE_BYTE;		// setting up range
 8000fec:	230f      	movs	r3, #15
 8000fee:	753b      	strb	r3, [r7, #20]
	tx_buffer[1] = GYRO_RANGE_2000_DEG_PER_SECOND;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(gyro_port, gyro_pin, GPIO_PIN_RESET);
 8000ff4:	4b30      	ldr	r3, [pc, #192]	@ (80010b8 <BMI_INIT+0x194>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a30      	ldr	r2, [pc, #192]	@ (80010bc <BMI_INIT+0x198>)
 8000ffa:	8811      	ldrh	r1, [r2, #0]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f003 f8d0 	bl	80041a4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(bmi088_spi, tx_buffer, rx_buffer, 2, 100);
 8001004:	4b2b      	ldr	r3, [pc, #172]	@ (80010b4 <BMI_INIT+0x190>)
 8001006:	6818      	ldr	r0, [r3, #0]
 8001008:	f107 0210 	add.w	r2, r7, #16
 800100c:	f107 0114 	add.w	r1, r7, #20
 8001010:	2364      	movs	r3, #100	@ 0x64
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2302      	movs	r3, #2
 8001016:	f006 ff69 	bl	8007eec <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(gyro_port, gyro_pin, GPIO_PIN_SET);
 800101a:	4b27      	ldr	r3, [pc, #156]	@ (80010b8 <BMI_INIT+0x194>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a27      	ldr	r2, [pc, #156]	@ (80010bc <BMI_INIT+0x198>)
 8001020:	8811      	ldrh	r1, [r2, #0]
 8001022:	2201      	movs	r2, #1
 8001024:	4618      	mov	r0, r3
 8001026:	f003 f8bd 	bl	80041a4 <HAL_GPIO_WritePin>

	tx_buffer[0] = GYRO_ODR_FILTER_ADRESS & WRITE_BYTE;		// setting up filter
 800102a:	2310      	movs	r3, #16
 800102c:	753b      	strb	r3, [r7, #20]
	tx_buffer[1] = GYRO_ODR_100_HZ_FILTER_12_HZ;
 800102e:	2305      	movs	r3, #5
 8001030:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(gyro_port, gyro_pin, GPIO_PIN_RESET);
 8001032:	4b21      	ldr	r3, [pc, #132]	@ (80010b8 <BMI_INIT+0x194>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a21      	ldr	r2, [pc, #132]	@ (80010bc <BMI_INIT+0x198>)
 8001038:	8811      	ldrh	r1, [r2, #0]
 800103a:	2200      	movs	r2, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f003 f8b1 	bl	80041a4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(bmi088_spi, tx_buffer, rx_buffer, 2, 100);
 8001042:	4b1c      	ldr	r3, [pc, #112]	@ (80010b4 <BMI_INIT+0x190>)
 8001044:	6818      	ldr	r0, [r3, #0]
 8001046:	f107 0210 	add.w	r2, r7, #16
 800104a:	f107 0114 	add.w	r1, r7, #20
 800104e:	2364      	movs	r3, #100	@ 0x64
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2302      	movs	r3, #2
 8001054:	f006 ff4a 	bl	8007eec <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(gyro_port, gyro_pin, GPIO_PIN_SET);
 8001058:	4b17      	ldr	r3, [pc, #92]	@ (80010b8 <BMI_INIT+0x194>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a17      	ldr	r2, [pc, #92]	@ (80010bc <BMI_INIT+0x198>)
 800105e:	8811      	ldrh	r1, [r2, #0]
 8001060:	2201      	movs	r2, #1
 8001062:	4618      	mov	r0, r3
 8001064:	f003 f89e 	bl	80041a4 <HAL_GPIO_WritePin>

	tx_buffer[0] = GYRO_POWER_MODE_ADRESS & WRITE_BYTE;		// setting up power mode
 8001068:	2311      	movs	r3, #17
 800106a:	753b      	strb	r3, [r7, #20]
	tx_buffer[1] = GYRO_POWER_MODE_NORMAL;
 800106c:	2300      	movs	r3, #0
 800106e:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(gyro_port, gyro_pin, GPIO_PIN_RESET);
 8001070:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <BMI_INIT+0x194>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a11      	ldr	r2, [pc, #68]	@ (80010bc <BMI_INIT+0x198>)
 8001076:	8811      	ldrh	r1, [r2, #0]
 8001078:	2200      	movs	r2, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f003 f892 	bl	80041a4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(bmi088_spi, tx_buffer, rx_buffer, 2, 100);
 8001080:	4b0c      	ldr	r3, [pc, #48]	@ (80010b4 <BMI_INIT+0x190>)
 8001082:	6818      	ldr	r0, [r3, #0]
 8001084:	f107 0210 	add.w	r2, r7, #16
 8001088:	f107 0114 	add.w	r1, r7, #20
 800108c:	2364      	movs	r3, #100	@ 0x64
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2302      	movs	r3, #2
 8001092:	f006 ff2b 	bl	8007eec <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(gyro_port, gyro_pin, GPIO_PIN_SET);
 8001096:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <BMI_INIT+0x194>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a08      	ldr	r2, [pc, #32]	@ (80010bc <BMI_INIT+0x198>)
 800109c:	8811      	ldrh	r1, [r2, #0]
 800109e:	2201      	movs	r2, #1
 80010a0:	4618      	mov	r0, r3
 80010a2:	f003 f87f 	bl	80041a4 <HAL_GPIO_WritePin>
	// need to add real Setup here

	return 0;
 80010a6:	2300      	movs	r3, #0

}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000304 	.word	0x20000304
 80010b4:	200002f0 	.word	0x200002f0
 80010b8:	200002f4 	.word	0x200002f4
 80010bc:	200002f8 	.word	0x200002f8
 80010c0:	200002fc 	.word	0x200002fc
 80010c4:	20000300 	.word	0x20000300

080010c8 <BMI_READ_GYRO_DATA>:
void BMI_READ_GYRO_DATA(){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af02      	add	r7, sp, #8
	uint8_t tx_buffer[7] = {0x02 | READ_BYTE, 0, 0, 0, 0, 0, 0};
 80010ce:	2382      	movs	r3, #130	@ 0x82
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	2100      	movs	r1, #0
 80010d8:	460a      	mov	r2, r1
 80010da:	801a      	strh	r2, [r3, #0]
 80010dc:	460a      	mov	r2, r1
 80010de:	709a      	strb	r2, [r3, #2]
	uint8_t rx_buffer[7];

	HAL_GPIO_WritePin(gyro_port, gyro_pin, GPIO_PIN_RESET);
 80010e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001158 <BMI_READ_GYRO_DATA+0x90>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a1d      	ldr	r2, [pc, #116]	@ (800115c <BMI_READ_GYRO_DATA+0x94>)
 80010e6:	8811      	ldrh	r1, [r2, #0]
 80010e8:	2200      	movs	r2, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f003 f85a 	bl	80041a4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(bmi088_spi, tx_buffer, rx_buffer, 7, 100);
 80010f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001160 <BMI_READ_GYRO_DATA+0x98>)
 80010f2:	6818      	ldr	r0, [r3, #0]
 80010f4:	463a      	mov	r2, r7
 80010f6:	f107 0108 	add.w	r1, r7, #8
 80010fa:	2364      	movs	r3, #100	@ 0x64
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2307      	movs	r3, #7
 8001100:	f006 fef4 	bl	8007eec <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(gyro_port, gyro_pin, GPIO_PIN_SET);
 8001104:	4b14      	ldr	r3, [pc, #80]	@ (8001158 <BMI_READ_GYRO_DATA+0x90>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a14      	ldr	r2, [pc, #80]	@ (800115c <BMI_READ_GYRO_DATA+0x94>)
 800110a:	8811      	ldrh	r1, [r2, #0]
 800110c:	2201      	movs	r2, #1
 800110e:	4618      	mov	r0, r3
 8001110:	f003 f848 	bl	80041a4 <HAL_GPIO_WritePin>

	gyro_data.gyro_x_raw = ((int16_t)rx_buffer[1] << 8) | rx_buffer[2];
 8001114:	787b      	ldrb	r3, [r7, #1]
 8001116:	b21b      	sxth	r3, r3
 8001118:	021b      	lsls	r3, r3, #8
 800111a:	b21a      	sxth	r2, r3
 800111c:	78bb      	ldrb	r3, [r7, #2]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	b21a      	sxth	r2, r3
 8001124:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <BMI_READ_GYRO_DATA+0x9c>)
 8001126:	801a      	strh	r2, [r3, #0]
	gyro_data.gyro_y_raw = ((int16_t)rx_buffer[3] << 8) | rx_buffer[4];
 8001128:	78fb      	ldrb	r3, [r7, #3]
 800112a:	b21b      	sxth	r3, r3
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	b21a      	sxth	r2, r3
 8001130:	793b      	ldrb	r3, [r7, #4]
 8001132:	b21b      	sxth	r3, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	b21a      	sxth	r2, r3
 8001138:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <BMI_READ_GYRO_DATA+0x9c>)
 800113a:	805a      	strh	r2, [r3, #2]
	gyro_data.gyro_z_raw = ((int16_t)rx_buffer[5] << 8) | rx_buffer[6];
 800113c:	797b      	ldrb	r3, [r7, #5]
 800113e:	b21b      	sxth	r3, r3
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	b21a      	sxth	r2, r3
 8001144:	79bb      	ldrb	r3, [r7, #6]
 8001146:	b21b      	sxth	r3, r3
 8001148:	4313      	orrs	r3, r2
 800114a:	b21a      	sxth	r2, r3
 800114c:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <BMI_READ_GYRO_DATA+0x9c>)
 800114e:	809a      	strh	r2, [r3, #4]

}
 8001150:	bf00      	nop
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200002f4 	.word	0x200002f4
 800115c:	200002f8 	.word	0x200002f8
 8001160:	200002f0 	.word	0x200002f0
 8001164:	20000304 	.word	0x20000304

08001168 <BMI_GET_GYRO_X>:

double BMI_GET_GYRO_X(){
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	return (gyro_data.gyro_x_raw / 32767.0) * 2000.0;
 800116c:	4b10      	ldr	r3, [pc, #64]	@ (80011b0 <BMI_GET_GYRO_X+0x48>)
 800116e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f9fe 	bl	8000574 <__aeabi_i2d>
 8001178:	a30b      	add	r3, pc, #44	@ (adr r3, 80011a8 <BMI_GET_GYRO_X+0x40>)
 800117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117e:	f7ff fb8d 	bl	800089c <__aeabi_ddiv>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4610      	mov	r0, r2
 8001188:	4619      	mov	r1, r3
 800118a:	f04f 0200 	mov.w	r2, #0
 800118e:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <BMI_GET_GYRO_X+0x4c>)
 8001190:	f7ff fa5a 	bl	8000648 <__aeabi_dmul>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	ec43 2b17 	vmov	d7, r2, r3
}
 800119c:	eeb0 0a47 	vmov.f32	s0, s14
 80011a0:	eef0 0a67 	vmov.f32	s1, s15
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	00000000 	.word	0x00000000
 80011ac:	40dfffc0 	.word	0x40dfffc0
 80011b0:	20000304 	.word	0x20000304
 80011b4:	409f4000 	.word	0x409f4000

080011b8 <BMI_GET_GYRO_Y>:
double BMI_GET_GYRO_Y(){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	return (gyro_data.gyro_y_raw / 32767.0) * 2000.0;
 80011bc:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <BMI_GET_GYRO_Y+0x48>)
 80011be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff f9d6 	bl	8000574 <__aeabi_i2d>
 80011c8:	a30b      	add	r3, pc, #44	@ (adr r3, 80011f8 <BMI_GET_GYRO_Y+0x40>)
 80011ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ce:	f7ff fb65 	bl	800089c <__aeabi_ddiv>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	4b09      	ldr	r3, [pc, #36]	@ (8001204 <BMI_GET_GYRO_Y+0x4c>)
 80011e0:	f7ff fa32 	bl	8000648 <__aeabi_dmul>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	ec43 2b17 	vmov	d7, r2, r3
}
 80011ec:	eeb0 0a47 	vmov.f32	s0, s14
 80011f0:	eef0 0a67 	vmov.f32	s1, s15
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	00000000 	.word	0x00000000
 80011fc:	40dfffc0 	.word	0x40dfffc0
 8001200:	20000304 	.word	0x20000304
 8001204:	409f4000 	.word	0x409f4000

08001208 <BMI_GET_GYRO_Z>:
double BMI_GET_GYRO_Z(){
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	return (gyro_data.gyro_z_raw / 32767.0) * 2000.0;
 800120c:	4b10      	ldr	r3, [pc, #64]	@ (8001250 <BMI_GET_GYRO_Z+0x48>)
 800120e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f9ae 	bl	8000574 <__aeabi_i2d>
 8001218:	a30b      	add	r3, pc, #44	@ (adr r3, 8001248 <BMI_GET_GYRO_Z+0x40>)
 800121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121e:	f7ff fb3d 	bl	800089c <__aeabi_ddiv>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4610      	mov	r0, r2
 8001228:	4619      	mov	r1, r3
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	4b09      	ldr	r3, [pc, #36]	@ (8001254 <BMI_GET_GYRO_Z+0x4c>)
 8001230:	f7ff fa0a 	bl	8000648 <__aeabi_dmul>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	ec43 2b17 	vmov	d7, r2, r3
}
 800123c:	eeb0 0a47 	vmov.f32	s0, s14
 8001240:	eef0 0a67 	vmov.f32	s1, s15
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	00000000 	.word	0x00000000
 800124c:	40dfffc0 	.word	0x40dfffc0
 8001250:	20000304 	.word	0x20000304
 8001254:	409f4000 	.word	0x409f4000

08001258 <CRSF_Init>:

CRSF_Data_t crsf_data = {0};  // Struct instance to hold CRSF channel data
static UART_HandleTypeDef *crsf_huart;  // Pointer to UART handler
static uint8_t crsf_rx_buffer[CRSF_BUFFER_SIZE];  // DMA buffer

void CRSF_Init(UART_HandleTypeDef *huart) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
    crsf_huart = huart;
 8001260:	4a06      	ldr	r2, [pc, #24]	@ (800127c <CRSF_Init+0x24>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_DMA(crsf_huart, crsf_rx_buffer, CRSF_BUFFER_SIZE);  // Start UART DMA
 8001266:	4b05      	ldr	r3, [pc, #20]	@ (800127c <CRSF_Init+0x24>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2240      	movs	r2, #64	@ 0x40
 800126c:	4904      	ldr	r1, [pc, #16]	@ (8001280 <CRSF_Init+0x28>)
 800126e:	4618      	mov	r0, r3
 8001270:	f008 f970 	bl	8009554 <HAL_UART_Receive_DMA>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	2000032c 	.word	0x2000032c
 8001280:	20000330 	.word	0x20000330

08001284 <CRSF_GetRxCount>:

// Get received byte count in DMA buffer
static uint16_t CRSF_GetRxCount() {
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
    return CRSF_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(crsf_huart->hdmarx);
 8001288:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <CRSF_GetRxCount+0x20>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	b29b      	uxth	r3, r3
 8001294:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001298:	b29b      	uxth	r3, r3
}
 800129a:	4618      	mov	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	2000032c 	.word	0x2000032c

080012a8 <CRSF_DecodeChannels>:

// Decode CRSF channel data
static void CRSF_DecodeChannels(uint8_t *data) {
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
    crsf_data.channels[0]  = (data[0] | data[1] << 8) & 0x07FF;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	b21a      	sxth	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3301      	adds	r3, #1
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b21b      	sxth	r3, r3
 80012be:	021b      	lsls	r3, r3, #8
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	4313      	orrs	r3, r2
 80012c4:	b21b      	sxth	r3, r3
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	4b7d      	ldr	r3, [pc, #500]	@ (80014c4 <CRSF_DecodeChannels+0x21c>)
 80012d0:	801a      	strh	r2, [r3, #0]
    crsf_data.channels[1]  = (data[1] >> 3 | data[2] << 5) & 0x07FF;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3301      	adds	r3, #1
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	08db      	lsrs	r3, r3, #3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	b21a      	sxth	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3302      	adds	r3, #2
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	015b      	lsls	r3, r3, #5
 80012e8:	b21b      	sxth	r3, r3
 80012ea:	4313      	orrs	r3, r2
 80012ec:	b21b      	sxth	r3, r3
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	4b73      	ldr	r3, [pc, #460]	@ (80014c4 <CRSF_DecodeChannels+0x21c>)
 80012f8:	805a      	strh	r2, [r3, #2]
    crsf_data.channels[2]  = (data[2] >> 6 | data[3] << 2 | data[4] << 10) & 0x07FF;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3302      	adds	r3, #2
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	099b      	lsrs	r3, r3, #6
 8001302:	b2db      	uxtb	r3, r3
 8001304:	b21a      	sxth	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3303      	adds	r3, #3
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	b21b      	sxth	r3, r3
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	b21b      	sxth	r3, r3
 8001312:	4313      	orrs	r3, r2
 8001314:	b21a      	sxth	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3304      	adds	r3, #4
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b21b      	sxth	r3, r3
 800131e:	029b      	lsls	r3, r3, #10
 8001320:	b21b      	sxth	r3, r3
 8001322:	4313      	orrs	r3, r2
 8001324:	b21b      	sxth	r3, r3
 8001326:	b29b      	uxth	r3, r3
 8001328:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800132c:	b29a      	uxth	r2, r3
 800132e:	4b65      	ldr	r3, [pc, #404]	@ (80014c4 <CRSF_DecodeChannels+0x21c>)
 8001330:	809a      	strh	r2, [r3, #4]
    crsf_data.channels[3]  = (data[4] >> 1 | data[5] << 7) & 0x07FF;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3304      	adds	r3, #4
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	085b      	lsrs	r3, r3, #1
 800133a:	b2db      	uxtb	r3, r3
 800133c:	b21a      	sxth	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3305      	adds	r3, #5
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	b21b      	sxth	r3, r3
 8001346:	01db      	lsls	r3, r3, #7
 8001348:	b21b      	sxth	r3, r3
 800134a:	4313      	orrs	r3, r2
 800134c:	b21b      	sxth	r3, r3
 800134e:	b29b      	uxth	r3, r3
 8001350:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001354:	b29a      	uxth	r2, r3
 8001356:	4b5b      	ldr	r3, [pc, #364]	@ (80014c4 <CRSF_DecodeChannels+0x21c>)
 8001358:	80da      	strh	r2, [r3, #6]
    crsf_data.channels[4]  = (data[5] >> 4 | data[6] << 4) & 0x07FF;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3305      	adds	r3, #5
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	091b      	lsrs	r3, r3, #4
 8001362:	b2db      	uxtb	r3, r3
 8001364:	b21a      	sxth	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3306      	adds	r3, #6
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	b21b      	sxth	r3, r3
 800136e:	011b      	lsls	r3, r3, #4
 8001370:	b21b      	sxth	r3, r3
 8001372:	4313      	orrs	r3, r2
 8001374:	b21b      	sxth	r3, r3
 8001376:	b29b      	uxth	r3, r3
 8001378:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800137c:	b29a      	uxth	r2, r3
 800137e:	4b51      	ldr	r3, [pc, #324]	@ (80014c4 <CRSF_DecodeChannels+0x21c>)
 8001380:	811a      	strh	r2, [r3, #8]
    crsf_data.channels[5]  = (data[6] >> 7 | data[7] << 1 | data[8] << 9) & 0x07FF;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3306      	adds	r3, #6
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	09db      	lsrs	r3, r3, #7
 800138a:	b2db      	uxtb	r3, r3
 800138c:	b21a      	sxth	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3307      	adds	r3, #7
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	b21b      	sxth	r3, r3
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	b21b      	sxth	r3, r3
 800139a:	4313      	orrs	r3, r2
 800139c:	b21a      	sxth	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3308      	adds	r3, #8
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	025b      	lsls	r3, r3, #9
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	4313      	orrs	r3, r2
 80013ac:	b21b      	sxth	r3, r3
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	4b43      	ldr	r3, [pc, #268]	@ (80014c4 <CRSF_DecodeChannels+0x21c>)
 80013b8:	815a      	strh	r2, [r3, #10]
    crsf_data.channels[6]  = (data[8] >> 2 | data[9] << 6) & 0x07FF;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3308      	adds	r3, #8
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	089b      	lsrs	r3, r3, #2
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	b21a      	sxth	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3309      	adds	r3, #9
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	019b      	lsls	r3, r3, #6
 80013d0:	b21b      	sxth	r3, r3
 80013d2:	4313      	orrs	r3, r2
 80013d4:	b21b      	sxth	r3, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013dc:	b29a      	uxth	r2, r3
 80013de:	4b39      	ldr	r3, [pc, #228]	@ (80014c4 <CRSF_DecodeChannels+0x21c>)
 80013e0:	819a      	strh	r2, [r3, #12]
    crsf_data.channels[7]  = (data[9] >> 5 | data[10] << 3) & 0x07FF;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3309      	adds	r3, #9
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	095b      	lsrs	r3, r3, #5
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	b21a      	sxth	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	330a      	adds	r3, #10
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	b21b      	sxth	r3, r3
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	4313      	orrs	r3, r2
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	b29b      	uxth	r3, r3
 8001400:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001404:	b29a      	uxth	r2, r3
 8001406:	4b2f      	ldr	r3, [pc, #188]	@ (80014c4 <CRSF_DecodeChannels+0x21c>)
 8001408:	81da      	strh	r2, [r3, #14]
    crsf_data.channels[8]  = (data[11] | data[12] << 8) & 0x07FF;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	330b      	adds	r3, #11
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b21a      	sxth	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	330c      	adds	r3, #12
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b21b      	sxth	r3, r3
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	b21b      	sxth	r3, r3
 800141e:	4313      	orrs	r3, r2
 8001420:	b21b      	sxth	r3, r3
 8001422:	b29b      	uxth	r3, r3
 8001424:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001428:	b29a      	uxth	r2, r3
 800142a:	4b26      	ldr	r3, [pc, #152]	@ (80014c4 <CRSF_DecodeChannels+0x21c>)
 800142c:	821a      	strh	r2, [r3, #16]
    crsf_data.channels[9]  = (data[12] >> 3 | data[13] << 5) & 0x07FF;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	330c      	adds	r3, #12
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	08db      	lsrs	r3, r3, #3
 8001436:	b2db      	uxtb	r3, r3
 8001438:	b21a      	sxth	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	330d      	adds	r3, #13
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	b21b      	sxth	r3, r3
 8001442:	015b      	lsls	r3, r3, #5
 8001444:	b21b      	sxth	r3, r3
 8001446:	4313      	orrs	r3, r2
 8001448:	b21b      	sxth	r3, r3
 800144a:	b29b      	uxth	r3, r3
 800144c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001450:	b29a      	uxth	r2, r3
 8001452:	4b1c      	ldr	r3, [pc, #112]	@ (80014c4 <CRSF_DecodeChannels+0x21c>)
 8001454:	825a      	strh	r2, [r3, #18]
    crsf_data.channels[10] = (data[13] >> 6 | data[14] << 2 | data[15] << 10) & 0x07FF;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	330d      	adds	r3, #13
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	099b      	lsrs	r3, r3, #6
 800145e:	b2db      	uxtb	r3, r3
 8001460:	b21a      	sxth	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	330e      	adds	r3, #14
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	b21b      	sxth	r3, r3
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	b21b      	sxth	r3, r3
 800146e:	4313      	orrs	r3, r2
 8001470:	b21a      	sxth	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	330f      	adds	r3, #15
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	b21b      	sxth	r3, r3
 800147a:	029b      	lsls	r3, r3, #10
 800147c:	b21b      	sxth	r3, r3
 800147e:	4313      	orrs	r3, r2
 8001480:	b21b      	sxth	r3, r3
 8001482:	b29b      	uxth	r3, r3
 8001484:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001488:	b29a      	uxth	r2, r3
 800148a:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <CRSF_DecodeChannels+0x21c>)
 800148c:	829a      	strh	r2, [r3, #20]
    crsf_data.channels[11] = (data[15] >> 1 | data[16] << 7) & 0x07FF;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	330f      	adds	r3, #15
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	085b      	lsrs	r3, r3, #1
 8001496:	b2db      	uxtb	r3, r3
 8001498:	b21a      	sxth	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3310      	adds	r3, #16
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b21b      	sxth	r3, r3
 80014a2:	01db      	lsls	r3, r3, #7
 80014a4:	b21b      	sxth	r3, r3
 80014a6:	4313      	orrs	r3, r2
 80014a8:	b21b      	sxth	r3, r3
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	4b04      	ldr	r3, [pc, #16]	@ (80014c4 <CRSF_DecodeChannels+0x21c>)
 80014b4:	82da      	strh	r2, [r3, #22]
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	2000030c 	.word	0x2000030c

080014c8 <CRSF_Process>:

// Process CRSF data in main loop
void CRSF_Process() {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
    uint16_t bytes_received = CRSF_GetRxCount();
 80014ce:	f7ff fed9 	bl	8001284 <CRSF_GetRxCount>
 80014d2:	4603      	mov	r3, r0
 80014d4:	80bb      	strh	r3, [r7, #4]
    if (bytes_received < 3) return;  // Not enough data for a CRSF packet
 80014d6:	88bb      	ldrh	r3, [r7, #4]
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d92b      	bls.n	8001534 <CRSF_Process+0x6c>

    for (uint16_t i = 0; i < bytes_received - 2; i++) {
 80014dc:	2300      	movs	r3, #0
 80014de:	80fb      	strh	r3, [r7, #6]
 80014e0:	e022      	b.n	8001528 <CRSF_Process+0x60>
        if (crsf_rx_buffer[i] == 0xEA) {  // Start of an RC packet
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	4a15      	ldr	r2, [pc, #84]	@ (800153c <CRSF_Process+0x74>)
 80014e6:	5cd3      	ldrb	r3, [r2, r3]
 80014e8:	2bea      	cmp	r3, #234	@ 0xea
 80014ea:	d11a      	bne.n	8001522 <CRSF_Process+0x5a>
            uint8_t length = crsf_rx_buffer[i + 1];
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	3301      	adds	r3, #1
 80014f0:	4a12      	ldr	r2, [pc, #72]	@ (800153c <CRSF_Process+0x74>)
 80014f2:	5cd3      	ldrb	r3, [r2, r3]
 80014f4:	70fb      	strb	r3, [r7, #3]
            if (length <= (bytes_received - i - 2)) {  // Check if full packet is available
 80014f6:	88ba      	ldrh	r2, [r7, #4]
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	1e5a      	subs	r2, r3, #1
 80014fe:	78fb      	ldrb	r3, [r7, #3]
 8001500:	429a      	cmp	r2, r3
 8001502:	dd0e      	ble.n	8001522 <CRSF_Process+0x5a>
                uint8_t type = crsf_rx_buffer[i + 2];
 8001504:	88fb      	ldrh	r3, [r7, #6]
 8001506:	3302      	adds	r3, #2
 8001508:	4a0c      	ldr	r2, [pc, #48]	@ (800153c <CRSF_Process+0x74>)
 800150a:	5cd3      	ldrb	r3, [r2, r3]
 800150c:	70bb      	strb	r3, [r7, #2]
                if (type == 0x16) {  // RC Channel Data
 800150e:	78bb      	ldrb	r3, [r7, #2]
 8001510:	2b16      	cmp	r3, #22
 8001512:	d106      	bne.n	8001522 <CRSF_Process+0x5a>
                    CRSF_DecodeChannels(&crsf_rx_buffer[i + 3]);  // Extract channel values
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	3303      	adds	r3, #3
 8001518:	4a08      	ldr	r2, [pc, #32]	@ (800153c <CRSF_Process+0x74>)
 800151a:	4413      	add	r3, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fec3 	bl	80012a8 <CRSF_DecodeChannels>
    for (uint16_t i = 0; i < bytes_received - 2; i++) {
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	3301      	adds	r3, #1
 8001526:	80fb      	strh	r3, [r7, #6]
 8001528:	88fa      	ldrh	r2, [r7, #6]
 800152a:	88bb      	ldrh	r3, [r7, #4]
 800152c:	3b02      	subs	r3, #2
 800152e:	429a      	cmp	r2, r3
 8001530:	dbd7      	blt.n	80014e2 <CRSF_Process+0x1a>
 8001532:	e000      	b.n	8001536 <CRSF_Process+0x6e>
    if (bytes_received < 3) return;  // Not enough data for a CRSF packet
 8001534:	bf00      	nop
                }
            }
        }
    }
}
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000330 	.word	0x20000330

08001540 <HAL_UART_RxCpltCallback>:
    if (channel >= NUM_CHANNELS) return 1500;  // Return midpoint if out of range
    return 988 + ((crsf_data.channels[channel] * 988) / 2047);  // Scale to 1000-2000µs
}

// Optional: Restart DMA when transmission is complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
    if (huart == crsf_huart) {
 8001548:	4b08      	ldr	r3, [pc, #32]	@ (800156c <HAL_UART_RxCpltCallback+0x2c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	429a      	cmp	r2, r3
 8001550:	d108      	bne.n	8001564 <HAL_UART_RxCpltCallback+0x24>
        CRSF_Process();
 8001552:	f7ff ffb9 	bl	80014c8 <CRSF_Process>
        HAL_UART_Receive_DMA(crsf_huart, crsf_rx_buffer, CRSF_BUFFER_SIZE);  // Restart DMA
 8001556:	4b05      	ldr	r3, [pc, #20]	@ (800156c <HAL_UART_RxCpltCallback+0x2c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2240      	movs	r2, #64	@ 0x40
 800155c:	4904      	ldr	r1, [pc, #16]	@ (8001570 <HAL_UART_RxCpltCallback+0x30>)
 800155e:	4618      	mov	r0, r3
 8001560:	f007 fff8 	bl	8009554 <HAL_UART_Receive_DMA>
    }
}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	2000032c 	.word	0x2000032c
 8001570:	20000330 	.word	0x20000330

08001574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	ed2d 8b04 	vpush	{d8-d9}
 800157a:	b096      	sub	sp, #88	@ 0x58
 800157c:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800157e:	f000 fd49 	bl	8002014 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001582:	f001 fc44 	bl	8002e0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001586:	f000 f86d 	bl	8001664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800158a:	f000 fc67 	bl	8001e5c <MX_GPIO_Init>
  MX_DMA_Init();
 800158e:	f000 fc0b 	bl	8001da8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001592:	f000 fb49 	bl	8001c28 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001596:	f000 fb77 	bl	8001c88 <MX_USART2_UART_Init>
  MX_SDMMC1_SD_Init();
 800159a:	f000 f963 	bl	8001864 <MX_SDMMC1_SD_Init>
  MX_USART6_UART_Init();
 800159e:	f000 fbd3 	bl	8001d48 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 80015a2:	f000 f981 	bl	80018a8 <MX_SPI1_Init>
  MX_I2C1_Init();
 80015a6:	f000 f91d 	bl	80017e4 <MX_I2C1_Init>
  MX_SPI2_Init();
 80015aa:	f000 f9bb 	bl	8001924 <MX_SPI2_Init>
  MX_TIM1_Init();
 80015ae:	f000 f9f7 	bl	80019a0 <MX_TIM1_Init>
  MX_UART4_Init();
 80015b2:	f000 fb09 	bl	8001bc8 <MX_UART4_Init>
  MX_USART3_UART_Init();
 80015b6:	f000 fb97 	bl	8001ce8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80015ba:	f000 f8c1 	bl	8001740 <MX_ADC1_Init>
  MX_TIM6_Init();
 80015be:	f000 facd 	bl	8001b5c <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 80015c2:	f00d f8fd 	bl	800e7c0 <MX_USB_DEVICE_Init>
  MX_FATFS_Init();
 80015c6:	f00a ff05 	bl	800c3d4 <MX_FATFS_Init>
  MX_TIM2_Init();
 80015ca:	f000 fa79 	bl	8001ac0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  CRSF_Init(&huart1);
 80015ce:	4821      	ldr	r0, [pc, #132]	@ (8001654 <main+0xe0>)
 80015d0:	f7ff fe42 	bl	8001258 <CRSF_Init>

  while(BMI_INIT(&hspi1, GPIOB, GPIO_PIN_0, GPIOB, GPIO_PIN_1)){
 80015d4:	e002      	b.n	80015dc <main+0x68>
	  HAL_Delay(100);
 80015d6:	2064      	movs	r0, #100	@ 0x64
 80015d8:	f001 fc76 	bl	8002ec8 <HAL_Delay>
  while(BMI_INIT(&hspi1, GPIOB, GPIO_PIN_0, GPIOB, GPIO_PIN_1)){
 80015dc:	2302      	movs	r3, #2
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001658 <main+0xe4>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	491c      	ldr	r1, [pc, #112]	@ (8001658 <main+0xe4>)
 80015e6:	481d      	ldr	r0, [pc, #116]	@ (800165c <main+0xe8>)
 80015e8:	f7ff fc9c 	bl	8000f24 <BMI_INIT>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f1      	bne.n	80015d6 <main+0x62>
  while (1)
  {
	  /*CRSF_Process();
	  	uint16_t ch0 = CRSF_GetChannel(0);
	  	printf("Ch 0: %d\n", ch0);*/
	  	  BMI_READ_GYRO_DATA();
 80015f2:	f7ff fd69 	bl	80010c8 <BMI_READ_GYRO_DATA>
		  snprintf(message, sizeof(message), "Gyro values: %f  %f  %f\r\n", BMI_GET_GYRO_X(), BMI_GET_GYRO_Y(), BMI_GET_GYRO_Z());
 80015f6:	f7ff fdb7 	bl	8001168 <BMI_GET_GYRO_X>
 80015fa:	eeb0 8a40 	vmov.f32	s16, s0
 80015fe:	eef0 8a60 	vmov.f32	s17, s1
 8001602:	f7ff fdd9 	bl	80011b8 <BMI_GET_GYRO_Y>
 8001606:	eeb0 9a40 	vmov.f32	s18, s0
 800160a:	eef0 9a60 	vmov.f32	s19, s1
 800160e:	f7ff fdfb 	bl	8001208 <BMI_GET_GYRO_Z>
 8001612:	eeb0 7a40 	vmov.f32	s14, s0
 8001616:	eef0 7a60 	vmov.f32	s15, s1
 800161a:	463b      	mov	r3, r7
 800161c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001620:	ed8d 9b02 	vstr	d9, [sp, #8]
 8001624:	ed8d 8b00 	vstr	d8, [sp]
 8001628:	4a0d      	ldr	r2, [pc, #52]	@ (8001660 <main+0xec>)
 800162a:	2140      	movs	r1, #64	@ 0x40
 800162c:	4618      	mov	r0, r3
 800162e:	f00e fc27 	bl	800fe80 <sniprintf>
		  CDC_Transmit_FS((uint8_t *)message, strlen(message));
 8001632:	463b      	mov	r3, r7
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe fe43 	bl	80002c0 <strlen>
 800163a:	4603      	mov	r3, r0
 800163c:	b29a      	uxth	r2, r3
 800163e:	463b      	mov	r3, r7
 8001640:	4611      	mov	r1, r2
 8001642:	4618      	mov	r0, r3
 8001644:	f00d f97a 	bl	800e93c <CDC_Transmit_FS>

		  HAL_Delay(100);
 8001648:	2064      	movs	r0, #100	@ 0x64
 800164a:	f001 fc3d 	bl	8002ec8 <HAL_Delay>
	  	  BMI_READ_GYRO_DATA();
 800164e:	bf00      	nop
 8001650:	e7cf      	b.n	80015f2 <main+0x7e>
 8001652:	bf00      	nop
 8001654:	20000724 	.word	0x20000724
 8001658:	40020400 	.word	0x40020400
 800165c:	20000490 	.word	0x20000490
 8001660:	08011fc0 	.word	0x08011fc0

08001664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b094      	sub	sp, #80	@ 0x50
 8001668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800166a:	f107 0320 	add.w	r3, r7, #32
 800166e:	2230      	movs	r2, #48	@ 0x30
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f00e fc7d 	bl	800ff72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001678:	f107 030c 	add.w	r3, r7, #12
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001688:	4b2b      	ldr	r3, [pc, #172]	@ (8001738 <SystemClock_Config+0xd4>)
 800168a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168c:	4a2a      	ldr	r2, [pc, #168]	@ (8001738 <SystemClock_Config+0xd4>)
 800168e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001692:	6413      	str	r3, [r2, #64]	@ 0x40
 8001694:	4b28      	ldr	r3, [pc, #160]	@ (8001738 <SystemClock_Config+0xd4>)
 8001696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a0:	4b26      	ldr	r3, [pc, #152]	@ (800173c <SystemClock_Config+0xd8>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a25      	ldr	r2, [pc, #148]	@ (800173c <SystemClock_Config+0xd8>)
 80016a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	4b23      	ldr	r3, [pc, #140]	@ (800173c <SystemClock_Config+0xd8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016b8:	2301      	movs	r3, #1
 80016ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016bc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80016c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c2:	2302      	movs	r3, #2
 80016c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016cc:	2304      	movs	r3, #4
 80016ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80016d0:	23d8      	movs	r3, #216	@ 0xd8
 80016d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016d4:	2302      	movs	r3, #2
 80016d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80016d8:	2309      	movs	r3, #9
 80016da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016dc:	f107 0320 	add.w	r3, r7, #32
 80016e0:	4618      	mov	r0, r3
 80016e2:	f004 f985 	bl	80059f0 <HAL_RCC_OscConfig>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80016ec:	f000 fcbe 	bl	800206c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80016f0:	f004 f92e 	bl	8005950 <HAL_PWREx_EnableOverDrive>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80016fa:	f000 fcb7 	bl	800206c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016fe:	230f      	movs	r3, #15
 8001700:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001702:	2302      	movs	r3, #2
 8001704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800170a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800170e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001710:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001714:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001716:	f107 030c 	add.w	r3, r7, #12
 800171a:	2107      	movs	r1, #7
 800171c:	4618      	mov	r0, r3
 800171e:	f004 fc0b 	bl	8005f38 <HAL_RCC_ClockConfig>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001728:	f000 fca0 	bl	800206c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800172c:	f004 fcf0 	bl	8006110 <HAL_RCC_EnableCSS>
}
 8001730:	bf00      	nop
 8001732:	3750      	adds	r7, #80	@ 0x50
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40023800 	.word	0x40023800
 800173c:	40007000 	.word	0x40007000

08001740 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001746:	463b      	mov	r3, r7
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001752:	4b21      	ldr	r3, [pc, #132]	@ (80017d8 <MX_ADC1_Init+0x98>)
 8001754:	4a21      	ldr	r2, [pc, #132]	@ (80017dc <MX_ADC1_Init+0x9c>)
 8001756:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001758:	4b1f      	ldr	r3, [pc, #124]	@ (80017d8 <MX_ADC1_Init+0x98>)
 800175a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800175e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001760:	4b1d      	ldr	r3, [pc, #116]	@ (80017d8 <MX_ADC1_Init+0x98>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001766:	4b1c      	ldr	r3, [pc, #112]	@ (80017d8 <MX_ADC1_Init+0x98>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800176c:	4b1a      	ldr	r3, [pc, #104]	@ (80017d8 <MX_ADC1_Init+0x98>)
 800176e:	2200      	movs	r2, #0
 8001770:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001772:	4b19      	ldr	r3, [pc, #100]	@ (80017d8 <MX_ADC1_Init+0x98>)
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800177a:	4b17      	ldr	r3, [pc, #92]	@ (80017d8 <MX_ADC1_Init+0x98>)
 800177c:	2200      	movs	r2, #0
 800177e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001780:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <MX_ADC1_Init+0x98>)
 8001782:	4a17      	ldr	r2, [pc, #92]	@ (80017e0 <MX_ADC1_Init+0xa0>)
 8001784:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001786:	4b14      	ldr	r3, [pc, #80]	@ (80017d8 <MX_ADC1_Init+0x98>)
 8001788:	2200      	movs	r2, #0
 800178a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800178c:	4b12      	ldr	r3, [pc, #72]	@ (80017d8 <MX_ADC1_Init+0x98>)
 800178e:	2201      	movs	r2, #1
 8001790:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001792:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <MX_ADC1_Init+0x98>)
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800179a:	4b0f      	ldr	r3, [pc, #60]	@ (80017d8 <MX_ADC1_Init+0x98>)
 800179c:	2201      	movs	r2, #1
 800179e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017a0:	480d      	ldr	r0, [pc, #52]	@ (80017d8 <MX_ADC1_Init+0x98>)
 80017a2:	f001 fbb5 	bl	8002f10 <HAL_ADC_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80017ac:	f000 fc5e 	bl	800206c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80017b0:	230a      	movs	r3, #10
 80017b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017b4:	2301      	movs	r3, #1
 80017b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017bc:	463b      	mov	r3, r7
 80017be:	4619      	mov	r1, r3
 80017c0:	4805      	ldr	r0, [pc, #20]	@ (80017d8 <MX_ADC1_Init+0x98>)
 80017c2:	f001 fbe9 	bl	8002f98 <HAL_ADC_ConfigChannel>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80017cc:	f000 fc4e 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017d0:	bf00      	nop
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000370 	.word	0x20000370
 80017dc:	40012000 	.word	0x40012000
 80017e0:	0f000001 	.word	0x0f000001

080017e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001858 <MX_I2C1_Init+0x74>)
 80017ea:	4a1c      	ldr	r2, [pc, #112]	@ (800185c <MX_I2C1_Init+0x78>)
 80017ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80017ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001858 <MX_I2C1_Init+0x74>)
 80017f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001860 <MX_I2C1_Init+0x7c>)
 80017f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017f4:	4b18      	ldr	r3, [pc, #96]	@ (8001858 <MX_I2C1_Init+0x74>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017fa:	4b17      	ldr	r3, [pc, #92]	@ (8001858 <MX_I2C1_Init+0x74>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001800:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <MX_I2C1_Init+0x74>)
 8001802:	2200      	movs	r2, #0
 8001804:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001806:	4b14      	ldr	r3, [pc, #80]	@ (8001858 <MX_I2C1_Init+0x74>)
 8001808:	2200      	movs	r2, #0
 800180a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800180c:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <MX_I2C1_Init+0x74>)
 800180e:	2200      	movs	r2, #0
 8001810:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001812:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <MX_I2C1_Init+0x74>)
 8001814:	2200      	movs	r2, #0
 8001816:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001818:	4b0f      	ldr	r3, [pc, #60]	@ (8001858 <MX_I2C1_Init+0x74>)
 800181a:	2200      	movs	r2, #0
 800181c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800181e:	480e      	ldr	r0, [pc, #56]	@ (8001858 <MX_I2C1_Init+0x74>)
 8001820:	f002 fcda 	bl	80041d8 <HAL_I2C_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800182a:	f000 fc1f 	bl	800206c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800182e:	2100      	movs	r1, #0
 8001830:	4809      	ldr	r0, [pc, #36]	@ (8001858 <MX_I2C1_Init+0x74>)
 8001832:	f002 fd6d 	bl	8004310 <HAL_I2CEx_ConfigAnalogFilter>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800183c:	f000 fc16 	bl	800206c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001840:	2100      	movs	r1, #0
 8001842:	4805      	ldr	r0, [pc, #20]	@ (8001858 <MX_I2C1_Init+0x74>)
 8001844:	f002 fdaf 	bl	80043a6 <HAL_I2CEx_ConfigDigitalFilter>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800184e:	f000 fc0d 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200003b8 	.word	0x200003b8
 800185c:	40005400 	.word	0x40005400
 8001860:	20404768 	.word	0x20404768

08001864 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001868:	4b0d      	ldr	r3, [pc, #52]	@ (80018a0 <MX_SDMMC1_SD_Init+0x3c>)
 800186a:	4a0e      	ldr	r2, [pc, #56]	@ (80018a4 <MX_SDMMC1_SD_Init+0x40>)
 800186c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800186e:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <MX_SDMMC1_SD_Init+0x3c>)
 8001870:	2200      	movs	r2, #0
 8001872:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001874:	4b0a      	ldr	r3, [pc, #40]	@ (80018a0 <MX_SDMMC1_SD_Init+0x3c>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800187a:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <MX_SDMMC1_SD_Init+0x3c>)
 800187c:	2200      	movs	r2, #0
 800187e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001880:	4b07      	ldr	r3, [pc, #28]	@ (80018a0 <MX_SDMMC1_SD_Init+0x3c>)
 8001882:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001886:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001888:	4b05      	ldr	r3, [pc, #20]	@ (80018a0 <MX_SDMMC1_SD_Init+0x3c>)
 800188a:	2200      	movs	r2, #0
 800188c:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800188e:	4b04      	ldr	r3, [pc, #16]	@ (80018a0 <MX_SDMMC1_SD_Init+0x3c>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	2000040c 	.word	0x2000040c
 80018a4:	40012c00 	.word	0x40012c00

080018a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018ac:	4b1b      	ldr	r3, [pc, #108]	@ (800191c <MX_SPI1_Init+0x74>)
 80018ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001920 <MX_SPI1_Init+0x78>)
 80018b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018b2:	4b1a      	ldr	r3, [pc, #104]	@ (800191c <MX_SPI1_Init+0x74>)
 80018b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018ba:	4b18      	ldr	r3, [pc, #96]	@ (800191c <MX_SPI1_Init+0x74>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018c0:	4b16      	ldr	r3, [pc, #88]	@ (800191c <MX_SPI1_Init+0x74>)
 80018c2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80018c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018c8:	4b14      	ldr	r3, [pc, #80]	@ (800191c <MX_SPI1_Init+0x74>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018ce:	4b13      	ldr	r3, [pc, #76]	@ (800191c <MX_SPI1_Init+0x74>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018d4:	4b11      	ldr	r3, [pc, #68]	@ (800191c <MX_SPI1_Init+0x74>)
 80018d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80018dc:	4b0f      	ldr	r3, [pc, #60]	@ (800191c <MX_SPI1_Init+0x74>)
 80018de:	2218      	movs	r2, #24
 80018e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018e2:	4b0e      	ldr	r3, [pc, #56]	@ (800191c <MX_SPI1_Init+0x74>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018e8:	4b0c      	ldr	r3, [pc, #48]	@ (800191c <MX_SPI1_Init+0x74>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ee:	4b0b      	ldr	r3, [pc, #44]	@ (800191c <MX_SPI1_Init+0x74>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80018f4:	4b09      	ldr	r3, [pc, #36]	@ (800191c <MX_SPI1_Init+0x74>)
 80018f6:	2207      	movs	r2, #7
 80018f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018fa:	4b08      	ldr	r3, [pc, #32]	@ (800191c <MX_SPI1_Init+0x74>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001900:	4b06      	ldr	r3, [pc, #24]	@ (800191c <MX_SPI1_Init+0x74>)
 8001902:	2208      	movs	r2, #8
 8001904:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001906:	4805      	ldr	r0, [pc, #20]	@ (800191c <MX_SPI1_Init+0x74>)
 8001908:	f006 fa45 	bl	8007d96 <HAL_SPI_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001912:	f000 fbab 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000490 	.word	0x20000490
 8001920:	40013000 	.word	0x40013000

08001924 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001928:	4b1b      	ldr	r3, [pc, #108]	@ (8001998 <MX_SPI2_Init+0x74>)
 800192a:	4a1c      	ldr	r2, [pc, #112]	@ (800199c <MX_SPI2_Init+0x78>)
 800192c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800192e:	4b1a      	ldr	r3, [pc, #104]	@ (8001998 <MX_SPI2_Init+0x74>)
 8001930:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001934:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001936:	4b18      	ldr	r3, [pc, #96]	@ (8001998 <MX_SPI2_Init+0x74>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800193c:	4b16      	ldr	r3, [pc, #88]	@ (8001998 <MX_SPI2_Init+0x74>)
 800193e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001942:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001944:	4b14      	ldr	r3, [pc, #80]	@ (8001998 <MX_SPI2_Init+0x74>)
 8001946:	2200      	movs	r2, #0
 8001948:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800194a:	4b13      	ldr	r3, [pc, #76]	@ (8001998 <MX_SPI2_Init+0x74>)
 800194c:	2200      	movs	r2, #0
 800194e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001950:	4b11      	ldr	r3, [pc, #68]	@ (8001998 <MX_SPI2_Init+0x74>)
 8001952:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001956:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001958:	4b0f      	ldr	r3, [pc, #60]	@ (8001998 <MX_SPI2_Init+0x74>)
 800195a:	2228      	movs	r2, #40	@ 0x28
 800195c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800195e:	4b0e      	ldr	r3, [pc, #56]	@ (8001998 <MX_SPI2_Init+0x74>)
 8001960:	2200      	movs	r2, #0
 8001962:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001964:	4b0c      	ldr	r3, [pc, #48]	@ (8001998 <MX_SPI2_Init+0x74>)
 8001966:	2200      	movs	r2, #0
 8001968:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800196a:	4b0b      	ldr	r3, [pc, #44]	@ (8001998 <MX_SPI2_Init+0x74>)
 800196c:	2200      	movs	r2, #0
 800196e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001970:	4b09      	ldr	r3, [pc, #36]	@ (8001998 <MX_SPI2_Init+0x74>)
 8001972:	2207      	movs	r2, #7
 8001974:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001976:	4b08      	ldr	r3, [pc, #32]	@ (8001998 <MX_SPI2_Init+0x74>)
 8001978:	2200      	movs	r2, #0
 800197a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800197c:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <MX_SPI2_Init+0x74>)
 800197e:	2208      	movs	r2, #8
 8001980:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001982:	4805      	ldr	r0, [pc, #20]	@ (8001998 <MX_SPI2_Init+0x74>)
 8001984:	f006 fa07 	bl	8007d96 <HAL_SPI_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800198e:	f000 fb6d 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200004f4 	.word	0x200004f4
 800199c:	40003800 	.word	0x40003800

080019a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b096      	sub	sp, #88	@ 0x58
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019b2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]
 80019c0:	611a      	str	r2, [r3, #16]
 80019c2:	615a      	str	r2, [r3, #20]
 80019c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	222c      	movs	r2, #44	@ 0x2c
 80019ca:	2100      	movs	r1, #0
 80019cc:	4618      	mov	r0, r3
 80019ce:	f00e fad0 	bl	800ff72 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019d2:	4b39      	ldr	r3, [pc, #228]	@ (8001ab8 <MX_TIM1_Init+0x118>)
 80019d4:	4a39      	ldr	r2, [pc, #228]	@ (8001abc <MX_TIM1_Init+0x11c>)
 80019d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019d8:	4b37      	ldr	r3, [pc, #220]	@ (8001ab8 <MX_TIM1_Init+0x118>)
 80019da:	2200      	movs	r2, #0
 80019dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019de:	4b36      	ldr	r3, [pc, #216]	@ (8001ab8 <MX_TIM1_Init+0x118>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019e4:	4b34      	ldr	r3, [pc, #208]	@ (8001ab8 <MX_TIM1_Init+0x118>)
 80019e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ec:	4b32      	ldr	r3, [pc, #200]	@ (8001ab8 <MX_TIM1_Init+0x118>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019f2:	4b31      	ldr	r3, [pc, #196]	@ (8001ab8 <MX_TIM1_Init+0x118>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019f8:	4b2f      	ldr	r3, [pc, #188]	@ (8001ab8 <MX_TIM1_Init+0x118>)
 80019fa:	2280      	movs	r2, #128	@ 0x80
 80019fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019fe:	482e      	ldr	r0, [pc, #184]	@ (8001ab8 <MX_TIM1_Init+0x118>)
 8001a00:	f006 fe75 	bl	80086ee <HAL_TIM_PWM_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001a0a:	f000 fb2f 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a12:	2300      	movs	r3, #0
 8001a14:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a1a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4825      	ldr	r0, [pc, #148]	@ (8001ab8 <MX_TIM1_Init+0x118>)
 8001a22:	f007 fc3d 	bl	80092a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a2c:	f000 fb1e 	bl	800206c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a30:	2360      	movs	r3, #96	@ 0x60
 8001a32:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a44:	2300      	movs	r3, #0
 8001a46:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a4c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a50:	2200      	movs	r2, #0
 8001a52:	4619      	mov	r1, r3
 8001a54:	4818      	ldr	r0, [pc, #96]	@ (8001ab8 <MX_TIM1_Init+0x118>)
 8001a56:	f006 fea1 	bl	800879c <HAL_TIM_PWM_ConfigChannel>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001a60:	f000 fb04 	bl	800206c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a7c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a82:	2300      	movs	r3, #0
 8001a84:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	4619      	mov	r1, r3
 8001a98:	4807      	ldr	r0, [pc, #28]	@ (8001ab8 <MX_TIM1_Init+0x118>)
 8001a9a:	f007 fc8f 	bl	80093bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001aa4:	f000 fae2 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001aa8:	4803      	ldr	r0, [pc, #12]	@ (8001ab8 <MX_TIM1_Init+0x118>)
 8001aaa:	f000 fd47 	bl	800253c <HAL_TIM_MspPostInit>

}
 8001aae:	bf00      	nop
 8001ab0:	3758      	adds	r7, #88	@ 0x58
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000558 	.word	0x20000558
 8001abc:	40010000 	.word	0x40010000

08001ac0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ac6:	f107 0310 	add.w	r3, r7, #16
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ade:	4b1e      	ldr	r3, [pc, #120]	@ (8001b58 <MX_TIM2_Init+0x98>)
 8001ae0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ae4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8001ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b58 <MX_TIM2_Init+0x98>)
 8001ae8:	226b      	movs	r2, #107	@ 0x6b
 8001aea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aec:	4b1a      	ldr	r3, [pc, #104]	@ (8001b58 <MX_TIM2_Init+0x98>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001af2:	4b19      	ldr	r3, [pc, #100]	@ (8001b58 <MX_TIM2_Init+0x98>)
 8001af4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001af8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afa:	4b17      	ldr	r3, [pc, #92]	@ (8001b58 <MX_TIM2_Init+0x98>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b00:	4b15      	ldr	r3, [pc, #84]	@ (8001b58 <MX_TIM2_Init+0x98>)
 8001b02:	2280      	movs	r2, #128	@ 0x80
 8001b04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b06:	4814      	ldr	r0, [pc, #80]	@ (8001b58 <MX_TIM2_Init+0x98>)
 8001b08:	f006 fd9a 	bl	8008640 <HAL_TIM_Base_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b12:	f000 faab 	bl	800206c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b1c:	f107 0310 	add.w	r3, r7, #16
 8001b20:	4619      	mov	r1, r3
 8001b22:	480d      	ldr	r0, [pc, #52]	@ (8001b58 <MX_TIM2_Init+0x98>)
 8001b24:	f006 ff4e 	bl	80089c4 <HAL_TIM_ConfigClockSource>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b2e:	f000 fa9d 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b32:	2300      	movs	r3, #0
 8001b34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4806      	ldr	r0, [pc, #24]	@ (8001b58 <MX_TIM2_Init+0x98>)
 8001b40:	f007 fbae 	bl	80092a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b4a:	f000 fa8f 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	3720      	adds	r7, #32
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200005a4 	.word	0x200005a4

08001b5c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b6c:	4b14      	ldr	r3, [pc, #80]	@ (8001bc0 <MX_TIM6_Init+0x64>)
 8001b6e:	4a15      	ldr	r2, [pc, #84]	@ (8001bc4 <MX_TIM6_Init+0x68>)
 8001b70:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001b72:	4b13      	ldr	r3, [pc, #76]	@ (8001bc0 <MX_TIM6_Init+0x64>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b78:	4b11      	ldr	r3, [pc, #68]	@ (8001bc0 <MX_TIM6_Init+0x64>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001b7e:	4b10      	ldr	r3, [pc, #64]	@ (8001bc0 <MX_TIM6_Init+0x64>)
 8001b80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b84:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b86:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc0 <MX_TIM6_Init+0x64>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b8c:	480c      	ldr	r0, [pc, #48]	@ (8001bc0 <MX_TIM6_Init+0x64>)
 8001b8e:	f006 fd57 	bl	8008640 <HAL_TIM_Base_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001b98:	f000 fa68 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4805      	ldr	r0, [pc, #20]	@ (8001bc0 <MX_TIM6_Init+0x64>)
 8001baa:	f007 fb79 	bl	80092a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001bb4:	f000 fa5a 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001bb8:	bf00      	nop
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	200005f0 	.word	0x200005f0
 8001bc4:	40001000 	.word	0x40001000

08001bc8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001bcc:	4b14      	ldr	r3, [pc, #80]	@ (8001c20 <MX_UART4_Init+0x58>)
 8001bce:	4a15      	ldr	r2, [pc, #84]	@ (8001c24 <MX_UART4_Init+0x5c>)
 8001bd0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001bd2:	4b13      	ldr	r3, [pc, #76]	@ (8001c20 <MX_UART4_Init+0x58>)
 8001bd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bd8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001bda:	4b11      	ldr	r3, [pc, #68]	@ (8001c20 <MX_UART4_Init+0x58>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001be0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c20 <MX_UART4_Init+0x58>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001be6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c20 <MX_UART4_Init+0x58>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001bec:	4b0c      	ldr	r3, [pc, #48]	@ (8001c20 <MX_UART4_Init+0x58>)
 8001bee:	220c      	movs	r2, #12
 8001bf0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c20 <MX_UART4_Init+0x58>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf8:	4b09      	ldr	r3, [pc, #36]	@ (8001c20 <MX_UART4_Init+0x58>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bfe:	4b08      	ldr	r3, [pc, #32]	@ (8001c20 <MX_UART4_Init+0x58>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c04:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <MX_UART4_Init+0x58>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c0a:	4805      	ldr	r0, [pc, #20]	@ (8001c20 <MX_UART4_Init+0x58>)
 8001c0c:	f007 fc54 	bl	80094b8 <HAL_UART_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001c16:	f000 fa29 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	2000069c 	.word	0x2000069c
 8001c24:	40004c00 	.word	0x40004c00

08001c28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c2c:	4b14      	ldr	r3, [pc, #80]	@ (8001c80 <MX_USART1_UART_Init+0x58>)
 8001c2e:	4a15      	ldr	r2, [pc, #84]	@ (8001c84 <MX_USART1_UART_Init+0x5c>)
 8001c30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c32:	4b13      	ldr	r3, [pc, #76]	@ (8001c80 <MX_USART1_UART_Init+0x58>)
 8001c34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c3a:	4b11      	ldr	r3, [pc, #68]	@ (8001c80 <MX_USART1_UART_Init+0x58>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <MX_USART1_UART_Init+0x58>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c46:	4b0e      	ldr	r3, [pc, #56]	@ (8001c80 <MX_USART1_UART_Init+0x58>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <MX_USART1_UART_Init+0x58>)
 8001c4e:	220c      	movs	r2, #12
 8001c50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c52:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <MX_USART1_UART_Init+0x58>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c58:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <MX_USART1_UART_Init+0x58>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c5e:	4b08      	ldr	r3, [pc, #32]	@ (8001c80 <MX_USART1_UART_Init+0x58>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c64:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <MX_USART1_UART_Init+0x58>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c6a:	4805      	ldr	r0, [pc, #20]	@ (8001c80 <MX_USART1_UART_Init+0x58>)
 8001c6c:	f007 fc24 	bl	80094b8 <HAL_UART_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001c76:	f000 f9f9 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000724 	.word	0x20000724
 8001c84:	40011000 	.word	0x40011000

08001c88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ce0 <MX_USART2_UART_Init+0x58>)
 8001c8e:	4a15      	ldr	r2, [pc, #84]	@ (8001ce4 <MX_USART2_UART_Init+0x5c>)
 8001c90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c92:	4b13      	ldr	r3, [pc, #76]	@ (8001ce0 <MX_USART2_UART_Init+0x58>)
 8001c94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ce0 <MX_USART2_UART_Init+0x58>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce0 <MX_USART2_UART_Init+0x58>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce0 <MX_USART2_UART_Init+0x58>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce0 <MX_USART2_UART_Init+0x58>)
 8001cae:	220c      	movs	r2, #12
 8001cb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce0 <MX_USART2_UART_Init+0x58>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb8:	4b09      	ldr	r3, [pc, #36]	@ (8001ce0 <MX_USART2_UART_Init+0x58>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cbe:	4b08      	ldr	r3, [pc, #32]	@ (8001ce0 <MX_USART2_UART_Init+0x58>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <MX_USART2_UART_Init+0x58>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cca:	4805      	ldr	r0, [pc, #20]	@ (8001ce0 <MX_USART2_UART_Init+0x58>)
 8001ccc:	f007 fbf4 	bl	80094b8 <HAL_UART_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001cd6:	f000 f9c9 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	200007ac 	.word	0x200007ac
 8001ce4:	40004400 	.word	0x40004400

08001ce8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cec:	4b14      	ldr	r3, [pc, #80]	@ (8001d40 <MX_USART3_UART_Init+0x58>)
 8001cee:	4a15      	ldr	r2, [pc, #84]	@ (8001d44 <MX_USART3_UART_Init+0x5c>)
 8001cf0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001cf2:	4b13      	ldr	r3, [pc, #76]	@ (8001d40 <MX_USART3_UART_Init+0x58>)
 8001cf4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cf8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cfa:	4b11      	ldr	r3, [pc, #68]	@ (8001d40 <MX_USART3_UART_Init+0x58>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d00:	4b0f      	ldr	r3, [pc, #60]	@ (8001d40 <MX_USART3_UART_Init+0x58>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d06:	4b0e      	ldr	r3, [pc, #56]	@ (8001d40 <MX_USART3_UART_Init+0x58>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d40 <MX_USART3_UART_Init+0x58>)
 8001d0e:	220c      	movs	r2, #12
 8001d10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d12:	4b0b      	ldr	r3, [pc, #44]	@ (8001d40 <MX_USART3_UART_Init+0x58>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d18:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <MX_USART3_UART_Init+0x58>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d1e:	4b08      	ldr	r3, [pc, #32]	@ (8001d40 <MX_USART3_UART_Init+0x58>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d24:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <MX_USART3_UART_Init+0x58>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d2a:	4805      	ldr	r0, [pc, #20]	@ (8001d40 <MX_USART3_UART_Init+0x58>)
 8001d2c:	f007 fbc4 	bl	80094b8 <HAL_UART_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001d36:	f000 f999 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000834 	.word	0x20000834
 8001d44:	40004800 	.word	0x40004800

08001d48 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001d4c:	4b14      	ldr	r3, [pc, #80]	@ (8001da0 <MX_USART6_UART_Init+0x58>)
 8001d4e:	4a15      	ldr	r2, [pc, #84]	@ (8001da4 <MX_USART6_UART_Init+0x5c>)
 8001d50:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001d52:	4b13      	ldr	r3, [pc, #76]	@ (8001da0 <MX_USART6_UART_Init+0x58>)
 8001d54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d58:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001d5a:	4b11      	ldr	r3, [pc, #68]	@ (8001da0 <MX_USART6_UART_Init+0x58>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001d60:	4b0f      	ldr	r3, [pc, #60]	@ (8001da0 <MX_USART6_UART_Init+0x58>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001d66:	4b0e      	ldr	r3, [pc, #56]	@ (8001da0 <MX_USART6_UART_Init+0x58>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <MX_USART6_UART_Init+0x58>)
 8001d6e:	220c      	movs	r2, #12
 8001d70:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d72:	4b0b      	ldr	r3, [pc, #44]	@ (8001da0 <MX_USART6_UART_Init+0x58>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d78:	4b09      	ldr	r3, [pc, #36]	@ (8001da0 <MX_USART6_UART_Init+0x58>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d7e:	4b08      	ldr	r3, [pc, #32]	@ (8001da0 <MX_USART6_UART_Init+0x58>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d84:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <MX_USART6_UART_Init+0x58>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001d8a:	4805      	ldr	r0, [pc, #20]	@ (8001da0 <MX_USART6_UART_Init+0x58>)
 8001d8c:	f007 fb94 	bl	80094b8 <HAL_UART_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001d96:	f000 f969 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	200008bc 	.word	0x200008bc
 8001da4:	40011400 	.word	0x40011400

08001da8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001dae:	4b2a      	ldr	r3, [pc, #168]	@ (8001e58 <MX_DMA_Init+0xb0>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	4a29      	ldr	r2, [pc, #164]	@ (8001e58 <MX_DMA_Init+0xb0>)
 8001db4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dba:	4b27      	ldr	r3, [pc, #156]	@ (8001e58 <MX_DMA_Init+0xb0>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dc6:	4b24      	ldr	r3, [pc, #144]	@ (8001e58 <MX_DMA_Init+0xb0>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dca:	4a23      	ldr	r2, [pc, #140]	@ (8001e58 <MX_DMA_Init+0xb0>)
 8001dcc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd2:	4b21      	ldr	r3, [pc, #132]	@ (8001e58 <MX_DMA_Init+0xb0>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dda:	603b      	str	r3, [r7, #0]
 8001ddc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2100      	movs	r1, #0
 8001de2:	200c      	movs	r0, #12
 8001de4:	f001 fc03 	bl	80035ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001de8:	200c      	movs	r0, #12
 8001dea:	f001 fc1c 	bl	8003626 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001dee:	2200      	movs	r2, #0
 8001df0:	2100      	movs	r1, #0
 8001df2:	200d      	movs	r0, #13
 8001df4:	f001 fbfb 	bl	80035ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001df8:	200d      	movs	r0, #13
 8001dfa:	f001 fc14 	bl	8003626 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2100      	movs	r1, #0
 8001e02:	2010      	movs	r0, #16
 8001e04:	f001 fbf3 	bl	80035ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001e08:	2010      	movs	r0, #16
 8001e0a:	f001 fc0c 	bl	8003626 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2100      	movs	r1, #0
 8001e12:	2039      	movs	r0, #57	@ 0x39
 8001e14:	f001 fbeb 	bl	80035ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001e18:	2039      	movs	r0, #57	@ 0x39
 8001e1a:	f001 fc04 	bl	8003626 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2100      	movs	r1, #0
 8001e22:	203a      	movs	r0, #58	@ 0x3a
 8001e24:	f001 fbe3 	bl	80035ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001e28:	203a      	movs	r0, #58	@ 0x3a
 8001e2a:	f001 fbfc 	bl	8003626 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2100      	movs	r1, #0
 8001e32:	203b      	movs	r0, #59	@ 0x3b
 8001e34:	f001 fbdb 	bl	80035ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001e38:	203b      	movs	r0, #59	@ 0x3b
 8001e3a:	f001 fbf4 	bl	8003626 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2100      	movs	r1, #0
 8001e42:	2046      	movs	r0, #70	@ 0x46
 8001e44:	f001 fbd3 	bl	80035ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001e48:	2046      	movs	r0, #70	@ 0x46
 8001e4a:	f001 fbec 	bl	8003626 <HAL_NVIC_EnableIRQ>

}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800

08001e5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	@ 0x28
 8001e60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e62:	f107 0314 	add.w	r3, r7, #20
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	60da      	str	r2, [r3, #12]
 8001e70:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e72:	4b64      	ldr	r3, [pc, #400]	@ (8002004 <MX_GPIO_Init+0x1a8>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	4a63      	ldr	r2, [pc, #396]	@ (8002004 <MX_GPIO_Init+0x1a8>)
 8001e78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e7e:	4b61      	ldr	r3, [pc, #388]	@ (8002004 <MX_GPIO_Init+0x1a8>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e8a:	4b5e      	ldr	r3, [pc, #376]	@ (8002004 <MX_GPIO_Init+0x1a8>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8e:	4a5d      	ldr	r2, [pc, #372]	@ (8002004 <MX_GPIO_Init+0x1a8>)
 8001e90:	f043 0304 	orr.w	r3, r3, #4
 8001e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e96:	4b5b      	ldr	r3, [pc, #364]	@ (8002004 <MX_GPIO_Init+0x1a8>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	f003 0304 	and.w	r3, r3, #4
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea2:	4b58      	ldr	r3, [pc, #352]	@ (8002004 <MX_GPIO_Init+0x1a8>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	4a57      	ldr	r2, [pc, #348]	@ (8002004 <MX_GPIO_Init+0x1a8>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eae:	4b55      	ldr	r3, [pc, #340]	@ (8002004 <MX_GPIO_Init+0x1a8>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eba:	4b52      	ldr	r3, [pc, #328]	@ (8002004 <MX_GPIO_Init+0x1a8>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	4a51      	ldr	r2, [pc, #324]	@ (8002004 <MX_GPIO_Init+0x1a8>)
 8001ec0:	f043 0302 	orr.w	r3, r3, #2
 8001ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec6:	4b4f      	ldr	r3, [pc, #316]	@ (8002004 <MX_GPIO_Init+0x1a8>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ed2:	4b4c      	ldr	r3, [pc, #304]	@ (8002004 <MX_GPIO_Init+0x1a8>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed6:	4a4b      	ldr	r2, [pc, #300]	@ (8002004 <MX_GPIO_Init+0x1a8>)
 8001ed8:	f043 0308 	orr.w	r3, r3, #8
 8001edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ede:	4b49      	ldr	r3, [pc, #292]	@ (8002004 <MX_GPIO_Init+0x1a8>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RGB_R_Pin|BARO_CS_Pin, GPIO_PIN_SET);
 8001eea:	2201      	movs	r2, #1
 8001eec:	2118      	movs	r1, #24
 8001eee:	4846      	ldr	r0, [pc, #280]	@ (8002008 <MX_GPIO_Init+0x1ac>)
 8001ef0:	f002 f958 	bl	80041a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GYRO_CS_Pin|ACCEL_CS_Pin|CS_EXT_3_Pin|CS_EXT_2_Pin
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f240 313b 	movw	r1, #827	@ 0x33b
 8001efa:	4844      	ldr	r0, [pc, #272]	@ (800200c <MX_GPIO_Init+0x1b0>)
 8001efc:	f002 f952 	bl	80041a4 <HAL_GPIO_WritePin>
                          |CS_EXT_1_Pin|RGB_B_Pin|RGB_G_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SERVO1_Pin|SERVO2_Pin|SERVO3_Pin|SERVO4_Pin, GPIO_PIN_RESET);
 8001f00:	2200      	movs	r2, #0
 8001f02:	f24d 0104 	movw	r1, #53252	@ 0xd004
 8001f06:	4841      	ldr	r0, [pc, #260]	@ (800200c <MX_GPIO_Init+0x1b0>)
 8001f08:	f002 f94c 	bl	80041a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SERVO7_Pin|SEVO5_Pin|SERVO6_Pin, GPIO_PIN_RESET);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001f12:	483f      	ldr	r0, [pc, #252]	@ (8002010 <MX_GPIO_Init+0x1b4>)
 8001f14:	f002 f946 	bl	80041a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RGB_R_Pin */
  GPIO_InitStruct.Pin = RGB_R_Pin;
 8001f18:	2308      	movs	r3, #8
 8001f1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001f1c:	2311      	movs	r3, #17
 8001f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f24:	2300      	movs	r3, #0
 8001f26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RGB_R_GPIO_Port, &GPIO_InitStruct);
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4836      	ldr	r0, [pc, #216]	@ (8002008 <MX_GPIO_Init+0x1ac>)
 8001f30:	f001 ff84 	bl	8003e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CD_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 8001f34:	2310      	movs	r3, #16
 8001f36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	4619      	mov	r1, r3
 8001f46:	4832      	ldr	r0, [pc, #200]	@ (8002010 <MX_GPIO_Init+0x1b4>)
 8001f48:	f001 ff78 	bl	8003e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : BARO_CS_Pin */
  GPIO_InitStruct.Pin = BARO_CS_Pin;
 8001f4c:	2310      	movs	r3, #16
 8001f4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f50:	2301      	movs	r3, #1
 8001f52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f54:	2301      	movs	r3, #1
 8001f56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BARO_CS_GPIO_Port, &GPIO_InitStruct);
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	4619      	mov	r1, r3
 8001f62:	4829      	ldr	r0, [pc, #164]	@ (8002008 <MX_GPIO_Init+0x1ac>)
 8001f64:	f001 ff6a 	bl	8003e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : GYRO_CS_Pin ACCEL_CS_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin|ACCEL_CS_Pin;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f74:	2300      	movs	r3, #0
 8001f76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4823      	ldr	r0, [pc, #140]	@ (800200c <MX_GPIO_Init+0x1b0>)
 8001f80:	f001 ff5c 	bl	8003e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : SERVO1_Pin SERVO2_Pin SERVO3_Pin SERVO4_Pin */
  GPIO_InitStruct.Pin = SERVO1_Pin|SERVO2_Pin|SERVO3_Pin|SERVO4_Pin;
 8001f84:	f24d 0304 	movw	r3, #53252	@ 0xd004
 8001f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f92:	2303      	movs	r3, #3
 8001f94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f96:	f107 0314 	add.w	r3, r7, #20
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	481b      	ldr	r0, [pc, #108]	@ (800200c <MX_GPIO_Init+0x1b0>)
 8001f9e:	f001 ff4d 	bl	8003e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : SERVO7_Pin SEVO5_Pin SERVO6_Pin */
  GPIO_InitStruct.Pin = SERVO7_Pin|SEVO5_Pin|SERVO6_Pin;
 8001fa2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001fa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4815      	ldr	r0, [pc, #84]	@ (8002010 <MX_GPIO_Init+0x1b4>)
 8001fbc:	f001 ff3e 	bl	8003e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_EXT_3_Pin CS_EXT_2_Pin CS_EXT_1_Pin */
  GPIO_InitStruct.Pin = CS_EXT_3_Pin|CS_EXT_2_Pin|CS_EXT_1_Pin;
 8001fc0:	2338      	movs	r3, #56	@ 0x38
 8001fc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	480d      	ldr	r0, [pc, #52]	@ (800200c <MX_GPIO_Init+0x1b0>)
 8001fd8:	f001 ff30 	bl	8003e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : RGB_B_Pin RGB_G_Pin */
  GPIO_InitStruct.Pin = RGB_B_Pin|RGB_G_Pin;
 8001fdc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001fe2:	2311      	movs	r3, #17
 8001fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fea:	2300      	movs	r3, #0
 8001fec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fee:	f107 0314 	add.w	r3, r7, #20
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4805      	ldr	r0, [pc, #20]	@ (800200c <MX_GPIO_Init+0x1b0>)
 8001ff6:	f001 ff21 	bl	8003e3c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ffa:	bf00      	nop
 8001ffc:	3728      	adds	r7, #40	@ 0x28
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800
 8002008:	40020800 	.word	0x40020800
 800200c:	40020400 	.word	0x40020400
 8002010:	40020000 	.word	0x40020000

08002014 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800201a:	463b      	mov	r3, r7
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002026:	f001 fb19 	bl	800365c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800202a:	2301      	movs	r3, #1
 800202c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800202e:	2300      	movs	r3, #0
 8002030:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002032:	2300      	movs	r3, #0
 8002034:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002036:	231f      	movs	r3, #31
 8002038:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800203a:	2387      	movs	r3, #135	@ 0x87
 800203c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800203e:	2300      	movs	r3, #0
 8002040:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002042:	2300      	movs	r3, #0
 8002044:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002046:	2301      	movs	r3, #1
 8002048:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800204a:	2301      	movs	r3, #1
 800204c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002056:	463b      	mov	r3, r7
 8002058:	4618      	mov	r0, r3
 800205a:	f001 fb37 	bl	80036cc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800205e:	2004      	movs	r0, #4
 8002060:	f001 fb14 	bl	800368c <HAL_MPU_Enable>

}
 8002064:	bf00      	nop
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002070:	b672      	cpsid	i
}
 8002072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002074:	bf00      	nop
 8002076:	e7fd      	b.n	8002074 <Error_Handler+0x8>

08002078 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800207e:	4b0f      	ldr	r3, [pc, #60]	@ (80020bc <HAL_MspInit+0x44>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002082:	4a0e      	ldr	r2, [pc, #56]	@ (80020bc <HAL_MspInit+0x44>)
 8002084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002088:	6413      	str	r3, [r2, #64]	@ 0x40
 800208a:	4b0c      	ldr	r3, [pc, #48]	@ (80020bc <HAL_MspInit+0x44>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002096:	4b09      	ldr	r3, [pc, #36]	@ (80020bc <HAL_MspInit+0x44>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209a:	4a08      	ldr	r2, [pc, #32]	@ (80020bc <HAL_MspInit+0x44>)
 800209c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020a2:	4b06      	ldr	r3, [pc, #24]	@ (80020bc <HAL_MspInit+0x44>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020aa:	603b      	str	r3, [r7, #0]
 80020ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800

080020c0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08a      	sub	sp, #40	@ 0x28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a15      	ldr	r2, [pc, #84]	@ (8002134 <HAL_ADC_MspInit+0x74>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d123      	bne.n	800212a <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020e2:	4b15      	ldr	r3, [pc, #84]	@ (8002138 <HAL_ADC_MspInit+0x78>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e6:	4a14      	ldr	r2, [pc, #80]	@ (8002138 <HAL_ADC_MspInit+0x78>)
 80020e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80020ee:	4b12      	ldr	r3, [pc, #72]	@ (8002138 <HAL_ADC_MspInit+0x78>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002138 <HAL_ADC_MspInit+0x78>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002138 <HAL_ADC_MspInit+0x78>)
 8002100:	f043 0304 	orr.w	r3, r3, #4
 8002104:	6313      	str	r3, [r2, #48]	@ 0x30
 8002106:	4b0c      	ldr	r3, [pc, #48]	@ (8002138 <HAL_ADC_MspInit+0x78>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = VBAT_SENSE_Pin;
 8002112:	2301      	movs	r3, #1
 8002114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002116:	2303      	movs	r3, #3
 8002118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBAT_SENSE_GPIO_Port, &GPIO_InitStruct);
 800211e:	f107 0314 	add.w	r3, r7, #20
 8002122:	4619      	mov	r1, r3
 8002124:	4805      	ldr	r0, [pc, #20]	@ (800213c <HAL_ADC_MspInit+0x7c>)
 8002126:	f001 fe89 	bl	8003e3c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800212a:	bf00      	nop
 800212c:	3728      	adds	r7, #40	@ 0x28
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40012000 	.word	0x40012000
 8002138:	40023800 	.word	0x40023800
 800213c:	40020800 	.word	0x40020800

08002140 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b0aa      	sub	sp, #168	@ 0xa8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002148:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002158:	f107 0314 	add.w	r3, r7, #20
 800215c:	2280      	movs	r2, #128	@ 0x80
 800215e:	2100      	movs	r1, #0
 8002160:	4618      	mov	r0, r3
 8002162:	f00d ff06 	bl	800ff72 <memset>
  if(hi2c->Instance==I2C1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a21      	ldr	r2, [pc, #132]	@ (80021f0 <HAL_I2C_MspInit+0xb0>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d13b      	bne.n	80021e8 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002170:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002174:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002176:	2300      	movs	r3, #0
 8002178:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800217a:	f107 0314 	add.w	r3, r7, #20
 800217e:	4618      	mov	r0, r3
 8002180:	f004 f92c 	bl	80063dc <HAL_RCCEx_PeriphCLKConfig>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800218a:	f7ff ff6f 	bl	800206c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800218e:	4b19      	ldr	r3, [pc, #100]	@ (80021f4 <HAL_I2C_MspInit+0xb4>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002192:	4a18      	ldr	r2, [pc, #96]	@ (80021f4 <HAL_I2C_MspInit+0xb4>)
 8002194:	f043 0302 	orr.w	r3, r3, #2
 8002198:	6313      	str	r3, [r2, #48]	@ 0x30
 800219a:	4b16      	ldr	r3, [pc, #88]	@ (80021f4 <HAL_I2C_MspInit+0xb4>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021a6:	23c0      	movs	r3, #192	@ 0xc0
 80021a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021ac:	2312      	movs	r3, #18
 80021ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b8:	2303      	movs	r3, #3
 80021ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021be:	2304      	movs	r3, #4
 80021c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80021c8:	4619      	mov	r1, r3
 80021ca:	480b      	ldr	r0, [pc, #44]	@ (80021f8 <HAL_I2C_MspInit+0xb8>)
 80021cc:	f001 fe36 	bl	8003e3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021d0:	4b08      	ldr	r3, [pc, #32]	@ (80021f4 <HAL_I2C_MspInit+0xb4>)
 80021d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d4:	4a07      	ldr	r2, [pc, #28]	@ (80021f4 <HAL_I2C_MspInit+0xb4>)
 80021d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021da:	6413      	str	r3, [r2, #64]	@ 0x40
 80021dc:	4b05      	ldr	r3, [pc, #20]	@ (80021f4 <HAL_I2C_MspInit+0xb4>)
 80021de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80021e8:	bf00      	nop
 80021ea:	37a8      	adds	r7, #168	@ 0xa8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40005400 	.word	0x40005400
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40020400 	.word	0x40020400

080021fc <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b0aa      	sub	sp, #168	@ 0xa8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	2280      	movs	r2, #128	@ 0x80
 800221a:	2100      	movs	r1, #0
 800221c:	4618      	mov	r0, r3
 800221e:	f00d fea8 	bl	800ff72 <memset>
  if(hsd->Instance==SDMMC1)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a34      	ldr	r2, [pc, #208]	@ (80022f8 <HAL_SD_MspInit+0xfc>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d161      	bne.n	80022f0 <HAL_SD_MspInit+0xf4>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 800222c:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 8002230:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002232:	2300      	movs	r3, #0
 8002234:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8002238:	2300      	movs	r3, #0
 800223a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800223e:	f107 0314 	add.w	r3, r7, #20
 8002242:	4618      	mov	r0, r3
 8002244:	f004 f8ca 	bl	80063dc <HAL_RCCEx_PeriphCLKConfig>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 800224e:	f7ff ff0d 	bl	800206c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002252:	4b2a      	ldr	r3, [pc, #168]	@ (80022fc <HAL_SD_MspInit+0x100>)
 8002254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002256:	4a29      	ldr	r2, [pc, #164]	@ (80022fc <HAL_SD_MspInit+0x100>)
 8002258:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800225c:	6453      	str	r3, [r2, #68]	@ 0x44
 800225e:	4b27      	ldr	r3, [pc, #156]	@ (80022fc <HAL_SD_MspInit+0x100>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002262:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800226a:	4b24      	ldr	r3, [pc, #144]	@ (80022fc <HAL_SD_MspInit+0x100>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	4a23      	ldr	r2, [pc, #140]	@ (80022fc <HAL_SD_MspInit+0x100>)
 8002270:	f043 0304 	orr.w	r3, r3, #4
 8002274:	6313      	str	r3, [r2, #48]	@ 0x30
 8002276:	4b21      	ldr	r3, [pc, #132]	@ (80022fc <HAL_SD_MspInit+0x100>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002282:	4b1e      	ldr	r3, [pc, #120]	@ (80022fc <HAL_SD_MspInit+0x100>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002286:	4a1d      	ldr	r2, [pc, #116]	@ (80022fc <HAL_SD_MspInit+0x100>)
 8002288:	f043 0308 	orr.w	r3, r3, #8
 800228c:	6313      	str	r3, [r2, #48]	@ 0x30
 800228e:	4b1b      	ldr	r3, [pc, #108]	@ (80022fc <HAL_SD_MspInit+0x100>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	60bb      	str	r3, [r7, #8]
 8002298:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800229a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800229e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a2:	2302      	movs	r3, #2
 80022a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ae:	2303      	movs	r3, #3
 80022b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80022b4:	230c      	movs	r3, #12
 80022b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ba:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80022be:	4619      	mov	r1, r3
 80022c0:	480f      	ldr	r0, [pc, #60]	@ (8002300 <HAL_SD_MspInit+0x104>)
 80022c2:	f001 fdbb 	bl	8003e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022c6:	2304      	movs	r3, #4
 80022c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022cc:	2302      	movs	r3, #2
 80022ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d8:	2303      	movs	r3, #3
 80022da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80022de:	230c      	movs	r3, #12
 80022e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022e4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80022e8:	4619      	mov	r1, r3
 80022ea:	4806      	ldr	r0, [pc, #24]	@ (8002304 <HAL_SD_MspInit+0x108>)
 80022ec:	f001 fda6 	bl	8003e3c <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80022f0:	bf00      	nop
 80022f2:	37a8      	adds	r7, #168	@ 0xa8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40012c00 	.word	0x40012c00
 80022fc:	40023800 	.word	0x40023800
 8002300:	40020800 	.word	0x40020800
 8002304:	40020c00 	.word	0x40020c00

08002308 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08c      	sub	sp, #48	@ 0x30
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	f107 031c 	add.w	r3, r7, #28
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a3c      	ldr	r2, [pc, #240]	@ (8002418 <HAL_SPI_MspInit+0x110>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d128      	bne.n	800237c <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800232a:	4b3c      	ldr	r3, [pc, #240]	@ (800241c <HAL_SPI_MspInit+0x114>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232e:	4a3b      	ldr	r2, [pc, #236]	@ (800241c <HAL_SPI_MspInit+0x114>)
 8002330:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002334:	6453      	str	r3, [r2, #68]	@ 0x44
 8002336:	4b39      	ldr	r3, [pc, #228]	@ (800241c <HAL_SPI_MspInit+0x114>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800233e:	61bb      	str	r3, [r7, #24]
 8002340:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002342:	4b36      	ldr	r3, [pc, #216]	@ (800241c <HAL_SPI_MspInit+0x114>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	4a35      	ldr	r2, [pc, #212]	@ (800241c <HAL_SPI_MspInit+0x114>)
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	6313      	str	r3, [r2, #48]	@ 0x30
 800234e:	4b33      	ldr	r3, [pc, #204]	@ (800241c <HAL_SPI_MspInit+0x114>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800235a:	23e0      	movs	r3, #224	@ 0xe0
 800235c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235e:	2302      	movs	r3, #2
 8002360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002366:	2303      	movs	r3, #3
 8002368:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800236a:	2305      	movs	r3, #5
 800236c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236e:	f107 031c 	add.w	r3, r7, #28
 8002372:	4619      	mov	r1, r3
 8002374:	482a      	ldr	r0, [pc, #168]	@ (8002420 <HAL_SPI_MspInit+0x118>)
 8002376:	f001 fd61 	bl	8003e3c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 800237a:	e049      	b.n	8002410 <HAL_SPI_MspInit+0x108>
  else if(hspi->Instance==SPI2)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a28      	ldr	r2, [pc, #160]	@ (8002424 <HAL_SPI_MspInit+0x11c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d144      	bne.n	8002410 <HAL_SPI_MspInit+0x108>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002386:	4b25      	ldr	r3, [pc, #148]	@ (800241c <HAL_SPI_MspInit+0x114>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238a:	4a24      	ldr	r2, [pc, #144]	@ (800241c <HAL_SPI_MspInit+0x114>)
 800238c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002390:	6413      	str	r3, [r2, #64]	@ 0x40
 8002392:	4b22      	ldr	r3, [pc, #136]	@ (800241c <HAL_SPI_MspInit+0x114>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002396:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800239e:	4b1f      	ldr	r3, [pc, #124]	@ (800241c <HAL_SPI_MspInit+0x114>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	4a1e      	ldr	r2, [pc, #120]	@ (800241c <HAL_SPI_MspInit+0x114>)
 80023a4:	f043 0304 	orr.w	r3, r3, #4
 80023a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023aa:	4b1c      	ldr	r3, [pc, #112]	@ (800241c <HAL_SPI_MspInit+0x114>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b6:	4b19      	ldr	r3, [pc, #100]	@ (800241c <HAL_SPI_MspInit+0x114>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ba:	4a18      	ldr	r2, [pc, #96]	@ (800241c <HAL_SPI_MspInit+0x114>)
 80023bc:	f043 0302 	orr.w	r3, r3, #2
 80023c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023c2:	4b16      	ldr	r3, [pc, #88]	@ (800241c <HAL_SPI_MspInit+0x114>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80023ce:	2306      	movs	r3, #6
 80023d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	2302      	movs	r3, #2
 80023d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023da:	2303      	movs	r3, #3
 80023dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023de:	2305      	movs	r3, #5
 80023e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023e2:	f107 031c 	add.w	r3, r7, #28
 80023e6:	4619      	mov	r1, r3
 80023e8:	480f      	ldr	r0, [pc, #60]	@ (8002428 <HAL_SPI_MspInit+0x120>)
 80023ea:	f001 fd27 	bl	8003e3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80023ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	2302      	movs	r3, #2
 80023f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fc:	2303      	movs	r3, #3
 80023fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002400:	2305      	movs	r3, #5
 8002402:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002404:	f107 031c 	add.w	r3, r7, #28
 8002408:	4619      	mov	r1, r3
 800240a:	4808      	ldr	r0, [pc, #32]	@ (800242c <HAL_SPI_MspInit+0x124>)
 800240c:	f001 fd16 	bl	8003e3c <HAL_GPIO_Init>
}
 8002410:	bf00      	nop
 8002412:	3730      	adds	r7, #48	@ 0x30
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40013000 	.word	0x40013000
 800241c:	40023800 	.word	0x40023800
 8002420:	40020000 	.word	0x40020000
 8002424:	40003800 	.word	0x40003800
 8002428:	40020800 	.word	0x40020800
 800242c:	40020400 	.word	0x40020400

08002430 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a22      	ldr	r2, [pc, #136]	@ (80024c8 <HAL_TIM_PWM_MspInit+0x98>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d13d      	bne.n	80024be <HAL_TIM_PWM_MspInit+0x8e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002442:	4b22      	ldr	r3, [pc, #136]	@ (80024cc <HAL_TIM_PWM_MspInit+0x9c>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002446:	4a21      	ldr	r2, [pc, #132]	@ (80024cc <HAL_TIM_PWM_MspInit+0x9c>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6453      	str	r3, [r2, #68]	@ 0x44
 800244e:	4b1f      	ldr	r3, [pc, #124]	@ (80024cc <HAL_TIM_PWM_MspInit+0x9c>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream3;
 800245a:	4b1d      	ldr	r3, [pc, #116]	@ (80024d0 <HAL_TIM_PWM_MspInit+0xa0>)
 800245c:	4a1d      	ldr	r2, [pc, #116]	@ (80024d4 <HAL_TIM_PWM_MspInit+0xa4>)
 800245e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8002460:	4b1b      	ldr	r3, [pc, #108]	@ (80024d0 <HAL_TIM_PWM_MspInit+0xa0>)
 8002462:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8002466:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002468:	4b19      	ldr	r3, [pc, #100]	@ (80024d0 <HAL_TIM_PWM_MspInit+0xa0>)
 800246a:	2240      	movs	r2, #64	@ 0x40
 800246c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800246e:	4b18      	ldr	r3, [pc, #96]	@ (80024d0 <HAL_TIM_PWM_MspInit+0xa0>)
 8002470:	2200      	movs	r2, #0
 8002472:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002474:	4b16      	ldr	r3, [pc, #88]	@ (80024d0 <HAL_TIM_PWM_MspInit+0xa0>)
 8002476:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800247a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800247c:	4b14      	ldr	r3, [pc, #80]	@ (80024d0 <HAL_TIM_PWM_MspInit+0xa0>)
 800247e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002482:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002484:	4b12      	ldr	r3, [pc, #72]	@ (80024d0 <HAL_TIM_PWM_MspInit+0xa0>)
 8002486:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800248a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 800248c:	4b10      	ldr	r3, [pc, #64]	@ (80024d0 <HAL_TIM_PWM_MspInit+0xa0>)
 800248e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002492:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002494:	4b0e      	ldr	r3, [pc, #56]	@ (80024d0 <HAL_TIM_PWM_MspInit+0xa0>)
 8002496:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800249a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800249c:	4b0c      	ldr	r3, [pc, #48]	@ (80024d0 <HAL_TIM_PWM_MspInit+0xa0>)
 800249e:	2200      	movs	r2, #0
 80024a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80024a2:	480b      	ldr	r0, [pc, #44]	@ (80024d0 <HAL_TIM_PWM_MspInit+0xa0>)
 80024a4:	f001 f952 	bl	800374c <HAL_DMA_Init>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 80024ae:	f7ff fddd 	bl	800206c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a06      	ldr	r2, [pc, #24]	@ (80024d0 <HAL_TIM_PWM_MspInit+0xa0>)
 80024b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80024b8:	4a05      	ldr	r2, [pc, #20]	@ (80024d0 <HAL_TIM_PWM_MspInit+0xa0>)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40010000 	.word	0x40010000
 80024cc:	40023800 	.word	0x40023800
 80024d0:	2000063c 	.word	0x2000063c
 80024d4:	40026458 	.word	0x40026458

080024d8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024e8:	d10c      	bne.n	8002504 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024ea:	4b12      	ldr	r3, [pc, #72]	@ (8002534 <HAL_TIM_Base_MspInit+0x5c>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ee:	4a11      	ldr	r2, [pc, #68]	@ (8002534 <HAL_TIM_Base_MspInit+0x5c>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80024f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002534 <HAL_TIM_Base_MspInit+0x5c>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002502:	e010      	b.n	8002526 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM6)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a0b      	ldr	r2, [pc, #44]	@ (8002538 <HAL_TIM_Base_MspInit+0x60>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d10b      	bne.n	8002526 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800250e:	4b09      	ldr	r3, [pc, #36]	@ (8002534 <HAL_TIM_Base_MspInit+0x5c>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002512:	4a08      	ldr	r2, [pc, #32]	@ (8002534 <HAL_TIM_Base_MspInit+0x5c>)
 8002514:	f043 0310 	orr.w	r3, r3, #16
 8002518:	6413      	str	r3, [r2, #64]	@ 0x40
 800251a:	4b06      	ldr	r3, [pc, #24]	@ (8002534 <HAL_TIM_Base_MspInit+0x5c>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251e:	f003 0310 	and.w	r3, r3, #16
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	68bb      	ldr	r3, [r7, #8]
}
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40023800 	.word	0x40023800
 8002538:	40001000 	.word	0x40001000

0800253c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	f107 030c 	add.w	r3, r7, #12
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a11      	ldr	r2, [pc, #68]	@ (80025a0 <HAL_TIM_MspPostInit+0x64>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d11c      	bne.n	8002598 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800255e:	4b11      	ldr	r3, [pc, #68]	@ (80025a4 <HAL_TIM_MspPostInit+0x68>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002562:	4a10      	ldr	r2, [pc, #64]	@ (80025a4 <HAL_TIM_MspPostInit+0x68>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	6313      	str	r3, [r2, #48]	@ 0x30
 800256a:	4b0e      	ldr	r3, [pc, #56]	@ (80025a4 <HAL_TIM_MspPostInit+0x68>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DSHOT_PIN_Pin;
 8002576:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800257a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257c:	2302      	movs	r3, #2
 800257e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002584:	2303      	movs	r3, #3
 8002586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002588:	2301      	movs	r3, #1
 800258a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DSHOT_PIN_GPIO_Port, &GPIO_InitStruct);
 800258c:	f107 030c 	add.w	r3, r7, #12
 8002590:	4619      	mov	r1, r3
 8002592:	4805      	ldr	r0, [pc, #20]	@ (80025a8 <HAL_TIM_MspPostInit+0x6c>)
 8002594:	f001 fc52 	bl	8003e3c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002598:	bf00      	nop
 800259a:	3720      	adds	r7, #32
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40010000 	.word	0x40010000
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40020000 	.word	0x40020000

080025ac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b0b2      	sub	sp, #200	@ 0xc8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b4:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025c4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80025c8:	2280      	movs	r2, #128	@ 0x80
 80025ca:	2100      	movs	r1, #0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f00d fcd0 	bl	800ff72 <memset>
  if(huart->Instance==UART4)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a89      	ldr	r2, [pc, #548]	@ (80027fc <HAL_UART_MspInit+0x250>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d16b      	bne.n	80026b4 <HAL_UART_MspInit+0x108>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80025dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025e0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80025e2:	2300      	movs	r3, #0
 80025e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025e6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80025ea:	4618      	mov	r0, r3
 80025ec:	f003 fef6 	bl	80063dc <HAL_RCCEx_PeriphCLKConfig>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80025f6:	f7ff fd39 	bl	800206c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80025fa:	4b81      	ldr	r3, [pc, #516]	@ (8002800 <HAL_UART_MspInit+0x254>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fe:	4a80      	ldr	r2, [pc, #512]	@ (8002800 <HAL_UART_MspInit+0x254>)
 8002600:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002604:	6413      	str	r3, [r2, #64]	@ 0x40
 8002606:	4b7e      	ldr	r3, [pc, #504]	@ (8002800 <HAL_UART_MspInit+0x254>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800260e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002612:	4b7b      	ldr	r3, [pc, #492]	@ (8002800 <HAL_UART_MspInit+0x254>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002616:	4a7a      	ldr	r2, [pc, #488]	@ (8002800 <HAL_UART_MspInit+0x254>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	6313      	str	r3, [r2, #48]	@ 0x30
 800261e:	4b78      	ldr	r3, [pc, #480]	@ (8002800 <HAL_UART_MspInit+0x254>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800262a:	2303      	movs	r3, #3
 800262c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002630:	2302      	movs	r3, #2
 8002632:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263c:	2303      	movs	r3, #3
 800263e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002642:	2308      	movs	r3, #8
 8002644:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002648:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800264c:	4619      	mov	r1, r3
 800264e:	486d      	ldr	r0, [pc, #436]	@ (8002804 <HAL_UART_MspInit+0x258>)
 8002650:	f001 fbf4 	bl	8003e3c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002654:	4b6c      	ldr	r3, [pc, #432]	@ (8002808 <HAL_UART_MspInit+0x25c>)
 8002656:	4a6d      	ldr	r2, [pc, #436]	@ (800280c <HAL_UART_MspInit+0x260>)
 8002658:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800265a:	4b6b      	ldr	r3, [pc, #428]	@ (8002808 <HAL_UART_MspInit+0x25c>)
 800265c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002660:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002662:	4b69      	ldr	r3, [pc, #420]	@ (8002808 <HAL_UART_MspInit+0x25c>)
 8002664:	2200      	movs	r2, #0
 8002666:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002668:	4b67      	ldr	r3, [pc, #412]	@ (8002808 <HAL_UART_MspInit+0x25c>)
 800266a:	2200      	movs	r2, #0
 800266c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800266e:	4b66      	ldr	r3, [pc, #408]	@ (8002808 <HAL_UART_MspInit+0x25c>)
 8002670:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002674:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002676:	4b64      	ldr	r3, [pc, #400]	@ (8002808 <HAL_UART_MspInit+0x25c>)
 8002678:	2200      	movs	r2, #0
 800267a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800267c:	4b62      	ldr	r3, [pc, #392]	@ (8002808 <HAL_UART_MspInit+0x25c>)
 800267e:	2200      	movs	r2, #0
 8002680:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8002682:	4b61      	ldr	r3, [pc, #388]	@ (8002808 <HAL_UART_MspInit+0x25c>)
 8002684:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002688:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800268a:	4b5f      	ldr	r3, [pc, #380]	@ (8002808 <HAL_UART_MspInit+0x25c>)
 800268c:	2200      	movs	r2, #0
 800268e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002690:	4b5d      	ldr	r3, [pc, #372]	@ (8002808 <HAL_UART_MspInit+0x25c>)
 8002692:	2200      	movs	r2, #0
 8002694:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002696:	485c      	ldr	r0, [pc, #368]	@ (8002808 <HAL_UART_MspInit+0x25c>)
 8002698:	f001 f858 	bl	800374c <HAL_DMA_Init>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 80026a2:	f7ff fce3 	bl	800206c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a57      	ldr	r2, [pc, #348]	@ (8002808 <HAL_UART_MspInit+0x25c>)
 80026aa:	675a      	str	r2, [r3, #116]	@ 0x74
 80026ac:	4a56      	ldr	r2, [pc, #344]	@ (8002808 <HAL_UART_MspInit+0x25c>)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 80026b2:	e20a      	b.n	8002aca <HAL_UART_MspInit+0x51e>
  else if(huart->Instance==USART1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a55      	ldr	r2, [pc, #340]	@ (8002810 <HAL_UART_MspInit+0x264>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	f040 80b2 	bne.w	8002824 <HAL_UART_MspInit+0x278>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80026c0:	2340      	movs	r3, #64	@ 0x40
 80026c2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80026c4:	2300      	movs	r3, #0
 80026c6:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026c8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80026cc:	4618      	mov	r0, r3
 80026ce:	f003 fe85 	bl	80063dc <HAL_RCCEx_PeriphCLKConfig>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_UART_MspInit+0x130>
      Error_Handler();
 80026d8:	f7ff fcc8 	bl	800206c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80026dc:	4b48      	ldr	r3, [pc, #288]	@ (8002800 <HAL_UART_MspInit+0x254>)
 80026de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e0:	4a47      	ldr	r2, [pc, #284]	@ (8002800 <HAL_UART_MspInit+0x254>)
 80026e2:	f043 0310 	orr.w	r3, r3, #16
 80026e6:	6453      	str	r3, [r2, #68]	@ 0x44
 80026e8:	4b45      	ldr	r3, [pc, #276]	@ (8002800 <HAL_UART_MspInit+0x254>)
 80026ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ec:	f003 0310 	and.w	r3, r3, #16
 80026f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f4:	4b42      	ldr	r3, [pc, #264]	@ (8002800 <HAL_UART_MspInit+0x254>)
 80026f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f8:	4a41      	ldr	r2, [pc, #260]	@ (8002800 <HAL_UART_MspInit+0x254>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002700:	4b3f      	ldr	r3, [pc, #252]	@ (8002800 <HAL_UART_MspInit+0x254>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	627b      	str	r3, [r7, #36]	@ 0x24
 800270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800270c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002710:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002714:	2302      	movs	r3, #2
 8002716:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002720:	2303      	movs	r3, #3
 8002722:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002726:	2307      	movs	r3, #7
 8002728:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002730:	4619      	mov	r1, r3
 8002732:	4834      	ldr	r0, [pc, #208]	@ (8002804 <HAL_UART_MspInit+0x258>)
 8002734:	f001 fb82 	bl	8003e3c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002738:	4b36      	ldr	r3, [pc, #216]	@ (8002814 <HAL_UART_MspInit+0x268>)
 800273a:	4a37      	ldr	r2, [pc, #220]	@ (8002818 <HAL_UART_MspInit+0x26c>)
 800273c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800273e:	4b35      	ldr	r3, [pc, #212]	@ (8002814 <HAL_UART_MspInit+0x268>)
 8002740:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002744:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002746:	4b33      	ldr	r3, [pc, #204]	@ (8002814 <HAL_UART_MspInit+0x268>)
 8002748:	2200      	movs	r2, #0
 800274a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800274c:	4b31      	ldr	r3, [pc, #196]	@ (8002814 <HAL_UART_MspInit+0x268>)
 800274e:	2200      	movs	r2, #0
 8002750:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002752:	4b30      	ldr	r3, [pc, #192]	@ (8002814 <HAL_UART_MspInit+0x268>)
 8002754:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002758:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800275a:	4b2e      	ldr	r3, [pc, #184]	@ (8002814 <HAL_UART_MspInit+0x268>)
 800275c:	2200      	movs	r2, #0
 800275e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002760:	4b2c      	ldr	r3, [pc, #176]	@ (8002814 <HAL_UART_MspInit+0x268>)
 8002762:	2200      	movs	r2, #0
 8002764:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002766:	4b2b      	ldr	r3, [pc, #172]	@ (8002814 <HAL_UART_MspInit+0x268>)
 8002768:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800276c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800276e:	4b29      	ldr	r3, [pc, #164]	@ (8002814 <HAL_UART_MspInit+0x268>)
 8002770:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002774:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002776:	4b27      	ldr	r3, [pc, #156]	@ (8002814 <HAL_UART_MspInit+0x268>)
 8002778:	2200      	movs	r2, #0
 800277a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800277c:	4825      	ldr	r0, [pc, #148]	@ (8002814 <HAL_UART_MspInit+0x268>)
 800277e:	f000 ffe5 	bl	800374c <HAL_DMA_Init>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 8002788:	f7ff fc70 	bl	800206c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a21      	ldr	r2, [pc, #132]	@ (8002814 <HAL_UART_MspInit+0x268>)
 8002790:	675a      	str	r2, [r3, #116]	@ 0x74
 8002792:	4a20      	ldr	r2, [pc, #128]	@ (8002814 <HAL_UART_MspInit+0x268>)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002798:	4b20      	ldr	r3, [pc, #128]	@ (800281c <HAL_UART_MspInit+0x270>)
 800279a:	4a21      	ldr	r2, [pc, #132]	@ (8002820 <HAL_UART_MspInit+0x274>)
 800279c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800279e:	4b1f      	ldr	r3, [pc, #124]	@ (800281c <HAL_UART_MspInit+0x270>)
 80027a0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80027a4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027a6:	4b1d      	ldr	r3, [pc, #116]	@ (800281c <HAL_UART_MspInit+0x270>)
 80027a8:	2240      	movs	r2, #64	@ 0x40
 80027aa:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027ac:	4b1b      	ldr	r3, [pc, #108]	@ (800281c <HAL_UART_MspInit+0x270>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027b2:	4b1a      	ldr	r3, [pc, #104]	@ (800281c <HAL_UART_MspInit+0x270>)
 80027b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027b8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027ba:	4b18      	ldr	r3, [pc, #96]	@ (800281c <HAL_UART_MspInit+0x270>)
 80027bc:	2200      	movs	r2, #0
 80027be:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027c0:	4b16      	ldr	r3, [pc, #88]	@ (800281c <HAL_UART_MspInit+0x270>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80027c6:	4b15      	ldr	r3, [pc, #84]	@ (800281c <HAL_UART_MspInit+0x270>)
 80027c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027cc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80027ce:	4b13      	ldr	r3, [pc, #76]	@ (800281c <HAL_UART_MspInit+0x270>)
 80027d0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80027d4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027d6:	4b11      	ldr	r3, [pc, #68]	@ (800281c <HAL_UART_MspInit+0x270>)
 80027d8:	2200      	movs	r2, #0
 80027da:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80027dc:	480f      	ldr	r0, [pc, #60]	@ (800281c <HAL_UART_MspInit+0x270>)
 80027de:	f000 ffb5 	bl	800374c <HAL_DMA_Init>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <HAL_UART_MspInit+0x240>
      Error_Handler();
 80027e8:	f7ff fc40 	bl	800206c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a0b      	ldr	r2, [pc, #44]	@ (800281c <HAL_UART_MspInit+0x270>)
 80027f0:	671a      	str	r2, [r3, #112]	@ 0x70
 80027f2:	4a0a      	ldr	r2, [pc, #40]	@ (800281c <HAL_UART_MspInit+0x270>)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80027f8:	e167      	b.n	8002aca <HAL_UART_MspInit+0x51e>
 80027fa:	bf00      	nop
 80027fc:	40004c00 	.word	0x40004c00
 8002800:	40023800 	.word	0x40023800
 8002804:	40020000 	.word	0x40020000
 8002808:	20000944 	.word	0x20000944
 800280c:	40026040 	.word	0x40026040
 8002810:	40011000 	.word	0x40011000
 8002814:	200009a4 	.word	0x200009a4
 8002818:	40026440 	.word	0x40026440
 800281c:	20000a04 	.word	0x20000a04
 8002820:	400264b8 	.word	0x400264b8
  else if(huart->Instance==USART2)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4aaa      	ldr	r2, [pc, #680]	@ (8002ad4 <HAL_UART_MspInit+0x528>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d16a      	bne.n	8002904 <HAL_UART_MspInit+0x358>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800282e:	2380      	movs	r3, #128	@ 0x80
 8002830:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002832:	2300      	movs	r3, #0
 8002834:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002836:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800283a:	4618      	mov	r0, r3
 800283c:	f003 fdce 	bl	80063dc <HAL_RCCEx_PeriphCLKConfig>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <HAL_UART_MspInit+0x29e>
      Error_Handler();
 8002846:	f7ff fc11 	bl	800206c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800284a:	4ba3      	ldr	r3, [pc, #652]	@ (8002ad8 <HAL_UART_MspInit+0x52c>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284e:	4aa2      	ldr	r2, [pc, #648]	@ (8002ad8 <HAL_UART_MspInit+0x52c>)
 8002850:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002854:	6413      	str	r3, [r2, #64]	@ 0x40
 8002856:	4ba0      	ldr	r3, [pc, #640]	@ (8002ad8 <HAL_UART_MspInit+0x52c>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285e:	623b      	str	r3, [r7, #32]
 8002860:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002862:	4b9d      	ldr	r3, [pc, #628]	@ (8002ad8 <HAL_UART_MspInit+0x52c>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002866:	4a9c      	ldr	r2, [pc, #624]	@ (8002ad8 <HAL_UART_MspInit+0x52c>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	6313      	str	r3, [r2, #48]	@ 0x30
 800286e:	4b9a      	ldr	r3, [pc, #616]	@ (8002ad8 <HAL_UART_MspInit+0x52c>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	61fb      	str	r3, [r7, #28]
 8002878:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800287a:	230c      	movs	r3, #12
 800287c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002880:	2302      	movs	r3, #2
 8002882:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002886:	2300      	movs	r3, #0
 8002888:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800288c:	2303      	movs	r3, #3
 800288e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002892:	2307      	movs	r3, #7
 8002894:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002898:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800289c:	4619      	mov	r1, r3
 800289e:	488f      	ldr	r0, [pc, #572]	@ (8002adc <HAL_UART_MspInit+0x530>)
 80028a0:	f001 facc 	bl	8003e3c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80028a4:	4b8e      	ldr	r3, [pc, #568]	@ (8002ae0 <HAL_UART_MspInit+0x534>)
 80028a6:	4a8f      	ldr	r2, [pc, #572]	@ (8002ae4 <HAL_UART_MspInit+0x538>)
 80028a8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80028aa:	4b8d      	ldr	r3, [pc, #564]	@ (8002ae0 <HAL_UART_MspInit+0x534>)
 80028ac:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80028b0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028b2:	4b8b      	ldr	r3, [pc, #556]	@ (8002ae0 <HAL_UART_MspInit+0x534>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028b8:	4b89      	ldr	r3, [pc, #548]	@ (8002ae0 <HAL_UART_MspInit+0x534>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028be:	4b88      	ldr	r3, [pc, #544]	@ (8002ae0 <HAL_UART_MspInit+0x534>)
 80028c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028c4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028c6:	4b86      	ldr	r3, [pc, #536]	@ (8002ae0 <HAL_UART_MspInit+0x534>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028cc:	4b84      	ldr	r3, [pc, #528]	@ (8002ae0 <HAL_UART_MspInit+0x534>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80028d2:	4b83      	ldr	r3, [pc, #524]	@ (8002ae0 <HAL_UART_MspInit+0x534>)
 80028d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028d8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028da:	4b81      	ldr	r3, [pc, #516]	@ (8002ae0 <HAL_UART_MspInit+0x534>)
 80028dc:	2200      	movs	r2, #0
 80028de:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028e0:	4b7f      	ldr	r3, [pc, #508]	@ (8002ae0 <HAL_UART_MspInit+0x534>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80028e6:	487e      	ldr	r0, [pc, #504]	@ (8002ae0 <HAL_UART_MspInit+0x534>)
 80028e8:	f000 ff30 	bl	800374c <HAL_DMA_Init>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <HAL_UART_MspInit+0x34a>
      Error_Handler();
 80028f2:	f7ff fbbb 	bl	800206c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a79      	ldr	r2, [pc, #484]	@ (8002ae0 <HAL_UART_MspInit+0x534>)
 80028fa:	675a      	str	r2, [r3, #116]	@ 0x74
 80028fc:	4a78      	ldr	r2, [pc, #480]	@ (8002ae0 <HAL_UART_MspInit+0x534>)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002902:	e0e2      	b.n	8002aca <HAL_UART_MspInit+0x51e>
  else if(huart->Instance==USART3)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a77      	ldr	r2, [pc, #476]	@ (8002ae8 <HAL_UART_MspInit+0x53c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d16c      	bne.n	80029e8 <HAL_UART_MspInit+0x43c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800290e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002912:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002914:	2300      	movs	r3, #0
 8002916:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002918:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800291c:	4618      	mov	r0, r3
 800291e:	f003 fd5d 	bl	80063dc <HAL_RCCEx_PeriphCLKConfig>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_UART_MspInit+0x380>
      Error_Handler();
 8002928:	f7ff fba0 	bl	800206c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800292c:	4b6a      	ldr	r3, [pc, #424]	@ (8002ad8 <HAL_UART_MspInit+0x52c>)
 800292e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002930:	4a69      	ldr	r2, [pc, #420]	@ (8002ad8 <HAL_UART_MspInit+0x52c>)
 8002932:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002936:	6413      	str	r3, [r2, #64]	@ 0x40
 8002938:	4b67      	ldr	r3, [pc, #412]	@ (8002ad8 <HAL_UART_MspInit+0x52c>)
 800293a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002940:	61bb      	str	r3, [r7, #24]
 8002942:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002944:	4b64      	ldr	r3, [pc, #400]	@ (8002ad8 <HAL_UART_MspInit+0x52c>)
 8002946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002948:	4a63      	ldr	r2, [pc, #396]	@ (8002ad8 <HAL_UART_MspInit+0x52c>)
 800294a:	f043 0302 	orr.w	r3, r3, #2
 800294e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002950:	4b61      	ldr	r3, [pc, #388]	@ (8002ad8 <HAL_UART_MspInit+0x52c>)
 8002952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	617b      	str	r3, [r7, #20]
 800295a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800295c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002960:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002964:	2302      	movs	r3, #2
 8002966:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	2300      	movs	r3, #0
 800296c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002970:	2303      	movs	r3, #3
 8002972:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002976:	2307      	movs	r3, #7
 8002978:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800297c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002980:	4619      	mov	r1, r3
 8002982:	485a      	ldr	r0, [pc, #360]	@ (8002aec <HAL_UART_MspInit+0x540>)
 8002984:	f001 fa5a 	bl	8003e3c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002988:	4b59      	ldr	r3, [pc, #356]	@ (8002af0 <HAL_UART_MspInit+0x544>)
 800298a:	4a5a      	ldr	r2, [pc, #360]	@ (8002af4 <HAL_UART_MspInit+0x548>)
 800298c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800298e:	4b58      	ldr	r3, [pc, #352]	@ (8002af0 <HAL_UART_MspInit+0x544>)
 8002990:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002994:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002996:	4b56      	ldr	r3, [pc, #344]	@ (8002af0 <HAL_UART_MspInit+0x544>)
 8002998:	2200      	movs	r2, #0
 800299a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800299c:	4b54      	ldr	r3, [pc, #336]	@ (8002af0 <HAL_UART_MspInit+0x544>)
 800299e:	2200      	movs	r2, #0
 80029a0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029a2:	4b53      	ldr	r3, [pc, #332]	@ (8002af0 <HAL_UART_MspInit+0x544>)
 80029a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029a8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029aa:	4b51      	ldr	r3, [pc, #324]	@ (8002af0 <HAL_UART_MspInit+0x544>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029b0:	4b4f      	ldr	r3, [pc, #316]	@ (8002af0 <HAL_UART_MspInit+0x544>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80029b6:	4b4e      	ldr	r3, [pc, #312]	@ (8002af0 <HAL_UART_MspInit+0x544>)
 80029b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029bc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029be:	4b4c      	ldr	r3, [pc, #304]	@ (8002af0 <HAL_UART_MspInit+0x544>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029c4:	4b4a      	ldr	r3, [pc, #296]	@ (8002af0 <HAL_UART_MspInit+0x544>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80029ca:	4849      	ldr	r0, [pc, #292]	@ (8002af0 <HAL_UART_MspInit+0x544>)
 80029cc:	f000 febe 	bl	800374c <HAL_DMA_Init>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_UART_MspInit+0x42e>
      Error_Handler();
 80029d6:	f7ff fb49 	bl	800206c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a44      	ldr	r2, [pc, #272]	@ (8002af0 <HAL_UART_MspInit+0x544>)
 80029de:	675a      	str	r2, [r3, #116]	@ 0x74
 80029e0:	4a43      	ldr	r2, [pc, #268]	@ (8002af0 <HAL_UART_MspInit+0x544>)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80029e6:	e070      	b.n	8002aca <HAL_UART_MspInit+0x51e>
  else if(huart->Instance==USART6)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a42      	ldr	r2, [pc, #264]	@ (8002af8 <HAL_UART_MspInit+0x54c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d16b      	bne.n	8002aca <HAL_UART_MspInit+0x51e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80029f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80029f6:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80029f8:	2300      	movs	r3, #0
 80029fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029fe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a02:	4618      	mov	r0, r3
 8002a04:	f003 fcea 	bl	80063dc <HAL_RCCEx_PeriphCLKConfig>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_UART_MspInit+0x466>
      Error_Handler();
 8002a0e:	f7ff fb2d 	bl	800206c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002a12:	4b31      	ldr	r3, [pc, #196]	@ (8002ad8 <HAL_UART_MspInit+0x52c>)
 8002a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a16:	4a30      	ldr	r2, [pc, #192]	@ (8002ad8 <HAL_UART_MspInit+0x52c>)
 8002a18:	f043 0320 	orr.w	r3, r3, #32
 8002a1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a1e:	4b2e      	ldr	r3, [pc, #184]	@ (8002ad8 <HAL_UART_MspInit+0x52c>)
 8002a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a22:	f003 0320 	and.w	r3, r3, #32
 8002a26:	613b      	str	r3, [r7, #16]
 8002a28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8002ad8 <HAL_UART_MspInit+0x52c>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2e:	4a2a      	ldr	r2, [pc, #168]	@ (8002ad8 <HAL_UART_MspInit+0x52c>)
 8002a30:	f043 0304 	orr.w	r3, r3, #4
 8002a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a36:	4b28      	ldr	r3, [pc, #160]	@ (8002ad8 <HAL_UART_MspInit+0x52c>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3a:	f003 0304 	and.w	r3, r3, #4
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a42:	23c0      	movs	r3, #192	@ 0xc0
 8002a44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a54:	2303      	movs	r3, #3
 8002a56:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002a5a:	2308      	movs	r3, #8
 8002a5c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a60:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002a64:	4619      	mov	r1, r3
 8002a66:	4825      	ldr	r0, [pc, #148]	@ (8002afc <HAL_UART_MspInit+0x550>)
 8002a68:	f001 f9e8 	bl	8003e3c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002a6c:	4b24      	ldr	r3, [pc, #144]	@ (8002b00 <HAL_UART_MspInit+0x554>)
 8002a6e:	4a25      	ldr	r2, [pc, #148]	@ (8002b04 <HAL_UART_MspInit+0x558>)
 8002a70:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002a72:	4b23      	ldr	r3, [pc, #140]	@ (8002b00 <HAL_UART_MspInit+0x554>)
 8002a74:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002a78:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a7a:	4b21      	ldr	r3, [pc, #132]	@ (8002b00 <HAL_UART_MspInit+0x554>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a80:	4b1f      	ldr	r3, [pc, #124]	@ (8002b00 <HAL_UART_MspInit+0x554>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a86:	4b1e      	ldr	r3, [pc, #120]	@ (8002b00 <HAL_UART_MspInit+0x554>)
 8002a88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a8c:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8002b00 <HAL_UART_MspInit+0x554>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a94:	4b1a      	ldr	r3, [pc, #104]	@ (8002b00 <HAL_UART_MspInit+0x554>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002a9a:	4b19      	ldr	r3, [pc, #100]	@ (8002b00 <HAL_UART_MspInit+0x554>)
 8002a9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002aa0:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002aa2:	4b17      	ldr	r3, [pc, #92]	@ (8002b00 <HAL_UART_MspInit+0x554>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002aa8:	4b15      	ldr	r3, [pc, #84]	@ (8002b00 <HAL_UART_MspInit+0x554>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002aae:	4814      	ldr	r0, [pc, #80]	@ (8002b00 <HAL_UART_MspInit+0x554>)
 8002ab0:	f000 fe4c 	bl	800374c <HAL_DMA_Init>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_UART_MspInit+0x512>
      Error_Handler();
 8002aba:	f7ff fad7 	bl	800206c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a0f      	ldr	r2, [pc, #60]	@ (8002b00 <HAL_UART_MspInit+0x554>)
 8002ac2:	675a      	str	r2, [r3, #116]	@ 0x74
 8002ac4:	4a0e      	ldr	r2, [pc, #56]	@ (8002b00 <HAL_UART_MspInit+0x554>)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002aca:	bf00      	nop
 8002acc:	37c8      	adds	r7, #200	@ 0xc8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40004400 	.word	0x40004400
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	40020000 	.word	0x40020000
 8002ae0:	20000a64 	.word	0x20000a64
 8002ae4:	40026088 	.word	0x40026088
 8002ae8:	40004800 	.word	0x40004800
 8002aec:	40020400 	.word	0x40020400
 8002af0:	20000ac4 	.word	0x20000ac4
 8002af4:	40026028 	.word	0x40026028
 8002af8:	40011400 	.word	0x40011400
 8002afc:	40020800 	.word	0x40020800
 8002b00:	20000b24 	.word	0x20000b24
 8002b04:	40026428 	.word	0x40026428

08002b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002b0c:	f003 fc4a 	bl	80063a4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b10:	bf00      	nop
 8002b12:	e7fd      	b.n	8002b10 <NMI_Handler+0x8>

08002b14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b18:	bf00      	nop
 8002b1a:	e7fd      	b.n	8002b18 <HardFault_Handler+0x4>

08002b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b20:	bf00      	nop
 8002b22:	e7fd      	b.n	8002b20 <MemManage_Handler+0x4>

08002b24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b28:	bf00      	nop
 8002b2a:	e7fd      	b.n	8002b28 <BusFault_Handler+0x4>

08002b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b30:	bf00      	nop
 8002b32:	e7fd      	b.n	8002b30 <UsageFault_Handler+0x4>

08002b34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b38:	bf00      	nop
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b54:	bf00      	nop
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b62:	f000 f991 	bl	8002e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
	...

08002b6c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002b70:	4802      	ldr	r0, [pc, #8]	@ (8002b7c <DMA1_Stream1_IRQHandler+0x10>)
 8002b72:	f000 fef9 	bl	8003968 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	20000ac4 	.word	0x20000ac4

08002b80 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002b84:	4802      	ldr	r0, [pc, #8]	@ (8002b90 <DMA1_Stream2_IRQHandler+0x10>)
 8002b86:	f000 feef 	bl	8003968 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	20000944 	.word	0x20000944

08002b94 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002b98:	4802      	ldr	r0, [pc, #8]	@ (8002ba4 <DMA1_Stream5_IRQHandler+0x10>)
 8002b9a:	f000 fee5 	bl	8003968 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000a64 	.word	0x20000a64

08002ba8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002bac:	4802      	ldr	r0, [pc, #8]	@ (8002bb8 <DMA2_Stream1_IRQHandler+0x10>)
 8002bae:	f000 fedb 	bl	8003968 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20000b24 	.word	0x20000b24

08002bbc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002bc0:	4802      	ldr	r0, [pc, #8]	@ (8002bcc <DMA2_Stream2_IRQHandler+0x10>)
 8002bc2:	f000 fed1 	bl	8003968 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	200009a4 	.word	0x200009a4

08002bd0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002bd4:	4802      	ldr	r0, [pc, #8]	@ (8002be0 <DMA2_Stream3_IRQHandler+0x10>)
 8002bd6:	f000 fec7 	bl	8003968 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002bda:	bf00      	nop
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	2000063c 	.word	0x2000063c

08002be4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002be8:	4802      	ldr	r0, [pc, #8]	@ (8002bf4 <OTG_FS_IRQHandler+0x10>)
 8002bea:	f001 fd60 	bl	80046ae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002bee:	bf00      	nop
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	20002080 	.word	0x20002080

08002bf8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002bfc:	4802      	ldr	r0, [pc, #8]	@ (8002c08 <DMA2_Stream7_IRQHandler+0x10>)
 8002bfe:	f000 feb3 	bl	8003968 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	20000a04 	.word	0x20000a04

08002c0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  return 1;
 8002c10:	2301      	movs	r3, #1
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <_kill>:

int _kill(int pid, int sig)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c26:	f00d fa07 	bl	8010038 <__errno>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2216      	movs	r2, #22
 8002c2e:	601a      	str	r2, [r3, #0]
  return -1;
 8002c30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <_exit>:

void _exit (int status)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c44:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7ff ffe7 	bl	8002c1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c4e:	bf00      	nop
 8002c50:	e7fd      	b.n	8002c4e <_exit+0x12>

08002c52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b086      	sub	sp, #24
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]
 8002c62:	e00a      	b.n	8002c7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c64:	f3af 8000 	nop.w
 8002c68:	4601      	mov	r1, r0
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	1c5a      	adds	r2, r3, #1
 8002c6e:	60ba      	str	r2, [r7, #8]
 8002c70:	b2ca      	uxtb	r2, r1
 8002c72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	3301      	adds	r3, #1
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	dbf0      	blt.n	8002c64 <_read+0x12>
  }

  return len;
 8002c82:	687b      	ldr	r3, [r7, #4]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	e009      	b.n	8002cb2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	60ba      	str	r2, [r7, #8]
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	dbf1      	blt.n	8002c9e <_write+0x12>
  }
  return len;
 8002cba:	687b      	ldr	r3, [r7, #4]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <_close>:

int _close(int file)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ccc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cec:	605a      	str	r2, [r3, #4]
  return 0;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <_isatty>:

int _isatty(int file)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d04:	2301      	movs	r3, #1
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b085      	sub	sp, #20
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d34:	4a14      	ldr	r2, [pc, #80]	@ (8002d88 <_sbrk+0x5c>)
 8002d36:	4b15      	ldr	r3, [pc, #84]	@ (8002d8c <_sbrk+0x60>)
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d40:	4b13      	ldr	r3, [pc, #76]	@ (8002d90 <_sbrk+0x64>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d102      	bne.n	8002d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d48:	4b11      	ldr	r3, [pc, #68]	@ (8002d90 <_sbrk+0x64>)
 8002d4a:	4a12      	ldr	r2, [pc, #72]	@ (8002d94 <_sbrk+0x68>)
 8002d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d4e:	4b10      	ldr	r3, [pc, #64]	@ (8002d90 <_sbrk+0x64>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4413      	add	r3, r2
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d207      	bcs.n	8002d6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d5c:	f00d f96c 	bl	8010038 <__errno>
 8002d60:	4603      	mov	r3, r0
 8002d62:	220c      	movs	r2, #12
 8002d64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d6a:	e009      	b.n	8002d80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d6c:	4b08      	ldr	r3, [pc, #32]	@ (8002d90 <_sbrk+0x64>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d72:	4b07      	ldr	r3, [pc, #28]	@ (8002d90 <_sbrk+0x64>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4413      	add	r3, r2
 8002d7a:	4a05      	ldr	r2, [pc, #20]	@ (8002d90 <_sbrk+0x64>)
 8002d7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	20040000 	.word	0x20040000
 8002d8c:	00000400 	.word	0x00000400
 8002d90:	20000b84 	.word	0x20000b84
 8002d94:	200026b0 	.word	0x200026b0

08002d98 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d9c:	4b06      	ldr	r3, [pc, #24]	@ (8002db8 <SystemInit+0x20>)
 8002d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da2:	4a05      	ldr	r2, [pc, #20]	@ (8002db8 <SystemInit+0x20>)
 8002da4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002da8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dac:	bf00      	nop
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	e000ed00 	.word	0xe000ed00

08002dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002dbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002df4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 8002dc0:	f7ff ffea 	bl	8002d98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002dc4:	480c      	ldr	r0, [pc, #48]	@ (8002df8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002dc6:	490d      	ldr	r1, [pc, #52]	@ (8002dfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8002e00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dcc:	e002      	b.n	8002dd4 <LoopCopyDataInit>

08002dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dd2:	3304      	adds	r3, #4

08002dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dd8:	d3f9      	bcc.n	8002dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dda:	4a0a      	ldr	r2, [pc, #40]	@ (8002e04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ddc:	4c0a      	ldr	r4, [pc, #40]	@ (8002e08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002de0:	e001      	b.n	8002de6 <LoopFillZerobss>

08002de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002de4:	3204      	adds	r2, #4

08002de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002de8:	d3fb      	bcc.n	8002de2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dea:	f00d f92b 	bl	8010044 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dee:	f7fe fbc1 	bl	8001574 <main>
  bx  lr    
 8002df2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002df4:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dfc:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8002e00:	080123dc 	.word	0x080123dc
  ldr r2, =_sbss
 8002e04:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8002e08:	200026ac 	.word	0x200026ac

08002e0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e0c:	e7fe      	b.n	8002e0c <ADC_IRQHandler>

08002e0e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e12:	2003      	movs	r0, #3
 8002e14:	f000 fbe0 	bl	80035d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e18:	200f      	movs	r0, #15
 8002e1a:	f000 f805 	bl	8002e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e1e:	f7ff f92b 	bl	8002078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e30:	4b12      	ldr	r3, [pc, #72]	@ (8002e7c <HAL_InitTick+0x54>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	4b12      	ldr	r3, [pc, #72]	@ (8002e80 <HAL_InitTick+0x58>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	4619      	mov	r1, r3
 8002e3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 fbfb 	bl	8003642 <HAL_SYSTICK_Config>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e00e      	b.n	8002e74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b0f      	cmp	r3, #15
 8002e5a:	d80a      	bhi.n	8002e72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e64:	f000 fbc3 	bl	80035ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e68:	4a06      	ldr	r2, [pc, #24]	@ (8002e84 <HAL_InitTick+0x5c>)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	e000      	b.n	8002e74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20000000 	.word	0x20000000
 8002e80:	20000008 	.word	0x20000008
 8002e84:	20000004 	.word	0x20000004

08002e88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ea8 <HAL_IncTick+0x20>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	461a      	mov	r2, r3
 8002e92:	4b06      	ldr	r3, [pc, #24]	@ (8002eac <HAL_IncTick+0x24>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4413      	add	r3, r2
 8002e98:	4a04      	ldr	r2, [pc, #16]	@ (8002eac <HAL_IncTick+0x24>)
 8002e9a:	6013      	str	r3, [r2, #0]
}
 8002e9c:	bf00      	nop
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	20000008 	.word	0x20000008
 8002eac:	20000b88 	.word	0x20000b88

08002eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8002eb4:	4b03      	ldr	r3, [pc, #12]	@ (8002ec4 <HAL_GetTick+0x14>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	20000b88 	.word	0x20000b88

08002ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ed0:	f7ff ffee 	bl	8002eb0 <HAL_GetTick>
 8002ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ee0:	d005      	beq.n	8002eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8002f0c <HAL_Delay+0x44>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4413      	add	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002eee:	bf00      	nop
 8002ef0:	f7ff ffde 	bl	8002eb0 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d8f7      	bhi.n	8002ef0 <HAL_Delay+0x28>
  {
  }
}
 8002f00:	bf00      	nop
 8002f02:	bf00      	nop
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000008 	.word	0x20000008

08002f10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e031      	b.n	8002f8a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff f8c6 	bl	80020c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f46:	f003 0310 	and.w	r3, r3, #16
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d116      	bne.n	8002f7c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f52:	4b10      	ldr	r3, [pc, #64]	@ (8002f94 <HAL_ADC_Init+0x84>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	f043 0202 	orr.w	r2, r3, #2
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f970 	bl	8003244 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6e:	f023 0303 	bic.w	r3, r3, #3
 8002f72:	f043 0201 	orr.w	r2, r3, #1
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f7a:	e001      	b.n	8002f80 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	ffffeefd 	.word	0xffffeefd

08002f98 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x1c>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e136      	b.n	8003222 <HAL_ADC_ConfigChannel+0x28a>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b09      	cmp	r3, #9
 8002fc2:	d93a      	bls.n	800303a <HAL_ADC_ConfigChannel+0xa2>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002fcc:	d035      	beq.n	800303a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68d9      	ldr	r1, [r3, #12]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	461a      	mov	r2, r3
 8002fdc:	4613      	mov	r3, r2
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	4413      	add	r3, r2
 8002fe2:	3b1e      	subs	r3, #30
 8002fe4:	2207      	movs	r2, #7
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43da      	mvns	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	400a      	ands	r2, r1
 8002ff2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a8d      	ldr	r2, [pc, #564]	@ (8003230 <HAL_ADC_ConfigChannel+0x298>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d10a      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68d9      	ldr	r1, [r3, #12]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	061a      	lsls	r2, r3, #24
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003012:	e035      	b.n	8003080 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68d9      	ldr	r1, [r3, #12]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	b29b      	uxth	r3, r3
 8003024:	4618      	mov	r0, r3
 8003026:	4603      	mov	r3, r0
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	4403      	add	r3, r0
 800302c:	3b1e      	subs	r3, #30
 800302e:	409a      	lsls	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003038:	e022      	b.n	8003080 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6919      	ldr	r1, [r3, #16]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	b29b      	uxth	r3, r3
 8003046:	461a      	mov	r2, r3
 8003048:	4613      	mov	r3, r2
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	4413      	add	r3, r2
 800304e:	2207      	movs	r2, #7
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43da      	mvns	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	400a      	ands	r2, r1
 800305c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6919      	ldr	r1, [r3, #16]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	b29b      	uxth	r3, r3
 800306e:	4618      	mov	r0, r3
 8003070:	4603      	mov	r3, r0
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	4403      	add	r3, r0
 8003076:	409a      	lsls	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b06      	cmp	r3, #6
 8003086:	d824      	bhi.n	80030d2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	3b05      	subs	r3, #5
 800309a:	221f      	movs	r2, #31
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43da      	mvns	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	400a      	ands	r2, r1
 80030a8:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	4618      	mov	r0, r3
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	3b05      	subs	r3, #5
 80030c4:	fa00 f203 	lsl.w	r2, r0, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80030d0:	e04c      	b.n	800316c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b0c      	cmp	r3, #12
 80030d8:	d824      	bhi.n	8003124 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	3b23      	subs	r3, #35	@ 0x23
 80030ec:	221f      	movs	r2, #31
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43da      	mvns	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	400a      	ands	r2, r1
 80030fa:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	b29b      	uxth	r3, r3
 8003108:	4618      	mov	r0, r3
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	3b23      	subs	r3, #35	@ 0x23
 8003116:	fa00 f203 	lsl.w	r2, r0, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	631a      	str	r2, [r3, #48]	@ 0x30
 8003122:	e023      	b.n	800316c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	3b41      	subs	r3, #65	@ 0x41
 8003136:	221f      	movs	r2, #31
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43da      	mvns	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	400a      	ands	r2, r1
 8003144:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	b29b      	uxth	r3, r3
 8003152:	4618      	mov	r0, r3
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	3b41      	subs	r3, #65	@ 0x41
 8003160:	fa00 f203 	lsl.w	r2, r0, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a30      	ldr	r2, [pc, #192]	@ (8003234 <HAL_ADC_ConfigChannel+0x29c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d10a      	bne.n	800318c <HAL_ADC_ConfigChannel+0x1f4>
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800317e:	d105      	bne.n	800318c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003180:	4b2d      	ldr	r3, [pc, #180]	@ (8003238 <HAL_ADC_ConfigChannel+0x2a0>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4a2c      	ldr	r2, [pc, #176]	@ (8003238 <HAL_ADC_ConfigChannel+0x2a0>)
 8003186:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800318a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a28      	ldr	r2, [pc, #160]	@ (8003234 <HAL_ADC_ConfigChannel+0x29c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d10f      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x21e>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b12      	cmp	r3, #18
 800319c:	d10b      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800319e:	4b26      	ldr	r3, [pc, #152]	@ (8003238 <HAL_ADC_ConfigChannel+0x2a0>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	4a25      	ldr	r2, [pc, #148]	@ (8003238 <HAL_ADC_ConfigChannel+0x2a0>)
 80031a4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80031a8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80031aa:	4b23      	ldr	r3, [pc, #140]	@ (8003238 <HAL_ADC_ConfigChannel+0x2a0>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	4a22      	ldr	r2, [pc, #136]	@ (8003238 <HAL_ADC_ConfigChannel+0x2a0>)
 80031b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80031b4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a1e      	ldr	r2, [pc, #120]	@ (8003234 <HAL_ADC_ConfigChannel+0x29c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d12b      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x280>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003230 <HAL_ADC_ConfigChannel+0x298>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d003      	beq.n	80031d2 <HAL_ADC_ConfigChannel+0x23a>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b11      	cmp	r3, #17
 80031d0:	d122      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80031d2:	4b19      	ldr	r3, [pc, #100]	@ (8003238 <HAL_ADC_ConfigChannel+0x2a0>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	4a18      	ldr	r2, [pc, #96]	@ (8003238 <HAL_ADC_ConfigChannel+0x2a0>)
 80031d8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80031dc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80031de:	4b16      	ldr	r3, [pc, #88]	@ (8003238 <HAL_ADC_ConfigChannel+0x2a0>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	4a15      	ldr	r2, [pc, #84]	@ (8003238 <HAL_ADC_ConfigChannel+0x2a0>)
 80031e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031e8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a10      	ldr	r2, [pc, #64]	@ (8003230 <HAL_ADC_ConfigChannel+0x298>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d111      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80031f4:	4b11      	ldr	r3, [pc, #68]	@ (800323c <HAL_ADC_ConfigChannel+0x2a4>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a11      	ldr	r2, [pc, #68]	@ (8003240 <HAL_ADC_ConfigChannel+0x2a8>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	0c9a      	lsrs	r2, r3, #18
 8003200:	4613      	mov	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800320a:	e002      	b.n	8003212 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	3b01      	subs	r3, #1
 8003210:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1f9      	bne.n	800320c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	10000012 	.word	0x10000012
 8003234:	40012000 	.word	0x40012000
 8003238:	40012300 	.word	0x40012300
 800323c:	20000000 	.word	0x20000000
 8003240:	431bde83 	.word	0x431bde83

08003244 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800324c:	4b78      	ldr	r3, [pc, #480]	@ (8003430 <ADC_Init+0x1ec>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	4a77      	ldr	r2, [pc, #476]	@ (8003430 <ADC_Init+0x1ec>)
 8003252:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003256:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003258:	4b75      	ldr	r3, [pc, #468]	@ (8003430 <ADC_Init+0x1ec>)
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	4973      	ldr	r1, [pc, #460]	@ (8003430 <ADC_Init+0x1ec>)
 8003262:	4313      	orrs	r3, r2
 8003264:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003274:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6859      	ldr	r1, [r3, #4]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	021a      	lsls	r2, r3, #8
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003298:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6859      	ldr	r1, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6899      	ldr	r1, [r3, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d2:	4a58      	ldr	r2, [pc, #352]	@ (8003434 <ADC_Init+0x1f0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d022      	beq.n	800331e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80032e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6899      	ldr	r1, [r3, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003308:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6899      	ldr	r1, [r3, #8]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	609a      	str	r2, [r3, #8]
 800331c:	e00f      	b.n	800333e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800332c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800333c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0202 	bic.w	r2, r2, #2
 800334c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6899      	ldr	r1, [r3, #8]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	005a      	lsls	r2, r3, #1
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d01b      	beq.n	80033a4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800337a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800338a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6859      	ldr	r1, [r3, #4]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003396:	3b01      	subs	r3, #1
 8003398:	035a      	lsls	r2, r3, #13
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	e007      	b.n	80033b4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80033c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	051a      	lsls	r2, r3, #20
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80033e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6899      	ldr	r1, [r3, #8]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80033f6:	025a      	lsls	r2, r3, #9
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800340e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6899      	ldr	r1, [r3, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	029a      	lsls	r2, r3, #10
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	609a      	str	r2, [r3, #8]
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	40012300 	.word	0x40012300
 8003434:	0f000001 	.word	0x0f000001

08003438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003448:	4b0b      	ldr	r3, [pc, #44]	@ (8003478 <__NVIC_SetPriorityGrouping+0x40>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003454:	4013      	ands	r3, r2
 8003456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003460:	4b06      	ldr	r3, [pc, #24]	@ (800347c <__NVIC_SetPriorityGrouping+0x44>)
 8003462:	4313      	orrs	r3, r2
 8003464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003466:	4a04      	ldr	r2, [pc, #16]	@ (8003478 <__NVIC_SetPriorityGrouping+0x40>)
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	60d3      	str	r3, [r2, #12]
}
 800346c:	bf00      	nop
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	e000ed00 	.word	0xe000ed00
 800347c:	05fa0000 	.word	0x05fa0000

08003480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003484:	4b04      	ldr	r3, [pc, #16]	@ (8003498 <__NVIC_GetPriorityGrouping+0x18>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	0a1b      	lsrs	r3, r3, #8
 800348a:	f003 0307 	and.w	r3, r3, #7
}
 800348e:	4618      	mov	r0, r3
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	e000ed00 	.word	0xe000ed00

0800349c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	4603      	mov	r3, r0
 80034a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	db0b      	blt.n	80034c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ae:	79fb      	ldrb	r3, [r7, #7]
 80034b0:	f003 021f 	and.w	r2, r3, #31
 80034b4:	4907      	ldr	r1, [pc, #28]	@ (80034d4 <__NVIC_EnableIRQ+0x38>)
 80034b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ba:	095b      	lsrs	r3, r3, #5
 80034bc:	2001      	movs	r0, #1
 80034be:	fa00 f202 	lsl.w	r2, r0, r2
 80034c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	e000e100 	.word	0xe000e100

080034d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	6039      	str	r1, [r7, #0]
 80034e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	db0a      	blt.n	8003502 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	490c      	ldr	r1, [pc, #48]	@ (8003524 <__NVIC_SetPriority+0x4c>)
 80034f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f6:	0112      	lsls	r2, r2, #4
 80034f8:	b2d2      	uxtb	r2, r2
 80034fa:	440b      	add	r3, r1
 80034fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003500:	e00a      	b.n	8003518 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	b2da      	uxtb	r2, r3
 8003506:	4908      	ldr	r1, [pc, #32]	@ (8003528 <__NVIC_SetPriority+0x50>)
 8003508:	79fb      	ldrb	r3, [r7, #7]
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	3b04      	subs	r3, #4
 8003510:	0112      	lsls	r2, r2, #4
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	440b      	add	r3, r1
 8003516:	761a      	strb	r2, [r3, #24]
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	e000e100 	.word	0xe000e100
 8003528:	e000ed00 	.word	0xe000ed00

0800352c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800352c:	b480      	push	{r7}
 800352e:	b089      	sub	sp, #36	@ 0x24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f1c3 0307 	rsb	r3, r3, #7
 8003546:	2b04      	cmp	r3, #4
 8003548:	bf28      	it	cs
 800354a:	2304      	movcs	r3, #4
 800354c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	3304      	adds	r3, #4
 8003552:	2b06      	cmp	r3, #6
 8003554:	d902      	bls.n	800355c <NVIC_EncodePriority+0x30>
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	3b03      	subs	r3, #3
 800355a:	e000      	b.n	800355e <NVIC_EncodePriority+0x32>
 800355c:	2300      	movs	r3, #0
 800355e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003560:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	43da      	mvns	r2, r3
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	401a      	ands	r2, r3
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003574:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	fa01 f303 	lsl.w	r3, r1, r3
 800357e:	43d9      	mvns	r1, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003584:	4313      	orrs	r3, r2
         );
}
 8003586:	4618      	mov	r0, r3
 8003588:	3724      	adds	r7, #36	@ 0x24
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
	...

08003594 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3b01      	subs	r3, #1
 80035a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035a4:	d301      	bcc.n	80035aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035a6:	2301      	movs	r3, #1
 80035a8:	e00f      	b.n	80035ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035aa:	4a0a      	ldr	r2, [pc, #40]	@ (80035d4 <SysTick_Config+0x40>)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035b2:	210f      	movs	r1, #15
 80035b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80035b8:	f7ff ff8e 	bl	80034d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035bc:	4b05      	ldr	r3, [pc, #20]	@ (80035d4 <SysTick_Config+0x40>)
 80035be:	2200      	movs	r2, #0
 80035c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035c2:	4b04      	ldr	r3, [pc, #16]	@ (80035d4 <SysTick_Config+0x40>)
 80035c4:	2207      	movs	r2, #7
 80035c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	e000e010 	.word	0xe000e010

080035d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7ff ff29 	bl	8003438 <__NVIC_SetPriorityGrouping>
}
 80035e6:	bf00      	nop
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b086      	sub	sp, #24
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	4603      	mov	r3, r0
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	607a      	str	r2, [r7, #4]
 80035fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035fc:	2300      	movs	r3, #0
 80035fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003600:	f7ff ff3e 	bl	8003480 <__NVIC_GetPriorityGrouping>
 8003604:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	68b9      	ldr	r1, [r7, #8]
 800360a:	6978      	ldr	r0, [r7, #20]
 800360c:	f7ff ff8e 	bl	800352c <NVIC_EncodePriority>
 8003610:	4602      	mov	r2, r0
 8003612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003616:	4611      	mov	r1, r2
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff ff5d 	bl	80034d8 <__NVIC_SetPriority>
}
 800361e:	bf00      	nop
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
 800362c:	4603      	mov	r3, r0
 800362e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff ff31 	bl	800349c <__NVIC_EnableIRQ>
}
 800363a:	bf00      	nop
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7ff ffa2 	bl	8003594 <SysTick_Config>
 8003650:	4603      	mov	r3, r0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003660:	f3bf 8f5f 	dmb	sy
}
 8003664:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003666:	4b07      	ldr	r3, [pc, #28]	@ (8003684 <HAL_MPU_Disable+0x28>)
 8003668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366a:	4a06      	ldr	r2, [pc, #24]	@ (8003684 <HAL_MPU_Disable+0x28>)
 800366c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003670:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003672:	4b05      	ldr	r3, [pc, #20]	@ (8003688 <HAL_MPU_Disable+0x2c>)
 8003674:	2200      	movs	r2, #0
 8003676:	605a      	str	r2, [r3, #4]
}
 8003678:	bf00      	nop
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	e000ed00 	.word	0xe000ed00
 8003688:	e000ed90 	.word	0xe000ed90

0800368c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003694:	4a0b      	ldr	r2, [pc, #44]	@ (80036c4 <HAL_MPU_Enable+0x38>)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800369e:	4b0a      	ldr	r3, [pc, #40]	@ (80036c8 <HAL_MPU_Enable+0x3c>)
 80036a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a2:	4a09      	ldr	r2, [pc, #36]	@ (80036c8 <HAL_MPU_Enable+0x3c>)
 80036a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036a8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80036aa:	f3bf 8f4f 	dsb	sy
}
 80036ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80036b0:	f3bf 8f6f 	isb	sy
}
 80036b4:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	e000ed90 	.word	0xe000ed90
 80036c8:	e000ed00 	.word	0xe000ed00

080036cc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	785a      	ldrb	r2, [r3, #1]
 80036d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003748 <HAL_MPU_ConfigRegion+0x7c>)
 80036da:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80036dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003748 <HAL_MPU_ConfigRegion+0x7c>)
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	4a19      	ldr	r2, [pc, #100]	@ (8003748 <HAL_MPU_ConfigRegion+0x7c>)
 80036e2:	f023 0301 	bic.w	r3, r3, #1
 80036e6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80036e8:	4a17      	ldr	r2, [pc, #92]	@ (8003748 <HAL_MPU_ConfigRegion+0x7c>)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	7b1b      	ldrb	r3, [r3, #12]
 80036f4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	7adb      	ldrb	r3, [r3, #11]
 80036fa:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80036fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	7a9b      	ldrb	r3, [r3, #10]
 8003702:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003704:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	7b5b      	ldrb	r3, [r3, #13]
 800370a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800370c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	7b9b      	ldrb	r3, [r3, #14]
 8003712:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003714:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	7bdb      	ldrb	r3, [r3, #15]
 800371a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800371c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	7a5b      	ldrb	r3, [r3, #9]
 8003722:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003724:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	7a1b      	ldrb	r3, [r3, #8]
 800372a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800372c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	7812      	ldrb	r2, [r2, #0]
 8003732:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003734:	4a04      	ldr	r2, [pc, #16]	@ (8003748 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003736:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003738:	6113      	str	r3, [r2, #16]
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	e000ed90 	.word	0xe000ed90

0800374c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003758:	f7ff fbaa 	bl	8002eb0 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e099      	b.n	800389c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0201 	bic.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003788:	e00f      	b.n	80037aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800378a:	f7ff fb91 	bl	8002eb0 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b05      	cmp	r3, #5
 8003796:	d908      	bls.n	80037aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2220      	movs	r2, #32
 800379c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2203      	movs	r2, #3
 80037a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e078      	b.n	800389c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1e8      	bne.n	800378a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	4b38      	ldr	r3, [pc, #224]	@ (80038a4 <HAL_DMA_Init+0x158>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003800:	2b04      	cmp	r3, #4
 8003802:	d107      	bne.n	8003814 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380c:	4313      	orrs	r3, r2
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	4313      	orrs	r3, r2
 8003812:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f023 0307 	bic.w	r3, r3, #7
 800382a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	4313      	orrs	r3, r2
 8003834:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383a:	2b04      	cmp	r3, #4
 800383c:	d117      	bne.n	800386e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	4313      	orrs	r3, r2
 8003846:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00e      	beq.n	800386e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 fa77 	bl	8003d44 <DMA_CheckFifoParam>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d008      	beq.n	800386e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2240      	movs	r2, #64	@ 0x40
 8003860:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800386a:	2301      	movs	r3, #1
 800386c:	e016      	b.n	800389c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fa2e 	bl	8003cd8 <DMA_CalcBaseAndBitshift>
 800387c:	4603      	mov	r3, r0
 800387e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003884:	223f      	movs	r2, #63	@ 0x3f
 8003886:	409a      	lsls	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3718      	adds	r7, #24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	e010803f 	.word	0xe010803f

080038a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
 80038b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038b6:	2300      	movs	r3, #0
 80038b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d101      	bne.n	80038ce <HAL_DMA_Start_IT+0x26>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e048      	b.n	8003960 <HAL_DMA_Start_IT+0xb8>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d137      	bne.n	8003952 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2202      	movs	r2, #2
 80038e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	68b9      	ldr	r1, [r7, #8]
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 f9c0 	bl	8003c7c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003900:	223f      	movs	r2, #63	@ 0x3f
 8003902:	409a      	lsls	r2, r3
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0216 	orr.w	r2, r2, #22
 8003916:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695a      	ldr	r2, [r3, #20]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003926:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392c:	2b00      	cmp	r3, #0
 800392e:	d007      	beq.n	8003940 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0208 	orr.w	r2, r2, #8
 800393e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f042 0201 	orr.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	e005      	b.n	800395e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800395a:	2302      	movs	r3, #2
 800395c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800395e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003970:	2300      	movs	r3, #0
 8003972:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003974:	4b8e      	ldr	r3, [pc, #568]	@ (8003bb0 <HAL_DMA_IRQHandler+0x248>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a8e      	ldr	r2, [pc, #568]	@ (8003bb4 <HAL_DMA_IRQHandler+0x24c>)
 800397a:	fba2 2303 	umull	r2, r3, r2, r3
 800397e:	0a9b      	lsrs	r3, r3, #10
 8003980:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003986:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003992:	2208      	movs	r2, #8
 8003994:	409a      	lsls	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4013      	ands	r3, r2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d01a      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d013      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0204 	bic.w	r2, r2, #4
 80039ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c0:	2208      	movs	r2, #8
 80039c2:	409a      	lsls	r2, r3
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039cc:	f043 0201 	orr.w	r2, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d8:	2201      	movs	r2, #1
 80039da:	409a      	lsls	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4013      	ands	r3, r2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d012      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00b      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f6:	2201      	movs	r2, #1
 80039f8:	409a      	lsls	r2, r3
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a02:	f043 0202 	orr.w	r2, r3, #2
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a0e:	2204      	movs	r2, #4
 8003a10:	409a      	lsls	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4013      	ands	r3, r2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d012      	beq.n	8003a40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00b      	beq.n	8003a40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a2c:	2204      	movs	r2, #4
 8003a2e:	409a      	lsls	r2, r3
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a38:	f043 0204 	orr.w	r2, r3, #4
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a44:	2210      	movs	r2, #16
 8003a46:	409a      	lsls	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d043      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d03c      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a62:	2210      	movs	r2, #16
 8003a64:	409a      	lsls	r2, r3
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d018      	beq.n	8003aaa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d108      	bne.n	8003a98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d024      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	4798      	blx	r3
 8003a96:	e01f      	b.n	8003ad8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d01b      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	4798      	blx	r3
 8003aa8:	e016      	b.n	8003ad8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d107      	bne.n	8003ac8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0208 	bic.w	r2, r2, #8
 8003ac6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003adc:	2220      	movs	r2, #32
 8003ade:	409a      	lsls	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 808f 	beq.w	8003c08 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0310 	and.w	r3, r3, #16
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 8087 	beq.w	8003c08 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afe:	2220      	movs	r2, #32
 8003b00:	409a      	lsls	r2, r3
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b05      	cmp	r3, #5
 8003b10:	d136      	bne.n	8003b80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0216 	bic.w	r2, r2, #22
 8003b20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695a      	ldr	r2, [r3, #20]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d103      	bne.n	8003b42 <HAL_DMA_IRQHandler+0x1da>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d007      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0208 	bic.w	r2, r2, #8
 8003b50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b56:	223f      	movs	r2, #63	@ 0x3f
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d07e      	beq.n	8003c74 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	4798      	blx	r3
        }
        return;
 8003b7e:	e079      	b.n	8003c74 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d01d      	beq.n	8003bca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10d      	bne.n	8003bb8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d031      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	4798      	blx	r3
 8003bac:	e02c      	b.n	8003c08 <HAL_DMA_IRQHandler+0x2a0>
 8003bae:	bf00      	nop
 8003bb0:	20000000 	.word	0x20000000
 8003bb4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d023      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	4798      	blx	r3
 8003bc8:	e01e      	b.n	8003c08 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10f      	bne.n	8003bf8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0210 	bic.w	r2, r2, #16
 8003be6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d032      	beq.n	8003c76 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d022      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2205      	movs	r2, #5
 8003c20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0201 	bic.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	3301      	adds	r3, #1
 8003c38:	60bb      	str	r3, [r7, #8]
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d307      	bcc.n	8003c50 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f2      	bne.n	8003c34 <HAL_DMA_IRQHandler+0x2cc>
 8003c4e:	e000      	b.n	8003c52 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c50:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d005      	beq.n	8003c76 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	4798      	blx	r3
 8003c72:	e000      	b.n	8003c76 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c74:	bf00      	nop
    }
  }
}
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003c98:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	2b40      	cmp	r3, #64	@ 0x40
 8003ca8:	d108      	bne.n	8003cbc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003cba:	e007      	b.n	8003ccc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	60da      	str	r2, [r3, #12]
}
 8003ccc:	bf00      	nop
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	3b10      	subs	r3, #16
 8003ce8:	4a13      	ldr	r2, [pc, #76]	@ (8003d38 <DMA_CalcBaseAndBitshift+0x60>)
 8003cea:	fba2 2303 	umull	r2, r3, r2, r3
 8003cee:	091b      	lsrs	r3, r3, #4
 8003cf0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cf2:	4a12      	ldr	r2, [pc, #72]	@ (8003d3c <DMA_CalcBaseAndBitshift+0x64>)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b03      	cmp	r3, #3
 8003d04:	d908      	bls.n	8003d18 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d40 <DMA_CalcBaseAndBitshift+0x68>)
 8003d0e:	4013      	ands	r3, r2
 8003d10:	1d1a      	adds	r2, r3, #4
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d16:	e006      	b.n	8003d26 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	4b08      	ldr	r3, [pc, #32]	@ (8003d40 <DMA_CalcBaseAndBitshift+0x68>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	aaaaaaab 	.word	0xaaaaaaab
 8003d3c:	0801203c 	.word	0x0801203c
 8003d40:	fffffc00 	.word	0xfffffc00

08003d44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d11f      	bne.n	8003d9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	2b03      	cmp	r3, #3
 8003d62:	d856      	bhi.n	8003e12 <DMA_CheckFifoParam+0xce>
 8003d64:	a201      	add	r2, pc, #4	@ (adr r2, 8003d6c <DMA_CheckFifoParam+0x28>)
 8003d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6a:	bf00      	nop
 8003d6c:	08003d7d 	.word	0x08003d7d
 8003d70:	08003d8f 	.word	0x08003d8f
 8003d74:	08003d7d 	.word	0x08003d7d
 8003d78:	08003e13 	.word	0x08003e13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d046      	beq.n	8003e16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d8c:	e043      	b.n	8003e16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d92:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d96:	d140      	bne.n	8003e1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d9c:	e03d      	b.n	8003e1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003da6:	d121      	bne.n	8003dec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d837      	bhi.n	8003e1e <DMA_CheckFifoParam+0xda>
 8003dae:	a201      	add	r2, pc, #4	@ (adr r2, 8003db4 <DMA_CheckFifoParam+0x70>)
 8003db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db4:	08003dc5 	.word	0x08003dc5
 8003db8:	08003dcb 	.word	0x08003dcb
 8003dbc:	08003dc5 	.word	0x08003dc5
 8003dc0:	08003ddd 	.word	0x08003ddd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003dc8:	e030      	b.n	8003e2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d025      	beq.n	8003e22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dda:	e022      	b.n	8003e22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003de4:	d11f      	bne.n	8003e26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003dea:	e01c      	b.n	8003e26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d903      	bls.n	8003dfa <DMA_CheckFifoParam+0xb6>
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	2b03      	cmp	r3, #3
 8003df6:	d003      	beq.n	8003e00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003df8:	e018      	b.n	8003e2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	73fb      	strb	r3, [r7, #15]
      break;
 8003dfe:	e015      	b.n	8003e2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00e      	beq.n	8003e2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e10:	e00b      	b.n	8003e2a <DMA_CheckFifoParam+0xe6>
      break;
 8003e12:	bf00      	nop
 8003e14:	e00a      	b.n	8003e2c <DMA_CheckFifoParam+0xe8>
      break;
 8003e16:	bf00      	nop
 8003e18:	e008      	b.n	8003e2c <DMA_CheckFifoParam+0xe8>
      break;
 8003e1a:	bf00      	nop
 8003e1c:	e006      	b.n	8003e2c <DMA_CheckFifoParam+0xe8>
      break;
 8003e1e:	bf00      	nop
 8003e20:	e004      	b.n	8003e2c <DMA_CheckFifoParam+0xe8>
      break;
 8003e22:	bf00      	nop
 8003e24:	e002      	b.n	8003e2c <DMA_CheckFifoParam+0xe8>
      break;   
 8003e26:	bf00      	nop
 8003e28:	e000      	b.n	8003e2c <DMA_CheckFifoParam+0xe8>
      break;
 8003e2a:	bf00      	nop
    }
  } 
  
  return status; 
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop

08003e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b089      	sub	sp, #36	@ 0x24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003e46:	2300      	movs	r3, #0
 8003e48:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003e52:	2300      	movs	r3, #0
 8003e54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003e56:	2300      	movs	r3, #0
 8003e58:	61fb      	str	r3, [r7, #28]
 8003e5a:	e169      	b.n	8004130 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	f040 8158 	bne.w	800412a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d005      	beq.n	8003e92 <HAL_GPIO_Init+0x56>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d130      	bne.n	8003ef4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	2203      	movs	r2, #3
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	68da      	ldr	r2, [r3, #12]
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ec8:	2201      	movs	r2, #1
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	091b      	lsrs	r3, r3, #4
 8003ede:	f003 0201 	and.w	r2, r3, #1
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 0303 	and.w	r3, r3, #3
 8003efc:	2b03      	cmp	r3, #3
 8003efe:	d017      	beq.n	8003f30 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	2203      	movs	r2, #3
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	43db      	mvns	r3, r3
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	4013      	ands	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f003 0303 	and.w	r3, r3, #3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d123      	bne.n	8003f84 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	08da      	lsrs	r2, r3, #3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3208      	adds	r2, #8
 8003f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	220f      	movs	r2, #15
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	08da      	lsrs	r2, r3, #3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3208      	adds	r2, #8
 8003f7e:	69b9      	ldr	r1, [r7, #24]
 8003f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	2203      	movs	r2, #3
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	43db      	mvns	r3, r3
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f003 0203 	and.w	r2, r3, #3
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 80b2 	beq.w	800412a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fc6:	4b60      	ldr	r3, [pc, #384]	@ (8004148 <HAL_GPIO_Init+0x30c>)
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fca:	4a5f      	ldr	r2, [pc, #380]	@ (8004148 <HAL_GPIO_Init+0x30c>)
 8003fcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fd2:	4b5d      	ldr	r3, [pc, #372]	@ (8004148 <HAL_GPIO_Init+0x30c>)
 8003fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003fde:	4a5b      	ldr	r2, [pc, #364]	@ (800414c <HAL_GPIO_Init+0x310>)
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	089b      	lsrs	r3, r3, #2
 8003fe4:	3302      	adds	r3, #2
 8003fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	220f      	movs	r2, #15
 8003ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffa:	43db      	mvns	r3, r3
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4013      	ands	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a52      	ldr	r2, [pc, #328]	@ (8004150 <HAL_GPIO_Init+0x314>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d02b      	beq.n	8004062 <HAL_GPIO_Init+0x226>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a51      	ldr	r2, [pc, #324]	@ (8004154 <HAL_GPIO_Init+0x318>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d025      	beq.n	800405e <HAL_GPIO_Init+0x222>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a50      	ldr	r2, [pc, #320]	@ (8004158 <HAL_GPIO_Init+0x31c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d01f      	beq.n	800405a <HAL_GPIO_Init+0x21e>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a4f      	ldr	r2, [pc, #316]	@ (800415c <HAL_GPIO_Init+0x320>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d019      	beq.n	8004056 <HAL_GPIO_Init+0x21a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a4e      	ldr	r2, [pc, #312]	@ (8004160 <HAL_GPIO_Init+0x324>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d013      	beq.n	8004052 <HAL_GPIO_Init+0x216>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a4d      	ldr	r2, [pc, #308]	@ (8004164 <HAL_GPIO_Init+0x328>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d00d      	beq.n	800404e <HAL_GPIO_Init+0x212>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a4c      	ldr	r2, [pc, #304]	@ (8004168 <HAL_GPIO_Init+0x32c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d007      	beq.n	800404a <HAL_GPIO_Init+0x20e>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a4b      	ldr	r2, [pc, #300]	@ (800416c <HAL_GPIO_Init+0x330>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d101      	bne.n	8004046 <HAL_GPIO_Init+0x20a>
 8004042:	2307      	movs	r3, #7
 8004044:	e00e      	b.n	8004064 <HAL_GPIO_Init+0x228>
 8004046:	2308      	movs	r3, #8
 8004048:	e00c      	b.n	8004064 <HAL_GPIO_Init+0x228>
 800404a:	2306      	movs	r3, #6
 800404c:	e00a      	b.n	8004064 <HAL_GPIO_Init+0x228>
 800404e:	2305      	movs	r3, #5
 8004050:	e008      	b.n	8004064 <HAL_GPIO_Init+0x228>
 8004052:	2304      	movs	r3, #4
 8004054:	e006      	b.n	8004064 <HAL_GPIO_Init+0x228>
 8004056:	2303      	movs	r3, #3
 8004058:	e004      	b.n	8004064 <HAL_GPIO_Init+0x228>
 800405a:	2302      	movs	r3, #2
 800405c:	e002      	b.n	8004064 <HAL_GPIO_Init+0x228>
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <HAL_GPIO_Init+0x228>
 8004062:	2300      	movs	r3, #0
 8004064:	69fa      	ldr	r2, [r7, #28]
 8004066:	f002 0203 	and.w	r2, r2, #3
 800406a:	0092      	lsls	r2, r2, #2
 800406c:	4093      	lsls	r3, r2
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	4313      	orrs	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004074:	4935      	ldr	r1, [pc, #212]	@ (800414c <HAL_GPIO_Init+0x310>)
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	089b      	lsrs	r3, r3, #2
 800407a:	3302      	adds	r3, #2
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004082:	4b3b      	ldr	r3, [pc, #236]	@ (8004170 <HAL_GPIO_Init+0x334>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	43db      	mvns	r3, r3
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	4013      	ands	r3, r2
 8004090:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040a6:	4a32      	ldr	r2, [pc, #200]	@ (8004170 <HAL_GPIO_Init+0x334>)
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040ac:	4b30      	ldr	r3, [pc, #192]	@ (8004170 <HAL_GPIO_Init+0x334>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	43db      	mvns	r3, r3
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	4013      	ands	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040d0:	4a27      	ldr	r2, [pc, #156]	@ (8004170 <HAL_GPIO_Init+0x334>)
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040d6:	4b26      	ldr	r3, [pc, #152]	@ (8004170 <HAL_GPIO_Init+0x334>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	43db      	mvns	r3, r3
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	4013      	ands	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004170 <HAL_GPIO_Init+0x334>)
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004100:	4b1b      	ldr	r3, [pc, #108]	@ (8004170 <HAL_GPIO_Init+0x334>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	43db      	mvns	r3, r3
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	4013      	ands	r3, r2
 800410e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004124:	4a12      	ldr	r2, [pc, #72]	@ (8004170 <HAL_GPIO_Init+0x334>)
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	3301      	adds	r3, #1
 800412e:	61fb      	str	r3, [r7, #28]
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	2b0f      	cmp	r3, #15
 8004134:	f67f ae92 	bls.w	8003e5c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004138:	bf00      	nop
 800413a:	bf00      	nop
 800413c:	3724      	adds	r7, #36	@ 0x24
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	40023800 	.word	0x40023800
 800414c:	40013800 	.word	0x40013800
 8004150:	40020000 	.word	0x40020000
 8004154:	40020400 	.word	0x40020400
 8004158:	40020800 	.word	0x40020800
 800415c:	40020c00 	.word	0x40020c00
 8004160:	40021000 	.word	0x40021000
 8004164:	40021400 	.word	0x40021400
 8004168:	40021800 	.word	0x40021800
 800416c:	40021c00 	.word	0x40021c00
 8004170:	40013c00 	.word	0x40013c00

08004174 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	460b      	mov	r3, r1
 800417e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691a      	ldr	r2, [r3, #16]
 8004184:	887b      	ldrh	r3, [r7, #2]
 8004186:	4013      	ands	r3, r2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800418c:	2301      	movs	r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]
 8004190:	e001      	b.n	8004196 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004192:	2300      	movs	r3, #0
 8004194:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004196:	7bfb      	ldrb	r3, [r7, #15]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	460b      	mov	r3, r1
 80041ae:	807b      	strh	r3, [r7, #2]
 80041b0:	4613      	mov	r3, r2
 80041b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041b4:	787b      	ldrb	r3, [r7, #1]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041ba:	887a      	ldrh	r2, [r7, #2]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80041c0:	e003      	b.n	80041ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80041c2:	887b      	ldrh	r3, [r7, #2]
 80041c4:	041a      	lsls	r2, r3, #16
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	619a      	str	r2, [r3, #24]
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
	...

080041d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e08b      	b.n	8004302 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d106      	bne.n	8004204 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7fd ff9e 	bl	8002140 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2224      	movs	r2, #36	@ 0x24
 8004208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0201 	bic.w	r2, r2, #1
 800421a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004228:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004238:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d107      	bne.n	8004252 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800424e:	609a      	str	r2, [r3, #8]
 8004250:	e006      	b.n	8004260 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689a      	ldr	r2, [r3, #8]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800425e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	2b02      	cmp	r3, #2
 8004266:	d108      	bne.n	800427a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004276:	605a      	str	r2, [r3, #4]
 8004278:	e007      	b.n	800428a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004288:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6859      	ldr	r1, [r3, #4]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	4b1d      	ldr	r3, [pc, #116]	@ (800430c <HAL_I2C_Init+0x134>)
 8004296:	430b      	orrs	r3, r1
 8004298:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691a      	ldr	r2, [r3, #16]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	69d9      	ldr	r1, [r3, #28]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a1a      	ldr	r2, [r3, #32]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0201 	orr.w	r2, r2, #1
 80042e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2220      	movs	r2, #32
 80042ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	02008000 	.word	0x02008000

08004310 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b20      	cmp	r3, #32
 8004324:	d138      	bne.n	8004398 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004330:	2302      	movs	r3, #2
 8004332:	e032      	b.n	800439a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2224      	movs	r2, #36	@ 0x24
 8004340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0201 	bic.w	r2, r2, #1
 8004352:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004362:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6819      	ldr	r1, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0201 	orr.w	r2, r2, #1
 8004382:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2220      	movs	r2, #32
 8004388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004394:	2300      	movs	r3, #0
 8004396:	e000      	b.n	800439a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004398:	2302      	movs	r3, #2
  }
}
 800439a:	4618      	mov	r0, r3
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b085      	sub	sp, #20
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
 80043ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b20      	cmp	r3, #32
 80043ba:	d139      	bne.n	8004430 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d101      	bne.n	80043ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80043c6:	2302      	movs	r3, #2
 80043c8:	e033      	b.n	8004432 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2224      	movs	r2, #36	@ 0x24
 80043d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0201 	bic.w	r2, r2, #1
 80043e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80043f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	021b      	lsls	r3, r3, #8
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4313      	orrs	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0201 	orr.w	r2, r2, #1
 800441a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2220      	movs	r2, #32
 8004420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800442c:	2300      	movs	r3, #0
 800442e:	e000      	b.n	8004432 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004430:	2302      	movs	r3, #2
  }
}
 8004432:	4618      	mov	r0, r3
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr

0800443e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b086      	sub	sp, #24
 8004442:	af02      	add	r7, sp, #8
 8004444:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e108      	b.n	8004662 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d106      	bne.n	8004470 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f00a fbc0 	bl	800ebf0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2203      	movs	r2, #3
 8004474:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800447e:	d102      	bne.n	8004486 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4618      	mov	r0, r3
 800448c:	f006 fd61 	bl	800af52 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6818      	ldr	r0, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	7c1a      	ldrb	r2, [r3, #16]
 8004498:	f88d 2000 	strb.w	r2, [sp]
 800449c:	3304      	adds	r3, #4
 800449e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044a0:	f006 fc18 	bl	800acd4 <USB_CoreInit>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d005      	beq.n	80044b6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2202      	movs	r2, #2
 80044ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e0d5      	b.n	8004662 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2100      	movs	r1, #0
 80044bc:	4618      	mov	r0, r3
 80044be:	f006 fd59 	bl	800af74 <USB_SetCurrentMode>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d005      	beq.n	80044d4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e0c6      	b.n	8004662 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044d4:	2300      	movs	r3, #0
 80044d6:	73fb      	strb	r3, [r7, #15]
 80044d8:	e04a      	b.n	8004570 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80044da:	7bfa      	ldrb	r2, [r7, #15]
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	4613      	mov	r3, r2
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	4413      	add	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	440b      	add	r3, r1
 80044e8:	3315      	adds	r3, #21
 80044ea:	2201      	movs	r2, #1
 80044ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80044ee:	7bfa      	ldrb	r2, [r7, #15]
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	4613      	mov	r3, r2
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	4413      	add	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	440b      	add	r3, r1
 80044fc:	3314      	adds	r3, #20
 80044fe:	7bfa      	ldrb	r2, [r7, #15]
 8004500:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004502:	7bfa      	ldrb	r2, [r7, #15]
 8004504:	7bfb      	ldrb	r3, [r7, #15]
 8004506:	b298      	uxth	r0, r3
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	4613      	mov	r3, r2
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	4413      	add	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	440b      	add	r3, r1
 8004514:	332e      	adds	r3, #46	@ 0x2e
 8004516:	4602      	mov	r2, r0
 8004518:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800451a:	7bfa      	ldrb	r2, [r7, #15]
 800451c:	6879      	ldr	r1, [r7, #4]
 800451e:	4613      	mov	r3, r2
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	4413      	add	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	440b      	add	r3, r1
 8004528:	3318      	adds	r3, #24
 800452a:	2200      	movs	r2, #0
 800452c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800452e:	7bfa      	ldrb	r2, [r7, #15]
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	4613      	mov	r3, r2
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	440b      	add	r3, r1
 800453c:	331c      	adds	r3, #28
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004542:	7bfa      	ldrb	r2, [r7, #15]
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	4613      	mov	r3, r2
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	4413      	add	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	440b      	add	r3, r1
 8004550:	3320      	adds	r3, #32
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004556:	7bfa      	ldrb	r2, [r7, #15]
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	4613      	mov	r3, r2
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	4413      	add	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	440b      	add	r3, r1
 8004564:	3324      	adds	r3, #36	@ 0x24
 8004566:	2200      	movs	r2, #0
 8004568:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800456a:	7bfb      	ldrb	r3, [r7, #15]
 800456c:	3301      	adds	r3, #1
 800456e:	73fb      	strb	r3, [r7, #15]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	791b      	ldrb	r3, [r3, #4]
 8004574:	7bfa      	ldrb	r2, [r7, #15]
 8004576:	429a      	cmp	r2, r3
 8004578:	d3af      	bcc.n	80044da <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800457a:	2300      	movs	r3, #0
 800457c:	73fb      	strb	r3, [r7, #15]
 800457e:	e044      	b.n	800460a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004580:	7bfa      	ldrb	r2, [r7, #15]
 8004582:	6879      	ldr	r1, [r7, #4]
 8004584:	4613      	mov	r3, r2
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	4413      	add	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004592:	2200      	movs	r2, #0
 8004594:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004596:	7bfa      	ldrb	r2, [r7, #15]
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	4413      	add	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	440b      	add	r3, r1
 80045a4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80045a8:	7bfa      	ldrb	r2, [r7, #15]
 80045aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80045ac:	7bfa      	ldrb	r2, [r7, #15]
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	4613      	mov	r3, r2
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	4413      	add	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	440b      	add	r3, r1
 80045ba:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80045be:	2200      	movs	r2, #0
 80045c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80045c2:	7bfa      	ldrb	r2, [r7, #15]
 80045c4:	6879      	ldr	r1, [r7, #4]
 80045c6:	4613      	mov	r3, r2
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	4413      	add	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	440b      	add	r3, r1
 80045d0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80045d8:	7bfa      	ldrb	r2, [r7, #15]
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	4613      	mov	r3, r2
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	4413      	add	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	440b      	add	r3, r1
 80045e6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80045ea:	2200      	movs	r2, #0
 80045ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80045ee:	7bfa      	ldrb	r2, [r7, #15]
 80045f0:	6879      	ldr	r1, [r7, #4]
 80045f2:	4613      	mov	r3, r2
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	4413      	add	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	440b      	add	r3, r1
 80045fc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004604:	7bfb      	ldrb	r3, [r7, #15]
 8004606:	3301      	adds	r3, #1
 8004608:	73fb      	strb	r3, [r7, #15]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	791b      	ldrb	r3, [r3, #4]
 800460e:	7bfa      	ldrb	r2, [r7, #15]
 8004610:	429a      	cmp	r2, r3
 8004612:	d3b5      	bcc.n	8004580 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6818      	ldr	r0, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	7c1a      	ldrb	r2, [r3, #16]
 800461c:	f88d 2000 	strb.w	r2, [sp]
 8004620:	3304      	adds	r3, #4
 8004622:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004624:	f006 fcf2 	bl	800b00c <USB_DevInit>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d005      	beq.n	800463a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2202      	movs	r2, #2
 8004632:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e013      	b.n	8004662 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	7b1b      	ldrb	r3, [r3, #12]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d102      	bne.n	8004656 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f001 f959 	bl	8005908 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4618      	mov	r0, r3
 800465c:	f007 fd43 	bl	800c0e6 <USB_DevDisconnect>

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b082      	sub	sp, #8
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004678:	2b01      	cmp	r3, #1
 800467a:	d101      	bne.n	8004680 <HAL_PCD_Start+0x16>
 800467c:	2302      	movs	r3, #2
 800467e:	e012      	b.n	80046a6 <HAL_PCD_Start+0x3c>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4618      	mov	r0, r3
 800468e:	f006 fc4f 	bl	800af30 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	f007 fd04 	bl	800c0a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80046ae:	b590      	push	{r4, r7, lr}
 80046b0:	b08d      	sub	sp, #52	@ 0x34
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f007 fdc2 	bl	800c24e <USB_GetMode>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f040 84b9 	bne.w	8005044 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f007 fd26 	bl	800c128 <USB_ReadInterrupts>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 84af 	beq.w	8005042 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	0a1b      	lsrs	r3, r3, #8
 80046ee:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f007 fd13 	bl	800c128 <USB_ReadInterrupts>
 8004702:	4603      	mov	r3, r0
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b02      	cmp	r3, #2
 800470a:	d107      	bne.n	800471c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695a      	ldr	r2, [r3, #20]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f002 0202 	and.w	r2, r2, #2
 800471a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f007 fd01 	bl	800c128 <USB_ReadInterrupts>
 8004726:	4603      	mov	r3, r0
 8004728:	f003 0310 	and.w	r3, r3, #16
 800472c:	2b10      	cmp	r3, #16
 800472e:	d161      	bne.n	80047f4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	699a      	ldr	r2, [r3, #24]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0210 	bic.w	r2, r2, #16
 800473e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	f003 020f 	and.w	r2, r3, #15
 800474c:	4613      	mov	r3, r2
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	4413      	add	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	4413      	add	r3, r2
 800475c:	3304      	adds	r3, #4
 800475e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004766:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800476a:	d124      	bne.n	80047b6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004772:	4013      	ands	r3, r2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d035      	beq.n	80047e4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	091b      	lsrs	r3, r3, #4
 8004780:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004782:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004786:	b29b      	uxth	r3, r3
 8004788:	461a      	mov	r2, r3
 800478a:	6a38      	ldr	r0, [r7, #32]
 800478c:	f007 fb38 	bl	800be00 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	68da      	ldr	r2, [r3, #12]
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	091b      	lsrs	r3, r3, #4
 8004798:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800479c:	441a      	add	r2, r3
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	695a      	ldr	r2, [r3, #20]
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	091b      	lsrs	r3, r3, #4
 80047aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047ae:	441a      	add	r2, r3
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	615a      	str	r2, [r3, #20]
 80047b4:	e016      	b.n	80047e4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80047bc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047c0:	d110      	bne.n	80047e4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80047c8:	2208      	movs	r2, #8
 80047ca:	4619      	mov	r1, r3
 80047cc:	6a38      	ldr	r0, [r7, #32]
 80047ce:	f007 fb17 	bl	800be00 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	695a      	ldr	r2, [r3, #20]
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	091b      	lsrs	r3, r3, #4
 80047da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047de:	441a      	add	r2, r3
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699a      	ldr	r2, [r3, #24]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0210 	orr.w	r2, r2, #16
 80047f2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f007 fc95 	bl	800c128 <USB_ReadInterrupts>
 80047fe:	4603      	mov	r3, r0
 8004800:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004804:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004808:	f040 80a7 	bne.w	800495a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4618      	mov	r0, r3
 8004816:	f007 fc9a 	bl	800c14e <USB_ReadDevAllOutEpInterrupt>
 800481a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800481c:	e099      	b.n	8004952 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800481e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 808e 	beq.w	8004946 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004830:	b2d2      	uxtb	r2, r2
 8004832:	4611      	mov	r1, r2
 8004834:	4618      	mov	r0, r3
 8004836:	f007 fcbe 	bl	800c1b6 <USB_ReadDevOutEPInterrupt>
 800483a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00c      	beq.n	8004860 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004848:	015a      	lsls	r2, r3, #5
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	4413      	add	r3, r2
 800484e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004852:	461a      	mov	r2, r3
 8004854:	2301      	movs	r3, #1
 8004856:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004858:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 fece 	bl	80055fc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00c      	beq.n	8004884 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800486a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	4413      	add	r3, r2
 8004872:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004876:	461a      	mov	r2, r3
 8004878:	2308      	movs	r3, #8
 800487a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800487c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 ffa4 	bl	80057cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	f003 0310 	and.w	r3, r3, #16
 800488a:	2b00      	cmp	r3, #0
 800488c:	d008      	beq.n	80048a0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800488e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	4413      	add	r3, r2
 8004896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800489a:	461a      	mov	r2, r3
 800489c:	2310      	movs	r3, #16
 800489e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d030      	beq.n	800490c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048b2:	2b80      	cmp	r3, #128	@ 0x80
 80048b4:	d109      	bne.n	80048ca <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	69fa      	ldr	r2, [r7, #28]
 80048c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80048c8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80048ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048cc:	4613      	mov	r3, r2
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	4413      	add	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	4413      	add	r3, r2
 80048dc:	3304      	adds	r3, #4
 80048de:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	78db      	ldrb	r3, [r3, #3]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d108      	bne.n	80048fa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	2200      	movs	r2, #0
 80048ec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80048ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	4619      	mov	r1, r3
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f00a fa9f 	bl	800ee38 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80048fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	4413      	add	r3, r2
 8004902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004906:	461a      	mov	r2, r3
 8004908:	2302      	movs	r3, #2
 800490a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	f003 0320 	and.w	r3, r3, #32
 8004912:	2b00      	cmp	r3, #0
 8004914:	d008      	beq.n	8004928 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004918:	015a      	lsls	r2, r3, #5
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	4413      	add	r3, r2
 800491e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004922:	461a      	mov	r2, r3
 8004924:	2320      	movs	r3, #32
 8004926:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d009      	beq.n	8004946 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004934:	015a      	lsls	r2, r3, #5
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	4413      	add	r3, r2
 800493a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800493e:	461a      	mov	r2, r3
 8004940:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004944:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004948:	3301      	adds	r3, #1
 800494a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800494c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800494e:	085b      	lsrs	r3, r3, #1
 8004950:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004954:	2b00      	cmp	r3, #0
 8004956:	f47f af62 	bne.w	800481e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f007 fbe2 	bl	800c128 <USB_ReadInterrupts>
 8004964:	4603      	mov	r3, r0
 8004966:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800496a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800496e:	f040 80db 	bne.w	8004b28 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4618      	mov	r0, r3
 8004978:	f007 fc03 	bl	800c182 <USB_ReadDevAllInEpInterrupt>
 800497c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800497e:	2300      	movs	r3, #0
 8004980:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004982:	e0cd      	b.n	8004b20 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 80c2 	beq.w	8004b14 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	4611      	mov	r1, r2
 800499a:	4618      	mov	r0, r3
 800499c:	f007 fc29 	bl	800c1f2 <USB_ReadDevInEPInterrupt>
 80049a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d057      	beq.n	8004a5c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80049ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	2201      	movs	r2, #1
 80049b4:	fa02 f303 	lsl.w	r3, r2, r3
 80049b8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	43db      	mvns	r3, r3
 80049c6:	69f9      	ldr	r1, [r7, #28]
 80049c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049cc:	4013      	ands	r3, r2
 80049ce:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80049d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049dc:	461a      	mov	r2, r3
 80049de:	2301      	movs	r3, #1
 80049e0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	799b      	ldrb	r3, [r3, #6]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d132      	bne.n	8004a50 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80049ea:	6879      	ldr	r1, [r7, #4]
 80049ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049ee:	4613      	mov	r3, r2
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	4413      	add	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	440b      	add	r3, r1
 80049f8:	3320      	adds	r3, #32
 80049fa:	6819      	ldr	r1, [r3, #0]
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a00:	4613      	mov	r3, r2
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	4413      	add	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4403      	add	r3, r0
 8004a0a:	331c      	adds	r3, #28
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4419      	add	r1, r3
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a14:	4613      	mov	r3, r2
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	4413      	add	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4403      	add	r3, r0
 8004a1e:	3320      	adds	r3, #32
 8004a20:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d113      	bne.n	8004a50 <HAL_PCD_IRQHandler+0x3a2>
 8004a28:	6879      	ldr	r1, [r7, #4]
 8004a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	4413      	add	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	3324      	adds	r3, #36	@ 0x24
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d108      	bne.n	8004a50 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6818      	ldr	r0, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a48:	461a      	mov	r2, r3
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	f007 fc32 	bl	800c2b4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	4619      	mov	r1, r3
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f00a f969 	bl	800ed2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d008      	beq.n	8004a78 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a68:	015a      	lsls	r2, r3, #5
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a72:	461a      	mov	r2, r3
 8004a74:	2308      	movs	r3, #8
 8004a76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f003 0310 	and.w	r3, r3, #16
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d008      	beq.n	8004a94 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a8e:	461a      	mov	r2, r3
 8004a90:	2310      	movs	r3, #16
 8004a92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d008      	beq.n	8004ab0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa0:	015a      	lsls	r2, r3, #5
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aaa:	461a      	mov	r2, r3
 8004aac:	2340      	movs	r3, #64	@ 0x40
 8004aae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d023      	beq.n	8004b02 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004aba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004abc:	6a38      	ldr	r0, [r7, #32]
 8004abe:	f006 fc15 	bl	800b2ec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004ac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	4413      	add	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	3310      	adds	r3, #16
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	78db      	ldrb	r3, [r3, #3]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d108      	bne.n	8004af0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	4619      	mov	r1, r3
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f00a f9b6 	bl	800ee5c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004afc:	461a      	mov	r2, r3
 8004afe:	2302      	movs	r3, #2
 8004b00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004b0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 fce8 	bl	80054e4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b16:	3301      	adds	r3, #1
 8004b18:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b1c:	085b      	lsrs	r3, r3, #1
 8004b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f47f af2e 	bne.w	8004984 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f007 fafb 	bl	800c128 <USB_ReadInterrupts>
 8004b32:	4603      	mov	r3, r0
 8004b34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b3c:	d122      	bne.n	8004b84 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	69fa      	ldr	r2, [r7, #28]
 8004b48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b4c:	f023 0301 	bic.w	r3, r3, #1
 8004b50:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d108      	bne.n	8004b6e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004b64:	2100      	movs	r1, #0
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f00a fb34 	bl	800f1d4 <HAL_PCDEx_LPM_Callback>
 8004b6c:	e002      	b.n	8004b74 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f00a f954 	bl	800ee1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	695a      	ldr	r2, [r3, #20]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004b82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f007 facd 	bl	800c128 <USB_ReadInterrupts>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b98:	d112      	bne.n	8004bc0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d102      	bne.n	8004bb0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f00a f910 	bl	800edd0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	695a      	ldr	r2, [r3, #20]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004bbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f007 faaf 	bl	800c128 <USB_ReadInterrupts>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bd4:	d121      	bne.n	8004c1a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	695a      	ldr	r2, [r3, #20]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004be4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d111      	bne.n	8004c14 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bfe:	089b      	lsrs	r3, r3, #2
 8004c00:	f003 020f 	and.w	r2, r3, #15
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f00a fae1 	bl	800f1d4 <HAL_PCDEx_LPM_Callback>
 8004c12:	e002      	b.n	8004c1a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f00a f8db 	bl	800edd0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f007 fa82 	bl	800c128 <USB_ReadInterrupts>
 8004c24:	4603      	mov	r3, r0
 8004c26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c2e:	f040 80b7 	bne.w	8004da0 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	69fa      	ldr	r2, [r7, #28]
 8004c3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c40:	f023 0301 	bic.w	r3, r3, #1
 8004c44:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2110      	movs	r1, #16
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f006 fb4d 	bl	800b2ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c52:	2300      	movs	r3, #0
 8004c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c56:	e046      	b.n	8004ce6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c64:	461a      	mov	r2, r3
 8004c66:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004c6a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c7c:	0151      	lsls	r1, r2, #5
 8004c7e:	69fa      	ldr	r2, [r7, #28]
 8004c80:	440a      	add	r2, r1
 8004c82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c86:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004c8a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c98:	461a      	mov	r2, r3
 8004c9a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004c9e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ca2:	015a      	lsls	r2, r3, #5
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cb0:	0151      	lsls	r1, r2, #5
 8004cb2:	69fa      	ldr	r2, [r7, #28]
 8004cb4:	440a      	add	r2, r1
 8004cb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004cbe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cd0:	0151      	lsls	r1, r2, #5
 8004cd2:	69fa      	ldr	r2, [r7, #28]
 8004cd4:	440a      	add	r2, r1
 8004cd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cda:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004cde:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	791b      	ldrb	r3, [r3, #4]
 8004cea:	461a      	mov	r2, r3
 8004cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d3b2      	bcc.n	8004c58 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	69fa      	ldr	r2, [r7, #28]
 8004cfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d00:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004d04:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	7bdb      	ldrb	r3, [r3, #15]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d016      	beq.n	8004d3c <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d18:	69fa      	ldr	r2, [r7, #28]
 8004d1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d1e:	f043 030b 	orr.w	r3, r3, #11
 8004d22:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2e:	69fa      	ldr	r2, [r7, #28]
 8004d30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d34:	f043 030b 	orr.w	r3, r3, #11
 8004d38:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d3a:	e015      	b.n	8004d68 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d42:	695a      	ldr	r2, [r3, #20]
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	f242 032b 	movw	r3, #8235	@ 0x202b
 8004d50:	4313      	orrs	r3, r2
 8004d52:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	69fa      	ldr	r2, [r7, #28]
 8004d5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d62:	f043 030b 	orr.w	r3, r3, #11
 8004d66:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	69fa      	ldr	r2, [r7, #28]
 8004d72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d76:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004d7a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6818      	ldr	r0, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f007 fa92 	bl	800c2b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	695a      	ldr	r2, [r3, #20]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004d9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f007 f9bf 	bl	800c128 <USB_ReadInterrupts>
 8004daa:	4603      	mov	r3, r0
 8004dac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004db0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004db4:	d123      	bne.n	8004dfe <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f007 fa56 	bl	800c26c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f006 fb0a 	bl	800b3de <USB_GetDevSpeed>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	461a      	mov	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681c      	ldr	r4, [r3, #0]
 8004dd6:	f001 fab1 	bl	800633c <HAL_RCC_GetHCLKFreq>
 8004dda:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004de0:	461a      	mov	r2, r3
 8004de2:	4620      	mov	r0, r4
 8004de4:	f006 f802 	bl	800adec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f009 ffc8 	bl	800ed7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	695a      	ldr	r2, [r3, #20]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004dfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f007 f990 	bl	800c128 <USB_ReadInterrupts>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	f003 0308 	and.w	r3, r3, #8
 8004e0e:	2b08      	cmp	r3, #8
 8004e10:	d10a      	bne.n	8004e28 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f009 ffa5 	bl	800ed62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695a      	ldr	r2, [r3, #20]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f002 0208 	and.w	r2, r2, #8
 8004e26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f007 f97b 	bl	800c128 <USB_ReadInterrupts>
 8004e32:	4603      	mov	r3, r0
 8004e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e38:	2b80      	cmp	r3, #128	@ 0x80
 8004e3a:	d123      	bne.n	8004e84 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e48:	2301      	movs	r3, #1
 8004e4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e4c:	e014      	b.n	8004e78 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e52:	4613      	mov	r3, r2
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d105      	bne.n	8004e72 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 fb08 	bl	8005482 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e74:	3301      	adds	r3, #1
 8004e76:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	791b      	ldrb	r3, [r3, #4]
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d3e4      	bcc.n	8004e4e <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f007 f94d 	bl	800c128 <USB_ReadInterrupts>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e98:	d13c      	bne.n	8004f14 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e9e:	e02b      	b.n	8004ef8 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004eb0:	6879      	ldr	r1, [r7, #4]
 8004eb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	4413      	add	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	440b      	add	r3, r1
 8004ebe:	3318      	adds	r3, #24
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d115      	bne.n	8004ef2 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004ec6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	da12      	bge.n	8004ef2 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	440b      	add	r3, r1
 8004eda:	3317      	adds	r3, #23
 8004edc:	2201      	movs	r2, #1
 8004ede:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	4619      	mov	r1, r3
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 fac8 	bl	8005482 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	791b      	ldrb	r3, [r3, #4]
 8004efc:	461a      	mov	r2, r3
 8004efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d3cd      	bcc.n	8004ea0 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	695a      	ldr	r2, [r3, #20]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004f12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f007 f905 	bl	800c128 <USB_ReadInterrupts>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f28:	d156      	bne.n	8004fd8 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f2e:	e045      	b.n	8004fbc <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f40:	6879      	ldr	r1, [r7, #4]
 8004f42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f44:	4613      	mov	r3, r2
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	4413      	add	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	440b      	add	r3, r1
 8004f4e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d12e      	bne.n	8004fb6 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004f58:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	da2b      	bge.n	8004fb6 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004f6a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d121      	bne.n	8004fb6 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004f72:	6879      	ldr	r1, [r7, #4]
 8004f74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f76:	4613      	mov	r3, r2
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	4413      	add	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	440b      	add	r3, r1
 8004f80:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004f84:	2201      	movs	r2, #1
 8004f86:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004f90:	6a3b      	ldr	r3, [r7, #32]
 8004f92:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10a      	bne.n	8004fb6 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	69fa      	ldr	r2, [r7, #28]
 8004faa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004fb2:	6053      	str	r3, [r2, #4]
            break;
 8004fb4:	e008      	b.n	8004fc8 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb8:	3301      	adds	r3, #1
 8004fba:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	791b      	ldrb	r3, [r3, #4]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d3b3      	bcc.n	8004f30 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	695a      	ldr	r2, [r3, #20]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004fd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f007 f8a3 	bl	800c128 <USB_ReadInterrupts>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fec:	d10a      	bne.n	8005004 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f009 ff46 	bl	800ee80 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	695a      	ldr	r2, [r3, #20]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005002:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4618      	mov	r0, r3
 800500a:	f007 f88d 	bl	800c128 <USB_ReadInterrupts>
 800500e:	4603      	mov	r3, r0
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b04      	cmp	r3, #4
 8005016:	d115      	bne.n	8005044 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	f003 0304 	and.w	r3, r3, #4
 8005026:	2b00      	cmp	r3, #0
 8005028:	d002      	beq.n	8005030 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f009 ff36 	bl	800ee9c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6859      	ldr	r1, [r3, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	430a      	orrs	r2, r1
 800503e:	605a      	str	r2, [r3, #4]
 8005040:	e000      	b.n	8005044 <HAL_PCD_IRQHandler+0x996>
      return;
 8005042:	bf00      	nop
    }
  }
}
 8005044:	3734      	adds	r7, #52	@ 0x34
 8005046:	46bd      	mov	sp, r7
 8005048:	bd90      	pop	{r4, r7, pc}

0800504a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b082      	sub	sp, #8
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	460b      	mov	r3, r1
 8005054:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800505c:	2b01      	cmp	r3, #1
 800505e:	d101      	bne.n	8005064 <HAL_PCD_SetAddress+0x1a>
 8005060:	2302      	movs	r3, #2
 8005062:	e012      	b.n	800508a <HAL_PCD_SetAddress+0x40>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	78fa      	ldrb	r2, [r7, #3]
 8005070:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	78fa      	ldrb	r2, [r7, #3]
 8005078:	4611      	mov	r1, r2
 800507a:	4618      	mov	r0, r3
 800507c:	f006 ffec 	bl	800c058 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b084      	sub	sp, #16
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
 800509a:	4608      	mov	r0, r1
 800509c:	4611      	mov	r1, r2
 800509e:	461a      	mov	r2, r3
 80050a0:	4603      	mov	r3, r0
 80050a2:	70fb      	strb	r3, [r7, #3]
 80050a4:	460b      	mov	r3, r1
 80050a6:	803b      	strh	r3, [r7, #0]
 80050a8:	4613      	mov	r3, r2
 80050aa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80050ac:	2300      	movs	r3, #0
 80050ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80050b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	da0f      	bge.n	80050d8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050b8:	78fb      	ldrb	r3, [r7, #3]
 80050ba:	f003 020f 	and.w	r2, r3, #15
 80050be:	4613      	mov	r3, r2
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	4413      	add	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	3310      	adds	r3, #16
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	4413      	add	r3, r2
 80050cc:	3304      	adds	r3, #4
 80050ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2201      	movs	r2, #1
 80050d4:	705a      	strb	r2, [r3, #1]
 80050d6:	e00f      	b.n	80050f8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050d8:	78fb      	ldrb	r3, [r7, #3]
 80050da:	f003 020f 	and.w	r2, r3, #15
 80050de:	4613      	mov	r3, r2
 80050e0:	00db      	lsls	r3, r3, #3
 80050e2:	4413      	add	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	4413      	add	r3, r2
 80050ee:	3304      	adds	r3, #4
 80050f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80050f8:	78fb      	ldrb	r3, [r7, #3]
 80050fa:	f003 030f 	and.w	r3, r3, #15
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005104:	883a      	ldrh	r2, [r7, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	78ba      	ldrb	r2, [r7, #2]
 800510e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	785b      	ldrb	r3, [r3, #1]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d004      	beq.n	8005122 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	461a      	mov	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005122:	78bb      	ldrb	r3, [r7, #2]
 8005124:	2b02      	cmp	r3, #2
 8005126:	d102      	bne.n	800512e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005134:	2b01      	cmp	r3, #1
 8005136:	d101      	bne.n	800513c <HAL_PCD_EP_Open+0xaa>
 8005138:	2302      	movs	r3, #2
 800513a:	e00e      	b.n	800515a <HAL_PCD_EP_Open+0xc8>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68f9      	ldr	r1, [r7, #12]
 800514a:	4618      	mov	r0, r3
 800514c:	f006 f96c 	bl	800b428 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005158:	7afb      	ldrb	r3, [r7, #11]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b084      	sub	sp, #16
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	460b      	mov	r3, r1
 800516c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800516e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005172:	2b00      	cmp	r3, #0
 8005174:	da0f      	bge.n	8005196 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005176:	78fb      	ldrb	r3, [r7, #3]
 8005178:	f003 020f 	and.w	r2, r3, #15
 800517c:	4613      	mov	r3, r2
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	4413      	add	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	3310      	adds	r3, #16
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	4413      	add	r3, r2
 800518a:	3304      	adds	r3, #4
 800518c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2201      	movs	r2, #1
 8005192:	705a      	strb	r2, [r3, #1]
 8005194:	e00f      	b.n	80051b6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005196:	78fb      	ldrb	r3, [r7, #3]
 8005198:	f003 020f 	and.w	r2, r3, #15
 800519c:	4613      	mov	r3, r2
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	4413      	add	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	4413      	add	r3, r2
 80051ac:	3304      	adds	r3, #4
 80051ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80051b6:	78fb      	ldrb	r3, [r7, #3]
 80051b8:	f003 030f 	and.w	r3, r3, #15
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d101      	bne.n	80051d0 <HAL_PCD_EP_Close+0x6e>
 80051cc:	2302      	movs	r3, #2
 80051ce:	e00e      	b.n	80051ee <HAL_PCD_EP_Close+0x8c>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68f9      	ldr	r1, [r7, #12]
 80051de:	4618      	mov	r0, r3
 80051e0:	f006 f9aa 	bl	800b538 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b086      	sub	sp, #24
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	60f8      	str	r0, [r7, #12]
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	603b      	str	r3, [r7, #0]
 8005202:	460b      	mov	r3, r1
 8005204:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005206:	7afb      	ldrb	r3, [r7, #11]
 8005208:	f003 020f 	and.w	r2, r3, #15
 800520c:	4613      	mov	r3, r2
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	4413      	add	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	3304      	adds	r3, #4
 800521e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	2200      	movs	r2, #0
 8005230:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	2200      	movs	r2, #0
 8005236:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005238:	7afb      	ldrb	r3, [r7, #11]
 800523a:	f003 030f 	and.w	r3, r3, #15
 800523e:	b2da      	uxtb	r2, r3
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	799b      	ldrb	r3, [r3, #6]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d102      	bne.n	8005252 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6818      	ldr	r0, [r3, #0]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	799b      	ldrb	r3, [r3, #6]
 800525a:	461a      	mov	r2, r3
 800525c:	6979      	ldr	r1, [r7, #20]
 800525e:	f006 fa47 	bl	800b6f0 <USB_EPStartXfer>

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	460b      	mov	r3, r1
 8005276:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005278:	78fb      	ldrb	r3, [r7, #3]
 800527a:	f003 020f 	and.w	r2, r3, #15
 800527e:	6879      	ldr	r1, [r7, #4]
 8005280:	4613      	mov	r3, r2
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	4413      	add	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800528e:	681b      	ldr	r3, [r3, #0]
}
 8005290:	4618      	mov	r0, r3
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	607a      	str	r2, [r7, #4]
 80052a6:	603b      	str	r3, [r7, #0]
 80052a8:	460b      	mov	r3, r1
 80052aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052ac:	7afb      	ldrb	r3, [r7, #11]
 80052ae:	f003 020f 	and.w	r2, r3, #15
 80052b2:	4613      	mov	r3, r2
 80052b4:	00db      	lsls	r3, r3, #3
 80052b6:	4413      	add	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	3310      	adds	r3, #16
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	4413      	add	r3, r2
 80052c0:	3304      	adds	r3, #4
 80052c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	683a      	ldr	r2, [r7, #0]
 80052ce:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	2200      	movs	r2, #0
 80052d4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	2201      	movs	r2, #1
 80052da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052dc:	7afb      	ldrb	r3, [r7, #11]
 80052de:	f003 030f 	and.w	r3, r3, #15
 80052e2:	b2da      	uxtb	r2, r3
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	799b      	ldrb	r3, [r3, #6]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d102      	bne.n	80052f6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6818      	ldr	r0, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	799b      	ldrb	r3, [r3, #6]
 80052fe:	461a      	mov	r2, r3
 8005300:	6979      	ldr	r1, [r7, #20]
 8005302:	f006 f9f5 	bl	800b6f0 <USB_EPStartXfer>

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3718      	adds	r7, #24
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	460b      	mov	r3, r1
 800531a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800531c:	78fb      	ldrb	r3, [r7, #3]
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	7912      	ldrb	r2, [r2, #4]
 8005326:	4293      	cmp	r3, r2
 8005328:	d901      	bls.n	800532e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e04f      	b.n	80053ce <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800532e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005332:	2b00      	cmp	r3, #0
 8005334:	da0f      	bge.n	8005356 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005336:	78fb      	ldrb	r3, [r7, #3]
 8005338:	f003 020f 	and.w	r2, r3, #15
 800533c:	4613      	mov	r3, r2
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	4413      	add	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	3310      	adds	r3, #16
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	4413      	add	r3, r2
 800534a:	3304      	adds	r3, #4
 800534c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2201      	movs	r2, #1
 8005352:	705a      	strb	r2, [r3, #1]
 8005354:	e00d      	b.n	8005372 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005356:	78fa      	ldrb	r2, [r7, #3]
 8005358:	4613      	mov	r3, r2
 800535a:	00db      	lsls	r3, r3, #3
 800535c:	4413      	add	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	4413      	add	r3, r2
 8005368:	3304      	adds	r3, #4
 800536a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2201      	movs	r2, #1
 8005376:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005378:	78fb      	ldrb	r3, [r7, #3]
 800537a:	f003 030f 	and.w	r3, r3, #15
 800537e:	b2da      	uxtb	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800538a:	2b01      	cmp	r3, #1
 800538c:	d101      	bne.n	8005392 <HAL_PCD_EP_SetStall+0x82>
 800538e:	2302      	movs	r3, #2
 8005390:	e01d      	b.n	80053ce <HAL_PCD_EP_SetStall+0xbe>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68f9      	ldr	r1, [r7, #12]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f006 fd85 	bl	800beb0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80053a6:	78fb      	ldrb	r3, [r7, #3]
 80053a8:	f003 030f 	and.w	r3, r3, #15
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d109      	bne.n	80053c4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6818      	ldr	r0, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	7999      	ldrb	r1, [r3, #6]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80053be:	461a      	mov	r2, r3
 80053c0:	f006 ff78 	bl	800c2b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b084      	sub	sp, #16
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
 80053de:	460b      	mov	r3, r1
 80053e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80053e2:	78fb      	ldrb	r3, [r7, #3]
 80053e4:	f003 030f 	and.w	r3, r3, #15
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	7912      	ldrb	r2, [r2, #4]
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d901      	bls.n	80053f4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e042      	b.n	800547a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80053f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	da0f      	bge.n	800541c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053fc:	78fb      	ldrb	r3, [r7, #3]
 80053fe:	f003 020f 	and.w	r2, r3, #15
 8005402:	4613      	mov	r3, r2
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	4413      	add	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	3310      	adds	r3, #16
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	4413      	add	r3, r2
 8005410:	3304      	adds	r3, #4
 8005412:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2201      	movs	r2, #1
 8005418:	705a      	strb	r2, [r3, #1]
 800541a:	e00f      	b.n	800543c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800541c:	78fb      	ldrb	r3, [r7, #3]
 800541e:	f003 020f 	and.w	r2, r3, #15
 8005422:	4613      	mov	r3, r2
 8005424:	00db      	lsls	r3, r3, #3
 8005426:	4413      	add	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	4413      	add	r3, r2
 8005432:	3304      	adds	r3, #4
 8005434:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005442:	78fb      	ldrb	r3, [r7, #3]
 8005444:	f003 030f 	and.w	r3, r3, #15
 8005448:	b2da      	uxtb	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005454:	2b01      	cmp	r3, #1
 8005456:	d101      	bne.n	800545c <HAL_PCD_EP_ClrStall+0x86>
 8005458:	2302      	movs	r3, #2
 800545a:	e00e      	b.n	800547a <HAL_PCD_EP_ClrStall+0xa4>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68f9      	ldr	r1, [r7, #12]
 800546a:	4618      	mov	r0, r3
 800546c:	f006 fd8e 	bl	800bf8c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b084      	sub	sp, #16
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
 800548a:	460b      	mov	r3, r1
 800548c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800548e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005492:	2b00      	cmp	r3, #0
 8005494:	da0c      	bge.n	80054b0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005496:	78fb      	ldrb	r3, [r7, #3]
 8005498:	f003 020f 	and.w	r2, r3, #15
 800549c:	4613      	mov	r3, r2
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	4413      	add	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	3310      	adds	r3, #16
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	4413      	add	r3, r2
 80054aa:	3304      	adds	r3, #4
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	e00c      	b.n	80054ca <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054b0:	78fb      	ldrb	r3, [r7, #3]
 80054b2:	f003 020f 	and.w	r2, r3, #15
 80054b6:	4613      	mov	r3, r2
 80054b8:	00db      	lsls	r3, r3, #3
 80054ba:	4413      	add	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	4413      	add	r3, r2
 80054c6:	3304      	adds	r3, #4
 80054c8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68f9      	ldr	r1, [r7, #12]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f006 fbad 	bl	800bc30 <USB_EPStopXfer>
 80054d6:	4603      	mov	r3, r0
 80054d8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80054da:	7afb      	ldrb	r3, [r7, #11]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b08a      	sub	sp, #40	@ 0x28
 80054e8:	af02      	add	r7, sp, #8
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	4613      	mov	r3, r2
 80054fc:	00db      	lsls	r3, r3, #3
 80054fe:	4413      	add	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	3310      	adds	r3, #16
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	4413      	add	r3, r2
 8005508:	3304      	adds	r3, #4
 800550a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	695a      	ldr	r2, [r3, #20]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	429a      	cmp	r2, r3
 8005516:	d901      	bls.n	800551c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e06b      	b.n	80055f4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	691a      	ldr	r2, [r3, #16]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	69fa      	ldr	r2, [r7, #28]
 800552e:	429a      	cmp	r2, r3
 8005530:	d902      	bls.n	8005538 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	3303      	adds	r3, #3
 800553c:	089b      	lsrs	r3, r3, #2
 800553e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005540:	e02a      	b.n	8005598 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	691a      	ldr	r2, [r3, #16]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	69fa      	ldr	r2, [r7, #28]
 8005554:	429a      	cmp	r2, r3
 8005556:	d902      	bls.n	800555e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	3303      	adds	r3, #3
 8005562:	089b      	lsrs	r3, r3, #2
 8005564:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	68d9      	ldr	r1, [r3, #12]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	b2da      	uxtb	r2, r3
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	4603      	mov	r3, r0
 800557a:	6978      	ldr	r0, [r7, #20]
 800557c:	f006 fc02 	bl	800bd84 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	68da      	ldr	r2, [r3, #12]
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	441a      	add	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	695a      	ldr	r2, [r3, #20]
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	441a      	add	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80055a8:	69ba      	ldr	r2, [r7, #24]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d809      	bhi.n	80055c2 <PCD_WriteEmptyTxFifo+0xde>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	695a      	ldr	r2, [r3, #20]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d203      	bcs.n	80055c2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1bf      	bne.n	8005542 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	691a      	ldr	r2, [r3, #16]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d811      	bhi.n	80055f2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	f003 030f 	and.w	r3, r3, #15
 80055d4:	2201      	movs	r2, #1
 80055d6:	fa02 f303 	lsl.w	r3, r2, r3
 80055da:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	43db      	mvns	r3, r3
 80055e8:	6939      	ldr	r1, [r7, #16]
 80055ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055ee:	4013      	ands	r3, r2
 80055f0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3720      	adds	r7, #32
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b088      	sub	sp, #32
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	333c      	adds	r3, #60	@ 0x3c
 8005614:	3304      	adds	r3, #4
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	015a      	lsls	r2, r3, #5
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	4413      	add	r3, r2
 8005622:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	799b      	ldrb	r3, [r3, #6]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d17b      	bne.n	800572a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	f003 0308 	and.w	r3, r3, #8
 8005638:	2b00      	cmp	r3, #0
 800563a:	d015      	beq.n	8005668 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	4a61      	ldr	r2, [pc, #388]	@ (80057c4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005640:	4293      	cmp	r3, r2
 8005642:	f240 80b9 	bls.w	80057b8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 80b3 	beq.w	80057b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800565e:	461a      	mov	r2, r3
 8005660:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005664:	6093      	str	r3, [r2, #8]
 8005666:	e0a7      	b.n	80057b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	f003 0320 	and.w	r3, r3, #32
 800566e:	2b00      	cmp	r3, #0
 8005670:	d009      	beq.n	8005686 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	4413      	add	r3, r2
 800567a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800567e:	461a      	mov	r2, r3
 8005680:	2320      	movs	r3, #32
 8005682:	6093      	str	r3, [r2, #8]
 8005684:	e098      	b.n	80057b8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800568c:	2b00      	cmp	r3, #0
 800568e:	f040 8093 	bne.w	80057b8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	4a4b      	ldr	r2, [pc, #300]	@ (80057c4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d90f      	bls.n	80056ba <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00a      	beq.n	80056ba <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056b0:	461a      	mov	r2, r3
 80056b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056b6:	6093      	str	r3, [r2, #8]
 80056b8:	e07e      	b.n	80057b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	4613      	mov	r3, r2
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	4413      	add	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	4413      	add	r3, r2
 80056cc:	3304      	adds	r3, #4
 80056ce:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6a1a      	ldr	r2, [r3, #32]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	0159      	lsls	r1, r3, #5
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	440b      	add	r3, r1
 80056dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056e6:	1ad2      	subs	r2, r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d114      	bne.n	800571c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d109      	bne.n	800570e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6818      	ldr	r0, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005704:	461a      	mov	r2, r3
 8005706:	2101      	movs	r1, #1
 8005708:	f006 fdd4 	bl	800c2b4 <USB_EP0_OutStart>
 800570c:	e006      	b.n	800571c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	68da      	ldr	r2, [r3, #12]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	441a      	add	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	b2db      	uxtb	r3, r3
 8005720:	4619      	mov	r1, r3
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f009 fae8 	bl	800ecf8 <HAL_PCD_DataOutStageCallback>
 8005728:	e046      	b.n	80057b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	4a26      	ldr	r2, [pc, #152]	@ (80057c8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d124      	bne.n	800577c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00a      	beq.n	8005752 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005748:	461a      	mov	r2, r3
 800574a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800574e:	6093      	str	r3, [r2, #8]
 8005750:	e032      	b.n	80057b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	f003 0320 	and.w	r3, r3, #32
 8005758:	2b00      	cmp	r3, #0
 800575a:	d008      	beq.n	800576e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	015a      	lsls	r2, r3, #5
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	4413      	add	r3, r2
 8005764:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005768:	461a      	mov	r2, r3
 800576a:	2320      	movs	r3, #32
 800576c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	b2db      	uxtb	r3, r3
 8005772:	4619      	mov	r1, r3
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f009 fabf 	bl	800ecf8 <HAL_PCD_DataOutStageCallback>
 800577a:	e01d      	b.n	80057b8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d114      	bne.n	80057ac <PCD_EP_OutXfrComplete_int+0x1b0>
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	4613      	mov	r3, r2
 8005788:	00db      	lsls	r3, r3, #3
 800578a:	4413      	add	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	440b      	add	r3, r1
 8005790:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d108      	bne.n	80057ac <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6818      	ldr	r0, [r3, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80057a4:	461a      	mov	r2, r3
 80057a6:	2100      	movs	r1, #0
 80057a8:	f006 fd84 	bl	800c2b4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	4619      	mov	r1, r3
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f009 faa0 	bl	800ecf8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3720      	adds	r7, #32
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	4f54300a 	.word	0x4f54300a
 80057c8:	4f54310a 	.word	0x4f54310a

080057cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	333c      	adds	r3, #60	@ 0x3c
 80057e4:	3304      	adds	r3, #4
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	4a15      	ldr	r2, [pc, #84]	@ (8005854 <PCD_EP_OutSetupPacket_int+0x88>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d90e      	bls.n	8005820 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005808:	2b00      	cmp	r3, #0
 800580a:	d009      	beq.n	8005820 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005818:	461a      	mov	r2, r3
 800581a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800581e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f009 fa57 	bl	800ecd4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	4a0a      	ldr	r2, [pc, #40]	@ (8005854 <PCD_EP_OutSetupPacket_int+0x88>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d90c      	bls.n	8005848 <PCD_EP_OutSetupPacket_int+0x7c>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	799b      	ldrb	r3, [r3, #6]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d108      	bne.n	8005848 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6818      	ldr	r0, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005840:	461a      	mov	r2, r3
 8005842:	2101      	movs	r1, #1
 8005844:	f006 fd36 	bl	800c2b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3718      	adds	r7, #24
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	4f54300a 	.word	0x4f54300a

08005858 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	460b      	mov	r3, r1
 8005862:	70fb      	strb	r3, [r7, #3]
 8005864:	4613      	mov	r3, r2
 8005866:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005870:	78fb      	ldrb	r3, [r7, #3]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d107      	bne.n	8005886 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005876:	883b      	ldrh	r3, [r7, #0]
 8005878:	0419      	lsls	r1, r3, #16
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	430a      	orrs	r2, r1
 8005882:	629a      	str	r2, [r3, #40]	@ 0x28
 8005884:	e028      	b.n	80058d8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800588c:	0c1b      	lsrs	r3, r3, #16
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	4413      	add	r3, r2
 8005892:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005894:	2300      	movs	r3, #0
 8005896:	73fb      	strb	r3, [r7, #15]
 8005898:	e00d      	b.n	80058b6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	7bfb      	ldrb	r3, [r7, #15]
 80058a0:	3340      	adds	r3, #64	@ 0x40
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4413      	add	r3, r2
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	0c1b      	lsrs	r3, r3, #16
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	4413      	add	r3, r2
 80058ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80058b0:	7bfb      	ldrb	r3, [r7, #15]
 80058b2:	3301      	adds	r3, #1
 80058b4:	73fb      	strb	r3, [r7, #15]
 80058b6:	7bfa      	ldrb	r2, [r7, #15]
 80058b8:	78fb      	ldrb	r3, [r7, #3]
 80058ba:	3b01      	subs	r3, #1
 80058bc:	429a      	cmp	r2, r3
 80058be:	d3ec      	bcc.n	800589a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80058c0:	883b      	ldrh	r3, [r7, #0]
 80058c2:	0418      	lsls	r0, r3, #16
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6819      	ldr	r1, [r3, #0]
 80058c8:	78fb      	ldrb	r3, [r7, #3]
 80058ca:	3b01      	subs	r3, #1
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	4302      	orrs	r2, r0
 80058d0:	3340      	adds	r3, #64	@ 0x40
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	440b      	add	r3, r1
 80058d6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	460b      	mov	r3, r1
 80058f0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	887a      	ldrh	r2, [r7, #2]
 80058f8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005936:	4b05      	ldr	r3, [pc, #20]	@ (800594c <HAL_PCDEx_ActivateLPM+0x44>)
 8005938:	4313      	orrs	r3, r2
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	10000003 	.word	0x10000003

08005950 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005956:	2300      	movs	r3, #0
 8005958:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800595a:	4b23      	ldr	r3, [pc, #140]	@ (80059e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800595c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595e:	4a22      	ldr	r2, [pc, #136]	@ (80059e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005960:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005964:	6413      	str	r3, [r2, #64]	@ 0x40
 8005966:	4b20      	ldr	r3, [pc, #128]	@ (80059e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800596e:	603b      	str	r3, [r7, #0]
 8005970:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005972:	4b1e      	ldr	r3, [pc, #120]	@ (80059ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a1d      	ldr	r2, [pc, #116]	@ (80059ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8005978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800597c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800597e:	f7fd fa97 	bl	8002eb0 <HAL_GetTick>
 8005982:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005984:	e009      	b.n	800599a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005986:	f7fd fa93 	bl	8002eb0 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005994:	d901      	bls.n	800599a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e022      	b.n	80059e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800599a:	4b14      	ldr	r3, [pc, #80]	@ (80059ec <HAL_PWREx_EnableOverDrive+0x9c>)
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059a6:	d1ee      	bne.n	8005986 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80059a8:	4b10      	ldr	r3, [pc, #64]	@ (80059ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a0f      	ldr	r2, [pc, #60]	@ (80059ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80059ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059b4:	f7fd fa7c 	bl	8002eb0 <HAL_GetTick>
 80059b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80059ba:	e009      	b.n	80059d0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80059bc:	f7fd fa78 	bl	8002eb0 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80059ca:	d901      	bls.n	80059d0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e007      	b.n	80059e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80059d0:	4b06      	ldr	r3, [pc, #24]	@ (80059ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059dc:	d1ee      	bne.n	80059bc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	40023800 	.word	0x40023800
 80059ec:	40007000 	.word	0x40007000

080059f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80059f8:	2300      	movs	r3, #0
 80059fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e291      	b.n	8005f2a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 8087 	beq.w	8005b22 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a14:	4b96      	ldr	r3, [pc, #600]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f003 030c 	and.w	r3, r3, #12
 8005a1c:	2b04      	cmp	r3, #4
 8005a1e:	d00c      	beq.n	8005a3a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a20:	4b93      	ldr	r3, [pc, #588]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f003 030c 	and.w	r3, r3, #12
 8005a28:	2b08      	cmp	r3, #8
 8005a2a:	d112      	bne.n	8005a52 <HAL_RCC_OscConfig+0x62>
 8005a2c:	4b90      	ldr	r3, [pc, #576]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a38:	d10b      	bne.n	8005a52 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a3a:	4b8d      	ldr	r3, [pc, #564]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d06c      	beq.n	8005b20 <HAL_RCC_OscConfig+0x130>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d168      	bne.n	8005b20 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e26b      	b.n	8005f2a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a5a:	d106      	bne.n	8005a6a <HAL_RCC_OscConfig+0x7a>
 8005a5c:	4b84      	ldr	r3, [pc, #528]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a83      	ldr	r2, [pc, #524]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005a62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a66:	6013      	str	r3, [r2, #0]
 8005a68:	e02e      	b.n	8005ac8 <HAL_RCC_OscConfig+0xd8>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10c      	bne.n	8005a8c <HAL_RCC_OscConfig+0x9c>
 8005a72:	4b7f      	ldr	r3, [pc, #508]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a7e      	ldr	r2, [pc, #504]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005a78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a7c:	6013      	str	r3, [r2, #0]
 8005a7e:	4b7c      	ldr	r3, [pc, #496]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a7b      	ldr	r2, [pc, #492]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005a84:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a88:	6013      	str	r3, [r2, #0]
 8005a8a:	e01d      	b.n	8005ac8 <HAL_RCC_OscConfig+0xd8>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a94:	d10c      	bne.n	8005ab0 <HAL_RCC_OscConfig+0xc0>
 8005a96:	4b76      	ldr	r3, [pc, #472]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a75      	ldr	r2, [pc, #468]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005a9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005aa0:	6013      	str	r3, [r2, #0]
 8005aa2:	4b73      	ldr	r3, [pc, #460]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a72      	ldr	r2, [pc, #456]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005aa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	e00b      	b.n	8005ac8 <HAL_RCC_OscConfig+0xd8>
 8005ab0:	4b6f      	ldr	r3, [pc, #444]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a6e      	ldr	r2, [pc, #440]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005ab6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005aba:	6013      	str	r3, [r2, #0]
 8005abc:	4b6c      	ldr	r3, [pc, #432]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a6b      	ldr	r2, [pc, #428]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005ac2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ac6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d013      	beq.n	8005af8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad0:	f7fd f9ee 	bl	8002eb0 <HAL_GetTick>
 8005ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ad6:	e008      	b.n	8005aea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ad8:	f7fd f9ea 	bl	8002eb0 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	2b64      	cmp	r3, #100	@ 0x64
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e21f      	b.n	8005f2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aea:	4b61      	ldr	r3, [pc, #388]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0f0      	beq.n	8005ad8 <HAL_RCC_OscConfig+0xe8>
 8005af6:	e014      	b.n	8005b22 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af8:	f7fd f9da 	bl	8002eb0 <HAL_GetTick>
 8005afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005afe:	e008      	b.n	8005b12 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b00:	f7fd f9d6 	bl	8002eb0 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b64      	cmp	r3, #100	@ 0x64
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e20b      	b.n	8005f2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b12:	4b57      	ldr	r3, [pc, #348]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1f0      	bne.n	8005b00 <HAL_RCC_OscConfig+0x110>
 8005b1e:	e000      	b.n	8005b22 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d069      	beq.n	8005c02 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b2e:	4b50      	ldr	r3, [pc, #320]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f003 030c 	and.w	r3, r3, #12
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00b      	beq.n	8005b52 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b3a:	4b4d      	ldr	r3, [pc, #308]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f003 030c 	and.w	r3, r3, #12
 8005b42:	2b08      	cmp	r3, #8
 8005b44:	d11c      	bne.n	8005b80 <HAL_RCC_OscConfig+0x190>
 8005b46:	4b4a      	ldr	r3, [pc, #296]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d116      	bne.n	8005b80 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b52:	4b47      	ldr	r3, [pc, #284]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d005      	beq.n	8005b6a <HAL_RCC_OscConfig+0x17a>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d001      	beq.n	8005b6a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e1df      	b.n	8005f2a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b6a:	4b41      	ldr	r3, [pc, #260]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	00db      	lsls	r3, r3, #3
 8005b78:	493d      	ldr	r1, [pc, #244]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b7e:	e040      	b.n	8005c02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d023      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b88:	4b39      	ldr	r3, [pc, #228]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a38      	ldr	r2, [pc, #224]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005b8e:	f043 0301 	orr.w	r3, r3, #1
 8005b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b94:	f7fd f98c 	bl	8002eb0 <HAL_GetTick>
 8005b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b9a:	e008      	b.n	8005bae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b9c:	f7fd f988 	bl	8002eb0 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e1bd      	b.n	8005f2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bae:	4b30      	ldr	r3, [pc, #192]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d0f0      	beq.n	8005b9c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bba:	4b2d      	ldr	r3, [pc, #180]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	4929      	ldr	r1, [pc, #164]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	600b      	str	r3, [r1, #0]
 8005bce:	e018      	b.n	8005c02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bd0:	4b27      	ldr	r3, [pc, #156]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a26      	ldr	r2, [pc, #152]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005bd6:	f023 0301 	bic.w	r3, r3, #1
 8005bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bdc:	f7fd f968 	bl	8002eb0 <HAL_GetTick>
 8005be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005be2:	e008      	b.n	8005bf6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005be4:	f7fd f964 	bl	8002eb0 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e199      	b.n	8005f2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1f0      	bne.n	8005be4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0308 	and.w	r3, r3, #8
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d038      	beq.n	8005c80 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d019      	beq.n	8005c4a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c16:	4b16      	ldr	r3, [pc, #88]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005c18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c1a:	4a15      	ldr	r2, [pc, #84]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005c1c:	f043 0301 	orr.w	r3, r3, #1
 8005c20:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c22:	f7fd f945 	bl	8002eb0 <HAL_GetTick>
 8005c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c28:	e008      	b.n	8005c3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c2a:	f7fd f941 	bl	8002eb0 <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d901      	bls.n	8005c3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e176      	b.n	8005f2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005c3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d0f0      	beq.n	8005c2a <HAL_RCC_OscConfig+0x23a>
 8005c48:	e01a      	b.n	8005c80 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c4a:	4b09      	ldr	r3, [pc, #36]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c4e:	4a08      	ldr	r2, [pc, #32]	@ (8005c70 <HAL_RCC_OscConfig+0x280>)
 8005c50:	f023 0301 	bic.w	r3, r3, #1
 8005c54:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c56:	f7fd f92b 	bl	8002eb0 <HAL_GetTick>
 8005c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c5c:	e00a      	b.n	8005c74 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c5e:	f7fd f927 	bl	8002eb0 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d903      	bls.n	8005c74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e15c      	b.n	8005f2a <HAL_RCC_OscConfig+0x53a>
 8005c70:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c74:	4b91      	ldr	r3, [pc, #580]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005c76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1ee      	bne.n	8005c5e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0304 	and.w	r3, r3, #4
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 80a4 	beq.w	8005dd6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c8e:	4b8b      	ldr	r3, [pc, #556]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10d      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c9a:	4b88      	ldr	r3, [pc, #544]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9e:	4a87      	ldr	r2, [pc, #540]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ca6:	4b85      	ldr	r3, [pc, #532]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cae:	60bb      	str	r3, [r7, #8]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cb6:	4b82      	ldr	r3, [pc, #520]	@ (8005ec0 <HAL_RCC_OscConfig+0x4d0>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d118      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005cc2:	4b7f      	ldr	r3, [pc, #508]	@ (8005ec0 <HAL_RCC_OscConfig+0x4d0>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a7e      	ldr	r2, [pc, #504]	@ (8005ec0 <HAL_RCC_OscConfig+0x4d0>)
 8005cc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cce:	f7fd f8ef 	bl	8002eb0 <HAL_GetTick>
 8005cd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cd4:	e008      	b.n	8005ce8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cd6:	f7fd f8eb 	bl	8002eb0 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b64      	cmp	r3, #100	@ 0x64
 8005ce2:	d901      	bls.n	8005ce8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e120      	b.n	8005f2a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ce8:	4b75      	ldr	r3, [pc, #468]	@ (8005ec0 <HAL_RCC_OscConfig+0x4d0>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d0f0      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d106      	bne.n	8005d0a <HAL_RCC_OscConfig+0x31a>
 8005cfc:	4b6f      	ldr	r3, [pc, #444]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d00:	4a6e      	ldr	r2, [pc, #440]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005d02:	f043 0301 	orr.w	r3, r3, #1
 8005d06:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d08:	e02d      	b.n	8005d66 <HAL_RCC_OscConfig+0x376>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10c      	bne.n	8005d2c <HAL_RCC_OscConfig+0x33c>
 8005d12:	4b6a      	ldr	r3, [pc, #424]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d16:	4a69      	ldr	r2, [pc, #420]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005d18:	f023 0301 	bic.w	r3, r3, #1
 8005d1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d1e:	4b67      	ldr	r3, [pc, #412]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d22:	4a66      	ldr	r2, [pc, #408]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005d24:	f023 0304 	bic.w	r3, r3, #4
 8005d28:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d2a:	e01c      	b.n	8005d66 <HAL_RCC_OscConfig+0x376>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	2b05      	cmp	r3, #5
 8005d32:	d10c      	bne.n	8005d4e <HAL_RCC_OscConfig+0x35e>
 8005d34:	4b61      	ldr	r3, [pc, #388]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d38:	4a60      	ldr	r2, [pc, #384]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005d3a:	f043 0304 	orr.w	r3, r3, #4
 8005d3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d40:	4b5e      	ldr	r3, [pc, #376]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d44:	4a5d      	ldr	r2, [pc, #372]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005d46:	f043 0301 	orr.w	r3, r3, #1
 8005d4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d4c:	e00b      	b.n	8005d66 <HAL_RCC_OscConfig+0x376>
 8005d4e:	4b5b      	ldr	r3, [pc, #364]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d52:	4a5a      	ldr	r2, [pc, #360]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005d54:	f023 0301 	bic.w	r3, r3, #1
 8005d58:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d5a:	4b58      	ldr	r3, [pc, #352]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d5e:	4a57      	ldr	r2, [pc, #348]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005d60:	f023 0304 	bic.w	r3, r3, #4
 8005d64:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d015      	beq.n	8005d9a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d6e:	f7fd f89f 	bl	8002eb0 <HAL_GetTick>
 8005d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d74:	e00a      	b.n	8005d8c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d76:	f7fd f89b 	bl	8002eb0 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d901      	bls.n	8005d8c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e0ce      	b.n	8005f2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d8c:	4b4b      	ldr	r3, [pc, #300]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d90:	f003 0302 	and.w	r3, r3, #2
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d0ee      	beq.n	8005d76 <HAL_RCC_OscConfig+0x386>
 8005d98:	e014      	b.n	8005dc4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d9a:	f7fd f889 	bl	8002eb0 <HAL_GetTick>
 8005d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005da0:	e00a      	b.n	8005db8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005da2:	f7fd f885 	bl	8002eb0 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d901      	bls.n	8005db8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e0b8      	b.n	8005f2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005db8:	4b40      	ldr	r3, [pc, #256]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dbc:	f003 0302 	and.w	r3, r3, #2
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1ee      	bne.n	8005da2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005dc4:	7dfb      	ldrb	r3, [r7, #23]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d105      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dca:	4b3c      	ldr	r3, [pc, #240]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dce:	4a3b      	ldr	r2, [pc, #236]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005dd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005dd4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f000 80a4 	beq.w	8005f28 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005de0:	4b36      	ldr	r3, [pc, #216]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f003 030c 	and.w	r3, r3, #12
 8005de8:	2b08      	cmp	r3, #8
 8005dea:	d06b      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d149      	bne.n	8005e88 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005df4:	4b31      	ldr	r3, [pc, #196]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a30      	ldr	r2, [pc, #192]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005dfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e00:	f7fd f856 	bl	8002eb0 <HAL_GetTick>
 8005e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e06:	e008      	b.n	8005e1a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e08:	f7fd f852 	bl	8002eb0 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e087      	b.n	8005f2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e1a:	4b28      	ldr	r3, [pc, #160]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1f0      	bne.n	8005e08 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	69da      	ldr	r2, [r3, #28]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e34:	019b      	lsls	r3, r3, #6
 8005e36:	431a      	orrs	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e3c:	085b      	lsrs	r3, r3, #1
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	041b      	lsls	r3, r3, #16
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e48:	061b      	lsls	r3, r3, #24
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	4a1b      	ldr	r2, [pc, #108]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005e4e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005e52:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e54:	4b19      	ldr	r3, [pc, #100]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a18      	ldr	r2, [pc, #96]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005e5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e60:	f7fd f826 	bl	8002eb0 <HAL_GetTick>
 8005e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e66:	e008      	b.n	8005e7a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e68:	f7fd f822 	bl	8002eb0 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e057      	b.n	8005f2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e7a:	4b10      	ldr	r3, [pc, #64]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d0f0      	beq.n	8005e68 <HAL_RCC_OscConfig+0x478>
 8005e86:	e04f      	b.n	8005f28 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e88:	4b0c      	ldr	r3, [pc, #48]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a0b      	ldr	r2, [pc, #44]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005e8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e94:	f7fd f80c 	bl	8002eb0 <HAL_GetTick>
 8005e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e9a:	e008      	b.n	8005eae <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e9c:	f7fd f808 	bl	8002eb0 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e03d      	b.n	8005f2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eae:	4b03      	ldr	r3, [pc, #12]	@ (8005ebc <HAL_RCC_OscConfig+0x4cc>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1f0      	bne.n	8005e9c <HAL_RCC_OscConfig+0x4ac>
 8005eba:	e035      	b.n	8005f28 <HAL_RCC_OscConfig+0x538>
 8005ebc:	40023800 	.word	0x40023800
 8005ec0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8005f34 <HAL_RCC_OscConfig+0x544>)
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d028      	beq.n	8005f24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d121      	bne.n	8005f24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d11a      	bne.n	8005f24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005efa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d111      	bne.n	8005f24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f0a:	085b      	lsrs	r3, r3, #1
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d107      	bne.n	8005f24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f1e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d001      	beq.n	8005f28 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e000      	b.n	8005f2a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3718      	adds	r7, #24
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	40023800 	.word	0x40023800

08005f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005f42:	2300      	movs	r3, #0
 8005f44:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d101      	bne.n	8005f50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e0d0      	b.n	80060f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f50:	4b6a      	ldr	r3, [pc, #424]	@ (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 030f 	and.w	r3, r3, #15
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d910      	bls.n	8005f80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f5e:	4b67      	ldr	r3, [pc, #412]	@ (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f023 020f 	bic.w	r2, r3, #15
 8005f66:	4965      	ldr	r1, [pc, #404]	@ (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f6e:	4b63      	ldr	r3, [pc, #396]	@ (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 030f 	and.w	r3, r3, #15
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d001      	beq.n	8005f80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e0b8      	b.n	80060f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d020      	beq.n	8005fce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0304 	and.w	r3, r3, #4
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d005      	beq.n	8005fa4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f98:	4b59      	ldr	r3, [pc, #356]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	4a58      	ldr	r2, [pc, #352]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 8005f9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005fa2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0308 	and.w	r3, r3, #8
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d005      	beq.n	8005fbc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fb0:	4b53      	ldr	r3, [pc, #332]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	4a52      	ldr	r2, [pc, #328]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 8005fb6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005fba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fbc:	4b50      	ldr	r3, [pc, #320]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	494d      	ldr	r1, [pc, #308]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d040      	beq.n	800605c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d107      	bne.n	8005ff2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fe2:	4b47      	ldr	r3, [pc, #284]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d115      	bne.n	800601a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e07f      	b.n	80060f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d107      	bne.n	800600a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ffa:	4b41      	ldr	r3, [pc, #260]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d109      	bne.n	800601a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e073      	b.n	80060f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800600a:	4b3d      	ldr	r3, [pc, #244]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e06b      	b.n	80060f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800601a:	4b39      	ldr	r3, [pc, #228]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f023 0203 	bic.w	r2, r3, #3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	4936      	ldr	r1, [pc, #216]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 8006028:	4313      	orrs	r3, r2
 800602a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800602c:	f7fc ff40 	bl	8002eb0 <HAL_GetTick>
 8006030:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006032:	e00a      	b.n	800604a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006034:	f7fc ff3c 	bl	8002eb0 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006042:	4293      	cmp	r3, r2
 8006044:	d901      	bls.n	800604a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e053      	b.n	80060f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800604a:	4b2d      	ldr	r3, [pc, #180]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f003 020c 	and.w	r2, r3, #12
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	429a      	cmp	r2, r3
 800605a:	d1eb      	bne.n	8006034 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800605c:	4b27      	ldr	r3, [pc, #156]	@ (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 030f 	and.w	r3, r3, #15
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	429a      	cmp	r2, r3
 8006068:	d210      	bcs.n	800608c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800606a:	4b24      	ldr	r3, [pc, #144]	@ (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f023 020f 	bic.w	r2, r3, #15
 8006072:	4922      	ldr	r1, [pc, #136]	@ (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	4313      	orrs	r3, r2
 8006078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800607a:	4b20      	ldr	r3, [pc, #128]	@ (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 030f 	and.w	r3, r3, #15
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	429a      	cmp	r2, r3
 8006086:	d001      	beq.n	800608c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e032      	b.n	80060f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0304 	and.w	r3, r3, #4
 8006094:	2b00      	cmp	r3, #0
 8006096:	d008      	beq.n	80060aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006098:	4b19      	ldr	r3, [pc, #100]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	4916      	ldr	r1, [pc, #88]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0308 	and.w	r3, r3, #8
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d009      	beq.n	80060ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80060b6:	4b12      	ldr	r3, [pc, #72]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	00db      	lsls	r3, r3, #3
 80060c4:	490e      	ldr	r1, [pc, #56]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80060ca:	f000 f831 	bl	8006130 <HAL_RCC_GetSysClockFreq>
 80060ce:	4602      	mov	r2, r0
 80060d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	091b      	lsrs	r3, r3, #4
 80060d6:	f003 030f 	and.w	r3, r3, #15
 80060da:	490a      	ldr	r1, [pc, #40]	@ (8006104 <HAL_RCC_ClockConfig+0x1cc>)
 80060dc:	5ccb      	ldrb	r3, [r1, r3]
 80060de:	fa22 f303 	lsr.w	r3, r2, r3
 80060e2:	4a09      	ldr	r2, [pc, #36]	@ (8006108 <HAL_RCC_ClockConfig+0x1d0>)
 80060e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80060e6:	4b09      	ldr	r3, [pc, #36]	@ (800610c <HAL_RCC_ClockConfig+0x1d4>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fc fe9c 	bl	8002e28 <HAL_InitTick>

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	40023c00 	.word	0x40023c00
 8006100:	40023800 	.word	0x40023800
 8006104:	08012024 	.word	0x08012024
 8006108:	20000000 	.word	0x20000000
 800610c:	20000004 	.word	0x20000004

08006110 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006110:	b480      	push	{r7}
 8006112:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8006114:	4b05      	ldr	r3, [pc, #20]	@ (800612c <HAL_RCC_EnableCSS+0x1c>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a04      	ldr	r2, [pc, #16]	@ (800612c <HAL_RCC_EnableCSS+0x1c>)
 800611a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800611e:	6013      	str	r3, [r2, #0]
}
 8006120:	bf00      	nop
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	40023800 	.word	0x40023800

08006130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006134:	b094      	sub	sp, #80	@ 0x50
 8006136:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006138:	2300      	movs	r3, #0
 800613a:	647b      	str	r3, [r7, #68]	@ 0x44
 800613c:	2300      	movs	r3, #0
 800613e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006140:	2300      	movs	r3, #0
 8006142:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8006144:	2300      	movs	r3, #0
 8006146:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006148:	4b79      	ldr	r3, [pc, #484]	@ (8006330 <HAL_RCC_GetSysClockFreq+0x200>)
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f003 030c 	and.w	r3, r3, #12
 8006150:	2b08      	cmp	r3, #8
 8006152:	d00d      	beq.n	8006170 <HAL_RCC_GetSysClockFreq+0x40>
 8006154:	2b08      	cmp	r3, #8
 8006156:	f200 80e1 	bhi.w	800631c <HAL_RCC_GetSysClockFreq+0x1ec>
 800615a:	2b00      	cmp	r3, #0
 800615c:	d002      	beq.n	8006164 <HAL_RCC_GetSysClockFreq+0x34>
 800615e:	2b04      	cmp	r3, #4
 8006160:	d003      	beq.n	800616a <HAL_RCC_GetSysClockFreq+0x3a>
 8006162:	e0db      	b.n	800631c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006164:	4b73      	ldr	r3, [pc, #460]	@ (8006334 <HAL_RCC_GetSysClockFreq+0x204>)
 8006166:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006168:	e0db      	b.n	8006322 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800616a:	4b73      	ldr	r3, [pc, #460]	@ (8006338 <HAL_RCC_GetSysClockFreq+0x208>)
 800616c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800616e:	e0d8      	b.n	8006322 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006170:	4b6f      	ldr	r3, [pc, #444]	@ (8006330 <HAL_RCC_GetSysClockFreq+0x200>)
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006178:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800617a:	4b6d      	ldr	r3, [pc, #436]	@ (8006330 <HAL_RCC_GetSysClockFreq+0x200>)
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d063      	beq.n	800624e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006186:	4b6a      	ldr	r3, [pc, #424]	@ (8006330 <HAL_RCC_GetSysClockFreq+0x200>)
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	099b      	lsrs	r3, r3, #6
 800618c:	2200      	movs	r2, #0
 800618e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006190:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006198:	633b      	str	r3, [r7, #48]	@ 0x30
 800619a:	2300      	movs	r3, #0
 800619c:	637b      	str	r3, [r7, #52]	@ 0x34
 800619e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80061a2:	4622      	mov	r2, r4
 80061a4:	462b      	mov	r3, r5
 80061a6:	f04f 0000 	mov.w	r0, #0
 80061aa:	f04f 0100 	mov.w	r1, #0
 80061ae:	0159      	lsls	r1, r3, #5
 80061b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061b4:	0150      	lsls	r0, r2, #5
 80061b6:	4602      	mov	r2, r0
 80061b8:	460b      	mov	r3, r1
 80061ba:	4621      	mov	r1, r4
 80061bc:	1a51      	subs	r1, r2, r1
 80061be:	6139      	str	r1, [r7, #16]
 80061c0:	4629      	mov	r1, r5
 80061c2:	eb63 0301 	sbc.w	r3, r3, r1
 80061c6:	617b      	str	r3, [r7, #20]
 80061c8:	f04f 0200 	mov.w	r2, #0
 80061cc:	f04f 0300 	mov.w	r3, #0
 80061d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061d4:	4659      	mov	r1, fp
 80061d6:	018b      	lsls	r3, r1, #6
 80061d8:	4651      	mov	r1, sl
 80061da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80061de:	4651      	mov	r1, sl
 80061e0:	018a      	lsls	r2, r1, #6
 80061e2:	4651      	mov	r1, sl
 80061e4:	ebb2 0801 	subs.w	r8, r2, r1
 80061e8:	4659      	mov	r1, fp
 80061ea:	eb63 0901 	sbc.w	r9, r3, r1
 80061ee:	f04f 0200 	mov.w	r2, #0
 80061f2:	f04f 0300 	mov.w	r3, #0
 80061f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006202:	4690      	mov	r8, r2
 8006204:	4699      	mov	r9, r3
 8006206:	4623      	mov	r3, r4
 8006208:	eb18 0303 	adds.w	r3, r8, r3
 800620c:	60bb      	str	r3, [r7, #8]
 800620e:	462b      	mov	r3, r5
 8006210:	eb49 0303 	adc.w	r3, r9, r3
 8006214:	60fb      	str	r3, [r7, #12]
 8006216:	f04f 0200 	mov.w	r2, #0
 800621a:	f04f 0300 	mov.w	r3, #0
 800621e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006222:	4629      	mov	r1, r5
 8006224:	024b      	lsls	r3, r1, #9
 8006226:	4621      	mov	r1, r4
 8006228:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800622c:	4621      	mov	r1, r4
 800622e:	024a      	lsls	r2, r1, #9
 8006230:	4610      	mov	r0, r2
 8006232:	4619      	mov	r1, r3
 8006234:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006236:	2200      	movs	r2, #0
 8006238:	62bb      	str	r3, [r7, #40]	@ 0x28
 800623a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800623c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006240:	f7fa fcda 	bl	8000bf8 <__aeabi_uldivmod>
 8006244:	4602      	mov	r2, r0
 8006246:	460b      	mov	r3, r1
 8006248:	4613      	mov	r3, r2
 800624a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800624c:	e058      	b.n	8006300 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800624e:	4b38      	ldr	r3, [pc, #224]	@ (8006330 <HAL_RCC_GetSysClockFreq+0x200>)
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	099b      	lsrs	r3, r3, #6
 8006254:	2200      	movs	r2, #0
 8006256:	4618      	mov	r0, r3
 8006258:	4611      	mov	r1, r2
 800625a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800625e:	623b      	str	r3, [r7, #32]
 8006260:	2300      	movs	r3, #0
 8006262:	627b      	str	r3, [r7, #36]	@ 0x24
 8006264:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006268:	4642      	mov	r2, r8
 800626a:	464b      	mov	r3, r9
 800626c:	f04f 0000 	mov.w	r0, #0
 8006270:	f04f 0100 	mov.w	r1, #0
 8006274:	0159      	lsls	r1, r3, #5
 8006276:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800627a:	0150      	lsls	r0, r2, #5
 800627c:	4602      	mov	r2, r0
 800627e:	460b      	mov	r3, r1
 8006280:	4641      	mov	r1, r8
 8006282:	ebb2 0a01 	subs.w	sl, r2, r1
 8006286:	4649      	mov	r1, r9
 8006288:	eb63 0b01 	sbc.w	fp, r3, r1
 800628c:	f04f 0200 	mov.w	r2, #0
 8006290:	f04f 0300 	mov.w	r3, #0
 8006294:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006298:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800629c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80062a0:	ebb2 040a 	subs.w	r4, r2, sl
 80062a4:	eb63 050b 	sbc.w	r5, r3, fp
 80062a8:	f04f 0200 	mov.w	r2, #0
 80062ac:	f04f 0300 	mov.w	r3, #0
 80062b0:	00eb      	lsls	r3, r5, #3
 80062b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062b6:	00e2      	lsls	r2, r4, #3
 80062b8:	4614      	mov	r4, r2
 80062ba:	461d      	mov	r5, r3
 80062bc:	4643      	mov	r3, r8
 80062be:	18e3      	adds	r3, r4, r3
 80062c0:	603b      	str	r3, [r7, #0]
 80062c2:	464b      	mov	r3, r9
 80062c4:	eb45 0303 	adc.w	r3, r5, r3
 80062c8:	607b      	str	r3, [r7, #4]
 80062ca:	f04f 0200 	mov.w	r2, #0
 80062ce:	f04f 0300 	mov.w	r3, #0
 80062d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80062d6:	4629      	mov	r1, r5
 80062d8:	028b      	lsls	r3, r1, #10
 80062da:	4621      	mov	r1, r4
 80062dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062e0:	4621      	mov	r1, r4
 80062e2:	028a      	lsls	r2, r1, #10
 80062e4:	4610      	mov	r0, r2
 80062e6:	4619      	mov	r1, r3
 80062e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062ea:	2200      	movs	r2, #0
 80062ec:	61bb      	str	r3, [r7, #24]
 80062ee:	61fa      	str	r2, [r7, #28]
 80062f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062f4:	f7fa fc80 	bl	8000bf8 <__aeabi_uldivmod>
 80062f8:	4602      	mov	r2, r0
 80062fa:	460b      	mov	r3, r1
 80062fc:	4613      	mov	r3, r2
 80062fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006300:	4b0b      	ldr	r3, [pc, #44]	@ (8006330 <HAL_RCC_GetSysClockFreq+0x200>)
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	0c1b      	lsrs	r3, r3, #16
 8006306:	f003 0303 	and.w	r3, r3, #3
 800630a:	3301      	adds	r3, #1
 800630c:	005b      	lsls	r3, r3, #1
 800630e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006310:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006312:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006314:	fbb2 f3f3 	udiv	r3, r2, r3
 8006318:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800631a:	e002      	b.n	8006322 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800631c:	4b05      	ldr	r3, [pc, #20]	@ (8006334 <HAL_RCC_GetSysClockFreq+0x204>)
 800631e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006320:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006322:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006324:	4618      	mov	r0, r3
 8006326:	3750      	adds	r7, #80	@ 0x50
 8006328:	46bd      	mov	sp, r7
 800632a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800632e:	bf00      	nop
 8006330:	40023800 	.word	0x40023800
 8006334:	00f42400 	.word	0x00f42400
 8006338:	007a1200 	.word	0x007a1200

0800633c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800633c:	b480      	push	{r7}
 800633e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006340:	4b03      	ldr	r3, [pc, #12]	@ (8006350 <HAL_RCC_GetHCLKFreq+0x14>)
 8006342:	681b      	ldr	r3, [r3, #0]
}
 8006344:	4618      	mov	r0, r3
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	20000000 	.word	0x20000000

08006354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006358:	f7ff fff0 	bl	800633c <HAL_RCC_GetHCLKFreq>
 800635c:	4602      	mov	r2, r0
 800635e:	4b05      	ldr	r3, [pc, #20]	@ (8006374 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	0a9b      	lsrs	r3, r3, #10
 8006364:	f003 0307 	and.w	r3, r3, #7
 8006368:	4903      	ldr	r1, [pc, #12]	@ (8006378 <HAL_RCC_GetPCLK1Freq+0x24>)
 800636a:	5ccb      	ldrb	r3, [r1, r3]
 800636c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006370:	4618      	mov	r0, r3
 8006372:	bd80      	pop	{r7, pc}
 8006374:	40023800 	.word	0x40023800
 8006378:	08012034 	.word	0x08012034

0800637c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006380:	f7ff ffdc 	bl	800633c <HAL_RCC_GetHCLKFreq>
 8006384:	4602      	mov	r2, r0
 8006386:	4b05      	ldr	r3, [pc, #20]	@ (800639c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	0b5b      	lsrs	r3, r3, #13
 800638c:	f003 0307 	and.w	r3, r3, #7
 8006390:	4903      	ldr	r1, [pc, #12]	@ (80063a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006392:	5ccb      	ldrb	r3, [r1, r3]
 8006394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006398:	4618      	mov	r0, r3
 800639a:	bd80      	pop	{r7, pc}
 800639c:	40023800 	.word	0x40023800
 80063a0:	08012034 	.word	0x08012034

080063a4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80063a8:	4b06      	ldr	r3, [pc, #24]	@ (80063c4 <HAL_RCC_NMI_IRQHandler+0x20>)
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063b0:	2b80      	cmp	r3, #128	@ 0x80
 80063b2:	d104      	bne.n	80063be <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80063b4:	f000 f80a 	bl	80063cc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80063b8:	4b03      	ldr	r3, [pc, #12]	@ (80063c8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80063ba:	2280      	movs	r2, #128	@ 0x80
 80063bc:	701a      	strb	r2, [r3, #0]
  }
}
 80063be:	bf00      	nop
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	40023800 	.word	0x40023800
 80063c8:	4002380e 	.word	0x4002380e

080063cc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80063cc:	b480      	push	{r7}
 80063ce:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80063d0:	bf00      	nop
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
	...

080063dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b088      	sub	sp, #32
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80063e4:	2300      	movs	r3, #0
 80063e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80063e8:	2300      	movs	r3, #0
 80063ea:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80063ec:	2300      	movs	r3, #0
 80063ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80063f0:	2300      	movs	r3, #0
 80063f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d012      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006400:	4b65      	ldr	r3, [pc, #404]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	4a64      	ldr	r2, [pc, #400]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006406:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800640a:	6093      	str	r3, [r2, #8]
 800640c:	4b62      	ldr	r3, [pc, #392]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800640e:	689a      	ldr	r2, [r3, #8]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006414:	4960      	ldr	r1, [pc, #384]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006416:	4313      	orrs	r3, r2
 8006418:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8006422:	2301      	movs	r3, #1
 8006424:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d017      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006432:	4b59      	ldr	r3, [pc, #356]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006434:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006438:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006440:	4955      	ldr	r1, [pc, #340]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006442:	4313      	orrs	r3, r2
 8006444:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800644c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006450:	d101      	bne.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8006452:	2301      	movs	r3, #1
 8006454:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800645e:	2301      	movs	r3, #1
 8006460:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d017      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800646e:	4b4a      	ldr	r3, [pc, #296]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006470:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006474:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800647c:	4946      	ldr	r1, [pc, #280]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800647e:	4313      	orrs	r3, r2
 8006480:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006488:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800648c:	d101      	bne.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800648e:	2301      	movs	r3, #1
 8006490:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800649a:	2301      	movs	r3, #1
 800649c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0320 	and.w	r3, r3, #32
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 808b 	beq.w	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80064ac:	4b3a      	ldr	r3, [pc, #232]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80064ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b0:	4a39      	ldr	r2, [pc, #228]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80064b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80064b8:	4b37      	ldr	r3, [pc, #220]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80064ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064c0:	60fb      	str	r3, [r7, #12]
 80064c2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80064c4:	4b35      	ldr	r3, [pc, #212]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a34      	ldr	r2, [pc, #208]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80064ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064d0:	f7fc fcee 	bl	8002eb0 <HAL_GetTick>
 80064d4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80064d6:	e008      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064d8:	f7fc fcea 	bl	8002eb0 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	2b64      	cmp	r3, #100	@ 0x64
 80064e4:	d901      	bls.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e2bc      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80064ea:	4b2c      	ldr	r3, [pc, #176]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d0f0      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064f6:	4b28      	ldr	r3, [pc, #160]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80064f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064fe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d035      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800650a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	429a      	cmp	r2, r3
 8006512:	d02e      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006514:	4b20      	ldr	r3, [pc, #128]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006518:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800651c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800651e:	4b1e      	ldr	r3, [pc, #120]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006522:	4a1d      	ldr	r2, [pc, #116]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006524:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006528:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800652a:	4b1b      	ldr	r3, [pc, #108]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800652c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800652e:	4a1a      	ldr	r2, [pc, #104]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006530:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006534:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006536:	4a18      	ldr	r2, [pc, #96]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800653c:	4b16      	ldr	r3, [pc, #88]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800653e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b01      	cmp	r3, #1
 8006546:	d114      	bne.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006548:	f7fc fcb2 	bl	8002eb0 <HAL_GetTick>
 800654c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800654e:	e00a      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006550:	f7fc fcae 	bl	8002eb0 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800655e:	4293      	cmp	r3, r2
 8006560:	d901      	bls.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e27e      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006566:	4b0c      	ldr	r3, [pc, #48]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d0ee      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006576:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800657a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800657e:	d111      	bne.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8006580:	4b05      	ldr	r3, [pc, #20]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800658c:	4b04      	ldr	r3, [pc, #16]	@ (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800658e:	400b      	ands	r3, r1
 8006590:	4901      	ldr	r1, [pc, #4]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006592:	4313      	orrs	r3, r2
 8006594:	608b      	str	r3, [r1, #8]
 8006596:	e00b      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006598:	40023800 	.word	0x40023800
 800659c:	40007000 	.word	0x40007000
 80065a0:	0ffffcff 	.word	0x0ffffcff
 80065a4:	4ba4      	ldr	r3, [pc, #656]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	4aa3      	ldr	r2, [pc, #652]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80065aa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80065ae:	6093      	str	r3, [r2, #8]
 80065b0:	4ba1      	ldr	r3, [pc, #644]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80065b2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065bc:	499e      	ldr	r1, [pc, #632]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 0310 	and.w	r3, r3, #16
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d010      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065ce:	4b9a      	ldr	r3, [pc, #616]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80065d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065d4:	4a98      	ldr	r2, [pc, #608]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80065d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80065de:	4b96      	ldr	r3, [pc, #600]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80065e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065e8:	4993      	ldr	r1, [pc, #588]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00a      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065fc:	4b8e      	ldr	r3, [pc, #568]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80065fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006602:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800660a:	498b      	ldr	r1, [pc, #556]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800660c:	4313      	orrs	r3, r2
 800660e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00a      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800661e:	4b86      	ldr	r3, [pc, #536]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006624:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800662c:	4982      	ldr	r1, [pc, #520]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800662e:	4313      	orrs	r3, r2
 8006630:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00a      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006640:	4b7d      	ldr	r3, [pc, #500]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006646:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800664e:	497a      	ldr	r1, [pc, #488]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006650:	4313      	orrs	r3, r2
 8006652:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00a      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006662:	4b75      	ldr	r3, [pc, #468]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006664:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006668:	f023 0203 	bic.w	r2, r3, #3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006670:	4971      	ldr	r1, [pc, #452]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006672:	4313      	orrs	r3, r2
 8006674:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00a      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006684:	4b6c      	ldr	r3, [pc, #432]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800668a:	f023 020c 	bic.w	r2, r3, #12
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006692:	4969      	ldr	r1, [pc, #420]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006694:	4313      	orrs	r3, r2
 8006696:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00a      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80066a6:	4b64      	ldr	r3, [pc, #400]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80066a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066b4:	4960      	ldr	r1, [pc, #384]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00a      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80066c8:	4b5b      	ldr	r3, [pc, #364]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80066ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066d6:	4958      	ldr	r1, [pc, #352]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00a      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80066ea:	4b53      	ldr	r3, [pc, #332]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80066ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066f8:	494f      	ldr	r1, [pc, #316]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00a      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800670c:	4b4a      	ldr	r3, [pc, #296]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800670e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006712:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800671a:	4947      	ldr	r1, [pc, #284]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800671c:	4313      	orrs	r3, r2
 800671e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800672e:	4b42      	ldr	r3, [pc, #264]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006734:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800673c:	493e      	ldr	r1, [pc, #248]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800673e:	4313      	orrs	r3, r2
 8006740:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00a      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006750:	4b39      	ldr	r3, [pc, #228]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006756:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800675e:	4936      	ldr	r1, [pc, #216]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006760:	4313      	orrs	r3, r2
 8006762:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d011      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006772:	4b31      	ldr	r3, [pc, #196]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006778:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006780:	492d      	ldr	r1, [pc, #180]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006782:	4313      	orrs	r3, r2
 8006784:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800678c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006790:	d101      	bne.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8006792:	2301      	movs	r3, #1
 8006794:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00a      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067a2:	4b25      	ldr	r3, [pc, #148]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80067a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067a8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067b0:	4921      	ldr	r1, [pc, #132]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00a      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80067c4:	4b1c      	ldr	r3, [pc, #112]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80067c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ca:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067d2:	4919      	ldr	r1, [pc, #100]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80067d4:	4313      	orrs	r3, r2
 80067d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00a      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80067e6:	4b14      	ldr	r3, [pc, #80]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80067e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ec:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067f4:	4910      	ldr	r1, [pc, #64]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80067f6:	4313      	orrs	r3, r2
 80067f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d006      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 809d 	beq.w	800694a <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006810:	4b09      	ldr	r3, [pc, #36]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a08      	ldr	r2, [pc, #32]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006816:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800681a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800681c:	f7fc fb48 	bl	8002eb0 <HAL_GetTick>
 8006820:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006822:	e00b      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006824:	f7fc fb44 	bl	8002eb0 <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	2b64      	cmp	r3, #100	@ 0x64
 8006830:	d904      	bls.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e116      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8006836:	bf00      	nop
 8006838:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800683c:	4b8b      	ldr	r3, [pc, #556]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1ed      	bne.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	2b00      	cmp	r3, #0
 8006852:	d017      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006858:	2b00      	cmp	r3, #0
 800685a:	d113      	bne.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800685c:	4b83      	ldr	r3, [pc, #524]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800685e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006862:	0e1b      	lsrs	r3, r3, #24
 8006864:	f003 030f 	and.w	r3, r3, #15
 8006868:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	019a      	lsls	r2, r3, #6
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	061b      	lsls	r3, r3, #24
 8006874:	431a      	orrs	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	071b      	lsls	r3, r3, #28
 800687c:	497b      	ldr	r1, [pc, #492]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800687e:	4313      	orrs	r3, r2
 8006880:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d004      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006894:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006898:	d00a      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d024      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80068ae:	d11f      	bne.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80068b0:	4b6e      	ldr	r3, [pc, #440]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80068b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068b6:	0f1b      	lsrs	r3, r3, #28
 80068b8:	f003 0307 	and.w	r3, r3, #7
 80068bc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	019a      	lsls	r2, r3, #6
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	061b      	lsls	r3, r3, #24
 80068ca:	431a      	orrs	r2, r3
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	071b      	lsls	r3, r3, #28
 80068d0:	4966      	ldr	r1, [pc, #408]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80068d2:	4313      	orrs	r3, r2
 80068d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80068d8:	4b64      	ldr	r3, [pc, #400]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80068da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068de:	f023 021f 	bic.w	r2, r3, #31
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	3b01      	subs	r3, #1
 80068e8:	4960      	ldr	r1, [pc, #384]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00d      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	019a      	lsls	r2, r3, #6
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	061b      	lsls	r3, r3, #24
 8006908:	431a      	orrs	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	071b      	lsls	r3, r3, #28
 8006910:	4956      	ldr	r1, [pc, #344]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006912:	4313      	orrs	r3, r2
 8006914:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006918:	4b54      	ldr	r3, [pc, #336]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a53      	ldr	r2, [pc, #332]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800691e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006922:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006924:	f7fc fac4 	bl	8002eb0 <HAL_GetTick>
 8006928:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800692a:	e008      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800692c:	f7fc fac0 	bl	8002eb0 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	2b64      	cmp	r3, #100	@ 0x64
 8006938:	d901      	bls.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e092      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800693e:	4b4b      	ldr	r3, [pc, #300]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d0f0      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	2b01      	cmp	r3, #1
 800694e:	f040 8088 	bne.w	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006952:	4b46      	ldr	r3, [pc, #280]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a45      	ldr	r2, [pc, #276]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006958:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800695c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800695e:	f7fc faa7 	bl	8002eb0 <HAL_GetTick>
 8006962:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006964:	e008      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006966:	f7fc faa3 	bl	8002eb0 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	2b64      	cmp	r3, #100	@ 0x64
 8006972:	d901      	bls.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e075      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006978:	4b3c      	ldr	r3, [pc, #240]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006980:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006984:	d0ef      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006996:	2b00      	cmp	r3, #0
 8006998:	d009      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d024      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d120      	bne.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80069ae:	4b2f      	ldr	r3, [pc, #188]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80069b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069b4:	0c1b      	lsrs	r3, r3, #16
 80069b6:	f003 0303 	and.w	r3, r3, #3
 80069ba:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	019a      	lsls	r2, r3, #6
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	041b      	lsls	r3, r3, #16
 80069c6:	431a      	orrs	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	061b      	lsls	r3, r3, #24
 80069ce:	4927      	ldr	r1, [pc, #156]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80069d0:	4313      	orrs	r3, r2
 80069d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80069d6:	4b25      	ldr	r3, [pc, #148]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80069d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069dc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a1b      	ldr	r3, [r3, #32]
 80069e4:	3b01      	subs	r3, #1
 80069e6:	021b      	lsls	r3, r3, #8
 80069e8:	4920      	ldr	r1, [pc, #128]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d018      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x652>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a04:	d113      	bne.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006a06:	4b19      	ldr	r3, [pc, #100]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a0c:	0e1b      	lsrs	r3, r3, #24
 8006a0e:	f003 030f 	and.w	r3, r3, #15
 8006a12:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	019a      	lsls	r2, r3, #6
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	041b      	lsls	r3, r3, #16
 8006a20:	431a      	orrs	r2, r3
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	061b      	lsls	r3, r3, #24
 8006a26:	4911      	ldr	r1, [pc, #68]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a0e      	ldr	r2, [pc, #56]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a3a:	f7fc fa39 	bl	8002eb0 <HAL_GetTick>
 8006a3e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006a40:	e008      	b.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006a42:	f7fc fa35 	bl	8002eb0 <HAL_GetTick>
 8006a46:	4602      	mov	r2, r0
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	2b64      	cmp	r3, #100	@ 0x64
 8006a4e:	d901      	bls.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e007      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006a54:	4b05      	ldr	r3, [pc, #20]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a60:	d1ef      	bne.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3720      	adds	r7, #32
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	40023800 	.word	0x40023800

08006a70 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e022      	b.n	8006ac8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d105      	bne.n	8006a9a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7fb fbb1 	bl	80021fc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2203      	movs	r2, #3
 8006a9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f814 	bl	8006ad0 <HAL_SD_InitCard>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e00a      	b.n	8006ac8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3708      	adds	r7, #8
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006ad0:	b5b0      	push	{r4, r5, r7, lr}
 8006ad2:	b08e      	sub	sp, #56	@ 0x38
 8006ad4:	af04      	add	r7, sp, #16
 8006ad6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006adc:	2300      	movs	r3, #0
 8006ade:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006aec:	2376      	movs	r3, #118	@ 0x76
 8006aee:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681d      	ldr	r5, [r3, #0]
 8006af4:	466c      	mov	r4, sp
 8006af6:	f107 0314 	add.w	r3, r7, #20
 8006afa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006afe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006b02:	f107 0308 	add.w	r3, r7, #8
 8006b06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b08:	4628      	mov	r0, r5
 8006b0a:	f003 fb6d 	bl	800a1e8 <SDMMC_Init>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8006b14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d001      	beq.n	8006b20 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e059      	b.n	8006bd4 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b2e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4618      	mov	r0, r3
 8006b36:	f003 fba1 	bl	800a27c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	685a      	ldr	r2, [r3, #4]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b48:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8006b4a:	2002      	movs	r0, #2
 8006b4c:	f7fc f9bc 	bl	8002ec8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 ff01 	bl	8007958 <SD_PowerON>
 8006b56:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b58:	6a3b      	ldr	r3, [r7, #32]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00b      	beq.n	8006b76 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b6a:	6a3b      	ldr	r3, [r7, #32]
 8006b6c:	431a      	orrs	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e02e      	b.n	8006bd4 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 fe20 	bl	80077bc <SD_InitCard>
 8006b7c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b7e:	6a3b      	ldr	r3, [r7, #32]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00b      	beq.n	8006b9c <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b90:	6a3b      	ldr	r3, [r7, #32]
 8006b92:	431a      	orrs	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e01b      	b.n	8006bd4 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f003 fbfb 	bl	800a3a0 <SDMMC_CmdBlockLength>
 8006baa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bac:	6a3b      	ldr	r3, [r7, #32]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00f      	beq.n	8006bd2 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a09      	ldr	r2, [pc, #36]	@ (8006bdc <HAL_SD_InitCard+0x10c>)
 8006bb8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bbe:	6a3b      	ldr	r3, [r7, #32]
 8006bc0:	431a      	orrs	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e000      	b.n	8006bd4 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3728      	adds	r7, #40	@ 0x28
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bdb0      	pop	{r4, r5, r7, pc}
 8006bdc:	004005ff 	.word	0x004005ff

08006be0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b092      	sub	sp, #72	@ 0x48
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
 8006bec:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006bee:	f7fc f95f 	bl	8002eb0 <HAL_GetTick>
 8006bf2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d107      	bne.n	8006c12 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c06:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e1bd      	b.n	8006f8e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	f040 81b0 	bne.w	8006f80 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006c26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	441a      	add	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d907      	bls.n	8006c44 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c38:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e1a4      	b.n	8006f8e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2203      	movs	r2, #3
 8006c48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2200      	movs	r2, #0
 8006c52:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d002      	beq.n	8006c62 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c5e:	025b      	lsls	r3, r3, #9
 8006c60:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006c62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006c66:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	025b      	lsls	r3, r3, #9
 8006c6c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006c6e:	2390      	movs	r3, #144	@ 0x90
 8006c70:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006c72:	2302      	movs	r3, #2
 8006c74:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f107 0214 	add.w	r2, r7, #20
 8006c86:	4611      	mov	r1, r2
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f003 fb5d 	bl	800a348 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d90a      	bls.n	8006caa <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2202      	movs	r2, #2
 8006c98:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f003 fbc1 	bl	800a428 <SDMMC_CmdReadMultiBlock>
 8006ca6:	6478      	str	r0, [r7, #68]	@ 0x44
 8006ca8:	e009      	b.n	8006cbe <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2201      	movs	r2, #1
 8006cae:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f003 fb94 	bl	800a3e4 <SDMMC_CmdReadSingleBlock>
 8006cbc:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d012      	beq.n	8006cea <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a7a      	ldr	r2, [pc, #488]	@ (8006eb4 <HAL_SD_ReadBlocks+0x2d4>)
 8006cca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cd2:	431a      	orrs	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e151      	b.n	8006f8e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006cee:	e061      	b.n	8006db4 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cf6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d03c      	beq.n	8006d78 <HAL_SD_ReadBlocks+0x198>
 8006cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d039      	beq.n	8006d78 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006d04:	2300      	movs	r3, #0
 8006d06:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d08:	e033      	b.n	8006d72 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f003 fa96 	bl	800a240 <SDMMC_ReadFIFO>
 8006d14:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d18:	b2da      	uxtb	r2, r3
 8006d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d1c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d20:	3301      	adds	r3, #1
 8006d22:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d26:	3b01      	subs	r3, #1
 8006d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d2c:	0a1b      	lsrs	r3, r3, #8
 8006d2e:	b2da      	uxtb	r2, r3
 8006d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d32:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d36:	3301      	adds	r3, #1
 8006d38:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d42:	0c1b      	lsrs	r3, r3, #16
 8006d44:	b2da      	uxtb	r2, r3
 8006d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d48:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006d50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d52:	3b01      	subs	r3, #1
 8006d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d58:	0e1b      	lsrs	r3, r3, #24
 8006d5a:	b2da      	uxtb	r2, r3
 8006d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d5e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d62:	3301      	adds	r3, #1
 8006d64:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006d66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8006d6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d6e:	3301      	adds	r3, #1
 8006d70:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d74:	2b07      	cmp	r3, #7
 8006d76:	d9c8      	bls.n	8006d0a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006d78:	f7fc f89a 	bl	8002eb0 <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d902      	bls.n	8006d8e <HAL_SD_ReadBlocks+0x1ae>
 8006d88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d112      	bne.n	8006db4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a48      	ldr	r2, [pc, #288]	@ (8006eb4 <HAL_SD_ReadBlocks+0x2d4>)
 8006d94:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d9a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e0ec      	b.n	8006f8e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dba:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d096      	beq.n	8006cf0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d022      	beq.n	8006e16 <HAL_SD_ReadBlocks+0x236>
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d91f      	bls.n	8006e16 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	d01b      	beq.n	8006e16 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f003 fb86 	bl	800a4f4 <SDMMC_CmdStopTransfer>
 8006de8:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006dea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d012      	beq.n	8006e16 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a2f      	ldr	r2, [pc, #188]	@ (8006eb4 <HAL_SD_ReadBlocks+0x2d4>)
 8006df6:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006dfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e0bb      	b.n	8006f8e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e1c:	f003 0308 	and.w	r3, r3, #8
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d012      	beq.n	8006e4a <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a22      	ldr	r2, [pc, #136]	@ (8006eb4 <HAL_SD_ReadBlocks+0x2d4>)
 8006e2a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e30:	f043 0208 	orr.w	r2, r3, #8
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e0a1      	b.n	8006f8e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e50:	f003 0302 	and.w	r3, r3, #2
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d012      	beq.n	8006e7e <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a15      	ldr	r2, [pc, #84]	@ (8006eb4 <HAL_SD_ReadBlocks+0x2d4>)
 8006e5e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e64:	f043 0202 	orr.w	r2, r3, #2
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e087      	b.n	8006f8e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e84:	f003 0320 	and.w	r3, r3, #32
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d064      	beq.n	8006f56 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a08      	ldr	r2, [pc, #32]	@ (8006eb4 <HAL_SD_ReadBlocks+0x2d4>)
 8006e92:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e98:	f043 0220 	orr.w	r2, r3, #32
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e06d      	b.n	8006f8e <HAL_SD_ReadBlocks+0x3ae>
 8006eb2:	bf00      	nop
 8006eb4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f003 f9bf 	bl	800a240 <SDMMC_ReadFIFO>
 8006ec2:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec6:	b2da      	uxtb	r2, r3
 8006ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eca:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ece:	3301      	adds	r3, #1
 8006ed0:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006ed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eda:	0a1b      	lsrs	r3, r3, #8
 8006edc:	b2da      	uxtb	r2, r3
 8006ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006ee8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006eea:	3b01      	subs	r3, #1
 8006eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ef0:	0c1b      	lsrs	r3, r3, #16
 8006ef2:	b2da      	uxtb	r2, r3
 8006ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ef6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006efa:	3301      	adds	r3, #1
 8006efc:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006efe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f00:	3b01      	subs	r3, #1
 8006f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f06:	0e1b      	lsrs	r3, r3, #24
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f0c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f10:	3301      	adds	r3, #1
 8006f12:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f16:	3b01      	subs	r3, #1
 8006f18:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006f1a:	f7fb ffc9 	bl	8002eb0 <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d902      	bls.n	8006f30 <HAL_SD_ReadBlocks+0x350>
 8006f2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d112      	bne.n	8006f56 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a18      	ldr	r2, [pc, #96]	@ (8006f98 <HAL_SD_ReadBlocks+0x3b8>)
 8006f36:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f3c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e01b      	b.n	8006f8e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d002      	beq.n	8006f6a <HAL_SD_ReadBlocks+0x38a>
 8006f64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1a6      	bne.n	8006eb8 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006f72:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	e006      	b.n	8006f8e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f84:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
  }
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3748      	adds	r7, #72	@ 0x48
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	004005ff 	.word	0x004005ff

08006f9c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b092      	sub	sp, #72	@ 0x48
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
 8006fa8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006faa:	f7fb ff81 	bl	8002eb0 <HAL_GetTick>
 8006fae:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d107      	bne.n	8006fce <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e165      	b.n	800729a <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	f040 8158 	bne.w	800728c <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006fe2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	441a      	add	r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d907      	bls.n	8007000 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e14c      	b.n	800729a <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2203      	movs	r2, #3
 8007004:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2200      	movs	r2, #0
 800700e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007014:	2b01      	cmp	r3, #1
 8007016:	d002      	beq.n	800701e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8007018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800701a:	025b      	lsls	r3, r3, #9
 800701c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800701e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007022:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	025b      	lsls	r3, r3, #9
 8007028:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800702a:	2390      	movs	r3, #144	@ 0x90
 800702c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800702e:	2300      	movs	r3, #0
 8007030:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007032:	2300      	movs	r3, #0
 8007034:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007036:	2301      	movs	r3, #1
 8007038:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f107 0218 	add.w	r2, r7, #24
 8007042:	4611      	mov	r1, r2
 8007044:	4618      	mov	r0, r3
 8007046:	f003 f97f 	bl	800a348 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d90a      	bls.n	8007066 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2220      	movs	r2, #32
 8007054:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800705c:	4618      	mov	r0, r3
 800705e:	f003 fa27 	bl	800a4b0 <SDMMC_CmdWriteMultiBlock>
 8007062:	6478      	str	r0, [r7, #68]	@ 0x44
 8007064:	e009      	b.n	800707a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2210      	movs	r2, #16
 800706a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007072:	4618      	mov	r0, r3
 8007074:	f003 f9fa 	bl	800a46c <SDMMC_CmdWriteSingleBlock>
 8007078:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800707a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800707c:	2b00      	cmp	r3, #0
 800707e:	d012      	beq.n	80070a6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a87      	ldr	r2, [pc, #540]	@ (80072a4 <HAL_SD_WriteBlocks+0x308>)
 8007086:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800708c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800708e:	431a      	orrs	r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e0f9      	b.n	800729a <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80070aa:	e065      	b.n	8007178 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d040      	beq.n	800713c <HAL_SD_WriteBlocks+0x1a0>
 80070ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d03d      	beq.n	800713c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80070c0:	2300      	movs	r3, #0
 80070c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80070c4:	e037      	b.n	8007136 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80070c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80070cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ce:	3301      	adds	r3, #1
 80070d0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80070d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070d4:	3b01      	subs	r3, #1
 80070d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80070d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	021a      	lsls	r2, r3, #8
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80070e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070e6:	3301      	adds	r3, #1
 80070e8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80070ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070ec:	3b01      	subs	r3, #1
 80070ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80070f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	041a      	lsls	r2, r3, #16
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80070fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070fe:	3301      	adds	r3, #1
 8007100:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007104:	3b01      	subs	r3, #1
 8007106:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	061a      	lsls	r2, r3, #24
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	4313      	orrs	r3, r2
 8007112:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007116:	3301      	adds	r3, #1
 8007118:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800711a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800711c:	3b01      	subs	r3, #1
 800711e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f107 0214 	add.w	r2, r7, #20
 8007128:	4611      	mov	r1, r2
 800712a:	4618      	mov	r0, r3
 800712c:	f003 f895 	bl	800a25a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007130:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007132:	3301      	adds	r3, #1
 8007134:	643b      	str	r3, [r7, #64]	@ 0x40
 8007136:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007138:	2b07      	cmp	r3, #7
 800713a:	d9c4      	bls.n	80070c6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800713c:	f7fb feb8 	bl	8002eb0 <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007148:	429a      	cmp	r2, r3
 800714a:	d902      	bls.n	8007152 <HAL_SD_WriteBlocks+0x1b6>
 800714c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800714e:	2b00      	cmp	r3, #0
 8007150:	d112      	bne.n	8007178 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a53      	ldr	r2, [pc, #332]	@ (80072a4 <HAL_SD_WriteBlocks+0x308>)
 8007158:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800715e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007160:	431a      	orrs	r2, r3
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2201      	movs	r2, #1
 800716a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8007174:	2303      	movs	r3, #3
 8007176:	e090      	b.n	800729a <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800717e:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8007182:	2b00      	cmp	r3, #0
 8007184:	d092      	beq.n	80070ac <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800718c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007190:	2b00      	cmp	r3, #0
 8007192:	d022      	beq.n	80071da <HAL_SD_WriteBlocks+0x23e>
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d91f      	bls.n	80071da <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800719e:	2b03      	cmp	r3, #3
 80071a0:	d01b      	beq.n	80071da <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f003 f9a4 	bl	800a4f4 <SDMMC_CmdStopTransfer>
 80071ac:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80071ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d012      	beq.n	80071da <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a3a      	ldr	r2, [pc, #232]	@ (80072a4 <HAL_SD_WriteBlocks+0x308>)
 80071ba:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071c2:	431a      	orrs	r2, r3
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e05f      	b.n	800729a <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071e0:	f003 0308 	and.w	r3, r3, #8
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d012      	beq.n	800720e <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a2d      	ldr	r2, [pc, #180]	@ (80072a4 <HAL_SD_WriteBlocks+0x308>)
 80071ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f4:	f043 0208 	orr.w	r2, r3, #8
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e045      	b.n	800729a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007214:	f003 0302 	and.w	r3, r3, #2
 8007218:	2b00      	cmp	r3, #0
 800721a:	d012      	beq.n	8007242 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a20      	ldr	r2, [pc, #128]	@ (80072a4 <HAL_SD_WriteBlocks+0x308>)
 8007222:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007228:	f043 0202 	orr.w	r2, r3, #2
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e02b      	b.n	800729a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007248:	f003 0310 	and.w	r3, r3, #16
 800724c:	2b00      	cmp	r3, #0
 800724e:	d012      	beq.n	8007276 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a13      	ldr	r2, [pc, #76]	@ (80072a4 <HAL_SD_WriteBlocks+0x308>)
 8007256:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800725c:	f043 0210 	orr.w	r2, r3, #16
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e011      	b.n	800729a <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800727e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8007288:	2300      	movs	r3, #0
 800728a:	e006      	b.n	800729a <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007290:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
  }
}
 800729a:	4618      	mov	r0, r3
 800729c:	3748      	adds	r7, #72	@ 0x48
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	004005ff 	.word	0x004005ff

080072a8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072b6:	0f9b      	lsrs	r3, r3, #30
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072c2:	0e9b      	lsrs	r3, r3, #26
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	f003 030f 	and.w	r3, r3, #15
 80072ca:	b2da      	uxtb	r2, r3
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072d4:	0e1b      	lsrs	r3, r3, #24
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	f003 0303 	and.w	r3, r3, #3
 80072dc:	b2da      	uxtb	r2, r3
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072e6:	0c1b      	lsrs	r3, r3, #16
 80072e8:	b2da      	uxtb	r2, r3
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072f2:	0a1b      	lsrs	r3, r3, #8
 80072f4:	b2da      	uxtb	r2, r3
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072fe:	b2da      	uxtb	r2, r3
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007308:	0d1b      	lsrs	r3, r3, #20
 800730a:	b29a      	uxth	r2, r3
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007314:	0c1b      	lsrs	r3, r3, #16
 8007316:	b2db      	uxtb	r3, r3
 8007318:	f003 030f 	and.w	r3, r3, #15
 800731c:	b2da      	uxtb	r2, r3
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007326:	0bdb      	lsrs	r3, r3, #15
 8007328:	b2db      	uxtb	r3, r3
 800732a:	f003 0301 	and.w	r3, r3, #1
 800732e:	b2da      	uxtb	r2, r3
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007338:	0b9b      	lsrs	r3, r3, #14
 800733a:	b2db      	uxtb	r3, r3
 800733c:	f003 0301 	and.w	r3, r3, #1
 8007340:	b2da      	uxtb	r2, r3
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800734a:	0b5b      	lsrs	r3, r3, #13
 800734c:	b2db      	uxtb	r3, r3
 800734e:	f003 0301 	and.w	r3, r3, #1
 8007352:	b2da      	uxtb	r2, r3
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800735c:	0b1b      	lsrs	r3, r3, #12
 800735e:	b2db      	uxtb	r3, r3
 8007360:	f003 0301 	and.w	r3, r3, #1
 8007364:	b2da      	uxtb	r2, r3
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	2200      	movs	r2, #0
 800736e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007374:	2b00      	cmp	r3, #0
 8007376:	d163      	bne.n	8007440 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800737c:	009a      	lsls	r2, r3, #2
 800737e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007382:	4013      	ands	r3, r2
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8007388:	0f92      	lsrs	r2, r2, #30
 800738a:	431a      	orrs	r2, r3
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007394:	0edb      	lsrs	r3, r3, #27
 8007396:	b2db      	uxtb	r3, r3
 8007398:	f003 0307 	and.w	r3, r3, #7
 800739c:	b2da      	uxtb	r2, r3
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073a6:	0e1b      	lsrs	r3, r3, #24
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	f003 0307 	and.w	r3, r3, #7
 80073ae:	b2da      	uxtb	r2, r3
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073b8:	0d5b      	lsrs	r3, r3, #21
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	f003 0307 	and.w	r3, r3, #7
 80073c0:	b2da      	uxtb	r2, r3
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073ca:	0c9b      	lsrs	r3, r3, #18
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	f003 0307 	and.w	r3, r3, #7
 80073d2:	b2da      	uxtb	r2, r3
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073dc:	0bdb      	lsrs	r3, r3, #15
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	f003 0307 	and.w	r3, r3, #7
 80073e4:	b2da      	uxtb	r2, r3
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	1c5a      	adds	r2, r3, #1
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	7e1b      	ldrb	r3, [r3, #24]
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	f003 0307 	and.w	r3, r3, #7
 80073fe:	3302      	adds	r3, #2
 8007400:	2201      	movs	r2, #1
 8007402:	fa02 f303 	lsl.w	r3, r2, r3
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800740a:	fb03 f202 	mul.w	r2, r3, r2
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	7a1b      	ldrb	r3, [r3, #8]
 8007416:	b2db      	uxtb	r3, r3
 8007418:	f003 030f 	and.w	r3, r3, #15
 800741c:	2201      	movs	r2, #1
 800741e:	409a      	lsls	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800742c:	0a52      	lsrs	r2, r2, #9
 800742e:	fb03 f202 	mul.w	r2, r3, r2
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800743c:	661a      	str	r2, [r3, #96]	@ 0x60
 800743e:	e031      	b.n	80074a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007444:	2b01      	cmp	r3, #1
 8007446:	d11d      	bne.n	8007484 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800744c:	041b      	lsls	r3, r3, #16
 800744e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007456:	0c1b      	lsrs	r3, r3, #16
 8007458:	431a      	orrs	r2, r3
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	3301      	adds	r3, #1
 8007464:	029a      	lsls	r2, r3, #10
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007478:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	661a      	str	r2, [r3, #96]	@ 0x60
 8007482:	e00f      	b.n	80074a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a58      	ldr	r2, [pc, #352]	@ (80075ec <HAL_SD_GetCardCSD+0x344>)
 800748a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007490:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	e09d      	b.n	80075e0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074a8:	0b9b      	lsrs	r3, r3, #14
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	f003 0301 	and.w	r3, r3, #1
 80074b0:	b2da      	uxtb	r2, r3
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074ba:	09db      	lsrs	r3, r3, #7
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074c2:	b2da      	uxtb	r2, r3
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074d2:	b2da      	uxtb	r2, r3
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074dc:	0fdb      	lsrs	r3, r3, #31
 80074de:	b2da      	uxtb	r2, r3
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074e8:	0f5b      	lsrs	r3, r3, #29
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	f003 0303 	and.w	r3, r3, #3
 80074f0:	b2da      	uxtb	r2, r3
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074fa:	0e9b      	lsrs	r3, r3, #26
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	f003 0307 	and.w	r3, r3, #7
 8007502:	b2da      	uxtb	r2, r3
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800750c:	0d9b      	lsrs	r3, r3, #22
 800750e:	b2db      	uxtb	r3, r3
 8007510:	f003 030f 	and.w	r3, r3, #15
 8007514:	b2da      	uxtb	r2, r3
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800751e:	0d5b      	lsrs	r3, r3, #21
 8007520:	b2db      	uxtb	r3, r3
 8007522:	f003 0301 	and.w	r3, r3, #1
 8007526:	b2da      	uxtb	r2, r3
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800753a:	0c1b      	lsrs	r3, r3, #16
 800753c:	b2db      	uxtb	r3, r3
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	b2da      	uxtb	r2, r3
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800754e:	0bdb      	lsrs	r3, r3, #15
 8007550:	b2db      	uxtb	r3, r3
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	b2da      	uxtb	r2, r3
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007562:	0b9b      	lsrs	r3, r3, #14
 8007564:	b2db      	uxtb	r3, r3
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	b2da      	uxtb	r2, r3
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007576:	0b5b      	lsrs	r3, r3, #13
 8007578:	b2db      	uxtb	r3, r3
 800757a:	f003 0301 	and.w	r3, r3, #1
 800757e:	b2da      	uxtb	r2, r3
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800758a:	0b1b      	lsrs	r3, r3, #12
 800758c:	b2db      	uxtb	r3, r3
 800758e:	f003 0301 	and.w	r3, r3, #1
 8007592:	b2da      	uxtb	r2, r3
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800759e:	0a9b      	lsrs	r3, r3, #10
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	f003 0303 	and.w	r3, r3, #3
 80075a6:	b2da      	uxtb	r2, r3
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075b2:	0a1b      	lsrs	r3, r3, #8
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	f003 0303 	and.w	r3, r3, #3
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075c6:	085b      	lsrs	r3, r3, #1
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075ce:	b2da      	uxtb	r2, r3
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	004005ff 	.word	0x004005ff

080075f0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007648:	b5b0      	push	{r4, r5, r7, lr}
 800764a:	b08e      	sub	sp, #56	@ 0x38
 800764c:	af04      	add	r7, sp, #16
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007652:	2300      	movs	r3, #0
 8007654:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2203      	movs	r2, #3
 800765c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007664:	2b03      	cmp	r3, #3
 8007666:	d02e      	beq.n	80076c6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800766e:	d106      	bne.n	800767e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007674:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	639a      	str	r2, [r3, #56]	@ 0x38
 800767c:	e029      	b.n	80076d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007684:	d10a      	bne.n	800769c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fa1c 	bl	8007ac4 <SD_WideBus_Enable>
 800768c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007692:	6a3b      	ldr	r3, [r7, #32]
 8007694:	431a      	orrs	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	639a      	str	r2, [r3, #56]	@ 0x38
 800769a:	e01a      	b.n	80076d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10a      	bne.n	80076b8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fa59 	bl	8007b5a <SD_WideBus_Disable>
 80076a8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076ae:	6a3b      	ldr	r3, [r7, #32]
 80076b0:	431a      	orrs	r2, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80076b6:	e00c      	b.n	80076d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076bc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80076c4:	e005      	b.n	80076d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ca:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00b      	beq.n	80076f2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a26      	ldr	r2, [pc, #152]	@ (8007778 <HAL_SD_ConfigWideBusOperation+0x130>)
 80076e0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80076f0:	e01f      	b.n	8007732 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	695b      	ldr	r3, [r3, #20]
 800770c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	699b      	ldr	r3, [r3, #24]
 8007712:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681d      	ldr	r5, [r3, #0]
 8007718:	466c      	mov	r4, sp
 800771a:	f107 0314 	add.w	r3, r7, #20
 800771e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007722:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007726:	f107 0308 	add.w	r3, r7, #8
 800772a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800772c:	4628      	mov	r0, r5
 800772e:	f002 fd5b 	bl	800a1e8 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800773a:	4618      	mov	r0, r3
 800773c:	f002 fe30 	bl	800a3a0 <SDMMC_CmdBlockLength>
 8007740:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007742:	6a3b      	ldr	r3, [r7, #32]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00c      	beq.n	8007762 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a0a      	ldr	r2, [pc, #40]	@ (8007778 <HAL_SD_ConfigWideBusOperation+0x130>)
 800774e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007754:	6a3b      	ldr	r3, [r7, #32]
 8007756:	431a      	orrs	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800776a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800776e:	4618      	mov	r0, r3
 8007770:	3728      	adds	r7, #40	@ 0x28
 8007772:	46bd      	mov	sp, r7
 8007774:	bdb0      	pop	{r4, r5, r7, pc}
 8007776:	bf00      	nop
 8007778:	004005ff 	.word	0x004005ff

0800777c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b086      	sub	sp, #24
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007784:	2300      	movs	r3, #0
 8007786:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007788:	f107 030c 	add.w	r3, r7, #12
 800778c:	4619      	mov	r1, r3
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f970 	bl	8007a74 <SD_SendStatus>
 8007794:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d005      	beq.n	80077a8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	431a      	orrs	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	0a5b      	lsrs	r3, r3, #9
 80077ac:	f003 030f 	and.w	r3, r3, #15
 80077b0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80077b2:	693b      	ldr	r3, [r7, #16]
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3718      	adds	r7, #24
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80077bc:	b5b0      	push	{r4, r5, r7, lr}
 80077be:	b094      	sub	sp, #80	@ 0x50
 80077c0:	af04      	add	r7, sp, #16
 80077c2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80077c4:	2301      	movs	r3, #1
 80077c6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4618      	mov	r0, r3
 80077ce:	f002 fd63 	bl	800a298 <SDMMC_GetPowerState>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d102      	bne.n	80077de <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80077d8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80077dc:	e0b8      	b.n	8007950 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077e2:	2b03      	cmp	r3, #3
 80077e4:	d02f      	beq.n	8007846 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4618      	mov	r0, r3
 80077ec:	f002 ff8d 	bl	800a70a <SDMMC_CmdSendCID>
 80077f0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80077f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <SD_InitCard+0x40>
    {
      return errorstate;
 80077f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077fa:	e0a9      	b.n	8007950 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2100      	movs	r1, #0
 8007802:	4618      	mov	r0, r3
 8007804:	f002 fd8d 	bl	800a322 <SDMMC_GetResponse>
 8007808:	4602      	mov	r2, r0
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2104      	movs	r1, #4
 8007814:	4618      	mov	r0, r3
 8007816:	f002 fd84 	bl	800a322 <SDMMC_GetResponse>
 800781a:	4602      	mov	r2, r0
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2108      	movs	r1, #8
 8007826:	4618      	mov	r0, r3
 8007828:	f002 fd7b 	bl	800a322 <SDMMC_GetResponse>
 800782c:	4602      	mov	r2, r0
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	210c      	movs	r1, #12
 8007838:	4618      	mov	r0, r3
 800783a:	f002 fd72 	bl	800a322 <SDMMC_GetResponse>
 800783e:	4602      	mov	r2, r0
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800784a:	2b03      	cmp	r3, #3
 800784c:	d00d      	beq.n	800786a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f107 020e 	add.w	r2, r7, #14
 8007856:	4611      	mov	r1, r2
 8007858:	4618      	mov	r0, r3
 800785a:	f002 ff93 	bl	800a784 <SDMMC_CmdSetRelAdd>
 800785e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007860:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007862:	2b00      	cmp	r3, #0
 8007864:	d001      	beq.n	800786a <SD_InitCard+0xae>
    {
      return errorstate;
 8007866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007868:	e072      	b.n	8007950 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800786e:	2b03      	cmp	r3, #3
 8007870:	d036      	beq.n	80078e0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007872:	89fb      	ldrh	r3, [r7, #14]
 8007874:	461a      	mov	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007882:	041b      	lsls	r3, r3, #16
 8007884:	4619      	mov	r1, r3
 8007886:	4610      	mov	r0, r2
 8007888:	f002 ff5d 	bl	800a746 <SDMMC_CmdSendCSD>
 800788c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800788e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007890:	2b00      	cmp	r3, #0
 8007892:	d001      	beq.n	8007898 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007896:	e05b      	b.n	8007950 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2100      	movs	r1, #0
 800789e:	4618      	mov	r0, r3
 80078a0:	f002 fd3f 	bl	800a322 <SDMMC_GetResponse>
 80078a4:	4602      	mov	r2, r0
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2104      	movs	r1, #4
 80078b0:	4618      	mov	r0, r3
 80078b2:	f002 fd36 	bl	800a322 <SDMMC_GetResponse>
 80078b6:	4602      	mov	r2, r0
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2108      	movs	r1, #8
 80078c2:	4618      	mov	r0, r3
 80078c4:	f002 fd2d 	bl	800a322 <SDMMC_GetResponse>
 80078c8:	4602      	mov	r2, r0
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	210c      	movs	r1, #12
 80078d4:	4618      	mov	r0, r3
 80078d6:	f002 fd24 	bl	800a322 <SDMMC_GetResponse>
 80078da:	4602      	mov	r2, r0
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2104      	movs	r1, #4
 80078e6:	4618      	mov	r0, r3
 80078e8:	f002 fd1b 	bl	800a322 <SDMMC_GetResponse>
 80078ec:	4603      	mov	r3, r0
 80078ee:	0d1a      	lsrs	r2, r3, #20
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80078f4:	f107 0310 	add.w	r3, r7, #16
 80078f8:	4619      	mov	r1, r3
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7ff fcd4 	bl	80072a8 <HAL_SD_GetCardCSD>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d002      	beq.n	800790c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007906:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800790a:	e021      	b.n	8007950 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6819      	ldr	r1, [r3, #0]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007914:	041b      	lsls	r3, r3, #16
 8007916:	2200      	movs	r2, #0
 8007918:	461c      	mov	r4, r3
 800791a:	4615      	mov	r5, r2
 800791c:	4622      	mov	r2, r4
 800791e:	462b      	mov	r3, r5
 8007920:	4608      	mov	r0, r1
 8007922:	f002 fe09 	bl	800a538 <SDMMC_CmdSelDesel>
 8007926:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800792a:	2b00      	cmp	r3, #0
 800792c:	d001      	beq.n	8007932 <SD_InitCard+0x176>
  {
    return errorstate;
 800792e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007930:	e00e      	b.n	8007950 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681d      	ldr	r5, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	466c      	mov	r4, sp
 800793a:	f103 0210 	add.w	r2, r3, #16
 800793e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007940:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007944:	3304      	adds	r3, #4
 8007946:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007948:	4628      	mov	r0, r5
 800794a:	f002 fc4d 	bl	800a1e8 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	3740      	adds	r7, #64	@ 0x40
 8007954:	46bd      	mov	sp, r7
 8007956:	bdb0      	pop	{r4, r5, r7, pc}

08007958 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b086      	sub	sp, #24
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007960:	2300      	movs	r3, #0
 8007962:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007964:	2300      	movs	r3, #0
 8007966:	617b      	str	r3, [r7, #20]
 8007968:	2300      	movs	r3, #0
 800796a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4618      	mov	r0, r3
 8007972:	f002 fe04 	bl	800a57e <SDMMC_CmdGoIdleState>
 8007976:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <SD_PowerON+0x2a>
  {
    return errorstate;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	e072      	b.n	8007a68 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4618      	mov	r0, r3
 8007988:	f002 fe17 	bl	800a5ba <SDMMC_CmdOperCond>
 800798c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00d      	beq.n	80079b0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4618      	mov	r0, r3
 80079a0:	f002 fded 	bl	800a57e <SDMMC_CmdGoIdleState>
 80079a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d004      	beq.n	80079b6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	e05b      	b.n	8007a68 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d137      	bne.n	8007a2e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2100      	movs	r1, #0
 80079c4:	4618      	mov	r0, r3
 80079c6:	f002 fe17 	bl	800a5f8 <SDMMC_CmdAppCommand>
 80079ca:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d02d      	beq.n	8007a2e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80079d2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80079d6:	e047      	b.n	8007a68 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2100      	movs	r1, #0
 80079de:	4618      	mov	r0, r3
 80079e0:	f002 fe0a 	bl	800a5f8 <SDMMC_CmdAppCommand>
 80079e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d001      	beq.n	80079f0 <SD_PowerON+0x98>
    {
      return errorstate;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	e03b      	b.n	8007a68 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	491e      	ldr	r1, [pc, #120]	@ (8007a70 <SD_PowerON+0x118>)
 80079f6:	4618      	mov	r0, r3
 80079f8:	f002 fe20 	bl	800a63c <SDMMC_CmdAppOperCommand>
 80079fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d002      	beq.n	8007a0a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007a08:	e02e      	b.n	8007a68 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2100      	movs	r1, #0
 8007a10:	4618      	mov	r0, r3
 8007a12:	f002 fc86 	bl	800a322 <SDMMC_GetResponse>
 8007a16:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	0fdb      	lsrs	r3, r3, #31
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d101      	bne.n	8007a24 <SD_PowerON+0xcc>
 8007a20:	2301      	movs	r3, #1
 8007a22:	e000      	b.n	8007a26 <SD_PowerON+0xce>
 8007a24:	2300      	movs	r3, #0
 8007a26:	613b      	str	r3, [r7, #16]

    count++;
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d802      	bhi.n	8007a3e <SD_PowerON+0xe6>
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d0cc      	beq.n	80079d8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d902      	bls.n	8007a4e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007a48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007a4c:	e00c      	b.n	8007a68 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d003      	beq.n	8007a60 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	645a      	str	r2, [r3, #68]	@ 0x44
 8007a5e:	e002      	b.n	8007a66 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3718      	adds	r7, #24
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	c1100000 	.word	0xc1100000

08007a74 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d102      	bne.n	8007a8a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007a84:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007a88:	e018      	b.n	8007abc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a92:	041b      	lsls	r3, r3, #16
 8007a94:	4619      	mov	r1, r3
 8007a96:	4610      	mov	r0, r2
 8007a98:	f002 fe95 	bl	800a7c6 <SDMMC_CmdSendStatus>
 8007a9c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d001      	beq.n	8007aa8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	e009      	b.n	8007abc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2100      	movs	r1, #0
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f002 fc37 	bl	800a322 <SDMMC_GetResponse>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007acc:	2300      	movs	r3, #0
 8007ace:	60fb      	str	r3, [r7, #12]
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2100      	movs	r1, #0
 8007ada:	4618      	mov	r0, r3
 8007adc:	f002 fc21 	bl	800a322 <SDMMC_GetResponse>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ae6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007aea:	d102      	bne.n	8007af2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007aec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007af0:	e02f      	b.n	8007b52 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007af2:	f107 030c 	add.w	r3, r7, #12
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 f879 	bl	8007bf0 <SD_FindSCR>
 8007afe:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d001      	beq.n	8007b0a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	e023      	b.n	8007b52 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d01c      	beq.n	8007b4e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b1c:	041b      	lsls	r3, r3, #16
 8007b1e:	4619      	mov	r1, r3
 8007b20:	4610      	mov	r0, r2
 8007b22:	f002 fd69 	bl	800a5f8 <SDMMC_CmdAppCommand>
 8007b26:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d001      	beq.n	8007b32 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	e00f      	b.n	8007b52 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2102      	movs	r1, #2
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f002 fda3 	bl	800a684 <SDMMC_CmdBusWidth>
 8007b3e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d001      	beq.n	8007b4a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	e003      	b.n	8007b52 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	e001      	b.n	8007b52 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007b4e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3718      	adds	r7, #24
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b086      	sub	sp, #24
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007b62:	2300      	movs	r3, #0
 8007b64:	60fb      	str	r3, [r7, #12]
 8007b66:	2300      	movs	r3, #0
 8007b68:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2100      	movs	r1, #0
 8007b70:	4618      	mov	r0, r3
 8007b72:	f002 fbd6 	bl	800a322 <SDMMC_GetResponse>
 8007b76:	4603      	mov	r3, r0
 8007b78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b80:	d102      	bne.n	8007b88 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007b82:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007b86:	e02f      	b.n	8007be8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007b88:	f107 030c 	add.w	r3, r7, #12
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f82e 	bl	8007bf0 <SD_FindSCR>
 8007b94:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d001      	beq.n	8007ba0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	e023      	b.n	8007be8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d01c      	beq.n	8007be4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bb2:	041b      	lsls	r3, r3, #16
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	4610      	mov	r0, r2
 8007bb8:	f002 fd1e 	bl	800a5f8 <SDMMC_CmdAppCommand>
 8007bbc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d001      	beq.n	8007bc8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	e00f      	b.n	8007be8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2100      	movs	r1, #0
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f002 fd58 	bl	800a684 <SDMMC_CmdBusWidth>
 8007bd4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d001      	beq.n	8007be0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	e003      	b.n	8007be8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007be0:	2300      	movs	r3, #0
 8007be2:	e001      	b.n	8007be8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007be4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3718      	adds	r7, #24
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007bf0:	b590      	push	{r4, r7, lr}
 8007bf2:	b08f      	sub	sp, #60	@ 0x3c
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007bfa:	f7fb f959 	bl	8002eb0 <HAL_GetTick>
 8007bfe:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8007c00:	2300      	movs	r3, #0
 8007c02:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007c04:	2300      	movs	r3, #0
 8007c06:	60bb      	str	r3, [r7, #8]
 8007c08:	2300      	movs	r3, #0
 8007c0a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2108      	movs	r1, #8
 8007c16:	4618      	mov	r0, r3
 8007c18:	f002 fbc2 	bl	800a3a0 <SDMMC_CmdBlockLength>
 8007c1c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d001      	beq.n	8007c28 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c26:	e0b2      	b.n	8007d8e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c30:	041b      	lsls	r3, r3, #16
 8007c32:	4619      	mov	r1, r3
 8007c34:	4610      	mov	r0, r2
 8007c36:	f002 fcdf 	bl	800a5f8 <SDMMC_CmdAppCommand>
 8007c3a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d001      	beq.n	8007c46 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c44:	e0a3      	b.n	8007d8e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007c46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007c4a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007c4c:	2308      	movs	r3, #8
 8007c4e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007c50:	2330      	movs	r3, #48	@ 0x30
 8007c52:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007c54:	2302      	movs	r3, #2
 8007c56:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f107 0210 	add.w	r2, r7, #16
 8007c68:	4611      	mov	r1, r2
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f002 fb6c 	bl	800a348 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4618      	mov	r0, r3
 8007c76:	f002 fd27 	bl	800a6c8 <SDMMC_CmdSendSCR>
 8007c7a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d02a      	beq.n	8007cd8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8007c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c84:	e083      	b.n	8007d8e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00f      	beq.n	8007cb4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6819      	ldr	r1, [r3, #0]
 8007c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	f107 0208 	add.w	r2, r7, #8
 8007ca0:	18d4      	adds	r4, r2, r3
 8007ca2:	4608      	mov	r0, r1
 8007ca4:	f002 facc 	bl	800a240 <SDMMC_ReadFIFO>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	6023      	str	r3, [r4, #0]
      index++;
 8007cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cae:	3301      	adds	r3, #1
 8007cb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cb2:	e006      	b.n	8007cc2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d012      	beq.n	8007ce8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007cc2:	f7fb f8f5 	bl	8002eb0 <HAL_GetTick>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cd0:	d102      	bne.n	8007cd8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007cd2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007cd6:	e05a      	b.n	8007d8e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cde:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d0cf      	beq.n	8007c86 <SD_FindSCR+0x96>
 8007ce6:	e000      	b.n	8007cea <SD_FindSCR+0xfa>
      break;
 8007ce8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cf0:	f003 0308 	and.w	r3, r3, #8
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d005      	beq.n	8007d04 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2208      	movs	r2, #8
 8007cfe:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007d00:	2308      	movs	r3, #8
 8007d02:	e044      	b.n	8007d8e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d0a:	f003 0302 	and.w	r3, r3, #2
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d005      	beq.n	8007d1e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2202      	movs	r2, #2
 8007d18:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007d1a:	2302      	movs	r3, #2
 8007d1c:	e037      	b.n	8007d8e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d24:	f003 0320 	and.w	r3, r3, #32
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d005      	beq.n	8007d38 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2220      	movs	r2, #32
 8007d32:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007d34:	2320      	movs	r3, #32
 8007d36:	e02a      	b.n	8007d8e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007d40:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	061a      	lsls	r2, r3, #24
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	021b      	lsls	r3, r3, #8
 8007d4a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007d4e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	0a1b      	lsrs	r3, r3, #8
 8007d54:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007d58:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	0e1b      	lsrs	r3, r3, #24
 8007d5e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d62:	601a      	str	r2, [r3, #0]
    scr++;
 8007d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d66:	3304      	adds	r3, #4
 8007d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	061a      	lsls	r2, r3, #24
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	021b      	lsls	r3, r3, #8
 8007d72:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007d76:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	0a1b      	lsrs	r3, r3, #8
 8007d7c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007d80:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	0e1b      	lsrs	r3, r3, #24
 8007d86:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d8a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	373c      	adds	r7, #60	@ 0x3c
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd90      	pop	{r4, r7, pc}

08007d96 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b084      	sub	sp, #16
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d101      	bne.n	8007da8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e09d      	b.n	8007ee4 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d108      	bne.n	8007dc2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007db8:	d009      	beq.n	8007dce <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	61da      	str	r2, [r3, #28]
 8007dc0:	e005      	b.n	8007dce <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d106      	bne.n	8007dee <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7fa fa8d 	bl	8002308 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2202      	movs	r2, #2
 8007df2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e04:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007e0e:	d902      	bls.n	8007e16 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007e10:	2300      	movs	r3, #0
 8007e12:	60fb      	str	r3, [r7, #12]
 8007e14:	e002      	b.n	8007e1c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007e16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007e1a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007e24:	d007      	beq.n	8007e36 <HAL_SPI_Init+0xa0>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007e2e:	d002      	beq.n	8007e36 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007e46:	431a      	orrs	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	f003 0302 	and.w	r3, r3, #2
 8007e50:	431a      	orrs	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	695b      	ldr	r3, [r3, #20]
 8007e56:	f003 0301 	and.w	r3, r3, #1
 8007e5a:	431a      	orrs	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	699b      	ldr	r3, [r3, #24]
 8007e60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e64:	431a      	orrs	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	69db      	ldr	r3, [r3, #28]
 8007e6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e6e:	431a      	orrs	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6a1b      	ldr	r3, [r3, #32]
 8007e74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e78:	ea42 0103 	orr.w	r1, r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e80:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	430a      	orrs	r2, r1
 8007e8a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	0c1b      	lsrs	r3, r3, #16
 8007e92:	f003 0204 	and.w	r2, r3, #4
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e9a:	f003 0310 	and.w	r3, r3, #16
 8007e9e:	431a      	orrs	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ea4:	f003 0308 	and.w	r3, r3, #8
 8007ea8:	431a      	orrs	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007eb2:	ea42 0103 	orr.w	r1, r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	430a      	orrs	r2, r1
 8007ec2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	69da      	ldr	r2, [r3, #28]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007ed2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b08a      	sub	sp, #40	@ 0x28
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
 8007ef8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007efa:	2301      	movs	r3, #1
 8007efc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007efe:	2300      	movs	r3, #0
 8007f00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d101      	bne.n	8007f12 <HAL_SPI_TransmitReceive+0x26>
 8007f0e:	2302      	movs	r3, #2
 8007f10:	e20a      	b.n	8008328 <HAL_SPI_TransmitReceive+0x43c>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f1a:	f7fa ffc9 	bl	8002eb0 <HAL_GetTick>
 8007f1e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007f26:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007f2e:	887b      	ldrh	r3, [r7, #2]
 8007f30:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007f32:	887b      	ldrh	r3, [r7, #2]
 8007f34:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007f36:	7efb      	ldrb	r3, [r7, #27]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d00e      	beq.n	8007f5a <HAL_SPI_TransmitReceive+0x6e>
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f42:	d106      	bne.n	8007f52 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d102      	bne.n	8007f52 <HAL_SPI_TransmitReceive+0x66>
 8007f4c:	7efb      	ldrb	r3, [r7, #27]
 8007f4e:	2b04      	cmp	r3, #4
 8007f50:	d003      	beq.n	8007f5a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007f52:	2302      	movs	r3, #2
 8007f54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007f58:	e1e0      	b.n	800831c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d005      	beq.n	8007f6c <HAL_SPI_TransmitReceive+0x80>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d002      	beq.n	8007f6c <HAL_SPI_TransmitReceive+0x80>
 8007f66:	887b      	ldrh	r3, [r7, #2]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d103      	bne.n	8007f74 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007f72:	e1d3      	b.n	800831c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	2b04      	cmp	r3, #4
 8007f7e:	d003      	beq.n	8007f88 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2205      	movs	r2, #5
 8007f84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	887a      	ldrh	r2, [r7, #2]
 8007f98:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	887a      	ldrh	r2, [r7, #2]
 8007fa0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	887a      	ldrh	r2, [r7, #2]
 8007fae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	887a      	ldrh	r2, [r7, #2]
 8007fb4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007fca:	d802      	bhi.n	8007fd2 <HAL_SPI_TransmitReceive+0xe6>
 8007fcc:	8a3b      	ldrh	r3, [r7, #16]
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d908      	bls.n	8007fe4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	685a      	ldr	r2, [r3, #4]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007fe0:	605a      	str	r2, [r3, #4]
 8007fe2:	e007      	b.n	8007ff4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	685a      	ldr	r2, [r3, #4]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007ff2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ffe:	2b40      	cmp	r3, #64	@ 0x40
 8008000:	d007      	beq.n	8008012 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008010:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800801a:	f240 8081 	bls.w	8008120 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d002      	beq.n	800802c <HAL_SPI_TransmitReceive+0x140>
 8008026:	8a7b      	ldrh	r3, [r7, #18]
 8008028:	2b01      	cmp	r3, #1
 800802a:	d16d      	bne.n	8008108 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008030:	881a      	ldrh	r2, [r3, #0]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800803c:	1c9a      	adds	r2, r3, #2
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008046:	b29b      	uxth	r3, r3
 8008048:	3b01      	subs	r3, #1
 800804a:	b29a      	uxth	r2, r3
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008050:	e05a      	b.n	8008108 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	f003 0302 	and.w	r3, r3, #2
 800805c:	2b02      	cmp	r3, #2
 800805e:	d11b      	bne.n	8008098 <HAL_SPI_TransmitReceive+0x1ac>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008064:	b29b      	uxth	r3, r3
 8008066:	2b00      	cmp	r3, #0
 8008068:	d016      	beq.n	8008098 <HAL_SPI_TransmitReceive+0x1ac>
 800806a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800806c:	2b01      	cmp	r3, #1
 800806e:	d113      	bne.n	8008098 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008074:	881a      	ldrh	r2, [r3, #0]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008080:	1c9a      	adds	r2, r3, #2
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800808a:	b29b      	uxth	r3, r3
 800808c:	3b01      	subs	r3, #1
 800808e:	b29a      	uxth	r2, r3
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008094:	2300      	movs	r3, #0
 8008096:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d11c      	bne.n	80080e0 <HAL_SPI_TransmitReceive+0x1f4>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d016      	beq.n	80080e0 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68da      	ldr	r2, [r3, #12]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080bc:	b292      	uxth	r2, r2
 80080be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080c4:	1c9a      	adds	r2, r3, #2
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	3b01      	subs	r3, #1
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80080dc:	2301      	movs	r3, #1
 80080de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80080e0:	f7fa fee6 	bl	8002eb0 <HAL_GetTick>
 80080e4:	4602      	mov	r2, r0
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d80b      	bhi.n	8008108 <HAL_SPI_TransmitReceive+0x21c>
 80080f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080f6:	d007      	beq.n	8008108 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80080f8:	2303      	movs	r3, #3
 80080fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2201      	movs	r2, #1
 8008102:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8008106:	e109      	b.n	800831c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800810c:	b29b      	uxth	r3, r3
 800810e:	2b00      	cmp	r3, #0
 8008110:	d19f      	bne.n	8008052 <HAL_SPI_TransmitReceive+0x166>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008118:	b29b      	uxth	r3, r3
 800811a:	2b00      	cmp	r3, #0
 800811c:	d199      	bne.n	8008052 <HAL_SPI_TransmitReceive+0x166>
 800811e:	e0e3      	b.n	80082e8 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d003      	beq.n	8008130 <HAL_SPI_TransmitReceive+0x244>
 8008128:	8a7b      	ldrh	r3, [r7, #18]
 800812a:	2b01      	cmp	r3, #1
 800812c:	f040 80cf 	bne.w	80082ce <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008134:	b29b      	uxth	r3, r3
 8008136:	2b01      	cmp	r3, #1
 8008138:	d912      	bls.n	8008160 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800813e:	881a      	ldrh	r2, [r3, #0]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800814a:	1c9a      	adds	r2, r3, #2
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008154:	b29b      	uxth	r3, r3
 8008156:	3b02      	subs	r3, #2
 8008158:	b29a      	uxth	r2, r3
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800815e:	e0b6      	b.n	80082ce <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	330c      	adds	r3, #12
 800816a:	7812      	ldrb	r2, [r2, #0]
 800816c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008172:	1c5a      	adds	r2, r3, #1
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800817c:	b29b      	uxth	r3, r3
 800817e:	3b01      	subs	r3, #1
 8008180:	b29a      	uxth	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008186:	e0a2      	b.n	80082ce <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	f003 0302 	and.w	r3, r3, #2
 8008192:	2b02      	cmp	r3, #2
 8008194:	d134      	bne.n	8008200 <HAL_SPI_TransmitReceive+0x314>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800819a:	b29b      	uxth	r3, r3
 800819c:	2b00      	cmp	r3, #0
 800819e:	d02f      	beq.n	8008200 <HAL_SPI_TransmitReceive+0x314>
 80081a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d12c      	bne.n	8008200 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d912      	bls.n	80081d6 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b4:	881a      	ldrh	r2, [r3, #0]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081c0:	1c9a      	adds	r2, r3, #2
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	3b02      	subs	r3, #2
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80081d4:	e012      	b.n	80081fc <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	330c      	adds	r3, #12
 80081e0:	7812      	ldrb	r2, [r2, #0]
 80081e2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081e8:	1c5a      	adds	r2, r3, #1
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	3b01      	subs	r3, #1
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80081fc:	2300      	movs	r3, #0
 80081fe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	f003 0301 	and.w	r3, r3, #1
 800820a:	2b01      	cmp	r3, #1
 800820c:	d148      	bne.n	80082a0 <HAL_SPI_TransmitReceive+0x3b4>
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008214:	b29b      	uxth	r3, r3
 8008216:	2b00      	cmp	r3, #0
 8008218:	d042      	beq.n	80082a0 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008220:	b29b      	uxth	r3, r3
 8008222:	2b01      	cmp	r3, #1
 8008224:	d923      	bls.n	800826e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	68da      	ldr	r2, [r3, #12]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008230:	b292      	uxth	r2, r2
 8008232:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008238:	1c9a      	adds	r2, r3, #2
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008244:	b29b      	uxth	r3, r3
 8008246:	3b02      	subs	r3, #2
 8008248:	b29a      	uxth	r2, r3
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008256:	b29b      	uxth	r3, r3
 8008258:	2b01      	cmp	r3, #1
 800825a:	d81f      	bhi.n	800829c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	685a      	ldr	r2, [r3, #4]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800826a:	605a      	str	r2, [r3, #4]
 800826c:	e016      	b.n	800829c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f103 020c 	add.w	r2, r3, #12
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800827a:	7812      	ldrb	r2, [r2, #0]
 800827c:	b2d2      	uxtb	r2, r2
 800827e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008284:	1c5a      	adds	r2, r3, #1
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008290:	b29b      	uxth	r3, r3
 8008292:	3b01      	subs	r3, #1
 8008294:	b29a      	uxth	r2, r3
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800829c:	2301      	movs	r3, #1
 800829e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80082a0:	f7fa fe06 	bl	8002eb0 <HAL_GetTick>
 80082a4:	4602      	mov	r2, r0
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	1ad3      	subs	r3, r2, r3
 80082aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d803      	bhi.n	80082b8 <HAL_SPI_TransmitReceive+0x3cc>
 80082b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082b6:	d102      	bne.n	80082be <HAL_SPI_TransmitReceive+0x3d2>
 80082b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d107      	bne.n	80082ce <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80082be:	2303      	movs	r3, #3
 80082c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80082cc:	e026      	b.n	800831c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f47f af57 	bne.w	8008188 <HAL_SPI_TransmitReceive+0x29c>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f47f af50 	bne.w	8008188 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80082e8:	69fa      	ldr	r2, [r7, #28]
 80082ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f000 f93d 	bl	800856c <SPI_EndRxTxTransaction>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d005      	beq.n	8008304 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2220      	movs	r2, #32
 8008302:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008308:	2b00      	cmp	r3, #0
 800830a:	d003      	beq.n	8008314 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008312:	e003      	b.n	800831c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008324:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8008328:	4618      	mov	r0, r3
 800832a:	3728      	adds	r7, #40	@ 0x28
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b088      	sub	sp, #32
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	603b      	str	r3, [r7, #0]
 800833c:	4613      	mov	r3, r2
 800833e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008340:	f7fa fdb6 	bl	8002eb0 <HAL_GetTick>
 8008344:	4602      	mov	r2, r0
 8008346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008348:	1a9b      	subs	r3, r3, r2
 800834a:	683a      	ldr	r2, [r7, #0]
 800834c:	4413      	add	r3, r2
 800834e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008350:	f7fa fdae 	bl	8002eb0 <HAL_GetTick>
 8008354:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008356:	4b39      	ldr	r3, [pc, #228]	@ (800843c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	015b      	lsls	r3, r3, #5
 800835c:	0d1b      	lsrs	r3, r3, #20
 800835e:	69fa      	ldr	r2, [r7, #28]
 8008360:	fb02 f303 	mul.w	r3, r2, r3
 8008364:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008366:	e054      	b.n	8008412 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800836e:	d050      	beq.n	8008412 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008370:	f7fa fd9e 	bl	8002eb0 <HAL_GetTick>
 8008374:	4602      	mov	r2, r0
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	69fa      	ldr	r2, [r7, #28]
 800837c:	429a      	cmp	r2, r3
 800837e:	d902      	bls.n	8008386 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008380:	69fb      	ldr	r3, [r7, #28]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d13d      	bne.n	8008402 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	685a      	ldr	r2, [r3, #4]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008394:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800839e:	d111      	bne.n	80083c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083a8:	d004      	beq.n	80083b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083b2:	d107      	bne.n	80083c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80083c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083cc:	d10f      	bne.n	80083ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80083dc:	601a      	str	r2, [r3, #0]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80083ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2201      	movs	r2, #1
 80083f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80083fe:	2303      	movs	r3, #3
 8008400:	e017      	b.n	8008432 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d101      	bne.n	800840c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008408:	2300      	movs	r3, #0
 800840a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	3b01      	subs	r3, #1
 8008410:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	689a      	ldr	r2, [r3, #8]
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	4013      	ands	r3, r2
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	429a      	cmp	r2, r3
 8008420:	bf0c      	ite	eq
 8008422:	2301      	moveq	r3, #1
 8008424:	2300      	movne	r3, #0
 8008426:	b2db      	uxtb	r3, r3
 8008428:	461a      	mov	r2, r3
 800842a:	79fb      	ldrb	r3, [r7, #7]
 800842c:	429a      	cmp	r2, r3
 800842e:	d19b      	bne.n	8008368 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3720      	adds	r7, #32
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	20000000 	.word	0x20000000

08008440 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b08a      	sub	sp, #40	@ 0x28
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
 800844c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800844e:	2300      	movs	r3, #0
 8008450:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008452:	f7fa fd2d 	bl	8002eb0 <HAL_GetTick>
 8008456:	4602      	mov	r2, r0
 8008458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845a:	1a9b      	subs	r3, r3, r2
 800845c:	683a      	ldr	r2, [r7, #0]
 800845e:	4413      	add	r3, r2
 8008460:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008462:	f7fa fd25 	bl	8002eb0 <HAL_GetTick>
 8008466:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	330c      	adds	r3, #12
 800846e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008470:	4b3d      	ldr	r3, [pc, #244]	@ (8008568 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	4613      	mov	r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	4413      	add	r3, r2
 800847a:	00da      	lsls	r2, r3, #3
 800847c:	1ad3      	subs	r3, r2, r3
 800847e:	0d1b      	lsrs	r3, r3, #20
 8008480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008482:	fb02 f303 	mul.w	r3, r2, r3
 8008486:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008488:	e060      	b.n	800854c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008490:	d107      	bne.n	80084a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d104      	bne.n	80084a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008498:	69fb      	ldr	r3, [r7, #28]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	b2db      	uxtb	r3, r3
 800849e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80084a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80084a8:	d050      	beq.n	800854c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80084aa:	f7fa fd01 	bl	8002eb0 <HAL_GetTick>
 80084ae:	4602      	mov	r2, r0
 80084b0:	6a3b      	ldr	r3, [r7, #32]
 80084b2:	1ad3      	subs	r3, r2, r3
 80084b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d902      	bls.n	80084c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80084ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d13d      	bne.n	800853c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	685a      	ldr	r2, [r3, #4]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80084ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80084d8:	d111      	bne.n	80084fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084e2:	d004      	beq.n	80084ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084ec:	d107      	bne.n	80084fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80084fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008502:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008506:	d10f      	bne.n	8008528 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008516:	601a      	str	r2, [r3, #0]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008526:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2200      	movs	r2, #0
 8008534:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008538:	2303      	movs	r3, #3
 800853a:	e010      	b.n	800855e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d101      	bne.n	8008546 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008542:	2300      	movs	r3, #0
 8008544:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	3b01      	subs	r3, #1
 800854a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	689a      	ldr	r2, [r3, #8]
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	4013      	ands	r3, r2
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	429a      	cmp	r2, r3
 800855a:	d196      	bne.n	800848a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3728      	adds	r7, #40	@ 0x28
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	20000000 	.word	0x20000000

0800856c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b088      	sub	sp, #32
 8008570:	af02      	add	r7, sp, #8
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	9300      	str	r3, [sp, #0]
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	2200      	movs	r2, #0
 8008580:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f7ff ff5b 	bl	8008440 <SPI_WaitFifoStateUntilTimeout>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d007      	beq.n	80085a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008594:	f043 0220 	orr.w	r2, r3, #32
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800859c:	2303      	movs	r3, #3
 800859e:	e046      	b.n	800862e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80085a0:	4b25      	ldr	r3, [pc, #148]	@ (8008638 <SPI_EndRxTxTransaction+0xcc>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a25      	ldr	r2, [pc, #148]	@ (800863c <SPI_EndRxTxTransaction+0xd0>)
 80085a6:	fba2 2303 	umull	r2, r3, r2, r3
 80085aa:	0d5b      	lsrs	r3, r3, #21
 80085ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80085b0:	fb02 f303 	mul.w	r3, r2, r3
 80085b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80085be:	d112      	bne.n	80085e6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	2200      	movs	r2, #0
 80085c8:	2180      	movs	r1, #128	@ 0x80
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f7ff feb0 	bl	8008330 <SPI_WaitFlagStateUntilTimeout>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d016      	beq.n	8008604 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085da:	f043 0220 	orr.w	r2, r3, #32
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80085e2:	2303      	movs	r3, #3
 80085e4:	e023      	b.n	800862e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00a      	beq.n	8008602 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	3b01      	subs	r3, #1
 80085f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085fc:	2b80      	cmp	r3, #128	@ 0x80
 80085fe:	d0f2      	beq.n	80085e6 <SPI_EndRxTxTransaction+0x7a>
 8008600:	e000      	b.n	8008604 <SPI_EndRxTxTransaction+0x98>
        break;
 8008602:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	9300      	str	r3, [sp, #0]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	2200      	movs	r2, #0
 800860c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	f7ff ff15 	bl	8008440 <SPI_WaitFifoStateUntilTimeout>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d007      	beq.n	800862c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008620:	f043 0220 	orr.w	r2, r3, #32
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008628:	2303      	movs	r3, #3
 800862a:	e000      	b.n	800862e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3718      	adds	r7, #24
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	20000000 	.word	0x20000000
 800863c:	165e9f81 	.word	0x165e9f81

08008640 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d101      	bne.n	8008652 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	e049      	b.n	80086e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008658:	b2db      	uxtb	r3, r3
 800865a:	2b00      	cmp	r3, #0
 800865c:	d106      	bne.n	800866c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f7f9 ff36 	bl	80024d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2202      	movs	r2, #2
 8008670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	3304      	adds	r3, #4
 800867c:	4619      	mov	r1, r3
 800867e:	4610      	mov	r0, r2
 8008680:	f000 fa6a 	bl	8008b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3708      	adds	r7, #8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b082      	sub	sp, #8
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d101      	bne.n	8008700 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	e049      	b.n	8008794 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008706:	b2db      	uxtb	r3, r3
 8008708:	2b00      	cmp	r3, #0
 800870a:	d106      	bne.n	800871a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f7f9 fe8b 	bl	8002430 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2202      	movs	r2, #2
 800871e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	3304      	adds	r3, #4
 800872a:	4619      	mov	r1, r3
 800872c:	4610      	mov	r0, r2
 800872e:	f000 fa13 	bl	8008b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2201      	movs	r2, #1
 8008736:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2201      	movs	r2, #1
 800873e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2201      	movs	r2, #1
 8008746:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2201      	movs	r2, #1
 800874e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2201      	movs	r2, #1
 800875e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2201      	movs	r2, #1
 8008766:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2201      	movs	r2, #1
 800876e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2201      	movs	r2, #1
 8008776:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2201      	movs	r2, #1
 800877e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2201      	movs	r2, #1
 8008786:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2201      	movs	r2, #1
 800878e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	3708      	adds	r7, #8
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b086      	sub	sp, #24
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087a8:	2300      	movs	r3, #0
 80087aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d101      	bne.n	80087ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80087b6:	2302      	movs	r3, #2
 80087b8:	e0ff      	b.n	80089ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2201      	movs	r2, #1
 80087be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2b14      	cmp	r3, #20
 80087c6:	f200 80f0 	bhi.w	80089aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80087ca:	a201      	add	r2, pc, #4	@ (adr r2, 80087d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80087cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d0:	08008825 	.word	0x08008825
 80087d4:	080089ab 	.word	0x080089ab
 80087d8:	080089ab 	.word	0x080089ab
 80087dc:	080089ab 	.word	0x080089ab
 80087e0:	08008865 	.word	0x08008865
 80087e4:	080089ab 	.word	0x080089ab
 80087e8:	080089ab 	.word	0x080089ab
 80087ec:	080089ab 	.word	0x080089ab
 80087f0:	080088a7 	.word	0x080088a7
 80087f4:	080089ab 	.word	0x080089ab
 80087f8:	080089ab 	.word	0x080089ab
 80087fc:	080089ab 	.word	0x080089ab
 8008800:	080088e7 	.word	0x080088e7
 8008804:	080089ab 	.word	0x080089ab
 8008808:	080089ab 	.word	0x080089ab
 800880c:	080089ab 	.word	0x080089ab
 8008810:	08008929 	.word	0x08008929
 8008814:	080089ab 	.word	0x080089ab
 8008818:	080089ab 	.word	0x080089ab
 800881c:	080089ab 	.word	0x080089ab
 8008820:	08008969 	.word	0x08008969
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	68b9      	ldr	r1, [r7, #8]
 800882a:	4618      	mov	r0, r3
 800882c:	f000 fa40 	bl	8008cb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	699a      	ldr	r2, [r3, #24]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f042 0208 	orr.w	r2, r2, #8
 800883e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	699a      	ldr	r2, [r3, #24]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f022 0204 	bic.w	r2, r2, #4
 800884e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	6999      	ldr	r1, [r3, #24]
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	691a      	ldr	r2, [r3, #16]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	430a      	orrs	r2, r1
 8008860:	619a      	str	r2, [r3, #24]
      break;
 8008862:	e0a5      	b.n	80089b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	68b9      	ldr	r1, [r7, #8]
 800886a:	4618      	mov	r0, r3
 800886c:	f000 fa92 	bl	8008d94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	699a      	ldr	r2, [r3, #24]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800887e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	699a      	ldr	r2, [r3, #24]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800888e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	6999      	ldr	r1, [r3, #24]
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	021a      	lsls	r2, r3, #8
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	430a      	orrs	r2, r1
 80088a2:	619a      	str	r2, [r3, #24]
      break;
 80088a4:	e084      	b.n	80089b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	68b9      	ldr	r1, [r7, #8]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f000 fae9 	bl	8008e84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	69da      	ldr	r2, [r3, #28]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f042 0208 	orr.w	r2, r2, #8
 80088c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	69da      	ldr	r2, [r3, #28]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f022 0204 	bic.w	r2, r2, #4
 80088d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	69d9      	ldr	r1, [r3, #28]
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	691a      	ldr	r2, [r3, #16]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	430a      	orrs	r2, r1
 80088e2:	61da      	str	r2, [r3, #28]
      break;
 80088e4:	e064      	b.n	80089b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68b9      	ldr	r1, [r7, #8]
 80088ec:	4618      	mov	r0, r3
 80088ee:	f000 fb3f 	bl	8008f70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	69da      	ldr	r2, [r3, #28]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	69da      	ldr	r2, [r3, #28]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	69d9      	ldr	r1, [r3, #28]
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	021a      	lsls	r2, r3, #8
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	430a      	orrs	r2, r1
 8008924:	61da      	str	r2, [r3, #28]
      break;
 8008926:	e043      	b.n	80089b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	68b9      	ldr	r1, [r7, #8]
 800892e:	4618      	mov	r0, r3
 8008930:	f000 fb76 	bl	8009020 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f042 0208 	orr.w	r2, r2, #8
 8008942:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f022 0204 	bic.w	r2, r2, #4
 8008952:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	691a      	ldr	r2, [r3, #16]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	430a      	orrs	r2, r1
 8008964:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008966:	e023      	b.n	80089b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	68b9      	ldr	r1, [r7, #8]
 800896e:	4618      	mov	r0, r3
 8008970:	f000 fba8 	bl	80090c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008982:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008992:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	021a      	lsls	r2, r3, #8
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	430a      	orrs	r2, r1
 80089a6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80089a8:	e002      	b.n	80089b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	75fb      	strb	r3, [r7, #23]
      break;
 80089ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80089b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3718      	adds	r7, #24
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop

080089c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d101      	bne.n	80089e0 <HAL_TIM_ConfigClockSource+0x1c>
 80089dc:	2302      	movs	r3, #2
 80089de:	e0b4      	b.n	8008b4a <HAL_TIM_ConfigClockSource+0x186>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2202      	movs	r2, #2
 80089ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80089f8:	68ba      	ldr	r2, [r7, #8]
 80089fa:	4b56      	ldr	r3, [pc, #344]	@ (8008b54 <HAL_TIM_ConfigClockSource+0x190>)
 80089fc:	4013      	ands	r3, r2
 80089fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a18:	d03e      	beq.n	8008a98 <HAL_TIM_ConfigClockSource+0xd4>
 8008a1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a1e:	f200 8087 	bhi.w	8008b30 <HAL_TIM_ConfigClockSource+0x16c>
 8008a22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a26:	f000 8086 	beq.w	8008b36 <HAL_TIM_ConfigClockSource+0x172>
 8008a2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a2e:	d87f      	bhi.n	8008b30 <HAL_TIM_ConfigClockSource+0x16c>
 8008a30:	2b70      	cmp	r3, #112	@ 0x70
 8008a32:	d01a      	beq.n	8008a6a <HAL_TIM_ConfigClockSource+0xa6>
 8008a34:	2b70      	cmp	r3, #112	@ 0x70
 8008a36:	d87b      	bhi.n	8008b30 <HAL_TIM_ConfigClockSource+0x16c>
 8008a38:	2b60      	cmp	r3, #96	@ 0x60
 8008a3a:	d050      	beq.n	8008ade <HAL_TIM_ConfigClockSource+0x11a>
 8008a3c:	2b60      	cmp	r3, #96	@ 0x60
 8008a3e:	d877      	bhi.n	8008b30 <HAL_TIM_ConfigClockSource+0x16c>
 8008a40:	2b50      	cmp	r3, #80	@ 0x50
 8008a42:	d03c      	beq.n	8008abe <HAL_TIM_ConfigClockSource+0xfa>
 8008a44:	2b50      	cmp	r3, #80	@ 0x50
 8008a46:	d873      	bhi.n	8008b30 <HAL_TIM_ConfigClockSource+0x16c>
 8008a48:	2b40      	cmp	r3, #64	@ 0x40
 8008a4a:	d058      	beq.n	8008afe <HAL_TIM_ConfigClockSource+0x13a>
 8008a4c:	2b40      	cmp	r3, #64	@ 0x40
 8008a4e:	d86f      	bhi.n	8008b30 <HAL_TIM_ConfigClockSource+0x16c>
 8008a50:	2b30      	cmp	r3, #48	@ 0x30
 8008a52:	d064      	beq.n	8008b1e <HAL_TIM_ConfigClockSource+0x15a>
 8008a54:	2b30      	cmp	r3, #48	@ 0x30
 8008a56:	d86b      	bhi.n	8008b30 <HAL_TIM_ConfigClockSource+0x16c>
 8008a58:	2b20      	cmp	r3, #32
 8008a5a:	d060      	beq.n	8008b1e <HAL_TIM_ConfigClockSource+0x15a>
 8008a5c:	2b20      	cmp	r3, #32
 8008a5e:	d867      	bhi.n	8008b30 <HAL_TIM_ConfigClockSource+0x16c>
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d05c      	beq.n	8008b1e <HAL_TIM_ConfigClockSource+0x15a>
 8008a64:	2b10      	cmp	r3, #16
 8008a66:	d05a      	beq.n	8008b1e <HAL_TIM_ConfigClockSource+0x15a>
 8008a68:	e062      	b.n	8008b30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a7a:	f000 fbf1 	bl	8009260 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008a8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	609a      	str	r2, [r3, #8]
      break;
 8008a96:	e04f      	b.n	8008b38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008aa8:	f000 fbda 	bl	8009260 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	689a      	ldr	r2, [r3, #8]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008aba:	609a      	str	r2, [r3, #8]
      break;
 8008abc:	e03c      	b.n	8008b38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008aca:	461a      	mov	r2, r3
 8008acc:	f000 fb4e 	bl	800916c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2150      	movs	r1, #80	@ 0x50
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f000 fba7 	bl	800922a <TIM_ITRx_SetConfig>
      break;
 8008adc:	e02c      	b.n	8008b38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008aea:	461a      	mov	r2, r3
 8008aec:	f000 fb6d 	bl	80091ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2160      	movs	r1, #96	@ 0x60
 8008af6:	4618      	mov	r0, r3
 8008af8:	f000 fb97 	bl	800922a <TIM_ITRx_SetConfig>
      break;
 8008afc:	e01c      	b.n	8008b38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	f000 fb2e 	bl	800916c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2140      	movs	r1, #64	@ 0x40
 8008b16:	4618      	mov	r0, r3
 8008b18:	f000 fb87 	bl	800922a <TIM_ITRx_SetConfig>
      break;
 8008b1c:	e00c      	b.n	8008b38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4619      	mov	r1, r3
 8008b28:	4610      	mov	r0, r2
 8008b2a:	f000 fb7e 	bl	800922a <TIM_ITRx_SetConfig>
      break;
 8008b2e:	e003      	b.n	8008b38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	73fb      	strb	r3, [r7, #15]
      break;
 8008b34:	e000      	b.n	8008b38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008b36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	fffeff88 	.word	0xfffeff88

08008b58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4a46      	ldr	r2, [pc, #280]	@ (8008c84 <TIM_Base_SetConfig+0x12c>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d013      	beq.n	8008b98 <TIM_Base_SetConfig+0x40>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b76:	d00f      	beq.n	8008b98 <TIM_Base_SetConfig+0x40>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a43      	ldr	r2, [pc, #268]	@ (8008c88 <TIM_Base_SetConfig+0x130>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d00b      	beq.n	8008b98 <TIM_Base_SetConfig+0x40>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4a42      	ldr	r2, [pc, #264]	@ (8008c8c <TIM_Base_SetConfig+0x134>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d007      	beq.n	8008b98 <TIM_Base_SetConfig+0x40>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a41      	ldr	r2, [pc, #260]	@ (8008c90 <TIM_Base_SetConfig+0x138>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d003      	beq.n	8008b98 <TIM_Base_SetConfig+0x40>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a40      	ldr	r2, [pc, #256]	@ (8008c94 <TIM_Base_SetConfig+0x13c>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d108      	bne.n	8008baa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a35      	ldr	r2, [pc, #212]	@ (8008c84 <TIM_Base_SetConfig+0x12c>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d02b      	beq.n	8008c0a <TIM_Base_SetConfig+0xb2>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bb8:	d027      	beq.n	8008c0a <TIM_Base_SetConfig+0xb2>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a32      	ldr	r2, [pc, #200]	@ (8008c88 <TIM_Base_SetConfig+0x130>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d023      	beq.n	8008c0a <TIM_Base_SetConfig+0xb2>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a31      	ldr	r2, [pc, #196]	@ (8008c8c <TIM_Base_SetConfig+0x134>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d01f      	beq.n	8008c0a <TIM_Base_SetConfig+0xb2>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a30      	ldr	r2, [pc, #192]	@ (8008c90 <TIM_Base_SetConfig+0x138>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d01b      	beq.n	8008c0a <TIM_Base_SetConfig+0xb2>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a2f      	ldr	r2, [pc, #188]	@ (8008c94 <TIM_Base_SetConfig+0x13c>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d017      	beq.n	8008c0a <TIM_Base_SetConfig+0xb2>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a2e      	ldr	r2, [pc, #184]	@ (8008c98 <TIM_Base_SetConfig+0x140>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d013      	beq.n	8008c0a <TIM_Base_SetConfig+0xb2>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a2d      	ldr	r2, [pc, #180]	@ (8008c9c <TIM_Base_SetConfig+0x144>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d00f      	beq.n	8008c0a <TIM_Base_SetConfig+0xb2>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a2c      	ldr	r2, [pc, #176]	@ (8008ca0 <TIM_Base_SetConfig+0x148>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d00b      	beq.n	8008c0a <TIM_Base_SetConfig+0xb2>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a2b      	ldr	r2, [pc, #172]	@ (8008ca4 <TIM_Base_SetConfig+0x14c>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d007      	beq.n	8008c0a <TIM_Base_SetConfig+0xb2>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a2a      	ldr	r2, [pc, #168]	@ (8008ca8 <TIM_Base_SetConfig+0x150>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d003      	beq.n	8008c0a <TIM_Base_SetConfig+0xb2>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4a29      	ldr	r2, [pc, #164]	@ (8008cac <TIM_Base_SetConfig+0x154>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d108      	bne.n	8008c1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	695b      	ldr	r3, [r3, #20]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	689a      	ldr	r2, [r3, #8]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4a10      	ldr	r2, [pc, #64]	@ (8008c84 <TIM_Base_SetConfig+0x12c>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d003      	beq.n	8008c50 <TIM_Base_SetConfig+0xf8>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4a12      	ldr	r2, [pc, #72]	@ (8008c94 <TIM_Base_SetConfig+0x13c>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d103      	bne.n	8008c58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	691a      	ldr	r2, [r3, #16]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	691b      	ldr	r3, [r3, #16]
 8008c62:	f003 0301 	and.w	r3, r3, #1
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d105      	bne.n	8008c76 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	f023 0201 	bic.w	r2, r3, #1
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	611a      	str	r2, [r3, #16]
  }
}
 8008c76:	bf00      	nop
 8008c78:	3714      	adds	r7, #20
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	40010000 	.word	0x40010000
 8008c88:	40000400 	.word	0x40000400
 8008c8c:	40000800 	.word	0x40000800
 8008c90:	40000c00 	.word	0x40000c00
 8008c94:	40010400 	.word	0x40010400
 8008c98:	40014000 	.word	0x40014000
 8008c9c:	40014400 	.word	0x40014400
 8008ca0:	40014800 	.word	0x40014800
 8008ca4:	40001800 	.word	0x40001800
 8008ca8:	40001c00 	.word	0x40001c00
 8008cac:	40002000 	.word	0x40002000

08008cb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b087      	sub	sp, #28
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6a1b      	ldr	r3, [r3, #32]
 8008cbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6a1b      	ldr	r3, [r3, #32]
 8008cc4:	f023 0201 	bic.w	r2, r3, #1
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008cd8:	68fa      	ldr	r2, [r7, #12]
 8008cda:	4b2b      	ldr	r3, [pc, #172]	@ (8008d88 <TIM_OC1_SetConfig+0xd8>)
 8008cdc:	4013      	ands	r3, r2
 8008cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f023 0303 	bic.w	r3, r3, #3
 8008ce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	f023 0302 	bic.w	r3, r3, #2
 8008cf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	697a      	ldr	r2, [r7, #20]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a21      	ldr	r2, [pc, #132]	@ (8008d8c <TIM_OC1_SetConfig+0xdc>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d003      	beq.n	8008d14 <TIM_OC1_SetConfig+0x64>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a20      	ldr	r2, [pc, #128]	@ (8008d90 <TIM_OC1_SetConfig+0xe0>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d10c      	bne.n	8008d2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	f023 0308 	bic.w	r3, r3, #8
 8008d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	697a      	ldr	r2, [r7, #20]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	f023 0304 	bic.w	r3, r3, #4
 8008d2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a16      	ldr	r2, [pc, #88]	@ (8008d8c <TIM_OC1_SetConfig+0xdc>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d003      	beq.n	8008d3e <TIM_OC1_SetConfig+0x8e>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a15      	ldr	r2, [pc, #84]	@ (8008d90 <TIM_OC1_SetConfig+0xe0>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d111      	bne.n	8008d62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	695b      	ldr	r3, [r3, #20]
 8008d52:	693a      	ldr	r2, [r7, #16]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	699b      	ldr	r3, [r3, #24]
 8008d5c:	693a      	ldr	r2, [r7, #16]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	693a      	ldr	r2, [r7, #16]
 8008d66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	68fa      	ldr	r2, [r7, #12]
 8008d6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	685a      	ldr	r2, [r3, #4]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	697a      	ldr	r2, [r7, #20]
 8008d7a:	621a      	str	r2, [r3, #32]
}
 8008d7c:	bf00      	nop
 8008d7e:	371c      	adds	r7, #28
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr
 8008d88:	fffeff8f 	.word	0xfffeff8f
 8008d8c:	40010000 	.word	0x40010000
 8008d90:	40010400 	.word	0x40010400

08008d94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b087      	sub	sp, #28
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6a1b      	ldr	r3, [r3, #32]
 8008da2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6a1b      	ldr	r3, [r3, #32]
 8008da8:	f023 0210 	bic.w	r2, r3, #16
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	699b      	ldr	r3, [r3, #24]
 8008dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	4b2e      	ldr	r3, [pc, #184]	@ (8008e78 <TIM_OC2_SetConfig+0xe4>)
 8008dc0:	4013      	ands	r3, r2
 8008dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008dca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	021b      	lsls	r3, r3, #8
 8008dd2:	68fa      	ldr	r2, [r7, #12]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	f023 0320 	bic.w	r3, r3, #32
 8008dde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	011b      	lsls	r3, r3, #4
 8008de6:	697a      	ldr	r2, [r7, #20]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a23      	ldr	r2, [pc, #140]	@ (8008e7c <TIM_OC2_SetConfig+0xe8>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d003      	beq.n	8008dfc <TIM_OC2_SetConfig+0x68>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a22      	ldr	r2, [pc, #136]	@ (8008e80 <TIM_OC2_SetConfig+0xec>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d10d      	bne.n	8008e18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	011b      	lsls	r3, r3, #4
 8008e0a:	697a      	ldr	r2, [r7, #20]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e16:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a18      	ldr	r2, [pc, #96]	@ (8008e7c <TIM_OC2_SetConfig+0xe8>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d003      	beq.n	8008e28 <TIM_OC2_SetConfig+0x94>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4a17      	ldr	r2, [pc, #92]	@ (8008e80 <TIM_OC2_SetConfig+0xec>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d113      	bne.n	8008e50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008e2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008e36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	695b      	ldr	r3, [r3, #20]
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	693a      	ldr	r2, [r7, #16]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	699b      	ldr	r3, [r3, #24]
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	693a      	ldr	r2, [r7, #16]
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	693a      	ldr	r2, [r7, #16]
 8008e54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	685a      	ldr	r2, [r3, #4]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	697a      	ldr	r2, [r7, #20]
 8008e68:	621a      	str	r2, [r3, #32]
}
 8008e6a:	bf00      	nop
 8008e6c:	371c      	adds	r7, #28
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	feff8fff 	.word	0xfeff8fff
 8008e7c:	40010000 	.word	0x40010000
 8008e80:	40010400 	.word	0x40010400

08008e84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b087      	sub	sp, #28
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a1b      	ldr	r3, [r3, #32]
 8008e92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6a1b      	ldr	r3, [r3, #32]
 8008e98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	69db      	ldr	r3, [r3, #28]
 8008eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	4b2d      	ldr	r3, [pc, #180]	@ (8008f64 <TIM_OC3_SetConfig+0xe0>)
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f023 0303 	bic.w	r3, r3, #3
 8008eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	021b      	lsls	r3, r3, #8
 8008ed4:	697a      	ldr	r2, [r7, #20]
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4a22      	ldr	r2, [pc, #136]	@ (8008f68 <TIM_OC3_SetConfig+0xe4>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d003      	beq.n	8008eea <TIM_OC3_SetConfig+0x66>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4a21      	ldr	r2, [pc, #132]	@ (8008f6c <TIM_OC3_SetConfig+0xe8>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d10d      	bne.n	8008f06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ef0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	021b      	lsls	r3, r3, #8
 8008ef8:	697a      	ldr	r2, [r7, #20]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008f04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4a17      	ldr	r2, [pc, #92]	@ (8008f68 <TIM_OC3_SetConfig+0xe4>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d003      	beq.n	8008f16 <TIM_OC3_SetConfig+0x92>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4a16      	ldr	r2, [pc, #88]	@ (8008f6c <TIM_OC3_SetConfig+0xe8>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d113      	bne.n	8008f3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008f24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	695b      	ldr	r3, [r3, #20]
 8008f2a:	011b      	lsls	r3, r3, #4
 8008f2c:	693a      	ldr	r2, [r7, #16]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	699b      	ldr	r3, [r3, #24]
 8008f36:	011b      	lsls	r3, r3, #4
 8008f38:	693a      	ldr	r2, [r7, #16]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	693a      	ldr	r2, [r7, #16]
 8008f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	685a      	ldr	r2, [r3, #4]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	697a      	ldr	r2, [r7, #20]
 8008f56:	621a      	str	r2, [r3, #32]
}
 8008f58:	bf00      	nop
 8008f5a:	371c      	adds	r7, #28
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr
 8008f64:	fffeff8f 	.word	0xfffeff8f
 8008f68:	40010000 	.word	0x40010000
 8008f6c:	40010400 	.word	0x40010400

08008f70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b087      	sub	sp, #28
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a1b      	ldr	r3, [r3, #32]
 8008f7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a1b      	ldr	r3, [r3, #32]
 8008f84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	69db      	ldr	r3, [r3, #28]
 8008f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f98:	68fa      	ldr	r2, [r7, #12]
 8008f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8009014 <TIM_OC4_SetConfig+0xa4>)
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	021b      	lsls	r3, r3, #8
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008fba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	031b      	lsls	r3, r3, #12
 8008fc2:	693a      	ldr	r2, [r7, #16]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a13      	ldr	r2, [pc, #76]	@ (8009018 <TIM_OC4_SetConfig+0xa8>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d003      	beq.n	8008fd8 <TIM_OC4_SetConfig+0x68>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a12      	ldr	r2, [pc, #72]	@ (800901c <TIM_OC4_SetConfig+0xac>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d109      	bne.n	8008fec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008fde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	695b      	ldr	r3, [r3, #20]
 8008fe4:	019b      	lsls	r3, r3, #6
 8008fe6:	697a      	ldr	r2, [r7, #20]
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	68fa      	ldr	r2, [r7, #12]
 8008ff6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	685a      	ldr	r2, [r3, #4]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	693a      	ldr	r2, [r7, #16]
 8009004:	621a      	str	r2, [r3, #32]
}
 8009006:	bf00      	nop
 8009008:	371c      	adds	r7, #28
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	feff8fff 	.word	0xfeff8fff
 8009018:	40010000 	.word	0x40010000
 800901c:	40010400 	.word	0x40010400

08009020 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009020:	b480      	push	{r7}
 8009022:	b087      	sub	sp, #28
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a1b      	ldr	r3, [r3, #32]
 800902e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6a1b      	ldr	r3, [r3, #32]
 8009034:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	4b1b      	ldr	r3, [pc, #108]	@ (80090b8 <TIM_OC5_SetConfig+0x98>)
 800904c:	4013      	ands	r3, r2
 800904e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	4313      	orrs	r3, r2
 8009058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009060:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	041b      	lsls	r3, r3, #16
 8009068:	693a      	ldr	r2, [r7, #16]
 800906a:	4313      	orrs	r3, r2
 800906c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	4a12      	ldr	r2, [pc, #72]	@ (80090bc <TIM_OC5_SetConfig+0x9c>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d003      	beq.n	800907e <TIM_OC5_SetConfig+0x5e>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4a11      	ldr	r2, [pc, #68]	@ (80090c0 <TIM_OC5_SetConfig+0xa0>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d109      	bne.n	8009092 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009084:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	695b      	ldr	r3, [r3, #20]
 800908a:	021b      	lsls	r3, r3, #8
 800908c:	697a      	ldr	r2, [r7, #20]
 800908e:	4313      	orrs	r3, r2
 8009090:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	697a      	ldr	r2, [r7, #20]
 8009096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	68fa      	ldr	r2, [r7, #12]
 800909c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	685a      	ldr	r2, [r3, #4]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	693a      	ldr	r2, [r7, #16]
 80090aa:	621a      	str	r2, [r3, #32]
}
 80090ac:	bf00      	nop
 80090ae:	371c      	adds	r7, #28
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr
 80090b8:	fffeff8f 	.word	0xfffeff8f
 80090bc:	40010000 	.word	0x40010000
 80090c0:	40010400 	.word	0x40010400

080090c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b087      	sub	sp, #28
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a1b      	ldr	r3, [r3, #32]
 80090d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6a1b      	ldr	r3, [r3, #32]
 80090d8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	4b1c      	ldr	r3, [pc, #112]	@ (8009160 <TIM_OC6_SetConfig+0x9c>)
 80090f0:	4013      	ands	r3, r2
 80090f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	021b      	lsls	r3, r3, #8
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009106:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	051b      	lsls	r3, r3, #20
 800910e:	693a      	ldr	r2, [r7, #16]
 8009110:	4313      	orrs	r3, r2
 8009112:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4a13      	ldr	r2, [pc, #76]	@ (8009164 <TIM_OC6_SetConfig+0xa0>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d003      	beq.n	8009124 <TIM_OC6_SetConfig+0x60>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4a12      	ldr	r2, [pc, #72]	@ (8009168 <TIM_OC6_SetConfig+0xa4>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d109      	bne.n	8009138 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800912a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	695b      	ldr	r3, [r3, #20]
 8009130:	029b      	lsls	r3, r3, #10
 8009132:	697a      	ldr	r2, [r7, #20]
 8009134:	4313      	orrs	r3, r2
 8009136:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	697a      	ldr	r2, [r7, #20]
 800913c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	68fa      	ldr	r2, [r7, #12]
 8009142:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	685a      	ldr	r2, [r3, #4]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	693a      	ldr	r2, [r7, #16]
 8009150:	621a      	str	r2, [r3, #32]
}
 8009152:	bf00      	nop
 8009154:	371c      	adds	r7, #28
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	feff8fff 	.word	0xfeff8fff
 8009164:	40010000 	.word	0x40010000
 8009168:	40010400 	.word	0x40010400

0800916c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800916c:	b480      	push	{r7}
 800916e:	b087      	sub	sp, #28
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6a1b      	ldr	r3, [r3, #32]
 800917c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	6a1b      	ldr	r3, [r3, #32]
 8009182:	f023 0201 	bic.w	r2, r3, #1
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	699b      	ldr	r3, [r3, #24]
 800918e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	011b      	lsls	r3, r3, #4
 800919c:	693a      	ldr	r2, [r7, #16]
 800919e:	4313      	orrs	r3, r2
 80091a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	f023 030a 	bic.w	r3, r3, #10
 80091a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80091aa:	697a      	ldr	r2, [r7, #20]
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	4313      	orrs	r3, r2
 80091b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	693a      	ldr	r2, [r7, #16]
 80091b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	697a      	ldr	r2, [r7, #20]
 80091bc:	621a      	str	r2, [r3, #32]
}
 80091be:	bf00      	nop
 80091c0:	371c      	adds	r7, #28
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr

080091ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091ca:	b480      	push	{r7}
 80091cc:	b087      	sub	sp, #28
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	60f8      	str	r0, [r7, #12]
 80091d2:	60b9      	str	r1, [r7, #8]
 80091d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6a1b      	ldr	r3, [r3, #32]
 80091e0:	f023 0210 	bic.w	r2, r3, #16
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80091f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	031b      	lsls	r3, r3, #12
 80091fa:	693a      	ldr	r2, [r7, #16]
 80091fc:	4313      	orrs	r3, r2
 80091fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009206:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	011b      	lsls	r3, r3, #4
 800920c:	697a      	ldr	r2, [r7, #20]
 800920e:	4313      	orrs	r3, r2
 8009210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	693a      	ldr	r2, [r7, #16]
 8009216:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	697a      	ldr	r2, [r7, #20]
 800921c:	621a      	str	r2, [r3, #32]
}
 800921e:	bf00      	nop
 8009220:	371c      	adds	r7, #28
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr

0800922a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800922a:	b480      	push	{r7}
 800922c:	b085      	sub	sp, #20
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
 8009232:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009240:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009242:	683a      	ldr	r2, [r7, #0]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	4313      	orrs	r3, r2
 8009248:	f043 0307 	orr.w	r3, r3, #7
 800924c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	68fa      	ldr	r2, [r7, #12]
 8009252:	609a      	str	r2, [r3, #8]
}
 8009254:	bf00      	nop
 8009256:	3714      	adds	r7, #20
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009260:	b480      	push	{r7}
 8009262:	b087      	sub	sp, #28
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]
 800926c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800927a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	021a      	lsls	r2, r3, #8
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	431a      	orrs	r2, r3
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	4313      	orrs	r3, r2
 8009288:	697a      	ldr	r2, [r7, #20]
 800928a:	4313      	orrs	r3, r2
 800928c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	697a      	ldr	r2, [r7, #20]
 8009292:	609a      	str	r2, [r3, #8]
}
 8009294:	bf00      	nop
 8009296:	371c      	adds	r7, #28
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d101      	bne.n	80092b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80092b4:	2302      	movs	r3, #2
 80092b6:	e06d      	b.n	8009394 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2202      	movs	r2, #2
 80092c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a30      	ldr	r2, [pc, #192]	@ (80093a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d004      	beq.n	80092ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a2f      	ldr	r2, [pc, #188]	@ (80093a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d108      	bne.n	80092fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80092f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	68fa      	ldr	r2, [r7, #12]
 80092fa:	4313      	orrs	r3, r2
 80092fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009304:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	4313      	orrs	r3, r2
 800930e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	68fa      	ldr	r2, [r7, #12]
 8009316:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a20      	ldr	r2, [pc, #128]	@ (80093a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d022      	beq.n	8009368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800932a:	d01d      	beq.n	8009368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a1d      	ldr	r2, [pc, #116]	@ (80093a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d018      	beq.n	8009368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a1c      	ldr	r2, [pc, #112]	@ (80093ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d013      	beq.n	8009368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a1a      	ldr	r2, [pc, #104]	@ (80093b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d00e      	beq.n	8009368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a15      	ldr	r2, [pc, #84]	@ (80093a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d009      	beq.n	8009368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a16      	ldr	r2, [pc, #88]	@ (80093b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d004      	beq.n	8009368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a15      	ldr	r2, [pc, #84]	@ (80093b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d10c      	bne.n	8009382 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800936e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	4313      	orrs	r3, r2
 8009378:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	68ba      	ldr	r2, [r7, #8]
 8009380:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2201      	movs	r2, #1
 8009386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	3714      	adds	r7, #20
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr
 80093a0:	40010000 	.word	0x40010000
 80093a4:	40010400 	.word	0x40010400
 80093a8:	40000400 	.word	0x40000400
 80093ac:	40000800 	.word	0x40000800
 80093b0:	40000c00 	.word	0x40000c00
 80093b4:	40014000 	.word	0x40014000
 80093b8:	40001800 	.word	0x40001800

080093bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80093bc:	b480      	push	{r7}
 80093be:	b085      	sub	sp, #20
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80093c6:	2300      	movs	r3, #0
 80093c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d101      	bne.n	80093d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80093d4:	2302      	movs	r3, #2
 80093d6:	e065      	b.n	80094a4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	4313      	orrs	r3, r2
 80093ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	4313      	orrs	r3, r2
 8009408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4313      	orrs	r3, r2
 8009416:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	4313      	orrs	r3, r2
 8009424:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	695b      	ldr	r3, [r3, #20]
 8009430:	4313      	orrs	r3, r2
 8009432:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800943e:	4313      	orrs	r3, r2
 8009440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	699b      	ldr	r3, [r3, #24]
 800944c:	041b      	lsls	r3, r3, #16
 800944e:	4313      	orrs	r3, r2
 8009450:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a16      	ldr	r2, [pc, #88]	@ (80094b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d004      	beq.n	8009466 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a14      	ldr	r2, [pc, #80]	@ (80094b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d115      	bne.n	8009492 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009470:	051b      	lsls	r3, r3, #20
 8009472:	4313      	orrs	r3, r2
 8009474:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	69db      	ldr	r3, [r3, #28]
 8009480:	4313      	orrs	r3, r2
 8009482:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	6a1b      	ldr	r3, [r3, #32]
 800948e:	4313      	orrs	r3, r2
 8009490:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80094a2:	2300      	movs	r3, #0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3714      	adds	r7, #20
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr
 80094b0:	40010000 	.word	0x40010000
 80094b4:	40010400 	.word	0x40010400

080094b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d101      	bne.n	80094ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	e040      	b.n	800954c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d106      	bne.n	80094e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f7f9 f866 	bl	80025ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2224      	movs	r2, #36	@ 0x24
 80094e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f022 0201 	bic.w	r2, r2, #1
 80094f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d002      	beq.n	8009504 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 faf0 	bl	8009ae4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 f889 	bl	800961c <UART_SetConfig>
 800950a:	4603      	mov	r3, r0
 800950c:	2b01      	cmp	r3, #1
 800950e:	d101      	bne.n	8009514 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009510:	2301      	movs	r3, #1
 8009512:	e01b      	b.n	800954c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	685a      	ldr	r2, [r3, #4]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009522:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	689a      	ldr	r2, [r3, #8]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009532:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f042 0201 	orr.w	r2, r2, #1
 8009542:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 fb6f 	bl	8009c28 <UART_CheckIdleState>
 800954a:	4603      	mov	r3, r0
}
 800954c:	4618      	mov	r0, r3
 800954e:	3708      	adds	r7, #8
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b08a      	sub	sp, #40	@ 0x28
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	4613      	mov	r3, r2
 8009560:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009568:	2b20      	cmp	r3, #32
 800956a:	d132      	bne.n	80095d2 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d002      	beq.n	8009578 <HAL_UART_Receive_DMA+0x24>
 8009572:	88fb      	ldrh	r3, [r7, #6]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d101      	bne.n	800957c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	e02b      	b.n	80095d4 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2200      	movs	r2, #0
 8009580:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800958c:	2b00      	cmp	r3, #0
 800958e:	d018      	beq.n	80095c2 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	e853 3f00 	ldrex	r3, [r3]
 800959c:	613b      	str	r3, [r7, #16]
   return(result);
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80095a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	461a      	mov	r2, r3
 80095ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ae:	623b      	str	r3, [r7, #32]
 80095b0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b2:	69f9      	ldr	r1, [r7, #28]
 80095b4:	6a3a      	ldr	r2, [r7, #32]
 80095b6:	e841 2300 	strex	r3, r2, [r1]
 80095ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80095bc:	69bb      	ldr	r3, [r7, #24]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d1e6      	bne.n	8009590 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80095c2:	88fb      	ldrh	r3, [r7, #6]
 80095c4:	461a      	mov	r2, r3
 80095c6:	68b9      	ldr	r1, [r7, #8]
 80095c8:	68f8      	ldr	r0, [r7, #12]
 80095ca:	f000 fbf1 	bl	8009db0 <UART_Start_Receive_DMA>
 80095ce:	4603      	mov	r3, r0
 80095d0:	e000      	b.n	80095d4 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 80095d2:	2302      	movs	r3, #2
  }
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3728      	adds	r7, #40	@ 0x28
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80095e4:	bf00      	nop
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80095f8:	bf00      	nop
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	460b      	mov	r3, r1
 800960e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009610:	bf00      	nop
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b088      	sub	sp, #32
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009624:	2300      	movs	r3, #0
 8009626:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	689a      	ldr	r2, [r3, #8]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	691b      	ldr	r3, [r3, #16]
 8009630:	431a      	orrs	r2, r3
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	695b      	ldr	r3, [r3, #20]
 8009636:	431a      	orrs	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	69db      	ldr	r3, [r3, #28]
 800963c:	4313      	orrs	r3, r2
 800963e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	4ba6      	ldr	r3, [pc, #664]	@ (80098e0 <UART_SetConfig+0x2c4>)
 8009648:	4013      	ands	r3, r2
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	6812      	ldr	r2, [r2, #0]
 800964e:	6979      	ldr	r1, [r7, #20]
 8009650:	430b      	orrs	r3, r1
 8009652:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	68da      	ldr	r2, [r3, #12]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	430a      	orrs	r2, r1
 8009668:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	699b      	ldr	r3, [r3, #24]
 800966e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6a1b      	ldr	r3, [r3, #32]
 8009674:	697a      	ldr	r2, [r7, #20]
 8009676:	4313      	orrs	r3, r2
 8009678:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	697a      	ldr	r2, [r7, #20]
 800968a:	430a      	orrs	r2, r1
 800968c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a94      	ldr	r2, [pc, #592]	@ (80098e4 <UART_SetConfig+0x2c8>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d120      	bne.n	80096da <UART_SetConfig+0xbe>
 8009698:	4b93      	ldr	r3, [pc, #588]	@ (80098e8 <UART_SetConfig+0x2cc>)
 800969a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800969e:	f003 0303 	and.w	r3, r3, #3
 80096a2:	2b03      	cmp	r3, #3
 80096a4:	d816      	bhi.n	80096d4 <UART_SetConfig+0xb8>
 80096a6:	a201      	add	r2, pc, #4	@ (adr r2, 80096ac <UART_SetConfig+0x90>)
 80096a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ac:	080096bd 	.word	0x080096bd
 80096b0:	080096c9 	.word	0x080096c9
 80096b4:	080096c3 	.word	0x080096c3
 80096b8:	080096cf 	.word	0x080096cf
 80096bc:	2301      	movs	r3, #1
 80096be:	77fb      	strb	r3, [r7, #31]
 80096c0:	e150      	b.n	8009964 <UART_SetConfig+0x348>
 80096c2:	2302      	movs	r3, #2
 80096c4:	77fb      	strb	r3, [r7, #31]
 80096c6:	e14d      	b.n	8009964 <UART_SetConfig+0x348>
 80096c8:	2304      	movs	r3, #4
 80096ca:	77fb      	strb	r3, [r7, #31]
 80096cc:	e14a      	b.n	8009964 <UART_SetConfig+0x348>
 80096ce:	2308      	movs	r3, #8
 80096d0:	77fb      	strb	r3, [r7, #31]
 80096d2:	e147      	b.n	8009964 <UART_SetConfig+0x348>
 80096d4:	2310      	movs	r3, #16
 80096d6:	77fb      	strb	r3, [r7, #31]
 80096d8:	e144      	b.n	8009964 <UART_SetConfig+0x348>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a83      	ldr	r2, [pc, #524]	@ (80098ec <UART_SetConfig+0x2d0>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d132      	bne.n	800974a <UART_SetConfig+0x12e>
 80096e4:	4b80      	ldr	r3, [pc, #512]	@ (80098e8 <UART_SetConfig+0x2cc>)
 80096e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096ea:	f003 030c 	and.w	r3, r3, #12
 80096ee:	2b0c      	cmp	r3, #12
 80096f0:	d828      	bhi.n	8009744 <UART_SetConfig+0x128>
 80096f2:	a201      	add	r2, pc, #4	@ (adr r2, 80096f8 <UART_SetConfig+0xdc>)
 80096f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f8:	0800972d 	.word	0x0800972d
 80096fc:	08009745 	.word	0x08009745
 8009700:	08009745 	.word	0x08009745
 8009704:	08009745 	.word	0x08009745
 8009708:	08009739 	.word	0x08009739
 800970c:	08009745 	.word	0x08009745
 8009710:	08009745 	.word	0x08009745
 8009714:	08009745 	.word	0x08009745
 8009718:	08009733 	.word	0x08009733
 800971c:	08009745 	.word	0x08009745
 8009720:	08009745 	.word	0x08009745
 8009724:	08009745 	.word	0x08009745
 8009728:	0800973f 	.word	0x0800973f
 800972c:	2300      	movs	r3, #0
 800972e:	77fb      	strb	r3, [r7, #31]
 8009730:	e118      	b.n	8009964 <UART_SetConfig+0x348>
 8009732:	2302      	movs	r3, #2
 8009734:	77fb      	strb	r3, [r7, #31]
 8009736:	e115      	b.n	8009964 <UART_SetConfig+0x348>
 8009738:	2304      	movs	r3, #4
 800973a:	77fb      	strb	r3, [r7, #31]
 800973c:	e112      	b.n	8009964 <UART_SetConfig+0x348>
 800973e:	2308      	movs	r3, #8
 8009740:	77fb      	strb	r3, [r7, #31]
 8009742:	e10f      	b.n	8009964 <UART_SetConfig+0x348>
 8009744:	2310      	movs	r3, #16
 8009746:	77fb      	strb	r3, [r7, #31]
 8009748:	e10c      	b.n	8009964 <UART_SetConfig+0x348>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a68      	ldr	r2, [pc, #416]	@ (80098f0 <UART_SetConfig+0x2d4>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d120      	bne.n	8009796 <UART_SetConfig+0x17a>
 8009754:	4b64      	ldr	r3, [pc, #400]	@ (80098e8 <UART_SetConfig+0x2cc>)
 8009756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800975a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800975e:	2b30      	cmp	r3, #48	@ 0x30
 8009760:	d013      	beq.n	800978a <UART_SetConfig+0x16e>
 8009762:	2b30      	cmp	r3, #48	@ 0x30
 8009764:	d814      	bhi.n	8009790 <UART_SetConfig+0x174>
 8009766:	2b20      	cmp	r3, #32
 8009768:	d009      	beq.n	800977e <UART_SetConfig+0x162>
 800976a:	2b20      	cmp	r3, #32
 800976c:	d810      	bhi.n	8009790 <UART_SetConfig+0x174>
 800976e:	2b00      	cmp	r3, #0
 8009770:	d002      	beq.n	8009778 <UART_SetConfig+0x15c>
 8009772:	2b10      	cmp	r3, #16
 8009774:	d006      	beq.n	8009784 <UART_SetConfig+0x168>
 8009776:	e00b      	b.n	8009790 <UART_SetConfig+0x174>
 8009778:	2300      	movs	r3, #0
 800977a:	77fb      	strb	r3, [r7, #31]
 800977c:	e0f2      	b.n	8009964 <UART_SetConfig+0x348>
 800977e:	2302      	movs	r3, #2
 8009780:	77fb      	strb	r3, [r7, #31]
 8009782:	e0ef      	b.n	8009964 <UART_SetConfig+0x348>
 8009784:	2304      	movs	r3, #4
 8009786:	77fb      	strb	r3, [r7, #31]
 8009788:	e0ec      	b.n	8009964 <UART_SetConfig+0x348>
 800978a:	2308      	movs	r3, #8
 800978c:	77fb      	strb	r3, [r7, #31]
 800978e:	e0e9      	b.n	8009964 <UART_SetConfig+0x348>
 8009790:	2310      	movs	r3, #16
 8009792:	77fb      	strb	r3, [r7, #31]
 8009794:	e0e6      	b.n	8009964 <UART_SetConfig+0x348>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a56      	ldr	r2, [pc, #344]	@ (80098f4 <UART_SetConfig+0x2d8>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d120      	bne.n	80097e2 <UART_SetConfig+0x1c6>
 80097a0:	4b51      	ldr	r3, [pc, #324]	@ (80098e8 <UART_SetConfig+0x2cc>)
 80097a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80097aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80097ac:	d013      	beq.n	80097d6 <UART_SetConfig+0x1ba>
 80097ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80097b0:	d814      	bhi.n	80097dc <UART_SetConfig+0x1c0>
 80097b2:	2b80      	cmp	r3, #128	@ 0x80
 80097b4:	d009      	beq.n	80097ca <UART_SetConfig+0x1ae>
 80097b6:	2b80      	cmp	r3, #128	@ 0x80
 80097b8:	d810      	bhi.n	80097dc <UART_SetConfig+0x1c0>
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d002      	beq.n	80097c4 <UART_SetConfig+0x1a8>
 80097be:	2b40      	cmp	r3, #64	@ 0x40
 80097c0:	d006      	beq.n	80097d0 <UART_SetConfig+0x1b4>
 80097c2:	e00b      	b.n	80097dc <UART_SetConfig+0x1c0>
 80097c4:	2300      	movs	r3, #0
 80097c6:	77fb      	strb	r3, [r7, #31]
 80097c8:	e0cc      	b.n	8009964 <UART_SetConfig+0x348>
 80097ca:	2302      	movs	r3, #2
 80097cc:	77fb      	strb	r3, [r7, #31]
 80097ce:	e0c9      	b.n	8009964 <UART_SetConfig+0x348>
 80097d0:	2304      	movs	r3, #4
 80097d2:	77fb      	strb	r3, [r7, #31]
 80097d4:	e0c6      	b.n	8009964 <UART_SetConfig+0x348>
 80097d6:	2308      	movs	r3, #8
 80097d8:	77fb      	strb	r3, [r7, #31]
 80097da:	e0c3      	b.n	8009964 <UART_SetConfig+0x348>
 80097dc:	2310      	movs	r3, #16
 80097de:	77fb      	strb	r3, [r7, #31]
 80097e0:	e0c0      	b.n	8009964 <UART_SetConfig+0x348>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a44      	ldr	r2, [pc, #272]	@ (80098f8 <UART_SetConfig+0x2dc>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d125      	bne.n	8009838 <UART_SetConfig+0x21c>
 80097ec:	4b3e      	ldr	r3, [pc, #248]	@ (80098e8 <UART_SetConfig+0x2cc>)
 80097ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80097f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80097fa:	d017      	beq.n	800982c <UART_SetConfig+0x210>
 80097fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009800:	d817      	bhi.n	8009832 <UART_SetConfig+0x216>
 8009802:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009806:	d00b      	beq.n	8009820 <UART_SetConfig+0x204>
 8009808:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800980c:	d811      	bhi.n	8009832 <UART_SetConfig+0x216>
 800980e:	2b00      	cmp	r3, #0
 8009810:	d003      	beq.n	800981a <UART_SetConfig+0x1fe>
 8009812:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009816:	d006      	beq.n	8009826 <UART_SetConfig+0x20a>
 8009818:	e00b      	b.n	8009832 <UART_SetConfig+0x216>
 800981a:	2300      	movs	r3, #0
 800981c:	77fb      	strb	r3, [r7, #31]
 800981e:	e0a1      	b.n	8009964 <UART_SetConfig+0x348>
 8009820:	2302      	movs	r3, #2
 8009822:	77fb      	strb	r3, [r7, #31]
 8009824:	e09e      	b.n	8009964 <UART_SetConfig+0x348>
 8009826:	2304      	movs	r3, #4
 8009828:	77fb      	strb	r3, [r7, #31]
 800982a:	e09b      	b.n	8009964 <UART_SetConfig+0x348>
 800982c:	2308      	movs	r3, #8
 800982e:	77fb      	strb	r3, [r7, #31]
 8009830:	e098      	b.n	8009964 <UART_SetConfig+0x348>
 8009832:	2310      	movs	r3, #16
 8009834:	77fb      	strb	r3, [r7, #31]
 8009836:	e095      	b.n	8009964 <UART_SetConfig+0x348>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a2f      	ldr	r2, [pc, #188]	@ (80098fc <UART_SetConfig+0x2e0>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d125      	bne.n	800988e <UART_SetConfig+0x272>
 8009842:	4b29      	ldr	r3, [pc, #164]	@ (80098e8 <UART_SetConfig+0x2cc>)
 8009844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009848:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800984c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009850:	d017      	beq.n	8009882 <UART_SetConfig+0x266>
 8009852:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009856:	d817      	bhi.n	8009888 <UART_SetConfig+0x26c>
 8009858:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800985c:	d00b      	beq.n	8009876 <UART_SetConfig+0x25a>
 800985e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009862:	d811      	bhi.n	8009888 <UART_SetConfig+0x26c>
 8009864:	2b00      	cmp	r3, #0
 8009866:	d003      	beq.n	8009870 <UART_SetConfig+0x254>
 8009868:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800986c:	d006      	beq.n	800987c <UART_SetConfig+0x260>
 800986e:	e00b      	b.n	8009888 <UART_SetConfig+0x26c>
 8009870:	2301      	movs	r3, #1
 8009872:	77fb      	strb	r3, [r7, #31]
 8009874:	e076      	b.n	8009964 <UART_SetConfig+0x348>
 8009876:	2302      	movs	r3, #2
 8009878:	77fb      	strb	r3, [r7, #31]
 800987a:	e073      	b.n	8009964 <UART_SetConfig+0x348>
 800987c:	2304      	movs	r3, #4
 800987e:	77fb      	strb	r3, [r7, #31]
 8009880:	e070      	b.n	8009964 <UART_SetConfig+0x348>
 8009882:	2308      	movs	r3, #8
 8009884:	77fb      	strb	r3, [r7, #31]
 8009886:	e06d      	b.n	8009964 <UART_SetConfig+0x348>
 8009888:	2310      	movs	r3, #16
 800988a:	77fb      	strb	r3, [r7, #31]
 800988c:	e06a      	b.n	8009964 <UART_SetConfig+0x348>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a1b      	ldr	r2, [pc, #108]	@ (8009900 <UART_SetConfig+0x2e4>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d138      	bne.n	800990a <UART_SetConfig+0x2ee>
 8009898:	4b13      	ldr	r3, [pc, #76]	@ (80098e8 <UART_SetConfig+0x2cc>)
 800989a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800989e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80098a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80098a6:	d017      	beq.n	80098d8 <UART_SetConfig+0x2bc>
 80098a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80098ac:	d82a      	bhi.n	8009904 <UART_SetConfig+0x2e8>
 80098ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098b2:	d00b      	beq.n	80098cc <UART_SetConfig+0x2b0>
 80098b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098b8:	d824      	bhi.n	8009904 <UART_SetConfig+0x2e8>
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d003      	beq.n	80098c6 <UART_SetConfig+0x2aa>
 80098be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098c2:	d006      	beq.n	80098d2 <UART_SetConfig+0x2b6>
 80098c4:	e01e      	b.n	8009904 <UART_SetConfig+0x2e8>
 80098c6:	2300      	movs	r3, #0
 80098c8:	77fb      	strb	r3, [r7, #31]
 80098ca:	e04b      	b.n	8009964 <UART_SetConfig+0x348>
 80098cc:	2302      	movs	r3, #2
 80098ce:	77fb      	strb	r3, [r7, #31]
 80098d0:	e048      	b.n	8009964 <UART_SetConfig+0x348>
 80098d2:	2304      	movs	r3, #4
 80098d4:	77fb      	strb	r3, [r7, #31]
 80098d6:	e045      	b.n	8009964 <UART_SetConfig+0x348>
 80098d8:	2308      	movs	r3, #8
 80098da:	77fb      	strb	r3, [r7, #31]
 80098dc:	e042      	b.n	8009964 <UART_SetConfig+0x348>
 80098de:	bf00      	nop
 80098e0:	efff69f3 	.word	0xefff69f3
 80098e4:	40011000 	.word	0x40011000
 80098e8:	40023800 	.word	0x40023800
 80098ec:	40004400 	.word	0x40004400
 80098f0:	40004800 	.word	0x40004800
 80098f4:	40004c00 	.word	0x40004c00
 80098f8:	40005000 	.word	0x40005000
 80098fc:	40011400 	.word	0x40011400
 8009900:	40007800 	.word	0x40007800
 8009904:	2310      	movs	r3, #16
 8009906:	77fb      	strb	r3, [r7, #31]
 8009908:	e02c      	b.n	8009964 <UART_SetConfig+0x348>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a72      	ldr	r2, [pc, #456]	@ (8009ad8 <UART_SetConfig+0x4bc>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d125      	bne.n	8009960 <UART_SetConfig+0x344>
 8009914:	4b71      	ldr	r3, [pc, #452]	@ (8009adc <UART_SetConfig+0x4c0>)
 8009916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800991a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800991e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009922:	d017      	beq.n	8009954 <UART_SetConfig+0x338>
 8009924:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009928:	d817      	bhi.n	800995a <UART_SetConfig+0x33e>
 800992a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800992e:	d00b      	beq.n	8009948 <UART_SetConfig+0x32c>
 8009930:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009934:	d811      	bhi.n	800995a <UART_SetConfig+0x33e>
 8009936:	2b00      	cmp	r3, #0
 8009938:	d003      	beq.n	8009942 <UART_SetConfig+0x326>
 800993a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800993e:	d006      	beq.n	800994e <UART_SetConfig+0x332>
 8009940:	e00b      	b.n	800995a <UART_SetConfig+0x33e>
 8009942:	2300      	movs	r3, #0
 8009944:	77fb      	strb	r3, [r7, #31]
 8009946:	e00d      	b.n	8009964 <UART_SetConfig+0x348>
 8009948:	2302      	movs	r3, #2
 800994a:	77fb      	strb	r3, [r7, #31]
 800994c:	e00a      	b.n	8009964 <UART_SetConfig+0x348>
 800994e:	2304      	movs	r3, #4
 8009950:	77fb      	strb	r3, [r7, #31]
 8009952:	e007      	b.n	8009964 <UART_SetConfig+0x348>
 8009954:	2308      	movs	r3, #8
 8009956:	77fb      	strb	r3, [r7, #31]
 8009958:	e004      	b.n	8009964 <UART_SetConfig+0x348>
 800995a:	2310      	movs	r3, #16
 800995c:	77fb      	strb	r3, [r7, #31]
 800995e:	e001      	b.n	8009964 <UART_SetConfig+0x348>
 8009960:	2310      	movs	r3, #16
 8009962:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	69db      	ldr	r3, [r3, #28]
 8009968:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800996c:	d15b      	bne.n	8009a26 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800996e:	7ffb      	ldrb	r3, [r7, #31]
 8009970:	2b08      	cmp	r3, #8
 8009972:	d828      	bhi.n	80099c6 <UART_SetConfig+0x3aa>
 8009974:	a201      	add	r2, pc, #4	@ (adr r2, 800997c <UART_SetConfig+0x360>)
 8009976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800997a:	bf00      	nop
 800997c:	080099a1 	.word	0x080099a1
 8009980:	080099a9 	.word	0x080099a9
 8009984:	080099b1 	.word	0x080099b1
 8009988:	080099c7 	.word	0x080099c7
 800998c:	080099b7 	.word	0x080099b7
 8009990:	080099c7 	.word	0x080099c7
 8009994:	080099c7 	.word	0x080099c7
 8009998:	080099c7 	.word	0x080099c7
 800999c:	080099bf 	.word	0x080099bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099a0:	f7fc fcd8 	bl	8006354 <HAL_RCC_GetPCLK1Freq>
 80099a4:	61b8      	str	r0, [r7, #24]
        break;
 80099a6:	e013      	b.n	80099d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80099a8:	f7fc fce8 	bl	800637c <HAL_RCC_GetPCLK2Freq>
 80099ac:	61b8      	str	r0, [r7, #24]
        break;
 80099ae:	e00f      	b.n	80099d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099b0:	4b4b      	ldr	r3, [pc, #300]	@ (8009ae0 <UART_SetConfig+0x4c4>)
 80099b2:	61bb      	str	r3, [r7, #24]
        break;
 80099b4:	e00c      	b.n	80099d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099b6:	f7fc fbbb 	bl	8006130 <HAL_RCC_GetSysClockFreq>
 80099ba:	61b8      	str	r0, [r7, #24]
        break;
 80099bc:	e008      	b.n	80099d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099c2:	61bb      	str	r3, [r7, #24]
        break;
 80099c4:	e004      	b.n	80099d0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80099c6:	2300      	movs	r3, #0
 80099c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80099ca:	2301      	movs	r3, #1
 80099cc:	77bb      	strb	r3, [r7, #30]
        break;
 80099ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d074      	beq.n	8009ac0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	005a      	lsls	r2, r3, #1
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	085b      	lsrs	r3, r3, #1
 80099e0:	441a      	add	r2, r3
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80099ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	2b0f      	cmp	r3, #15
 80099f0:	d916      	bls.n	8009a20 <UART_SetConfig+0x404>
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099f8:	d212      	bcs.n	8009a20 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	f023 030f 	bic.w	r3, r3, #15
 8009a02:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	085b      	lsrs	r3, r3, #1
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	f003 0307 	and.w	r3, r3, #7
 8009a0e:	b29a      	uxth	r2, r3
 8009a10:	89fb      	ldrh	r3, [r7, #14]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	89fa      	ldrh	r2, [r7, #14]
 8009a1c:	60da      	str	r2, [r3, #12]
 8009a1e:	e04f      	b.n	8009ac0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009a20:	2301      	movs	r3, #1
 8009a22:	77bb      	strb	r3, [r7, #30]
 8009a24:	e04c      	b.n	8009ac0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009a26:	7ffb      	ldrb	r3, [r7, #31]
 8009a28:	2b08      	cmp	r3, #8
 8009a2a:	d828      	bhi.n	8009a7e <UART_SetConfig+0x462>
 8009a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8009a34 <UART_SetConfig+0x418>)
 8009a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a32:	bf00      	nop
 8009a34:	08009a59 	.word	0x08009a59
 8009a38:	08009a61 	.word	0x08009a61
 8009a3c:	08009a69 	.word	0x08009a69
 8009a40:	08009a7f 	.word	0x08009a7f
 8009a44:	08009a6f 	.word	0x08009a6f
 8009a48:	08009a7f 	.word	0x08009a7f
 8009a4c:	08009a7f 	.word	0x08009a7f
 8009a50:	08009a7f 	.word	0x08009a7f
 8009a54:	08009a77 	.word	0x08009a77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a58:	f7fc fc7c 	bl	8006354 <HAL_RCC_GetPCLK1Freq>
 8009a5c:	61b8      	str	r0, [r7, #24]
        break;
 8009a5e:	e013      	b.n	8009a88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a60:	f7fc fc8c 	bl	800637c <HAL_RCC_GetPCLK2Freq>
 8009a64:	61b8      	str	r0, [r7, #24]
        break;
 8009a66:	e00f      	b.n	8009a88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a68:	4b1d      	ldr	r3, [pc, #116]	@ (8009ae0 <UART_SetConfig+0x4c4>)
 8009a6a:	61bb      	str	r3, [r7, #24]
        break;
 8009a6c:	e00c      	b.n	8009a88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a6e:	f7fc fb5f 	bl	8006130 <HAL_RCC_GetSysClockFreq>
 8009a72:	61b8      	str	r0, [r7, #24]
        break;
 8009a74:	e008      	b.n	8009a88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a7a:	61bb      	str	r3, [r7, #24]
        break;
 8009a7c:	e004      	b.n	8009a88 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	77bb      	strb	r3, [r7, #30]
        break;
 8009a86:	bf00      	nop
    }

    if (pclk != 0U)
 8009a88:	69bb      	ldr	r3, [r7, #24]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d018      	beq.n	8009ac0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	085a      	lsrs	r2, r3, #1
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	441a      	add	r2, r3
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009aa0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	2b0f      	cmp	r3, #15
 8009aa6:	d909      	bls.n	8009abc <UART_SetConfig+0x4a0>
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009aae:	d205      	bcs.n	8009abc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	b29a      	uxth	r2, r3
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	60da      	str	r2, [r3, #12]
 8009aba:	e001      	b.n	8009ac0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009acc:	7fbb      	ldrb	r3, [r7, #30]
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3720      	adds	r7, #32
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	40007c00 	.word	0x40007c00
 8009adc:	40023800 	.word	0x40023800
 8009ae0:	00f42400 	.word	0x00f42400

08009ae4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009af0:	f003 0308 	and.w	r3, r3, #8
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d00a      	beq.n	8009b0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	430a      	orrs	r2, r1
 8009b0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b12:	f003 0301 	and.w	r3, r3, #1
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00a      	beq.n	8009b30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	430a      	orrs	r2, r1
 8009b2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b34:	f003 0302 	and.w	r3, r3, #2
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d00a      	beq.n	8009b52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	430a      	orrs	r2, r1
 8009b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b56:	f003 0304 	and.w	r3, r3, #4
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00a      	beq.n	8009b74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	430a      	orrs	r2, r1
 8009b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b78:	f003 0310 	and.w	r3, r3, #16
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d00a      	beq.n	8009b96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	430a      	orrs	r2, r1
 8009b94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b9a:	f003 0320 	and.w	r3, r3, #32
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00a      	beq.n	8009bb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	430a      	orrs	r2, r1
 8009bb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d01a      	beq.n	8009bfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	430a      	orrs	r2, r1
 8009bd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009be2:	d10a      	bne.n	8009bfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	430a      	orrs	r2, r1
 8009bf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d00a      	beq.n	8009c1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	430a      	orrs	r2, r1
 8009c1a:	605a      	str	r2, [r3, #4]
  }
}
 8009c1c:	bf00      	nop
 8009c1e:	370c      	adds	r7, #12
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b08c      	sub	sp, #48	@ 0x30
 8009c2c:	af02      	add	r7, sp, #8
 8009c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009c38:	f7f9 f93a 	bl	8002eb0 <HAL_GetTick>
 8009c3c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f003 0308 	and.w	r3, r3, #8
 8009c48:	2b08      	cmp	r3, #8
 8009c4a:	d12e      	bne.n	8009caa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c54:	2200      	movs	r2, #0
 8009c56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 f83b 	bl	8009cd6 <UART_WaitOnFlagUntilTimeout>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d021      	beq.n	8009caa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	e853 3f00 	ldrex	r3, [r3]
 8009c72:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c7a:	623b      	str	r3, [r7, #32]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	461a      	mov	r2, r3
 8009c82:	6a3b      	ldr	r3, [r7, #32]
 8009c84:	61fb      	str	r3, [r7, #28]
 8009c86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c88:	69b9      	ldr	r1, [r7, #24]
 8009c8a:	69fa      	ldr	r2, [r7, #28]
 8009c8c:	e841 2300 	strex	r3, r2, [r1]
 8009c90:	617b      	str	r3, [r7, #20]
   return(result);
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d1e6      	bne.n	8009c66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2220      	movs	r2, #32
 8009c9c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ca6:	2303      	movs	r3, #3
 8009ca8:	e011      	b.n	8009cce <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2220      	movs	r2, #32
 8009cae:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2220      	movs	r2, #32
 8009cb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3728      	adds	r7, #40	@ 0x28
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}

08009cd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009cd6:	b580      	push	{r7, lr}
 8009cd8:	b084      	sub	sp, #16
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	60f8      	str	r0, [r7, #12]
 8009cde:	60b9      	str	r1, [r7, #8]
 8009ce0:	603b      	str	r3, [r7, #0]
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ce6:	e04f      	b.n	8009d88 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009cee:	d04b      	beq.n	8009d88 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cf0:	f7f9 f8de 	bl	8002eb0 <HAL_GetTick>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	1ad3      	subs	r3, r2, r3
 8009cfa:	69ba      	ldr	r2, [r7, #24]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d302      	bcc.n	8009d06 <UART_WaitOnFlagUntilTimeout+0x30>
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d101      	bne.n	8009d0a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009d06:	2303      	movs	r3, #3
 8009d08:	e04e      	b.n	8009da8 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f003 0304 	and.w	r3, r3, #4
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d037      	beq.n	8009d88 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	2b80      	cmp	r3, #128	@ 0x80
 8009d1c:	d034      	beq.n	8009d88 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	2b40      	cmp	r3, #64	@ 0x40
 8009d22:	d031      	beq.n	8009d88 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	69db      	ldr	r3, [r3, #28]
 8009d2a:	f003 0308 	and.w	r3, r3, #8
 8009d2e:	2b08      	cmp	r3, #8
 8009d30:	d110      	bne.n	8009d54 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2208      	movs	r2, #8
 8009d38:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d3a:	68f8      	ldr	r0, [r7, #12]
 8009d3c:	f000 f8fe 	bl	8009f3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2208      	movs	r2, #8
 8009d44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009d50:	2301      	movs	r3, #1
 8009d52:	e029      	b.n	8009da8 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	69db      	ldr	r3, [r3, #28]
 8009d5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d62:	d111      	bne.n	8009d88 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009d6c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d6e:	68f8      	ldr	r0, [r7, #12]
 8009d70:	f000 f8e4 	bl	8009f3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2220      	movs	r2, #32
 8009d78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009d84:	2303      	movs	r3, #3
 8009d86:	e00f      	b.n	8009da8 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	69da      	ldr	r2, [r3, #28]
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	4013      	ands	r3, r2
 8009d92:	68ba      	ldr	r2, [r7, #8]
 8009d94:	429a      	cmp	r2, r3
 8009d96:	bf0c      	ite	eq
 8009d98:	2301      	moveq	r3, #1
 8009d9a:	2300      	movne	r3, #0
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	461a      	mov	r2, r3
 8009da0:	79fb      	ldrb	r3, [r7, #7]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d0a0      	beq.n	8009ce8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b096      	sub	sp, #88	@ 0x58
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	4613      	mov	r3, r2
 8009dbc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	68ba      	ldr	r2, [r7, #8]
 8009dc2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	88fa      	ldrh	r2, [r7, #6]
 8009dc8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2222      	movs	r2, #34	@ 0x22
 8009dd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d028      	beq.n	8009e36 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009de8:	4a3e      	ldr	r2, [pc, #248]	@ (8009ee4 <UART_Start_Receive_DMA+0x134>)
 8009dea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009df0:	4a3d      	ldr	r2, [pc, #244]	@ (8009ee8 <UART_Start_Receive_DMA+0x138>)
 8009df2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009df8:	4a3c      	ldr	r2, [pc, #240]	@ (8009eec <UART_Start_Receive_DMA+0x13c>)
 8009dfa:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e00:	2200      	movs	r2, #0
 8009e02:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	3324      	adds	r3, #36	@ 0x24
 8009e0e:	4619      	mov	r1, r3
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e14:	461a      	mov	r2, r3
 8009e16:	88fb      	ldrh	r3, [r7, #6]
 8009e18:	f7f9 fd46 	bl	80038a8 <HAL_DMA_Start_IT>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d009      	beq.n	8009e36 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2210      	movs	r2, #16
 8009e26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2220      	movs	r2, #32
 8009e2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8009e32:	2301      	movs	r3, #1
 8009e34:	e051      	b.n	8009eda <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	691b      	ldr	r3, [r3, #16]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d018      	beq.n	8009e70 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e46:	e853 3f00 	ldrex	r3, [r3]
 8009e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e52:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	461a      	mov	r2, r3
 8009e5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e5e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e60:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009e62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e64:	e841 2300 	strex	r3, r2, [r1]
 8009e68:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009e6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d1e6      	bne.n	8009e3e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	3308      	adds	r3, #8
 8009e76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e7a:	e853 3f00 	ldrex	r3, [r3]
 8009e7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e82:	f043 0301 	orr.w	r3, r3, #1
 8009e86:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	3308      	adds	r3, #8
 8009e8e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009e90:	637a      	str	r2, [r7, #52]	@ 0x34
 8009e92:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e94:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009e96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009e98:	e841 2300 	strex	r3, r2, [r1]
 8009e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d1e5      	bne.n	8009e70 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	3308      	adds	r3, #8
 8009eaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	e853 3f00 	ldrex	r3, [r3]
 8009eb2:	613b      	str	r3, [r7, #16]
   return(result);
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	3308      	adds	r3, #8
 8009ec2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009ec4:	623a      	str	r2, [r7, #32]
 8009ec6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec8:	69f9      	ldr	r1, [r7, #28]
 8009eca:	6a3a      	ldr	r2, [r7, #32]
 8009ecc:	e841 2300 	strex	r3, r2, [r1]
 8009ed0:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ed2:	69bb      	ldr	r3, [r7, #24]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d1e5      	bne.n	8009ea4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8009ed8:	2300      	movs	r3, #0
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3758      	adds	r7, #88	@ 0x58
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	0800a005 	.word	0x0800a005
 8009ee8:	0800a12d 	.word	0x0800a12d
 8009eec:	0800a16b 	.word	0x0800a16b

08009ef0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b089      	sub	sp, #36	@ 0x24
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	e853 3f00 	ldrex	r3, [r3]
 8009f04:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009f0c:	61fb      	str	r3, [r7, #28]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	461a      	mov	r2, r3
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	61bb      	str	r3, [r7, #24]
 8009f18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1a:	6979      	ldr	r1, [r7, #20]
 8009f1c:	69ba      	ldr	r2, [r7, #24]
 8009f1e:	e841 2300 	strex	r3, r2, [r1]
 8009f22:	613b      	str	r3, [r7, #16]
   return(result);
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1e6      	bne.n	8009ef8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2220      	movs	r2, #32
 8009f2e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8009f30:	bf00      	nop
 8009f32:	3724      	adds	r7, #36	@ 0x24
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b095      	sub	sp, #84	@ 0x54
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f4c:	e853 3f00 	ldrex	r3, [r3]
 8009f50:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	461a      	mov	r2, r3
 8009f60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f62:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f64:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009f68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009f6a:	e841 2300 	strex	r3, r2, [r1]
 8009f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d1e6      	bne.n	8009f44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	3308      	adds	r3, #8
 8009f7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f7e:	6a3b      	ldr	r3, [r7, #32]
 8009f80:	e853 3f00 	ldrex	r3, [r3]
 8009f84:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f86:	69fb      	ldr	r3, [r7, #28]
 8009f88:	f023 0301 	bic.w	r3, r3, #1
 8009f8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	3308      	adds	r3, #8
 8009f94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f9e:	e841 2300 	strex	r3, r2, [r1]
 8009fa2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d1e5      	bne.n	8009f76 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d118      	bne.n	8009fe4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	e853 3f00 	ldrex	r3, [r3]
 8009fbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	f023 0310 	bic.w	r3, r3, #16
 8009fc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	461a      	mov	r2, r3
 8009fce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fd0:	61bb      	str	r3, [r7, #24]
 8009fd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd4:	6979      	ldr	r1, [r7, #20]
 8009fd6:	69ba      	ldr	r2, [r7, #24]
 8009fd8:	e841 2300 	strex	r3, r2, [r1]
 8009fdc:	613b      	str	r3, [r7, #16]
   return(result);
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d1e6      	bne.n	8009fb2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2220      	movs	r2, #32
 8009fe8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009ff8:	bf00      	nop
 8009ffa:	3754      	adds	r7, #84	@ 0x54
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr

0800a004 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b09c      	sub	sp, #112	@ 0x70
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a010:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	69db      	ldr	r3, [r3, #28]
 800a016:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a01a:	d071      	beq.n	800a100 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a01c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a01e:	2200      	movs	r2, #0
 800a020:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a024:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a02c:	e853 3f00 	ldrex	r3, [r3]
 800a030:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a032:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a034:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a038:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a03a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	461a      	mov	r2, r3
 800a040:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a042:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a044:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a046:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a048:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a04a:	e841 2300 	strex	r3, r2, [r1]
 800a04e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a050:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1e6      	bne.n	800a024 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a056:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	3308      	adds	r3, #8
 800a05c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a05e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a060:	e853 3f00 	ldrex	r3, [r3]
 800a064:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a068:	f023 0301 	bic.w	r3, r3, #1
 800a06c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a06e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	3308      	adds	r3, #8
 800a074:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a076:	647a      	str	r2, [r7, #68]	@ 0x44
 800a078:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a07a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a07c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a07e:	e841 2300 	strex	r3, r2, [r1]
 800a082:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a086:	2b00      	cmp	r3, #0
 800a088:	d1e5      	bne.n	800a056 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a08a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	3308      	adds	r3, #8
 800a090:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a094:	e853 3f00 	ldrex	r3, [r3]
 800a098:	623b      	str	r3, [r7, #32]
   return(result);
 800a09a:	6a3b      	ldr	r3, [r7, #32]
 800a09c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0a0:	663b      	str	r3, [r7, #96]	@ 0x60
 800a0a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	3308      	adds	r3, #8
 800a0a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a0aa:	633a      	str	r2, [r7, #48]	@ 0x30
 800a0ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0b2:	e841 2300 	strex	r3, r2, [r1]
 800a0b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d1e5      	bne.n	800a08a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a0be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0c0:	2220      	movs	r2, #32
 800a0c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d118      	bne.n	800a100 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	e853 3f00 	ldrex	r3, [r3]
 800a0da:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f023 0310 	bic.w	r3, r3, #16
 800a0e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a0e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a0ec:	61fb      	str	r3, [r7, #28]
 800a0ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f0:	69b9      	ldr	r1, [r7, #24]
 800a0f2:	69fa      	ldr	r2, [r7, #28]
 800a0f4:	e841 2300 	strex	r3, r2, [r1]
 800a0f8:	617b      	str	r3, [r7, #20]
   return(result);
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d1e6      	bne.n	800a0ce <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a100:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a102:	2200      	movs	r2, #0
 800a104:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a106:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d107      	bne.n	800a11e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a10e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a110:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a114:	4619      	mov	r1, r3
 800a116:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a118:	f7ff fa74 	bl	8009604 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a11c:	e002      	b.n	800a124 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a11e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a120:	f7f7 fa0e 	bl	8001540 <HAL_UART_RxCpltCallback>
}
 800a124:	bf00      	nop
 800a126:	3770      	adds	r7, #112	@ 0x70
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a138:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2201      	movs	r2, #1
 800a13e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a144:	2b01      	cmp	r3, #1
 800a146:	d109      	bne.n	800a15c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a14e:	085b      	lsrs	r3, r3, #1
 800a150:	b29b      	uxth	r3, r3
 800a152:	4619      	mov	r1, r3
 800a154:	68f8      	ldr	r0, [r7, #12]
 800a156:	f7ff fa55 	bl	8009604 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a15a:	e002      	b.n	800a162 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a15c:	68f8      	ldr	r0, [r7, #12]
 800a15e:	f7ff fa3d 	bl	80095dc <HAL_UART_RxHalfCpltCallback>
}
 800a162:	bf00      	nop
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b086      	sub	sp, #24
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a176:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a17c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a184:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a190:	2b80      	cmp	r3, #128	@ 0x80
 800a192:	d109      	bne.n	800a1a8 <UART_DMAError+0x3e>
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	2b21      	cmp	r3, #33	@ 0x21
 800a198:	d106      	bne.n	800a1a8 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800a1a2:	6978      	ldr	r0, [r7, #20]
 800a1a4:	f7ff fea4 	bl	8009ef0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1b2:	2b40      	cmp	r3, #64	@ 0x40
 800a1b4:	d109      	bne.n	800a1ca <UART_DMAError+0x60>
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2b22      	cmp	r3, #34	@ 0x22
 800a1ba:	d106      	bne.n	800a1ca <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800a1c4:	6978      	ldr	r0, [r7, #20]
 800a1c6:	f7ff feb9 	bl	8009f3c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1d0:	f043 0210 	orr.w	r2, r3, #16
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a1da:	6978      	ldr	r0, [r7, #20]
 800a1dc:	f7ff fa08 	bl	80095f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1e0:	bf00      	nop
 800a1e2:	3718      	adds	r7, #24
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a1e8:	b084      	sub	sp, #16
 800a1ea:	b480      	push	{r7}
 800a1ec:	b085      	sub	sp, #20
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
 800a1f2:	f107 001c 	add.w	r0, r7, #28
 800a1f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a1fe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a200:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a202:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800a206:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800a20a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a20c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800a20e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800a212:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	4313      	orrs	r3, r2
 800a218:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	685a      	ldr	r2, [r3, #4]
 800a21e:	4b07      	ldr	r3, [pc, #28]	@ (800a23c <SDMMC_Init+0x54>)
 800a220:	4013      	ands	r3, r2
 800a222:	68fa      	ldr	r2, [r7, #12]
 800a224:	431a      	orrs	r2, r3
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a22a:	2300      	movs	r3, #0
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3714      	adds	r7, #20
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	b004      	add	sp, #16
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop
 800a23c:	ffff8100 	.word	0xffff8100

0800a240 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a24e:	4618      	mov	r0, r3
 800a250:	370c      	adds	r7, #12
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800a25a:	b480      	push	{r7}
 800a25c:	b083      	sub	sp, #12
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
 800a262:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a26e:	2300      	movs	r3, #0
}
 800a270:	4618      	mov	r0, r3
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2203      	movs	r2, #3
 800a288:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a28a:	2300      	movs	r3, #0
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	370c      	adds	r7, #12
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f003 0303 	and.w	r3, r3, #3
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	370c      	adds	r7, #12
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr

0800a2b4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a2d2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a2d8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a2de:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a2e0:	68fa      	ldr	r2, [r7, #12]
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	68da      	ldr	r2, [r3, #12]
 800a2ea:	4b06      	ldr	r3, [pc, #24]	@ (800a304 <SDMMC_SendCommand+0x50>)
 800a2ec:	4013      	ands	r3, r2
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	431a      	orrs	r2, r3
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a2f6:	2300      	movs	r3, #0
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3714      	adds	r7, #20
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr
 800a304:	fffff000 	.word	0xfffff000

0800a308 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	691b      	ldr	r3, [r3, #16]
 800a314:	b2db      	uxtb	r3, r3
}
 800a316:	4618      	mov	r0, r3
 800a318:	370c      	adds	r7, #12
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr

0800a322 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a322:	b480      	push	{r7}
 800a324:	b085      	sub	sp, #20
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
 800a32a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	3314      	adds	r3, #20
 800a330:	461a      	mov	r2, r3
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	4413      	add	r3, r2
 800a336:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
}  
 800a33c:	4618      	mov	r0, r3
 800a33e:	3714      	adds	r7, #20
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a348:	b480      	push	{r7}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a352:	2300      	movs	r3, #0
 800a354:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	685a      	ldr	r2, [r3, #4]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a36e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a374:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a37a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a37c:	68fa      	ldr	r2, [r7, #12]
 800a37e:	4313      	orrs	r3, r2
 800a380:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a386:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	431a      	orrs	r2, r3
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a392:	2300      	movs	r3, #0

}
 800a394:	4618      	mov	r0, r3
 800a396:	3714      	adds	r7, #20
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b088      	sub	sp, #32
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a3ae:	2310      	movs	r3, #16
 800a3b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a3b2:	2340      	movs	r3, #64	@ 0x40
 800a3b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a3ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a3c0:	f107 0308 	add.w	r3, r7, #8
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f7ff ff74 	bl	800a2b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a3cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3d0:	2110      	movs	r1, #16
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 fa1a 	bl	800a80c <SDMMC_GetCmdResp1>
 800a3d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3da:	69fb      	ldr	r3, [r7, #28]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3720      	adds	r7, #32
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b088      	sub	sp, #32
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a3f2:	2311      	movs	r3, #17
 800a3f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a3f6:	2340      	movs	r3, #64	@ 0x40
 800a3f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a3fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a402:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a404:	f107 0308 	add.w	r3, r7, #8
 800a408:	4619      	mov	r1, r3
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f7ff ff52 	bl	800a2b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a410:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a414:	2111      	movs	r1, #17
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 f9f8 	bl	800a80c <SDMMC_GetCmdResp1>
 800a41c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a41e:	69fb      	ldr	r3, [r7, #28]
}
 800a420:	4618      	mov	r0, r3
 800a422:	3720      	adds	r7, #32
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b088      	sub	sp, #32
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a436:	2312      	movs	r3, #18
 800a438:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a43a:	2340      	movs	r3, #64	@ 0x40
 800a43c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a43e:	2300      	movs	r3, #0
 800a440:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a442:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a446:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a448:	f107 0308 	add.w	r3, r7, #8
 800a44c:	4619      	mov	r1, r3
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f7ff ff30 	bl	800a2b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a454:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a458:	2112      	movs	r1, #18
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 f9d6 	bl	800a80c <SDMMC_GetCmdResp1>
 800a460:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a462:	69fb      	ldr	r3, [r7, #28]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3720      	adds	r7, #32
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b088      	sub	sp, #32
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a47a:	2318      	movs	r3, #24
 800a47c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a47e:	2340      	movs	r3, #64	@ 0x40
 800a480:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a482:	2300      	movs	r3, #0
 800a484:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a486:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a48a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a48c:	f107 0308 	add.w	r3, r7, #8
 800a490:	4619      	mov	r1, r3
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f7ff ff0e 	bl	800a2b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a498:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a49c:	2118      	movs	r1, #24
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 f9b4 	bl	800a80c <SDMMC_GetCmdResp1>
 800a4a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4a6:	69fb      	ldr	r3, [r7, #28]
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3720      	adds	r7, #32
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b088      	sub	sp, #32
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a4be:	2319      	movs	r3, #25
 800a4c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a4c2:	2340      	movs	r3, #64	@ 0x40
 800a4c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a4ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a4d0:	f107 0308 	add.w	r3, r7, #8
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f7ff feec 	bl	800a2b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a4dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4e0:	2119      	movs	r1, #25
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 f992 	bl	800a80c <SDMMC_GetCmdResp1>
 800a4e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4ea:	69fb      	ldr	r3, [r7, #28]
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3720      	adds	r7, #32
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b088      	sub	sp, #32
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a500:	230c      	movs	r3, #12
 800a502:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a504:	2340      	movs	r3, #64	@ 0x40
 800a506:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a508:	2300      	movs	r3, #0
 800a50a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a50c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a510:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a512:	f107 0308 	add.w	r3, r7, #8
 800a516:	4619      	mov	r1, r3
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f7ff fecb 	bl	800a2b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a51e:	4a05      	ldr	r2, [pc, #20]	@ (800a534 <SDMMC_CmdStopTransfer+0x40>)
 800a520:	210c      	movs	r1, #12
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 f972 	bl	800a80c <SDMMC_GetCmdResp1>
 800a528:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a52a:	69fb      	ldr	r3, [r7, #28]
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3720      	adds	r7, #32
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}
 800a534:	05f5e100 	.word	0x05f5e100

0800a538 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b08a      	sub	sp, #40	@ 0x28
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a548:	2307      	movs	r3, #7
 800a54a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a54c:	2340      	movs	r3, #64	@ 0x40
 800a54e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a550:	2300      	movs	r3, #0
 800a552:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a554:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a558:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a55a:	f107 0310 	add.w	r3, r7, #16
 800a55e:	4619      	mov	r1, r3
 800a560:	68f8      	ldr	r0, [r7, #12]
 800a562:	f7ff fea7 	bl	800a2b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a566:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a56a:	2107      	movs	r1, #7
 800a56c:	68f8      	ldr	r0, [r7, #12]
 800a56e:	f000 f94d 	bl	800a80c <SDMMC_GetCmdResp1>
 800a572:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800a574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a576:	4618      	mov	r0, r3
 800a578:	3728      	adds	r7, #40	@ 0x28
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b088      	sub	sp, #32
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a586:	2300      	movs	r3, #0
 800a588:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a58a:	2300      	movs	r3, #0
 800a58c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a58e:	2300      	movs	r3, #0
 800a590:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a592:	2300      	movs	r3, #0
 800a594:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a596:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a59a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a59c:	f107 0308 	add.w	r3, r7, #8
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f7ff fe86 	bl	800a2b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 fb67 	bl	800ac7c <SDMMC_GetCmdError>
 800a5ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5b0:	69fb      	ldr	r3, [r7, #28]
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3720      	adds	r7, #32
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b088      	sub	sp, #32
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a5c2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a5c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a5c8:	2308      	movs	r3, #8
 800a5ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a5cc:	2340      	movs	r3, #64	@ 0x40
 800a5ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a5d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a5da:	f107 0308 	add.w	r3, r7, #8
 800a5de:	4619      	mov	r1, r3
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f7ff fe67 	bl	800a2b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 fafa 	bl	800abe0 <SDMMC_GetCmdResp7>
 800a5ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5ee:	69fb      	ldr	r3, [r7, #28]
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3720      	adds	r7, #32
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b088      	sub	sp, #32
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a606:	2337      	movs	r3, #55	@ 0x37
 800a608:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a60a:	2340      	movs	r3, #64	@ 0x40
 800a60c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a60e:	2300      	movs	r3, #0
 800a610:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a612:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a616:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a618:	f107 0308 	add.w	r3, r7, #8
 800a61c:	4619      	mov	r1, r3
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f7ff fe48 	bl	800a2b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a624:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a628:	2137      	movs	r1, #55	@ 0x37
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 f8ee 	bl	800a80c <SDMMC_GetCmdResp1>
 800a630:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a632:	69fb      	ldr	r3, [r7, #28]
}
 800a634:	4618      	mov	r0, r3
 800a636:	3720      	adds	r7, #32
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b088      	sub	sp, #32
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a646:	683a      	ldr	r2, [r7, #0]
 800a648:	4b0d      	ldr	r3, [pc, #52]	@ (800a680 <SDMMC_CmdAppOperCommand+0x44>)
 800a64a:	4313      	orrs	r3, r2
 800a64c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a64e:	2329      	movs	r3, #41	@ 0x29
 800a650:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a652:	2340      	movs	r3, #64	@ 0x40
 800a654:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a656:	2300      	movs	r3, #0
 800a658:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a65a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a65e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a660:	f107 0308 	add.w	r3, r7, #8
 800a664:	4619      	mov	r1, r3
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f7ff fe24 	bl	800a2b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 fa03 	bl	800aa78 <SDMMC_GetCmdResp3>
 800a672:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a674:	69fb      	ldr	r3, [r7, #28]
}
 800a676:	4618      	mov	r0, r3
 800a678:	3720      	adds	r7, #32
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	80100000 	.word	0x80100000

0800a684 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b088      	sub	sp, #32
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a692:	2306      	movs	r3, #6
 800a694:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a696:	2340      	movs	r3, #64	@ 0x40
 800a698:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a69a:	2300      	movs	r3, #0
 800a69c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a69e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6a4:	f107 0308 	add.w	r3, r7, #8
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f7ff fe02 	bl	800a2b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a6b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6b4:	2106      	movs	r1, #6
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 f8a8 	bl	800a80c <SDMMC_GetCmdResp1>
 800a6bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6be:	69fb      	ldr	r3, [r7, #28]
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3720      	adds	r7, #32
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b088      	sub	sp, #32
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a6d4:	2333      	movs	r3, #51	@ 0x33
 800a6d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6d8:	2340      	movs	r3, #64	@ 0x40
 800a6da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6e6:	f107 0308 	add.w	r3, r7, #8
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f7ff fde1 	bl	800a2b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a6f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6f6:	2133      	movs	r1, #51	@ 0x33
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 f887 	bl	800a80c <SDMMC_GetCmdResp1>
 800a6fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a700:	69fb      	ldr	r3, [r7, #28]
}
 800a702:	4618      	mov	r0, r3
 800a704:	3720      	adds	r7, #32
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b088      	sub	sp, #32
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a712:	2300      	movs	r3, #0
 800a714:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a716:	2302      	movs	r3, #2
 800a718:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a71a:	23c0      	movs	r3, #192	@ 0xc0
 800a71c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a71e:	2300      	movs	r3, #0
 800a720:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a722:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a726:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a728:	f107 0308 	add.w	r3, r7, #8
 800a72c:	4619      	mov	r1, r3
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f7ff fdc0 	bl	800a2b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 f957 	bl	800a9e8 <SDMMC_GetCmdResp2>
 800a73a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a73c:	69fb      	ldr	r3, [r7, #28]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3720      	adds	r7, #32
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}

0800a746 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a746:	b580      	push	{r7, lr}
 800a748:	b088      	sub	sp, #32
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
 800a74e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a754:	2309      	movs	r3, #9
 800a756:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a758:	23c0      	movs	r3, #192	@ 0xc0
 800a75a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a75c:	2300      	movs	r3, #0
 800a75e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a760:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a764:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a766:	f107 0308 	add.w	r3, r7, #8
 800a76a:	4619      	mov	r1, r3
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f7ff fda1 	bl	800a2b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 f938 	bl	800a9e8 <SDMMC_GetCmdResp2>
 800a778:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a77a:	69fb      	ldr	r3, [r7, #28]
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3720      	adds	r7, #32
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b088      	sub	sp, #32
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a78e:	2300      	movs	r3, #0
 800a790:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a792:	2303      	movs	r3, #3
 800a794:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a796:	2340      	movs	r3, #64	@ 0x40
 800a798:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a79a:	2300      	movs	r3, #0
 800a79c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a79e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7a4:	f107 0308 	add.w	r3, r7, #8
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f7ff fd82 	bl	800a2b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a7b0:	683a      	ldr	r2, [r7, #0]
 800a7b2:	2103      	movs	r1, #3
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 f99d 	bl	800aaf4 <SDMMC_GetCmdResp6>
 800a7ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7bc:	69fb      	ldr	r3, [r7, #28]
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3720      	adds	r7, #32
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b088      	sub	sp, #32
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
 800a7ce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a7d4:	230d      	movs	r3, #13
 800a7d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7d8:	2340      	movs	r3, #64	@ 0x40
 800a7da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7e6:	f107 0308 	add.w	r3, r7, #8
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f7ff fd61 	bl	800a2b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a7f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7f6:	210d      	movs	r1, #13
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f000 f807 	bl	800a80c <SDMMC_GetCmdResp1>
 800a7fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a800:	69fb      	ldr	r3, [r7, #28]
}
 800a802:	4618      	mov	r0, r3
 800a804:	3720      	adds	r7, #32
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
	...

0800a80c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b088      	sub	sp, #32
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	460b      	mov	r3, r1
 800a816:	607a      	str	r2, [r7, #4]
 800a818:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a81a:	4b70      	ldr	r3, [pc, #448]	@ (800a9dc <SDMMC_GetCmdResp1+0x1d0>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a70      	ldr	r2, [pc, #448]	@ (800a9e0 <SDMMC_GetCmdResp1+0x1d4>)
 800a820:	fba2 2303 	umull	r2, r3, r2, r3
 800a824:	0a5a      	lsrs	r2, r3, #9
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	fb02 f303 	mul.w	r3, r2, r3
 800a82c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a82e:	69fb      	ldr	r3, [r7, #28]
 800a830:	1e5a      	subs	r2, r3, #1
 800a832:	61fa      	str	r2, [r7, #28]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d102      	bne.n	800a83e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a838:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a83c:	e0c9      	b.n	800a9d2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a842:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d0ef      	beq.n	800a82e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a84e:	69bb      	ldr	r3, [r7, #24]
 800a850:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a854:	2b00      	cmp	r3, #0
 800a856:	d1ea      	bne.n	800a82e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a85c:	f003 0304 	and.w	r3, r3, #4
 800a860:	2b00      	cmp	r3, #0
 800a862:	d004      	beq.n	800a86e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2204      	movs	r2, #4
 800a868:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a86a:	2304      	movs	r3, #4
 800a86c:	e0b1      	b.n	800a9d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a872:	f003 0301 	and.w	r3, r3, #1
 800a876:	2b00      	cmp	r3, #0
 800a878:	d004      	beq.n	800a884 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2201      	movs	r2, #1
 800a87e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a880:	2301      	movs	r3, #1
 800a882:	e0a6      	b.n	800a9d2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	22c5      	movs	r2, #197	@ 0xc5
 800a888:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a88a:	68f8      	ldr	r0, [r7, #12]
 800a88c:	f7ff fd3c 	bl	800a308 <SDMMC_GetCommandResponse>
 800a890:	4603      	mov	r3, r0
 800a892:	461a      	mov	r2, r3
 800a894:	7afb      	ldrb	r3, [r7, #11]
 800a896:	4293      	cmp	r3, r2
 800a898:	d001      	beq.n	800a89e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a89a:	2301      	movs	r3, #1
 800a89c:	e099      	b.n	800a9d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a89e:	2100      	movs	r1, #0
 800a8a0:	68f8      	ldr	r0, [r7, #12]
 800a8a2:	f7ff fd3e 	bl	800a322 <SDMMC_GetResponse>
 800a8a6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a8a8:	697a      	ldr	r2, [r7, #20]
 800a8aa:	4b4e      	ldr	r3, [pc, #312]	@ (800a9e4 <SDMMC_GetCmdResp1+0x1d8>)
 800a8ac:	4013      	ands	r3, r2
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d101      	bne.n	800a8b6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	e08d      	b.n	800a9d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	da02      	bge.n	800a8c2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a8bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a8c0:	e087      	b.n	800a9d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d001      	beq.n	800a8d0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a8cc:	2340      	movs	r3, #64	@ 0x40
 800a8ce:	e080      	b.n	800a9d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d001      	beq.n	800a8de <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a8da:	2380      	movs	r3, #128	@ 0x80
 800a8dc:	e079      	b.n	800a9d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d002      	beq.n	800a8ee <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a8e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a8ec:	e071      	b.n	800a9d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d002      	beq.n	800a8fe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a8f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a8fc:	e069      	b.n	800a9d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a904:	2b00      	cmp	r3, #0
 800a906:	d002      	beq.n	800a90e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a908:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a90c:	e061      	b.n	800a9d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a914:	2b00      	cmp	r3, #0
 800a916:	d002      	beq.n	800a91e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a918:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a91c:	e059      	b.n	800a9d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a924:	2b00      	cmp	r3, #0
 800a926:	d002      	beq.n	800a92e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a928:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a92c:	e051      	b.n	800a9d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a934:	2b00      	cmp	r3, #0
 800a936:	d002      	beq.n	800a93e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a938:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a93c:	e049      	b.n	800a9d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a944:	2b00      	cmp	r3, #0
 800a946:	d002      	beq.n	800a94e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a948:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a94c:	e041      	b.n	800a9d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a954:	2b00      	cmp	r3, #0
 800a956:	d002      	beq.n	800a95e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a958:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a95c:	e039      	b.n	800a9d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a964:	2b00      	cmp	r3, #0
 800a966:	d002      	beq.n	800a96e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a968:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a96c:	e031      	b.n	800a9d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a974:	2b00      	cmp	r3, #0
 800a976:	d002      	beq.n	800a97e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a978:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a97c:	e029      	b.n	800a9d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a984:	2b00      	cmp	r3, #0
 800a986:	d002      	beq.n	800a98e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a988:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a98c:	e021      	b.n	800a9d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a994:	2b00      	cmp	r3, #0
 800a996:	d002      	beq.n	800a99e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a998:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a99c:	e019      	b.n	800a9d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d002      	beq.n	800a9ae <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a9a8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a9ac:	e011      	b.n	800a9d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d002      	beq.n	800a9be <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a9b8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a9bc:	e009      	b.n	800a9d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	f003 0308 	and.w	r3, r3, #8
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d002      	beq.n	800a9ce <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a9c8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a9cc:	e001      	b.n	800a9d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a9ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3720      	adds	r7, #32
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	20000000 	.word	0x20000000
 800a9e0:	10624dd3 	.word	0x10624dd3
 800a9e4:	fdffe008 	.word	0xfdffe008

0800a9e8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b085      	sub	sp, #20
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a9f0:	4b1f      	ldr	r3, [pc, #124]	@ (800aa70 <SDMMC_GetCmdResp2+0x88>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a1f      	ldr	r2, [pc, #124]	@ (800aa74 <SDMMC_GetCmdResp2+0x8c>)
 800a9f6:	fba2 2303 	umull	r2, r3, r2, r3
 800a9fa:	0a5b      	lsrs	r3, r3, #9
 800a9fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa00:	fb02 f303 	mul.w	r3, r2, r3
 800aa04:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	1e5a      	subs	r2, r3, #1
 800aa0a:	60fa      	str	r2, [r7, #12]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d102      	bne.n	800aa16 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa10:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aa14:	e026      	b.n	800aa64 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa1a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d0ef      	beq.n	800aa06 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d1ea      	bne.n	800aa06 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa34:	f003 0304 	and.w	r3, r3, #4
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d004      	beq.n	800aa46 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2204      	movs	r2, #4
 800aa40:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa42:	2304      	movs	r3, #4
 800aa44:	e00e      	b.n	800aa64 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa4a:	f003 0301 	and.w	r3, r3, #1
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d004      	beq.n	800aa5c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2201      	movs	r2, #1
 800aa56:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	e003      	b.n	800aa64 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	22c5      	movs	r2, #197	@ 0xc5
 800aa60:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800aa62:	2300      	movs	r3, #0
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3714      	adds	r7, #20
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr
 800aa70:	20000000 	.word	0x20000000
 800aa74:	10624dd3 	.word	0x10624dd3

0800aa78 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b085      	sub	sp, #20
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aa80:	4b1a      	ldr	r3, [pc, #104]	@ (800aaec <SDMMC_GetCmdResp3+0x74>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a1a      	ldr	r2, [pc, #104]	@ (800aaf0 <SDMMC_GetCmdResp3+0x78>)
 800aa86:	fba2 2303 	umull	r2, r3, r2, r3
 800aa8a:	0a5b      	lsrs	r3, r3, #9
 800aa8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa90:	fb02 f303 	mul.w	r3, r2, r3
 800aa94:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	1e5a      	subs	r2, r3, #1
 800aa9a:	60fa      	str	r2, [r7, #12]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d102      	bne.n	800aaa6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aaa0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aaa4:	e01b      	b.n	800aade <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aaaa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d0ef      	beq.n	800aa96 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d1ea      	bne.n	800aa96 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aac4:	f003 0304 	and.w	r3, r3, #4
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d004      	beq.n	800aad6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2204      	movs	r2, #4
 800aad0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aad2:	2304      	movs	r3, #4
 800aad4:	e003      	b.n	800aade <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	22c5      	movs	r2, #197	@ 0xc5
 800aada:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800aadc:	2300      	movs	r3, #0
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3714      	adds	r7, #20
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr
 800aaea:	bf00      	nop
 800aaec:	20000000 	.word	0x20000000
 800aaf0:	10624dd3 	.word	0x10624dd3

0800aaf4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b088      	sub	sp, #32
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	460b      	mov	r3, r1
 800aafe:	607a      	str	r2, [r7, #4]
 800ab00:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ab02:	4b35      	ldr	r3, [pc, #212]	@ (800abd8 <SDMMC_GetCmdResp6+0xe4>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a35      	ldr	r2, [pc, #212]	@ (800abdc <SDMMC_GetCmdResp6+0xe8>)
 800ab08:	fba2 2303 	umull	r2, r3, r2, r3
 800ab0c:	0a5b      	lsrs	r3, r3, #9
 800ab0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab12:	fb02 f303 	mul.w	r3, r2, r3
 800ab16:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	1e5a      	subs	r2, r3, #1
 800ab1c:	61fa      	str	r2, [r7, #28]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d102      	bne.n	800ab28 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab22:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ab26:	e052      	b.n	800abce <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab2c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ab2e:	69bb      	ldr	r3, [r7, #24]
 800ab30:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d0ef      	beq.n	800ab18 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ab38:	69bb      	ldr	r3, [r7, #24]
 800ab3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d1ea      	bne.n	800ab18 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab46:	f003 0304 	and.w	r3, r3, #4
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d004      	beq.n	800ab58 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2204      	movs	r2, #4
 800ab52:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab54:	2304      	movs	r3, #4
 800ab56:	e03a      	b.n	800abce <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab5c:	f003 0301 	and.w	r3, r3, #1
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d004      	beq.n	800ab6e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2201      	movs	r2, #1
 800ab68:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e02f      	b.n	800abce <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ab6e:	68f8      	ldr	r0, [r7, #12]
 800ab70:	f7ff fbca 	bl	800a308 <SDMMC_GetCommandResponse>
 800ab74:	4603      	mov	r3, r0
 800ab76:	461a      	mov	r2, r3
 800ab78:	7afb      	ldrb	r3, [r7, #11]
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d001      	beq.n	800ab82 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	e025      	b.n	800abce <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	22c5      	movs	r2, #197	@ 0xc5
 800ab86:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ab88:	2100      	movs	r1, #0
 800ab8a:	68f8      	ldr	r0, [r7, #12]
 800ab8c:	f7ff fbc9 	bl	800a322 <SDMMC_GetResponse>
 800ab90:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d106      	bne.n	800abaa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	0c1b      	lsrs	r3, r3, #16
 800aba0:	b29a      	uxth	r2, r3
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800aba6:	2300      	movs	r3, #0
 800aba8:	e011      	b.n	800abce <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d002      	beq.n	800abba <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800abb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800abb8:	e009      	b.n	800abce <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d002      	beq.n	800abca <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800abc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800abc8:	e001      	b.n	800abce <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800abca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3720      	adds	r7, #32
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
 800abd6:	bf00      	nop
 800abd8:	20000000 	.word	0x20000000
 800abdc:	10624dd3 	.word	0x10624dd3

0800abe0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b085      	sub	sp, #20
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800abe8:	4b22      	ldr	r3, [pc, #136]	@ (800ac74 <SDMMC_GetCmdResp7+0x94>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a22      	ldr	r2, [pc, #136]	@ (800ac78 <SDMMC_GetCmdResp7+0x98>)
 800abee:	fba2 2303 	umull	r2, r3, r2, r3
 800abf2:	0a5b      	lsrs	r3, r3, #9
 800abf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abf8:	fb02 f303 	mul.w	r3, r2, r3
 800abfc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	1e5a      	subs	r2, r3, #1
 800ac02:	60fa      	str	r2, [r7, #12]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d102      	bne.n	800ac0e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac08:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ac0c:	e02c      	b.n	800ac68 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac12:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d0ef      	beq.n	800abfe <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d1ea      	bne.n	800abfe <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac2c:	f003 0304 	and.w	r3, r3, #4
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d004      	beq.n	800ac3e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2204      	movs	r2, #4
 800ac38:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac3a:	2304      	movs	r3, #4
 800ac3c:	e014      	b.n	800ac68 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac42:	f003 0301 	and.w	r3, r3, #1
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d004      	beq.n	800ac54 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac50:	2301      	movs	r3, #1
 800ac52:	e009      	b.n	800ac68 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d002      	beq.n	800ac66 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2240      	movs	r2, #64	@ 0x40
 800ac64:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ac66:	2300      	movs	r3, #0
  
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3714      	adds	r7, #20
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr
 800ac74:	20000000 	.word	0x20000000
 800ac78:	10624dd3 	.word	0x10624dd3

0800ac7c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b085      	sub	sp, #20
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ac84:	4b11      	ldr	r3, [pc, #68]	@ (800accc <SDMMC_GetCmdError+0x50>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4a11      	ldr	r2, [pc, #68]	@ (800acd0 <SDMMC_GetCmdError+0x54>)
 800ac8a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac8e:	0a5b      	lsrs	r3, r3, #9
 800ac90:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac94:	fb02 f303 	mul.w	r3, r2, r3
 800ac98:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	1e5a      	subs	r2, r3, #1
 800ac9e:	60fa      	str	r2, [r7, #12]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d102      	bne.n	800acaa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aca4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aca8:	e009      	b.n	800acbe <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d0f1      	beq.n	800ac9a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	22c5      	movs	r2, #197	@ 0xc5
 800acba:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800acbc:	2300      	movs	r3, #0
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3714      	adds	r7, #20
 800acc2:	46bd      	mov	sp, r7
 800acc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc8:	4770      	bx	lr
 800acca:	bf00      	nop
 800accc:	20000000 	.word	0x20000000
 800acd0:	10624dd3 	.word	0x10624dd3

0800acd4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800acd4:	b084      	sub	sp, #16
 800acd6:	b580      	push	{r7, lr}
 800acd8:	b084      	sub	sp, #16
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
 800acde:	f107 001c 	add.w	r0, r7, #28
 800ace2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ace6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800acea:	2b01      	cmp	r3, #1
 800acec:	d127      	bne.n	800ad3e <USB_CoreInit+0x6a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acf2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	68da      	ldr	r2, [r3, #12]
 800acfe:	4b3a      	ldr	r3, [pc, #232]	@ (800ade8 <USB_CoreInit+0x114>)
 800ad00:	4013      	ands	r3, r2
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	68db      	ldr	r3, [r3, #12]
 800ad0a:	f043 0210 	orr.w	r2, r3, #16
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	68db      	ldr	r3, [r3, #12]
 800ad16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ad1e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d105      	bne.n	800ad32 <USB_CoreInit+0x5e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	68db      	ldr	r3, [r3, #12]
 800ad2a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f001 fb1c 	bl	800c370 <USB_CoreReset>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	73fb      	strb	r3, [r7, #15]
 800ad3c:	e03c      	b.n	800adb8 <USB_CoreInit+0xe4>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800ad3e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ad42:	2b03      	cmp	r3, #3
 800ad44:	d127      	bne.n	800ad96 <USB_CoreInit+0xc2>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad4a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	68da      	ldr	r2, [r3, #12]
 800ad56:	4b24      	ldr	r3, [pc, #144]	@ (800ade8 <USB_CoreInit+0x114>)
 800ad58:	4013      	ands	r3, r2
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	68db      	ldr	r3, [r3, #12]
 800ad62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	68db      	ldr	r3, [r3, #12]
 800ad6e:	f023 0210 	bic.w	r2, r3, #16
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 800ad76:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d105      	bne.n	800ad8a <USB_CoreInit+0xb6>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	68db      	ldr	r3, [r3, #12]
 800ad82:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f001 faf0 	bl	800c370 <USB_CoreReset>
 800ad90:	4603      	mov	r3, r0
 800ad92:	73fb      	strb	r3, [r7, #15]
 800ad94:	e010      	b.n	800adb8 <USB_CoreInit+0xe4>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	68db      	ldr	r3, [r3, #12]
 800ad9a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f001 fae4 	bl	800c370 <USB_CoreReset>
 800ada8:	4603      	mov	r3, r0
 800adaa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adb0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800adb8:	7fbb      	ldrb	r3, [r7, #30]
 800adba:	2b01      	cmp	r3, #1
 800adbc:	d10b      	bne.n	800add6 <USB_CoreInit+0x102>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	689b      	ldr	r3, [r3, #8]
 800adc2:	f043 0206 	orr.w	r2, r3, #6
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	689b      	ldr	r3, [r3, #8]
 800adce:	f043 0220 	orr.w	r2, r3, #32
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800add6:	7bfb      	ldrb	r3, [r7, #15]
}
 800add8:	4618      	mov	r0, r3
 800adda:	3710      	adds	r7, #16
 800addc:	46bd      	mov	sp, r7
 800adde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ade2:	b004      	add	sp, #16
 800ade4:	4770      	bx	lr
 800ade6:	bf00      	nop
 800ade8:	ffbdffbf 	.word	0xffbdffbf

0800adec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800adec:	b480      	push	{r7}
 800adee:	b087      	sub	sp, #28
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	60f8      	str	r0, [r7, #12]
 800adf4:	60b9      	str	r1, [r7, #8]
 800adf6:	4613      	mov	r3, r2
 800adf8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800adfa:	79fb      	ldrb	r3, [r7, #7]
 800adfc:	2b02      	cmp	r3, #2
 800adfe:	d165      	bne.n	800aecc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	4a41      	ldr	r2, [pc, #260]	@ (800af08 <USB_SetTurnaroundTime+0x11c>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d906      	bls.n	800ae16 <USB_SetTurnaroundTime+0x2a>
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	4a40      	ldr	r2, [pc, #256]	@ (800af0c <USB_SetTurnaroundTime+0x120>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d202      	bcs.n	800ae16 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ae10:	230f      	movs	r3, #15
 800ae12:	617b      	str	r3, [r7, #20]
 800ae14:	e062      	b.n	800aedc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	4a3c      	ldr	r2, [pc, #240]	@ (800af0c <USB_SetTurnaroundTime+0x120>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d306      	bcc.n	800ae2c <USB_SetTurnaroundTime+0x40>
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	4a3b      	ldr	r2, [pc, #236]	@ (800af10 <USB_SetTurnaroundTime+0x124>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d202      	bcs.n	800ae2c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ae26:	230e      	movs	r3, #14
 800ae28:	617b      	str	r3, [r7, #20]
 800ae2a:	e057      	b.n	800aedc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	4a38      	ldr	r2, [pc, #224]	@ (800af10 <USB_SetTurnaroundTime+0x124>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d306      	bcc.n	800ae42 <USB_SetTurnaroundTime+0x56>
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	4a37      	ldr	r2, [pc, #220]	@ (800af14 <USB_SetTurnaroundTime+0x128>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d202      	bcs.n	800ae42 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ae3c:	230d      	movs	r3, #13
 800ae3e:	617b      	str	r3, [r7, #20]
 800ae40:	e04c      	b.n	800aedc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	4a33      	ldr	r2, [pc, #204]	@ (800af14 <USB_SetTurnaroundTime+0x128>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d306      	bcc.n	800ae58 <USB_SetTurnaroundTime+0x6c>
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	4a32      	ldr	r2, [pc, #200]	@ (800af18 <USB_SetTurnaroundTime+0x12c>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d802      	bhi.n	800ae58 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ae52:	230c      	movs	r3, #12
 800ae54:	617b      	str	r3, [r7, #20]
 800ae56:	e041      	b.n	800aedc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	4a2f      	ldr	r2, [pc, #188]	@ (800af18 <USB_SetTurnaroundTime+0x12c>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d906      	bls.n	800ae6e <USB_SetTurnaroundTime+0x82>
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	4a2e      	ldr	r2, [pc, #184]	@ (800af1c <USB_SetTurnaroundTime+0x130>)
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d802      	bhi.n	800ae6e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ae68:	230b      	movs	r3, #11
 800ae6a:	617b      	str	r3, [r7, #20]
 800ae6c:	e036      	b.n	800aedc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	4a2a      	ldr	r2, [pc, #168]	@ (800af1c <USB_SetTurnaroundTime+0x130>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d906      	bls.n	800ae84 <USB_SetTurnaroundTime+0x98>
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	4a29      	ldr	r2, [pc, #164]	@ (800af20 <USB_SetTurnaroundTime+0x134>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d802      	bhi.n	800ae84 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ae7e:	230a      	movs	r3, #10
 800ae80:	617b      	str	r3, [r7, #20]
 800ae82:	e02b      	b.n	800aedc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	4a26      	ldr	r2, [pc, #152]	@ (800af20 <USB_SetTurnaroundTime+0x134>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d906      	bls.n	800ae9a <USB_SetTurnaroundTime+0xae>
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	4a25      	ldr	r2, [pc, #148]	@ (800af24 <USB_SetTurnaroundTime+0x138>)
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d202      	bcs.n	800ae9a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ae94:	2309      	movs	r3, #9
 800ae96:	617b      	str	r3, [r7, #20]
 800ae98:	e020      	b.n	800aedc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	4a21      	ldr	r2, [pc, #132]	@ (800af24 <USB_SetTurnaroundTime+0x138>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d306      	bcc.n	800aeb0 <USB_SetTurnaroundTime+0xc4>
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	4a20      	ldr	r2, [pc, #128]	@ (800af28 <USB_SetTurnaroundTime+0x13c>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d802      	bhi.n	800aeb0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800aeaa:	2308      	movs	r3, #8
 800aeac:	617b      	str	r3, [r7, #20]
 800aeae:	e015      	b.n	800aedc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	4a1d      	ldr	r2, [pc, #116]	@ (800af28 <USB_SetTurnaroundTime+0x13c>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d906      	bls.n	800aec6 <USB_SetTurnaroundTime+0xda>
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	4a1c      	ldr	r2, [pc, #112]	@ (800af2c <USB_SetTurnaroundTime+0x140>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d202      	bcs.n	800aec6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800aec0:	2307      	movs	r3, #7
 800aec2:	617b      	str	r3, [r7, #20]
 800aec4:	e00a      	b.n	800aedc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800aec6:	2306      	movs	r3, #6
 800aec8:	617b      	str	r3, [r7, #20]
 800aeca:	e007      	b.n	800aedc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800aecc:	79fb      	ldrb	r3, [r7, #7]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d102      	bne.n	800aed8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800aed2:	2309      	movs	r3, #9
 800aed4:	617b      	str	r3, [r7, #20]
 800aed6:	e001      	b.n	800aedc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800aed8:	2309      	movs	r3, #9
 800aeda:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	68db      	ldr	r3, [r3, #12]
 800aee0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	68da      	ldr	r2, [r3, #12]
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	029b      	lsls	r3, r3, #10
 800aef0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800aef4:	431a      	orrs	r2, r3
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800aefa:	2300      	movs	r3, #0
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	371c      	adds	r7, #28
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr
 800af08:	00d8acbf 	.word	0x00d8acbf
 800af0c:	00e4e1c0 	.word	0x00e4e1c0
 800af10:	00f42400 	.word	0x00f42400
 800af14:	01067380 	.word	0x01067380
 800af18:	011a499f 	.word	0x011a499f
 800af1c:	01312cff 	.word	0x01312cff
 800af20:	014ca43f 	.word	0x014ca43f
 800af24:	016e3600 	.word	0x016e3600
 800af28:	01a6ab1f 	.word	0x01a6ab1f
 800af2c:	01e84800 	.word	0x01e84800

0800af30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800af30:	b480      	push	{r7}
 800af32:	b083      	sub	sp, #12
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	689b      	ldr	r3, [r3, #8]
 800af3c:	f043 0201 	orr.w	r2, r3, #1
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800af44:	2300      	movs	r3, #0
}
 800af46:	4618      	mov	r0, r3
 800af48:	370c      	adds	r7, #12
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr

0800af52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800af52:	b480      	push	{r7}
 800af54:	b083      	sub	sp, #12
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	689b      	ldr	r3, [r3, #8]
 800af5e:	f023 0201 	bic.w	r2, r3, #1
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800af66:	2300      	movs	r3, #0
}
 800af68:	4618      	mov	r0, r3
 800af6a:	370c      	adds	r7, #12
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	460b      	mov	r3, r1
 800af7e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800af80:	2300      	movs	r3, #0
 800af82:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800af90:	78fb      	ldrb	r3, [r7, #3]
 800af92:	2b01      	cmp	r3, #1
 800af94:	d115      	bne.n	800afc2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800afa2:	200a      	movs	r0, #10
 800afa4:	f7f7 ff90 	bl	8002ec8 <HAL_Delay>
      ms += 10U;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	330a      	adds	r3, #10
 800afac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f001 f94d 	bl	800c24e <USB_GetMode>
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	d01e      	beq.n	800aff8 <USB_SetCurrentMode+0x84>
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2bc7      	cmp	r3, #199	@ 0xc7
 800afbe:	d9f0      	bls.n	800afa2 <USB_SetCurrentMode+0x2e>
 800afc0:	e01a      	b.n	800aff8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800afc2:	78fb      	ldrb	r3, [r7, #3]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d115      	bne.n	800aff4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	68db      	ldr	r3, [r3, #12]
 800afcc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800afd4:	200a      	movs	r0, #10
 800afd6:	f7f7 ff77 	bl	8002ec8 <HAL_Delay>
      ms += 10U;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	330a      	adds	r3, #10
 800afde:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f001 f934 	bl	800c24e <USB_GetMode>
 800afe6:	4603      	mov	r3, r0
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d005      	beq.n	800aff8 <USB_SetCurrentMode+0x84>
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2bc7      	cmp	r3, #199	@ 0xc7
 800aff0:	d9f0      	bls.n	800afd4 <USB_SetCurrentMode+0x60>
 800aff2:	e001      	b.n	800aff8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800aff4:	2301      	movs	r3, #1
 800aff6:	e005      	b.n	800b004 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2bc8      	cmp	r3, #200	@ 0xc8
 800affc:	d101      	bne.n	800b002 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800affe:	2301      	movs	r3, #1
 800b000:	e000      	b.n	800b004 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b002:	2300      	movs	r3, #0
}
 800b004:	4618      	mov	r0, r3
 800b006:	3710      	adds	r7, #16
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b00c:	b084      	sub	sp, #16
 800b00e:	b580      	push	{r7, lr}
 800b010:	b086      	sub	sp, #24
 800b012:	af00      	add	r7, sp, #0
 800b014:	6078      	str	r0, [r7, #4]
 800b016:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b01a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b01e:	2300      	movs	r3, #0
 800b020:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b026:	2300      	movs	r3, #0
 800b028:	613b      	str	r3, [r7, #16]
 800b02a:	e009      	b.n	800b040 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	3340      	adds	r3, #64	@ 0x40
 800b032:	009b      	lsls	r3, r3, #2
 800b034:	4413      	add	r3, r2
 800b036:	2200      	movs	r2, #0
 800b038:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	3301      	adds	r3, #1
 800b03e:	613b      	str	r3, [r7, #16]
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	2b0e      	cmp	r3, #14
 800b044:	d9f2      	bls.n	800b02c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b046:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d11c      	bne.n	800b088 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	68fa      	ldr	r2, [r7, #12]
 800b058:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b05c:	f043 0302 	orr.w	r3, r3, #2
 800b060:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b066:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	601a      	str	r2, [r3, #0]
 800b086:	e005      	b.n	800b094 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b08c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b09a:	461a      	mov	r2, r3
 800b09c:	2300      	movs	r3, #0
 800b09e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b0a0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d10d      	bne.n	800b0c4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b0a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d104      	bne.n	800b0ba <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b0b0:	2100      	movs	r1, #0
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 f97a 	bl	800b3ac <USB_SetDevSpeed>
 800b0b8:	e01a      	b.n	800b0f0 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b0ba:	2101      	movs	r1, #1
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f000 f975 	bl	800b3ac <USB_SetDevSpeed>
 800b0c2:	e015      	b.n	800b0f0 <USB_DevInit+0xe4>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800b0c4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b0c8:	2b03      	cmp	r3, #3
 800b0ca:	d10d      	bne.n	800b0e8 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b0cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d104      	bne.n	800b0de <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b0d4:	2100      	movs	r1, #0
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f000 f968 	bl	800b3ac <USB_SetDevSpeed>
 800b0dc:	e008      	b.n	800b0f0 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b0de:	2101      	movs	r1, #1
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 f963 	bl	800b3ac <USB_SetDevSpeed>
 800b0e6:	e003      	b.n	800b0f0 <USB_DevInit+0xe4>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b0e8:	2103      	movs	r1, #3
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f000 f95e 	bl	800b3ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b0f0:	2110      	movs	r1, #16
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 f8fa 	bl	800b2ec <USB_FlushTxFifo>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d001      	beq.n	800b102 <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 800b0fe:	2301      	movs	r3, #1
 800b100:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 f924 	bl	800b350 <USB_FlushRxFifo>
 800b108:	4603      	mov	r3, r0
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d001      	beq.n	800b112 <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 800b10e:	2301      	movs	r3, #1
 800b110:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b118:	461a      	mov	r2, r3
 800b11a:	2300      	movs	r3, #0
 800b11c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b124:	461a      	mov	r2, r3
 800b126:	2300      	movs	r3, #0
 800b128:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b130:	461a      	mov	r2, r3
 800b132:	2300      	movs	r3, #0
 800b134:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b136:	2300      	movs	r3, #0
 800b138:	613b      	str	r3, [r7, #16]
 800b13a:	e043      	b.n	800b1c4 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	015a      	lsls	r2, r3, #5
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	4413      	add	r3, r2
 800b144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b14e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b152:	d118      	bne.n	800b186 <USB_DevInit+0x17a>
    {
      if (i == 0U)
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d10a      	bne.n	800b170 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	015a      	lsls	r2, r3, #5
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	4413      	add	r3, r2
 800b162:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b166:	461a      	mov	r2, r3
 800b168:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b16c:	6013      	str	r3, [r2, #0]
 800b16e:	e013      	b.n	800b198 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	015a      	lsls	r2, r3, #5
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	4413      	add	r3, r2
 800b178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b17c:	461a      	mov	r2, r3
 800b17e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b182:	6013      	str	r3, [r2, #0]
 800b184:	e008      	b.n	800b198 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	015a      	lsls	r2, r3, #5
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	4413      	add	r3, r2
 800b18e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b192:	461a      	mov	r2, r3
 800b194:	2300      	movs	r3, #0
 800b196:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	015a      	lsls	r2, r3, #5
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	4413      	add	r3, r2
 800b1a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	015a      	lsls	r2, r3, #5
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b1bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	613b      	str	r3, [r7, #16]
 800b1c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d3b5      	bcc.n	800b13c <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	613b      	str	r3, [r7, #16]
 800b1d4:	e043      	b.n	800b25e <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	015a      	lsls	r2, r3, #5
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	4413      	add	r3, r2
 800b1de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b1e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b1ec:	d118      	bne.n	800b220 <USB_DevInit+0x214>
    {
      if (i == 0U)
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d10a      	bne.n	800b20a <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	015a      	lsls	r2, r3, #5
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	4413      	add	r3, r2
 800b1fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b200:	461a      	mov	r2, r3
 800b202:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b206:	6013      	str	r3, [r2, #0]
 800b208:	e013      	b.n	800b232 <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	015a      	lsls	r2, r3, #5
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	4413      	add	r3, r2
 800b212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b216:	461a      	mov	r2, r3
 800b218:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b21c:	6013      	str	r3, [r2, #0]
 800b21e:	e008      	b.n	800b232 <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	015a      	lsls	r2, r3, #5
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	4413      	add	r3, r2
 800b228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b22c:	461a      	mov	r2, r3
 800b22e:	2300      	movs	r3, #0
 800b230:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	015a      	lsls	r2, r3, #5
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	4413      	add	r3, r2
 800b23a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b23e:	461a      	mov	r2, r3
 800b240:	2300      	movs	r3, #0
 800b242:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	015a      	lsls	r2, r3, #5
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	4413      	add	r3, r2
 800b24c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b250:	461a      	mov	r2, r3
 800b252:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b256:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	3301      	adds	r3, #1
 800b25c:	613b      	str	r3, [r7, #16]
 800b25e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b262:	461a      	mov	r2, r3
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	4293      	cmp	r3, r2
 800b268:	d3b5      	bcc.n	800b1d6 <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b270:	691b      	ldr	r3, [r3, #16]
 800b272:	68fa      	ldr	r2, [r7, #12]
 800b274:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b278:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b27c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2200      	movs	r2, #0
 800b282:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b28a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b28c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b290:	2b00      	cmp	r3, #0
 800b292:	d105      	bne.n	800b2a0 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	699b      	ldr	r3, [r3, #24]
 800b298:	f043 0210 	orr.w	r2, r3, #16
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	699a      	ldr	r2, [r3, #24]
 800b2a4:	4b0f      	ldr	r3, [pc, #60]	@ (800b2e4 <USB_DevInit+0x2d8>)
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	687a      	ldr	r2, [r7, #4]
 800b2aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b2ac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d005      	beq.n	800b2c0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	699b      	ldr	r3, [r3, #24]
 800b2b8:	f043 0208 	orr.w	r2, r3, #8
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b2c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d105      	bne.n	800b2d4 <USB_DevInit+0x2c8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	699a      	ldr	r2, [r3, #24]
 800b2cc:	4b06      	ldr	r3, [pc, #24]	@ (800b2e8 <USB_DevInit+0x2dc>)
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	687a      	ldr	r2, [r7, #4]
 800b2d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b2d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3718      	adds	r7, #24
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b2e0:	b004      	add	sp, #16
 800b2e2:	4770      	bx	lr
 800b2e4:	803c3800 	.word	0x803c3800
 800b2e8:	40000004 	.word	0x40000004

0800b2ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b085      	sub	sp, #20
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b306:	d901      	bls.n	800b30c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b308:	2303      	movs	r3, #3
 800b30a:	e01b      	b.n	800b344 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	691b      	ldr	r3, [r3, #16]
 800b310:	2b00      	cmp	r3, #0
 800b312:	daf2      	bge.n	800b2fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b314:	2300      	movs	r3, #0
 800b316:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	019b      	lsls	r3, r3, #6
 800b31c:	f043 0220 	orr.w	r2, r3, #32
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	3301      	adds	r3, #1
 800b328:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b330:	d901      	bls.n	800b336 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b332:	2303      	movs	r3, #3
 800b334:	e006      	b.n	800b344 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	691b      	ldr	r3, [r3, #16]
 800b33a:	f003 0320 	and.w	r3, r3, #32
 800b33e:	2b20      	cmp	r3, #32
 800b340:	d0f0      	beq.n	800b324 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b342:	2300      	movs	r3, #0
}
 800b344:	4618      	mov	r0, r3
 800b346:	3714      	adds	r7, #20
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b350:	b480      	push	{r7}
 800b352:	b085      	sub	sp, #20
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b358:	2300      	movs	r3, #0
 800b35a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	3301      	adds	r3, #1
 800b360:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b368:	d901      	bls.n	800b36e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b36a:	2303      	movs	r3, #3
 800b36c:	e018      	b.n	800b3a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	691b      	ldr	r3, [r3, #16]
 800b372:	2b00      	cmp	r3, #0
 800b374:	daf2      	bge.n	800b35c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b376:	2300      	movs	r3, #0
 800b378:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2210      	movs	r2, #16
 800b37e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	3301      	adds	r3, #1
 800b384:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b38c:	d901      	bls.n	800b392 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b38e:	2303      	movs	r3, #3
 800b390:	e006      	b.n	800b3a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	691b      	ldr	r3, [r3, #16]
 800b396:	f003 0310 	and.w	r3, r3, #16
 800b39a:	2b10      	cmp	r3, #16
 800b39c:	d0f0      	beq.n	800b380 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b39e:	2300      	movs	r3, #0
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3714      	adds	r7, #20
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr

0800b3ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b085      	sub	sp, #20
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	460b      	mov	r3, r1
 800b3b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	78fb      	ldrb	r3, [r7, #3]
 800b3c6:	68f9      	ldr	r1, [r7, #12]
 800b3c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b3d0:	2300      	movs	r3, #0
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3714      	adds	r7, #20
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr

0800b3de <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800b3de:	b480      	push	{r7}
 800b3e0:	b087      	sub	sp, #28
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3f0:	689b      	ldr	r3, [r3, #8]
 800b3f2:	f003 0306 	and.w	r3, r3, #6
 800b3f6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d102      	bne.n	800b404 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b3fe:	2300      	movs	r3, #0
 800b400:	75fb      	strb	r3, [r7, #23]
 800b402:	e00a      	b.n	800b41a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2b02      	cmp	r3, #2
 800b408:	d002      	beq.n	800b410 <USB_GetDevSpeed+0x32>
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	2b06      	cmp	r3, #6
 800b40e:	d102      	bne.n	800b416 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b410:	2302      	movs	r3, #2
 800b412:	75fb      	strb	r3, [r7, #23]
 800b414:	e001      	b.n	800b41a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b416:	230f      	movs	r3, #15
 800b418:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b41a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	371c      	adds	r7, #28
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b428:	b480      	push	{r7}
 800b42a:	b085      	sub	sp, #20
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	785b      	ldrb	r3, [r3, #1]
 800b440:	2b01      	cmp	r3, #1
 800b442:	d139      	bne.n	800b4b8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b44a:	69da      	ldr	r2, [r3, #28]
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	f003 030f 	and.w	r3, r3, #15
 800b454:	2101      	movs	r1, #1
 800b456:	fa01 f303 	lsl.w	r3, r1, r3
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	68f9      	ldr	r1, [r7, #12]
 800b45e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b462:	4313      	orrs	r3, r2
 800b464:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	015a      	lsls	r2, r3, #5
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	4413      	add	r3, r2
 800b46e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d153      	bne.n	800b524 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	015a      	lsls	r2, r3, #5
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	4413      	add	r3, r2
 800b484:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	689b      	ldr	r3, [r3, #8]
 800b48e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	791b      	ldrb	r3, [r3, #4]
 800b496:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b498:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	059b      	lsls	r3, r3, #22
 800b49e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b4a0:	431a      	orrs	r2, r3
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	0159      	lsls	r1, r3, #5
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	440b      	add	r3, r1
 800b4aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	4b20      	ldr	r3, [pc, #128]	@ (800b534 <USB_ActivateEndpoint+0x10c>)
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	600b      	str	r3, [r1, #0]
 800b4b6:	e035      	b.n	800b524 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4be:	69da      	ldr	r2, [r3, #28]
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	f003 030f 	and.w	r3, r3, #15
 800b4c8:	2101      	movs	r1, #1
 800b4ca:	fa01 f303 	lsl.w	r3, r1, r3
 800b4ce:	041b      	lsls	r3, r3, #16
 800b4d0:	68f9      	ldr	r1, [r7, #12]
 800b4d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	015a      	lsls	r2, r3, #5
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d119      	bne.n	800b524 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	015a      	lsls	r2, r3, #5
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	4413      	add	r3, r2
 800b4f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4fc:	681a      	ldr	r2, [r3, #0]
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	689b      	ldr	r3, [r3, #8]
 800b502:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	791b      	ldrb	r3, [r3, #4]
 800b50a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b50c:	430b      	orrs	r3, r1
 800b50e:	431a      	orrs	r2, r3
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	0159      	lsls	r1, r3, #5
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	440b      	add	r3, r1
 800b518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b51c:	4619      	mov	r1, r3
 800b51e:	4b05      	ldr	r3, [pc, #20]	@ (800b534 <USB_ActivateEndpoint+0x10c>)
 800b520:	4313      	orrs	r3, r2
 800b522:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b524:	2300      	movs	r3, #0
}
 800b526:	4618      	mov	r0, r3
 800b528:	3714      	adds	r7, #20
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr
 800b532:	bf00      	nop
 800b534:	10008000 	.word	0x10008000

0800b538 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b538:	b480      	push	{r7}
 800b53a:	b085      	sub	sp, #20
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	785b      	ldrb	r3, [r3, #1]
 800b550:	2b01      	cmp	r3, #1
 800b552:	d161      	bne.n	800b618 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	015a      	lsls	r2, r3, #5
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	4413      	add	r3, r2
 800b55c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b566:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b56a:	d11f      	bne.n	800b5ac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	015a      	lsls	r2, r3, #5
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	4413      	add	r3, r2
 800b574:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	68ba      	ldr	r2, [r7, #8]
 800b57c:	0151      	lsls	r1, r2, #5
 800b57e:	68fa      	ldr	r2, [r7, #12]
 800b580:	440a      	add	r2, r1
 800b582:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b586:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b58a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	015a      	lsls	r2, r3, #5
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	4413      	add	r3, r2
 800b594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	68ba      	ldr	r2, [r7, #8]
 800b59c:	0151      	lsls	r1, r2, #5
 800b59e:	68fa      	ldr	r2, [r7, #12]
 800b5a0:	440a      	add	r2, r1
 800b5a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b5a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b5aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	f003 030f 	and.w	r3, r3, #15
 800b5bc:	2101      	movs	r1, #1
 800b5be:	fa01 f303 	lsl.w	r3, r1, r3
 800b5c2:	b29b      	uxth	r3, r3
 800b5c4:	43db      	mvns	r3, r3
 800b5c6:	68f9      	ldr	r1, [r7, #12]
 800b5c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b5cc:	4013      	ands	r3, r2
 800b5ce:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5d6:	69da      	ldr	r2, [r3, #28]
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	f003 030f 	and.w	r3, r3, #15
 800b5e0:	2101      	movs	r1, #1
 800b5e2:	fa01 f303 	lsl.w	r3, r1, r3
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	43db      	mvns	r3, r3
 800b5ea:	68f9      	ldr	r1, [r7, #12]
 800b5ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b5f0:	4013      	ands	r3, r2
 800b5f2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	015a      	lsls	r2, r3, #5
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	4413      	add	r3, r2
 800b5fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b600:	681a      	ldr	r2, [r3, #0]
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	0159      	lsls	r1, r3, #5
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	440b      	add	r3, r1
 800b60a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b60e:	4619      	mov	r1, r3
 800b610:	4b35      	ldr	r3, [pc, #212]	@ (800b6e8 <USB_DeactivateEndpoint+0x1b0>)
 800b612:	4013      	ands	r3, r2
 800b614:	600b      	str	r3, [r1, #0]
 800b616:	e060      	b.n	800b6da <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	015a      	lsls	r2, r3, #5
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	4413      	add	r3, r2
 800b620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b62a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b62e:	d11f      	bne.n	800b670 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	015a      	lsls	r2, r3, #5
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	4413      	add	r3, r2
 800b638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	68ba      	ldr	r2, [r7, #8]
 800b640:	0151      	lsls	r1, r2, #5
 800b642:	68fa      	ldr	r2, [r7, #12]
 800b644:	440a      	add	r2, r1
 800b646:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b64a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b64e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	015a      	lsls	r2, r3, #5
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	4413      	add	r3, r2
 800b658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	68ba      	ldr	r2, [r7, #8]
 800b660:	0151      	lsls	r1, r2, #5
 800b662:	68fa      	ldr	r2, [r7, #12]
 800b664:	440a      	add	r2, r1
 800b666:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b66a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b66e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b676:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	f003 030f 	and.w	r3, r3, #15
 800b680:	2101      	movs	r1, #1
 800b682:	fa01 f303 	lsl.w	r3, r1, r3
 800b686:	041b      	lsls	r3, r3, #16
 800b688:	43db      	mvns	r3, r3
 800b68a:	68f9      	ldr	r1, [r7, #12]
 800b68c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b690:	4013      	ands	r3, r2
 800b692:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b69a:	69da      	ldr	r2, [r3, #28]
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	781b      	ldrb	r3, [r3, #0]
 800b6a0:	f003 030f 	and.w	r3, r3, #15
 800b6a4:	2101      	movs	r1, #1
 800b6a6:	fa01 f303 	lsl.w	r3, r1, r3
 800b6aa:	041b      	lsls	r3, r3, #16
 800b6ac:	43db      	mvns	r3, r3
 800b6ae:	68f9      	ldr	r1, [r7, #12]
 800b6b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b6b4:	4013      	ands	r3, r2
 800b6b6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	015a      	lsls	r2, r3, #5
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	4413      	add	r3, r2
 800b6c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6c4:	681a      	ldr	r2, [r3, #0]
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	0159      	lsls	r1, r3, #5
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	440b      	add	r3, r1
 800b6ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	4b05      	ldr	r3, [pc, #20]	@ (800b6ec <USB_DeactivateEndpoint+0x1b4>)
 800b6d6:	4013      	ands	r3, r2
 800b6d8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b6da:	2300      	movs	r3, #0
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3714      	adds	r7, #20
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr
 800b6e8:	ec337800 	.word	0xec337800
 800b6ec:	eff37800 	.word	0xeff37800

0800b6f0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b08a      	sub	sp, #40	@ 0x28
 800b6f4:	af02      	add	r7, sp, #8
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	60b9      	str	r1, [r7, #8]
 800b6fa:	4613      	mov	r3, r2
 800b6fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	785b      	ldrb	r3, [r3, #1]
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	f040 8181 	bne.w	800ba14 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	691b      	ldr	r3, [r3, #16]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d132      	bne.n	800b780 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b71a:	69bb      	ldr	r3, [r7, #24]
 800b71c:	015a      	lsls	r2, r3, #5
 800b71e:	69fb      	ldr	r3, [r7, #28]
 800b720:	4413      	add	r3, r2
 800b722:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b726:	691a      	ldr	r2, [r3, #16]
 800b728:	69bb      	ldr	r3, [r7, #24]
 800b72a:	0159      	lsls	r1, r3, #5
 800b72c:	69fb      	ldr	r3, [r7, #28]
 800b72e:	440b      	add	r3, r1
 800b730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b734:	4619      	mov	r1, r3
 800b736:	4ba5      	ldr	r3, [pc, #660]	@ (800b9cc <USB_EPStartXfer+0x2dc>)
 800b738:	4013      	ands	r3, r2
 800b73a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b73c:	69bb      	ldr	r3, [r7, #24]
 800b73e:	015a      	lsls	r2, r3, #5
 800b740:	69fb      	ldr	r3, [r7, #28]
 800b742:	4413      	add	r3, r2
 800b744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b748:	691b      	ldr	r3, [r3, #16]
 800b74a:	69ba      	ldr	r2, [r7, #24]
 800b74c:	0151      	lsls	r1, r2, #5
 800b74e:	69fa      	ldr	r2, [r7, #28]
 800b750:	440a      	add	r2, r1
 800b752:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b756:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b75a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b75c:	69bb      	ldr	r3, [r7, #24]
 800b75e:	015a      	lsls	r2, r3, #5
 800b760:	69fb      	ldr	r3, [r7, #28]
 800b762:	4413      	add	r3, r2
 800b764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b768:	691a      	ldr	r2, [r3, #16]
 800b76a:	69bb      	ldr	r3, [r7, #24]
 800b76c:	0159      	lsls	r1, r3, #5
 800b76e:	69fb      	ldr	r3, [r7, #28]
 800b770:	440b      	add	r3, r1
 800b772:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b776:	4619      	mov	r1, r3
 800b778:	4b95      	ldr	r3, [pc, #596]	@ (800b9d0 <USB_EPStartXfer+0x2e0>)
 800b77a:	4013      	ands	r3, r2
 800b77c:	610b      	str	r3, [r1, #16]
 800b77e:	e092      	b.n	800b8a6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b780:	69bb      	ldr	r3, [r7, #24]
 800b782:	015a      	lsls	r2, r3, #5
 800b784:	69fb      	ldr	r3, [r7, #28]
 800b786:	4413      	add	r3, r2
 800b788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b78c:	691a      	ldr	r2, [r3, #16]
 800b78e:	69bb      	ldr	r3, [r7, #24]
 800b790:	0159      	lsls	r1, r3, #5
 800b792:	69fb      	ldr	r3, [r7, #28]
 800b794:	440b      	add	r3, r1
 800b796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b79a:	4619      	mov	r1, r3
 800b79c:	4b8c      	ldr	r3, [pc, #560]	@ (800b9d0 <USB_EPStartXfer+0x2e0>)
 800b79e:	4013      	ands	r3, r2
 800b7a0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b7a2:	69bb      	ldr	r3, [r7, #24]
 800b7a4:	015a      	lsls	r2, r3, #5
 800b7a6:	69fb      	ldr	r3, [r7, #28]
 800b7a8:	4413      	add	r3, r2
 800b7aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7ae:	691a      	ldr	r2, [r3, #16]
 800b7b0:	69bb      	ldr	r3, [r7, #24]
 800b7b2:	0159      	lsls	r1, r3, #5
 800b7b4:	69fb      	ldr	r3, [r7, #28]
 800b7b6:	440b      	add	r3, r1
 800b7b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7bc:	4619      	mov	r1, r3
 800b7be:	4b83      	ldr	r3, [pc, #524]	@ (800b9cc <USB_EPStartXfer+0x2dc>)
 800b7c0:	4013      	ands	r3, r2
 800b7c2:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800b7c4:	69bb      	ldr	r3, [r7, #24]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d11a      	bne.n	800b800 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	691a      	ldr	r2, [r3, #16]
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	689b      	ldr	r3, [r3, #8]
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d903      	bls.n	800b7de <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	689a      	ldr	r2, [r3, #8]
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b7de:	69bb      	ldr	r3, [r7, #24]
 800b7e0:	015a      	lsls	r2, r3, #5
 800b7e2:	69fb      	ldr	r3, [r7, #28]
 800b7e4:	4413      	add	r3, r2
 800b7e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7ea:	691b      	ldr	r3, [r3, #16]
 800b7ec:	69ba      	ldr	r2, [r7, #24]
 800b7ee:	0151      	lsls	r1, r2, #5
 800b7f0:	69fa      	ldr	r2, [r7, #28]
 800b7f2:	440a      	add	r2, r1
 800b7f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b7f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b7fc:	6113      	str	r3, [r2, #16]
 800b7fe:	e01b      	b.n	800b838 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b800:	69bb      	ldr	r3, [r7, #24]
 800b802:	015a      	lsls	r2, r3, #5
 800b804:	69fb      	ldr	r3, [r7, #28]
 800b806:	4413      	add	r3, r2
 800b808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b80c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	6919      	ldr	r1, [r3, #16]
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	689b      	ldr	r3, [r3, #8]
 800b816:	440b      	add	r3, r1
 800b818:	1e59      	subs	r1, r3, #1
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	689b      	ldr	r3, [r3, #8]
 800b81e:	fbb1 f3f3 	udiv	r3, r1, r3
 800b822:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b824:	4b6b      	ldr	r3, [pc, #428]	@ (800b9d4 <USB_EPStartXfer+0x2e4>)
 800b826:	400b      	ands	r3, r1
 800b828:	69b9      	ldr	r1, [r7, #24]
 800b82a:	0148      	lsls	r0, r1, #5
 800b82c:	69f9      	ldr	r1, [r7, #28]
 800b82e:	4401      	add	r1, r0
 800b830:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b834:	4313      	orrs	r3, r2
 800b836:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b838:	69bb      	ldr	r3, [r7, #24]
 800b83a:	015a      	lsls	r2, r3, #5
 800b83c:	69fb      	ldr	r3, [r7, #28]
 800b83e:	4413      	add	r3, r2
 800b840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b844:	691a      	ldr	r2, [r3, #16]
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	691b      	ldr	r3, [r3, #16]
 800b84a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b84e:	69b9      	ldr	r1, [r7, #24]
 800b850:	0148      	lsls	r0, r1, #5
 800b852:	69f9      	ldr	r1, [r7, #28]
 800b854:	4401      	add	r1, r0
 800b856:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b85a:	4313      	orrs	r3, r2
 800b85c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	791b      	ldrb	r3, [r3, #4]
 800b862:	2b01      	cmp	r3, #1
 800b864:	d11f      	bne.n	800b8a6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b866:	69bb      	ldr	r3, [r7, #24]
 800b868:	015a      	lsls	r2, r3, #5
 800b86a:	69fb      	ldr	r3, [r7, #28]
 800b86c:	4413      	add	r3, r2
 800b86e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b872:	691b      	ldr	r3, [r3, #16]
 800b874:	69ba      	ldr	r2, [r7, #24]
 800b876:	0151      	lsls	r1, r2, #5
 800b878:	69fa      	ldr	r2, [r7, #28]
 800b87a:	440a      	add	r2, r1
 800b87c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b880:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800b884:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b886:	69bb      	ldr	r3, [r7, #24]
 800b888:	015a      	lsls	r2, r3, #5
 800b88a:	69fb      	ldr	r3, [r7, #28]
 800b88c:	4413      	add	r3, r2
 800b88e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b892:	691b      	ldr	r3, [r3, #16]
 800b894:	69ba      	ldr	r2, [r7, #24]
 800b896:	0151      	lsls	r1, r2, #5
 800b898:	69fa      	ldr	r2, [r7, #28]
 800b89a:	440a      	add	r2, r1
 800b89c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b8a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b8a4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b8a6:	79fb      	ldrb	r3, [r7, #7]
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	d14b      	bne.n	800b944 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	69db      	ldr	r3, [r3, #28]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d009      	beq.n	800b8c8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b8b4:	69bb      	ldr	r3, [r7, #24]
 800b8b6:	015a      	lsls	r2, r3, #5
 800b8b8:	69fb      	ldr	r3, [r7, #28]
 800b8ba:	4413      	add	r3, r2
 800b8bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	69db      	ldr	r3, [r3, #28]
 800b8c6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	791b      	ldrb	r3, [r3, #4]
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d128      	bne.n	800b922 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b8d0:	69fb      	ldr	r3, [r7, #28]
 800b8d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8d6:	689b      	ldr	r3, [r3, #8]
 800b8d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d110      	bne.n	800b902 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b8e0:	69bb      	ldr	r3, [r7, #24]
 800b8e2:	015a      	lsls	r2, r3, #5
 800b8e4:	69fb      	ldr	r3, [r7, #28]
 800b8e6:	4413      	add	r3, r2
 800b8e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	69ba      	ldr	r2, [r7, #24]
 800b8f0:	0151      	lsls	r1, r2, #5
 800b8f2:	69fa      	ldr	r2, [r7, #28]
 800b8f4:	440a      	add	r2, r1
 800b8f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b8fa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b8fe:	6013      	str	r3, [r2, #0]
 800b900:	e00f      	b.n	800b922 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b902:	69bb      	ldr	r3, [r7, #24]
 800b904:	015a      	lsls	r2, r3, #5
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	4413      	add	r3, r2
 800b90a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	69ba      	ldr	r2, [r7, #24]
 800b912:	0151      	lsls	r1, r2, #5
 800b914:	69fa      	ldr	r2, [r7, #28]
 800b916:	440a      	add	r2, r1
 800b918:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b91c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b920:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b922:	69bb      	ldr	r3, [r7, #24]
 800b924:	015a      	lsls	r2, r3, #5
 800b926:	69fb      	ldr	r3, [r7, #28]
 800b928:	4413      	add	r3, r2
 800b92a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	69ba      	ldr	r2, [r7, #24]
 800b932:	0151      	lsls	r1, r2, #5
 800b934:	69fa      	ldr	r2, [r7, #28]
 800b936:	440a      	add	r2, r1
 800b938:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b93c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b940:	6013      	str	r3, [r2, #0]
 800b942:	e16a      	b.n	800bc1a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b944:	69bb      	ldr	r3, [r7, #24]
 800b946:	015a      	lsls	r2, r3, #5
 800b948:	69fb      	ldr	r3, [r7, #28]
 800b94a:	4413      	add	r3, r2
 800b94c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	69ba      	ldr	r2, [r7, #24]
 800b954:	0151      	lsls	r1, r2, #5
 800b956:	69fa      	ldr	r2, [r7, #28]
 800b958:	440a      	add	r2, r1
 800b95a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b95e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b962:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	791b      	ldrb	r3, [r3, #4]
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d015      	beq.n	800b998 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	691b      	ldr	r3, [r3, #16]
 800b970:	2b00      	cmp	r3, #0
 800b972:	f000 8152 	beq.w	800bc1a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b976:	69fb      	ldr	r3, [r7, #28]
 800b978:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b97c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	f003 030f 	and.w	r3, r3, #15
 800b986:	2101      	movs	r1, #1
 800b988:	fa01 f303 	lsl.w	r3, r1, r3
 800b98c:	69f9      	ldr	r1, [r7, #28]
 800b98e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b992:	4313      	orrs	r3, r2
 800b994:	634b      	str	r3, [r1, #52]	@ 0x34
 800b996:	e140      	b.n	800bc1a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b998:	69fb      	ldr	r3, [r7, #28]
 800b99a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d117      	bne.n	800b9d8 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b9a8:	69bb      	ldr	r3, [r7, #24]
 800b9aa:	015a      	lsls	r2, r3, #5
 800b9ac:	69fb      	ldr	r3, [r7, #28]
 800b9ae:	4413      	add	r3, r2
 800b9b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	69ba      	ldr	r2, [r7, #24]
 800b9b8:	0151      	lsls	r1, r2, #5
 800b9ba:	69fa      	ldr	r2, [r7, #28]
 800b9bc:	440a      	add	r2, r1
 800b9be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b9c2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b9c6:	6013      	str	r3, [r2, #0]
 800b9c8:	e016      	b.n	800b9f8 <USB_EPStartXfer+0x308>
 800b9ca:	bf00      	nop
 800b9cc:	e007ffff 	.word	0xe007ffff
 800b9d0:	fff80000 	.word	0xfff80000
 800b9d4:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b9d8:	69bb      	ldr	r3, [r7, #24]
 800b9da:	015a      	lsls	r2, r3, #5
 800b9dc:	69fb      	ldr	r3, [r7, #28]
 800b9de:	4413      	add	r3, r2
 800b9e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	69ba      	ldr	r2, [r7, #24]
 800b9e8:	0151      	lsls	r1, r2, #5
 800b9ea:	69fa      	ldr	r2, [r7, #28]
 800b9ec:	440a      	add	r2, r1
 800b9ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b9f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b9f6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	68d9      	ldr	r1, [r3, #12]
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	781a      	ldrb	r2, [r3, #0]
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	691b      	ldr	r3, [r3, #16]
 800ba04:	b298      	uxth	r0, r3
 800ba06:	79fb      	ldrb	r3, [r7, #7]
 800ba08:	9300      	str	r3, [sp, #0]
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	68f8      	ldr	r0, [r7, #12]
 800ba0e:	f000 f9b9 	bl	800bd84 <USB_WritePacket>
 800ba12:	e102      	b.n	800bc1a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ba14:	69bb      	ldr	r3, [r7, #24]
 800ba16:	015a      	lsls	r2, r3, #5
 800ba18:	69fb      	ldr	r3, [r7, #28]
 800ba1a:	4413      	add	r3, r2
 800ba1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba20:	691a      	ldr	r2, [r3, #16]
 800ba22:	69bb      	ldr	r3, [r7, #24]
 800ba24:	0159      	lsls	r1, r3, #5
 800ba26:	69fb      	ldr	r3, [r7, #28]
 800ba28:	440b      	add	r3, r1
 800ba2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba2e:	4619      	mov	r1, r3
 800ba30:	4b7c      	ldr	r3, [pc, #496]	@ (800bc24 <USB_EPStartXfer+0x534>)
 800ba32:	4013      	ands	r3, r2
 800ba34:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ba36:	69bb      	ldr	r3, [r7, #24]
 800ba38:	015a      	lsls	r2, r3, #5
 800ba3a:	69fb      	ldr	r3, [r7, #28]
 800ba3c:	4413      	add	r3, r2
 800ba3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba42:	691a      	ldr	r2, [r3, #16]
 800ba44:	69bb      	ldr	r3, [r7, #24]
 800ba46:	0159      	lsls	r1, r3, #5
 800ba48:	69fb      	ldr	r3, [r7, #28]
 800ba4a:	440b      	add	r3, r1
 800ba4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba50:	4619      	mov	r1, r3
 800ba52:	4b75      	ldr	r3, [pc, #468]	@ (800bc28 <USB_EPStartXfer+0x538>)
 800ba54:	4013      	ands	r3, r2
 800ba56:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800ba58:	69bb      	ldr	r3, [r7, #24]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d12f      	bne.n	800babe <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	691b      	ldr	r3, [r3, #16]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d003      	beq.n	800ba6e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	689a      	ldr	r2, [r3, #8]
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	689a      	ldr	r2, [r3, #8]
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ba76:	69bb      	ldr	r3, [r7, #24]
 800ba78:	015a      	lsls	r2, r3, #5
 800ba7a:	69fb      	ldr	r3, [r7, #28]
 800ba7c:	4413      	add	r3, r2
 800ba7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba82:	691a      	ldr	r2, [r3, #16]
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	6a1b      	ldr	r3, [r3, #32]
 800ba88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba8c:	69b9      	ldr	r1, [r7, #24]
 800ba8e:	0148      	lsls	r0, r1, #5
 800ba90:	69f9      	ldr	r1, [r7, #28]
 800ba92:	4401      	add	r1, r0
 800ba94:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ba9c:	69bb      	ldr	r3, [r7, #24]
 800ba9e:	015a      	lsls	r2, r3, #5
 800baa0:	69fb      	ldr	r3, [r7, #28]
 800baa2:	4413      	add	r3, r2
 800baa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800baa8:	691b      	ldr	r3, [r3, #16]
 800baaa:	69ba      	ldr	r2, [r7, #24]
 800baac:	0151      	lsls	r1, r2, #5
 800baae:	69fa      	ldr	r2, [r7, #28]
 800bab0:	440a      	add	r2, r1
 800bab2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bab6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800baba:	6113      	str	r3, [r2, #16]
 800babc:	e05f      	b.n	800bb7e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	691b      	ldr	r3, [r3, #16]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d123      	bne.n	800bb0e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bac6:	69bb      	ldr	r3, [r7, #24]
 800bac8:	015a      	lsls	r2, r3, #5
 800baca:	69fb      	ldr	r3, [r7, #28]
 800bacc:	4413      	add	r3, r2
 800bace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bad2:	691a      	ldr	r2, [r3, #16]
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800badc:	69b9      	ldr	r1, [r7, #24]
 800bade:	0148      	lsls	r0, r1, #5
 800bae0:	69f9      	ldr	r1, [r7, #28]
 800bae2:	4401      	add	r1, r0
 800bae4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800bae8:	4313      	orrs	r3, r2
 800baea:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800baec:	69bb      	ldr	r3, [r7, #24]
 800baee:	015a      	lsls	r2, r3, #5
 800baf0:	69fb      	ldr	r3, [r7, #28]
 800baf2:	4413      	add	r3, r2
 800baf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800baf8:	691b      	ldr	r3, [r3, #16]
 800bafa:	69ba      	ldr	r2, [r7, #24]
 800bafc:	0151      	lsls	r1, r2, #5
 800bafe:	69fa      	ldr	r2, [r7, #28]
 800bb00:	440a      	add	r2, r1
 800bb02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb06:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bb0a:	6113      	str	r3, [r2, #16]
 800bb0c:	e037      	b.n	800bb7e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	691a      	ldr	r2, [r3, #16]
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	689b      	ldr	r3, [r3, #8]
 800bb16:	4413      	add	r3, r2
 800bb18:	1e5a      	subs	r2, r3, #1
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	689b      	ldr	r3, [r3, #8]
 800bb1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb22:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	689b      	ldr	r3, [r3, #8]
 800bb28:	8afa      	ldrh	r2, [r7, #22]
 800bb2a:	fb03 f202 	mul.w	r2, r3, r2
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bb32:	69bb      	ldr	r3, [r7, #24]
 800bb34:	015a      	lsls	r2, r3, #5
 800bb36:	69fb      	ldr	r3, [r7, #28]
 800bb38:	4413      	add	r3, r2
 800bb3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb3e:	691a      	ldr	r2, [r3, #16]
 800bb40:	8afb      	ldrh	r3, [r7, #22]
 800bb42:	04d9      	lsls	r1, r3, #19
 800bb44:	4b39      	ldr	r3, [pc, #228]	@ (800bc2c <USB_EPStartXfer+0x53c>)
 800bb46:	400b      	ands	r3, r1
 800bb48:	69b9      	ldr	r1, [r7, #24]
 800bb4a:	0148      	lsls	r0, r1, #5
 800bb4c:	69f9      	ldr	r1, [r7, #28]
 800bb4e:	4401      	add	r1, r0
 800bb50:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800bb54:	4313      	orrs	r3, r2
 800bb56:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800bb58:	69bb      	ldr	r3, [r7, #24]
 800bb5a:	015a      	lsls	r2, r3, #5
 800bb5c:	69fb      	ldr	r3, [r7, #28]
 800bb5e:	4413      	add	r3, r2
 800bb60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb64:	691a      	ldr	r2, [r3, #16]
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	6a1b      	ldr	r3, [r3, #32]
 800bb6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb6e:	69b9      	ldr	r1, [r7, #24]
 800bb70:	0148      	lsls	r0, r1, #5
 800bb72:	69f9      	ldr	r1, [r7, #28]
 800bb74:	4401      	add	r1, r0
 800bb76:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800bb7a:	4313      	orrs	r3, r2
 800bb7c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800bb7e:	79fb      	ldrb	r3, [r7, #7]
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	d10d      	bne.n	800bba0 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	68db      	ldr	r3, [r3, #12]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d009      	beq.n	800bba0 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	68d9      	ldr	r1, [r3, #12]
 800bb90:	69bb      	ldr	r3, [r7, #24]
 800bb92:	015a      	lsls	r2, r3, #5
 800bb94:	69fb      	ldr	r3, [r7, #28]
 800bb96:	4413      	add	r3, r2
 800bb98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb9c:	460a      	mov	r2, r1
 800bb9e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	791b      	ldrb	r3, [r3, #4]
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	d128      	bne.n	800bbfa <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bba8:	69fb      	ldr	r3, [r7, #28]
 800bbaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbae:	689b      	ldr	r3, [r3, #8]
 800bbb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d110      	bne.n	800bbda <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bbb8:	69bb      	ldr	r3, [r7, #24]
 800bbba:	015a      	lsls	r2, r3, #5
 800bbbc:	69fb      	ldr	r3, [r7, #28]
 800bbbe:	4413      	add	r3, r2
 800bbc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	69ba      	ldr	r2, [r7, #24]
 800bbc8:	0151      	lsls	r1, r2, #5
 800bbca:	69fa      	ldr	r2, [r7, #28]
 800bbcc:	440a      	add	r2, r1
 800bbce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bbd2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800bbd6:	6013      	str	r3, [r2, #0]
 800bbd8:	e00f      	b.n	800bbfa <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bbda:	69bb      	ldr	r3, [r7, #24]
 800bbdc:	015a      	lsls	r2, r3, #5
 800bbde:	69fb      	ldr	r3, [r7, #28]
 800bbe0:	4413      	add	r3, r2
 800bbe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	69ba      	ldr	r2, [r7, #24]
 800bbea:	0151      	lsls	r1, r2, #5
 800bbec:	69fa      	ldr	r2, [r7, #28]
 800bbee:	440a      	add	r2, r1
 800bbf0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bbf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bbf8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bbfa:	69bb      	ldr	r3, [r7, #24]
 800bbfc:	015a      	lsls	r2, r3, #5
 800bbfe:	69fb      	ldr	r3, [r7, #28]
 800bc00:	4413      	add	r3, r2
 800bc02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	69ba      	ldr	r2, [r7, #24]
 800bc0a:	0151      	lsls	r1, r2, #5
 800bc0c:	69fa      	ldr	r2, [r7, #28]
 800bc0e:	440a      	add	r2, r1
 800bc10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bc14:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800bc18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bc1a:	2300      	movs	r3, #0
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3720      	adds	r7, #32
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	fff80000 	.word	0xfff80000
 800bc28:	e007ffff 	.word	0xe007ffff
 800bc2c:	1ff80000 	.word	0x1ff80000

0800bc30 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b087      	sub	sp, #28
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	785b      	ldrb	r3, [r3, #1]
 800bc4a:	2b01      	cmp	r3, #1
 800bc4c:	d14a      	bne.n	800bce4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	781b      	ldrb	r3, [r3, #0]
 800bc52:	015a      	lsls	r2, r3, #5
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	4413      	add	r3, r2
 800bc58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bc62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc66:	f040 8086 	bne.w	800bd76 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	015a      	lsls	r2, r3, #5
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	4413      	add	r3, r2
 800bc74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	683a      	ldr	r2, [r7, #0]
 800bc7c:	7812      	ldrb	r2, [r2, #0]
 800bc7e:	0151      	lsls	r1, r2, #5
 800bc80:	693a      	ldr	r2, [r7, #16]
 800bc82:	440a      	add	r2, r1
 800bc84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bc88:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bc8c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	015a      	lsls	r2, r3, #5
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	4413      	add	r3, r2
 800bc98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	683a      	ldr	r2, [r7, #0]
 800bca0:	7812      	ldrb	r2, [r2, #0]
 800bca2:	0151      	lsls	r1, r2, #5
 800bca4:	693a      	ldr	r2, [r7, #16]
 800bca6:	440a      	add	r2, r1
 800bca8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bcac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bcb0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f242 7210 	movw	r2, #10000	@ 0x2710
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d902      	bls.n	800bcc8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	75fb      	strb	r3, [r7, #23]
          break;
 800bcc6:	e056      	b.n	800bd76 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	015a      	lsls	r2, r3, #5
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	4413      	add	r3, r2
 800bcd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bcdc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bce0:	d0e7      	beq.n	800bcb2 <USB_EPStopXfer+0x82>
 800bce2:	e048      	b.n	800bd76 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	015a      	lsls	r2, r3, #5
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	4413      	add	r3, r2
 800bcee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bcf8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bcfc:	d13b      	bne.n	800bd76 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	781b      	ldrb	r3, [r3, #0]
 800bd02:	015a      	lsls	r2, r3, #5
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	4413      	add	r3, r2
 800bd08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	683a      	ldr	r2, [r7, #0]
 800bd10:	7812      	ldrb	r2, [r2, #0]
 800bd12:	0151      	lsls	r1, r2, #5
 800bd14:	693a      	ldr	r2, [r7, #16]
 800bd16:	440a      	add	r2, r1
 800bd18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bd1c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bd20:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	781b      	ldrb	r3, [r3, #0]
 800bd26:	015a      	lsls	r2, r3, #5
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	4413      	add	r3, r2
 800bd2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	683a      	ldr	r2, [r7, #0]
 800bd34:	7812      	ldrb	r2, [r2, #0]
 800bd36:	0151      	lsls	r1, r2, #5
 800bd38:	693a      	ldr	r2, [r7, #16]
 800bd3a:	440a      	add	r2, r1
 800bd3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bd40:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bd44:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	3301      	adds	r3, #1
 800bd4a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d902      	bls.n	800bd5c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800bd56:	2301      	movs	r3, #1
 800bd58:	75fb      	strb	r3, [r7, #23]
          break;
 800bd5a:	e00c      	b.n	800bd76 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	015a      	lsls	r2, r3, #5
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	4413      	add	r3, r2
 800bd66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bd70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bd74:	d0e7      	beq.n	800bd46 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800bd76:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	371c      	adds	r7, #28
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr

0800bd84 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b089      	sub	sp, #36	@ 0x24
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	60f8      	str	r0, [r7, #12]
 800bd8c:	60b9      	str	r1, [r7, #8]
 800bd8e:	4611      	mov	r1, r2
 800bd90:	461a      	mov	r2, r3
 800bd92:	460b      	mov	r3, r1
 800bd94:	71fb      	strb	r3, [r7, #7]
 800bd96:	4613      	mov	r3, r2
 800bd98:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bda2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d123      	bne.n	800bdf2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bdaa:	88bb      	ldrh	r3, [r7, #4]
 800bdac:	3303      	adds	r3, #3
 800bdae:	089b      	lsrs	r3, r3, #2
 800bdb0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	61bb      	str	r3, [r7, #24]
 800bdb6:	e018      	b.n	800bdea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bdb8:	79fb      	ldrb	r3, [r7, #7]
 800bdba:	031a      	lsls	r2, r3, #12
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	4413      	add	r3, r2
 800bdc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	69fb      	ldr	r3, [r7, #28]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bdcc:	69fb      	ldr	r3, [r7, #28]
 800bdce:	3301      	adds	r3, #1
 800bdd0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bdd2:	69fb      	ldr	r3, [r7, #28]
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bdd8:	69fb      	ldr	r3, [r7, #28]
 800bdda:	3301      	adds	r3, #1
 800bddc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bdde:	69fb      	ldr	r3, [r7, #28]
 800bde0:	3301      	adds	r3, #1
 800bde2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bde4:	69bb      	ldr	r3, [r7, #24]
 800bde6:	3301      	adds	r3, #1
 800bde8:	61bb      	str	r3, [r7, #24]
 800bdea:	69ba      	ldr	r2, [r7, #24]
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d3e2      	bcc.n	800bdb8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bdf2:	2300      	movs	r3, #0
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3724      	adds	r7, #36	@ 0x24
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr

0800be00 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800be00:	b480      	push	{r7}
 800be02:	b08b      	sub	sp, #44	@ 0x2c
 800be04:	af00      	add	r7, sp, #0
 800be06:	60f8      	str	r0, [r7, #12]
 800be08:	60b9      	str	r1, [r7, #8]
 800be0a:	4613      	mov	r3, r2
 800be0c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800be16:	88fb      	ldrh	r3, [r7, #6]
 800be18:	089b      	lsrs	r3, r3, #2
 800be1a:	b29b      	uxth	r3, r3
 800be1c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800be1e:	88fb      	ldrh	r3, [r7, #6]
 800be20:	f003 0303 	and.w	r3, r3, #3
 800be24:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800be26:	2300      	movs	r3, #0
 800be28:	623b      	str	r3, [r7, #32]
 800be2a:	e014      	b.n	800be56 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800be2c:	69bb      	ldr	r3, [r7, #24]
 800be2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be36:	601a      	str	r2, [r3, #0]
    pDest++;
 800be38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be3a:	3301      	adds	r3, #1
 800be3c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800be3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be40:	3301      	adds	r3, #1
 800be42:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800be44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be46:	3301      	adds	r3, #1
 800be48:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800be4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be4c:	3301      	adds	r3, #1
 800be4e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800be50:	6a3b      	ldr	r3, [r7, #32]
 800be52:	3301      	adds	r3, #1
 800be54:	623b      	str	r3, [r7, #32]
 800be56:	6a3a      	ldr	r2, [r7, #32]
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d3e6      	bcc.n	800be2c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800be5e:	8bfb      	ldrh	r3, [r7, #30]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d01e      	beq.n	800bea2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800be64:	2300      	movs	r3, #0
 800be66:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800be68:	69bb      	ldr	r3, [r7, #24]
 800be6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800be6e:	461a      	mov	r2, r3
 800be70:	f107 0310 	add.w	r3, r7, #16
 800be74:	6812      	ldr	r2, [r2, #0]
 800be76:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800be78:	693a      	ldr	r2, [r7, #16]
 800be7a:	6a3b      	ldr	r3, [r7, #32]
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	00db      	lsls	r3, r3, #3
 800be80:	fa22 f303 	lsr.w	r3, r2, r3
 800be84:	b2da      	uxtb	r2, r3
 800be86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be88:	701a      	strb	r2, [r3, #0]
      i++;
 800be8a:	6a3b      	ldr	r3, [r7, #32]
 800be8c:	3301      	adds	r3, #1
 800be8e:	623b      	str	r3, [r7, #32]
      pDest++;
 800be90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be92:	3301      	adds	r3, #1
 800be94:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800be96:	8bfb      	ldrh	r3, [r7, #30]
 800be98:	3b01      	subs	r3, #1
 800be9a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800be9c:	8bfb      	ldrh	r3, [r7, #30]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d1ea      	bne.n	800be78 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	372c      	adds	r7, #44	@ 0x2c
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr

0800beb0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b085      	sub	sp, #20
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	785b      	ldrb	r3, [r3, #1]
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d12c      	bne.n	800bf26 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	015a      	lsls	r2, r3, #5
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	4413      	add	r3, r2
 800bed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	db12      	blt.n	800bf04 <USB_EPSetStall+0x54>
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d00f      	beq.n	800bf04 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	015a      	lsls	r2, r3, #5
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	4413      	add	r3, r2
 800beec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	68ba      	ldr	r2, [r7, #8]
 800bef4:	0151      	lsls	r1, r2, #5
 800bef6:	68fa      	ldr	r2, [r7, #12]
 800bef8:	440a      	add	r2, r1
 800befa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800befe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800bf02:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	015a      	lsls	r2, r3, #5
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	4413      	add	r3, r2
 800bf0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	68ba      	ldr	r2, [r7, #8]
 800bf14:	0151      	lsls	r1, r2, #5
 800bf16:	68fa      	ldr	r2, [r7, #12]
 800bf18:	440a      	add	r2, r1
 800bf1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bf1e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bf22:	6013      	str	r3, [r2, #0]
 800bf24:	e02b      	b.n	800bf7e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	015a      	lsls	r2, r3, #5
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	4413      	add	r3, r2
 800bf2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	db12      	blt.n	800bf5e <USB_EPSetStall+0xae>
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d00f      	beq.n	800bf5e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	015a      	lsls	r2, r3, #5
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	4413      	add	r3, r2
 800bf46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	68ba      	ldr	r2, [r7, #8]
 800bf4e:	0151      	lsls	r1, r2, #5
 800bf50:	68fa      	ldr	r2, [r7, #12]
 800bf52:	440a      	add	r2, r1
 800bf54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bf58:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800bf5c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	015a      	lsls	r2, r3, #5
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	4413      	add	r3, r2
 800bf66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	68ba      	ldr	r2, [r7, #8]
 800bf6e:	0151      	lsls	r1, r2, #5
 800bf70:	68fa      	ldr	r2, [r7, #12]
 800bf72:	440a      	add	r2, r1
 800bf74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bf78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bf7c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bf7e:	2300      	movs	r3, #0
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3714      	adds	r7, #20
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr

0800bf8c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b085      	sub	sp, #20
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
 800bf94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	785b      	ldrb	r3, [r3, #1]
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d128      	bne.n	800bffa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	015a      	lsls	r2, r3, #5
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	4413      	add	r3, r2
 800bfb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	68ba      	ldr	r2, [r7, #8]
 800bfb8:	0151      	lsls	r1, r2, #5
 800bfba:	68fa      	ldr	r2, [r7, #12]
 800bfbc:	440a      	add	r2, r1
 800bfbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bfc2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bfc6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	791b      	ldrb	r3, [r3, #4]
 800bfcc:	2b03      	cmp	r3, #3
 800bfce:	d003      	beq.n	800bfd8 <USB_EPClearStall+0x4c>
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	791b      	ldrb	r3, [r3, #4]
 800bfd4:	2b02      	cmp	r3, #2
 800bfd6:	d138      	bne.n	800c04a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	015a      	lsls	r2, r3, #5
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	4413      	add	r3, r2
 800bfe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	68ba      	ldr	r2, [r7, #8]
 800bfe8:	0151      	lsls	r1, r2, #5
 800bfea:	68fa      	ldr	r2, [r7, #12]
 800bfec:	440a      	add	r2, r1
 800bfee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bff2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bff6:	6013      	str	r3, [r2, #0]
 800bff8:	e027      	b.n	800c04a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	015a      	lsls	r2, r3, #5
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	4413      	add	r3, r2
 800c002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	68ba      	ldr	r2, [r7, #8]
 800c00a:	0151      	lsls	r1, r2, #5
 800c00c:	68fa      	ldr	r2, [r7, #12]
 800c00e:	440a      	add	r2, r1
 800c010:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c014:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c018:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	791b      	ldrb	r3, [r3, #4]
 800c01e:	2b03      	cmp	r3, #3
 800c020:	d003      	beq.n	800c02a <USB_EPClearStall+0x9e>
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	791b      	ldrb	r3, [r3, #4]
 800c026:	2b02      	cmp	r3, #2
 800c028:	d10f      	bne.n	800c04a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	015a      	lsls	r2, r3, #5
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	4413      	add	r3, r2
 800c032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	68ba      	ldr	r2, [r7, #8]
 800c03a:	0151      	lsls	r1, r2, #5
 800c03c:	68fa      	ldr	r2, [r7, #12]
 800c03e:	440a      	add	r2, r1
 800c040:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c044:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c048:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c04a:	2300      	movs	r3, #0
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3714      	adds	r7, #20
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr

0800c058 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c058:	b480      	push	{r7}
 800c05a:	b085      	sub	sp, #20
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	460b      	mov	r3, r1
 800c062:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	68fa      	ldr	r2, [r7, #12]
 800c072:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c076:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c07a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c082:	681a      	ldr	r2, [r3, #0]
 800c084:	78fb      	ldrb	r3, [r7, #3]
 800c086:	011b      	lsls	r3, r3, #4
 800c088:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800c08c:	68f9      	ldr	r1, [r7, #12]
 800c08e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c092:	4313      	orrs	r3, r2
 800c094:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c096:	2300      	movs	r3, #0
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3714      	adds	r7, #20
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr

0800c0a4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b085      	sub	sp, #20
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	68fa      	ldr	r2, [r7, #12]
 800c0ba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c0be:	f023 0303 	bic.w	r3, r3, #3
 800c0c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	68fa      	ldr	r2, [r7, #12]
 800c0ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c0d2:	f023 0302 	bic.w	r3, r3, #2
 800c0d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c0d8:	2300      	movs	r3, #0
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3714      	adds	r7, #20
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e4:	4770      	bx	lr

0800c0e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c0e6:	b480      	push	{r7}
 800c0e8:	b085      	sub	sp, #20
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	68fa      	ldr	r2, [r7, #12]
 800c0fc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c100:	f023 0303 	bic.w	r3, r3, #3
 800c104:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	68fa      	ldr	r2, [r7, #12]
 800c110:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c114:	f043 0302 	orr.w	r3, r3, #2
 800c118:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c11a:	2300      	movs	r3, #0
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3714      	adds	r7, #20
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr

0800c128 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800c128:	b480      	push	{r7}
 800c12a:	b085      	sub	sp, #20
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	695b      	ldr	r3, [r3, #20]
 800c134:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	699b      	ldr	r3, [r3, #24]
 800c13a:	68fa      	ldr	r2, [r7, #12]
 800c13c:	4013      	ands	r3, r2
 800c13e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c140:	68fb      	ldr	r3, [r7, #12]
}
 800c142:	4618      	mov	r0, r3
 800c144:	3714      	adds	r7, #20
 800c146:	46bd      	mov	sp, r7
 800c148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14c:	4770      	bx	lr

0800c14e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c14e:	b480      	push	{r7}
 800c150:	b085      	sub	sp, #20
 800c152:	af00      	add	r7, sp, #0
 800c154:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c160:	699b      	ldr	r3, [r3, #24]
 800c162:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c16a:	69db      	ldr	r3, [r3, #28]
 800c16c:	68ba      	ldr	r2, [r7, #8]
 800c16e:	4013      	ands	r3, r2
 800c170:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	0c1b      	lsrs	r3, r3, #16
}
 800c176:	4618      	mov	r0, r3
 800c178:	3714      	adds	r7, #20
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr

0800c182 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c182:	b480      	push	{r7}
 800c184:	b085      	sub	sp, #20
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c194:	699b      	ldr	r3, [r3, #24]
 800c196:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c19e:	69db      	ldr	r3, [r3, #28]
 800c1a0:	68ba      	ldr	r2, [r7, #8]
 800c1a2:	4013      	ands	r3, r2
 800c1a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	b29b      	uxth	r3, r3
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3714      	adds	r7, #20
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b4:	4770      	bx	lr

0800c1b6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c1b6:	b480      	push	{r7}
 800c1b8:	b085      	sub	sp, #20
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	6078      	str	r0, [r7, #4]
 800c1be:	460b      	mov	r3, r1
 800c1c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c1c6:	78fb      	ldrb	r3, [r7, #3]
 800c1c8:	015a      	lsls	r2, r3, #5
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	4413      	add	r3, r2
 800c1ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c1dc:	695b      	ldr	r3, [r3, #20]
 800c1de:	68ba      	ldr	r2, [r7, #8]
 800c1e0:	4013      	ands	r3, r2
 800c1e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c1e4:	68bb      	ldr	r3, [r7, #8]
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3714      	adds	r7, #20
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f0:	4770      	bx	lr

0800c1f2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c1f2:	b480      	push	{r7}
 800c1f4:	b087      	sub	sp, #28
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	6078      	str	r0, [r7, #4]
 800c1fa:	460b      	mov	r3, r1
 800c1fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c208:	691b      	ldr	r3, [r3, #16]
 800c20a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c214:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c216:	78fb      	ldrb	r3, [r7, #3]
 800c218:	f003 030f 	and.w	r3, r3, #15
 800c21c:	68fa      	ldr	r2, [r7, #12]
 800c21e:	fa22 f303 	lsr.w	r3, r2, r3
 800c222:	01db      	lsls	r3, r3, #7
 800c224:	b2db      	uxtb	r3, r3
 800c226:	693a      	ldr	r2, [r7, #16]
 800c228:	4313      	orrs	r3, r2
 800c22a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c22c:	78fb      	ldrb	r3, [r7, #3]
 800c22e:	015a      	lsls	r2, r3, #5
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	4413      	add	r3, r2
 800c234:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c238:	689b      	ldr	r3, [r3, #8]
 800c23a:	693a      	ldr	r2, [r7, #16]
 800c23c:	4013      	ands	r3, r2
 800c23e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c240:	68bb      	ldr	r3, [r7, #8]
}
 800c242:	4618      	mov	r0, r3
 800c244:	371c      	adds	r7, #28
 800c246:	46bd      	mov	sp, r7
 800c248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24c:	4770      	bx	lr

0800c24e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800c24e:	b480      	push	{r7}
 800c250:	b083      	sub	sp, #12
 800c252:	af00      	add	r7, sp, #0
 800c254:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	695b      	ldr	r3, [r3, #20]
 800c25a:	f003 0301 	and.w	r3, r3, #1
}
 800c25e:	4618      	mov	r0, r3
 800c260:	370c      	adds	r7, #12
 800c262:	46bd      	mov	sp, r7
 800c264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c268:	4770      	bx	lr
	...

0800c26c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800c26c:	b480      	push	{r7}
 800c26e:	b085      	sub	sp, #20
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c27e:	681a      	ldr	r2, [r3, #0]
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c286:	4619      	mov	r1, r3
 800c288:	4b09      	ldr	r3, [pc, #36]	@ (800c2b0 <USB_ActivateSetup+0x44>)
 800c28a:	4013      	ands	r3, r2
 800c28c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	68fa      	ldr	r2, [r7, #12]
 800c298:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c29c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c2a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c2a2:	2300      	movs	r3, #0
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3714      	adds	r7, #20
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr
 800c2b0:	fffff800 	.word	0xfffff800

0800c2b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b087      	sub	sp, #28
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	460b      	mov	r3, r1
 800c2be:	607a      	str	r2, [r7, #4]
 800c2c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	333c      	adds	r3, #60	@ 0x3c
 800c2ca:	3304      	adds	r3, #4
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	4a26      	ldr	r2, [pc, #152]	@ (800c36c <USB_EP0_OutStart+0xb8>)
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d90a      	bls.n	800c2ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c2e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c2e8:	d101      	bne.n	800c2ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	e037      	b.n	800c35e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2f4:	461a      	mov	r2, r3
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c300:	691b      	ldr	r3, [r3, #16]
 800c302:	697a      	ldr	r2, [r7, #20]
 800c304:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c308:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c30c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c30e:	697b      	ldr	r3, [r7, #20]
 800c310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c314:	691b      	ldr	r3, [r3, #16]
 800c316:	697a      	ldr	r2, [r7, #20]
 800c318:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c31c:	f043 0318 	orr.w	r3, r3, #24
 800c320:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c328:	691b      	ldr	r3, [r3, #16]
 800c32a:	697a      	ldr	r2, [r7, #20]
 800c32c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c330:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800c334:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c336:	7afb      	ldrb	r3, [r7, #11]
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d10f      	bne.n	800c35c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c33c:	697b      	ldr	r3, [r7, #20]
 800c33e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c342:	461a      	mov	r2, r3
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	697a      	ldr	r2, [r7, #20]
 800c352:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c356:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800c35a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c35c:	2300      	movs	r3, #0
}
 800c35e:	4618      	mov	r0, r3
 800c360:	371c      	adds	r7, #28
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr
 800c36a:	bf00      	nop
 800c36c:	4f54300a 	.word	0x4f54300a

0800c370 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c370:	b480      	push	{r7}
 800c372:	b085      	sub	sp, #20
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c378:	2300      	movs	r3, #0
 800c37a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	3301      	adds	r3, #1
 800c380:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c388:	d901      	bls.n	800c38e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c38a:	2303      	movs	r3, #3
 800c38c:	e01b      	b.n	800c3c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	691b      	ldr	r3, [r3, #16]
 800c392:	2b00      	cmp	r3, #0
 800c394:	daf2      	bge.n	800c37c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c396:	2300      	movs	r3, #0
 800c398:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	691b      	ldr	r3, [r3, #16]
 800c39e:	f043 0201 	orr.w	r2, r3, #1
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c3b2:	d901      	bls.n	800c3b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c3b4:	2303      	movs	r3, #3
 800c3b6:	e006      	b.n	800c3c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	691b      	ldr	r3, [r3, #16]
 800c3bc:	f003 0301 	and.w	r3, r3, #1
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d0f0      	beq.n	800c3a6 <USB_CoreReset+0x36>

  return HAL_OK;
 800c3c4:	2300      	movs	r3, #0
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3714      	adds	r7, #20
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d0:	4770      	bx	lr
	...

0800c3d4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c3d8:	4904      	ldr	r1, [pc, #16]	@ (800c3ec <MX_FATFS_Init+0x18>)
 800c3da:	4805      	ldr	r0, [pc, #20]	@ (800c3f0 <MX_FATFS_Init+0x1c>)
 800c3dc:	f002 f9e0 	bl	800e7a0 <FATFS_LinkDriver>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	461a      	mov	r2, r3
 800c3e4:	4b03      	ldr	r3, [pc, #12]	@ (800c3f4 <MX_FATFS_Init+0x20>)
 800c3e6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c3e8:	bf00      	nop
 800c3ea:	bd80      	pop	{r7, pc}
 800c3ec:	20000b90 	.word	0x20000b90
 800c3f0:	08012044 	.word	0x08012044
 800c3f4:	20000b8c 	.word	0x20000b8c

0800c3f8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c3fe:	2300      	movs	r3, #0
 800c400:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c402:	f000 f879 	bl	800c4f8 <BSP_SD_IsDetected>
 800c406:	4603      	mov	r3, r0
 800c408:	2b01      	cmp	r3, #1
 800c40a:	d001      	beq.n	800c410 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c40c:	2302      	movs	r3, #2
 800c40e:	e012      	b.n	800c436 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c410:	480b      	ldr	r0, [pc, #44]	@ (800c440 <BSP_SD_Init+0x48>)
 800c412:	f7fa fb2d 	bl	8006a70 <HAL_SD_Init>
 800c416:	4603      	mov	r3, r0
 800c418:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c41a:	79fb      	ldrb	r3, [r7, #7]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d109      	bne.n	800c434 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c420:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800c424:	4806      	ldr	r0, [pc, #24]	@ (800c440 <BSP_SD_Init+0x48>)
 800c426:	f7fb f90f 	bl	8007648 <HAL_SD_ConfigWideBusOperation>
 800c42a:	4603      	mov	r3, r0
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d001      	beq.n	800c434 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c430:	2301      	movs	r3, #1
 800c432:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c434:	79fb      	ldrb	r3, [r7, #7]
}
 800c436:	4618      	mov	r0, r3
 800c438:	3708      	adds	r7, #8
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}
 800c43e:	bf00      	nop
 800c440:	2000040c 	.word	0x2000040c

0800c444 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b088      	sub	sp, #32
 800c448:	af02      	add	r7, sp, #8
 800c44a:	60f8      	str	r0, [r7, #12]
 800c44c:	60b9      	str	r1, [r7, #8]
 800c44e:	607a      	str	r2, [r7, #4]
 800c450:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c452:	2300      	movs	r3, #0
 800c454:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	9300      	str	r3, [sp, #0]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	68ba      	ldr	r2, [r7, #8]
 800c45e:	68f9      	ldr	r1, [r7, #12]
 800c460:	4806      	ldr	r0, [pc, #24]	@ (800c47c <BSP_SD_ReadBlocks+0x38>)
 800c462:	f7fa fbbd 	bl	8006be0 <HAL_SD_ReadBlocks>
 800c466:	4603      	mov	r3, r0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d001      	beq.n	800c470 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c46c:	2301      	movs	r3, #1
 800c46e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c470:	7dfb      	ldrb	r3, [r7, #23]
}
 800c472:	4618      	mov	r0, r3
 800c474:	3718      	adds	r7, #24
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	bf00      	nop
 800c47c:	2000040c 	.word	0x2000040c

0800c480 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b088      	sub	sp, #32
 800c484:	af02      	add	r7, sp, #8
 800c486:	60f8      	str	r0, [r7, #12]
 800c488:	60b9      	str	r1, [r7, #8]
 800c48a:	607a      	str	r2, [r7, #4]
 800c48c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c48e:	2300      	movs	r3, #0
 800c490:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	9300      	str	r3, [sp, #0]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	68ba      	ldr	r2, [r7, #8]
 800c49a:	68f9      	ldr	r1, [r7, #12]
 800c49c:	4806      	ldr	r0, [pc, #24]	@ (800c4b8 <BSP_SD_WriteBlocks+0x38>)
 800c49e:	f7fa fd7d 	bl	8006f9c <HAL_SD_WriteBlocks>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d001      	beq.n	800c4ac <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c4ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3718      	adds	r7, #24
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	2000040c 	.word	0x2000040c

0800c4bc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c4c0:	4805      	ldr	r0, [pc, #20]	@ (800c4d8 <BSP_SD_GetCardState+0x1c>)
 800c4c2:	f7fb f95b 	bl	800777c <HAL_SD_GetCardState>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	2b04      	cmp	r3, #4
 800c4ca:	bf14      	ite	ne
 800c4cc:	2301      	movne	r3, #1
 800c4ce:	2300      	moveq	r3, #0
 800c4d0:	b2db      	uxtb	r3, r3
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	bd80      	pop	{r7, pc}
 800c4d6:	bf00      	nop
 800c4d8:	2000040c 	.word	0x2000040c

0800c4dc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b082      	sub	sp, #8
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c4e4:	6879      	ldr	r1, [r7, #4]
 800c4e6:	4803      	ldr	r0, [pc, #12]	@ (800c4f4 <BSP_SD_GetCardInfo+0x18>)
 800c4e8:	f7fb f882 	bl	80075f0 <HAL_SD_GetCardInfo>
}
 800c4ec:	bf00      	nop
 800c4ee:	3708      	adds	r7, #8
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}
 800c4f4:	2000040c 	.word	0x2000040c

0800c4f8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b082      	sub	sp, #8
 800c4fc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c4fe:	2301      	movs	r3, #1
 800c500:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c502:	f000 f80b 	bl	800c51c <BSP_PlatformIsDetected>
 800c506:	4603      	mov	r3, r0
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d101      	bne.n	800c510 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c50c:	2300      	movs	r3, #0
 800c50e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c510:	79fb      	ldrb	r3, [r7, #7]
 800c512:	b2db      	uxtb	r3, r3
}
 800c514:	4618      	mov	r0, r3
 800c516:	3708      	adds	r7, #8
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b082      	sub	sp, #8
 800c520:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c522:	2301      	movs	r3, #1
 800c524:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c526:	2110      	movs	r1, #16
 800c528:	4806      	ldr	r0, [pc, #24]	@ (800c544 <BSP_PlatformIsDetected+0x28>)
 800c52a:	f7f7 fe23 	bl	8004174 <HAL_GPIO_ReadPin>
 800c52e:	4603      	mov	r3, r0
 800c530:	2b00      	cmp	r3, #0
 800c532:	d001      	beq.n	800c538 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800c534:	2300      	movs	r3, #0
 800c536:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c538:	79fb      	ldrb	r3, [r7, #7]
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3708      	adds	r7, #8
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	40020000 	.word	0x40020000

0800c548 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	4603      	mov	r3, r0
 800c550:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c552:	4b0b      	ldr	r3, [pc, #44]	@ (800c580 <SD_CheckStatus+0x38>)
 800c554:	2201      	movs	r2, #1
 800c556:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c558:	f7ff ffb0 	bl	800c4bc <BSP_SD_GetCardState>
 800c55c:	4603      	mov	r3, r0
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d107      	bne.n	800c572 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c562:	4b07      	ldr	r3, [pc, #28]	@ (800c580 <SD_CheckStatus+0x38>)
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	b2db      	uxtb	r3, r3
 800c568:	f023 0301 	bic.w	r3, r3, #1
 800c56c:	b2da      	uxtb	r2, r3
 800c56e:	4b04      	ldr	r3, [pc, #16]	@ (800c580 <SD_CheckStatus+0x38>)
 800c570:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c572:	4b03      	ldr	r3, [pc, #12]	@ (800c580 <SD_CheckStatus+0x38>)
 800c574:	781b      	ldrb	r3, [r3, #0]
 800c576:	b2db      	uxtb	r3, r3
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3708      	adds	r7, #8
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}
 800c580:	20000009 	.word	0x20000009

0800c584 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	af00      	add	r7, sp, #0
 800c58a:	4603      	mov	r3, r0
 800c58c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800c58e:	4b0b      	ldr	r3, [pc, #44]	@ (800c5bc <SD_initialize+0x38>)
 800c590:	2201      	movs	r2, #1
 800c592:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c594:	f7ff ff30 	bl	800c3f8 <BSP_SD_Init>
 800c598:	4603      	mov	r3, r0
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d107      	bne.n	800c5ae <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800c59e:	79fb      	ldrb	r3, [r7, #7]
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f7ff ffd1 	bl	800c548 <SD_CheckStatus>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	461a      	mov	r2, r3
 800c5aa:	4b04      	ldr	r3, [pc, #16]	@ (800c5bc <SD_initialize+0x38>)
 800c5ac:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c5ae:	4b03      	ldr	r3, [pc, #12]	@ (800c5bc <SD_initialize+0x38>)
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	b2db      	uxtb	r3, r3
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3708      	adds	r7, #8
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}
 800c5bc:	20000009 	.word	0x20000009

0800c5c0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b082      	sub	sp, #8
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c5ca:	79fb      	ldrb	r3, [r7, #7]
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7ff ffbb 	bl	800c548 <SD_CheckStatus>
 800c5d2:	4603      	mov	r3, r0
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3708      	adds	r7, #8
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}

0800c5dc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b086      	sub	sp, #24
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	60b9      	str	r1, [r7, #8]
 800c5e4:	607a      	str	r2, [r7, #4]
 800c5e6:	603b      	str	r3, [r7, #0]
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800c5f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c5f4:	683a      	ldr	r2, [r7, #0]
 800c5f6:	6879      	ldr	r1, [r7, #4]
 800c5f8:	68b8      	ldr	r0, [r7, #8]
 800c5fa:	f7ff ff23 	bl	800c444 <BSP_SD_ReadBlocks>
 800c5fe:	4603      	mov	r3, r0
 800c600:	2b00      	cmp	r3, #0
 800c602:	d107      	bne.n	800c614 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c604:	bf00      	nop
 800c606:	f7ff ff59 	bl	800c4bc <BSP_SD_GetCardState>
 800c60a:	4603      	mov	r3, r0
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d1fa      	bne.n	800c606 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800c610:	2300      	movs	r3, #0
 800c612:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c614:	7dfb      	ldrb	r3, [r7, #23]
}
 800c616:	4618      	mov	r0, r3
 800c618:	3718      	adds	r7, #24
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}

0800c61e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c61e:	b580      	push	{r7, lr}
 800c620:	b086      	sub	sp, #24
 800c622:	af00      	add	r7, sp, #0
 800c624:	60b9      	str	r1, [r7, #8]
 800c626:	607a      	str	r2, [r7, #4]
 800c628:	603b      	str	r3, [r7, #0]
 800c62a:	4603      	mov	r3, r0
 800c62c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c62e:	2301      	movs	r3, #1
 800c630:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800c632:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c636:	683a      	ldr	r2, [r7, #0]
 800c638:	6879      	ldr	r1, [r7, #4]
 800c63a:	68b8      	ldr	r0, [r7, #8]
 800c63c:	f7ff ff20 	bl	800c480 <BSP_SD_WriteBlocks>
 800c640:	4603      	mov	r3, r0
 800c642:	2b00      	cmp	r3, #0
 800c644:	d107      	bne.n	800c656 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800c646:	bf00      	nop
 800c648:	f7ff ff38 	bl	800c4bc <BSP_SD_GetCardState>
 800c64c:	4603      	mov	r3, r0
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d1fa      	bne.n	800c648 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800c652:	2300      	movs	r3, #0
 800c654:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c656:	7dfb      	ldrb	r3, [r7, #23]
}
 800c658:	4618      	mov	r0, r3
 800c65a:	3718      	adds	r7, #24
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}

0800c660 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b08c      	sub	sp, #48	@ 0x30
 800c664:	af00      	add	r7, sp, #0
 800c666:	4603      	mov	r3, r0
 800c668:	603a      	str	r2, [r7, #0]
 800c66a:	71fb      	strb	r3, [r7, #7]
 800c66c:	460b      	mov	r3, r1
 800c66e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c670:	2301      	movs	r3, #1
 800c672:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c676:	4b25      	ldr	r3, [pc, #148]	@ (800c70c <SD_ioctl+0xac>)
 800c678:	781b      	ldrb	r3, [r3, #0]
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	f003 0301 	and.w	r3, r3, #1
 800c680:	2b00      	cmp	r3, #0
 800c682:	d001      	beq.n	800c688 <SD_ioctl+0x28>
 800c684:	2303      	movs	r3, #3
 800c686:	e03c      	b.n	800c702 <SD_ioctl+0xa2>

  switch (cmd)
 800c688:	79bb      	ldrb	r3, [r7, #6]
 800c68a:	2b03      	cmp	r3, #3
 800c68c:	d834      	bhi.n	800c6f8 <SD_ioctl+0x98>
 800c68e:	a201      	add	r2, pc, #4	@ (adr r2, 800c694 <SD_ioctl+0x34>)
 800c690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c694:	0800c6a5 	.word	0x0800c6a5
 800c698:	0800c6ad 	.word	0x0800c6ad
 800c69c:	0800c6c5 	.word	0x0800c6c5
 800c6a0:	0800c6df 	.word	0x0800c6df
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c6aa:	e028      	b.n	800c6fe <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c6ac:	f107 030c 	add.w	r3, r7, #12
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f7ff ff13 	bl	800c4dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c6b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c6c2:	e01c      	b.n	800c6fe <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c6c4:	f107 030c 	add.w	r3, r7, #12
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f7ff ff07 	bl	800c4dc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c6ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6d0:	b29a      	uxth	r2, r3
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c6dc:	e00f      	b.n	800c6fe <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c6de:	f107 030c 	add.w	r3, r7, #12
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f7ff fefa 	bl	800c4dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c6e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6ea:	0a5a      	lsrs	r2, r3, #9
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c6f6:	e002      	b.n	800c6fe <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c6f8:	2304      	movs	r3, #4
 800c6fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800c6fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c702:	4618      	mov	r0, r3
 800c704:	3730      	adds	r7, #48	@ 0x30
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
 800c70a:	bf00      	nop
 800c70c:	20000009 	.word	0x20000009

0800c710 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
 800c718:	460b      	mov	r3, r1
 800c71a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c71c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800c720:	f002 fdd8 	bl	800f2d4 <malloc>
 800c724:	4603      	mov	r3, r0
 800c726:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d109      	bne.n	800c742 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	32b0      	adds	r2, #176	@ 0xb0
 800c738:	2100      	movs	r1, #0
 800c73a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c73e:	2302      	movs	r3, #2
 800c740:	e0d4      	b.n	800c8ec <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c742:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800c746:	2100      	movs	r1, #0
 800c748:	68f8      	ldr	r0, [r7, #12]
 800c74a:	f003 fc12 	bl	800ff72 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	32b0      	adds	r2, #176	@ 0xb0
 800c758:	68f9      	ldr	r1, [r7, #12]
 800c75a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	32b0      	adds	r2, #176	@ 0xb0
 800c768:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	7c1b      	ldrb	r3, [r3, #16]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d138      	bne.n	800c7ec <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c77a:	4b5e      	ldr	r3, [pc, #376]	@ (800c8f4 <USBD_CDC_Init+0x1e4>)
 800c77c:	7819      	ldrb	r1, [r3, #0]
 800c77e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c782:	2202      	movs	r2, #2
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f002 fc02 	bl	800ef8e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c78a:	4b5a      	ldr	r3, [pc, #360]	@ (800c8f4 <USBD_CDC_Init+0x1e4>)
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	f003 020f 	and.w	r2, r3, #15
 800c792:	6879      	ldr	r1, [r7, #4]
 800c794:	4613      	mov	r3, r2
 800c796:	009b      	lsls	r3, r3, #2
 800c798:	4413      	add	r3, r2
 800c79a:	009b      	lsls	r3, r3, #2
 800c79c:	440b      	add	r3, r1
 800c79e:	3324      	adds	r3, #36	@ 0x24
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c7a4:	4b54      	ldr	r3, [pc, #336]	@ (800c8f8 <USBD_CDC_Init+0x1e8>)
 800c7a6:	7819      	ldrb	r1, [r3, #0]
 800c7a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c7ac:	2202      	movs	r2, #2
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f002 fbed 	bl	800ef8e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c7b4:	4b50      	ldr	r3, [pc, #320]	@ (800c8f8 <USBD_CDC_Init+0x1e8>)
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	f003 020f 	and.w	r2, r3, #15
 800c7bc:	6879      	ldr	r1, [r7, #4]
 800c7be:	4613      	mov	r3, r2
 800c7c0:	009b      	lsls	r3, r3, #2
 800c7c2:	4413      	add	r3, r2
 800c7c4:	009b      	lsls	r3, r3, #2
 800c7c6:	440b      	add	r3, r1
 800c7c8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c7cc:	2201      	movs	r2, #1
 800c7ce:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c7d0:	4b4a      	ldr	r3, [pc, #296]	@ (800c8fc <USBD_CDC_Init+0x1ec>)
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	f003 020f 	and.w	r2, r3, #15
 800c7d8:	6879      	ldr	r1, [r7, #4]
 800c7da:	4613      	mov	r3, r2
 800c7dc:	009b      	lsls	r3, r3, #2
 800c7de:	4413      	add	r3, r2
 800c7e0:	009b      	lsls	r3, r3, #2
 800c7e2:	440b      	add	r3, r1
 800c7e4:	3326      	adds	r3, #38	@ 0x26
 800c7e6:	2210      	movs	r2, #16
 800c7e8:	801a      	strh	r2, [r3, #0]
 800c7ea:	e035      	b.n	800c858 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c7ec:	4b41      	ldr	r3, [pc, #260]	@ (800c8f4 <USBD_CDC_Init+0x1e4>)
 800c7ee:	7819      	ldrb	r1, [r3, #0]
 800c7f0:	2340      	movs	r3, #64	@ 0x40
 800c7f2:	2202      	movs	r2, #2
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f002 fbca 	bl	800ef8e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c7fa:	4b3e      	ldr	r3, [pc, #248]	@ (800c8f4 <USBD_CDC_Init+0x1e4>)
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	f003 020f 	and.w	r2, r3, #15
 800c802:	6879      	ldr	r1, [r7, #4]
 800c804:	4613      	mov	r3, r2
 800c806:	009b      	lsls	r3, r3, #2
 800c808:	4413      	add	r3, r2
 800c80a:	009b      	lsls	r3, r3, #2
 800c80c:	440b      	add	r3, r1
 800c80e:	3324      	adds	r3, #36	@ 0x24
 800c810:	2201      	movs	r2, #1
 800c812:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c814:	4b38      	ldr	r3, [pc, #224]	@ (800c8f8 <USBD_CDC_Init+0x1e8>)
 800c816:	7819      	ldrb	r1, [r3, #0]
 800c818:	2340      	movs	r3, #64	@ 0x40
 800c81a:	2202      	movs	r2, #2
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f002 fbb6 	bl	800ef8e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c822:	4b35      	ldr	r3, [pc, #212]	@ (800c8f8 <USBD_CDC_Init+0x1e8>)
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	f003 020f 	and.w	r2, r3, #15
 800c82a:	6879      	ldr	r1, [r7, #4]
 800c82c:	4613      	mov	r3, r2
 800c82e:	009b      	lsls	r3, r3, #2
 800c830:	4413      	add	r3, r2
 800c832:	009b      	lsls	r3, r3, #2
 800c834:	440b      	add	r3, r1
 800c836:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c83a:	2201      	movs	r2, #1
 800c83c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c83e:	4b2f      	ldr	r3, [pc, #188]	@ (800c8fc <USBD_CDC_Init+0x1ec>)
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	f003 020f 	and.w	r2, r3, #15
 800c846:	6879      	ldr	r1, [r7, #4]
 800c848:	4613      	mov	r3, r2
 800c84a:	009b      	lsls	r3, r3, #2
 800c84c:	4413      	add	r3, r2
 800c84e:	009b      	lsls	r3, r3, #2
 800c850:	440b      	add	r3, r1
 800c852:	3326      	adds	r3, #38	@ 0x26
 800c854:	2210      	movs	r2, #16
 800c856:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c858:	4b28      	ldr	r3, [pc, #160]	@ (800c8fc <USBD_CDC_Init+0x1ec>)
 800c85a:	7819      	ldrb	r1, [r3, #0]
 800c85c:	2308      	movs	r3, #8
 800c85e:	2203      	movs	r2, #3
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f002 fb94 	bl	800ef8e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c866:	4b25      	ldr	r3, [pc, #148]	@ (800c8fc <USBD_CDC_Init+0x1ec>)
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	f003 020f 	and.w	r2, r3, #15
 800c86e:	6879      	ldr	r1, [r7, #4]
 800c870:	4613      	mov	r3, r2
 800c872:	009b      	lsls	r3, r3, #2
 800c874:	4413      	add	r3, r2
 800c876:	009b      	lsls	r3, r3, #2
 800c878:	440b      	add	r3, r1
 800c87a:	3324      	adds	r3, #36	@ 0x24
 800c87c:	2201      	movs	r2, #1
 800c87e:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	2200      	movs	r2, #0
 800c884:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c88e:	687a      	ldr	r2, [r7, #4]
 800c890:	33b0      	adds	r3, #176	@ 0xb0
 800c892:	009b      	lsls	r3, r3, #2
 800c894:	4413      	add	r3, r2
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d101      	bne.n	800c8ba <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800c8b6:	2302      	movs	r3, #2
 800c8b8:	e018      	b.n	800c8ec <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	7c1b      	ldrb	r3, [r3, #16]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d10a      	bne.n	800c8d8 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c8c2:	4b0d      	ldr	r3, [pc, #52]	@ (800c8f8 <USBD_CDC_Init+0x1e8>)
 800c8c4:	7819      	ldrb	r1, [r3, #0]
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c8cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f002 fc4b 	bl	800f16c <USBD_LL_PrepareReceive>
 800c8d6:	e008      	b.n	800c8ea <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c8d8:	4b07      	ldr	r3, [pc, #28]	@ (800c8f8 <USBD_CDC_Init+0x1e8>)
 800c8da:	7819      	ldrb	r1, [r3, #0]
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c8e2:	2340      	movs	r3, #64	@ 0x40
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f002 fc41 	bl	800f16c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c8ea:	2300      	movs	r3, #0
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	3710      	adds	r7, #16
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}
 800c8f4:	20000093 	.word	0x20000093
 800c8f8:	20000094 	.word	0x20000094
 800c8fc:	20000095 	.word	0x20000095

0800c900 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b082      	sub	sp, #8
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	460b      	mov	r3, r1
 800c90a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c90c:	4b3a      	ldr	r3, [pc, #232]	@ (800c9f8 <USBD_CDC_DeInit+0xf8>)
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	4619      	mov	r1, r3
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f002 fb61 	bl	800efda <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c918:	4b37      	ldr	r3, [pc, #220]	@ (800c9f8 <USBD_CDC_DeInit+0xf8>)
 800c91a:	781b      	ldrb	r3, [r3, #0]
 800c91c:	f003 020f 	and.w	r2, r3, #15
 800c920:	6879      	ldr	r1, [r7, #4]
 800c922:	4613      	mov	r3, r2
 800c924:	009b      	lsls	r3, r3, #2
 800c926:	4413      	add	r3, r2
 800c928:	009b      	lsls	r3, r3, #2
 800c92a:	440b      	add	r3, r1
 800c92c:	3324      	adds	r3, #36	@ 0x24
 800c92e:	2200      	movs	r2, #0
 800c930:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c932:	4b32      	ldr	r3, [pc, #200]	@ (800c9fc <USBD_CDC_DeInit+0xfc>)
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	4619      	mov	r1, r3
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f002 fb4e 	bl	800efda <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c93e:	4b2f      	ldr	r3, [pc, #188]	@ (800c9fc <USBD_CDC_DeInit+0xfc>)
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	f003 020f 	and.w	r2, r3, #15
 800c946:	6879      	ldr	r1, [r7, #4]
 800c948:	4613      	mov	r3, r2
 800c94a:	009b      	lsls	r3, r3, #2
 800c94c:	4413      	add	r3, r2
 800c94e:	009b      	lsls	r3, r3, #2
 800c950:	440b      	add	r3, r1
 800c952:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c956:	2200      	movs	r2, #0
 800c958:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c95a:	4b29      	ldr	r3, [pc, #164]	@ (800ca00 <USBD_CDC_DeInit+0x100>)
 800c95c:	781b      	ldrb	r3, [r3, #0]
 800c95e:	4619      	mov	r1, r3
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f002 fb3a 	bl	800efda <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c966:	4b26      	ldr	r3, [pc, #152]	@ (800ca00 <USBD_CDC_DeInit+0x100>)
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	f003 020f 	and.w	r2, r3, #15
 800c96e:	6879      	ldr	r1, [r7, #4]
 800c970:	4613      	mov	r3, r2
 800c972:	009b      	lsls	r3, r3, #2
 800c974:	4413      	add	r3, r2
 800c976:	009b      	lsls	r3, r3, #2
 800c978:	440b      	add	r3, r1
 800c97a:	3324      	adds	r3, #36	@ 0x24
 800c97c:	2200      	movs	r2, #0
 800c97e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c980:	4b1f      	ldr	r3, [pc, #124]	@ (800ca00 <USBD_CDC_DeInit+0x100>)
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	f003 020f 	and.w	r2, r3, #15
 800c988:	6879      	ldr	r1, [r7, #4]
 800c98a:	4613      	mov	r3, r2
 800c98c:	009b      	lsls	r3, r3, #2
 800c98e:	4413      	add	r3, r2
 800c990:	009b      	lsls	r3, r3, #2
 800c992:	440b      	add	r3, r1
 800c994:	3326      	adds	r3, #38	@ 0x26
 800c996:	2200      	movs	r2, #0
 800c998:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	32b0      	adds	r2, #176	@ 0xb0
 800c9a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d01f      	beq.n	800c9ec <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c9b2:	687a      	ldr	r2, [r7, #4]
 800c9b4:	33b0      	adds	r3, #176	@ 0xb0
 800c9b6:	009b      	lsls	r3, r3, #2
 800c9b8:	4413      	add	r3, r2
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	685b      	ldr	r3, [r3, #4]
 800c9be:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	32b0      	adds	r2, #176	@ 0xb0
 800c9ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f002 fc88 	bl	800f2e4 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	32b0      	adds	r2, #176	@ 0xb0
 800c9de:	2100      	movs	r1, #0
 800c9e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c9ec:	2300      	movs	r3, #0
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3708      	adds	r7, #8
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}
 800c9f6:	bf00      	nop
 800c9f8:	20000093 	.word	0x20000093
 800c9fc:	20000094 	.word	0x20000094
 800ca00:	20000095 	.word	0x20000095

0800ca04 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b086      	sub	sp, #24
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	32b0      	adds	r2, #176	@ 0xb0
 800ca18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca1c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ca22:	2300      	movs	r3, #0
 800ca24:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca26:	2300      	movs	r3, #0
 800ca28:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d101      	bne.n	800ca34 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ca30:	2303      	movs	r3, #3
 800ca32:	e0bf      	b.n	800cbb4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d050      	beq.n	800cae2 <USBD_CDC_Setup+0xde>
 800ca40:	2b20      	cmp	r3, #32
 800ca42:	f040 80af 	bne.w	800cba4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	88db      	ldrh	r3, [r3, #6]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d03a      	beq.n	800cac4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	b25b      	sxtb	r3, r3
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	da1b      	bge.n	800ca90 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	33b0      	adds	r3, #176	@ 0xb0
 800ca62:	009b      	lsls	r3, r3, #2
 800ca64:	4413      	add	r3, r2
 800ca66:	685b      	ldr	r3, [r3, #4]
 800ca68:	689b      	ldr	r3, [r3, #8]
 800ca6a:	683a      	ldr	r2, [r7, #0]
 800ca6c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ca6e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ca70:	683a      	ldr	r2, [r7, #0]
 800ca72:	88d2      	ldrh	r2, [r2, #6]
 800ca74:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	88db      	ldrh	r3, [r3, #6]
 800ca7a:	2b07      	cmp	r3, #7
 800ca7c:	bf28      	it	cs
 800ca7e:	2307      	movcs	r3, #7
 800ca80:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	89fa      	ldrh	r2, [r7, #14]
 800ca86:	4619      	mov	r1, r3
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f001 fdbd 	bl	800e608 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ca8e:	e090      	b.n	800cbb2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	785a      	ldrb	r2, [r3, #1]
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	88db      	ldrh	r3, [r3, #6]
 800ca9e:	2b3f      	cmp	r3, #63	@ 0x3f
 800caa0:	d803      	bhi.n	800caaa <USBD_CDC_Setup+0xa6>
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	88db      	ldrh	r3, [r3, #6]
 800caa6:	b2da      	uxtb	r2, r3
 800caa8:	e000      	b.n	800caac <USBD_CDC_Setup+0xa8>
 800caaa:	2240      	movs	r2, #64	@ 0x40
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800cab2:	6939      	ldr	r1, [r7, #16]
 800cab4:	693b      	ldr	r3, [r7, #16]
 800cab6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800caba:	461a      	mov	r2, r3
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f001 fdcf 	bl	800e660 <USBD_CtlPrepareRx>
      break;
 800cac2:	e076      	b.n	800cbb2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800caca:	687a      	ldr	r2, [r7, #4]
 800cacc:	33b0      	adds	r3, #176	@ 0xb0
 800cace:	009b      	lsls	r3, r3, #2
 800cad0:	4413      	add	r3, r2
 800cad2:	685b      	ldr	r3, [r3, #4]
 800cad4:	689b      	ldr	r3, [r3, #8]
 800cad6:	683a      	ldr	r2, [r7, #0]
 800cad8:	7850      	ldrb	r0, [r2, #1]
 800cada:	2200      	movs	r2, #0
 800cadc:	6839      	ldr	r1, [r7, #0]
 800cade:	4798      	blx	r3
      break;
 800cae0:	e067      	b.n	800cbb2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	785b      	ldrb	r3, [r3, #1]
 800cae6:	2b0b      	cmp	r3, #11
 800cae8:	d851      	bhi.n	800cb8e <USBD_CDC_Setup+0x18a>
 800caea:	a201      	add	r2, pc, #4	@ (adr r2, 800caf0 <USBD_CDC_Setup+0xec>)
 800caec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caf0:	0800cb21 	.word	0x0800cb21
 800caf4:	0800cb9d 	.word	0x0800cb9d
 800caf8:	0800cb8f 	.word	0x0800cb8f
 800cafc:	0800cb8f 	.word	0x0800cb8f
 800cb00:	0800cb8f 	.word	0x0800cb8f
 800cb04:	0800cb8f 	.word	0x0800cb8f
 800cb08:	0800cb8f 	.word	0x0800cb8f
 800cb0c:	0800cb8f 	.word	0x0800cb8f
 800cb10:	0800cb8f 	.word	0x0800cb8f
 800cb14:	0800cb8f 	.word	0x0800cb8f
 800cb18:	0800cb4b 	.word	0x0800cb4b
 800cb1c:	0800cb75 	.word	0x0800cb75
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb26:	b2db      	uxtb	r3, r3
 800cb28:	2b03      	cmp	r3, #3
 800cb2a:	d107      	bne.n	800cb3c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cb2c:	f107 030a 	add.w	r3, r7, #10
 800cb30:	2202      	movs	r2, #2
 800cb32:	4619      	mov	r1, r3
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f001 fd67 	bl	800e608 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cb3a:	e032      	b.n	800cba2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cb3c:	6839      	ldr	r1, [r7, #0]
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f001 fce5 	bl	800e50e <USBD_CtlError>
            ret = USBD_FAIL;
 800cb44:	2303      	movs	r3, #3
 800cb46:	75fb      	strb	r3, [r7, #23]
          break;
 800cb48:	e02b      	b.n	800cba2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb50:	b2db      	uxtb	r3, r3
 800cb52:	2b03      	cmp	r3, #3
 800cb54:	d107      	bne.n	800cb66 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cb56:	f107 030d 	add.w	r3, r7, #13
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	4619      	mov	r1, r3
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f001 fd52 	bl	800e608 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cb64:	e01d      	b.n	800cba2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cb66:	6839      	ldr	r1, [r7, #0]
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f001 fcd0 	bl	800e50e <USBD_CtlError>
            ret = USBD_FAIL;
 800cb6e:	2303      	movs	r3, #3
 800cb70:	75fb      	strb	r3, [r7, #23]
          break;
 800cb72:	e016      	b.n	800cba2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb7a:	b2db      	uxtb	r3, r3
 800cb7c:	2b03      	cmp	r3, #3
 800cb7e:	d00f      	beq.n	800cba0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800cb80:	6839      	ldr	r1, [r7, #0]
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f001 fcc3 	bl	800e50e <USBD_CtlError>
            ret = USBD_FAIL;
 800cb88:	2303      	movs	r3, #3
 800cb8a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cb8c:	e008      	b.n	800cba0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cb8e:	6839      	ldr	r1, [r7, #0]
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f001 fcbc 	bl	800e50e <USBD_CtlError>
          ret = USBD_FAIL;
 800cb96:	2303      	movs	r3, #3
 800cb98:	75fb      	strb	r3, [r7, #23]
          break;
 800cb9a:	e002      	b.n	800cba2 <USBD_CDC_Setup+0x19e>
          break;
 800cb9c:	bf00      	nop
 800cb9e:	e008      	b.n	800cbb2 <USBD_CDC_Setup+0x1ae>
          break;
 800cba0:	bf00      	nop
      }
      break;
 800cba2:	e006      	b.n	800cbb2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800cba4:	6839      	ldr	r1, [r7, #0]
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f001 fcb1 	bl	800e50e <USBD_CtlError>
      ret = USBD_FAIL;
 800cbac:	2303      	movs	r3, #3
 800cbae:	75fb      	strb	r3, [r7, #23]
      break;
 800cbb0:	bf00      	nop
  }

  return (uint8_t)ret;
 800cbb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3718      	adds	r7, #24
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b084      	sub	sp, #16
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	460b      	mov	r3, r1
 800cbc6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cbce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	32b0      	adds	r2, #176	@ 0xb0
 800cbda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d101      	bne.n	800cbe6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800cbe2:	2303      	movs	r3, #3
 800cbe4:	e065      	b.n	800ccb2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	32b0      	adds	r2, #176	@ 0xb0
 800cbf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbf4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cbf6:	78fb      	ldrb	r3, [r7, #3]
 800cbf8:	f003 020f 	and.w	r2, r3, #15
 800cbfc:	6879      	ldr	r1, [r7, #4]
 800cbfe:	4613      	mov	r3, r2
 800cc00:	009b      	lsls	r3, r3, #2
 800cc02:	4413      	add	r3, r2
 800cc04:	009b      	lsls	r3, r3, #2
 800cc06:	440b      	add	r3, r1
 800cc08:	3318      	adds	r3, #24
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d02f      	beq.n	800cc70 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800cc10:	78fb      	ldrb	r3, [r7, #3]
 800cc12:	f003 020f 	and.w	r2, r3, #15
 800cc16:	6879      	ldr	r1, [r7, #4]
 800cc18:	4613      	mov	r3, r2
 800cc1a:	009b      	lsls	r3, r3, #2
 800cc1c:	4413      	add	r3, r2
 800cc1e:	009b      	lsls	r3, r3, #2
 800cc20:	440b      	add	r3, r1
 800cc22:	3318      	adds	r3, #24
 800cc24:	681a      	ldr	r2, [r3, #0]
 800cc26:	78fb      	ldrb	r3, [r7, #3]
 800cc28:	f003 010f 	and.w	r1, r3, #15
 800cc2c:	68f8      	ldr	r0, [r7, #12]
 800cc2e:	460b      	mov	r3, r1
 800cc30:	00db      	lsls	r3, r3, #3
 800cc32:	440b      	add	r3, r1
 800cc34:	009b      	lsls	r3, r3, #2
 800cc36:	4403      	add	r3, r0
 800cc38:	331c      	adds	r3, #28
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	fbb2 f1f3 	udiv	r1, r2, r3
 800cc40:	fb01 f303 	mul.w	r3, r1, r3
 800cc44:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d112      	bne.n	800cc70 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800cc4a:	78fb      	ldrb	r3, [r7, #3]
 800cc4c:	f003 020f 	and.w	r2, r3, #15
 800cc50:	6879      	ldr	r1, [r7, #4]
 800cc52:	4613      	mov	r3, r2
 800cc54:	009b      	lsls	r3, r3, #2
 800cc56:	4413      	add	r3, r2
 800cc58:	009b      	lsls	r3, r3, #2
 800cc5a:	440b      	add	r3, r1
 800cc5c:	3318      	adds	r3, #24
 800cc5e:	2200      	movs	r2, #0
 800cc60:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cc62:	78f9      	ldrb	r1, [r7, #3]
 800cc64:	2300      	movs	r3, #0
 800cc66:	2200      	movs	r2, #0
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f002 fa5e 	bl	800f12a <USBD_LL_Transmit>
 800cc6e:	e01f      	b.n	800ccb0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	2200      	movs	r2, #0
 800cc74:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	33b0      	adds	r3, #176	@ 0xb0
 800cc82:	009b      	lsls	r3, r3, #2
 800cc84:	4413      	add	r3, r2
 800cc86:	685b      	ldr	r3, [r3, #4]
 800cc88:	691b      	ldr	r3, [r3, #16]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d010      	beq.n	800ccb0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	33b0      	adds	r3, #176	@ 0xb0
 800cc98:	009b      	lsls	r3, r3, #2
 800cc9a:	4413      	add	r3, r2
 800cc9c:	685b      	ldr	r3, [r3, #4]
 800cc9e:	691b      	ldr	r3, [r3, #16]
 800cca0:	68ba      	ldr	r2, [r7, #8]
 800cca2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800cca6:	68ba      	ldr	r2, [r7, #8]
 800cca8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ccac:	78fa      	ldrb	r2, [r7, #3]
 800ccae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ccb0:	2300      	movs	r3, #0
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3710      	adds	r7, #16
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}

0800ccba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ccba:	b580      	push	{r7, lr}
 800ccbc:	b084      	sub	sp, #16
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	6078      	str	r0, [r7, #4]
 800ccc2:	460b      	mov	r3, r1
 800ccc4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	32b0      	adds	r2, #176	@ 0xb0
 800ccd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccd4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	32b0      	adds	r2, #176	@ 0xb0
 800cce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d101      	bne.n	800ccec <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cce8:	2303      	movs	r3, #3
 800ccea:	e01a      	b.n	800cd22 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ccec:	78fb      	ldrb	r3, [r7, #3]
 800ccee:	4619      	mov	r1, r3
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f002 fa5c 	bl	800f1ae <USBD_LL_GetRxDataSize>
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cd04:	687a      	ldr	r2, [r7, #4]
 800cd06:	33b0      	adds	r3, #176	@ 0xb0
 800cd08:	009b      	lsls	r3, r3, #2
 800cd0a:	4413      	add	r3, r2
 800cd0c:	685b      	ldr	r3, [r3, #4]
 800cd0e:	68db      	ldr	r3, [r3, #12]
 800cd10:	68fa      	ldr	r2, [r7, #12]
 800cd12:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800cd16:	68fa      	ldr	r2, [r7, #12]
 800cd18:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800cd1c:	4611      	mov	r1, r2
 800cd1e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cd20:	2300      	movs	r3, #0
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3710      	adds	r7, #16
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}

0800cd2a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cd2a:	b580      	push	{r7, lr}
 800cd2c:	b084      	sub	sp, #16
 800cd2e:	af00      	add	r7, sp, #0
 800cd30:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	32b0      	adds	r2, #176	@ 0xb0
 800cd3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd40:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d101      	bne.n	800cd4c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cd48:	2303      	movs	r3, #3
 800cd4a:	e024      	b.n	800cd96 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	33b0      	adds	r3, #176	@ 0xb0
 800cd56:	009b      	lsls	r3, r3, #2
 800cd58:	4413      	add	r3, r2
 800cd5a:	685b      	ldr	r3, [r3, #4]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d019      	beq.n	800cd94 <USBD_CDC_EP0_RxReady+0x6a>
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800cd66:	2bff      	cmp	r3, #255	@ 0xff
 800cd68:	d014      	beq.n	800cd94 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cd70:	687a      	ldr	r2, [r7, #4]
 800cd72:	33b0      	adds	r3, #176	@ 0xb0
 800cd74:	009b      	lsls	r3, r3, #2
 800cd76:	4413      	add	r3, r2
 800cd78:	685b      	ldr	r3, [r3, #4]
 800cd7a:	689b      	ldr	r3, [r3, #8]
 800cd7c:	68fa      	ldr	r2, [r7, #12]
 800cd7e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800cd82:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800cd84:	68fa      	ldr	r2, [r7, #12]
 800cd86:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cd8a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	22ff      	movs	r2, #255	@ 0xff
 800cd90:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800cd94:	2300      	movs	r3, #0
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3710      	adds	r7, #16
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
	...

0800cda0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b086      	sub	sp, #24
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cda8:	2182      	movs	r1, #130	@ 0x82
 800cdaa:	4818      	ldr	r0, [pc, #96]	@ (800ce0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cdac:	f000 fd4f 	bl	800d84e <USBD_GetEpDesc>
 800cdb0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cdb2:	2101      	movs	r1, #1
 800cdb4:	4815      	ldr	r0, [pc, #84]	@ (800ce0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cdb6:	f000 fd4a 	bl	800d84e <USBD_GetEpDesc>
 800cdba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cdbc:	2181      	movs	r1, #129	@ 0x81
 800cdbe:	4813      	ldr	r0, [pc, #76]	@ (800ce0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cdc0:	f000 fd45 	bl	800d84e <USBD_GetEpDesc>
 800cdc4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d002      	beq.n	800cdd2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	2210      	movs	r2, #16
 800cdd0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d006      	beq.n	800cde6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	2200      	movs	r2, #0
 800cddc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cde0:	711a      	strb	r2, [r3, #4]
 800cde2:	2200      	movs	r2, #0
 800cde4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d006      	beq.n	800cdfa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cdf4:	711a      	strb	r2, [r3, #4]
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2243      	movs	r2, #67	@ 0x43
 800cdfe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ce00:	4b02      	ldr	r3, [pc, #8]	@ (800ce0c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3718      	adds	r7, #24
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}
 800ce0a:	bf00      	nop
 800ce0c:	20000050 	.word	0x20000050

0800ce10 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b086      	sub	sp, #24
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ce18:	2182      	movs	r1, #130	@ 0x82
 800ce1a:	4818      	ldr	r0, [pc, #96]	@ (800ce7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ce1c:	f000 fd17 	bl	800d84e <USBD_GetEpDesc>
 800ce20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ce22:	2101      	movs	r1, #1
 800ce24:	4815      	ldr	r0, [pc, #84]	@ (800ce7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ce26:	f000 fd12 	bl	800d84e <USBD_GetEpDesc>
 800ce2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ce2c:	2181      	movs	r1, #129	@ 0x81
 800ce2e:	4813      	ldr	r0, [pc, #76]	@ (800ce7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ce30:	f000 fd0d 	bl	800d84e <USBD_GetEpDesc>
 800ce34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ce36:	697b      	ldr	r3, [r7, #20]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d002      	beq.n	800ce42 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	2210      	movs	r2, #16
 800ce40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ce42:	693b      	ldr	r3, [r7, #16]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d006      	beq.n	800ce56 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	711a      	strb	r2, [r3, #4]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	f042 0202 	orr.w	r2, r2, #2
 800ce54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d006      	beq.n	800ce6a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	711a      	strb	r2, [r3, #4]
 800ce62:	2200      	movs	r2, #0
 800ce64:	f042 0202 	orr.w	r2, r2, #2
 800ce68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2243      	movs	r2, #67	@ 0x43
 800ce6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ce70:	4b02      	ldr	r3, [pc, #8]	@ (800ce7c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	3718      	adds	r7, #24
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
 800ce7a:	bf00      	nop
 800ce7c:	20000050 	.word	0x20000050

0800ce80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b086      	sub	sp, #24
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ce88:	2182      	movs	r1, #130	@ 0x82
 800ce8a:	4818      	ldr	r0, [pc, #96]	@ (800ceec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ce8c:	f000 fcdf 	bl	800d84e <USBD_GetEpDesc>
 800ce90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ce92:	2101      	movs	r1, #1
 800ce94:	4815      	ldr	r0, [pc, #84]	@ (800ceec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ce96:	f000 fcda 	bl	800d84e <USBD_GetEpDesc>
 800ce9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ce9c:	2181      	movs	r1, #129	@ 0x81
 800ce9e:	4813      	ldr	r0, [pc, #76]	@ (800ceec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cea0:	f000 fcd5 	bl	800d84e <USBD_GetEpDesc>
 800cea4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d002      	beq.n	800ceb2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	2210      	movs	r2, #16
 800ceb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d006      	beq.n	800cec6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	2200      	movs	r2, #0
 800cebc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cec0:	711a      	strb	r2, [r3, #4]
 800cec2:	2200      	movs	r2, #0
 800cec4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d006      	beq.n	800ceda <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2200      	movs	r2, #0
 800ced0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ced4:	711a      	strb	r2, [r3, #4]
 800ced6:	2200      	movs	r2, #0
 800ced8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2243      	movs	r2, #67	@ 0x43
 800cede:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cee0:	4b02      	ldr	r3, [pc, #8]	@ (800ceec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3718      	adds	r7, #24
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	bf00      	nop
 800ceec:	20000050 	.word	0x20000050

0800cef0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cef0:	b480      	push	{r7}
 800cef2:	b083      	sub	sp, #12
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	220a      	movs	r2, #10
 800cefc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cefe:	4b03      	ldr	r3, [pc, #12]	@ (800cf0c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	370c      	adds	r7, #12
 800cf04:	46bd      	mov	sp, r7
 800cf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0a:	4770      	bx	lr
 800cf0c:	2000000c 	.word	0x2000000c

0800cf10 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cf10:	b480      	push	{r7}
 800cf12:	b083      	sub	sp, #12
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d101      	bne.n	800cf24 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cf20:	2303      	movs	r3, #3
 800cf22:	e009      	b.n	800cf38 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cf2a:	687a      	ldr	r2, [r7, #4]
 800cf2c:	33b0      	adds	r3, #176	@ 0xb0
 800cf2e:	009b      	lsls	r3, r3, #2
 800cf30:	4413      	add	r3, r2
 800cf32:	683a      	ldr	r2, [r7, #0]
 800cf34:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800cf36:	2300      	movs	r3, #0
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	370c      	adds	r7, #12
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr

0800cf44 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cf44:	b480      	push	{r7}
 800cf46:	b087      	sub	sp, #28
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	60f8      	str	r0, [r7, #12]
 800cf4c:	60b9      	str	r1, [r7, #8]
 800cf4e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	32b0      	adds	r2, #176	@ 0xb0
 800cf5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf5e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800cf60:	697b      	ldr	r3, [r7, #20]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d101      	bne.n	800cf6a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800cf66:	2303      	movs	r3, #3
 800cf68:	e008      	b.n	800cf7c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	68ba      	ldr	r2, [r7, #8]
 800cf6e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	687a      	ldr	r2, [r7, #4]
 800cf76:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800cf7a:	2300      	movs	r3, #0
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	371c      	adds	r7, #28
 800cf80:	46bd      	mov	sp, r7
 800cf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf86:	4770      	bx	lr

0800cf88 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b085      	sub	sp, #20
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
 800cf90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	32b0      	adds	r2, #176	@ 0xb0
 800cf9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfa0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d101      	bne.n	800cfac <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800cfa8:	2303      	movs	r3, #3
 800cfaa:	e004      	b.n	800cfb6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	683a      	ldr	r2, [r7, #0]
 800cfb0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800cfb4:	2300      	movs	r3, #0
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3714      	adds	r7, #20
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc0:	4770      	bx	lr
	...

0800cfc4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b084      	sub	sp, #16
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	32b0      	adds	r2, #176	@ 0xb0
 800cfd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfda:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800cfdc:	2301      	movs	r3, #1
 800cfde:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d101      	bne.n	800cfea <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800cfe6:	2303      	movs	r3, #3
 800cfe8:	e025      	b.n	800d036 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d11f      	bne.n	800d034 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	2201      	movs	r2, #1
 800cff8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800cffc:	4b10      	ldr	r3, [pc, #64]	@ (800d040 <USBD_CDC_TransmitPacket+0x7c>)
 800cffe:	781b      	ldrb	r3, [r3, #0]
 800d000:	f003 020f 	and.w	r2, r3, #15
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	4613      	mov	r3, r2
 800d00e:	009b      	lsls	r3, r3, #2
 800d010:	4413      	add	r3, r2
 800d012:	009b      	lsls	r3, r3, #2
 800d014:	4403      	add	r3, r0
 800d016:	3318      	adds	r3, #24
 800d018:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d01a:	4b09      	ldr	r3, [pc, #36]	@ (800d040 <USBD_CDC_TransmitPacket+0x7c>)
 800d01c:	7819      	ldrb	r1, [r3, #0]
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f002 f87d 	bl	800f12a <USBD_LL_Transmit>

    ret = USBD_OK;
 800d030:	2300      	movs	r3, #0
 800d032:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d034:	7bfb      	ldrb	r3, [r7, #15]
}
 800d036:	4618      	mov	r0, r3
 800d038:	3710      	adds	r7, #16
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}
 800d03e:	bf00      	nop
 800d040:	20000093 	.word	0x20000093

0800d044 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b084      	sub	sp, #16
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	32b0      	adds	r2, #176	@ 0xb0
 800d056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d05a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	32b0      	adds	r2, #176	@ 0xb0
 800d066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d101      	bne.n	800d072 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d06e:	2303      	movs	r3, #3
 800d070:	e018      	b.n	800d0a4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	7c1b      	ldrb	r3, [r3, #16]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d10a      	bne.n	800d090 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d07a:	4b0c      	ldr	r3, [pc, #48]	@ (800d0ac <USBD_CDC_ReceivePacket+0x68>)
 800d07c:	7819      	ldrb	r1, [r3, #0]
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d084:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f002 f86f 	bl	800f16c <USBD_LL_PrepareReceive>
 800d08e:	e008      	b.n	800d0a2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d090:	4b06      	ldr	r3, [pc, #24]	@ (800d0ac <USBD_CDC_ReceivePacket+0x68>)
 800d092:	7819      	ldrb	r1, [r3, #0]
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d09a:	2340      	movs	r3, #64	@ 0x40
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f002 f865 	bl	800f16c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d0a2:	2300      	movs	r3, #0
}
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	3710      	adds	r7, #16
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}
 800d0ac:	20000094 	.word	0x20000094

0800d0b0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b086      	sub	sp, #24
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	60f8      	str	r0, [r7, #12]
 800d0b8:	60b9      	str	r1, [r7, #8]
 800d0ba:	4613      	mov	r3, r2
 800d0bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d101      	bne.n	800d0c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d0c4:	2303      	movs	r3, #3
 800d0c6:	e01f      	b.n	800d108 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d003      	beq.n	800d0ee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	68ba      	ldr	r2, [r7, #8]
 800d0ea:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	2201      	movs	r2, #1
 800d0f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	79fa      	ldrb	r2, [r7, #7]
 800d0fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d0fc:	68f8      	ldr	r0, [r7, #12]
 800d0fe:	f001 fedb 	bl	800eeb8 <USBD_LL_Init>
 800d102:	4603      	mov	r3, r0
 800d104:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d106:	7dfb      	ldrb	r3, [r7, #23]
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3718      	adds	r7, #24
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}

0800d110 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b084      	sub	sp, #16
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d11a:	2300      	movs	r3, #0
 800d11c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d101      	bne.n	800d128 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d124:	2303      	movs	r3, #3
 800d126:	e025      	b.n	800d174 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	683a      	ldr	r2, [r7, #0]
 800d12c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	32ae      	adds	r2, #174	@ 0xae
 800d13a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d13e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d140:	2b00      	cmp	r3, #0
 800d142:	d00f      	beq.n	800d164 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	32ae      	adds	r2, #174	@ 0xae
 800d14e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d154:	f107 020e 	add.w	r2, r7, #14
 800d158:	4610      	mov	r0, r2
 800d15a:	4798      	blx	r3
 800d15c:	4602      	mov	r2, r0
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d16a:	1c5a      	adds	r2, r3, #1
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800d172:	2300      	movs	r3, #0
}
 800d174:	4618      	mov	r0, r3
 800d176:	3710      	adds	r7, #16
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}

0800d17c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b082      	sub	sp, #8
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f001 fee7 	bl	800ef58 <USBD_LL_Start>
 800d18a:	4603      	mov	r3, r0
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3708      	adds	r7, #8
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d194:	b480      	push	{r7}
 800d196:	b083      	sub	sp, #12
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d19c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	370c      	adds	r7, #12
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a8:	4770      	bx	lr

0800d1aa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d1aa:	b580      	push	{r7, lr}
 800d1ac:	b084      	sub	sp, #16
 800d1ae:	af00      	add	r7, sp, #0
 800d1b0:	6078      	str	r0, [r7, #4]
 800d1b2:	460b      	mov	r3, r1
 800d1b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d009      	beq.n	800d1d8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	78fa      	ldrb	r2, [r7, #3]
 800d1ce:	4611      	mov	r1, r2
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	4798      	blx	r3
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d1d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	3710      	adds	r7, #16
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}

0800d1e2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d1e2:	b580      	push	{r7, lr}
 800d1e4:	b084      	sub	sp, #16
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	6078      	str	r0, [r7, #4]
 800d1ea:	460b      	mov	r3, r1
 800d1ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d1f8:	685b      	ldr	r3, [r3, #4]
 800d1fa:	78fa      	ldrb	r2, [r7, #3]
 800d1fc:	4611      	mov	r1, r2
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	4798      	blx	r3
 800d202:	4603      	mov	r3, r0
 800d204:	2b00      	cmp	r3, #0
 800d206:	d001      	beq.n	800d20c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d208:	2303      	movs	r3, #3
 800d20a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d20c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d20e:	4618      	mov	r0, r3
 800d210:	3710      	adds	r7, #16
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}

0800d216 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d216:	b580      	push	{r7, lr}
 800d218:	b084      	sub	sp, #16
 800d21a:	af00      	add	r7, sp, #0
 800d21c:	6078      	str	r0, [r7, #4]
 800d21e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d226:	6839      	ldr	r1, [r7, #0]
 800d228:	4618      	mov	r0, r3
 800d22a:	f001 f936 	bl	800e49a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2201      	movs	r2, #1
 800d232:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d23c:	461a      	mov	r2, r3
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d24a:	f003 031f 	and.w	r3, r3, #31
 800d24e:	2b02      	cmp	r3, #2
 800d250:	d01a      	beq.n	800d288 <USBD_LL_SetupStage+0x72>
 800d252:	2b02      	cmp	r3, #2
 800d254:	d822      	bhi.n	800d29c <USBD_LL_SetupStage+0x86>
 800d256:	2b00      	cmp	r3, #0
 800d258:	d002      	beq.n	800d260 <USBD_LL_SetupStage+0x4a>
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d00a      	beq.n	800d274 <USBD_LL_SetupStage+0x5e>
 800d25e:	e01d      	b.n	800d29c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d266:	4619      	mov	r1, r3
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f000 fb63 	bl	800d934 <USBD_StdDevReq>
 800d26e:	4603      	mov	r3, r0
 800d270:	73fb      	strb	r3, [r7, #15]
      break;
 800d272:	e020      	b.n	800d2b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d27a:	4619      	mov	r1, r3
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f000 fbcb 	bl	800da18 <USBD_StdItfReq>
 800d282:	4603      	mov	r3, r0
 800d284:	73fb      	strb	r3, [r7, #15]
      break;
 800d286:	e016      	b.n	800d2b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d28e:	4619      	mov	r1, r3
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f000 fc2d 	bl	800daf0 <USBD_StdEPReq>
 800d296:	4603      	mov	r3, r0
 800d298:	73fb      	strb	r3, [r7, #15]
      break;
 800d29a:	e00c      	b.n	800d2b6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d2a2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d2a6:	b2db      	uxtb	r3, r3
 800d2a8:	4619      	mov	r1, r3
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f001 feb4 	bl	800f018 <USBD_LL_StallEP>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	73fb      	strb	r3, [r7, #15]
      break;
 800d2b4:	bf00      	nop
  }

  return ret;
 800d2b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	3710      	adds	r7, #16
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}

0800d2c0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b086      	sub	sp, #24
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	60f8      	str	r0, [r7, #12]
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	607a      	str	r2, [r7, #4]
 800d2cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d2d2:	7afb      	ldrb	r3, [r7, #11]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d16e      	bne.n	800d3b6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d2de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d2e6:	2b03      	cmp	r3, #3
 800d2e8:	f040 8098 	bne.w	800d41c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d2ec:	693b      	ldr	r3, [r7, #16]
 800d2ee:	689a      	ldr	r2, [r3, #8]
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	68db      	ldr	r3, [r3, #12]
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d913      	bls.n	800d320 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	689a      	ldr	r2, [r3, #8]
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	68db      	ldr	r3, [r3, #12]
 800d300:	1ad2      	subs	r2, r2, r3
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d306:	693b      	ldr	r3, [r7, #16]
 800d308:	68da      	ldr	r2, [r3, #12]
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	689b      	ldr	r3, [r3, #8]
 800d30e:	4293      	cmp	r3, r2
 800d310:	bf28      	it	cs
 800d312:	4613      	movcs	r3, r2
 800d314:	461a      	mov	r2, r3
 800d316:	6879      	ldr	r1, [r7, #4]
 800d318:	68f8      	ldr	r0, [r7, #12]
 800d31a:	f001 f9be 	bl	800e69a <USBD_CtlContinueRx>
 800d31e:	e07d      	b.n	800d41c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d326:	f003 031f 	and.w	r3, r3, #31
 800d32a:	2b02      	cmp	r3, #2
 800d32c:	d014      	beq.n	800d358 <USBD_LL_DataOutStage+0x98>
 800d32e:	2b02      	cmp	r3, #2
 800d330:	d81d      	bhi.n	800d36e <USBD_LL_DataOutStage+0xae>
 800d332:	2b00      	cmp	r3, #0
 800d334:	d002      	beq.n	800d33c <USBD_LL_DataOutStage+0x7c>
 800d336:	2b01      	cmp	r3, #1
 800d338:	d003      	beq.n	800d342 <USBD_LL_DataOutStage+0x82>
 800d33a:	e018      	b.n	800d36e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d33c:	2300      	movs	r3, #0
 800d33e:	75bb      	strb	r3, [r7, #22]
            break;
 800d340:	e018      	b.n	800d374 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d348:	b2db      	uxtb	r3, r3
 800d34a:	4619      	mov	r1, r3
 800d34c:	68f8      	ldr	r0, [r7, #12]
 800d34e:	f000 fa64 	bl	800d81a <USBD_CoreFindIF>
 800d352:	4603      	mov	r3, r0
 800d354:	75bb      	strb	r3, [r7, #22]
            break;
 800d356:	e00d      	b.n	800d374 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d35e:	b2db      	uxtb	r3, r3
 800d360:	4619      	mov	r1, r3
 800d362:	68f8      	ldr	r0, [r7, #12]
 800d364:	f000 fa66 	bl	800d834 <USBD_CoreFindEP>
 800d368:	4603      	mov	r3, r0
 800d36a:	75bb      	strb	r3, [r7, #22]
            break;
 800d36c:	e002      	b.n	800d374 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d36e:	2300      	movs	r3, #0
 800d370:	75bb      	strb	r3, [r7, #22]
            break;
 800d372:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d374:	7dbb      	ldrb	r3, [r7, #22]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d119      	bne.n	800d3ae <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d380:	b2db      	uxtb	r3, r3
 800d382:	2b03      	cmp	r3, #3
 800d384:	d113      	bne.n	800d3ae <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d386:	7dba      	ldrb	r2, [r7, #22]
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	32ae      	adds	r2, #174	@ 0xae
 800d38c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d390:	691b      	ldr	r3, [r3, #16]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d00b      	beq.n	800d3ae <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d396:	7dba      	ldrb	r2, [r7, #22]
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d39e:	7dba      	ldrb	r2, [r7, #22]
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	32ae      	adds	r2, #174	@ 0xae
 800d3a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3a8:	691b      	ldr	r3, [r3, #16]
 800d3aa:	68f8      	ldr	r0, [r7, #12]
 800d3ac:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d3ae:	68f8      	ldr	r0, [r7, #12]
 800d3b0:	f001 f984 	bl	800e6bc <USBD_CtlSendStatus>
 800d3b4:	e032      	b.n	800d41c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d3b6:	7afb      	ldrb	r3, [r7, #11]
 800d3b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d3bc:	b2db      	uxtb	r3, r3
 800d3be:	4619      	mov	r1, r3
 800d3c0:	68f8      	ldr	r0, [r7, #12]
 800d3c2:	f000 fa37 	bl	800d834 <USBD_CoreFindEP>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d3ca:	7dbb      	ldrb	r3, [r7, #22]
 800d3cc:	2bff      	cmp	r3, #255	@ 0xff
 800d3ce:	d025      	beq.n	800d41c <USBD_LL_DataOutStage+0x15c>
 800d3d0:	7dbb      	ldrb	r3, [r7, #22]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d122      	bne.n	800d41c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d3dc:	b2db      	uxtb	r3, r3
 800d3de:	2b03      	cmp	r3, #3
 800d3e0:	d117      	bne.n	800d412 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d3e2:	7dba      	ldrb	r2, [r7, #22]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	32ae      	adds	r2, #174	@ 0xae
 800d3e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3ec:	699b      	ldr	r3, [r3, #24]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d00f      	beq.n	800d412 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d3f2:	7dba      	ldrb	r2, [r7, #22]
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d3fa:	7dba      	ldrb	r2, [r7, #22]
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	32ae      	adds	r2, #174	@ 0xae
 800d400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d404:	699b      	ldr	r3, [r3, #24]
 800d406:	7afa      	ldrb	r2, [r7, #11]
 800d408:	4611      	mov	r1, r2
 800d40a:	68f8      	ldr	r0, [r7, #12]
 800d40c:	4798      	blx	r3
 800d40e:	4603      	mov	r3, r0
 800d410:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d412:	7dfb      	ldrb	r3, [r7, #23]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d001      	beq.n	800d41c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d418:	7dfb      	ldrb	r3, [r7, #23]
 800d41a:	e000      	b.n	800d41e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d41c:	2300      	movs	r3, #0
}
 800d41e:	4618      	mov	r0, r3
 800d420:	3718      	adds	r7, #24
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}

0800d426 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d426:	b580      	push	{r7, lr}
 800d428:	b086      	sub	sp, #24
 800d42a:	af00      	add	r7, sp, #0
 800d42c:	60f8      	str	r0, [r7, #12]
 800d42e:	460b      	mov	r3, r1
 800d430:	607a      	str	r2, [r7, #4]
 800d432:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d434:	7afb      	ldrb	r3, [r7, #11]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d16f      	bne.n	800d51a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	3314      	adds	r3, #20
 800d43e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d446:	2b02      	cmp	r3, #2
 800d448:	d15a      	bne.n	800d500 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d44a:	693b      	ldr	r3, [r7, #16]
 800d44c:	689a      	ldr	r2, [r3, #8]
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	68db      	ldr	r3, [r3, #12]
 800d452:	429a      	cmp	r2, r3
 800d454:	d914      	bls.n	800d480 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	689a      	ldr	r2, [r3, #8]
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	68db      	ldr	r3, [r3, #12]
 800d45e:	1ad2      	subs	r2, r2, r3
 800d460:	693b      	ldr	r3, [r7, #16]
 800d462:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	689b      	ldr	r3, [r3, #8]
 800d468:	461a      	mov	r2, r3
 800d46a:	6879      	ldr	r1, [r7, #4]
 800d46c:	68f8      	ldr	r0, [r7, #12]
 800d46e:	f001 f8e6 	bl	800e63e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d472:	2300      	movs	r3, #0
 800d474:	2200      	movs	r2, #0
 800d476:	2100      	movs	r1, #0
 800d478:	68f8      	ldr	r0, [r7, #12]
 800d47a:	f001 fe77 	bl	800f16c <USBD_LL_PrepareReceive>
 800d47e:	e03f      	b.n	800d500 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	68da      	ldr	r2, [r3, #12]
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	689b      	ldr	r3, [r3, #8]
 800d488:	429a      	cmp	r2, r3
 800d48a:	d11c      	bne.n	800d4c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	685a      	ldr	r2, [r3, #4]
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d494:	429a      	cmp	r2, r3
 800d496:	d316      	bcc.n	800d4c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	685a      	ldr	r2, [r3, #4]
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d20f      	bcs.n	800d4c6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	2100      	movs	r1, #0
 800d4aa:	68f8      	ldr	r0, [r7, #12]
 800d4ac:	f001 f8c7 	bl	800e63e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	2100      	movs	r1, #0
 800d4be:	68f8      	ldr	r0, [r7, #12]
 800d4c0:	f001 fe54 	bl	800f16c <USBD_LL_PrepareReceive>
 800d4c4:	e01c      	b.n	800d500 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d4cc:	b2db      	uxtb	r3, r3
 800d4ce:	2b03      	cmp	r3, #3
 800d4d0:	d10f      	bne.n	800d4f2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d4d8:	68db      	ldr	r3, [r3, #12]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d009      	beq.n	800d4f2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d4ec:	68db      	ldr	r3, [r3, #12]
 800d4ee:	68f8      	ldr	r0, [r7, #12]
 800d4f0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d4f2:	2180      	movs	r1, #128	@ 0x80
 800d4f4:	68f8      	ldr	r0, [r7, #12]
 800d4f6:	f001 fd8f 	bl	800f018 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d4fa:	68f8      	ldr	r0, [r7, #12]
 800d4fc:	f001 f8f1 	bl	800e6e2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d506:	2b00      	cmp	r3, #0
 800d508:	d03a      	beq.n	800d580 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d50a:	68f8      	ldr	r0, [r7, #12]
 800d50c:	f7ff fe42 	bl	800d194 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	2200      	movs	r2, #0
 800d514:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d518:	e032      	b.n	800d580 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d51a:	7afb      	ldrb	r3, [r7, #11]
 800d51c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d520:	b2db      	uxtb	r3, r3
 800d522:	4619      	mov	r1, r3
 800d524:	68f8      	ldr	r0, [r7, #12]
 800d526:	f000 f985 	bl	800d834 <USBD_CoreFindEP>
 800d52a:	4603      	mov	r3, r0
 800d52c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d52e:	7dfb      	ldrb	r3, [r7, #23]
 800d530:	2bff      	cmp	r3, #255	@ 0xff
 800d532:	d025      	beq.n	800d580 <USBD_LL_DataInStage+0x15a>
 800d534:	7dfb      	ldrb	r3, [r7, #23]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d122      	bne.n	800d580 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d540:	b2db      	uxtb	r3, r3
 800d542:	2b03      	cmp	r3, #3
 800d544:	d11c      	bne.n	800d580 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d546:	7dfa      	ldrb	r2, [r7, #23]
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	32ae      	adds	r2, #174	@ 0xae
 800d54c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d550:	695b      	ldr	r3, [r3, #20]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d014      	beq.n	800d580 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d556:	7dfa      	ldrb	r2, [r7, #23]
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d55e:	7dfa      	ldrb	r2, [r7, #23]
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	32ae      	adds	r2, #174	@ 0xae
 800d564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d568:	695b      	ldr	r3, [r3, #20]
 800d56a:	7afa      	ldrb	r2, [r7, #11]
 800d56c:	4611      	mov	r1, r2
 800d56e:	68f8      	ldr	r0, [r7, #12]
 800d570:	4798      	blx	r3
 800d572:	4603      	mov	r3, r0
 800d574:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d576:	7dbb      	ldrb	r3, [r7, #22]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d001      	beq.n	800d580 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d57c:	7dbb      	ldrb	r3, [r7, #22]
 800d57e:	e000      	b.n	800d582 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d580:	2300      	movs	r3, #0
}
 800d582:	4618      	mov	r0, r3
 800d584:	3718      	adds	r7, #24
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}

0800d58a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d58a:	b580      	push	{r7, lr}
 800d58c:	b084      	sub	sp, #16
 800d58e:	af00      	add	r7, sp, #0
 800d590:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d592:	2300      	movs	r3, #0
 800d594:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	2201      	movs	r2, #1
 800d59a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d014      	beq.n	800d5f0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d5cc:	685b      	ldr	r3, [r3, #4]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d00e      	beq.n	800d5f0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d5d8:	685b      	ldr	r3, [r3, #4]
 800d5da:	687a      	ldr	r2, [r7, #4]
 800d5dc:	6852      	ldr	r2, [r2, #4]
 800d5de:	b2d2      	uxtb	r2, r2
 800d5e0:	4611      	mov	r1, r2
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	4798      	blx	r3
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d001      	beq.n	800d5f0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d5ec:	2303      	movs	r3, #3
 800d5ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d5f0:	2340      	movs	r3, #64	@ 0x40
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	2100      	movs	r1, #0
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f001 fcc9 	bl	800ef8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2201      	movs	r2, #1
 800d600:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2240      	movs	r2, #64	@ 0x40
 800d608:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d60c:	2340      	movs	r3, #64	@ 0x40
 800d60e:	2200      	movs	r2, #0
 800d610:	2180      	movs	r1, #128	@ 0x80
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f001 fcbb 	bl	800ef8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2201      	movs	r2, #1
 800d61c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2240      	movs	r2, #64	@ 0x40
 800d622:	621a      	str	r2, [r3, #32]

  return ret;
 800d624:	7bfb      	ldrb	r3, [r7, #15]
}
 800d626:	4618      	mov	r0, r3
 800d628:	3710      	adds	r7, #16
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}

0800d62e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d62e:	b480      	push	{r7}
 800d630:	b083      	sub	sp, #12
 800d632:	af00      	add	r7, sp, #0
 800d634:	6078      	str	r0, [r7, #4]
 800d636:	460b      	mov	r3, r1
 800d638:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	78fa      	ldrb	r2, [r7, #3]
 800d63e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d640:	2300      	movs	r3, #0
}
 800d642:	4618      	mov	r0, r3
 800d644:	370c      	adds	r7, #12
 800d646:	46bd      	mov	sp, r7
 800d648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64c:	4770      	bx	lr

0800d64e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d64e:	b480      	push	{r7}
 800d650:	b083      	sub	sp, #12
 800d652:	af00      	add	r7, sp, #0
 800d654:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d65c:	b2db      	uxtb	r3, r3
 800d65e:	2b04      	cmp	r3, #4
 800d660:	d006      	beq.n	800d670 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d668:	b2da      	uxtb	r2, r3
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2204      	movs	r2, #4
 800d674:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800d678:	2300      	movs	r3, #0
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	370c      	adds	r7, #12
 800d67e:	46bd      	mov	sp, r7
 800d680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d684:	4770      	bx	lr

0800d686 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d686:	b480      	push	{r7}
 800d688:	b083      	sub	sp, #12
 800d68a:	af00      	add	r7, sp, #0
 800d68c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d694:	b2db      	uxtb	r3, r3
 800d696:	2b04      	cmp	r3, #4
 800d698:	d106      	bne.n	800d6a8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800d6a0:	b2da      	uxtb	r2, r3
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800d6a8:	2300      	movs	r3, #0
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	370c      	adds	r7, #12
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b4:	4770      	bx	lr

0800d6b6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d6b6:	b580      	push	{r7, lr}
 800d6b8:	b082      	sub	sp, #8
 800d6ba:	af00      	add	r7, sp, #0
 800d6bc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d6c4:	b2db      	uxtb	r3, r3
 800d6c6:	2b03      	cmp	r3, #3
 800d6c8:	d110      	bne.n	800d6ec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d00b      	beq.n	800d6ec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d6da:	69db      	ldr	r3, [r3, #28]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d005      	beq.n	800d6ec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d6e6:	69db      	ldr	r3, [r3, #28]
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d6ec:	2300      	movs	r3, #0
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3708      	adds	r7, #8
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}

0800d6f6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d6f6:	b580      	push	{r7, lr}
 800d6f8:	b082      	sub	sp, #8
 800d6fa:	af00      	add	r7, sp, #0
 800d6fc:	6078      	str	r0, [r7, #4]
 800d6fe:	460b      	mov	r3, r1
 800d700:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	32ae      	adds	r2, #174	@ 0xae
 800d70c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d101      	bne.n	800d718 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d714:	2303      	movs	r3, #3
 800d716:	e01c      	b.n	800d752 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d71e:	b2db      	uxtb	r3, r3
 800d720:	2b03      	cmp	r3, #3
 800d722:	d115      	bne.n	800d750 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	32ae      	adds	r2, #174	@ 0xae
 800d72e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d732:	6a1b      	ldr	r3, [r3, #32]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d00b      	beq.n	800d750 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	32ae      	adds	r2, #174	@ 0xae
 800d742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d746:	6a1b      	ldr	r3, [r3, #32]
 800d748:	78fa      	ldrb	r2, [r7, #3]
 800d74a:	4611      	mov	r1, r2
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d750:	2300      	movs	r3, #0
}
 800d752:	4618      	mov	r0, r3
 800d754:	3708      	adds	r7, #8
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}

0800d75a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d75a:	b580      	push	{r7, lr}
 800d75c:	b082      	sub	sp, #8
 800d75e:	af00      	add	r7, sp, #0
 800d760:	6078      	str	r0, [r7, #4]
 800d762:	460b      	mov	r3, r1
 800d764:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	32ae      	adds	r2, #174	@ 0xae
 800d770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d101      	bne.n	800d77c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d778:	2303      	movs	r3, #3
 800d77a:	e01c      	b.n	800d7b6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d782:	b2db      	uxtb	r3, r3
 800d784:	2b03      	cmp	r3, #3
 800d786:	d115      	bne.n	800d7b4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	32ae      	adds	r2, #174	@ 0xae
 800d792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d00b      	beq.n	800d7b4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	32ae      	adds	r2, #174	@ 0xae
 800d7a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7ac:	78fa      	ldrb	r2, [r7, #3]
 800d7ae:	4611      	mov	r1, r2
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d7b4:	2300      	movs	r3, #0
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3708      	adds	r7, #8
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}

0800d7be <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d7be:	b480      	push	{r7}
 800d7c0:	b083      	sub	sp, #12
 800d7c2:	af00      	add	r7, sp, #0
 800d7c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d7c6:	2300      	movs	r3, #0
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	370c      	adds	r7, #12
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d2:	4770      	bx	lr

0800d7d4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b084      	sub	sp, #16
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d7dc:	2300      	movs	r3, #0
 800d7de:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2201      	movs	r2, #1
 800d7e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d00e      	beq.n	800d810 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d7f8:	685b      	ldr	r3, [r3, #4]
 800d7fa:	687a      	ldr	r2, [r7, #4]
 800d7fc:	6852      	ldr	r2, [r2, #4]
 800d7fe:	b2d2      	uxtb	r2, r2
 800d800:	4611      	mov	r1, r2
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	4798      	blx	r3
 800d806:	4603      	mov	r3, r0
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d001      	beq.n	800d810 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d80c:	2303      	movs	r3, #3
 800d80e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d810:	7bfb      	ldrb	r3, [r7, #15]
}
 800d812:	4618      	mov	r0, r3
 800d814:	3710      	adds	r7, #16
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}

0800d81a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d81a:	b480      	push	{r7}
 800d81c:	b083      	sub	sp, #12
 800d81e:	af00      	add	r7, sp, #0
 800d820:	6078      	str	r0, [r7, #4]
 800d822:	460b      	mov	r3, r1
 800d824:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d826:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d828:	4618      	mov	r0, r3
 800d82a:	370c      	adds	r7, #12
 800d82c:	46bd      	mov	sp, r7
 800d82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d832:	4770      	bx	lr

0800d834 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d834:	b480      	push	{r7}
 800d836:	b083      	sub	sp, #12
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	460b      	mov	r3, r1
 800d83e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d840:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d842:	4618      	mov	r0, r3
 800d844:	370c      	adds	r7, #12
 800d846:	46bd      	mov	sp, r7
 800d848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84c:	4770      	bx	lr

0800d84e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d84e:	b580      	push	{r7, lr}
 800d850:	b086      	sub	sp, #24
 800d852:	af00      	add	r7, sp, #0
 800d854:	6078      	str	r0, [r7, #4]
 800d856:	460b      	mov	r3, r1
 800d858:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d862:	2300      	movs	r3, #0
 800d864:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	885b      	ldrh	r3, [r3, #2]
 800d86a:	b29b      	uxth	r3, r3
 800d86c:	68fa      	ldr	r2, [r7, #12]
 800d86e:	7812      	ldrb	r2, [r2, #0]
 800d870:	4293      	cmp	r3, r2
 800d872:	d91f      	bls.n	800d8b4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d87a:	e013      	b.n	800d8a4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d87c:	f107 030a 	add.w	r3, r7, #10
 800d880:	4619      	mov	r1, r3
 800d882:	6978      	ldr	r0, [r7, #20]
 800d884:	f000 f81b 	bl	800d8be <USBD_GetNextDesc>
 800d888:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	785b      	ldrb	r3, [r3, #1]
 800d88e:	2b05      	cmp	r3, #5
 800d890:	d108      	bne.n	800d8a4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	789b      	ldrb	r3, [r3, #2]
 800d89a:	78fa      	ldrb	r2, [r7, #3]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d008      	beq.n	800d8b2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	885b      	ldrh	r3, [r3, #2]
 800d8a8:	b29a      	uxth	r2, r3
 800d8aa:	897b      	ldrh	r3, [r7, #10]
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d8e5      	bhi.n	800d87c <USBD_GetEpDesc+0x2e>
 800d8b0:	e000      	b.n	800d8b4 <USBD_GetEpDesc+0x66>
          break;
 800d8b2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d8b4:	693b      	ldr	r3, [r7, #16]
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3718      	adds	r7, #24
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}

0800d8be <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d8be:	b480      	push	{r7}
 800d8c0:	b085      	sub	sp, #20
 800d8c2:	af00      	add	r7, sp, #0
 800d8c4:	6078      	str	r0, [r7, #4]
 800d8c6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	881b      	ldrh	r3, [r3, #0]
 800d8d0:	68fa      	ldr	r2, [r7, #12]
 800d8d2:	7812      	ldrb	r2, [r2, #0]
 800d8d4:	4413      	add	r3, r2
 800d8d6:	b29a      	uxth	r2, r3
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	781b      	ldrb	r3, [r3, #0]
 800d8e0:	461a      	mov	r2, r3
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	4413      	add	r3, r2
 800d8e6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d8e8:	68fb      	ldr	r3, [r7, #12]
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3714      	adds	r7, #20
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f4:	4770      	bx	lr

0800d8f6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d8f6:	b480      	push	{r7}
 800d8f8:	b087      	sub	sp, #28
 800d8fa:	af00      	add	r7, sp, #0
 800d8fc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	781b      	ldrb	r3, [r3, #0]
 800d906:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	3301      	adds	r3, #1
 800d90c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	781b      	ldrb	r3, [r3, #0]
 800d912:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d914:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d918:	021b      	lsls	r3, r3, #8
 800d91a:	b21a      	sxth	r2, r3
 800d91c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d920:	4313      	orrs	r3, r2
 800d922:	b21b      	sxth	r3, r3
 800d924:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d926:	89fb      	ldrh	r3, [r7, #14]
}
 800d928:	4618      	mov	r0, r3
 800d92a:	371c      	adds	r7, #28
 800d92c:	46bd      	mov	sp, r7
 800d92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d932:	4770      	bx	lr

0800d934 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b084      	sub	sp, #16
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d93e:	2300      	movs	r3, #0
 800d940:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d94a:	2b40      	cmp	r3, #64	@ 0x40
 800d94c:	d005      	beq.n	800d95a <USBD_StdDevReq+0x26>
 800d94e:	2b40      	cmp	r3, #64	@ 0x40
 800d950:	d857      	bhi.n	800da02 <USBD_StdDevReq+0xce>
 800d952:	2b00      	cmp	r3, #0
 800d954:	d00f      	beq.n	800d976 <USBD_StdDevReq+0x42>
 800d956:	2b20      	cmp	r3, #32
 800d958:	d153      	bne.n	800da02 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	32ae      	adds	r2, #174	@ 0xae
 800d964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d968:	689b      	ldr	r3, [r3, #8]
 800d96a:	6839      	ldr	r1, [r7, #0]
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	4798      	blx	r3
 800d970:	4603      	mov	r3, r0
 800d972:	73fb      	strb	r3, [r7, #15]
      break;
 800d974:	e04a      	b.n	800da0c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	785b      	ldrb	r3, [r3, #1]
 800d97a:	2b09      	cmp	r3, #9
 800d97c:	d83b      	bhi.n	800d9f6 <USBD_StdDevReq+0xc2>
 800d97e:	a201      	add	r2, pc, #4	@ (adr r2, 800d984 <USBD_StdDevReq+0x50>)
 800d980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d984:	0800d9d9 	.word	0x0800d9d9
 800d988:	0800d9ed 	.word	0x0800d9ed
 800d98c:	0800d9f7 	.word	0x0800d9f7
 800d990:	0800d9e3 	.word	0x0800d9e3
 800d994:	0800d9f7 	.word	0x0800d9f7
 800d998:	0800d9b7 	.word	0x0800d9b7
 800d99c:	0800d9ad 	.word	0x0800d9ad
 800d9a0:	0800d9f7 	.word	0x0800d9f7
 800d9a4:	0800d9cf 	.word	0x0800d9cf
 800d9a8:	0800d9c1 	.word	0x0800d9c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d9ac:	6839      	ldr	r1, [r7, #0]
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f000 fa3c 	bl	800de2c <USBD_GetDescriptor>
          break;
 800d9b4:	e024      	b.n	800da00 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d9b6:	6839      	ldr	r1, [r7, #0]
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f000 fbcb 	bl	800e154 <USBD_SetAddress>
          break;
 800d9be:	e01f      	b.n	800da00 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d9c0:	6839      	ldr	r1, [r7, #0]
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f000 fc0a 	bl	800e1dc <USBD_SetConfig>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	73fb      	strb	r3, [r7, #15]
          break;
 800d9cc:	e018      	b.n	800da00 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d9ce:	6839      	ldr	r1, [r7, #0]
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f000 fcad 	bl	800e330 <USBD_GetConfig>
          break;
 800d9d6:	e013      	b.n	800da00 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d9d8:	6839      	ldr	r1, [r7, #0]
 800d9da:	6878      	ldr	r0, [r7, #4]
 800d9dc:	f000 fcde 	bl	800e39c <USBD_GetStatus>
          break;
 800d9e0:	e00e      	b.n	800da00 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d9e2:	6839      	ldr	r1, [r7, #0]
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f000 fd0d 	bl	800e404 <USBD_SetFeature>
          break;
 800d9ea:	e009      	b.n	800da00 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d9ec:	6839      	ldr	r1, [r7, #0]
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f000 fd31 	bl	800e456 <USBD_ClrFeature>
          break;
 800d9f4:	e004      	b.n	800da00 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d9f6:	6839      	ldr	r1, [r7, #0]
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f000 fd88 	bl	800e50e <USBD_CtlError>
          break;
 800d9fe:	bf00      	nop
      }
      break;
 800da00:	e004      	b.n	800da0c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800da02:	6839      	ldr	r1, [r7, #0]
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f000 fd82 	bl	800e50e <USBD_CtlError>
      break;
 800da0a:	bf00      	nop
  }

  return ret;
 800da0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da0e:	4618      	mov	r0, r3
 800da10:	3710      	adds	r7, #16
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}
 800da16:	bf00      	nop

0800da18 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800da22:	2300      	movs	r3, #0
 800da24:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	781b      	ldrb	r3, [r3, #0]
 800da2a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800da2e:	2b40      	cmp	r3, #64	@ 0x40
 800da30:	d005      	beq.n	800da3e <USBD_StdItfReq+0x26>
 800da32:	2b40      	cmp	r3, #64	@ 0x40
 800da34:	d852      	bhi.n	800dadc <USBD_StdItfReq+0xc4>
 800da36:	2b00      	cmp	r3, #0
 800da38:	d001      	beq.n	800da3e <USBD_StdItfReq+0x26>
 800da3a:	2b20      	cmp	r3, #32
 800da3c:	d14e      	bne.n	800dadc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da44:	b2db      	uxtb	r3, r3
 800da46:	3b01      	subs	r3, #1
 800da48:	2b02      	cmp	r3, #2
 800da4a:	d840      	bhi.n	800dace <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	889b      	ldrh	r3, [r3, #4]
 800da50:	b2db      	uxtb	r3, r3
 800da52:	2b01      	cmp	r3, #1
 800da54:	d836      	bhi.n	800dac4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	889b      	ldrh	r3, [r3, #4]
 800da5a:	b2db      	uxtb	r3, r3
 800da5c:	4619      	mov	r1, r3
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f7ff fedb 	bl	800d81a <USBD_CoreFindIF>
 800da64:	4603      	mov	r3, r0
 800da66:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800da68:	7bbb      	ldrb	r3, [r7, #14]
 800da6a:	2bff      	cmp	r3, #255	@ 0xff
 800da6c:	d01d      	beq.n	800daaa <USBD_StdItfReq+0x92>
 800da6e:	7bbb      	ldrb	r3, [r7, #14]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d11a      	bne.n	800daaa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800da74:	7bba      	ldrb	r2, [r7, #14]
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	32ae      	adds	r2, #174	@ 0xae
 800da7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da7e:	689b      	ldr	r3, [r3, #8]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d00f      	beq.n	800daa4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800da84:	7bba      	ldrb	r2, [r7, #14]
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800da8c:	7bba      	ldrb	r2, [r7, #14]
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	32ae      	adds	r2, #174	@ 0xae
 800da92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da96:	689b      	ldr	r3, [r3, #8]
 800da98:	6839      	ldr	r1, [r7, #0]
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	4798      	blx	r3
 800da9e:	4603      	mov	r3, r0
 800daa0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800daa2:	e004      	b.n	800daae <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800daa4:	2303      	movs	r3, #3
 800daa6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800daa8:	e001      	b.n	800daae <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800daaa:	2303      	movs	r3, #3
 800daac:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	88db      	ldrh	r3, [r3, #6]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d110      	bne.n	800dad8 <USBD_StdItfReq+0xc0>
 800dab6:	7bfb      	ldrb	r3, [r7, #15]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d10d      	bne.n	800dad8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f000 fdfd 	bl	800e6bc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dac2:	e009      	b.n	800dad8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800dac4:	6839      	ldr	r1, [r7, #0]
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f000 fd21 	bl	800e50e <USBD_CtlError>
          break;
 800dacc:	e004      	b.n	800dad8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800dace:	6839      	ldr	r1, [r7, #0]
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f000 fd1c 	bl	800e50e <USBD_CtlError>
          break;
 800dad6:	e000      	b.n	800dada <USBD_StdItfReq+0xc2>
          break;
 800dad8:	bf00      	nop
      }
      break;
 800dada:	e004      	b.n	800dae6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800dadc:	6839      	ldr	r1, [r7, #0]
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	f000 fd15 	bl	800e50e <USBD_CtlError>
      break;
 800dae4:	bf00      	nop
  }

  return ret;
 800dae6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dae8:	4618      	mov	r0, r3
 800daea:	3710      	adds	r7, #16
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}

0800daf0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b084      	sub	sp, #16
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800dafa:	2300      	movs	r3, #0
 800dafc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	889b      	ldrh	r3, [r3, #4]
 800db02:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800db0c:	2b40      	cmp	r3, #64	@ 0x40
 800db0e:	d007      	beq.n	800db20 <USBD_StdEPReq+0x30>
 800db10:	2b40      	cmp	r3, #64	@ 0x40
 800db12:	f200 817f 	bhi.w	800de14 <USBD_StdEPReq+0x324>
 800db16:	2b00      	cmp	r3, #0
 800db18:	d02a      	beq.n	800db70 <USBD_StdEPReq+0x80>
 800db1a:	2b20      	cmp	r3, #32
 800db1c:	f040 817a 	bne.w	800de14 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800db20:	7bbb      	ldrb	r3, [r7, #14]
 800db22:	4619      	mov	r1, r3
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f7ff fe85 	bl	800d834 <USBD_CoreFindEP>
 800db2a:	4603      	mov	r3, r0
 800db2c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800db2e:	7b7b      	ldrb	r3, [r7, #13]
 800db30:	2bff      	cmp	r3, #255	@ 0xff
 800db32:	f000 8174 	beq.w	800de1e <USBD_StdEPReq+0x32e>
 800db36:	7b7b      	ldrb	r3, [r7, #13]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	f040 8170 	bne.w	800de1e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800db3e:	7b7a      	ldrb	r2, [r7, #13]
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800db46:	7b7a      	ldrb	r2, [r7, #13]
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	32ae      	adds	r2, #174	@ 0xae
 800db4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db50:	689b      	ldr	r3, [r3, #8]
 800db52:	2b00      	cmp	r3, #0
 800db54:	f000 8163 	beq.w	800de1e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800db58:	7b7a      	ldrb	r2, [r7, #13]
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	32ae      	adds	r2, #174	@ 0xae
 800db5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db62:	689b      	ldr	r3, [r3, #8]
 800db64:	6839      	ldr	r1, [r7, #0]
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	4798      	blx	r3
 800db6a:	4603      	mov	r3, r0
 800db6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800db6e:	e156      	b.n	800de1e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	785b      	ldrb	r3, [r3, #1]
 800db74:	2b03      	cmp	r3, #3
 800db76:	d008      	beq.n	800db8a <USBD_StdEPReq+0x9a>
 800db78:	2b03      	cmp	r3, #3
 800db7a:	f300 8145 	bgt.w	800de08 <USBD_StdEPReq+0x318>
 800db7e:	2b00      	cmp	r3, #0
 800db80:	f000 809b 	beq.w	800dcba <USBD_StdEPReq+0x1ca>
 800db84:	2b01      	cmp	r3, #1
 800db86:	d03c      	beq.n	800dc02 <USBD_StdEPReq+0x112>
 800db88:	e13e      	b.n	800de08 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db90:	b2db      	uxtb	r3, r3
 800db92:	2b02      	cmp	r3, #2
 800db94:	d002      	beq.n	800db9c <USBD_StdEPReq+0xac>
 800db96:	2b03      	cmp	r3, #3
 800db98:	d016      	beq.n	800dbc8 <USBD_StdEPReq+0xd8>
 800db9a:	e02c      	b.n	800dbf6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800db9c:	7bbb      	ldrb	r3, [r7, #14]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d00d      	beq.n	800dbbe <USBD_StdEPReq+0xce>
 800dba2:	7bbb      	ldrb	r3, [r7, #14]
 800dba4:	2b80      	cmp	r3, #128	@ 0x80
 800dba6:	d00a      	beq.n	800dbbe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dba8:	7bbb      	ldrb	r3, [r7, #14]
 800dbaa:	4619      	mov	r1, r3
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f001 fa33 	bl	800f018 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dbb2:	2180      	movs	r1, #128	@ 0x80
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f001 fa2f 	bl	800f018 <USBD_LL_StallEP>
 800dbba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dbbc:	e020      	b.n	800dc00 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800dbbe:	6839      	ldr	r1, [r7, #0]
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f000 fca4 	bl	800e50e <USBD_CtlError>
              break;
 800dbc6:	e01b      	b.n	800dc00 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	885b      	ldrh	r3, [r3, #2]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d10e      	bne.n	800dbee <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dbd0:	7bbb      	ldrb	r3, [r7, #14]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d00b      	beq.n	800dbee <USBD_StdEPReq+0xfe>
 800dbd6:	7bbb      	ldrb	r3, [r7, #14]
 800dbd8:	2b80      	cmp	r3, #128	@ 0x80
 800dbda:	d008      	beq.n	800dbee <USBD_StdEPReq+0xfe>
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	88db      	ldrh	r3, [r3, #6]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d104      	bne.n	800dbee <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800dbe4:	7bbb      	ldrb	r3, [r7, #14]
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f001 fa15 	bl	800f018 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f000 fd64 	bl	800e6bc <USBD_CtlSendStatus>

              break;
 800dbf4:	e004      	b.n	800dc00 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800dbf6:	6839      	ldr	r1, [r7, #0]
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f000 fc88 	bl	800e50e <USBD_CtlError>
              break;
 800dbfe:	bf00      	nop
          }
          break;
 800dc00:	e107      	b.n	800de12 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc08:	b2db      	uxtb	r3, r3
 800dc0a:	2b02      	cmp	r3, #2
 800dc0c:	d002      	beq.n	800dc14 <USBD_StdEPReq+0x124>
 800dc0e:	2b03      	cmp	r3, #3
 800dc10:	d016      	beq.n	800dc40 <USBD_StdEPReq+0x150>
 800dc12:	e04b      	b.n	800dcac <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dc14:	7bbb      	ldrb	r3, [r7, #14]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d00d      	beq.n	800dc36 <USBD_StdEPReq+0x146>
 800dc1a:	7bbb      	ldrb	r3, [r7, #14]
 800dc1c:	2b80      	cmp	r3, #128	@ 0x80
 800dc1e:	d00a      	beq.n	800dc36 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dc20:	7bbb      	ldrb	r3, [r7, #14]
 800dc22:	4619      	mov	r1, r3
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f001 f9f7 	bl	800f018 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dc2a:	2180      	movs	r1, #128	@ 0x80
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f001 f9f3 	bl	800f018 <USBD_LL_StallEP>
 800dc32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dc34:	e040      	b.n	800dcb8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800dc36:	6839      	ldr	r1, [r7, #0]
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f000 fc68 	bl	800e50e <USBD_CtlError>
              break;
 800dc3e:	e03b      	b.n	800dcb8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	885b      	ldrh	r3, [r3, #2]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d136      	bne.n	800dcb6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800dc48:	7bbb      	ldrb	r3, [r7, #14]
 800dc4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d004      	beq.n	800dc5c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800dc52:	7bbb      	ldrb	r3, [r7, #14]
 800dc54:	4619      	mov	r1, r3
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f001 f9fd 	bl	800f056 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f000 fd2d 	bl	800e6bc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800dc62:	7bbb      	ldrb	r3, [r7, #14]
 800dc64:	4619      	mov	r1, r3
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f7ff fde4 	bl	800d834 <USBD_CoreFindEP>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dc70:	7b7b      	ldrb	r3, [r7, #13]
 800dc72:	2bff      	cmp	r3, #255	@ 0xff
 800dc74:	d01f      	beq.n	800dcb6 <USBD_StdEPReq+0x1c6>
 800dc76:	7b7b      	ldrb	r3, [r7, #13]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d11c      	bne.n	800dcb6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800dc7c:	7b7a      	ldrb	r2, [r7, #13]
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800dc84:	7b7a      	ldrb	r2, [r7, #13]
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	32ae      	adds	r2, #174	@ 0xae
 800dc8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc8e:	689b      	ldr	r3, [r3, #8]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d010      	beq.n	800dcb6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dc94:	7b7a      	ldrb	r2, [r7, #13]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	32ae      	adds	r2, #174	@ 0xae
 800dc9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc9e:	689b      	ldr	r3, [r3, #8]
 800dca0:	6839      	ldr	r1, [r7, #0]
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	4798      	blx	r3
 800dca6:	4603      	mov	r3, r0
 800dca8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800dcaa:	e004      	b.n	800dcb6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800dcac:	6839      	ldr	r1, [r7, #0]
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f000 fc2d 	bl	800e50e <USBD_CtlError>
              break;
 800dcb4:	e000      	b.n	800dcb8 <USBD_StdEPReq+0x1c8>
              break;
 800dcb6:	bf00      	nop
          }
          break;
 800dcb8:	e0ab      	b.n	800de12 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dcc0:	b2db      	uxtb	r3, r3
 800dcc2:	2b02      	cmp	r3, #2
 800dcc4:	d002      	beq.n	800dccc <USBD_StdEPReq+0x1dc>
 800dcc6:	2b03      	cmp	r3, #3
 800dcc8:	d032      	beq.n	800dd30 <USBD_StdEPReq+0x240>
 800dcca:	e097      	b.n	800ddfc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dccc:	7bbb      	ldrb	r3, [r7, #14]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d007      	beq.n	800dce2 <USBD_StdEPReq+0x1f2>
 800dcd2:	7bbb      	ldrb	r3, [r7, #14]
 800dcd4:	2b80      	cmp	r3, #128	@ 0x80
 800dcd6:	d004      	beq.n	800dce2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800dcd8:	6839      	ldr	r1, [r7, #0]
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f000 fc17 	bl	800e50e <USBD_CtlError>
                break;
 800dce0:	e091      	b.n	800de06 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dce2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	da0b      	bge.n	800dd02 <USBD_StdEPReq+0x212>
 800dcea:	7bbb      	ldrb	r3, [r7, #14]
 800dcec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dcf0:	4613      	mov	r3, r2
 800dcf2:	009b      	lsls	r3, r3, #2
 800dcf4:	4413      	add	r3, r2
 800dcf6:	009b      	lsls	r3, r3, #2
 800dcf8:	3310      	adds	r3, #16
 800dcfa:	687a      	ldr	r2, [r7, #4]
 800dcfc:	4413      	add	r3, r2
 800dcfe:	3304      	adds	r3, #4
 800dd00:	e00b      	b.n	800dd1a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dd02:	7bbb      	ldrb	r3, [r7, #14]
 800dd04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dd08:	4613      	mov	r3, r2
 800dd0a:	009b      	lsls	r3, r3, #2
 800dd0c:	4413      	add	r3, r2
 800dd0e:	009b      	lsls	r3, r3, #2
 800dd10:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800dd14:	687a      	ldr	r2, [r7, #4]
 800dd16:	4413      	add	r3, r2
 800dd18:	3304      	adds	r3, #4
 800dd1a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	2202      	movs	r2, #2
 800dd26:	4619      	mov	r1, r3
 800dd28:	6878      	ldr	r0, [r7, #4]
 800dd2a:	f000 fc6d 	bl	800e608 <USBD_CtlSendData>
              break;
 800dd2e:	e06a      	b.n	800de06 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800dd30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	da11      	bge.n	800dd5c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dd38:	7bbb      	ldrb	r3, [r7, #14]
 800dd3a:	f003 020f 	and.w	r2, r3, #15
 800dd3e:	6879      	ldr	r1, [r7, #4]
 800dd40:	4613      	mov	r3, r2
 800dd42:	009b      	lsls	r3, r3, #2
 800dd44:	4413      	add	r3, r2
 800dd46:	009b      	lsls	r3, r3, #2
 800dd48:	440b      	add	r3, r1
 800dd4a:	3324      	adds	r3, #36	@ 0x24
 800dd4c:	881b      	ldrh	r3, [r3, #0]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d117      	bne.n	800dd82 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800dd52:	6839      	ldr	r1, [r7, #0]
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f000 fbda 	bl	800e50e <USBD_CtlError>
                  break;
 800dd5a:	e054      	b.n	800de06 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800dd5c:	7bbb      	ldrb	r3, [r7, #14]
 800dd5e:	f003 020f 	and.w	r2, r3, #15
 800dd62:	6879      	ldr	r1, [r7, #4]
 800dd64:	4613      	mov	r3, r2
 800dd66:	009b      	lsls	r3, r3, #2
 800dd68:	4413      	add	r3, r2
 800dd6a:	009b      	lsls	r3, r3, #2
 800dd6c:	440b      	add	r3, r1
 800dd6e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dd72:	881b      	ldrh	r3, [r3, #0]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d104      	bne.n	800dd82 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800dd78:	6839      	ldr	r1, [r7, #0]
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f000 fbc7 	bl	800e50e <USBD_CtlError>
                  break;
 800dd80:	e041      	b.n	800de06 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dd82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	da0b      	bge.n	800dda2 <USBD_StdEPReq+0x2b2>
 800dd8a:	7bbb      	ldrb	r3, [r7, #14]
 800dd8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dd90:	4613      	mov	r3, r2
 800dd92:	009b      	lsls	r3, r3, #2
 800dd94:	4413      	add	r3, r2
 800dd96:	009b      	lsls	r3, r3, #2
 800dd98:	3310      	adds	r3, #16
 800dd9a:	687a      	ldr	r2, [r7, #4]
 800dd9c:	4413      	add	r3, r2
 800dd9e:	3304      	adds	r3, #4
 800dda0:	e00b      	b.n	800ddba <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dda2:	7bbb      	ldrb	r3, [r7, #14]
 800dda4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dda8:	4613      	mov	r3, r2
 800ddaa:	009b      	lsls	r3, r3, #2
 800ddac:	4413      	add	r3, r2
 800ddae:	009b      	lsls	r3, r3, #2
 800ddb0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ddb4:	687a      	ldr	r2, [r7, #4]
 800ddb6:	4413      	add	r3, r2
 800ddb8:	3304      	adds	r3, #4
 800ddba:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ddbc:	7bbb      	ldrb	r3, [r7, #14]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d002      	beq.n	800ddc8 <USBD_StdEPReq+0x2d8>
 800ddc2:	7bbb      	ldrb	r3, [r7, #14]
 800ddc4:	2b80      	cmp	r3, #128	@ 0x80
 800ddc6:	d103      	bne.n	800ddd0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	601a      	str	r2, [r3, #0]
 800ddce:	e00e      	b.n	800ddee <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ddd0:	7bbb      	ldrb	r3, [r7, #14]
 800ddd2:	4619      	mov	r1, r3
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f001 f95d 	bl	800f094 <USBD_LL_IsStallEP>
 800ddda:	4603      	mov	r3, r0
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d003      	beq.n	800dde8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	2201      	movs	r2, #1
 800dde4:	601a      	str	r2, [r3, #0]
 800dde6:	e002      	b.n	800ddee <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	2200      	movs	r2, #0
 800ddec:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	2202      	movs	r2, #2
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f000 fc07 	bl	800e608 <USBD_CtlSendData>
              break;
 800ddfa:	e004      	b.n	800de06 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ddfc:	6839      	ldr	r1, [r7, #0]
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f000 fb85 	bl	800e50e <USBD_CtlError>
              break;
 800de04:	bf00      	nop
          }
          break;
 800de06:	e004      	b.n	800de12 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800de08:	6839      	ldr	r1, [r7, #0]
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f000 fb7f 	bl	800e50e <USBD_CtlError>
          break;
 800de10:	bf00      	nop
      }
      break;
 800de12:	e005      	b.n	800de20 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800de14:	6839      	ldr	r1, [r7, #0]
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f000 fb79 	bl	800e50e <USBD_CtlError>
      break;
 800de1c:	e000      	b.n	800de20 <USBD_StdEPReq+0x330>
      break;
 800de1e:	bf00      	nop
  }

  return ret;
 800de20:	7bfb      	ldrb	r3, [r7, #15]
}
 800de22:	4618      	mov	r0, r3
 800de24:	3710      	adds	r7, #16
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}
	...

0800de2c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b084      	sub	sp, #16
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
 800de34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800de36:	2300      	movs	r3, #0
 800de38:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800de3a:	2300      	movs	r3, #0
 800de3c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800de3e:	2300      	movs	r3, #0
 800de40:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	885b      	ldrh	r3, [r3, #2]
 800de46:	0a1b      	lsrs	r3, r3, #8
 800de48:	b29b      	uxth	r3, r3
 800de4a:	3b01      	subs	r3, #1
 800de4c:	2b0e      	cmp	r3, #14
 800de4e:	f200 8152 	bhi.w	800e0f6 <USBD_GetDescriptor+0x2ca>
 800de52:	a201      	add	r2, pc, #4	@ (adr r2, 800de58 <USBD_GetDescriptor+0x2c>)
 800de54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de58:	0800dec9 	.word	0x0800dec9
 800de5c:	0800dee1 	.word	0x0800dee1
 800de60:	0800df21 	.word	0x0800df21
 800de64:	0800e0f7 	.word	0x0800e0f7
 800de68:	0800e0f7 	.word	0x0800e0f7
 800de6c:	0800e097 	.word	0x0800e097
 800de70:	0800e0c3 	.word	0x0800e0c3
 800de74:	0800e0f7 	.word	0x0800e0f7
 800de78:	0800e0f7 	.word	0x0800e0f7
 800de7c:	0800e0f7 	.word	0x0800e0f7
 800de80:	0800e0f7 	.word	0x0800e0f7
 800de84:	0800e0f7 	.word	0x0800e0f7
 800de88:	0800e0f7 	.word	0x0800e0f7
 800de8c:	0800e0f7 	.word	0x0800e0f7
 800de90:	0800de95 	.word	0x0800de95
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de9a:	69db      	ldr	r3, [r3, #28]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d00b      	beq.n	800deb8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dea6:	69db      	ldr	r3, [r3, #28]
 800dea8:	687a      	ldr	r2, [r7, #4]
 800deaa:	7c12      	ldrb	r2, [r2, #16]
 800deac:	f107 0108 	add.w	r1, r7, #8
 800deb0:	4610      	mov	r0, r2
 800deb2:	4798      	blx	r3
 800deb4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800deb6:	e126      	b.n	800e106 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800deb8:	6839      	ldr	r1, [r7, #0]
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f000 fb27 	bl	800e50e <USBD_CtlError>
        err++;
 800dec0:	7afb      	ldrb	r3, [r7, #11]
 800dec2:	3301      	adds	r3, #1
 800dec4:	72fb      	strb	r3, [r7, #11]
      break;
 800dec6:	e11e      	b.n	800e106 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	687a      	ldr	r2, [r7, #4]
 800ded2:	7c12      	ldrb	r2, [r2, #16]
 800ded4:	f107 0108 	add.w	r1, r7, #8
 800ded8:	4610      	mov	r0, r2
 800deda:	4798      	blx	r3
 800dedc:	60f8      	str	r0, [r7, #12]
      break;
 800dede:	e112      	b.n	800e106 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	7c1b      	ldrb	r3, [r3, #16]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d10d      	bne.n	800df04 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800deee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800def0:	f107 0208 	add.w	r2, r7, #8
 800def4:	4610      	mov	r0, r2
 800def6:	4798      	blx	r3
 800def8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	3301      	adds	r3, #1
 800defe:	2202      	movs	r2, #2
 800df00:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800df02:	e100      	b.n	800e106 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df0c:	f107 0208 	add.w	r2, r7, #8
 800df10:	4610      	mov	r0, r2
 800df12:	4798      	blx	r3
 800df14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	3301      	adds	r3, #1
 800df1a:	2202      	movs	r2, #2
 800df1c:	701a      	strb	r2, [r3, #0]
      break;
 800df1e:	e0f2      	b.n	800e106 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	885b      	ldrh	r3, [r3, #2]
 800df24:	b2db      	uxtb	r3, r3
 800df26:	2b05      	cmp	r3, #5
 800df28:	f200 80ac 	bhi.w	800e084 <USBD_GetDescriptor+0x258>
 800df2c:	a201      	add	r2, pc, #4	@ (adr r2, 800df34 <USBD_GetDescriptor+0x108>)
 800df2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df32:	bf00      	nop
 800df34:	0800df4d 	.word	0x0800df4d
 800df38:	0800df81 	.word	0x0800df81
 800df3c:	0800dfb5 	.word	0x0800dfb5
 800df40:	0800dfe9 	.word	0x0800dfe9
 800df44:	0800e01d 	.word	0x0800e01d
 800df48:	0800e051 	.word	0x0800e051
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d00b      	beq.n	800df70 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800df5e:	685b      	ldr	r3, [r3, #4]
 800df60:	687a      	ldr	r2, [r7, #4]
 800df62:	7c12      	ldrb	r2, [r2, #16]
 800df64:	f107 0108 	add.w	r1, r7, #8
 800df68:	4610      	mov	r0, r2
 800df6a:	4798      	blx	r3
 800df6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800df6e:	e091      	b.n	800e094 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800df70:	6839      	ldr	r1, [r7, #0]
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f000 facb 	bl	800e50e <USBD_CtlError>
            err++;
 800df78:	7afb      	ldrb	r3, [r7, #11]
 800df7a:	3301      	adds	r3, #1
 800df7c:	72fb      	strb	r3, [r7, #11]
          break;
 800df7e:	e089      	b.n	800e094 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800df86:	689b      	ldr	r3, [r3, #8]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d00b      	beq.n	800dfa4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800df92:	689b      	ldr	r3, [r3, #8]
 800df94:	687a      	ldr	r2, [r7, #4]
 800df96:	7c12      	ldrb	r2, [r2, #16]
 800df98:	f107 0108 	add.w	r1, r7, #8
 800df9c:	4610      	mov	r0, r2
 800df9e:	4798      	blx	r3
 800dfa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dfa2:	e077      	b.n	800e094 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dfa4:	6839      	ldr	r1, [r7, #0]
 800dfa6:	6878      	ldr	r0, [r7, #4]
 800dfa8:	f000 fab1 	bl	800e50e <USBD_CtlError>
            err++;
 800dfac:	7afb      	ldrb	r3, [r7, #11]
 800dfae:	3301      	adds	r3, #1
 800dfb0:	72fb      	strb	r3, [r7, #11]
          break;
 800dfb2:	e06f      	b.n	800e094 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dfba:	68db      	ldr	r3, [r3, #12]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d00b      	beq.n	800dfd8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dfc6:	68db      	ldr	r3, [r3, #12]
 800dfc8:	687a      	ldr	r2, [r7, #4]
 800dfca:	7c12      	ldrb	r2, [r2, #16]
 800dfcc:	f107 0108 	add.w	r1, r7, #8
 800dfd0:	4610      	mov	r0, r2
 800dfd2:	4798      	blx	r3
 800dfd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dfd6:	e05d      	b.n	800e094 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dfd8:	6839      	ldr	r1, [r7, #0]
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f000 fa97 	bl	800e50e <USBD_CtlError>
            err++;
 800dfe0:	7afb      	ldrb	r3, [r7, #11]
 800dfe2:	3301      	adds	r3, #1
 800dfe4:	72fb      	strb	r3, [r7, #11]
          break;
 800dfe6:	e055      	b.n	800e094 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dfee:	691b      	ldr	r3, [r3, #16]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d00b      	beq.n	800e00c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dffa:	691b      	ldr	r3, [r3, #16]
 800dffc:	687a      	ldr	r2, [r7, #4]
 800dffe:	7c12      	ldrb	r2, [r2, #16]
 800e000:	f107 0108 	add.w	r1, r7, #8
 800e004:	4610      	mov	r0, r2
 800e006:	4798      	blx	r3
 800e008:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e00a:	e043      	b.n	800e094 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e00c:	6839      	ldr	r1, [r7, #0]
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f000 fa7d 	bl	800e50e <USBD_CtlError>
            err++;
 800e014:	7afb      	ldrb	r3, [r7, #11]
 800e016:	3301      	adds	r3, #1
 800e018:	72fb      	strb	r3, [r7, #11]
          break;
 800e01a:	e03b      	b.n	800e094 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e022:	695b      	ldr	r3, [r3, #20]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d00b      	beq.n	800e040 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e02e:	695b      	ldr	r3, [r3, #20]
 800e030:	687a      	ldr	r2, [r7, #4]
 800e032:	7c12      	ldrb	r2, [r2, #16]
 800e034:	f107 0108 	add.w	r1, r7, #8
 800e038:	4610      	mov	r0, r2
 800e03a:	4798      	blx	r3
 800e03c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e03e:	e029      	b.n	800e094 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e040:	6839      	ldr	r1, [r7, #0]
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f000 fa63 	bl	800e50e <USBD_CtlError>
            err++;
 800e048:	7afb      	ldrb	r3, [r7, #11]
 800e04a:	3301      	adds	r3, #1
 800e04c:	72fb      	strb	r3, [r7, #11]
          break;
 800e04e:	e021      	b.n	800e094 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e056:	699b      	ldr	r3, [r3, #24]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d00b      	beq.n	800e074 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e062:	699b      	ldr	r3, [r3, #24]
 800e064:	687a      	ldr	r2, [r7, #4]
 800e066:	7c12      	ldrb	r2, [r2, #16]
 800e068:	f107 0108 	add.w	r1, r7, #8
 800e06c:	4610      	mov	r0, r2
 800e06e:	4798      	blx	r3
 800e070:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e072:	e00f      	b.n	800e094 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e074:	6839      	ldr	r1, [r7, #0]
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f000 fa49 	bl	800e50e <USBD_CtlError>
            err++;
 800e07c:	7afb      	ldrb	r3, [r7, #11]
 800e07e:	3301      	adds	r3, #1
 800e080:	72fb      	strb	r3, [r7, #11]
          break;
 800e082:	e007      	b.n	800e094 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e084:	6839      	ldr	r1, [r7, #0]
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f000 fa41 	bl	800e50e <USBD_CtlError>
          err++;
 800e08c:	7afb      	ldrb	r3, [r7, #11]
 800e08e:	3301      	adds	r3, #1
 800e090:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e092:	bf00      	nop
      }
      break;
 800e094:	e037      	b.n	800e106 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	7c1b      	ldrb	r3, [r3, #16]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d109      	bne.n	800e0b2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e0a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0a6:	f107 0208 	add.w	r2, r7, #8
 800e0aa:	4610      	mov	r0, r2
 800e0ac:	4798      	blx	r3
 800e0ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e0b0:	e029      	b.n	800e106 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e0b2:	6839      	ldr	r1, [r7, #0]
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f000 fa2a 	bl	800e50e <USBD_CtlError>
        err++;
 800e0ba:	7afb      	ldrb	r3, [r7, #11]
 800e0bc:	3301      	adds	r3, #1
 800e0be:	72fb      	strb	r3, [r7, #11]
      break;
 800e0c0:	e021      	b.n	800e106 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	7c1b      	ldrb	r3, [r3, #16]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d10d      	bne.n	800e0e6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e0d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0d2:	f107 0208 	add.w	r2, r7, #8
 800e0d6:	4610      	mov	r0, r2
 800e0d8:	4798      	blx	r3
 800e0da:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	3301      	adds	r3, #1
 800e0e0:	2207      	movs	r2, #7
 800e0e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e0e4:	e00f      	b.n	800e106 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e0e6:	6839      	ldr	r1, [r7, #0]
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f000 fa10 	bl	800e50e <USBD_CtlError>
        err++;
 800e0ee:	7afb      	ldrb	r3, [r7, #11]
 800e0f0:	3301      	adds	r3, #1
 800e0f2:	72fb      	strb	r3, [r7, #11]
      break;
 800e0f4:	e007      	b.n	800e106 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e0f6:	6839      	ldr	r1, [r7, #0]
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f000 fa08 	bl	800e50e <USBD_CtlError>
      err++;
 800e0fe:	7afb      	ldrb	r3, [r7, #11]
 800e100:	3301      	adds	r3, #1
 800e102:	72fb      	strb	r3, [r7, #11]
      break;
 800e104:	bf00      	nop
  }

  if (err != 0U)
 800e106:	7afb      	ldrb	r3, [r7, #11]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d11e      	bne.n	800e14a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	88db      	ldrh	r3, [r3, #6]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d016      	beq.n	800e142 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e114:	893b      	ldrh	r3, [r7, #8]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d00e      	beq.n	800e138 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	88da      	ldrh	r2, [r3, #6]
 800e11e:	893b      	ldrh	r3, [r7, #8]
 800e120:	4293      	cmp	r3, r2
 800e122:	bf28      	it	cs
 800e124:	4613      	movcs	r3, r2
 800e126:	b29b      	uxth	r3, r3
 800e128:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e12a:	893b      	ldrh	r3, [r7, #8]
 800e12c:	461a      	mov	r2, r3
 800e12e:	68f9      	ldr	r1, [r7, #12]
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f000 fa69 	bl	800e608 <USBD_CtlSendData>
 800e136:	e009      	b.n	800e14c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e138:	6839      	ldr	r1, [r7, #0]
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f000 f9e7 	bl	800e50e <USBD_CtlError>
 800e140:	e004      	b.n	800e14c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f000 faba 	bl	800e6bc <USBD_CtlSendStatus>
 800e148:	e000      	b.n	800e14c <USBD_GetDescriptor+0x320>
    return;
 800e14a:	bf00      	nop
  }
}
 800e14c:	3710      	adds	r7, #16
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}
 800e152:	bf00      	nop

0800e154 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
 800e15c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	889b      	ldrh	r3, [r3, #4]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d131      	bne.n	800e1ca <USBD_SetAddress+0x76>
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	88db      	ldrh	r3, [r3, #6]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d12d      	bne.n	800e1ca <USBD_SetAddress+0x76>
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	885b      	ldrh	r3, [r3, #2]
 800e172:	2b7f      	cmp	r3, #127	@ 0x7f
 800e174:	d829      	bhi.n	800e1ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	885b      	ldrh	r3, [r3, #2]
 800e17a:	b2db      	uxtb	r3, r3
 800e17c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e180:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e188:	b2db      	uxtb	r3, r3
 800e18a:	2b03      	cmp	r3, #3
 800e18c:	d104      	bne.n	800e198 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e18e:	6839      	ldr	r1, [r7, #0]
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f000 f9bc 	bl	800e50e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e196:	e01d      	b.n	800e1d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	7bfa      	ldrb	r2, [r7, #15]
 800e19c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e1a0:	7bfb      	ldrb	r3, [r7, #15]
 800e1a2:	4619      	mov	r1, r3
 800e1a4:	6878      	ldr	r0, [r7, #4]
 800e1a6:	f000 ffa1 	bl	800f0ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e1aa:	6878      	ldr	r0, [r7, #4]
 800e1ac:	f000 fa86 	bl	800e6bc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e1b0:	7bfb      	ldrb	r3, [r7, #15]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d004      	beq.n	800e1c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	2202      	movs	r2, #2
 800e1ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1be:	e009      	b.n	800e1d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2201      	movs	r2, #1
 800e1c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1c8:	e004      	b.n	800e1d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e1ca:	6839      	ldr	r1, [r7, #0]
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	f000 f99e 	bl	800e50e <USBD_CtlError>
  }
}
 800e1d2:	bf00      	nop
 800e1d4:	bf00      	nop
 800e1d6:	3710      	adds	r7, #16
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}

0800e1dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b084      	sub	sp, #16
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
 800e1e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	885b      	ldrh	r3, [r3, #2]
 800e1ee:	b2da      	uxtb	r2, r3
 800e1f0:	4b4e      	ldr	r3, [pc, #312]	@ (800e32c <USBD_SetConfig+0x150>)
 800e1f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e1f4:	4b4d      	ldr	r3, [pc, #308]	@ (800e32c <USBD_SetConfig+0x150>)
 800e1f6:	781b      	ldrb	r3, [r3, #0]
 800e1f8:	2b01      	cmp	r3, #1
 800e1fa:	d905      	bls.n	800e208 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e1fc:	6839      	ldr	r1, [r7, #0]
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f000 f985 	bl	800e50e <USBD_CtlError>
    return USBD_FAIL;
 800e204:	2303      	movs	r3, #3
 800e206:	e08c      	b.n	800e322 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e20e:	b2db      	uxtb	r3, r3
 800e210:	2b02      	cmp	r3, #2
 800e212:	d002      	beq.n	800e21a <USBD_SetConfig+0x3e>
 800e214:	2b03      	cmp	r3, #3
 800e216:	d029      	beq.n	800e26c <USBD_SetConfig+0x90>
 800e218:	e075      	b.n	800e306 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e21a:	4b44      	ldr	r3, [pc, #272]	@ (800e32c <USBD_SetConfig+0x150>)
 800e21c:	781b      	ldrb	r3, [r3, #0]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d020      	beq.n	800e264 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e222:	4b42      	ldr	r3, [pc, #264]	@ (800e32c <USBD_SetConfig+0x150>)
 800e224:	781b      	ldrb	r3, [r3, #0]
 800e226:	461a      	mov	r2, r3
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e22c:	4b3f      	ldr	r3, [pc, #252]	@ (800e32c <USBD_SetConfig+0x150>)
 800e22e:	781b      	ldrb	r3, [r3, #0]
 800e230:	4619      	mov	r1, r3
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f7fe ffb9 	bl	800d1aa <USBD_SetClassConfig>
 800e238:	4603      	mov	r3, r0
 800e23a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e23c:	7bfb      	ldrb	r3, [r7, #15]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d008      	beq.n	800e254 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e242:	6839      	ldr	r1, [r7, #0]
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	f000 f962 	bl	800e50e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2202      	movs	r2, #2
 800e24e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e252:	e065      	b.n	800e320 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f000 fa31 	bl	800e6bc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2203      	movs	r2, #3
 800e25e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e262:	e05d      	b.n	800e320 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	f000 fa29 	bl	800e6bc <USBD_CtlSendStatus>
      break;
 800e26a:	e059      	b.n	800e320 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e26c:	4b2f      	ldr	r3, [pc, #188]	@ (800e32c <USBD_SetConfig+0x150>)
 800e26e:	781b      	ldrb	r3, [r3, #0]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d112      	bne.n	800e29a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2202      	movs	r2, #2
 800e278:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e27c:	4b2b      	ldr	r3, [pc, #172]	@ (800e32c <USBD_SetConfig+0x150>)
 800e27e:	781b      	ldrb	r3, [r3, #0]
 800e280:	461a      	mov	r2, r3
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e286:	4b29      	ldr	r3, [pc, #164]	@ (800e32c <USBD_SetConfig+0x150>)
 800e288:	781b      	ldrb	r3, [r3, #0]
 800e28a:	4619      	mov	r1, r3
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f7fe ffa8 	bl	800d1e2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f000 fa12 	bl	800e6bc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e298:	e042      	b.n	800e320 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e29a:	4b24      	ldr	r3, [pc, #144]	@ (800e32c <USBD_SetConfig+0x150>)
 800e29c:	781b      	ldrb	r3, [r3, #0]
 800e29e:	461a      	mov	r2, r3
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	685b      	ldr	r3, [r3, #4]
 800e2a4:	429a      	cmp	r2, r3
 800e2a6:	d02a      	beq.n	800e2fe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	685b      	ldr	r3, [r3, #4]
 800e2ac:	b2db      	uxtb	r3, r3
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f7fe ff96 	bl	800d1e2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e2b6:	4b1d      	ldr	r3, [pc, #116]	@ (800e32c <USBD_SetConfig+0x150>)
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	461a      	mov	r2, r3
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e2c0:	4b1a      	ldr	r3, [pc, #104]	@ (800e32c <USBD_SetConfig+0x150>)
 800e2c2:	781b      	ldrb	r3, [r3, #0]
 800e2c4:	4619      	mov	r1, r3
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f7fe ff6f 	bl	800d1aa <USBD_SetClassConfig>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e2d0:	7bfb      	ldrb	r3, [r7, #15]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d00f      	beq.n	800e2f6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e2d6:	6839      	ldr	r1, [r7, #0]
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	f000 f918 	bl	800e50e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	b2db      	uxtb	r3, r3
 800e2e4:	4619      	mov	r1, r3
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f7fe ff7b 	bl	800d1e2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2202      	movs	r2, #2
 800e2f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e2f4:	e014      	b.n	800e320 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f000 f9e0 	bl	800e6bc <USBD_CtlSendStatus>
      break;
 800e2fc:	e010      	b.n	800e320 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f000 f9dc 	bl	800e6bc <USBD_CtlSendStatus>
      break;
 800e304:	e00c      	b.n	800e320 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e306:	6839      	ldr	r1, [r7, #0]
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f000 f900 	bl	800e50e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e30e:	4b07      	ldr	r3, [pc, #28]	@ (800e32c <USBD_SetConfig+0x150>)
 800e310:	781b      	ldrb	r3, [r3, #0]
 800e312:	4619      	mov	r1, r3
 800e314:	6878      	ldr	r0, [r7, #4]
 800e316:	f7fe ff64 	bl	800d1e2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e31a:	2303      	movs	r3, #3
 800e31c:	73fb      	strb	r3, [r7, #15]
      break;
 800e31e:	bf00      	nop
  }

  return ret;
 800e320:	7bfb      	ldrb	r3, [r7, #15]
}
 800e322:	4618      	mov	r0, r3
 800e324:	3710      	adds	r7, #16
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}
 800e32a:	bf00      	nop
 800e32c:	20000b94 	.word	0x20000b94

0800e330 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b082      	sub	sp, #8
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
 800e338:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	88db      	ldrh	r3, [r3, #6]
 800e33e:	2b01      	cmp	r3, #1
 800e340:	d004      	beq.n	800e34c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e342:	6839      	ldr	r1, [r7, #0]
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f000 f8e2 	bl	800e50e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e34a:	e023      	b.n	800e394 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e352:	b2db      	uxtb	r3, r3
 800e354:	2b02      	cmp	r3, #2
 800e356:	dc02      	bgt.n	800e35e <USBD_GetConfig+0x2e>
 800e358:	2b00      	cmp	r3, #0
 800e35a:	dc03      	bgt.n	800e364 <USBD_GetConfig+0x34>
 800e35c:	e015      	b.n	800e38a <USBD_GetConfig+0x5a>
 800e35e:	2b03      	cmp	r3, #3
 800e360:	d00b      	beq.n	800e37a <USBD_GetConfig+0x4a>
 800e362:	e012      	b.n	800e38a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2200      	movs	r2, #0
 800e368:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	3308      	adds	r3, #8
 800e36e:	2201      	movs	r2, #1
 800e370:	4619      	mov	r1, r3
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f000 f948 	bl	800e608 <USBD_CtlSendData>
        break;
 800e378:	e00c      	b.n	800e394 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	3304      	adds	r3, #4
 800e37e:	2201      	movs	r2, #1
 800e380:	4619      	mov	r1, r3
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f000 f940 	bl	800e608 <USBD_CtlSendData>
        break;
 800e388:	e004      	b.n	800e394 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e38a:	6839      	ldr	r1, [r7, #0]
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f000 f8be 	bl	800e50e <USBD_CtlError>
        break;
 800e392:	bf00      	nop
}
 800e394:	bf00      	nop
 800e396:	3708      	adds	r7, #8
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}

0800e39c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b082      	sub	sp, #8
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
 800e3a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e3ac:	b2db      	uxtb	r3, r3
 800e3ae:	3b01      	subs	r3, #1
 800e3b0:	2b02      	cmp	r3, #2
 800e3b2:	d81e      	bhi.n	800e3f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	88db      	ldrh	r3, [r3, #6]
 800e3b8:	2b02      	cmp	r3, #2
 800e3ba:	d004      	beq.n	800e3c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e3bc:	6839      	ldr	r1, [r7, #0]
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f000 f8a5 	bl	800e50e <USBD_CtlError>
        break;
 800e3c4:	e01a      	b.n	800e3fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2201      	movs	r2, #1
 800e3ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d005      	beq.n	800e3e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	68db      	ldr	r3, [r3, #12]
 800e3da:	f043 0202 	orr.w	r2, r3, #2
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	330c      	adds	r3, #12
 800e3e6:	2202      	movs	r2, #2
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f000 f90c 	bl	800e608 <USBD_CtlSendData>
      break;
 800e3f0:	e004      	b.n	800e3fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e3f2:	6839      	ldr	r1, [r7, #0]
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f000 f88a 	bl	800e50e <USBD_CtlError>
      break;
 800e3fa:	bf00      	nop
  }
}
 800e3fc:	bf00      	nop
 800e3fe:	3708      	adds	r7, #8
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}

0800e404 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b082      	sub	sp, #8
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
 800e40c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	885b      	ldrh	r3, [r3, #2]
 800e412:	2b01      	cmp	r3, #1
 800e414:	d107      	bne.n	800e426 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	2201      	movs	r2, #1
 800e41a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f000 f94c 	bl	800e6bc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e424:	e013      	b.n	800e44e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	885b      	ldrh	r3, [r3, #2]
 800e42a:	2b02      	cmp	r3, #2
 800e42c:	d10b      	bne.n	800e446 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	889b      	ldrh	r3, [r3, #4]
 800e432:	0a1b      	lsrs	r3, r3, #8
 800e434:	b29b      	uxth	r3, r3
 800e436:	b2da      	uxtb	r2, r3
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	f000 f93c 	bl	800e6bc <USBD_CtlSendStatus>
}
 800e444:	e003      	b.n	800e44e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e446:	6839      	ldr	r1, [r7, #0]
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f000 f860 	bl	800e50e <USBD_CtlError>
}
 800e44e:	bf00      	nop
 800e450:	3708      	adds	r7, #8
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}

0800e456 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e456:	b580      	push	{r7, lr}
 800e458:	b082      	sub	sp, #8
 800e45a:	af00      	add	r7, sp, #0
 800e45c:	6078      	str	r0, [r7, #4]
 800e45e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e466:	b2db      	uxtb	r3, r3
 800e468:	3b01      	subs	r3, #1
 800e46a:	2b02      	cmp	r3, #2
 800e46c:	d80b      	bhi.n	800e486 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	885b      	ldrh	r3, [r3, #2]
 800e472:	2b01      	cmp	r3, #1
 800e474:	d10c      	bne.n	800e490 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	2200      	movs	r2, #0
 800e47a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f000 f91c 	bl	800e6bc <USBD_CtlSendStatus>
      }
      break;
 800e484:	e004      	b.n	800e490 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e486:	6839      	ldr	r1, [r7, #0]
 800e488:	6878      	ldr	r0, [r7, #4]
 800e48a:	f000 f840 	bl	800e50e <USBD_CtlError>
      break;
 800e48e:	e000      	b.n	800e492 <USBD_ClrFeature+0x3c>
      break;
 800e490:	bf00      	nop
  }
}
 800e492:	bf00      	nop
 800e494:	3708      	adds	r7, #8
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}

0800e49a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e49a:	b580      	push	{r7, lr}
 800e49c:	b084      	sub	sp, #16
 800e49e:	af00      	add	r7, sp, #0
 800e4a0:	6078      	str	r0, [r7, #4]
 800e4a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	781a      	ldrb	r2, [r3, #0]
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	3301      	adds	r3, #1
 800e4b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	781a      	ldrb	r2, [r3, #0]
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	3301      	adds	r3, #1
 800e4c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e4c4:	68f8      	ldr	r0, [r7, #12]
 800e4c6:	f7ff fa16 	bl	800d8f6 <SWAPBYTE>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	461a      	mov	r2, r3
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	3301      	adds	r3, #1
 800e4d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	3301      	adds	r3, #1
 800e4dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e4de:	68f8      	ldr	r0, [r7, #12]
 800e4e0:	f7ff fa09 	bl	800d8f6 <SWAPBYTE>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	461a      	mov	r2, r3
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	3301      	adds	r3, #1
 800e4f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	3301      	adds	r3, #1
 800e4f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e4f8:	68f8      	ldr	r0, [r7, #12]
 800e4fa:	f7ff f9fc 	bl	800d8f6 <SWAPBYTE>
 800e4fe:	4603      	mov	r3, r0
 800e500:	461a      	mov	r2, r3
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	80da      	strh	r2, [r3, #6]
}
 800e506:	bf00      	nop
 800e508:	3710      	adds	r7, #16
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bd80      	pop	{r7, pc}

0800e50e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e50e:	b580      	push	{r7, lr}
 800e510:	b082      	sub	sp, #8
 800e512:	af00      	add	r7, sp, #0
 800e514:	6078      	str	r0, [r7, #4]
 800e516:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e518:	2180      	movs	r1, #128	@ 0x80
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f000 fd7c 	bl	800f018 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e520:	2100      	movs	r1, #0
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	f000 fd78 	bl	800f018 <USBD_LL_StallEP>
}
 800e528:	bf00      	nop
 800e52a:	3708      	adds	r7, #8
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}

0800e530 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b086      	sub	sp, #24
 800e534:	af00      	add	r7, sp, #0
 800e536:	60f8      	str	r0, [r7, #12]
 800e538:	60b9      	str	r1, [r7, #8]
 800e53a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e53c:	2300      	movs	r3, #0
 800e53e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d042      	beq.n	800e5cc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800e54a:	6938      	ldr	r0, [r7, #16]
 800e54c:	f000 f842 	bl	800e5d4 <USBD_GetLen>
 800e550:	4603      	mov	r3, r0
 800e552:	3301      	adds	r3, #1
 800e554:	005b      	lsls	r3, r3, #1
 800e556:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e55a:	d808      	bhi.n	800e56e <USBD_GetString+0x3e>
 800e55c:	6938      	ldr	r0, [r7, #16]
 800e55e:	f000 f839 	bl	800e5d4 <USBD_GetLen>
 800e562:	4603      	mov	r3, r0
 800e564:	3301      	adds	r3, #1
 800e566:	b29b      	uxth	r3, r3
 800e568:	005b      	lsls	r3, r3, #1
 800e56a:	b29a      	uxth	r2, r3
 800e56c:	e001      	b.n	800e572 <USBD_GetString+0x42>
 800e56e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e576:	7dfb      	ldrb	r3, [r7, #23]
 800e578:	68ba      	ldr	r2, [r7, #8]
 800e57a:	4413      	add	r3, r2
 800e57c:	687a      	ldr	r2, [r7, #4]
 800e57e:	7812      	ldrb	r2, [r2, #0]
 800e580:	701a      	strb	r2, [r3, #0]
  idx++;
 800e582:	7dfb      	ldrb	r3, [r7, #23]
 800e584:	3301      	adds	r3, #1
 800e586:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e588:	7dfb      	ldrb	r3, [r7, #23]
 800e58a:	68ba      	ldr	r2, [r7, #8]
 800e58c:	4413      	add	r3, r2
 800e58e:	2203      	movs	r2, #3
 800e590:	701a      	strb	r2, [r3, #0]
  idx++;
 800e592:	7dfb      	ldrb	r3, [r7, #23]
 800e594:	3301      	adds	r3, #1
 800e596:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e598:	e013      	b.n	800e5c2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800e59a:	7dfb      	ldrb	r3, [r7, #23]
 800e59c:	68ba      	ldr	r2, [r7, #8]
 800e59e:	4413      	add	r3, r2
 800e5a0:	693a      	ldr	r2, [r7, #16]
 800e5a2:	7812      	ldrb	r2, [r2, #0]
 800e5a4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e5a6:	693b      	ldr	r3, [r7, #16]
 800e5a8:	3301      	adds	r3, #1
 800e5aa:	613b      	str	r3, [r7, #16]
    idx++;
 800e5ac:	7dfb      	ldrb	r3, [r7, #23]
 800e5ae:	3301      	adds	r3, #1
 800e5b0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e5b2:	7dfb      	ldrb	r3, [r7, #23]
 800e5b4:	68ba      	ldr	r2, [r7, #8]
 800e5b6:	4413      	add	r3, r2
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	701a      	strb	r2, [r3, #0]
    idx++;
 800e5bc:	7dfb      	ldrb	r3, [r7, #23]
 800e5be:	3301      	adds	r3, #1
 800e5c0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e5c2:	693b      	ldr	r3, [r7, #16]
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d1e7      	bne.n	800e59a <USBD_GetString+0x6a>
 800e5ca:	e000      	b.n	800e5ce <USBD_GetString+0x9e>
    return;
 800e5cc:	bf00      	nop
  }
}
 800e5ce:	3718      	adds	r7, #24
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bd80      	pop	{r7, pc}

0800e5d4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e5d4:	b480      	push	{r7}
 800e5d6:	b085      	sub	sp, #20
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e5dc:	2300      	movs	r3, #0
 800e5de:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e5e4:	e005      	b.n	800e5f2 <USBD_GetLen+0x1e>
  {
    len++;
 800e5e6:	7bfb      	ldrb	r3, [r7, #15]
 800e5e8:	3301      	adds	r3, #1
 800e5ea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	3301      	adds	r3, #1
 800e5f0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e5f2:	68bb      	ldr	r3, [r7, #8]
 800e5f4:	781b      	ldrb	r3, [r3, #0]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d1f5      	bne.n	800e5e6 <USBD_GetLen+0x12>
  }

  return len;
 800e5fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	3714      	adds	r7, #20
 800e600:	46bd      	mov	sp, r7
 800e602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e606:	4770      	bx	lr

0800e608 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b084      	sub	sp, #16
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	60f8      	str	r0, [r7, #12]
 800e610:	60b9      	str	r1, [r7, #8]
 800e612:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	2202      	movs	r2, #2
 800e618:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	687a      	ldr	r2, [r7, #4]
 800e620:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	687a      	ldr	r2, [r7, #4]
 800e626:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	68ba      	ldr	r2, [r7, #8]
 800e62c:	2100      	movs	r1, #0
 800e62e:	68f8      	ldr	r0, [r7, #12]
 800e630:	f000 fd7b 	bl	800f12a <USBD_LL_Transmit>

  return USBD_OK;
 800e634:	2300      	movs	r3, #0
}
 800e636:	4618      	mov	r0, r3
 800e638:	3710      	adds	r7, #16
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}

0800e63e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e63e:	b580      	push	{r7, lr}
 800e640:	b084      	sub	sp, #16
 800e642:	af00      	add	r7, sp, #0
 800e644:	60f8      	str	r0, [r7, #12]
 800e646:	60b9      	str	r1, [r7, #8]
 800e648:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	68ba      	ldr	r2, [r7, #8]
 800e64e:	2100      	movs	r1, #0
 800e650:	68f8      	ldr	r0, [r7, #12]
 800e652:	f000 fd6a 	bl	800f12a <USBD_LL_Transmit>

  return USBD_OK;
 800e656:	2300      	movs	r3, #0
}
 800e658:	4618      	mov	r0, r3
 800e65a:	3710      	adds	r7, #16
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}

0800e660 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b084      	sub	sp, #16
 800e664:	af00      	add	r7, sp, #0
 800e666:	60f8      	str	r0, [r7, #12]
 800e668:	60b9      	str	r1, [r7, #8]
 800e66a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	2203      	movs	r2, #3
 800e670:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	687a      	ldr	r2, [r7, #4]
 800e678:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	687a      	ldr	r2, [r7, #4]
 800e680:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	68ba      	ldr	r2, [r7, #8]
 800e688:	2100      	movs	r1, #0
 800e68a:	68f8      	ldr	r0, [r7, #12]
 800e68c:	f000 fd6e 	bl	800f16c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e690:	2300      	movs	r3, #0
}
 800e692:	4618      	mov	r0, r3
 800e694:	3710      	adds	r7, #16
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}

0800e69a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e69a:	b580      	push	{r7, lr}
 800e69c:	b084      	sub	sp, #16
 800e69e:	af00      	add	r7, sp, #0
 800e6a0:	60f8      	str	r0, [r7, #12]
 800e6a2:	60b9      	str	r1, [r7, #8]
 800e6a4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	68ba      	ldr	r2, [r7, #8]
 800e6aa:	2100      	movs	r1, #0
 800e6ac:	68f8      	ldr	r0, [r7, #12]
 800e6ae:	f000 fd5d 	bl	800f16c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e6b2:	2300      	movs	r3, #0
}
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	3710      	adds	r7, #16
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}

0800e6bc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b082      	sub	sp, #8
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2204      	movs	r2, #4
 800e6c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	2100      	movs	r1, #0
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f000 fd29 	bl	800f12a <USBD_LL_Transmit>

  return USBD_OK;
 800e6d8:	2300      	movs	r3, #0
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	3708      	adds	r7, #8
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}

0800e6e2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e6e2:	b580      	push	{r7, lr}
 800e6e4:	b082      	sub	sp, #8
 800e6e6:	af00      	add	r7, sp, #0
 800e6e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2205      	movs	r2, #5
 800e6ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	2100      	movs	r1, #0
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f000 fd37 	bl	800f16c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e6fe:	2300      	movs	r3, #0
}
 800e700:	4618      	mov	r0, r3
 800e702:	3708      	adds	r7, #8
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}

0800e708 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e708:	b480      	push	{r7}
 800e70a:	b087      	sub	sp, #28
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	60f8      	str	r0, [r7, #12]
 800e710:	60b9      	str	r1, [r7, #8]
 800e712:	4613      	mov	r3, r2
 800e714:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e716:	2301      	movs	r3, #1
 800e718:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e71a:	2300      	movs	r3, #0
 800e71c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e71e:	4b1f      	ldr	r3, [pc, #124]	@ (800e79c <FATFS_LinkDriverEx+0x94>)
 800e720:	7a5b      	ldrb	r3, [r3, #9]
 800e722:	b2db      	uxtb	r3, r3
 800e724:	2b00      	cmp	r3, #0
 800e726:	d131      	bne.n	800e78c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e728:	4b1c      	ldr	r3, [pc, #112]	@ (800e79c <FATFS_LinkDriverEx+0x94>)
 800e72a:	7a5b      	ldrb	r3, [r3, #9]
 800e72c:	b2db      	uxtb	r3, r3
 800e72e:	461a      	mov	r2, r3
 800e730:	4b1a      	ldr	r3, [pc, #104]	@ (800e79c <FATFS_LinkDriverEx+0x94>)
 800e732:	2100      	movs	r1, #0
 800e734:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e736:	4b19      	ldr	r3, [pc, #100]	@ (800e79c <FATFS_LinkDriverEx+0x94>)
 800e738:	7a5b      	ldrb	r3, [r3, #9]
 800e73a:	b2db      	uxtb	r3, r3
 800e73c:	4a17      	ldr	r2, [pc, #92]	@ (800e79c <FATFS_LinkDriverEx+0x94>)
 800e73e:	009b      	lsls	r3, r3, #2
 800e740:	4413      	add	r3, r2
 800e742:	68fa      	ldr	r2, [r7, #12]
 800e744:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e746:	4b15      	ldr	r3, [pc, #84]	@ (800e79c <FATFS_LinkDriverEx+0x94>)
 800e748:	7a5b      	ldrb	r3, [r3, #9]
 800e74a:	b2db      	uxtb	r3, r3
 800e74c:	461a      	mov	r2, r3
 800e74e:	4b13      	ldr	r3, [pc, #76]	@ (800e79c <FATFS_LinkDriverEx+0x94>)
 800e750:	4413      	add	r3, r2
 800e752:	79fa      	ldrb	r2, [r7, #7]
 800e754:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e756:	4b11      	ldr	r3, [pc, #68]	@ (800e79c <FATFS_LinkDriverEx+0x94>)
 800e758:	7a5b      	ldrb	r3, [r3, #9]
 800e75a:	b2db      	uxtb	r3, r3
 800e75c:	1c5a      	adds	r2, r3, #1
 800e75e:	b2d1      	uxtb	r1, r2
 800e760:	4a0e      	ldr	r2, [pc, #56]	@ (800e79c <FATFS_LinkDriverEx+0x94>)
 800e762:	7251      	strb	r1, [r2, #9]
 800e764:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e766:	7dbb      	ldrb	r3, [r7, #22]
 800e768:	3330      	adds	r3, #48	@ 0x30
 800e76a:	b2da      	uxtb	r2, r3
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	3301      	adds	r3, #1
 800e774:	223a      	movs	r2, #58	@ 0x3a
 800e776:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	3302      	adds	r3, #2
 800e77c:	222f      	movs	r2, #47	@ 0x2f
 800e77e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e780:	68bb      	ldr	r3, [r7, #8]
 800e782:	3303      	adds	r3, #3
 800e784:	2200      	movs	r2, #0
 800e786:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e788:	2300      	movs	r3, #0
 800e78a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e78c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e78e:	4618      	mov	r0, r3
 800e790:	371c      	adds	r7, #28
 800e792:	46bd      	mov	sp, r7
 800e794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e798:	4770      	bx	lr
 800e79a:	bf00      	nop
 800e79c:	20000b98 	.word	0x20000b98

0800e7a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b082      	sub	sp, #8
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
 800e7a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	6839      	ldr	r1, [r7, #0]
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f7ff ffaa 	bl	800e708 <FATFS_LinkDriverEx>
 800e7b4:	4603      	mov	r3, r0
}
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	3708      	adds	r7, #8
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}
	...

0800e7c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	4912      	ldr	r1, [pc, #72]	@ (800e810 <MX_USB_DEVICE_Init+0x50>)
 800e7c8:	4812      	ldr	r0, [pc, #72]	@ (800e814 <MX_USB_DEVICE_Init+0x54>)
 800e7ca:	f7fe fc71 	bl	800d0b0 <USBD_Init>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d001      	beq.n	800e7d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e7d4:	f7f3 fc4a 	bl	800206c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e7d8:	490f      	ldr	r1, [pc, #60]	@ (800e818 <MX_USB_DEVICE_Init+0x58>)
 800e7da:	480e      	ldr	r0, [pc, #56]	@ (800e814 <MX_USB_DEVICE_Init+0x54>)
 800e7dc:	f7fe fc98 	bl	800d110 <USBD_RegisterClass>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d001      	beq.n	800e7ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e7e6:	f7f3 fc41 	bl	800206c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e7ea:	490c      	ldr	r1, [pc, #48]	@ (800e81c <MX_USB_DEVICE_Init+0x5c>)
 800e7ec:	4809      	ldr	r0, [pc, #36]	@ (800e814 <MX_USB_DEVICE_Init+0x54>)
 800e7ee:	f7fe fb8f 	bl	800cf10 <USBD_CDC_RegisterInterface>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d001      	beq.n	800e7fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e7f8:	f7f3 fc38 	bl	800206c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e7fc:	4805      	ldr	r0, [pc, #20]	@ (800e814 <MX_USB_DEVICE_Init+0x54>)
 800e7fe:	f7fe fcbd 	bl	800d17c <USBD_Start>
 800e802:	4603      	mov	r3, r0
 800e804:	2b00      	cmp	r3, #0
 800e806:	d001      	beq.n	800e80c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e808:	f7f3 fc30 	bl	800206c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e80c:	bf00      	nop
 800e80e:	bd80      	pop	{r7, pc}
 800e810:	200000ac 	.word	0x200000ac
 800e814:	20000ba4 	.word	0x20000ba4
 800e818:	20000018 	.word	0x20000018
 800e81c:	20000098 	.word	0x20000098

0800e820 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e824:	2200      	movs	r2, #0
 800e826:	4905      	ldr	r1, [pc, #20]	@ (800e83c <CDC_Init_FS+0x1c>)
 800e828:	4805      	ldr	r0, [pc, #20]	@ (800e840 <CDC_Init_FS+0x20>)
 800e82a:	f7fe fb8b 	bl	800cf44 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e82e:	4905      	ldr	r1, [pc, #20]	@ (800e844 <CDC_Init_FS+0x24>)
 800e830:	4803      	ldr	r0, [pc, #12]	@ (800e840 <CDC_Init_FS+0x20>)
 800e832:	f7fe fba9 	bl	800cf88 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e836:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e838:	4618      	mov	r0, r3
 800e83a:	bd80      	pop	{r7, pc}
 800e83c:	20001680 	.word	0x20001680
 800e840:	20000ba4 	.word	0x20000ba4
 800e844:	20000e80 	.word	0x20000e80

0800e848 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e848:	b480      	push	{r7}
 800e84a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e84c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e84e:	4618      	mov	r0, r3
 800e850:	46bd      	mov	sp, r7
 800e852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e856:	4770      	bx	lr

0800e858 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e858:	b480      	push	{r7}
 800e85a:	b083      	sub	sp, #12
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	4603      	mov	r3, r0
 800e860:	6039      	str	r1, [r7, #0]
 800e862:	71fb      	strb	r3, [r7, #7]
 800e864:	4613      	mov	r3, r2
 800e866:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e868:	79fb      	ldrb	r3, [r7, #7]
 800e86a:	2b23      	cmp	r3, #35	@ 0x23
 800e86c:	d84a      	bhi.n	800e904 <CDC_Control_FS+0xac>
 800e86e:	a201      	add	r2, pc, #4	@ (adr r2, 800e874 <CDC_Control_FS+0x1c>)
 800e870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e874:	0800e905 	.word	0x0800e905
 800e878:	0800e905 	.word	0x0800e905
 800e87c:	0800e905 	.word	0x0800e905
 800e880:	0800e905 	.word	0x0800e905
 800e884:	0800e905 	.word	0x0800e905
 800e888:	0800e905 	.word	0x0800e905
 800e88c:	0800e905 	.word	0x0800e905
 800e890:	0800e905 	.word	0x0800e905
 800e894:	0800e905 	.word	0x0800e905
 800e898:	0800e905 	.word	0x0800e905
 800e89c:	0800e905 	.word	0x0800e905
 800e8a0:	0800e905 	.word	0x0800e905
 800e8a4:	0800e905 	.word	0x0800e905
 800e8a8:	0800e905 	.word	0x0800e905
 800e8ac:	0800e905 	.word	0x0800e905
 800e8b0:	0800e905 	.word	0x0800e905
 800e8b4:	0800e905 	.word	0x0800e905
 800e8b8:	0800e905 	.word	0x0800e905
 800e8bc:	0800e905 	.word	0x0800e905
 800e8c0:	0800e905 	.word	0x0800e905
 800e8c4:	0800e905 	.word	0x0800e905
 800e8c8:	0800e905 	.word	0x0800e905
 800e8cc:	0800e905 	.word	0x0800e905
 800e8d0:	0800e905 	.word	0x0800e905
 800e8d4:	0800e905 	.word	0x0800e905
 800e8d8:	0800e905 	.word	0x0800e905
 800e8dc:	0800e905 	.word	0x0800e905
 800e8e0:	0800e905 	.word	0x0800e905
 800e8e4:	0800e905 	.word	0x0800e905
 800e8e8:	0800e905 	.word	0x0800e905
 800e8ec:	0800e905 	.word	0x0800e905
 800e8f0:	0800e905 	.word	0x0800e905
 800e8f4:	0800e905 	.word	0x0800e905
 800e8f8:	0800e905 	.word	0x0800e905
 800e8fc:	0800e905 	.word	0x0800e905
 800e900:	0800e905 	.word	0x0800e905
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e904:	bf00      	nop
  }

  return (USBD_OK);
 800e906:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e908:	4618      	mov	r0, r3
 800e90a:	370c      	adds	r7, #12
 800e90c:	46bd      	mov	sp, r7
 800e90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e912:	4770      	bx	lr

0800e914 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b082      	sub	sp, #8
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
 800e91c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e91e:	6879      	ldr	r1, [r7, #4]
 800e920:	4805      	ldr	r0, [pc, #20]	@ (800e938 <CDC_Receive_FS+0x24>)
 800e922:	f7fe fb31 	bl	800cf88 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e926:	4804      	ldr	r0, [pc, #16]	@ (800e938 <CDC_Receive_FS+0x24>)
 800e928:	f7fe fb8c 	bl	800d044 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e92c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e92e:	4618      	mov	r0, r3
 800e930:	3708      	adds	r7, #8
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}
 800e936:	bf00      	nop
 800e938:	20000ba4 	.word	0x20000ba4

0800e93c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b084      	sub	sp, #16
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
 800e944:	460b      	mov	r3, r1
 800e946:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e948:	2300      	movs	r3, #0
 800e94a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e94c:	4b0d      	ldr	r3, [pc, #52]	@ (800e984 <CDC_Transmit_FS+0x48>)
 800e94e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e952:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d001      	beq.n	800e962 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e95e:	2301      	movs	r3, #1
 800e960:	e00b      	b.n	800e97a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e962:	887b      	ldrh	r3, [r7, #2]
 800e964:	461a      	mov	r2, r3
 800e966:	6879      	ldr	r1, [r7, #4]
 800e968:	4806      	ldr	r0, [pc, #24]	@ (800e984 <CDC_Transmit_FS+0x48>)
 800e96a:	f7fe faeb 	bl	800cf44 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e96e:	4805      	ldr	r0, [pc, #20]	@ (800e984 <CDC_Transmit_FS+0x48>)
 800e970:	f7fe fb28 	bl	800cfc4 <USBD_CDC_TransmitPacket>
 800e974:	4603      	mov	r3, r0
 800e976:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e978:	7bfb      	ldrb	r3, [r7, #15]
}
 800e97a:	4618      	mov	r0, r3
 800e97c:	3710      	adds	r7, #16
 800e97e:	46bd      	mov	sp, r7
 800e980:	bd80      	pop	{r7, pc}
 800e982:	bf00      	nop
 800e984:	20000ba4 	.word	0x20000ba4

0800e988 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e988:	b480      	push	{r7}
 800e98a:	b087      	sub	sp, #28
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	60f8      	str	r0, [r7, #12]
 800e990:	60b9      	str	r1, [r7, #8]
 800e992:	4613      	mov	r3, r2
 800e994:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e996:	2300      	movs	r3, #0
 800e998:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e99a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	371c      	adds	r7, #28
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a8:	4770      	bx	lr
	...

0800e9ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e9ac:	b480      	push	{r7}
 800e9ae:	b083      	sub	sp, #12
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	6039      	str	r1, [r7, #0]
 800e9b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	2212      	movs	r2, #18
 800e9bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e9be:	4b03      	ldr	r3, [pc, #12]	@ (800e9cc <USBD_FS_DeviceDescriptor+0x20>)
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	370c      	adds	r7, #12
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ca:	4770      	bx	lr
 800e9cc:	200000cc 	.word	0x200000cc

0800e9d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e9d0:	b480      	push	{r7}
 800e9d2:	b083      	sub	sp, #12
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	6039      	str	r1, [r7, #0]
 800e9da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	2204      	movs	r2, #4
 800e9e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e9e2:	4b03      	ldr	r3, [pc, #12]	@ (800e9f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	370c      	adds	r7, #12
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ee:	4770      	bx	lr
 800e9f0:	200000ec 	.word	0x200000ec

0800e9f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b082      	sub	sp, #8
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	6039      	str	r1, [r7, #0]
 800e9fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ea00:	79fb      	ldrb	r3, [r7, #7]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d105      	bne.n	800ea12 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ea06:	683a      	ldr	r2, [r7, #0]
 800ea08:	4907      	ldr	r1, [pc, #28]	@ (800ea28 <USBD_FS_ProductStrDescriptor+0x34>)
 800ea0a:	4808      	ldr	r0, [pc, #32]	@ (800ea2c <USBD_FS_ProductStrDescriptor+0x38>)
 800ea0c:	f7ff fd90 	bl	800e530 <USBD_GetString>
 800ea10:	e004      	b.n	800ea1c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ea12:	683a      	ldr	r2, [r7, #0]
 800ea14:	4904      	ldr	r1, [pc, #16]	@ (800ea28 <USBD_FS_ProductStrDescriptor+0x34>)
 800ea16:	4805      	ldr	r0, [pc, #20]	@ (800ea2c <USBD_FS_ProductStrDescriptor+0x38>)
 800ea18:	f7ff fd8a 	bl	800e530 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ea1c:	4b02      	ldr	r3, [pc, #8]	@ (800ea28 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ea1e:	4618      	mov	r0, r3
 800ea20:	3708      	adds	r7, #8
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}
 800ea26:	bf00      	nop
 800ea28:	20001e80 	.word	0x20001e80
 800ea2c:	08011fdc 	.word	0x08011fdc

0800ea30 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b082      	sub	sp, #8
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	4603      	mov	r3, r0
 800ea38:	6039      	str	r1, [r7, #0]
 800ea3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ea3c:	683a      	ldr	r2, [r7, #0]
 800ea3e:	4904      	ldr	r1, [pc, #16]	@ (800ea50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ea40:	4804      	ldr	r0, [pc, #16]	@ (800ea54 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ea42:	f7ff fd75 	bl	800e530 <USBD_GetString>
  return USBD_StrDesc;
 800ea46:	4b02      	ldr	r3, [pc, #8]	@ (800ea50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ea48:	4618      	mov	r0, r3
 800ea4a:	3708      	adds	r7, #8
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}
 800ea50:	20001e80 	.word	0x20001e80
 800ea54:	08011ff4 	.word	0x08011ff4

0800ea58 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b082      	sub	sp, #8
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	4603      	mov	r3, r0
 800ea60:	6039      	str	r1, [r7, #0]
 800ea62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	221a      	movs	r2, #26
 800ea68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ea6a:	f000 f855 	bl	800eb18 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ea6e:	4b02      	ldr	r3, [pc, #8]	@ (800ea78 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ea70:	4618      	mov	r0, r3
 800ea72:	3708      	adds	r7, #8
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}
 800ea78:	200000f0 	.word	0x200000f0

0800ea7c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b082      	sub	sp, #8
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	4603      	mov	r3, r0
 800ea84:	6039      	str	r1, [r7, #0]
 800ea86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ea88:	79fb      	ldrb	r3, [r7, #7]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d105      	bne.n	800ea9a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ea8e:	683a      	ldr	r2, [r7, #0]
 800ea90:	4907      	ldr	r1, [pc, #28]	@ (800eab0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ea92:	4808      	ldr	r0, [pc, #32]	@ (800eab4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ea94:	f7ff fd4c 	bl	800e530 <USBD_GetString>
 800ea98:	e004      	b.n	800eaa4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ea9a:	683a      	ldr	r2, [r7, #0]
 800ea9c:	4904      	ldr	r1, [pc, #16]	@ (800eab0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ea9e:	4805      	ldr	r0, [pc, #20]	@ (800eab4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eaa0:	f7ff fd46 	bl	800e530 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eaa4:	4b02      	ldr	r3, [pc, #8]	@ (800eab0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	3708      	adds	r7, #8
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}
 800eaae:	bf00      	nop
 800eab0:	20001e80 	.word	0x20001e80
 800eab4:	08012008 	.word	0x08012008

0800eab8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b082      	sub	sp, #8
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	4603      	mov	r3, r0
 800eac0:	6039      	str	r1, [r7, #0]
 800eac2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eac4:	79fb      	ldrb	r3, [r7, #7]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d105      	bne.n	800ead6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eaca:	683a      	ldr	r2, [r7, #0]
 800eacc:	4907      	ldr	r1, [pc, #28]	@ (800eaec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800eace:	4808      	ldr	r0, [pc, #32]	@ (800eaf0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ead0:	f7ff fd2e 	bl	800e530 <USBD_GetString>
 800ead4:	e004      	b.n	800eae0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ead6:	683a      	ldr	r2, [r7, #0]
 800ead8:	4904      	ldr	r1, [pc, #16]	@ (800eaec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800eada:	4805      	ldr	r0, [pc, #20]	@ (800eaf0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800eadc:	f7ff fd28 	bl	800e530 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eae0:	4b02      	ldr	r3, [pc, #8]	@ (800eaec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	3708      	adds	r7, #8
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}
 800eaea:	bf00      	nop
 800eaec:	20001e80 	.word	0x20001e80
 800eaf0:	08012014 	.word	0x08012014

0800eaf4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eaf4:	b480      	push	{r7}
 800eaf6:	b083      	sub	sp, #12
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	4603      	mov	r3, r0
 800eafc:	6039      	str	r1, [r7, #0]
 800eafe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	220c      	movs	r2, #12
 800eb04:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800eb06:	4b03      	ldr	r3, [pc, #12]	@ (800eb14 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	370c      	adds	r7, #12
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb12:	4770      	bx	lr
 800eb14:	200000e0 	.word	0x200000e0

0800eb18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b084      	sub	sp, #16
 800eb1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800eb1e:	4b0f      	ldr	r3, [pc, #60]	@ (800eb5c <Get_SerialNum+0x44>)
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800eb24:	4b0e      	ldr	r3, [pc, #56]	@ (800eb60 <Get_SerialNum+0x48>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800eb2a:	4b0e      	ldr	r3, [pc, #56]	@ (800eb64 <Get_SerialNum+0x4c>)
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800eb30:	68fa      	ldr	r2, [r7, #12]
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	4413      	add	r3, r2
 800eb36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d009      	beq.n	800eb52 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800eb3e:	2208      	movs	r2, #8
 800eb40:	4909      	ldr	r1, [pc, #36]	@ (800eb68 <Get_SerialNum+0x50>)
 800eb42:	68f8      	ldr	r0, [r7, #12]
 800eb44:	f000 f814 	bl	800eb70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800eb48:	2204      	movs	r2, #4
 800eb4a:	4908      	ldr	r1, [pc, #32]	@ (800eb6c <Get_SerialNum+0x54>)
 800eb4c:	68b8      	ldr	r0, [r7, #8]
 800eb4e:	f000 f80f 	bl	800eb70 <IntToUnicode>
  }
}
 800eb52:	bf00      	nop
 800eb54:	3710      	adds	r7, #16
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd80      	pop	{r7, pc}
 800eb5a:	bf00      	nop
 800eb5c:	1ff07a10 	.word	0x1ff07a10
 800eb60:	1ff07a14 	.word	0x1ff07a14
 800eb64:	1ff07a18 	.word	0x1ff07a18
 800eb68:	200000f2 	.word	0x200000f2
 800eb6c:	20000102 	.word	0x20000102

0800eb70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800eb70:	b480      	push	{r7}
 800eb72:	b087      	sub	sp, #28
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	60f8      	str	r0, [r7, #12]
 800eb78:	60b9      	str	r1, [r7, #8]
 800eb7a:	4613      	mov	r3, r2
 800eb7c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800eb7e:	2300      	movs	r3, #0
 800eb80:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800eb82:	2300      	movs	r3, #0
 800eb84:	75fb      	strb	r3, [r7, #23]
 800eb86:	e027      	b.n	800ebd8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	0f1b      	lsrs	r3, r3, #28
 800eb8c:	2b09      	cmp	r3, #9
 800eb8e:	d80b      	bhi.n	800eba8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	0f1b      	lsrs	r3, r3, #28
 800eb94:	b2da      	uxtb	r2, r3
 800eb96:	7dfb      	ldrb	r3, [r7, #23]
 800eb98:	005b      	lsls	r3, r3, #1
 800eb9a:	4619      	mov	r1, r3
 800eb9c:	68bb      	ldr	r3, [r7, #8]
 800eb9e:	440b      	add	r3, r1
 800eba0:	3230      	adds	r2, #48	@ 0x30
 800eba2:	b2d2      	uxtb	r2, r2
 800eba4:	701a      	strb	r2, [r3, #0]
 800eba6:	e00a      	b.n	800ebbe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	0f1b      	lsrs	r3, r3, #28
 800ebac:	b2da      	uxtb	r2, r3
 800ebae:	7dfb      	ldrb	r3, [r7, #23]
 800ebb0:	005b      	lsls	r3, r3, #1
 800ebb2:	4619      	mov	r1, r3
 800ebb4:	68bb      	ldr	r3, [r7, #8]
 800ebb6:	440b      	add	r3, r1
 800ebb8:	3237      	adds	r2, #55	@ 0x37
 800ebba:	b2d2      	uxtb	r2, r2
 800ebbc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	011b      	lsls	r3, r3, #4
 800ebc2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ebc4:	7dfb      	ldrb	r3, [r7, #23]
 800ebc6:	005b      	lsls	r3, r3, #1
 800ebc8:	3301      	adds	r3, #1
 800ebca:	68ba      	ldr	r2, [r7, #8]
 800ebcc:	4413      	add	r3, r2
 800ebce:	2200      	movs	r2, #0
 800ebd0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ebd2:	7dfb      	ldrb	r3, [r7, #23]
 800ebd4:	3301      	adds	r3, #1
 800ebd6:	75fb      	strb	r3, [r7, #23]
 800ebd8:	7dfa      	ldrb	r2, [r7, #23]
 800ebda:	79fb      	ldrb	r3, [r7, #7]
 800ebdc:	429a      	cmp	r2, r3
 800ebde:	d3d3      	bcc.n	800eb88 <IntToUnicode+0x18>
  }
}
 800ebe0:	bf00      	nop
 800ebe2:	bf00      	nop
 800ebe4:	371c      	adds	r7, #28
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebec:	4770      	bx	lr
	...

0800ebf0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b0aa      	sub	sp, #168	@ 0xa8
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ebf8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	601a      	str	r2, [r3, #0]
 800ec00:	605a      	str	r2, [r3, #4]
 800ec02:	609a      	str	r2, [r3, #8]
 800ec04:	60da      	str	r2, [r3, #12]
 800ec06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ec08:	f107 0314 	add.w	r3, r7, #20
 800ec0c:	2280      	movs	r2, #128	@ 0x80
 800ec0e:	2100      	movs	r1, #0
 800ec10:	4618      	mov	r0, r3
 800ec12:	f001 f9ae 	bl	800ff72 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ec1e:	d151      	bne.n	800ecc4 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800ec20:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800ec24:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800ec26:	2300      	movs	r3, #0
 800ec28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ec2c:	f107 0314 	add.w	r3, r7, #20
 800ec30:	4618      	mov	r0, r3
 800ec32:	f7f7 fbd3 	bl	80063dc <HAL_RCCEx_PeriphCLKConfig>
 800ec36:	4603      	mov	r3, r0
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d001      	beq.n	800ec40 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800ec3c:	f7f3 fa16 	bl	800206c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ec40:	4b22      	ldr	r3, [pc, #136]	@ (800eccc <HAL_PCD_MspInit+0xdc>)
 800ec42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec44:	4a21      	ldr	r2, [pc, #132]	@ (800eccc <HAL_PCD_MspInit+0xdc>)
 800ec46:	f043 0301 	orr.w	r3, r3, #1
 800ec4a:	6313      	str	r3, [r2, #48]	@ 0x30
 800ec4c:	4b1f      	ldr	r3, [pc, #124]	@ (800eccc <HAL_PCD_MspInit+0xdc>)
 800ec4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec50:	f003 0301 	and.w	r3, r3, #1
 800ec54:	613b      	str	r3, [r7, #16]
 800ec56:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ec58:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ec5c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec60:	2302      	movs	r3, #2
 800ec62:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec66:	2300      	movs	r3, #0
 800ec68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ec6c:	2303      	movs	r3, #3
 800ec6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ec72:	230a      	movs	r3, #10
 800ec74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ec78:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800ec7c:	4619      	mov	r1, r3
 800ec7e:	4814      	ldr	r0, [pc, #80]	@ (800ecd0 <HAL_PCD_MspInit+0xe0>)
 800ec80:	f7f5 f8dc 	bl	8003e3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ec84:	4b11      	ldr	r3, [pc, #68]	@ (800eccc <HAL_PCD_MspInit+0xdc>)
 800ec86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec88:	4a10      	ldr	r2, [pc, #64]	@ (800eccc <HAL_PCD_MspInit+0xdc>)
 800ec8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec8e:	6353      	str	r3, [r2, #52]	@ 0x34
 800ec90:	4b0e      	ldr	r3, [pc, #56]	@ (800eccc <HAL_PCD_MspInit+0xdc>)
 800ec92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ec98:	60fb      	str	r3, [r7, #12]
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	4b0b      	ldr	r3, [pc, #44]	@ (800eccc <HAL_PCD_MspInit+0xdc>)
 800ec9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eca0:	4a0a      	ldr	r2, [pc, #40]	@ (800eccc <HAL_PCD_MspInit+0xdc>)
 800eca2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800eca6:	6453      	str	r3, [r2, #68]	@ 0x44
 800eca8:	4b08      	ldr	r3, [pc, #32]	@ (800eccc <HAL_PCD_MspInit+0xdc>)
 800ecaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ecac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ecb0:	60bb      	str	r3, [r7, #8]
 800ecb2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	2100      	movs	r1, #0
 800ecb8:	2043      	movs	r0, #67	@ 0x43
 800ecba:	f7f4 fc98 	bl	80035ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ecbe:	2043      	movs	r0, #67	@ 0x43
 800ecc0:	f7f4 fcb1 	bl	8003626 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ecc4:	bf00      	nop
 800ecc6:	37a8      	adds	r7, #168	@ 0xa8
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	bd80      	pop	{r7, pc}
 800eccc:	40023800 	.word	0x40023800
 800ecd0:	40020000 	.word	0x40020000

0800ecd4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b082      	sub	sp, #8
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ece8:	4619      	mov	r1, r3
 800ecea:	4610      	mov	r0, r2
 800ecec:	f7fe fa93 	bl	800d216 <USBD_LL_SetupStage>
}
 800ecf0:	bf00      	nop
 800ecf2:	3708      	adds	r7, #8
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bd80      	pop	{r7, pc}

0800ecf8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b082      	sub	sp, #8
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
 800ed00:	460b      	mov	r3, r1
 800ed02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800ed0a:	78fa      	ldrb	r2, [r7, #3]
 800ed0c:	6879      	ldr	r1, [r7, #4]
 800ed0e:	4613      	mov	r3, r2
 800ed10:	00db      	lsls	r3, r3, #3
 800ed12:	4413      	add	r3, r2
 800ed14:	009b      	lsls	r3, r3, #2
 800ed16:	440b      	add	r3, r1
 800ed18:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ed1c:	681a      	ldr	r2, [r3, #0]
 800ed1e:	78fb      	ldrb	r3, [r7, #3]
 800ed20:	4619      	mov	r1, r3
 800ed22:	f7fe facd 	bl	800d2c0 <USBD_LL_DataOutStage>
}
 800ed26:	bf00      	nop
 800ed28:	3708      	adds	r7, #8
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}

0800ed2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed2e:	b580      	push	{r7, lr}
 800ed30:	b082      	sub	sp, #8
 800ed32:	af00      	add	r7, sp, #0
 800ed34:	6078      	str	r0, [r7, #4]
 800ed36:	460b      	mov	r3, r1
 800ed38:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800ed40:	78fa      	ldrb	r2, [r7, #3]
 800ed42:	6879      	ldr	r1, [r7, #4]
 800ed44:	4613      	mov	r3, r2
 800ed46:	00db      	lsls	r3, r3, #3
 800ed48:	4413      	add	r3, r2
 800ed4a:	009b      	lsls	r3, r3, #2
 800ed4c:	440b      	add	r3, r1
 800ed4e:	3320      	adds	r3, #32
 800ed50:	681a      	ldr	r2, [r3, #0]
 800ed52:	78fb      	ldrb	r3, [r7, #3]
 800ed54:	4619      	mov	r1, r3
 800ed56:	f7fe fb66 	bl	800d426 <USBD_LL_DataInStage>
}
 800ed5a:	bf00      	nop
 800ed5c:	3708      	adds	r7, #8
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}

0800ed62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed62:	b580      	push	{r7, lr}
 800ed64:	b082      	sub	sp, #8
 800ed66:	af00      	add	r7, sp, #0
 800ed68:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800ed70:	4618      	mov	r0, r3
 800ed72:	f7fe fca0 	bl	800d6b6 <USBD_LL_SOF>
}
 800ed76:	bf00      	nop
 800ed78:	3708      	adds	r7, #8
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}

0800ed7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed7e:	b580      	push	{r7, lr}
 800ed80:	b084      	sub	sp, #16
 800ed82:	af00      	add	r7, sp, #0
 800ed84:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ed86:	2301      	movs	r3, #1
 800ed88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	79db      	ldrb	r3, [r3, #7]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d102      	bne.n	800ed98 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ed92:	2300      	movs	r3, #0
 800ed94:	73fb      	strb	r3, [r7, #15]
 800ed96:	e008      	b.n	800edaa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	79db      	ldrb	r3, [r3, #7]
 800ed9c:	2b02      	cmp	r3, #2
 800ed9e:	d102      	bne.n	800eda6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800eda0:	2301      	movs	r3, #1
 800eda2:	73fb      	strb	r3, [r7, #15]
 800eda4:	e001      	b.n	800edaa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800eda6:	f7f3 f961 	bl	800206c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800edb0:	7bfa      	ldrb	r2, [r7, #15]
 800edb2:	4611      	mov	r1, r2
 800edb4:	4618      	mov	r0, r3
 800edb6:	f7fe fc3a 	bl	800d62e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800edc0:	4618      	mov	r0, r3
 800edc2:	f7fe fbe2 	bl	800d58a <USBD_LL_Reset>
}
 800edc6:	bf00      	nop
 800edc8:	3710      	adds	r7, #16
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}
	...

0800edd0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b082      	sub	sp, #8
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800edde:	4618      	mov	r0, r3
 800ede0:	f7fe fc35 	bl	800d64e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	687a      	ldr	r2, [r7, #4]
 800edf0:	6812      	ldr	r2, [r2, #0]
 800edf2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800edf6:	f043 0301 	orr.w	r3, r3, #1
 800edfa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	7adb      	ldrb	r3, [r3, #11]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d005      	beq.n	800ee10 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ee04:	4b04      	ldr	r3, [pc, #16]	@ (800ee18 <HAL_PCD_SuspendCallback+0x48>)
 800ee06:	691b      	ldr	r3, [r3, #16]
 800ee08:	4a03      	ldr	r2, [pc, #12]	@ (800ee18 <HAL_PCD_SuspendCallback+0x48>)
 800ee0a:	f043 0306 	orr.w	r3, r3, #6
 800ee0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ee10:	bf00      	nop
 800ee12:	3708      	adds	r7, #8
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}
 800ee18:	e000ed00 	.word	0xe000ed00

0800ee1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b082      	sub	sp, #8
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f7fe fc2b 	bl	800d686 <USBD_LL_Resume>
}
 800ee30:	bf00      	nop
 800ee32:	3708      	adds	r7, #8
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}

0800ee38 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b082      	sub	sp, #8
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
 800ee40:	460b      	mov	r3, r1
 800ee42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800ee4a:	78fa      	ldrb	r2, [r7, #3]
 800ee4c:	4611      	mov	r1, r2
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f7fe fc83 	bl	800d75a <USBD_LL_IsoOUTIncomplete>
}
 800ee54:	bf00      	nop
 800ee56:	3708      	adds	r7, #8
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}

0800ee5c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b082      	sub	sp, #8
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
 800ee64:	460b      	mov	r3, r1
 800ee66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800ee6e:	78fa      	ldrb	r2, [r7, #3]
 800ee70:	4611      	mov	r1, r2
 800ee72:	4618      	mov	r0, r3
 800ee74:	f7fe fc3f 	bl	800d6f6 <USBD_LL_IsoINIncomplete>
}
 800ee78:	bf00      	nop
 800ee7a:	3708      	adds	r7, #8
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	bd80      	pop	{r7, pc}

0800ee80 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b082      	sub	sp, #8
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f7fe fc95 	bl	800d7be <USBD_LL_DevConnected>
}
 800ee94:	bf00      	nop
 800ee96:	3708      	adds	r7, #8
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}

0800ee9c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b082      	sub	sp, #8
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f7fe fc92 	bl	800d7d4 <USBD_LL_DevDisconnected>
}
 800eeb0:	bf00      	nop
 800eeb2:	3708      	adds	r7, #8
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}

0800eeb8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b082      	sub	sp, #8
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	781b      	ldrb	r3, [r3, #0]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d13f      	bne.n	800ef48 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800eec8:	4a22      	ldr	r2, [pc, #136]	@ (800ef54 <USBD_LL_Init+0x9c>)
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	4a20      	ldr	r2, [pc, #128]	@ (800ef54 <USBD_LL_Init+0x9c>)
 800eed4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800eed8:	4b1e      	ldr	r3, [pc, #120]	@ (800ef54 <USBD_LL_Init+0x9c>)
 800eeda:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800eede:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800eee0:	4b1c      	ldr	r3, [pc, #112]	@ (800ef54 <USBD_LL_Init+0x9c>)
 800eee2:	2206      	movs	r2, #6
 800eee4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800eee6:	4b1b      	ldr	r3, [pc, #108]	@ (800ef54 <USBD_LL_Init+0x9c>)
 800eee8:	2202      	movs	r2, #2
 800eeea:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800eeec:	4b19      	ldr	r3, [pc, #100]	@ (800ef54 <USBD_LL_Init+0x9c>)
 800eeee:	2200      	movs	r2, #0
 800eef0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800eef2:	4b18      	ldr	r3, [pc, #96]	@ (800ef54 <USBD_LL_Init+0x9c>)
 800eef4:	2202      	movs	r2, #2
 800eef6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800eef8:	4b16      	ldr	r3, [pc, #88]	@ (800ef54 <USBD_LL_Init+0x9c>)
 800eefa:	2200      	movs	r2, #0
 800eefc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800eefe:	4b15      	ldr	r3, [pc, #84]	@ (800ef54 <USBD_LL_Init+0x9c>)
 800ef00:	2200      	movs	r2, #0
 800ef02:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ef04:	4b13      	ldr	r3, [pc, #76]	@ (800ef54 <USBD_LL_Init+0x9c>)
 800ef06:	2200      	movs	r2, #0
 800ef08:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800ef0a:	4b12      	ldr	r3, [pc, #72]	@ (800ef54 <USBD_LL_Init+0x9c>)
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ef10:	4b10      	ldr	r3, [pc, #64]	@ (800ef54 <USBD_LL_Init+0x9c>)
 800ef12:	2200      	movs	r2, #0
 800ef14:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ef16:	4b0f      	ldr	r3, [pc, #60]	@ (800ef54 <USBD_LL_Init+0x9c>)
 800ef18:	2200      	movs	r2, #0
 800ef1a:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ef1c:	480d      	ldr	r0, [pc, #52]	@ (800ef54 <USBD_LL_Init+0x9c>)
 800ef1e:	f7f5 fa8e 	bl	800443e <HAL_PCD_Init>
 800ef22:	4603      	mov	r3, r0
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d001      	beq.n	800ef2c <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800ef28:	f7f3 f8a0 	bl	800206c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ef2c:	2180      	movs	r1, #128	@ 0x80
 800ef2e:	4809      	ldr	r0, [pc, #36]	@ (800ef54 <USBD_LL_Init+0x9c>)
 800ef30:	f7f6 fcd9 	bl	80058e6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ef34:	2240      	movs	r2, #64	@ 0x40
 800ef36:	2100      	movs	r1, #0
 800ef38:	4806      	ldr	r0, [pc, #24]	@ (800ef54 <USBD_LL_Init+0x9c>)
 800ef3a:	f7f6 fc8d 	bl	8005858 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ef3e:	2280      	movs	r2, #128	@ 0x80
 800ef40:	2101      	movs	r1, #1
 800ef42:	4804      	ldr	r0, [pc, #16]	@ (800ef54 <USBD_LL_Init+0x9c>)
 800ef44:	f7f6 fc88 	bl	8005858 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ef48:	2300      	movs	r3, #0
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3708      	adds	r7, #8
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop
 800ef54:	20002080 	.word	0x20002080

0800ef58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b084      	sub	sp, #16
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef60:	2300      	movs	r3, #0
 800ef62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef64:	2300      	movs	r3, #0
 800ef66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7f5 fb7b 	bl	800466a <HAL_PCD_Start>
 800ef74:	4603      	mov	r3, r0
 800ef76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef78:	7bfb      	ldrb	r3, [r7, #15]
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f000 f97e 	bl	800f27c <USBD_Get_USB_Status>
 800ef80:	4603      	mov	r3, r0
 800ef82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef84:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	3710      	adds	r7, #16
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}

0800ef8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ef8e:	b580      	push	{r7, lr}
 800ef90:	b084      	sub	sp, #16
 800ef92:	af00      	add	r7, sp, #0
 800ef94:	6078      	str	r0, [r7, #4]
 800ef96:	4608      	mov	r0, r1
 800ef98:	4611      	mov	r1, r2
 800ef9a:	461a      	mov	r2, r3
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	70fb      	strb	r3, [r7, #3]
 800efa0:	460b      	mov	r3, r1
 800efa2:	70bb      	strb	r3, [r7, #2]
 800efa4:	4613      	mov	r3, r2
 800efa6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efa8:	2300      	movs	r3, #0
 800efaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efac:	2300      	movs	r3, #0
 800efae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800efb6:	78bb      	ldrb	r3, [r7, #2]
 800efb8:	883a      	ldrh	r2, [r7, #0]
 800efba:	78f9      	ldrb	r1, [r7, #3]
 800efbc:	f7f6 f869 	bl	8005092 <HAL_PCD_EP_Open>
 800efc0:	4603      	mov	r3, r0
 800efc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800efc4:	7bfb      	ldrb	r3, [r7, #15]
 800efc6:	4618      	mov	r0, r3
 800efc8:	f000 f958 	bl	800f27c <USBD_Get_USB_Status>
 800efcc:	4603      	mov	r3, r0
 800efce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800efd0:	7bbb      	ldrb	r3, [r7, #14]
}
 800efd2:	4618      	mov	r0, r3
 800efd4:	3710      	adds	r7, #16
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}

0800efda <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800efda:	b580      	push	{r7, lr}
 800efdc:	b084      	sub	sp, #16
 800efde:	af00      	add	r7, sp, #0
 800efe0:	6078      	str	r0, [r7, #4]
 800efe2:	460b      	mov	r3, r1
 800efe4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efe6:	2300      	movs	r3, #0
 800efe8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efea:	2300      	movs	r3, #0
 800efec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800eff4:	78fa      	ldrb	r2, [r7, #3]
 800eff6:	4611      	mov	r1, r2
 800eff8:	4618      	mov	r0, r3
 800effa:	f7f6 f8b2 	bl	8005162 <HAL_PCD_EP_Close>
 800effe:	4603      	mov	r3, r0
 800f000:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f002:	7bfb      	ldrb	r3, [r7, #15]
 800f004:	4618      	mov	r0, r3
 800f006:	f000 f939 	bl	800f27c <USBD_Get_USB_Status>
 800f00a:	4603      	mov	r3, r0
 800f00c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f00e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f010:	4618      	mov	r0, r3
 800f012:	3710      	adds	r7, #16
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}

0800f018 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b084      	sub	sp, #16
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
 800f020:	460b      	mov	r3, r1
 800f022:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f024:	2300      	movs	r3, #0
 800f026:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f028:	2300      	movs	r3, #0
 800f02a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f032:	78fa      	ldrb	r2, [r7, #3]
 800f034:	4611      	mov	r1, r2
 800f036:	4618      	mov	r0, r3
 800f038:	f7f6 f96a 	bl	8005310 <HAL_PCD_EP_SetStall>
 800f03c:	4603      	mov	r3, r0
 800f03e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f040:	7bfb      	ldrb	r3, [r7, #15]
 800f042:	4618      	mov	r0, r3
 800f044:	f000 f91a 	bl	800f27c <USBD_Get_USB_Status>
 800f048:	4603      	mov	r3, r0
 800f04a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f04c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f04e:	4618      	mov	r0, r3
 800f050:	3710      	adds	r7, #16
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}

0800f056 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f056:	b580      	push	{r7, lr}
 800f058:	b084      	sub	sp, #16
 800f05a:	af00      	add	r7, sp, #0
 800f05c:	6078      	str	r0, [r7, #4]
 800f05e:	460b      	mov	r3, r1
 800f060:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f062:	2300      	movs	r3, #0
 800f064:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f066:	2300      	movs	r3, #0
 800f068:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f070:	78fa      	ldrb	r2, [r7, #3]
 800f072:	4611      	mov	r1, r2
 800f074:	4618      	mov	r0, r3
 800f076:	f7f6 f9ae 	bl	80053d6 <HAL_PCD_EP_ClrStall>
 800f07a:	4603      	mov	r3, r0
 800f07c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f07e:	7bfb      	ldrb	r3, [r7, #15]
 800f080:	4618      	mov	r0, r3
 800f082:	f000 f8fb 	bl	800f27c <USBD_Get_USB_Status>
 800f086:	4603      	mov	r3, r0
 800f088:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f08a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f08c:	4618      	mov	r0, r3
 800f08e:	3710      	adds	r7, #16
 800f090:	46bd      	mov	sp, r7
 800f092:	bd80      	pop	{r7, pc}

0800f094 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f094:	b480      	push	{r7}
 800f096:	b085      	sub	sp, #20
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
 800f09c:	460b      	mov	r3, r1
 800f09e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f0a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f0a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	da0b      	bge.n	800f0c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f0b0:	78fb      	ldrb	r3, [r7, #3]
 800f0b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f0b6:	68f9      	ldr	r1, [r7, #12]
 800f0b8:	4613      	mov	r3, r2
 800f0ba:	00db      	lsls	r3, r3, #3
 800f0bc:	4413      	add	r3, r2
 800f0be:	009b      	lsls	r3, r3, #2
 800f0c0:	440b      	add	r3, r1
 800f0c2:	3316      	adds	r3, #22
 800f0c4:	781b      	ldrb	r3, [r3, #0]
 800f0c6:	e00b      	b.n	800f0e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f0c8:	78fb      	ldrb	r3, [r7, #3]
 800f0ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f0ce:	68f9      	ldr	r1, [r7, #12]
 800f0d0:	4613      	mov	r3, r2
 800f0d2:	00db      	lsls	r3, r3, #3
 800f0d4:	4413      	add	r3, r2
 800f0d6:	009b      	lsls	r3, r3, #2
 800f0d8:	440b      	add	r3, r1
 800f0da:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800f0de:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3714      	adds	r7, #20
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ea:	4770      	bx	lr

0800f0ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b084      	sub	sp, #16
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	460b      	mov	r3, r1
 800f0f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f106:	78fa      	ldrb	r2, [r7, #3]
 800f108:	4611      	mov	r1, r2
 800f10a:	4618      	mov	r0, r3
 800f10c:	f7f5 ff9d 	bl	800504a <HAL_PCD_SetAddress>
 800f110:	4603      	mov	r3, r0
 800f112:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f114:	7bfb      	ldrb	r3, [r7, #15]
 800f116:	4618      	mov	r0, r3
 800f118:	f000 f8b0 	bl	800f27c <USBD_Get_USB_Status>
 800f11c:	4603      	mov	r3, r0
 800f11e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f120:	7bbb      	ldrb	r3, [r7, #14]
}
 800f122:	4618      	mov	r0, r3
 800f124:	3710      	adds	r7, #16
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}

0800f12a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f12a:	b580      	push	{r7, lr}
 800f12c:	b086      	sub	sp, #24
 800f12e:	af00      	add	r7, sp, #0
 800f130:	60f8      	str	r0, [r7, #12]
 800f132:	607a      	str	r2, [r7, #4]
 800f134:	603b      	str	r3, [r7, #0]
 800f136:	460b      	mov	r3, r1
 800f138:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f13a:	2300      	movs	r3, #0
 800f13c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f13e:	2300      	movs	r3, #0
 800f140:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f148:	7af9      	ldrb	r1, [r7, #11]
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	687a      	ldr	r2, [r7, #4]
 800f14e:	f7f6 f8a5 	bl	800529c <HAL_PCD_EP_Transmit>
 800f152:	4603      	mov	r3, r0
 800f154:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f156:	7dfb      	ldrb	r3, [r7, #23]
 800f158:	4618      	mov	r0, r3
 800f15a:	f000 f88f 	bl	800f27c <USBD_Get_USB_Status>
 800f15e:	4603      	mov	r3, r0
 800f160:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f162:	7dbb      	ldrb	r3, [r7, #22]
}
 800f164:	4618      	mov	r0, r3
 800f166:	3718      	adds	r7, #24
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}

0800f16c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b086      	sub	sp, #24
 800f170:	af00      	add	r7, sp, #0
 800f172:	60f8      	str	r0, [r7, #12]
 800f174:	607a      	str	r2, [r7, #4]
 800f176:	603b      	str	r3, [r7, #0]
 800f178:	460b      	mov	r3, r1
 800f17a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f17c:	2300      	movs	r3, #0
 800f17e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f180:	2300      	movs	r3, #0
 800f182:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f18a:	7af9      	ldrb	r1, [r7, #11]
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	687a      	ldr	r2, [r7, #4]
 800f190:	f7f6 f831 	bl	80051f6 <HAL_PCD_EP_Receive>
 800f194:	4603      	mov	r3, r0
 800f196:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f198:	7dfb      	ldrb	r3, [r7, #23]
 800f19a:	4618      	mov	r0, r3
 800f19c:	f000 f86e 	bl	800f27c <USBD_Get_USB_Status>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f1a4:	7dbb      	ldrb	r3, [r7, #22]
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3718      	adds	r7, #24
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}

0800f1ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f1ae:	b580      	push	{r7, lr}
 800f1b0:	b082      	sub	sp, #8
 800f1b2:	af00      	add	r7, sp, #0
 800f1b4:	6078      	str	r0, [r7, #4]
 800f1b6:	460b      	mov	r3, r1
 800f1b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f1c0:	78fa      	ldrb	r2, [r7, #3]
 800f1c2:	4611      	mov	r1, r2
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	f7f6 f851 	bl	800526c <HAL_PCD_EP_GetRxCount>
 800f1ca:	4603      	mov	r3, r0
}
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	3708      	adds	r7, #8
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd80      	pop	{r7, pc}

0800f1d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b082      	sub	sp, #8
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
 800f1dc:	460b      	mov	r3, r1
 800f1de:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800f1e0:	78fb      	ldrb	r3, [r7, #3]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d002      	beq.n	800f1ec <HAL_PCDEx_LPM_Callback+0x18>
 800f1e6:	2b01      	cmp	r3, #1
 800f1e8:	d01f      	beq.n	800f22a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800f1ea:	e03b      	b.n	800f264 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	7adb      	ldrb	r3, [r3, #11]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d007      	beq.n	800f204 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f1f4:	f000 f83c 	bl	800f270 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f1f8:	4b1c      	ldr	r3, [pc, #112]	@ (800f26c <HAL_PCDEx_LPM_Callback+0x98>)
 800f1fa:	691b      	ldr	r3, [r3, #16]
 800f1fc:	4a1b      	ldr	r2, [pc, #108]	@ (800f26c <HAL_PCDEx_LPM_Callback+0x98>)
 800f1fe:	f023 0306 	bic.w	r3, r3, #6
 800f202:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	687a      	ldr	r2, [r7, #4]
 800f210:	6812      	ldr	r2, [r2, #0]
 800f212:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f216:	f023 0301 	bic.w	r3, r3, #1
 800f21a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f222:	4618      	mov	r0, r3
 800f224:	f7fe fa2f 	bl	800d686 <USBD_LL_Resume>
    break;
 800f228:	e01c      	b.n	800f264 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	687a      	ldr	r2, [r7, #4]
 800f236:	6812      	ldr	r2, [r2, #0]
 800f238:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f23c:	f043 0301 	orr.w	r3, r3, #1
 800f240:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f248:	4618      	mov	r0, r3
 800f24a:	f7fe fa00 	bl	800d64e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	7adb      	ldrb	r3, [r3, #11]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d005      	beq.n	800f262 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f256:	4b05      	ldr	r3, [pc, #20]	@ (800f26c <HAL_PCDEx_LPM_Callback+0x98>)
 800f258:	691b      	ldr	r3, [r3, #16]
 800f25a:	4a04      	ldr	r2, [pc, #16]	@ (800f26c <HAL_PCDEx_LPM_Callback+0x98>)
 800f25c:	f043 0306 	orr.w	r3, r3, #6
 800f260:	6113      	str	r3, [r2, #16]
    break;
 800f262:	bf00      	nop
}
 800f264:	bf00      	nop
 800f266:	3708      	adds	r7, #8
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}
 800f26c:	e000ed00 	.word	0xe000ed00

0800f270 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f274:	f7f2 f9f6 	bl	8001664 <SystemClock_Config>
}
 800f278:	bf00      	nop
 800f27a:	bd80      	pop	{r7, pc}

0800f27c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f27c:	b480      	push	{r7}
 800f27e:	b085      	sub	sp, #20
 800f280:	af00      	add	r7, sp, #0
 800f282:	4603      	mov	r3, r0
 800f284:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f286:	2300      	movs	r3, #0
 800f288:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f28a:	79fb      	ldrb	r3, [r7, #7]
 800f28c:	2b03      	cmp	r3, #3
 800f28e:	d817      	bhi.n	800f2c0 <USBD_Get_USB_Status+0x44>
 800f290:	a201      	add	r2, pc, #4	@ (adr r2, 800f298 <USBD_Get_USB_Status+0x1c>)
 800f292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f296:	bf00      	nop
 800f298:	0800f2a9 	.word	0x0800f2a9
 800f29c:	0800f2af 	.word	0x0800f2af
 800f2a0:	0800f2b5 	.word	0x0800f2b5
 800f2a4:	0800f2bb 	.word	0x0800f2bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	73fb      	strb	r3, [r7, #15]
    break;
 800f2ac:	e00b      	b.n	800f2c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f2ae:	2303      	movs	r3, #3
 800f2b0:	73fb      	strb	r3, [r7, #15]
    break;
 800f2b2:	e008      	b.n	800f2c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f2b4:	2301      	movs	r3, #1
 800f2b6:	73fb      	strb	r3, [r7, #15]
    break;
 800f2b8:	e005      	b.n	800f2c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f2ba:	2303      	movs	r3, #3
 800f2bc:	73fb      	strb	r3, [r7, #15]
    break;
 800f2be:	e002      	b.n	800f2c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f2c0:	2303      	movs	r3, #3
 800f2c2:	73fb      	strb	r3, [r7, #15]
    break;
 800f2c4:	bf00      	nop
  }
  return usb_status;
 800f2c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	3714      	adds	r7, #20
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d2:	4770      	bx	lr

0800f2d4 <malloc>:
 800f2d4:	4b02      	ldr	r3, [pc, #8]	@ (800f2e0 <malloc+0xc>)
 800f2d6:	4601      	mov	r1, r0
 800f2d8:	6818      	ldr	r0, [r3, #0]
 800f2da:	f000 b82d 	b.w	800f338 <_malloc_r>
 800f2de:	bf00      	nop
 800f2e0:	20000118 	.word	0x20000118

0800f2e4 <free>:
 800f2e4:	4b02      	ldr	r3, [pc, #8]	@ (800f2f0 <free+0xc>)
 800f2e6:	4601      	mov	r1, r0
 800f2e8:	6818      	ldr	r0, [r3, #0]
 800f2ea:	f001 bd2d 	b.w	8010d48 <_free_r>
 800f2ee:	bf00      	nop
 800f2f0:	20000118 	.word	0x20000118

0800f2f4 <sbrk_aligned>:
 800f2f4:	b570      	push	{r4, r5, r6, lr}
 800f2f6:	4e0f      	ldr	r6, [pc, #60]	@ (800f334 <sbrk_aligned+0x40>)
 800f2f8:	460c      	mov	r4, r1
 800f2fa:	6831      	ldr	r1, [r6, #0]
 800f2fc:	4605      	mov	r5, r0
 800f2fe:	b911      	cbnz	r1, 800f306 <sbrk_aligned+0x12>
 800f300:	f000 fe78 	bl	800fff4 <_sbrk_r>
 800f304:	6030      	str	r0, [r6, #0]
 800f306:	4621      	mov	r1, r4
 800f308:	4628      	mov	r0, r5
 800f30a:	f000 fe73 	bl	800fff4 <_sbrk_r>
 800f30e:	1c43      	adds	r3, r0, #1
 800f310:	d103      	bne.n	800f31a <sbrk_aligned+0x26>
 800f312:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800f316:	4620      	mov	r0, r4
 800f318:	bd70      	pop	{r4, r5, r6, pc}
 800f31a:	1cc4      	adds	r4, r0, #3
 800f31c:	f024 0403 	bic.w	r4, r4, #3
 800f320:	42a0      	cmp	r0, r4
 800f322:	d0f8      	beq.n	800f316 <sbrk_aligned+0x22>
 800f324:	1a21      	subs	r1, r4, r0
 800f326:	4628      	mov	r0, r5
 800f328:	f000 fe64 	bl	800fff4 <_sbrk_r>
 800f32c:	3001      	adds	r0, #1
 800f32e:	d1f2      	bne.n	800f316 <sbrk_aligned+0x22>
 800f330:	e7ef      	b.n	800f312 <sbrk_aligned+0x1e>
 800f332:	bf00      	nop
 800f334:	20002560 	.word	0x20002560

0800f338 <_malloc_r>:
 800f338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f33c:	1ccd      	adds	r5, r1, #3
 800f33e:	f025 0503 	bic.w	r5, r5, #3
 800f342:	3508      	adds	r5, #8
 800f344:	2d0c      	cmp	r5, #12
 800f346:	bf38      	it	cc
 800f348:	250c      	movcc	r5, #12
 800f34a:	2d00      	cmp	r5, #0
 800f34c:	4606      	mov	r6, r0
 800f34e:	db01      	blt.n	800f354 <_malloc_r+0x1c>
 800f350:	42a9      	cmp	r1, r5
 800f352:	d904      	bls.n	800f35e <_malloc_r+0x26>
 800f354:	230c      	movs	r3, #12
 800f356:	6033      	str	r3, [r6, #0]
 800f358:	2000      	movs	r0, #0
 800f35a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f35e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f434 <_malloc_r+0xfc>
 800f362:	f000 f869 	bl	800f438 <__malloc_lock>
 800f366:	f8d8 3000 	ldr.w	r3, [r8]
 800f36a:	461c      	mov	r4, r3
 800f36c:	bb44      	cbnz	r4, 800f3c0 <_malloc_r+0x88>
 800f36e:	4629      	mov	r1, r5
 800f370:	4630      	mov	r0, r6
 800f372:	f7ff ffbf 	bl	800f2f4 <sbrk_aligned>
 800f376:	1c43      	adds	r3, r0, #1
 800f378:	4604      	mov	r4, r0
 800f37a:	d158      	bne.n	800f42e <_malloc_r+0xf6>
 800f37c:	f8d8 4000 	ldr.w	r4, [r8]
 800f380:	4627      	mov	r7, r4
 800f382:	2f00      	cmp	r7, #0
 800f384:	d143      	bne.n	800f40e <_malloc_r+0xd6>
 800f386:	2c00      	cmp	r4, #0
 800f388:	d04b      	beq.n	800f422 <_malloc_r+0xea>
 800f38a:	6823      	ldr	r3, [r4, #0]
 800f38c:	4639      	mov	r1, r7
 800f38e:	4630      	mov	r0, r6
 800f390:	eb04 0903 	add.w	r9, r4, r3
 800f394:	f000 fe2e 	bl	800fff4 <_sbrk_r>
 800f398:	4581      	cmp	r9, r0
 800f39a:	d142      	bne.n	800f422 <_malloc_r+0xea>
 800f39c:	6821      	ldr	r1, [r4, #0]
 800f39e:	1a6d      	subs	r5, r5, r1
 800f3a0:	4629      	mov	r1, r5
 800f3a2:	4630      	mov	r0, r6
 800f3a4:	f7ff ffa6 	bl	800f2f4 <sbrk_aligned>
 800f3a8:	3001      	adds	r0, #1
 800f3aa:	d03a      	beq.n	800f422 <_malloc_r+0xea>
 800f3ac:	6823      	ldr	r3, [r4, #0]
 800f3ae:	442b      	add	r3, r5
 800f3b0:	6023      	str	r3, [r4, #0]
 800f3b2:	f8d8 3000 	ldr.w	r3, [r8]
 800f3b6:	685a      	ldr	r2, [r3, #4]
 800f3b8:	bb62      	cbnz	r2, 800f414 <_malloc_r+0xdc>
 800f3ba:	f8c8 7000 	str.w	r7, [r8]
 800f3be:	e00f      	b.n	800f3e0 <_malloc_r+0xa8>
 800f3c0:	6822      	ldr	r2, [r4, #0]
 800f3c2:	1b52      	subs	r2, r2, r5
 800f3c4:	d420      	bmi.n	800f408 <_malloc_r+0xd0>
 800f3c6:	2a0b      	cmp	r2, #11
 800f3c8:	d917      	bls.n	800f3fa <_malloc_r+0xc2>
 800f3ca:	1961      	adds	r1, r4, r5
 800f3cc:	42a3      	cmp	r3, r4
 800f3ce:	6025      	str	r5, [r4, #0]
 800f3d0:	bf18      	it	ne
 800f3d2:	6059      	strne	r1, [r3, #4]
 800f3d4:	6863      	ldr	r3, [r4, #4]
 800f3d6:	bf08      	it	eq
 800f3d8:	f8c8 1000 	streq.w	r1, [r8]
 800f3dc:	5162      	str	r2, [r4, r5]
 800f3de:	604b      	str	r3, [r1, #4]
 800f3e0:	4630      	mov	r0, r6
 800f3e2:	f000 f82f 	bl	800f444 <__malloc_unlock>
 800f3e6:	f104 000b 	add.w	r0, r4, #11
 800f3ea:	1d23      	adds	r3, r4, #4
 800f3ec:	f020 0007 	bic.w	r0, r0, #7
 800f3f0:	1ac2      	subs	r2, r0, r3
 800f3f2:	bf1c      	itt	ne
 800f3f4:	1a1b      	subne	r3, r3, r0
 800f3f6:	50a3      	strne	r3, [r4, r2]
 800f3f8:	e7af      	b.n	800f35a <_malloc_r+0x22>
 800f3fa:	6862      	ldr	r2, [r4, #4]
 800f3fc:	42a3      	cmp	r3, r4
 800f3fe:	bf0c      	ite	eq
 800f400:	f8c8 2000 	streq.w	r2, [r8]
 800f404:	605a      	strne	r2, [r3, #4]
 800f406:	e7eb      	b.n	800f3e0 <_malloc_r+0xa8>
 800f408:	4623      	mov	r3, r4
 800f40a:	6864      	ldr	r4, [r4, #4]
 800f40c:	e7ae      	b.n	800f36c <_malloc_r+0x34>
 800f40e:	463c      	mov	r4, r7
 800f410:	687f      	ldr	r7, [r7, #4]
 800f412:	e7b6      	b.n	800f382 <_malloc_r+0x4a>
 800f414:	461a      	mov	r2, r3
 800f416:	685b      	ldr	r3, [r3, #4]
 800f418:	42a3      	cmp	r3, r4
 800f41a:	d1fb      	bne.n	800f414 <_malloc_r+0xdc>
 800f41c:	2300      	movs	r3, #0
 800f41e:	6053      	str	r3, [r2, #4]
 800f420:	e7de      	b.n	800f3e0 <_malloc_r+0xa8>
 800f422:	230c      	movs	r3, #12
 800f424:	6033      	str	r3, [r6, #0]
 800f426:	4630      	mov	r0, r6
 800f428:	f000 f80c 	bl	800f444 <__malloc_unlock>
 800f42c:	e794      	b.n	800f358 <_malloc_r+0x20>
 800f42e:	6005      	str	r5, [r0, #0]
 800f430:	e7d6      	b.n	800f3e0 <_malloc_r+0xa8>
 800f432:	bf00      	nop
 800f434:	20002564 	.word	0x20002564

0800f438 <__malloc_lock>:
 800f438:	4801      	ldr	r0, [pc, #4]	@ (800f440 <__malloc_lock+0x8>)
 800f43a:	f000 be28 	b.w	801008e <__retarget_lock_acquire_recursive>
 800f43e:	bf00      	nop
 800f440:	200026a8 	.word	0x200026a8

0800f444 <__malloc_unlock>:
 800f444:	4801      	ldr	r0, [pc, #4]	@ (800f44c <__malloc_unlock+0x8>)
 800f446:	f000 be23 	b.w	8010090 <__retarget_lock_release_recursive>
 800f44a:	bf00      	nop
 800f44c:	200026a8 	.word	0x200026a8

0800f450 <__cvt>:
 800f450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f454:	ec57 6b10 	vmov	r6, r7, d0
 800f458:	2f00      	cmp	r7, #0
 800f45a:	460c      	mov	r4, r1
 800f45c:	4619      	mov	r1, r3
 800f45e:	463b      	mov	r3, r7
 800f460:	bfbb      	ittet	lt
 800f462:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f466:	461f      	movlt	r7, r3
 800f468:	2300      	movge	r3, #0
 800f46a:	232d      	movlt	r3, #45	@ 0x2d
 800f46c:	700b      	strb	r3, [r1, #0]
 800f46e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f470:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f474:	4691      	mov	r9, r2
 800f476:	f023 0820 	bic.w	r8, r3, #32
 800f47a:	bfbc      	itt	lt
 800f47c:	4632      	movlt	r2, r6
 800f47e:	4616      	movlt	r6, r2
 800f480:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f484:	d005      	beq.n	800f492 <__cvt+0x42>
 800f486:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f48a:	d100      	bne.n	800f48e <__cvt+0x3e>
 800f48c:	3401      	adds	r4, #1
 800f48e:	2102      	movs	r1, #2
 800f490:	e000      	b.n	800f494 <__cvt+0x44>
 800f492:	2103      	movs	r1, #3
 800f494:	ab03      	add	r3, sp, #12
 800f496:	9301      	str	r3, [sp, #4]
 800f498:	ab02      	add	r3, sp, #8
 800f49a:	9300      	str	r3, [sp, #0]
 800f49c:	ec47 6b10 	vmov	d0, r6, r7
 800f4a0:	4653      	mov	r3, sl
 800f4a2:	4622      	mov	r2, r4
 800f4a4:	f000 fe80 	bl	80101a8 <_dtoa_r>
 800f4a8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f4ac:	4605      	mov	r5, r0
 800f4ae:	d119      	bne.n	800f4e4 <__cvt+0x94>
 800f4b0:	f019 0f01 	tst.w	r9, #1
 800f4b4:	d00e      	beq.n	800f4d4 <__cvt+0x84>
 800f4b6:	eb00 0904 	add.w	r9, r0, r4
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	2300      	movs	r3, #0
 800f4be:	4630      	mov	r0, r6
 800f4c0:	4639      	mov	r1, r7
 800f4c2:	f7f1 fb29 	bl	8000b18 <__aeabi_dcmpeq>
 800f4c6:	b108      	cbz	r0, 800f4cc <__cvt+0x7c>
 800f4c8:	f8cd 900c 	str.w	r9, [sp, #12]
 800f4cc:	2230      	movs	r2, #48	@ 0x30
 800f4ce:	9b03      	ldr	r3, [sp, #12]
 800f4d0:	454b      	cmp	r3, r9
 800f4d2:	d31e      	bcc.n	800f512 <__cvt+0xc2>
 800f4d4:	9b03      	ldr	r3, [sp, #12]
 800f4d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f4d8:	1b5b      	subs	r3, r3, r5
 800f4da:	4628      	mov	r0, r5
 800f4dc:	6013      	str	r3, [r2, #0]
 800f4de:	b004      	add	sp, #16
 800f4e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f4e8:	eb00 0904 	add.w	r9, r0, r4
 800f4ec:	d1e5      	bne.n	800f4ba <__cvt+0x6a>
 800f4ee:	7803      	ldrb	r3, [r0, #0]
 800f4f0:	2b30      	cmp	r3, #48	@ 0x30
 800f4f2:	d10a      	bne.n	800f50a <__cvt+0xba>
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	4630      	mov	r0, r6
 800f4fa:	4639      	mov	r1, r7
 800f4fc:	f7f1 fb0c 	bl	8000b18 <__aeabi_dcmpeq>
 800f500:	b918      	cbnz	r0, 800f50a <__cvt+0xba>
 800f502:	f1c4 0401 	rsb	r4, r4, #1
 800f506:	f8ca 4000 	str.w	r4, [sl]
 800f50a:	f8da 3000 	ldr.w	r3, [sl]
 800f50e:	4499      	add	r9, r3
 800f510:	e7d3      	b.n	800f4ba <__cvt+0x6a>
 800f512:	1c59      	adds	r1, r3, #1
 800f514:	9103      	str	r1, [sp, #12]
 800f516:	701a      	strb	r2, [r3, #0]
 800f518:	e7d9      	b.n	800f4ce <__cvt+0x7e>

0800f51a <__exponent>:
 800f51a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f51c:	2900      	cmp	r1, #0
 800f51e:	bfba      	itte	lt
 800f520:	4249      	neglt	r1, r1
 800f522:	232d      	movlt	r3, #45	@ 0x2d
 800f524:	232b      	movge	r3, #43	@ 0x2b
 800f526:	2909      	cmp	r1, #9
 800f528:	7002      	strb	r2, [r0, #0]
 800f52a:	7043      	strb	r3, [r0, #1]
 800f52c:	dd29      	ble.n	800f582 <__exponent+0x68>
 800f52e:	f10d 0307 	add.w	r3, sp, #7
 800f532:	461d      	mov	r5, r3
 800f534:	270a      	movs	r7, #10
 800f536:	461a      	mov	r2, r3
 800f538:	fbb1 f6f7 	udiv	r6, r1, r7
 800f53c:	fb07 1416 	mls	r4, r7, r6, r1
 800f540:	3430      	adds	r4, #48	@ 0x30
 800f542:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f546:	460c      	mov	r4, r1
 800f548:	2c63      	cmp	r4, #99	@ 0x63
 800f54a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800f54e:	4631      	mov	r1, r6
 800f550:	dcf1      	bgt.n	800f536 <__exponent+0x1c>
 800f552:	3130      	adds	r1, #48	@ 0x30
 800f554:	1e94      	subs	r4, r2, #2
 800f556:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f55a:	1c41      	adds	r1, r0, #1
 800f55c:	4623      	mov	r3, r4
 800f55e:	42ab      	cmp	r3, r5
 800f560:	d30a      	bcc.n	800f578 <__exponent+0x5e>
 800f562:	f10d 0309 	add.w	r3, sp, #9
 800f566:	1a9b      	subs	r3, r3, r2
 800f568:	42ac      	cmp	r4, r5
 800f56a:	bf88      	it	hi
 800f56c:	2300      	movhi	r3, #0
 800f56e:	3302      	adds	r3, #2
 800f570:	4403      	add	r3, r0
 800f572:	1a18      	subs	r0, r3, r0
 800f574:	b003      	add	sp, #12
 800f576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f578:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f57c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f580:	e7ed      	b.n	800f55e <__exponent+0x44>
 800f582:	2330      	movs	r3, #48	@ 0x30
 800f584:	3130      	adds	r1, #48	@ 0x30
 800f586:	7083      	strb	r3, [r0, #2]
 800f588:	70c1      	strb	r1, [r0, #3]
 800f58a:	1d03      	adds	r3, r0, #4
 800f58c:	e7f1      	b.n	800f572 <__exponent+0x58>
	...

0800f590 <_printf_float>:
 800f590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f594:	b08d      	sub	sp, #52	@ 0x34
 800f596:	460c      	mov	r4, r1
 800f598:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f59c:	4616      	mov	r6, r2
 800f59e:	461f      	mov	r7, r3
 800f5a0:	4605      	mov	r5, r0
 800f5a2:	f000 fcef 	bl	800ff84 <_localeconv_r>
 800f5a6:	6803      	ldr	r3, [r0, #0]
 800f5a8:	9304      	str	r3, [sp, #16]
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f7f0 fe88 	bl	80002c0 <strlen>
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800f5b4:	f8d8 3000 	ldr.w	r3, [r8]
 800f5b8:	9005      	str	r0, [sp, #20]
 800f5ba:	3307      	adds	r3, #7
 800f5bc:	f023 0307 	bic.w	r3, r3, #7
 800f5c0:	f103 0208 	add.w	r2, r3, #8
 800f5c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f5c8:	f8d4 b000 	ldr.w	fp, [r4]
 800f5cc:	f8c8 2000 	str.w	r2, [r8]
 800f5d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f5d4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f5d8:	9307      	str	r3, [sp, #28]
 800f5da:	f8cd 8018 	str.w	r8, [sp, #24]
 800f5de:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f5e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f5e6:	4b9c      	ldr	r3, [pc, #624]	@ (800f858 <_printf_float+0x2c8>)
 800f5e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f5ec:	f7f1 fac6 	bl	8000b7c <__aeabi_dcmpun>
 800f5f0:	bb70      	cbnz	r0, 800f650 <_printf_float+0xc0>
 800f5f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f5f6:	4b98      	ldr	r3, [pc, #608]	@ (800f858 <_printf_float+0x2c8>)
 800f5f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f5fc:	f7f1 faa0 	bl	8000b40 <__aeabi_dcmple>
 800f600:	bb30      	cbnz	r0, 800f650 <_printf_float+0xc0>
 800f602:	2200      	movs	r2, #0
 800f604:	2300      	movs	r3, #0
 800f606:	4640      	mov	r0, r8
 800f608:	4649      	mov	r1, r9
 800f60a:	f7f1 fa8f 	bl	8000b2c <__aeabi_dcmplt>
 800f60e:	b110      	cbz	r0, 800f616 <_printf_float+0x86>
 800f610:	232d      	movs	r3, #45	@ 0x2d
 800f612:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f616:	4a91      	ldr	r2, [pc, #580]	@ (800f85c <_printf_float+0x2cc>)
 800f618:	4b91      	ldr	r3, [pc, #580]	@ (800f860 <_printf_float+0x2d0>)
 800f61a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f61e:	bf8c      	ite	hi
 800f620:	4690      	movhi	r8, r2
 800f622:	4698      	movls	r8, r3
 800f624:	2303      	movs	r3, #3
 800f626:	6123      	str	r3, [r4, #16]
 800f628:	f02b 0304 	bic.w	r3, fp, #4
 800f62c:	6023      	str	r3, [r4, #0]
 800f62e:	f04f 0900 	mov.w	r9, #0
 800f632:	9700      	str	r7, [sp, #0]
 800f634:	4633      	mov	r3, r6
 800f636:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f638:	4621      	mov	r1, r4
 800f63a:	4628      	mov	r0, r5
 800f63c:	f000 f9d2 	bl	800f9e4 <_printf_common>
 800f640:	3001      	adds	r0, #1
 800f642:	f040 808d 	bne.w	800f760 <_printf_float+0x1d0>
 800f646:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f64a:	b00d      	add	sp, #52	@ 0x34
 800f64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f650:	4642      	mov	r2, r8
 800f652:	464b      	mov	r3, r9
 800f654:	4640      	mov	r0, r8
 800f656:	4649      	mov	r1, r9
 800f658:	f7f1 fa90 	bl	8000b7c <__aeabi_dcmpun>
 800f65c:	b140      	cbz	r0, 800f670 <_printf_float+0xe0>
 800f65e:	464b      	mov	r3, r9
 800f660:	2b00      	cmp	r3, #0
 800f662:	bfbc      	itt	lt
 800f664:	232d      	movlt	r3, #45	@ 0x2d
 800f666:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f66a:	4a7e      	ldr	r2, [pc, #504]	@ (800f864 <_printf_float+0x2d4>)
 800f66c:	4b7e      	ldr	r3, [pc, #504]	@ (800f868 <_printf_float+0x2d8>)
 800f66e:	e7d4      	b.n	800f61a <_printf_float+0x8a>
 800f670:	6863      	ldr	r3, [r4, #4]
 800f672:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f676:	9206      	str	r2, [sp, #24]
 800f678:	1c5a      	adds	r2, r3, #1
 800f67a:	d13b      	bne.n	800f6f4 <_printf_float+0x164>
 800f67c:	2306      	movs	r3, #6
 800f67e:	6063      	str	r3, [r4, #4]
 800f680:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f684:	2300      	movs	r3, #0
 800f686:	6022      	str	r2, [r4, #0]
 800f688:	9303      	str	r3, [sp, #12]
 800f68a:	ab0a      	add	r3, sp, #40	@ 0x28
 800f68c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f690:	ab09      	add	r3, sp, #36	@ 0x24
 800f692:	9300      	str	r3, [sp, #0]
 800f694:	6861      	ldr	r1, [r4, #4]
 800f696:	ec49 8b10 	vmov	d0, r8, r9
 800f69a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f69e:	4628      	mov	r0, r5
 800f6a0:	f7ff fed6 	bl	800f450 <__cvt>
 800f6a4:	9b06      	ldr	r3, [sp, #24]
 800f6a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f6a8:	2b47      	cmp	r3, #71	@ 0x47
 800f6aa:	4680      	mov	r8, r0
 800f6ac:	d129      	bne.n	800f702 <_printf_float+0x172>
 800f6ae:	1cc8      	adds	r0, r1, #3
 800f6b0:	db02      	blt.n	800f6b8 <_printf_float+0x128>
 800f6b2:	6863      	ldr	r3, [r4, #4]
 800f6b4:	4299      	cmp	r1, r3
 800f6b6:	dd41      	ble.n	800f73c <_printf_float+0x1ac>
 800f6b8:	f1aa 0a02 	sub.w	sl, sl, #2
 800f6bc:	fa5f fa8a 	uxtb.w	sl, sl
 800f6c0:	3901      	subs	r1, #1
 800f6c2:	4652      	mov	r2, sl
 800f6c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f6c8:	9109      	str	r1, [sp, #36]	@ 0x24
 800f6ca:	f7ff ff26 	bl	800f51a <__exponent>
 800f6ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f6d0:	1813      	adds	r3, r2, r0
 800f6d2:	2a01      	cmp	r2, #1
 800f6d4:	4681      	mov	r9, r0
 800f6d6:	6123      	str	r3, [r4, #16]
 800f6d8:	dc02      	bgt.n	800f6e0 <_printf_float+0x150>
 800f6da:	6822      	ldr	r2, [r4, #0]
 800f6dc:	07d2      	lsls	r2, r2, #31
 800f6de:	d501      	bpl.n	800f6e4 <_printf_float+0x154>
 800f6e0:	3301      	adds	r3, #1
 800f6e2:	6123      	str	r3, [r4, #16]
 800f6e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d0a2      	beq.n	800f632 <_printf_float+0xa2>
 800f6ec:	232d      	movs	r3, #45	@ 0x2d
 800f6ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f6f2:	e79e      	b.n	800f632 <_printf_float+0xa2>
 800f6f4:	9a06      	ldr	r2, [sp, #24]
 800f6f6:	2a47      	cmp	r2, #71	@ 0x47
 800f6f8:	d1c2      	bne.n	800f680 <_printf_float+0xf0>
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d1c0      	bne.n	800f680 <_printf_float+0xf0>
 800f6fe:	2301      	movs	r3, #1
 800f700:	e7bd      	b.n	800f67e <_printf_float+0xee>
 800f702:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f706:	d9db      	bls.n	800f6c0 <_printf_float+0x130>
 800f708:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f70c:	d118      	bne.n	800f740 <_printf_float+0x1b0>
 800f70e:	2900      	cmp	r1, #0
 800f710:	6863      	ldr	r3, [r4, #4]
 800f712:	dd0b      	ble.n	800f72c <_printf_float+0x19c>
 800f714:	6121      	str	r1, [r4, #16]
 800f716:	b913      	cbnz	r3, 800f71e <_printf_float+0x18e>
 800f718:	6822      	ldr	r2, [r4, #0]
 800f71a:	07d0      	lsls	r0, r2, #31
 800f71c:	d502      	bpl.n	800f724 <_printf_float+0x194>
 800f71e:	3301      	adds	r3, #1
 800f720:	440b      	add	r3, r1
 800f722:	6123      	str	r3, [r4, #16]
 800f724:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f726:	f04f 0900 	mov.w	r9, #0
 800f72a:	e7db      	b.n	800f6e4 <_printf_float+0x154>
 800f72c:	b913      	cbnz	r3, 800f734 <_printf_float+0x1a4>
 800f72e:	6822      	ldr	r2, [r4, #0]
 800f730:	07d2      	lsls	r2, r2, #31
 800f732:	d501      	bpl.n	800f738 <_printf_float+0x1a8>
 800f734:	3302      	adds	r3, #2
 800f736:	e7f4      	b.n	800f722 <_printf_float+0x192>
 800f738:	2301      	movs	r3, #1
 800f73a:	e7f2      	b.n	800f722 <_printf_float+0x192>
 800f73c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f740:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f742:	4299      	cmp	r1, r3
 800f744:	db05      	blt.n	800f752 <_printf_float+0x1c2>
 800f746:	6823      	ldr	r3, [r4, #0]
 800f748:	6121      	str	r1, [r4, #16]
 800f74a:	07d8      	lsls	r0, r3, #31
 800f74c:	d5ea      	bpl.n	800f724 <_printf_float+0x194>
 800f74e:	1c4b      	adds	r3, r1, #1
 800f750:	e7e7      	b.n	800f722 <_printf_float+0x192>
 800f752:	2900      	cmp	r1, #0
 800f754:	bfd4      	ite	le
 800f756:	f1c1 0202 	rsble	r2, r1, #2
 800f75a:	2201      	movgt	r2, #1
 800f75c:	4413      	add	r3, r2
 800f75e:	e7e0      	b.n	800f722 <_printf_float+0x192>
 800f760:	6823      	ldr	r3, [r4, #0]
 800f762:	055a      	lsls	r2, r3, #21
 800f764:	d407      	bmi.n	800f776 <_printf_float+0x1e6>
 800f766:	6923      	ldr	r3, [r4, #16]
 800f768:	4642      	mov	r2, r8
 800f76a:	4631      	mov	r1, r6
 800f76c:	4628      	mov	r0, r5
 800f76e:	47b8      	blx	r7
 800f770:	3001      	adds	r0, #1
 800f772:	d12b      	bne.n	800f7cc <_printf_float+0x23c>
 800f774:	e767      	b.n	800f646 <_printf_float+0xb6>
 800f776:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f77a:	f240 80dd 	bls.w	800f938 <_printf_float+0x3a8>
 800f77e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f782:	2200      	movs	r2, #0
 800f784:	2300      	movs	r3, #0
 800f786:	f7f1 f9c7 	bl	8000b18 <__aeabi_dcmpeq>
 800f78a:	2800      	cmp	r0, #0
 800f78c:	d033      	beq.n	800f7f6 <_printf_float+0x266>
 800f78e:	4a37      	ldr	r2, [pc, #220]	@ (800f86c <_printf_float+0x2dc>)
 800f790:	2301      	movs	r3, #1
 800f792:	4631      	mov	r1, r6
 800f794:	4628      	mov	r0, r5
 800f796:	47b8      	blx	r7
 800f798:	3001      	adds	r0, #1
 800f79a:	f43f af54 	beq.w	800f646 <_printf_float+0xb6>
 800f79e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f7a2:	4543      	cmp	r3, r8
 800f7a4:	db02      	blt.n	800f7ac <_printf_float+0x21c>
 800f7a6:	6823      	ldr	r3, [r4, #0]
 800f7a8:	07d8      	lsls	r0, r3, #31
 800f7aa:	d50f      	bpl.n	800f7cc <_printf_float+0x23c>
 800f7ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f7b0:	4631      	mov	r1, r6
 800f7b2:	4628      	mov	r0, r5
 800f7b4:	47b8      	blx	r7
 800f7b6:	3001      	adds	r0, #1
 800f7b8:	f43f af45 	beq.w	800f646 <_printf_float+0xb6>
 800f7bc:	f04f 0900 	mov.w	r9, #0
 800f7c0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800f7c4:	f104 0a1a 	add.w	sl, r4, #26
 800f7c8:	45c8      	cmp	r8, r9
 800f7ca:	dc09      	bgt.n	800f7e0 <_printf_float+0x250>
 800f7cc:	6823      	ldr	r3, [r4, #0]
 800f7ce:	079b      	lsls	r3, r3, #30
 800f7d0:	f100 8103 	bmi.w	800f9da <_printf_float+0x44a>
 800f7d4:	68e0      	ldr	r0, [r4, #12]
 800f7d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f7d8:	4298      	cmp	r0, r3
 800f7da:	bfb8      	it	lt
 800f7dc:	4618      	movlt	r0, r3
 800f7de:	e734      	b.n	800f64a <_printf_float+0xba>
 800f7e0:	2301      	movs	r3, #1
 800f7e2:	4652      	mov	r2, sl
 800f7e4:	4631      	mov	r1, r6
 800f7e6:	4628      	mov	r0, r5
 800f7e8:	47b8      	blx	r7
 800f7ea:	3001      	adds	r0, #1
 800f7ec:	f43f af2b 	beq.w	800f646 <_printf_float+0xb6>
 800f7f0:	f109 0901 	add.w	r9, r9, #1
 800f7f4:	e7e8      	b.n	800f7c8 <_printf_float+0x238>
 800f7f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	dc39      	bgt.n	800f870 <_printf_float+0x2e0>
 800f7fc:	4a1b      	ldr	r2, [pc, #108]	@ (800f86c <_printf_float+0x2dc>)
 800f7fe:	2301      	movs	r3, #1
 800f800:	4631      	mov	r1, r6
 800f802:	4628      	mov	r0, r5
 800f804:	47b8      	blx	r7
 800f806:	3001      	adds	r0, #1
 800f808:	f43f af1d 	beq.w	800f646 <_printf_float+0xb6>
 800f80c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f810:	ea59 0303 	orrs.w	r3, r9, r3
 800f814:	d102      	bne.n	800f81c <_printf_float+0x28c>
 800f816:	6823      	ldr	r3, [r4, #0]
 800f818:	07d9      	lsls	r1, r3, #31
 800f81a:	d5d7      	bpl.n	800f7cc <_printf_float+0x23c>
 800f81c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f820:	4631      	mov	r1, r6
 800f822:	4628      	mov	r0, r5
 800f824:	47b8      	blx	r7
 800f826:	3001      	adds	r0, #1
 800f828:	f43f af0d 	beq.w	800f646 <_printf_float+0xb6>
 800f82c:	f04f 0a00 	mov.w	sl, #0
 800f830:	f104 0b1a 	add.w	fp, r4, #26
 800f834:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f836:	425b      	negs	r3, r3
 800f838:	4553      	cmp	r3, sl
 800f83a:	dc01      	bgt.n	800f840 <_printf_float+0x2b0>
 800f83c:	464b      	mov	r3, r9
 800f83e:	e793      	b.n	800f768 <_printf_float+0x1d8>
 800f840:	2301      	movs	r3, #1
 800f842:	465a      	mov	r2, fp
 800f844:	4631      	mov	r1, r6
 800f846:	4628      	mov	r0, r5
 800f848:	47b8      	blx	r7
 800f84a:	3001      	adds	r0, #1
 800f84c:	f43f aefb 	beq.w	800f646 <_printf_float+0xb6>
 800f850:	f10a 0a01 	add.w	sl, sl, #1
 800f854:	e7ee      	b.n	800f834 <_printf_float+0x2a4>
 800f856:	bf00      	nop
 800f858:	7fefffff 	.word	0x7fefffff
 800f85c:	0801205c 	.word	0x0801205c
 800f860:	08012058 	.word	0x08012058
 800f864:	08012064 	.word	0x08012064
 800f868:	08012060 	.word	0x08012060
 800f86c:	08012068 	.word	0x08012068
 800f870:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f872:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f876:	4553      	cmp	r3, sl
 800f878:	bfa8      	it	ge
 800f87a:	4653      	movge	r3, sl
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	4699      	mov	r9, r3
 800f880:	dc36      	bgt.n	800f8f0 <_printf_float+0x360>
 800f882:	f04f 0b00 	mov.w	fp, #0
 800f886:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f88a:	f104 021a 	add.w	r2, r4, #26
 800f88e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f890:	9306      	str	r3, [sp, #24]
 800f892:	eba3 0309 	sub.w	r3, r3, r9
 800f896:	455b      	cmp	r3, fp
 800f898:	dc31      	bgt.n	800f8fe <_printf_float+0x36e>
 800f89a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f89c:	459a      	cmp	sl, r3
 800f89e:	dc3a      	bgt.n	800f916 <_printf_float+0x386>
 800f8a0:	6823      	ldr	r3, [r4, #0]
 800f8a2:	07da      	lsls	r2, r3, #31
 800f8a4:	d437      	bmi.n	800f916 <_printf_float+0x386>
 800f8a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8a8:	ebaa 0903 	sub.w	r9, sl, r3
 800f8ac:	9b06      	ldr	r3, [sp, #24]
 800f8ae:	ebaa 0303 	sub.w	r3, sl, r3
 800f8b2:	4599      	cmp	r9, r3
 800f8b4:	bfa8      	it	ge
 800f8b6:	4699      	movge	r9, r3
 800f8b8:	f1b9 0f00 	cmp.w	r9, #0
 800f8bc:	dc33      	bgt.n	800f926 <_printf_float+0x396>
 800f8be:	f04f 0800 	mov.w	r8, #0
 800f8c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f8c6:	f104 0b1a 	add.w	fp, r4, #26
 800f8ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8cc:	ebaa 0303 	sub.w	r3, sl, r3
 800f8d0:	eba3 0309 	sub.w	r3, r3, r9
 800f8d4:	4543      	cmp	r3, r8
 800f8d6:	f77f af79 	ble.w	800f7cc <_printf_float+0x23c>
 800f8da:	2301      	movs	r3, #1
 800f8dc:	465a      	mov	r2, fp
 800f8de:	4631      	mov	r1, r6
 800f8e0:	4628      	mov	r0, r5
 800f8e2:	47b8      	blx	r7
 800f8e4:	3001      	adds	r0, #1
 800f8e6:	f43f aeae 	beq.w	800f646 <_printf_float+0xb6>
 800f8ea:	f108 0801 	add.w	r8, r8, #1
 800f8ee:	e7ec      	b.n	800f8ca <_printf_float+0x33a>
 800f8f0:	4642      	mov	r2, r8
 800f8f2:	4631      	mov	r1, r6
 800f8f4:	4628      	mov	r0, r5
 800f8f6:	47b8      	blx	r7
 800f8f8:	3001      	adds	r0, #1
 800f8fa:	d1c2      	bne.n	800f882 <_printf_float+0x2f2>
 800f8fc:	e6a3      	b.n	800f646 <_printf_float+0xb6>
 800f8fe:	2301      	movs	r3, #1
 800f900:	4631      	mov	r1, r6
 800f902:	4628      	mov	r0, r5
 800f904:	9206      	str	r2, [sp, #24]
 800f906:	47b8      	blx	r7
 800f908:	3001      	adds	r0, #1
 800f90a:	f43f ae9c 	beq.w	800f646 <_printf_float+0xb6>
 800f90e:	9a06      	ldr	r2, [sp, #24]
 800f910:	f10b 0b01 	add.w	fp, fp, #1
 800f914:	e7bb      	b.n	800f88e <_printf_float+0x2fe>
 800f916:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f91a:	4631      	mov	r1, r6
 800f91c:	4628      	mov	r0, r5
 800f91e:	47b8      	blx	r7
 800f920:	3001      	adds	r0, #1
 800f922:	d1c0      	bne.n	800f8a6 <_printf_float+0x316>
 800f924:	e68f      	b.n	800f646 <_printf_float+0xb6>
 800f926:	9a06      	ldr	r2, [sp, #24]
 800f928:	464b      	mov	r3, r9
 800f92a:	4442      	add	r2, r8
 800f92c:	4631      	mov	r1, r6
 800f92e:	4628      	mov	r0, r5
 800f930:	47b8      	blx	r7
 800f932:	3001      	adds	r0, #1
 800f934:	d1c3      	bne.n	800f8be <_printf_float+0x32e>
 800f936:	e686      	b.n	800f646 <_printf_float+0xb6>
 800f938:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f93c:	f1ba 0f01 	cmp.w	sl, #1
 800f940:	dc01      	bgt.n	800f946 <_printf_float+0x3b6>
 800f942:	07db      	lsls	r3, r3, #31
 800f944:	d536      	bpl.n	800f9b4 <_printf_float+0x424>
 800f946:	2301      	movs	r3, #1
 800f948:	4642      	mov	r2, r8
 800f94a:	4631      	mov	r1, r6
 800f94c:	4628      	mov	r0, r5
 800f94e:	47b8      	blx	r7
 800f950:	3001      	adds	r0, #1
 800f952:	f43f ae78 	beq.w	800f646 <_printf_float+0xb6>
 800f956:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f95a:	4631      	mov	r1, r6
 800f95c:	4628      	mov	r0, r5
 800f95e:	47b8      	blx	r7
 800f960:	3001      	adds	r0, #1
 800f962:	f43f ae70 	beq.w	800f646 <_printf_float+0xb6>
 800f966:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f96a:	2200      	movs	r2, #0
 800f96c:	2300      	movs	r3, #0
 800f96e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800f972:	f7f1 f8d1 	bl	8000b18 <__aeabi_dcmpeq>
 800f976:	b9c0      	cbnz	r0, 800f9aa <_printf_float+0x41a>
 800f978:	4653      	mov	r3, sl
 800f97a:	f108 0201 	add.w	r2, r8, #1
 800f97e:	4631      	mov	r1, r6
 800f980:	4628      	mov	r0, r5
 800f982:	47b8      	blx	r7
 800f984:	3001      	adds	r0, #1
 800f986:	d10c      	bne.n	800f9a2 <_printf_float+0x412>
 800f988:	e65d      	b.n	800f646 <_printf_float+0xb6>
 800f98a:	2301      	movs	r3, #1
 800f98c:	465a      	mov	r2, fp
 800f98e:	4631      	mov	r1, r6
 800f990:	4628      	mov	r0, r5
 800f992:	47b8      	blx	r7
 800f994:	3001      	adds	r0, #1
 800f996:	f43f ae56 	beq.w	800f646 <_printf_float+0xb6>
 800f99a:	f108 0801 	add.w	r8, r8, #1
 800f99e:	45d0      	cmp	r8, sl
 800f9a0:	dbf3      	blt.n	800f98a <_printf_float+0x3fa>
 800f9a2:	464b      	mov	r3, r9
 800f9a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f9a8:	e6df      	b.n	800f76a <_printf_float+0x1da>
 800f9aa:	f04f 0800 	mov.w	r8, #0
 800f9ae:	f104 0b1a 	add.w	fp, r4, #26
 800f9b2:	e7f4      	b.n	800f99e <_printf_float+0x40e>
 800f9b4:	2301      	movs	r3, #1
 800f9b6:	4642      	mov	r2, r8
 800f9b8:	e7e1      	b.n	800f97e <_printf_float+0x3ee>
 800f9ba:	2301      	movs	r3, #1
 800f9bc:	464a      	mov	r2, r9
 800f9be:	4631      	mov	r1, r6
 800f9c0:	4628      	mov	r0, r5
 800f9c2:	47b8      	blx	r7
 800f9c4:	3001      	adds	r0, #1
 800f9c6:	f43f ae3e 	beq.w	800f646 <_printf_float+0xb6>
 800f9ca:	f108 0801 	add.w	r8, r8, #1
 800f9ce:	68e3      	ldr	r3, [r4, #12]
 800f9d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f9d2:	1a5b      	subs	r3, r3, r1
 800f9d4:	4543      	cmp	r3, r8
 800f9d6:	dcf0      	bgt.n	800f9ba <_printf_float+0x42a>
 800f9d8:	e6fc      	b.n	800f7d4 <_printf_float+0x244>
 800f9da:	f04f 0800 	mov.w	r8, #0
 800f9de:	f104 0919 	add.w	r9, r4, #25
 800f9e2:	e7f4      	b.n	800f9ce <_printf_float+0x43e>

0800f9e4 <_printf_common>:
 800f9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9e8:	4616      	mov	r6, r2
 800f9ea:	4698      	mov	r8, r3
 800f9ec:	688a      	ldr	r2, [r1, #8]
 800f9ee:	690b      	ldr	r3, [r1, #16]
 800f9f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f9f4:	4293      	cmp	r3, r2
 800f9f6:	bfb8      	it	lt
 800f9f8:	4613      	movlt	r3, r2
 800f9fa:	6033      	str	r3, [r6, #0]
 800f9fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fa00:	4607      	mov	r7, r0
 800fa02:	460c      	mov	r4, r1
 800fa04:	b10a      	cbz	r2, 800fa0a <_printf_common+0x26>
 800fa06:	3301      	adds	r3, #1
 800fa08:	6033      	str	r3, [r6, #0]
 800fa0a:	6823      	ldr	r3, [r4, #0]
 800fa0c:	0699      	lsls	r1, r3, #26
 800fa0e:	bf42      	ittt	mi
 800fa10:	6833      	ldrmi	r3, [r6, #0]
 800fa12:	3302      	addmi	r3, #2
 800fa14:	6033      	strmi	r3, [r6, #0]
 800fa16:	6825      	ldr	r5, [r4, #0]
 800fa18:	f015 0506 	ands.w	r5, r5, #6
 800fa1c:	d106      	bne.n	800fa2c <_printf_common+0x48>
 800fa1e:	f104 0a19 	add.w	sl, r4, #25
 800fa22:	68e3      	ldr	r3, [r4, #12]
 800fa24:	6832      	ldr	r2, [r6, #0]
 800fa26:	1a9b      	subs	r3, r3, r2
 800fa28:	42ab      	cmp	r3, r5
 800fa2a:	dc26      	bgt.n	800fa7a <_printf_common+0x96>
 800fa2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fa30:	6822      	ldr	r2, [r4, #0]
 800fa32:	3b00      	subs	r3, #0
 800fa34:	bf18      	it	ne
 800fa36:	2301      	movne	r3, #1
 800fa38:	0692      	lsls	r2, r2, #26
 800fa3a:	d42b      	bmi.n	800fa94 <_printf_common+0xb0>
 800fa3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fa40:	4641      	mov	r1, r8
 800fa42:	4638      	mov	r0, r7
 800fa44:	47c8      	blx	r9
 800fa46:	3001      	adds	r0, #1
 800fa48:	d01e      	beq.n	800fa88 <_printf_common+0xa4>
 800fa4a:	6823      	ldr	r3, [r4, #0]
 800fa4c:	6922      	ldr	r2, [r4, #16]
 800fa4e:	f003 0306 	and.w	r3, r3, #6
 800fa52:	2b04      	cmp	r3, #4
 800fa54:	bf02      	ittt	eq
 800fa56:	68e5      	ldreq	r5, [r4, #12]
 800fa58:	6833      	ldreq	r3, [r6, #0]
 800fa5a:	1aed      	subeq	r5, r5, r3
 800fa5c:	68a3      	ldr	r3, [r4, #8]
 800fa5e:	bf0c      	ite	eq
 800fa60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa64:	2500      	movne	r5, #0
 800fa66:	4293      	cmp	r3, r2
 800fa68:	bfc4      	itt	gt
 800fa6a:	1a9b      	subgt	r3, r3, r2
 800fa6c:	18ed      	addgt	r5, r5, r3
 800fa6e:	2600      	movs	r6, #0
 800fa70:	341a      	adds	r4, #26
 800fa72:	42b5      	cmp	r5, r6
 800fa74:	d11a      	bne.n	800faac <_printf_common+0xc8>
 800fa76:	2000      	movs	r0, #0
 800fa78:	e008      	b.n	800fa8c <_printf_common+0xa8>
 800fa7a:	2301      	movs	r3, #1
 800fa7c:	4652      	mov	r2, sl
 800fa7e:	4641      	mov	r1, r8
 800fa80:	4638      	mov	r0, r7
 800fa82:	47c8      	blx	r9
 800fa84:	3001      	adds	r0, #1
 800fa86:	d103      	bne.n	800fa90 <_printf_common+0xac>
 800fa88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fa8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa90:	3501      	adds	r5, #1
 800fa92:	e7c6      	b.n	800fa22 <_printf_common+0x3e>
 800fa94:	18e1      	adds	r1, r4, r3
 800fa96:	1c5a      	adds	r2, r3, #1
 800fa98:	2030      	movs	r0, #48	@ 0x30
 800fa9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fa9e:	4422      	add	r2, r4
 800faa0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800faa4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800faa8:	3302      	adds	r3, #2
 800faaa:	e7c7      	b.n	800fa3c <_printf_common+0x58>
 800faac:	2301      	movs	r3, #1
 800faae:	4622      	mov	r2, r4
 800fab0:	4641      	mov	r1, r8
 800fab2:	4638      	mov	r0, r7
 800fab4:	47c8      	blx	r9
 800fab6:	3001      	adds	r0, #1
 800fab8:	d0e6      	beq.n	800fa88 <_printf_common+0xa4>
 800faba:	3601      	adds	r6, #1
 800fabc:	e7d9      	b.n	800fa72 <_printf_common+0x8e>
	...

0800fac0 <_printf_i>:
 800fac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fac4:	7e0f      	ldrb	r7, [r1, #24]
 800fac6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fac8:	2f78      	cmp	r7, #120	@ 0x78
 800faca:	4691      	mov	r9, r2
 800facc:	4680      	mov	r8, r0
 800face:	460c      	mov	r4, r1
 800fad0:	469a      	mov	sl, r3
 800fad2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fad6:	d807      	bhi.n	800fae8 <_printf_i+0x28>
 800fad8:	2f62      	cmp	r7, #98	@ 0x62
 800fada:	d80a      	bhi.n	800faf2 <_printf_i+0x32>
 800fadc:	2f00      	cmp	r7, #0
 800fade:	f000 80d1 	beq.w	800fc84 <_printf_i+0x1c4>
 800fae2:	2f58      	cmp	r7, #88	@ 0x58
 800fae4:	f000 80b8 	beq.w	800fc58 <_printf_i+0x198>
 800fae8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800faec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800faf0:	e03a      	b.n	800fb68 <_printf_i+0xa8>
 800faf2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800faf6:	2b15      	cmp	r3, #21
 800faf8:	d8f6      	bhi.n	800fae8 <_printf_i+0x28>
 800fafa:	a101      	add	r1, pc, #4	@ (adr r1, 800fb00 <_printf_i+0x40>)
 800fafc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fb00:	0800fb59 	.word	0x0800fb59
 800fb04:	0800fb6d 	.word	0x0800fb6d
 800fb08:	0800fae9 	.word	0x0800fae9
 800fb0c:	0800fae9 	.word	0x0800fae9
 800fb10:	0800fae9 	.word	0x0800fae9
 800fb14:	0800fae9 	.word	0x0800fae9
 800fb18:	0800fb6d 	.word	0x0800fb6d
 800fb1c:	0800fae9 	.word	0x0800fae9
 800fb20:	0800fae9 	.word	0x0800fae9
 800fb24:	0800fae9 	.word	0x0800fae9
 800fb28:	0800fae9 	.word	0x0800fae9
 800fb2c:	0800fc6b 	.word	0x0800fc6b
 800fb30:	0800fb97 	.word	0x0800fb97
 800fb34:	0800fc25 	.word	0x0800fc25
 800fb38:	0800fae9 	.word	0x0800fae9
 800fb3c:	0800fae9 	.word	0x0800fae9
 800fb40:	0800fc8d 	.word	0x0800fc8d
 800fb44:	0800fae9 	.word	0x0800fae9
 800fb48:	0800fb97 	.word	0x0800fb97
 800fb4c:	0800fae9 	.word	0x0800fae9
 800fb50:	0800fae9 	.word	0x0800fae9
 800fb54:	0800fc2d 	.word	0x0800fc2d
 800fb58:	6833      	ldr	r3, [r6, #0]
 800fb5a:	1d1a      	adds	r2, r3, #4
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	6032      	str	r2, [r6, #0]
 800fb60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fb64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fb68:	2301      	movs	r3, #1
 800fb6a:	e09c      	b.n	800fca6 <_printf_i+0x1e6>
 800fb6c:	6833      	ldr	r3, [r6, #0]
 800fb6e:	6820      	ldr	r0, [r4, #0]
 800fb70:	1d19      	adds	r1, r3, #4
 800fb72:	6031      	str	r1, [r6, #0]
 800fb74:	0606      	lsls	r6, r0, #24
 800fb76:	d501      	bpl.n	800fb7c <_printf_i+0xbc>
 800fb78:	681d      	ldr	r5, [r3, #0]
 800fb7a:	e003      	b.n	800fb84 <_printf_i+0xc4>
 800fb7c:	0645      	lsls	r5, r0, #25
 800fb7e:	d5fb      	bpl.n	800fb78 <_printf_i+0xb8>
 800fb80:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fb84:	2d00      	cmp	r5, #0
 800fb86:	da03      	bge.n	800fb90 <_printf_i+0xd0>
 800fb88:	232d      	movs	r3, #45	@ 0x2d
 800fb8a:	426d      	negs	r5, r5
 800fb8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fb90:	4858      	ldr	r0, [pc, #352]	@ (800fcf4 <_printf_i+0x234>)
 800fb92:	230a      	movs	r3, #10
 800fb94:	e011      	b.n	800fbba <_printf_i+0xfa>
 800fb96:	6821      	ldr	r1, [r4, #0]
 800fb98:	6833      	ldr	r3, [r6, #0]
 800fb9a:	0608      	lsls	r0, r1, #24
 800fb9c:	f853 5b04 	ldr.w	r5, [r3], #4
 800fba0:	d402      	bmi.n	800fba8 <_printf_i+0xe8>
 800fba2:	0649      	lsls	r1, r1, #25
 800fba4:	bf48      	it	mi
 800fba6:	b2ad      	uxthmi	r5, r5
 800fba8:	2f6f      	cmp	r7, #111	@ 0x6f
 800fbaa:	4852      	ldr	r0, [pc, #328]	@ (800fcf4 <_printf_i+0x234>)
 800fbac:	6033      	str	r3, [r6, #0]
 800fbae:	bf14      	ite	ne
 800fbb0:	230a      	movne	r3, #10
 800fbb2:	2308      	moveq	r3, #8
 800fbb4:	2100      	movs	r1, #0
 800fbb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fbba:	6866      	ldr	r6, [r4, #4]
 800fbbc:	60a6      	str	r6, [r4, #8]
 800fbbe:	2e00      	cmp	r6, #0
 800fbc0:	db05      	blt.n	800fbce <_printf_i+0x10e>
 800fbc2:	6821      	ldr	r1, [r4, #0]
 800fbc4:	432e      	orrs	r6, r5
 800fbc6:	f021 0104 	bic.w	r1, r1, #4
 800fbca:	6021      	str	r1, [r4, #0]
 800fbcc:	d04b      	beq.n	800fc66 <_printf_i+0x1a6>
 800fbce:	4616      	mov	r6, r2
 800fbd0:	fbb5 f1f3 	udiv	r1, r5, r3
 800fbd4:	fb03 5711 	mls	r7, r3, r1, r5
 800fbd8:	5dc7      	ldrb	r7, [r0, r7]
 800fbda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fbde:	462f      	mov	r7, r5
 800fbe0:	42bb      	cmp	r3, r7
 800fbe2:	460d      	mov	r5, r1
 800fbe4:	d9f4      	bls.n	800fbd0 <_printf_i+0x110>
 800fbe6:	2b08      	cmp	r3, #8
 800fbe8:	d10b      	bne.n	800fc02 <_printf_i+0x142>
 800fbea:	6823      	ldr	r3, [r4, #0]
 800fbec:	07df      	lsls	r7, r3, #31
 800fbee:	d508      	bpl.n	800fc02 <_printf_i+0x142>
 800fbf0:	6923      	ldr	r3, [r4, #16]
 800fbf2:	6861      	ldr	r1, [r4, #4]
 800fbf4:	4299      	cmp	r1, r3
 800fbf6:	bfde      	ittt	le
 800fbf8:	2330      	movle	r3, #48	@ 0x30
 800fbfa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fbfe:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800fc02:	1b92      	subs	r2, r2, r6
 800fc04:	6122      	str	r2, [r4, #16]
 800fc06:	f8cd a000 	str.w	sl, [sp]
 800fc0a:	464b      	mov	r3, r9
 800fc0c:	aa03      	add	r2, sp, #12
 800fc0e:	4621      	mov	r1, r4
 800fc10:	4640      	mov	r0, r8
 800fc12:	f7ff fee7 	bl	800f9e4 <_printf_common>
 800fc16:	3001      	adds	r0, #1
 800fc18:	d14a      	bne.n	800fcb0 <_printf_i+0x1f0>
 800fc1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fc1e:	b004      	add	sp, #16
 800fc20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc24:	6823      	ldr	r3, [r4, #0]
 800fc26:	f043 0320 	orr.w	r3, r3, #32
 800fc2a:	6023      	str	r3, [r4, #0]
 800fc2c:	4832      	ldr	r0, [pc, #200]	@ (800fcf8 <_printf_i+0x238>)
 800fc2e:	2778      	movs	r7, #120	@ 0x78
 800fc30:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fc34:	6823      	ldr	r3, [r4, #0]
 800fc36:	6831      	ldr	r1, [r6, #0]
 800fc38:	061f      	lsls	r7, r3, #24
 800fc3a:	f851 5b04 	ldr.w	r5, [r1], #4
 800fc3e:	d402      	bmi.n	800fc46 <_printf_i+0x186>
 800fc40:	065f      	lsls	r7, r3, #25
 800fc42:	bf48      	it	mi
 800fc44:	b2ad      	uxthmi	r5, r5
 800fc46:	6031      	str	r1, [r6, #0]
 800fc48:	07d9      	lsls	r1, r3, #31
 800fc4a:	bf44      	itt	mi
 800fc4c:	f043 0320 	orrmi.w	r3, r3, #32
 800fc50:	6023      	strmi	r3, [r4, #0]
 800fc52:	b11d      	cbz	r5, 800fc5c <_printf_i+0x19c>
 800fc54:	2310      	movs	r3, #16
 800fc56:	e7ad      	b.n	800fbb4 <_printf_i+0xf4>
 800fc58:	4826      	ldr	r0, [pc, #152]	@ (800fcf4 <_printf_i+0x234>)
 800fc5a:	e7e9      	b.n	800fc30 <_printf_i+0x170>
 800fc5c:	6823      	ldr	r3, [r4, #0]
 800fc5e:	f023 0320 	bic.w	r3, r3, #32
 800fc62:	6023      	str	r3, [r4, #0]
 800fc64:	e7f6      	b.n	800fc54 <_printf_i+0x194>
 800fc66:	4616      	mov	r6, r2
 800fc68:	e7bd      	b.n	800fbe6 <_printf_i+0x126>
 800fc6a:	6833      	ldr	r3, [r6, #0]
 800fc6c:	6825      	ldr	r5, [r4, #0]
 800fc6e:	6961      	ldr	r1, [r4, #20]
 800fc70:	1d18      	adds	r0, r3, #4
 800fc72:	6030      	str	r0, [r6, #0]
 800fc74:	062e      	lsls	r6, r5, #24
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	d501      	bpl.n	800fc7e <_printf_i+0x1be>
 800fc7a:	6019      	str	r1, [r3, #0]
 800fc7c:	e002      	b.n	800fc84 <_printf_i+0x1c4>
 800fc7e:	0668      	lsls	r0, r5, #25
 800fc80:	d5fb      	bpl.n	800fc7a <_printf_i+0x1ba>
 800fc82:	8019      	strh	r1, [r3, #0]
 800fc84:	2300      	movs	r3, #0
 800fc86:	6123      	str	r3, [r4, #16]
 800fc88:	4616      	mov	r6, r2
 800fc8a:	e7bc      	b.n	800fc06 <_printf_i+0x146>
 800fc8c:	6833      	ldr	r3, [r6, #0]
 800fc8e:	1d1a      	adds	r2, r3, #4
 800fc90:	6032      	str	r2, [r6, #0]
 800fc92:	681e      	ldr	r6, [r3, #0]
 800fc94:	6862      	ldr	r2, [r4, #4]
 800fc96:	2100      	movs	r1, #0
 800fc98:	4630      	mov	r0, r6
 800fc9a:	f7f0 fac1 	bl	8000220 <memchr>
 800fc9e:	b108      	cbz	r0, 800fca4 <_printf_i+0x1e4>
 800fca0:	1b80      	subs	r0, r0, r6
 800fca2:	6060      	str	r0, [r4, #4]
 800fca4:	6863      	ldr	r3, [r4, #4]
 800fca6:	6123      	str	r3, [r4, #16]
 800fca8:	2300      	movs	r3, #0
 800fcaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fcae:	e7aa      	b.n	800fc06 <_printf_i+0x146>
 800fcb0:	6923      	ldr	r3, [r4, #16]
 800fcb2:	4632      	mov	r2, r6
 800fcb4:	4649      	mov	r1, r9
 800fcb6:	4640      	mov	r0, r8
 800fcb8:	47d0      	blx	sl
 800fcba:	3001      	adds	r0, #1
 800fcbc:	d0ad      	beq.n	800fc1a <_printf_i+0x15a>
 800fcbe:	6823      	ldr	r3, [r4, #0]
 800fcc0:	079b      	lsls	r3, r3, #30
 800fcc2:	d413      	bmi.n	800fcec <_printf_i+0x22c>
 800fcc4:	68e0      	ldr	r0, [r4, #12]
 800fcc6:	9b03      	ldr	r3, [sp, #12]
 800fcc8:	4298      	cmp	r0, r3
 800fcca:	bfb8      	it	lt
 800fccc:	4618      	movlt	r0, r3
 800fcce:	e7a6      	b.n	800fc1e <_printf_i+0x15e>
 800fcd0:	2301      	movs	r3, #1
 800fcd2:	4632      	mov	r2, r6
 800fcd4:	4649      	mov	r1, r9
 800fcd6:	4640      	mov	r0, r8
 800fcd8:	47d0      	blx	sl
 800fcda:	3001      	adds	r0, #1
 800fcdc:	d09d      	beq.n	800fc1a <_printf_i+0x15a>
 800fcde:	3501      	adds	r5, #1
 800fce0:	68e3      	ldr	r3, [r4, #12]
 800fce2:	9903      	ldr	r1, [sp, #12]
 800fce4:	1a5b      	subs	r3, r3, r1
 800fce6:	42ab      	cmp	r3, r5
 800fce8:	dcf2      	bgt.n	800fcd0 <_printf_i+0x210>
 800fcea:	e7eb      	b.n	800fcc4 <_printf_i+0x204>
 800fcec:	2500      	movs	r5, #0
 800fcee:	f104 0619 	add.w	r6, r4, #25
 800fcf2:	e7f5      	b.n	800fce0 <_printf_i+0x220>
 800fcf4:	0801206a 	.word	0x0801206a
 800fcf8:	0801207b 	.word	0x0801207b

0800fcfc <std>:
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	b510      	push	{r4, lr}
 800fd00:	4604      	mov	r4, r0
 800fd02:	e9c0 3300 	strd	r3, r3, [r0]
 800fd06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fd0a:	6083      	str	r3, [r0, #8]
 800fd0c:	8181      	strh	r1, [r0, #12]
 800fd0e:	6643      	str	r3, [r0, #100]	@ 0x64
 800fd10:	81c2      	strh	r2, [r0, #14]
 800fd12:	6183      	str	r3, [r0, #24]
 800fd14:	4619      	mov	r1, r3
 800fd16:	2208      	movs	r2, #8
 800fd18:	305c      	adds	r0, #92	@ 0x5c
 800fd1a:	f000 f92a 	bl	800ff72 <memset>
 800fd1e:	4b0d      	ldr	r3, [pc, #52]	@ (800fd54 <std+0x58>)
 800fd20:	6263      	str	r3, [r4, #36]	@ 0x24
 800fd22:	4b0d      	ldr	r3, [pc, #52]	@ (800fd58 <std+0x5c>)
 800fd24:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fd26:	4b0d      	ldr	r3, [pc, #52]	@ (800fd5c <std+0x60>)
 800fd28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fd2a:	4b0d      	ldr	r3, [pc, #52]	@ (800fd60 <std+0x64>)
 800fd2c:	6323      	str	r3, [r4, #48]	@ 0x30
 800fd2e:	4b0d      	ldr	r3, [pc, #52]	@ (800fd64 <std+0x68>)
 800fd30:	6224      	str	r4, [r4, #32]
 800fd32:	429c      	cmp	r4, r3
 800fd34:	d006      	beq.n	800fd44 <std+0x48>
 800fd36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fd3a:	4294      	cmp	r4, r2
 800fd3c:	d002      	beq.n	800fd44 <std+0x48>
 800fd3e:	33d0      	adds	r3, #208	@ 0xd0
 800fd40:	429c      	cmp	r4, r3
 800fd42:	d105      	bne.n	800fd50 <std+0x54>
 800fd44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fd48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd4c:	f000 b99e 	b.w	801008c <__retarget_lock_init_recursive>
 800fd50:	bd10      	pop	{r4, pc}
 800fd52:	bf00      	nop
 800fd54:	0800feed 	.word	0x0800feed
 800fd58:	0800ff0f 	.word	0x0800ff0f
 800fd5c:	0800ff47 	.word	0x0800ff47
 800fd60:	0800ff6b 	.word	0x0800ff6b
 800fd64:	20002568 	.word	0x20002568

0800fd68 <stdio_exit_handler>:
 800fd68:	4a02      	ldr	r2, [pc, #8]	@ (800fd74 <stdio_exit_handler+0xc>)
 800fd6a:	4903      	ldr	r1, [pc, #12]	@ (800fd78 <stdio_exit_handler+0x10>)
 800fd6c:	4803      	ldr	r0, [pc, #12]	@ (800fd7c <stdio_exit_handler+0x14>)
 800fd6e:	f000 b869 	b.w	800fe44 <_fwalk_sglue>
 800fd72:	bf00      	nop
 800fd74:	2000010c 	.word	0x2000010c
 800fd78:	08011889 	.word	0x08011889
 800fd7c:	2000011c 	.word	0x2000011c

0800fd80 <cleanup_stdio>:
 800fd80:	6841      	ldr	r1, [r0, #4]
 800fd82:	4b0c      	ldr	r3, [pc, #48]	@ (800fdb4 <cleanup_stdio+0x34>)
 800fd84:	4299      	cmp	r1, r3
 800fd86:	b510      	push	{r4, lr}
 800fd88:	4604      	mov	r4, r0
 800fd8a:	d001      	beq.n	800fd90 <cleanup_stdio+0x10>
 800fd8c:	f001 fd7c 	bl	8011888 <_fflush_r>
 800fd90:	68a1      	ldr	r1, [r4, #8]
 800fd92:	4b09      	ldr	r3, [pc, #36]	@ (800fdb8 <cleanup_stdio+0x38>)
 800fd94:	4299      	cmp	r1, r3
 800fd96:	d002      	beq.n	800fd9e <cleanup_stdio+0x1e>
 800fd98:	4620      	mov	r0, r4
 800fd9a:	f001 fd75 	bl	8011888 <_fflush_r>
 800fd9e:	68e1      	ldr	r1, [r4, #12]
 800fda0:	4b06      	ldr	r3, [pc, #24]	@ (800fdbc <cleanup_stdio+0x3c>)
 800fda2:	4299      	cmp	r1, r3
 800fda4:	d004      	beq.n	800fdb0 <cleanup_stdio+0x30>
 800fda6:	4620      	mov	r0, r4
 800fda8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdac:	f001 bd6c 	b.w	8011888 <_fflush_r>
 800fdb0:	bd10      	pop	{r4, pc}
 800fdb2:	bf00      	nop
 800fdb4:	20002568 	.word	0x20002568
 800fdb8:	200025d0 	.word	0x200025d0
 800fdbc:	20002638 	.word	0x20002638

0800fdc0 <global_stdio_init.part.0>:
 800fdc0:	b510      	push	{r4, lr}
 800fdc2:	4b0b      	ldr	r3, [pc, #44]	@ (800fdf0 <global_stdio_init.part.0+0x30>)
 800fdc4:	4c0b      	ldr	r4, [pc, #44]	@ (800fdf4 <global_stdio_init.part.0+0x34>)
 800fdc6:	4a0c      	ldr	r2, [pc, #48]	@ (800fdf8 <global_stdio_init.part.0+0x38>)
 800fdc8:	601a      	str	r2, [r3, #0]
 800fdca:	4620      	mov	r0, r4
 800fdcc:	2200      	movs	r2, #0
 800fdce:	2104      	movs	r1, #4
 800fdd0:	f7ff ff94 	bl	800fcfc <std>
 800fdd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fdd8:	2201      	movs	r2, #1
 800fdda:	2109      	movs	r1, #9
 800fddc:	f7ff ff8e 	bl	800fcfc <std>
 800fde0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fde4:	2202      	movs	r2, #2
 800fde6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdea:	2112      	movs	r1, #18
 800fdec:	f7ff bf86 	b.w	800fcfc <std>
 800fdf0:	200026a0 	.word	0x200026a0
 800fdf4:	20002568 	.word	0x20002568
 800fdf8:	0800fd69 	.word	0x0800fd69

0800fdfc <__sfp_lock_acquire>:
 800fdfc:	4801      	ldr	r0, [pc, #4]	@ (800fe04 <__sfp_lock_acquire+0x8>)
 800fdfe:	f000 b946 	b.w	801008e <__retarget_lock_acquire_recursive>
 800fe02:	bf00      	nop
 800fe04:	200026a9 	.word	0x200026a9

0800fe08 <__sfp_lock_release>:
 800fe08:	4801      	ldr	r0, [pc, #4]	@ (800fe10 <__sfp_lock_release+0x8>)
 800fe0a:	f000 b941 	b.w	8010090 <__retarget_lock_release_recursive>
 800fe0e:	bf00      	nop
 800fe10:	200026a9 	.word	0x200026a9

0800fe14 <__sinit>:
 800fe14:	b510      	push	{r4, lr}
 800fe16:	4604      	mov	r4, r0
 800fe18:	f7ff fff0 	bl	800fdfc <__sfp_lock_acquire>
 800fe1c:	6a23      	ldr	r3, [r4, #32]
 800fe1e:	b11b      	cbz	r3, 800fe28 <__sinit+0x14>
 800fe20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe24:	f7ff bff0 	b.w	800fe08 <__sfp_lock_release>
 800fe28:	4b04      	ldr	r3, [pc, #16]	@ (800fe3c <__sinit+0x28>)
 800fe2a:	6223      	str	r3, [r4, #32]
 800fe2c:	4b04      	ldr	r3, [pc, #16]	@ (800fe40 <__sinit+0x2c>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d1f5      	bne.n	800fe20 <__sinit+0xc>
 800fe34:	f7ff ffc4 	bl	800fdc0 <global_stdio_init.part.0>
 800fe38:	e7f2      	b.n	800fe20 <__sinit+0xc>
 800fe3a:	bf00      	nop
 800fe3c:	0800fd81 	.word	0x0800fd81
 800fe40:	200026a0 	.word	0x200026a0

0800fe44 <_fwalk_sglue>:
 800fe44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe48:	4607      	mov	r7, r0
 800fe4a:	4688      	mov	r8, r1
 800fe4c:	4614      	mov	r4, r2
 800fe4e:	2600      	movs	r6, #0
 800fe50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fe54:	f1b9 0901 	subs.w	r9, r9, #1
 800fe58:	d505      	bpl.n	800fe66 <_fwalk_sglue+0x22>
 800fe5a:	6824      	ldr	r4, [r4, #0]
 800fe5c:	2c00      	cmp	r4, #0
 800fe5e:	d1f7      	bne.n	800fe50 <_fwalk_sglue+0xc>
 800fe60:	4630      	mov	r0, r6
 800fe62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe66:	89ab      	ldrh	r3, [r5, #12]
 800fe68:	2b01      	cmp	r3, #1
 800fe6a:	d907      	bls.n	800fe7c <_fwalk_sglue+0x38>
 800fe6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe70:	3301      	adds	r3, #1
 800fe72:	d003      	beq.n	800fe7c <_fwalk_sglue+0x38>
 800fe74:	4629      	mov	r1, r5
 800fe76:	4638      	mov	r0, r7
 800fe78:	47c0      	blx	r8
 800fe7a:	4306      	orrs	r6, r0
 800fe7c:	3568      	adds	r5, #104	@ 0x68
 800fe7e:	e7e9      	b.n	800fe54 <_fwalk_sglue+0x10>

0800fe80 <sniprintf>:
 800fe80:	b40c      	push	{r2, r3}
 800fe82:	b530      	push	{r4, r5, lr}
 800fe84:	4b18      	ldr	r3, [pc, #96]	@ (800fee8 <sniprintf+0x68>)
 800fe86:	1e0c      	subs	r4, r1, #0
 800fe88:	681d      	ldr	r5, [r3, #0]
 800fe8a:	b09d      	sub	sp, #116	@ 0x74
 800fe8c:	da08      	bge.n	800fea0 <sniprintf+0x20>
 800fe8e:	238b      	movs	r3, #139	@ 0x8b
 800fe90:	602b      	str	r3, [r5, #0]
 800fe92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fe96:	b01d      	add	sp, #116	@ 0x74
 800fe98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe9c:	b002      	add	sp, #8
 800fe9e:	4770      	bx	lr
 800fea0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fea4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fea8:	f04f 0300 	mov.w	r3, #0
 800feac:	931b      	str	r3, [sp, #108]	@ 0x6c
 800feae:	bf14      	ite	ne
 800feb0:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800feb4:	4623      	moveq	r3, r4
 800feb6:	9304      	str	r3, [sp, #16]
 800feb8:	9307      	str	r3, [sp, #28]
 800feba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800febe:	9002      	str	r0, [sp, #8]
 800fec0:	9006      	str	r0, [sp, #24]
 800fec2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fec6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fec8:	ab21      	add	r3, sp, #132	@ 0x84
 800feca:	a902      	add	r1, sp, #8
 800fecc:	4628      	mov	r0, r5
 800fece:	9301      	str	r3, [sp, #4]
 800fed0:	f001 fb5a 	bl	8011588 <_svfiprintf_r>
 800fed4:	1c43      	adds	r3, r0, #1
 800fed6:	bfbc      	itt	lt
 800fed8:	238b      	movlt	r3, #139	@ 0x8b
 800feda:	602b      	strlt	r3, [r5, #0]
 800fedc:	2c00      	cmp	r4, #0
 800fede:	d0da      	beq.n	800fe96 <sniprintf+0x16>
 800fee0:	9b02      	ldr	r3, [sp, #8]
 800fee2:	2200      	movs	r2, #0
 800fee4:	701a      	strb	r2, [r3, #0]
 800fee6:	e7d6      	b.n	800fe96 <sniprintf+0x16>
 800fee8:	20000118 	.word	0x20000118

0800feec <__sread>:
 800feec:	b510      	push	{r4, lr}
 800feee:	460c      	mov	r4, r1
 800fef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fef4:	f000 f86c 	bl	800ffd0 <_read_r>
 800fef8:	2800      	cmp	r0, #0
 800fefa:	bfab      	itete	ge
 800fefc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fefe:	89a3      	ldrhlt	r3, [r4, #12]
 800ff00:	181b      	addge	r3, r3, r0
 800ff02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ff06:	bfac      	ite	ge
 800ff08:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ff0a:	81a3      	strhlt	r3, [r4, #12]
 800ff0c:	bd10      	pop	{r4, pc}

0800ff0e <__swrite>:
 800ff0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff12:	461f      	mov	r7, r3
 800ff14:	898b      	ldrh	r3, [r1, #12]
 800ff16:	05db      	lsls	r3, r3, #23
 800ff18:	4605      	mov	r5, r0
 800ff1a:	460c      	mov	r4, r1
 800ff1c:	4616      	mov	r6, r2
 800ff1e:	d505      	bpl.n	800ff2c <__swrite+0x1e>
 800ff20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff24:	2302      	movs	r3, #2
 800ff26:	2200      	movs	r2, #0
 800ff28:	f000 f840 	bl	800ffac <_lseek_r>
 800ff2c:	89a3      	ldrh	r3, [r4, #12]
 800ff2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ff36:	81a3      	strh	r3, [r4, #12]
 800ff38:	4632      	mov	r2, r6
 800ff3a:	463b      	mov	r3, r7
 800ff3c:	4628      	mov	r0, r5
 800ff3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff42:	f000 b867 	b.w	8010014 <_write_r>

0800ff46 <__sseek>:
 800ff46:	b510      	push	{r4, lr}
 800ff48:	460c      	mov	r4, r1
 800ff4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff4e:	f000 f82d 	bl	800ffac <_lseek_r>
 800ff52:	1c43      	adds	r3, r0, #1
 800ff54:	89a3      	ldrh	r3, [r4, #12]
 800ff56:	bf15      	itete	ne
 800ff58:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ff5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ff5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ff62:	81a3      	strheq	r3, [r4, #12]
 800ff64:	bf18      	it	ne
 800ff66:	81a3      	strhne	r3, [r4, #12]
 800ff68:	bd10      	pop	{r4, pc}

0800ff6a <__sclose>:
 800ff6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff6e:	f000 b80d 	b.w	800ff8c <_close_r>

0800ff72 <memset>:
 800ff72:	4402      	add	r2, r0
 800ff74:	4603      	mov	r3, r0
 800ff76:	4293      	cmp	r3, r2
 800ff78:	d100      	bne.n	800ff7c <memset+0xa>
 800ff7a:	4770      	bx	lr
 800ff7c:	f803 1b01 	strb.w	r1, [r3], #1
 800ff80:	e7f9      	b.n	800ff76 <memset+0x4>
	...

0800ff84 <_localeconv_r>:
 800ff84:	4800      	ldr	r0, [pc, #0]	@ (800ff88 <_localeconv_r+0x4>)
 800ff86:	4770      	bx	lr
 800ff88:	20000258 	.word	0x20000258

0800ff8c <_close_r>:
 800ff8c:	b538      	push	{r3, r4, r5, lr}
 800ff8e:	4d06      	ldr	r5, [pc, #24]	@ (800ffa8 <_close_r+0x1c>)
 800ff90:	2300      	movs	r3, #0
 800ff92:	4604      	mov	r4, r0
 800ff94:	4608      	mov	r0, r1
 800ff96:	602b      	str	r3, [r5, #0]
 800ff98:	f7f2 fe94 	bl	8002cc4 <_close>
 800ff9c:	1c43      	adds	r3, r0, #1
 800ff9e:	d102      	bne.n	800ffa6 <_close_r+0x1a>
 800ffa0:	682b      	ldr	r3, [r5, #0]
 800ffa2:	b103      	cbz	r3, 800ffa6 <_close_r+0x1a>
 800ffa4:	6023      	str	r3, [r4, #0]
 800ffa6:	bd38      	pop	{r3, r4, r5, pc}
 800ffa8:	200026a4 	.word	0x200026a4

0800ffac <_lseek_r>:
 800ffac:	b538      	push	{r3, r4, r5, lr}
 800ffae:	4d07      	ldr	r5, [pc, #28]	@ (800ffcc <_lseek_r+0x20>)
 800ffb0:	4604      	mov	r4, r0
 800ffb2:	4608      	mov	r0, r1
 800ffb4:	4611      	mov	r1, r2
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	602a      	str	r2, [r5, #0]
 800ffba:	461a      	mov	r2, r3
 800ffbc:	f7f2 fea9 	bl	8002d12 <_lseek>
 800ffc0:	1c43      	adds	r3, r0, #1
 800ffc2:	d102      	bne.n	800ffca <_lseek_r+0x1e>
 800ffc4:	682b      	ldr	r3, [r5, #0]
 800ffc6:	b103      	cbz	r3, 800ffca <_lseek_r+0x1e>
 800ffc8:	6023      	str	r3, [r4, #0]
 800ffca:	bd38      	pop	{r3, r4, r5, pc}
 800ffcc:	200026a4 	.word	0x200026a4

0800ffd0 <_read_r>:
 800ffd0:	b538      	push	{r3, r4, r5, lr}
 800ffd2:	4d07      	ldr	r5, [pc, #28]	@ (800fff0 <_read_r+0x20>)
 800ffd4:	4604      	mov	r4, r0
 800ffd6:	4608      	mov	r0, r1
 800ffd8:	4611      	mov	r1, r2
 800ffda:	2200      	movs	r2, #0
 800ffdc:	602a      	str	r2, [r5, #0]
 800ffde:	461a      	mov	r2, r3
 800ffe0:	f7f2 fe37 	bl	8002c52 <_read>
 800ffe4:	1c43      	adds	r3, r0, #1
 800ffe6:	d102      	bne.n	800ffee <_read_r+0x1e>
 800ffe8:	682b      	ldr	r3, [r5, #0]
 800ffea:	b103      	cbz	r3, 800ffee <_read_r+0x1e>
 800ffec:	6023      	str	r3, [r4, #0]
 800ffee:	bd38      	pop	{r3, r4, r5, pc}
 800fff0:	200026a4 	.word	0x200026a4

0800fff4 <_sbrk_r>:
 800fff4:	b538      	push	{r3, r4, r5, lr}
 800fff6:	4d06      	ldr	r5, [pc, #24]	@ (8010010 <_sbrk_r+0x1c>)
 800fff8:	2300      	movs	r3, #0
 800fffa:	4604      	mov	r4, r0
 800fffc:	4608      	mov	r0, r1
 800fffe:	602b      	str	r3, [r5, #0]
 8010000:	f7f2 fe94 	bl	8002d2c <_sbrk>
 8010004:	1c43      	adds	r3, r0, #1
 8010006:	d102      	bne.n	801000e <_sbrk_r+0x1a>
 8010008:	682b      	ldr	r3, [r5, #0]
 801000a:	b103      	cbz	r3, 801000e <_sbrk_r+0x1a>
 801000c:	6023      	str	r3, [r4, #0]
 801000e:	bd38      	pop	{r3, r4, r5, pc}
 8010010:	200026a4 	.word	0x200026a4

08010014 <_write_r>:
 8010014:	b538      	push	{r3, r4, r5, lr}
 8010016:	4d07      	ldr	r5, [pc, #28]	@ (8010034 <_write_r+0x20>)
 8010018:	4604      	mov	r4, r0
 801001a:	4608      	mov	r0, r1
 801001c:	4611      	mov	r1, r2
 801001e:	2200      	movs	r2, #0
 8010020:	602a      	str	r2, [r5, #0]
 8010022:	461a      	mov	r2, r3
 8010024:	f7f2 fe32 	bl	8002c8c <_write>
 8010028:	1c43      	adds	r3, r0, #1
 801002a:	d102      	bne.n	8010032 <_write_r+0x1e>
 801002c:	682b      	ldr	r3, [r5, #0]
 801002e:	b103      	cbz	r3, 8010032 <_write_r+0x1e>
 8010030:	6023      	str	r3, [r4, #0]
 8010032:	bd38      	pop	{r3, r4, r5, pc}
 8010034:	200026a4 	.word	0x200026a4

08010038 <__errno>:
 8010038:	4b01      	ldr	r3, [pc, #4]	@ (8010040 <__errno+0x8>)
 801003a:	6818      	ldr	r0, [r3, #0]
 801003c:	4770      	bx	lr
 801003e:	bf00      	nop
 8010040:	20000118 	.word	0x20000118

08010044 <__libc_init_array>:
 8010044:	b570      	push	{r4, r5, r6, lr}
 8010046:	4d0d      	ldr	r5, [pc, #52]	@ (801007c <__libc_init_array+0x38>)
 8010048:	4c0d      	ldr	r4, [pc, #52]	@ (8010080 <__libc_init_array+0x3c>)
 801004a:	1b64      	subs	r4, r4, r5
 801004c:	10a4      	asrs	r4, r4, #2
 801004e:	2600      	movs	r6, #0
 8010050:	42a6      	cmp	r6, r4
 8010052:	d109      	bne.n	8010068 <__libc_init_array+0x24>
 8010054:	4d0b      	ldr	r5, [pc, #44]	@ (8010084 <__libc_init_array+0x40>)
 8010056:	4c0c      	ldr	r4, [pc, #48]	@ (8010088 <__libc_init_array+0x44>)
 8010058:	f001 ffa4 	bl	8011fa4 <_init>
 801005c:	1b64      	subs	r4, r4, r5
 801005e:	10a4      	asrs	r4, r4, #2
 8010060:	2600      	movs	r6, #0
 8010062:	42a6      	cmp	r6, r4
 8010064:	d105      	bne.n	8010072 <__libc_init_array+0x2e>
 8010066:	bd70      	pop	{r4, r5, r6, pc}
 8010068:	f855 3b04 	ldr.w	r3, [r5], #4
 801006c:	4798      	blx	r3
 801006e:	3601      	adds	r6, #1
 8010070:	e7ee      	b.n	8010050 <__libc_init_array+0xc>
 8010072:	f855 3b04 	ldr.w	r3, [r5], #4
 8010076:	4798      	blx	r3
 8010078:	3601      	adds	r6, #1
 801007a:	e7f2      	b.n	8010062 <__libc_init_array+0x1e>
 801007c:	080123d4 	.word	0x080123d4
 8010080:	080123d4 	.word	0x080123d4
 8010084:	080123d4 	.word	0x080123d4
 8010088:	080123d8 	.word	0x080123d8

0801008c <__retarget_lock_init_recursive>:
 801008c:	4770      	bx	lr

0801008e <__retarget_lock_acquire_recursive>:
 801008e:	4770      	bx	lr

08010090 <__retarget_lock_release_recursive>:
 8010090:	4770      	bx	lr

08010092 <quorem>:
 8010092:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010096:	6903      	ldr	r3, [r0, #16]
 8010098:	690c      	ldr	r4, [r1, #16]
 801009a:	42a3      	cmp	r3, r4
 801009c:	4607      	mov	r7, r0
 801009e:	db7e      	blt.n	801019e <quorem+0x10c>
 80100a0:	3c01      	subs	r4, #1
 80100a2:	f101 0814 	add.w	r8, r1, #20
 80100a6:	00a3      	lsls	r3, r4, #2
 80100a8:	f100 0514 	add.w	r5, r0, #20
 80100ac:	9300      	str	r3, [sp, #0]
 80100ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80100b2:	9301      	str	r3, [sp, #4]
 80100b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80100b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80100bc:	3301      	adds	r3, #1
 80100be:	429a      	cmp	r2, r3
 80100c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80100c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80100c8:	d32e      	bcc.n	8010128 <quorem+0x96>
 80100ca:	f04f 0a00 	mov.w	sl, #0
 80100ce:	46c4      	mov	ip, r8
 80100d0:	46ae      	mov	lr, r5
 80100d2:	46d3      	mov	fp, sl
 80100d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80100d8:	b298      	uxth	r0, r3
 80100da:	fb06 a000 	mla	r0, r6, r0, sl
 80100de:	0c02      	lsrs	r2, r0, #16
 80100e0:	0c1b      	lsrs	r3, r3, #16
 80100e2:	fb06 2303 	mla	r3, r6, r3, r2
 80100e6:	f8de 2000 	ldr.w	r2, [lr]
 80100ea:	b280      	uxth	r0, r0
 80100ec:	b292      	uxth	r2, r2
 80100ee:	1a12      	subs	r2, r2, r0
 80100f0:	445a      	add	r2, fp
 80100f2:	f8de 0000 	ldr.w	r0, [lr]
 80100f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80100fa:	b29b      	uxth	r3, r3
 80100fc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010100:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010104:	b292      	uxth	r2, r2
 8010106:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801010a:	45e1      	cmp	r9, ip
 801010c:	f84e 2b04 	str.w	r2, [lr], #4
 8010110:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010114:	d2de      	bcs.n	80100d4 <quorem+0x42>
 8010116:	9b00      	ldr	r3, [sp, #0]
 8010118:	58eb      	ldr	r3, [r5, r3]
 801011a:	b92b      	cbnz	r3, 8010128 <quorem+0x96>
 801011c:	9b01      	ldr	r3, [sp, #4]
 801011e:	3b04      	subs	r3, #4
 8010120:	429d      	cmp	r5, r3
 8010122:	461a      	mov	r2, r3
 8010124:	d32f      	bcc.n	8010186 <quorem+0xf4>
 8010126:	613c      	str	r4, [r7, #16]
 8010128:	4638      	mov	r0, r7
 801012a:	f001 f8c9 	bl	80112c0 <__mcmp>
 801012e:	2800      	cmp	r0, #0
 8010130:	db25      	blt.n	801017e <quorem+0xec>
 8010132:	4629      	mov	r1, r5
 8010134:	2000      	movs	r0, #0
 8010136:	f858 2b04 	ldr.w	r2, [r8], #4
 801013a:	f8d1 c000 	ldr.w	ip, [r1]
 801013e:	fa1f fe82 	uxth.w	lr, r2
 8010142:	fa1f f38c 	uxth.w	r3, ip
 8010146:	eba3 030e 	sub.w	r3, r3, lr
 801014a:	4403      	add	r3, r0
 801014c:	0c12      	lsrs	r2, r2, #16
 801014e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010152:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010156:	b29b      	uxth	r3, r3
 8010158:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801015c:	45c1      	cmp	r9, r8
 801015e:	f841 3b04 	str.w	r3, [r1], #4
 8010162:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010166:	d2e6      	bcs.n	8010136 <quorem+0xa4>
 8010168:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801016c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010170:	b922      	cbnz	r2, 801017c <quorem+0xea>
 8010172:	3b04      	subs	r3, #4
 8010174:	429d      	cmp	r5, r3
 8010176:	461a      	mov	r2, r3
 8010178:	d30b      	bcc.n	8010192 <quorem+0x100>
 801017a:	613c      	str	r4, [r7, #16]
 801017c:	3601      	adds	r6, #1
 801017e:	4630      	mov	r0, r6
 8010180:	b003      	add	sp, #12
 8010182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010186:	6812      	ldr	r2, [r2, #0]
 8010188:	3b04      	subs	r3, #4
 801018a:	2a00      	cmp	r2, #0
 801018c:	d1cb      	bne.n	8010126 <quorem+0x94>
 801018e:	3c01      	subs	r4, #1
 8010190:	e7c6      	b.n	8010120 <quorem+0x8e>
 8010192:	6812      	ldr	r2, [r2, #0]
 8010194:	3b04      	subs	r3, #4
 8010196:	2a00      	cmp	r2, #0
 8010198:	d1ef      	bne.n	801017a <quorem+0xe8>
 801019a:	3c01      	subs	r4, #1
 801019c:	e7ea      	b.n	8010174 <quorem+0xe2>
 801019e:	2000      	movs	r0, #0
 80101a0:	e7ee      	b.n	8010180 <quorem+0xee>
 80101a2:	0000      	movs	r0, r0
 80101a4:	0000      	movs	r0, r0
	...

080101a8 <_dtoa_r>:
 80101a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101ac:	69c7      	ldr	r7, [r0, #28]
 80101ae:	b097      	sub	sp, #92	@ 0x5c
 80101b0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80101b4:	ec55 4b10 	vmov	r4, r5, d0
 80101b8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80101ba:	9107      	str	r1, [sp, #28]
 80101bc:	4681      	mov	r9, r0
 80101be:	920c      	str	r2, [sp, #48]	@ 0x30
 80101c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80101c2:	b97f      	cbnz	r7, 80101e4 <_dtoa_r+0x3c>
 80101c4:	2010      	movs	r0, #16
 80101c6:	f7ff f885 	bl	800f2d4 <malloc>
 80101ca:	4602      	mov	r2, r0
 80101cc:	f8c9 001c 	str.w	r0, [r9, #28]
 80101d0:	b920      	cbnz	r0, 80101dc <_dtoa_r+0x34>
 80101d2:	4ba9      	ldr	r3, [pc, #676]	@ (8010478 <_dtoa_r+0x2d0>)
 80101d4:	21ef      	movs	r1, #239	@ 0xef
 80101d6:	48a9      	ldr	r0, [pc, #676]	@ (801047c <_dtoa_r+0x2d4>)
 80101d8:	f001 fba6 	bl	8011928 <__assert_func>
 80101dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80101e0:	6007      	str	r7, [r0, #0]
 80101e2:	60c7      	str	r7, [r0, #12]
 80101e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80101e8:	6819      	ldr	r1, [r3, #0]
 80101ea:	b159      	cbz	r1, 8010204 <_dtoa_r+0x5c>
 80101ec:	685a      	ldr	r2, [r3, #4]
 80101ee:	604a      	str	r2, [r1, #4]
 80101f0:	2301      	movs	r3, #1
 80101f2:	4093      	lsls	r3, r2
 80101f4:	608b      	str	r3, [r1, #8]
 80101f6:	4648      	mov	r0, r9
 80101f8:	f000 fe30 	bl	8010e5c <_Bfree>
 80101fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010200:	2200      	movs	r2, #0
 8010202:	601a      	str	r2, [r3, #0]
 8010204:	1e2b      	subs	r3, r5, #0
 8010206:	bfb9      	ittee	lt
 8010208:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801020c:	9305      	strlt	r3, [sp, #20]
 801020e:	2300      	movge	r3, #0
 8010210:	6033      	strge	r3, [r6, #0]
 8010212:	9f05      	ldr	r7, [sp, #20]
 8010214:	4b9a      	ldr	r3, [pc, #616]	@ (8010480 <_dtoa_r+0x2d8>)
 8010216:	bfbc      	itt	lt
 8010218:	2201      	movlt	r2, #1
 801021a:	6032      	strlt	r2, [r6, #0]
 801021c:	43bb      	bics	r3, r7
 801021e:	d112      	bne.n	8010246 <_dtoa_r+0x9e>
 8010220:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010222:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010226:	6013      	str	r3, [r2, #0]
 8010228:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801022c:	4323      	orrs	r3, r4
 801022e:	f000 855a 	beq.w	8010ce6 <_dtoa_r+0xb3e>
 8010232:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010234:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8010494 <_dtoa_r+0x2ec>
 8010238:	2b00      	cmp	r3, #0
 801023a:	f000 855c 	beq.w	8010cf6 <_dtoa_r+0xb4e>
 801023e:	f10a 0303 	add.w	r3, sl, #3
 8010242:	f000 bd56 	b.w	8010cf2 <_dtoa_r+0xb4a>
 8010246:	ed9d 7b04 	vldr	d7, [sp, #16]
 801024a:	2200      	movs	r2, #0
 801024c:	ec51 0b17 	vmov	r0, r1, d7
 8010250:	2300      	movs	r3, #0
 8010252:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8010256:	f7f0 fc5f 	bl	8000b18 <__aeabi_dcmpeq>
 801025a:	4680      	mov	r8, r0
 801025c:	b158      	cbz	r0, 8010276 <_dtoa_r+0xce>
 801025e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010260:	2301      	movs	r3, #1
 8010262:	6013      	str	r3, [r2, #0]
 8010264:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010266:	b113      	cbz	r3, 801026e <_dtoa_r+0xc6>
 8010268:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801026a:	4b86      	ldr	r3, [pc, #536]	@ (8010484 <_dtoa_r+0x2dc>)
 801026c:	6013      	str	r3, [r2, #0]
 801026e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8010498 <_dtoa_r+0x2f0>
 8010272:	f000 bd40 	b.w	8010cf6 <_dtoa_r+0xb4e>
 8010276:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801027a:	aa14      	add	r2, sp, #80	@ 0x50
 801027c:	a915      	add	r1, sp, #84	@ 0x54
 801027e:	4648      	mov	r0, r9
 8010280:	f001 f8ce 	bl	8011420 <__d2b>
 8010284:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010288:	9002      	str	r0, [sp, #8]
 801028a:	2e00      	cmp	r6, #0
 801028c:	d078      	beq.n	8010380 <_dtoa_r+0x1d8>
 801028e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010290:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8010294:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010298:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801029c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80102a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80102a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80102a8:	4619      	mov	r1, r3
 80102aa:	2200      	movs	r2, #0
 80102ac:	4b76      	ldr	r3, [pc, #472]	@ (8010488 <_dtoa_r+0x2e0>)
 80102ae:	f7f0 f813 	bl	80002d8 <__aeabi_dsub>
 80102b2:	a36b      	add	r3, pc, #428	@ (adr r3, 8010460 <_dtoa_r+0x2b8>)
 80102b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b8:	f7f0 f9c6 	bl	8000648 <__aeabi_dmul>
 80102bc:	a36a      	add	r3, pc, #424	@ (adr r3, 8010468 <_dtoa_r+0x2c0>)
 80102be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102c2:	f7f0 f80b 	bl	80002dc <__adddf3>
 80102c6:	4604      	mov	r4, r0
 80102c8:	4630      	mov	r0, r6
 80102ca:	460d      	mov	r5, r1
 80102cc:	f7f0 f952 	bl	8000574 <__aeabi_i2d>
 80102d0:	a367      	add	r3, pc, #412	@ (adr r3, 8010470 <_dtoa_r+0x2c8>)
 80102d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102d6:	f7f0 f9b7 	bl	8000648 <__aeabi_dmul>
 80102da:	4602      	mov	r2, r0
 80102dc:	460b      	mov	r3, r1
 80102de:	4620      	mov	r0, r4
 80102e0:	4629      	mov	r1, r5
 80102e2:	f7ef fffb 	bl	80002dc <__adddf3>
 80102e6:	4604      	mov	r4, r0
 80102e8:	460d      	mov	r5, r1
 80102ea:	f7f0 fc5d 	bl	8000ba8 <__aeabi_d2iz>
 80102ee:	2200      	movs	r2, #0
 80102f0:	4607      	mov	r7, r0
 80102f2:	2300      	movs	r3, #0
 80102f4:	4620      	mov	r0, r4
 80102f6:	4629      	mov	r1, r5
 80102f8:	f7f0 fc18 	bl	8000b2c <__aeabi_dcmplt>
 80102fc:	b140      	cbz	r0, 8010310 <_dtoa_r+0x168>
 80102fe:	4638      	mov	r0, r7
 8010300:	f7f0 f938 	bl	8000574 <__aeabi_i2d>
 8010304:	4622      	mov	r2, r4
 8010306:	462b      	mov	r3, r5
 8010308:	f7f0 fc06 	bl	8000b18 <__aeabi_dcmpeq>
 801030c:	b900      	cbnz	r0, 8010310 <_dtoa_r+0x168>
 801030e:	3f01      	subs	r7, #1
 8010310:	2f16      	cmp	r7, #22
 8010312:	d852      	bhi.n	80103ba <_dtoa_r+0x212>
 8010314:	4b5d      	ldr	r3, [pc, #372]	@ (801048c <_dtoa_r+0x2e4>)
 8010316:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801031a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801031e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010322:	f7f0 fc03 	bl	8000b2c <__aeabi_dcmplt>
 8010326:	2800      	cmp	r0, #0
 8010328:	d049      	beq.n	80103be <_dtoa_r+0x216>
 801032a:	3f01      	subs	r7, #1
 801032c:	2300      	movs	r3, #0
 801032e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010330:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010332:	1b9b      	subs	r3, r3, r6
 8010334:	1e5a      	subs	r2, r3, #1
 8010336:	bf45      	ittet	mi
 8010338:	f1c3 0301 	rsbmi	r3, r3, #1
 801033c:	9300      	strmi	r3, [sp, #0]
 801033e:	2300      	movpl	r3, #0
 8010340:	2300      	movmi	r3, #0
 8010342:	9206      	str	r2, [sp, #24]
 8010344:	bf54      	ite	pl
 8010346:	9300      	strpl	r3, [sp, #0]
 8010348:	9306      	strmi	r3, [sp, #24]
 801034a:	2f00      	cmp	r7, #0
 801034c:	db39      	blt.n	80103c2 <_dtoa_r+0x21a>
 801034e:	9b06      	ldr	r3, [sp, #24]
 8010350:	970d      	str	r7, [sp, #52]	@ 0x34
 8010352:	443b      	add	r3, r7
 8010354:	9306      	str	r3, [sp, #24]
 8010356:	2300      	movs	r3, #0
 8010358:	9308      	str	r3, [sp, #32]
 801035a:	9b07      	ldr	r3, [sp, #28]
 801035c:	2b09      	cmp	r3, #9
 801035e:	d863      	bhi.n	8010428 <_dtoa_r+0x280>
 8010360:	2b05      	cmp	r3, #5
 8010362:	bfc4      	itt	gt
 8010364:	3b04      	subgt	r3, #4
 8010366:	9307      	strgt	r3, [sp, #28]
 8010368:	9b07      	ldr	r3, [sp, #28]
 801036a:	f1a3 0302 	sub.w	r3, r3, #2
 801036e:	bfcc      	ite	gt
 8010370:	2400      	movgt	r4, #0
 8010372:	2401      	movle	r4, #1
 8010374:	2b03      	cmp	r3, #3
 8010376:	d863      	bhi.n	8010440 <_dtoa_r+0x298>
 8010378:	e8df f003 	tbb	[pc, r3]
 801037c:	2b375452 	.word	0x2b375452
 8010380:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8010384:	441e      	add	r6, r3
 8010386:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801038a:	2b20      	cmp	r3, #32
 801038c:	bfc1      	itttt	gt
 801038e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010392:	409f      	lslgt	r7, r3
 8010394:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010398:	fa24 f303 	lsrgt.w	r3, r4, r3
 801039c:	bfd6      	itet	le
 801039e:	f1c3 0320 	rsble	r3, r3, #32
 80103a2:	ea47 0003 	orrgt.w	r0, r7, r3
 80103a6:	fa04 f003 	lslle.w	r0, r4, r3
 80103aa:	f7f0 f8d3 	bl	8000554 <__aeabi_ui2d>
 80103ae:	2201      	movs	r2, #1
 80103b0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80103b4:	3e01      	subs	r6, #1
 80103b6:	9212      	str	r2, [sp, #72]	@ 0x48
 80103b8:	e776      	b.n	80102a8 <_dtoa_r+0x100>
 80103ba:	2301      	movs	r3, #1
 80103bc:	e7b7      	b.n	801032e <_dtoa_r+0x186>
 80103be:	9010      	str	r0, [sp, #64]	@ 0x40
 80103c0:	e7b6      	b.n	8010330 <_dtoa_r+0x188>
 80103c2:	9b00      	ldr	r3, [sp, #0]
 80103c4:	1bdb      	subs	r3, r3, r7
 80103c6:	9300      	str	r3, [sp, #0]
 80103c8:	427b      	negs	r3, r7
 80103ca:	9308      	str	r3, [sp, #32]
 80103cc:	2300      	movs	r3, #0
 80103ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80103d0:	e7c3      	b.n	801035a <_dtoa_r+0x1b2>
 80103d2:	2301      	movs	r3, #1
 80103d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80103d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80103d8:	eb07 0b03 	add.w	fp, r7, r3
 80103dc:	f10b 0301 	add.w	r3, fp, #1
 80103e0:	2b01      	cmp	r3, #1
 80103e2:	9303      	str	r3, [sp, #12]
 80103e4:	bfb8      	it	lt
 80103e6:	2301      	movlt	r3, #1
 80103e8:	e006      	b.n	80103f8 <_dtoa_r+0x250>
 80103ea:	2301      	movs	r3, #1
 80103ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80103ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	dd28      	ble.n	8010446 <_dtoa_r+0x29e>
 80103f4:	469b      	mov	fp, r3
 80103f6:	9303      	str	r3, [sp, #12]
 80103f8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80103fc:	2100      	movs	r1, #0
 80103fe:	2204      	movs	r2, #4
 8010400:	f102 0514 	add.w	r5, r2, #20
 8010404:	429d      	cmp	r5, r3
 8010406:	d926      	bls.n	8010456 <_dtoa_r+0x2ae>
 8010408:	6041      	str	r1, [r0, #4]
 801040a:	4648      	mov	r0, r9
 801040c:	f000 fce6 	bl	8010ddc <_Balloc>
 8010410:	4682      	mov	sl, r0
 8010412:	2800      	cmp	r0, #0
 8010414:	d142      	bne.n	801049c <_dtoa_r+0x2f4>
 8010416:	4b1e      	ldr	r3, [pc, #120]	@ (8010490 <_dtoa_r+0x2e8>)
 8010418:	4602      	mov	r2, r0
 801041a:	f240 11af 	movw	r1, #431	@ 0x1af
 801041e:	e6da      	b.n	80101d6 <_dtoa_r+0x2e>
 8010420:	2300      	movs	r3, #0
 8010422:	e7e3      	b.n	80103ec <_dtoa_r+0x244>
 8010424:	2300      	movs	r3, #0
 8010426:	e7d5      	b.n	80103d4 <_dtoa_r+0x22c>
 8010428:	2401      	movs	r4, #1
 801042a:	2300      	movs	r3, #0
 801042c:	9307      	str	r3, [sp, #28]
 801042e:	9409      	str	r4, [sp, #36]	@ 0x24
 8010430:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8010434:	2200      	movs	r2, #0
 8010436:	f8cd b00c 	str.w	fp, [sp, #12]
 801043a:	2312      	movs	r3, #18
 801043c:	920c      	str	r2, [sp, #48]	@ 0x30
 801043e:	e7db      	b.n	80103f8 <_dtoa_r+0x250>
 8010440:	2301      	movs	r3, #1
 8010442:	9309      	str	r3, [sp, #36]	@ 0x24
 8010444:	e7f4      	b.n	8010430 <_dtoa_r+0x288>
 8010446:	f04f 0b01 	mov.w	fp, #1
 801044a:	f8cd b00c 	str.w	fp, [sp, #12]
 801044e:	465b      	mov	r3, fp
 8010450:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8010454:	e7d0      	b.n	80103f8 <_dtoa_r+0x250>
 8010456:	3101      	adds	r1, #1
 8010458:	0052      	lsls	r2, r2, #1
 801045a:	e7d1      	b.n	8010400 <_dtoa_r+0x258>
 801045c:	f3af 8000 	nop.w
 8010460:	636f4361 	.word	0x636f4361
 8010464:	3fd287a7 	.word	0x3fd287a7
 8010468:	8b60c8b3 	.word	0x8b60c8b3
 801046c:	3fc68a28 	.word	0x3fc68a28
 8010470:	509f79fb 	.word	0x509f79fb
 8010474:	3fd34413 	.word	0x3fd34413
 8010478:	08012099 	.word	0x08012099
 801047c:	080120b0 	.word	0x080120b0
 8010480:	7ff00000 	.word	0x7ff00000
 8010484:	08012069 	.word	0x08012069
 8010488:	3ff80000 	.word	0x3ff80000
 801048c:	08012200 	.word	0x08012200
 8010490:	08012108 	.word	0x08012108
 8010494:	08012095 	.word	0x08012095
 8010498:	08012068 	.word	0x08012068
 801049c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80104a0:	6018      	str	r0, [r3, #0]
 80104a2:	9b03      	ldr	r3, [sp, #12]
 80104a4:	2b0e      	cmp	r3, #14
 80104a6:	f200 80a1 	bhi.w	80105ec <_dtoa_r+0x444>
 80104aa:	2c00      	cmp	r4, #0
 80104ac:	f000 809e 	beq.w	80105ec <_dtoa_r+0x444>
 80104b0:	2f00      	cmp	r7, #0
 80104b2:	dd33      	ble.n	801051c <_dtoa_r+0x374>
 80104b4:	4b9c      	ldr	r3, [pc, #624]	@ (8010728 <_dtoa_r+0x580>)
 80104b6:	f007 020f 	and.w	r2, r7, #15
 80104ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80104be:	ed93 7b00 	vldr	d7, [r3]
 80104c2:	05f8      	lsls	r0, r7, #23
 80104c4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80104c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80104cc:	d516      	bpl.n	80104fc <_dtoa_r+0x354>
 80104ce:	4b97      	ldr	r3, [pc, #604]	@ (801072c <_dtoa_r+0x584>)
 80104d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80104d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80104d8:	f7f0 f9e0 	bl	800089c <__aeabi_ddiv>
 80104dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80104e0:	f004 040f 	and.w	r4, r4, #15
 80104e4:	2603      	movs	r6, #3
 80104e6:	4d91      	ldr	r5, [pc, #580]	@ (801072c <_dtoa_r+0x584>)
 80104e8:	b954      	cbnz	r4, 8010500 <_dtoa_r+0x358>
 80104ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80104ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80104f2:	f7f0 f9d3 	bl	800089c <__aeabi_ddiv>
 80104f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80104fa:	e028      	b.n	801054e <_dtoa_r+0x3a6>
 80104fc:	2602      	movs	r6, #2
 80104fe:	e7f2      	b.n	80104e6 <_dtoa_r+0x33e>
 8010500:	07e1      	lsls	r1, r4, #31
 8010502:	d508      	bpl.n	8010516 <_dtoa_r+0x36e>
 8010504:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010508:	e9d5 2300 	ldrd	r2, r3, [r5]
 801050c:	f7f0 f89c 	bl	8000648 <__aeabi_dmul>
 8010510:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010514:	3601      	adds	r6, #1
 8010516:	1064      	asrs	r4, r4, #1
 8010518:	3508      	adds	r5, #8
 801051a:	e7e5      	b.n	80104e8 <_dtoa_r+0x340>
 801051c:	f000 80af 	beq.w	801067e <_dtoa_r+0x4d6>
 8010520:	427c      	negs	r4, r7
 8010522:	4b81      	ldr	r3, [pc, #516]	@ (8010728 <_dtoa_r+0x580>)
 8010524:	4d81      	ldr	r5, [pc, #516]	@ (801072c <_dtoa_r+0x584>)
 8010526:	f004 020f 	and.w	r2, r4, #15
 801052a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801052e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010532:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010536:	f7f0 f887 	bl	8000648 <__aeabi_dmul>
 801053a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801053e:	1124      	asrs	r4, r4, #4
 8010540:	2300      	movs	r3, #0
 8010542:	2602      	movs	r6, #2
 8010544:	2c00      	cmp	r4, #0
 8010546:	f040 808f 	bne.w	8010668 <_dtoa_r+0x4c0>
 801054a:	2b00      	cmp	r3, #0
 801054c:	d1d3      	bne.n	80104f6 <_dtoa_r+0x34e>
 801054e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010550:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010554:	2b00      	cmp	r3, #0
 8010556:	f000 8094 	beq.w	8010682 <_dtoa_r+0x4da>
 801055a:	4b75      	ldr	r3, [pc, #468]	@ (8010730 <_dtoa_r+0x588>)
 801055c:	2200      	movs	r2, #0
 801055e:	4620      	mov	r0, r4
 8010560:	4629      	mov	r1, r5
 8010562:	f7f0 fae3 	bl	8000b2c <__aeabi_dcmplt>
 8010566:	2800      	cmp	r0, #0
 8010568:	f000 808b 	beq.w	8010682 <_dtoa_r+0x4da>
 801056c:	9b03      	ldr	r3, [sp, #12]
 801056e:	2b00      	cmp	r3, #0
 8010570:	f000 8087 	beq.w	8010682 <_dtoa_r+0x4da>
 8010574:	f1bb 0f00 	cmp.w	fp, #0
 8010578:	dd34      	ble.n	80105e4 <_dtoa_r+0x43c>
 801057a:	4620      	mov	r0, r4
 801057c:	4b6d      	ldr	r3, [pc, #436]	@ (8010734 <_dtoa_r+0x58c>)
 801057e:	2200      	movs	r2, #0
 8010580:	4629      	mov	r1, r5
 8010582:	f7f0 f861 	bl	8000648 <__aeabi_dmul>
 8010586:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801058a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 801058e:	3601      	adds	r6, #1
 8010590:	465c      	mov	r4, fp
 8010592:	4630      	mov	r0, r6
 8010594:	f7ef ffee 	bl	8000574 <__aeabi_i2d>
 8010598:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801059c:	f7f0 f854 	bl	8000648 <__aeabi_dmul>
 80105a0:	4b65      	ldr	r3, [pc, #404]	@ (8010738 <_dtoa_r+0x590>)
 80105a2:	2200      	movs	r2, #0
 80105a4:	f7ef fe9a 	bl	80002dc <__adddf3>
 80105a8:	4605      	mov	r5, r0
 80105aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80105ae:	2c00      	cmp	r4, #0
 80105b0:	d16a      	bne.n	8010688 <_dtoa_r+0x4e0>
 80105b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80105b6:	4b61      	ldr	r3, [pc, #388]	@ (801073c <_dtoa_r+0x594>)
 80105b8:	2200      	movs	r2, #0
 80105ba:	f7ef fe8d 	bl	80002d8 <__aeabi_dsub>
 80105be:	4602      	mov	r2, r0
 80105c0:	460b      	mov	r3, r1
 80105c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80105c6:	462a      	mov	r2, r5
 80105c8:	4633      	mov	r3, r6
 80105ca:	f7f0 facd 	bl	8000b68 <__aeabi_dcmpgt>
 80105ce:	2800      	cmp	r0, #0
 80105d0:	f040 8298 	bne.w	8010b04 <_dtoa_r+0x95c>
 80105d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80105d8:	462a      	mov	r2, r5
 80105da:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80105de:	f7f0 faa5 	bl	8000b2c <__aeabi_dcmplt>
 80105e2:	bb38      	cbnz	r0, 8010634 <_dtoa_r+0x48c>
 80105e4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80105e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80105ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	f2c0 8157 	blt.w	80108a2 <_dtoa_r+0x6fa>
 80105f4:	2f0e      	cmp	r7, #14
 80105f6:	f300 8154 	bgt.w	80108a2 <_dtoa_r+0x6fa>
 80105fa:	4b4b      	ldr	r3, [pc, #300]	@ (8010728 <_dtoa_r+0x580>)
 80105fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010600:	ed93 7b00 	vldr	d7, [r3]
 8010604:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010606:	2b00      	cmp	r3, #0
 8010608:	ed8d 7b00 	vstr	d7, [sp]
 801060c:	f280 80e5 	bge.w	80107da <_dtoa_r+0x632>
 8010610:	9b03      	ldr	r3, [sp, #12]
 8010612:	2b00      	cmp	r3, #0
 8010614:	f300 80e1 	bgt.w	80107da <_dtoa_r+0x632>
 8010618:	d10c      	bne.n	8010634 <_dtoa_r+0x48c>
 801061a:	4b48      	ldr	r3, [pc, #288]	@ (801073c <_dtoa_r+0x594>)
 801061c:	2200      	movs	r2, #0
 801061e:	ec51 0b17 	vmov	r0, r1, d7
 8010622:	f7f0 f811 	bl	8000648 <__aeabi_dmul>
 8010626:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801062a:	f7f0 fa93 	bl	8000b54 <__aeabi_dcmpge>
 801062e:	2800      	cmp	r0, #0
 8010630:	f000 8266 	beq.w	8010b00 <_dtoa_r+0x958>
 8010634:	2400      	movs	r4, #0
 8010636:	4625      	mov	r5, r4
 8010638:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801063a:	4656      	mov	r6, sl
 801063c:	ea6f 0803 	mvn.w	r8, r3
 8010640:	2700      	movs	r7, #0
 8010642:	4621      	mov	r1, r4
 8010644:	4648      	mov	r0, r9
 8010646:	f000 fc09 	bl	8010e5c <_Bfree>
 801064a:	2d00      	cmp	r5, #0
 801064c:	f000 80bd 	beq.w	80107ca <_dtoa_r+0x622>
 8010650:	b12f      	cbz	r7, 801065e <_dtoa_r+0x4b6>
 8010652:	42af      	cmp	r7, r5
 8010654:	d003      	beq.n	801065e <_dtoa_r+0x4b6>
 8010656:	4639      	mov	r1, r7
 8010658:	4648      	mov	r0, r9
 801065a:	f000 fbff 	bl	8010e5c <_Bfree>
 801065e:	4629      	mov	r1, r5
 8010660:	4648      	mov	r0, r9
 8010662:	f000 fbfb 	bl	8010e5c <_Bfree>
 8010666:	e0b0      	b.n	80107ca <_dtoa_r+0x622>
 8010668:	07e2      	lsls	r2, r4, #31
 801066a:	d505      	bpl.n	8010678 <_dtoa_r+0x4d0>
 801066c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010670:	f7ef ffea 	bl	8000648 <__aeabi_dmul>
 8010674:	3601      	adds	r6, #1
 8010676:	2301      	movs	r3, #1
 8010678:	1064      	asrs	r4, r4, #1
 801067a:	3508      	adds	r5, #8
 801067c:	e762      	b.n	8010544 <_dtoa_r+0x39c>
 801067e:	2602      	movs	r6, #2
 8010680:	e765      	b.n	801054e <_dtoa_r+0x3a6>
 8010682:	9c03      	ldr	r4, [sp, #12]
 8010684:	46b8      	mov	r8, r7
 8010686:	e784      	b.n	8010592 <_dtoa_r+0x3ea>
 8010688:	4b27      	ldr	r3, [pc, #156]	@ (8010728 <_dtoa_r+0x580>)
 801068a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801068c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010690:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010694:	4454      	add	r4, sl
 8010696:	2900      	cmp	r1, #0
 8010698:	d054      	beq.n	8010744 <_dtoa_r+0x59c>
 801069a:	4929      	ldr	r1, [pc, #164]	@ (8010740 <_dtoa_r+0x598>)
 801069c:	2000      	movs	r0, #0
 801069e:	f7f0 f8fd 	bl	800089c <__aeabi_ddiv>
 80106a2:	4633      	mov	r3, r6
 80106a4:	462a      	mov	r2, r5
 80106a6:	f7ef fe17 	bl	80002d8 <__aeabi_dsub>
 80106aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80106ae:	4656      	mov	r6, sl
 80106b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80106b4:	f7f0 fa78 	bl	8000ba8 <__aeabi_d2iz>
 80106b8:	4605      	mov	r5, r0
 80106ba:	f7ef ff5b 	bl	8000574 <__aeabi_i2d>
 80106be:	4602      	mov	r2, r0
 80106c0:	460b      	mov	r3, r1
 80106c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80106c6:	f7ef fe07 	bl	80002d8 <__aeabi_dsub>
 80106ca:	3530      	adds	r5, #48	@ 0x30
 80106cc:	4602      	mov	r2, r0
 80106ce:	460b      	mov	r3, r1
 80106d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80106d4:	f806 5b01 	strb.w	r5, [r6], #1
 80106d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80106dc:	f7f0 fa26 	bl	8000b2c <__aeabi_dcmplt>
 80106e0:	2800      	cmp	r0, #0
 80106e2:	d172      	bne.n	80107ca <_dtoa_r+0x622>
 80106e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80106e8:	4911      	ldr	r1, [pc, #68]	@ (8010730 <_dtoa_r+0x588>)
 80106ea:	2000      	movs	r0, #0
 80106ec:	f7ef fdf4 	bl	80002d8 <__aeabi_dsub>
 80106f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80106f4:	f7f0 fa1a 	bl	8000b2c <__aeabi_dcmplt>
 80106f8:	2800      	cmp	r0, #0
 80106fa:	f040 80b4 	bne.w	8010866 <_dtoa_r+0x6be>
 80106fe:	42a6      	cmp	r6, r4
 8010700:	f43f af70 	beq.w	80105e4 <_dtoa_r+0x43c>
 8010704:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010708:	4b0a      	ldr	r3, [pc, #40]	@ (8010734 <_dtoa_r+0x58c>)
 801070a:	2200      	movs	r2, #0
 801070c:	f7ef ff9c 	bl	8000648 <__aeabi_dmul>
 8010710:	4b08      	ldr	r3, [pc, #32]	@ (8010734 <_dtoa_r+0x58c>)
 8010712:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010716:	2200      	movs	r2, #0
 8010718:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801071c:	f7ef ff94 	bl	8000648 <__aeabi_dmul>
 8010720:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010724:	e7c4      	b.n	80106b0 <_dtoa_r+0x508>
 8010726:	bf00      	nop
 8010728:	08012200 	.word	0x08012200
 801072c:	080121d8 	.word	0x080121d8
 8010730:	3ff00000 	.word	0x3ff00000
 8010734:	40240000 	.word	0x40240000
 8010738:	401c0000 	.word	0x401c0000
 801073c:	40140000 	.word	0x40140000
 8010740:	3fe00000 	.word	0x3fe00000
 8010744:	4631      	mov	r1, r6
 8010746:	4628      	mov	r0, r5
 8010748:	f7ef ff7e 	bl	8000648 <__aeabi_dmul>
 801074c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010750:	9413      	str	r4, [sp, #76]	@ 0x4c
 8010752:	4656      	mov	r6, sl
 8010754:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010758:	f7f0 fa26 	bl	8000ba8 <__aeabi_d2iz>
 801075c:	4605      	mov	r5, r0
 801075e:	f7ef ff09 	bl	8000574 <__aeabi_i2d>
 8010762:	4602      	mov	r2, r0
 8010764:	460b      	mov	r3, r1
 8010766:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801076a:	f7ef fdb5 	bl	80002d8 <__aeabi_dsub>
 801076e:	3530      	adds	r5, #48	@ 0x30
 8010770:	f806 5b01 	strb.w	r5, [r6], #1
 8010774:	4602      	mov	r2, r0
 8010776:	460b      	mov	r3, r1
 8010778:	42a6      	cmp	r6, r4
 801077a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801077e:	f04f 0200 	mov.w	r2, #0
 8010782:	d124      	bne.n	80107ce <_dtoa_r+0x626>
 8010784:	4baf      	ldr	r3, [pc, #700]	@ (8010a44 <_dtoa_r+0x89c>)
 8010786:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801078a:	f7ef fda7 	bl	80002dc <__adddf3>
 801078e:	4602      	mov	r2, r0
 8010790:	460b      	mov	r3, r1
 8010792:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010796:	f7f0 f9e7 	bl	8000b68 <__aeabi_dcmpgt>
 801079a:	2800      	cmp	r0, #0
 801079c:	d163      	bne.n	8010866 <_dtoa_r+0x6be>
 801079e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80107a2:	49a8      	ldr	r1, [pc, #672]	@ (8010a44 <_dtoa_r+0x89c>)
 80107a4:	2000      	movs	r0, #0
 80107a6:	f7ef fd97 	bl	80002d8 <__aeabi_dsub>
 80107aa:	4602      	mov	r2, r0
 80107ac:	460b      	mov	r3, r1
 80107ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80107b2:	f7f0 f9bb 	bl	8000b2c <__aeabi_dcmplt>
 80107b6:	2800      	cmp	r0, #0
 80107b8:	f43f af14 	beq.w	80105e4 <_dtoa_r+0x43c>
 80107bc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80107be:	1e73      	subs	r3, r6, #1
 80107c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80107c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80107c6:	2b30      	cmp	r3, #48	@ 0x30
 80107c8:	d0f8      	beq.n	80107bc <_dtoa_r+0x614>
 80107ca:	4647      	mov	r7, r8
 80107cc:	e03b      	b.n	8010846 <_dtoa_r+0x69e>
 80107ce:	4b9e      	ldr	r3, [pc, #632]	@ (8010a48 <_dtoa_r+0x8a0>)
 80107d0:	f7ef ff3a 	bl	8000648 <__aeabi_dmul>
 80107d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80107d8:	e7bc      	b.n	8010754 <_dtoa_r+0x5ac>
 80107da:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80107de:	4656      	mov	r6, sl
 80107e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80107e4:	4620      	mov	r0, r4
 80107e6:	4629      	mov	r1, r5
 80107e8:	f7f0 f858 	bl	800089c <__aeabi_ddiv>
 80107ec:	f7f0 f9dc 	bl	8000ba8 <__aeabi_d2iz>
 80107f0:	4680      	mov	r8, r0
 80107f2:	f7ef febf 	bl	8000574 <__aeabi_i2d>
 80107f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80107fa:	f7ef ff25 	bl	8000648 <__aeabi_dmul>
 80107fe:	4602      	mov	r2, r0
 8010800:	460b      	mov	r3, r1
 8010802:	4620      	mov	r0, r4
 8010804:	4629      	mov	r1, r5
 8010806:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801080a:	f7ef fd65 	bl	80002d8 <__aeabi_dsub>
 801080e:	f806 4b01 	strb.w	r4, [r6], #1
 8010812:	9d03      	ldr	r5, [sp, #12]
 8010814:	eba6 040a 	sub.w	r4, r6, sl
 8010818:	42a5      	cmp	r5, r4
 801081a:	4602      	mov	r2, r0
 801081c:	460b      	mov	r3, r1
 801081e:	d133      	bne.n	8010888 <_dtoa_r+0x6e0>
 8010820:	f7ef fd5c 	bl	80002dc <__adddf3>
 8010824:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010828:	4604      	mov	r4, r0
 801082a:	460d      	mov	r5, r1
 801082c:	f7f0 f99c 	bl	8000b68 <__aeabi_dcmpgt>
 8010830:	b9c0      	cbnz	r0, 8010864 <_dtoa_r+0x6bc>
 8010832:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010836:	4620      	mov	r0, r4
 8010838:	4629      	mov	r1, r5
 801083a:	f7f0 f96d 	bl	8000b18 <__aeabi_dcmpeq>
 801083e:	b110      	cbz	r0, 8010846 <_dtoa_r+0x69e>
 8010840:	f018 0f01 	tst.w	r8, #1
 8010844:	d10e      	bne.n	8010864 <_dtoa_r+0x6bc>
 8010846:	9902      	ldr	r1, [sp, #8]
 8010848:	4648      	mov	r0, r9
 801084a:	f000 fb07 	bl	8010e5c <_Bfree>
 801084e:	2300      	movs	r3, #0
 8010850:	7033      	strb	r3, [r6, #0]
 8010852:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010854:	3701      	adds	r7, #1
 8010856:	601f      	str	r7, [r3, #0]
 8010858:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801085a:	2b00      	cmp	r3, #0
 801085c:	f000 824b 	beq.w	8010cf6 <_dtoa_r+0xb4e>
 8010860:	601e      	str	r6, [r3, #0]
 8010862:	e248      	b.n	8010cf6 <_dtoa_r+0xb4e>
 8010864:	46b8      	mov	r8, r7
 8010866:	4633      	mov	r3, r6
 8010868:	461e      	mov	r6, r3
 801086a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801086e:	2a39      	cmp	r2, #57	@ 0x39
 8010870:	d106      	bne.n	8010880 <_dtoa_r+0x6d8>
 8010872:	459a      	cmp	sl, r3
 8010874:	d1f8      	bne.n	8010868 <_dtoa_r+0x6c0>
 8010876:	2230      	movs	r2, #48	@ 0x30
 8010878:	f108 0801 	add.w	r8, r8, #1
 801087c:	f88a 2000 	strb.w	r2, [sl]
 8010880:	781a      	ldrb	r2, [r3, #0]
 8010882:	3201      	adds	r2, #1
 8010884:	701a      	strb	r2, [r3, #0]
 8010886:	e7a0      	b.n	80107ca <_dtoa_r+0x622>
 8010888:	4b6f      	ldr	r3, [pc, #444]	@ (8010a48 <_dtoa_r+0x8a0>)
 801088a:	2200      	movs	r2, #0
 801088c:	f7ef fedc 	bl	8000648 <__aeabi_dmul>
 8010890:	2200      	movs	r2, #0
 8010892:	2300      	movs	r3, #0
 8010894:	4604      	mov	r4, r0
 8010896:	460d      	mov	r5, r1
 8010898:	f7f0 f93e 	bl	8000b18 <__aeabi_dcmpeq>
 801089c:	2800      	cmp	r0, #0
 801089e:	d09f      	beq.n	80107e0 <_dtoa_r+0x638>
 80108a0:	e7d1      	b.n	8010846 <_dtoa_r+0x69e>
 80108a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80108a4:	2a00      	cmp	r2, #0
 80108a6:	f000 80ea 	beq.w	8010a7e <_dtoa_r+0x8d6>
 80108aa:	9a07      	ldr	r2, [sp, #28]
 80108ac:	2a01      	cmp	r2, #1
 80108ae:	f300 80cd 	bgt.w	8010a4c <_dtoa_r+0x8a4>
 80108b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80108b4:	2a00      	cmp	r2, #0
 80108b6:	f000 80c1 	beq.w	8010a3c <_dtoa_r+0x894>
 80108ba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80108be:	9c08      	ldr	r4, [sp, #32]
 80108c0:	9e00      	ldr	r6, [sp, #0]
 80108c2:	9a00      	ldr	r2, [sp, #0]
 80108c4:	441a      	add	r2, r3
 80108c6:	9200      	str	r2, [sp, #0]
 80108c8:	9a06      	ldr	r2, [sp, #24]
 80108ca:	2101      	movs	r1, #1
 80108cc:	441a      	add	r2, r3
 80108ce:	4648      	mov	r0, r9
 80108d0:	9206      	str	r2, [sp, #24]
 80108d2:	f000 fb77 	bl	8010fc4 <__i2b>
 80108d6:	4605      	mov	r5, r0
 80108d8:	b166      	cbz	r6, 80108f4 <_dtoa_r+0x74c>
 80108da:	9b06      	ldr	r3, [sp, #24]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	dd09      	ble.n	80108f4 <_dtoa_r+0x74c>
 80108e0:	42b3      	cmp	r3, r6
 80108e2:	9a00      	ldr	r2, [sp, #0]
 80108e4:	bfa8      	it	ge
 80108e6:	4633      	movge	r3, r6
 80108e8:	1ad2      	subs	r2, r2, r3
 80108ea:	9200      	str	r2, [sp, #0]
 80108ec:	9a06      	ldr	r2, [sp, #24]
 80108ee:	1af6      	subs	r6, r6, r3
 80108f0:	1ad3      	subs	r3, r2, r3
 80108f2:	9306      	str	r3, [sp, #24]
 80108f4:	9b08      	ldr	r3, [sp, #32]
 80108f6:	b30b      	cbz	r3, 801093c <_dtoa_r+0x794>
 80108f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	f000 80c6 	beq.w	8010a8c <_dtoa_r+0x8e4>
 8010900:	2c00      	cmp	r4, #0
 8010902:	f000 80c0 	beq.w	8010a86 <_dtoa_r+0x8de>
 8010906:	4629      	mov	r1, r5
 8010908:	4622      	mov	r2, r4
 801090a:	4648      	mov	r0, r9
 801090c:	f000 fc12 	bl	8011134 <__pow5mult>
 8010910:	9a02      	ldr	r2, [sp, #8]
 8010912:	4601      	mov	r1, r0
 8010914:	4605      	mov	r5, r0
 8010916:	4648      	mov	r0, r9
 8010918:	f000 fb6a 	bl	8010ff0 <__multiply>
 801091c:	9902      	ldr	r1, [sp, #8]
 801091e:	4680      	mov	r8, r0
 8010920:	4648      	mov	r0, r9
 8010922:	f000 fa9b 	bl	8010e5c <_Bfree>
 8010926:	9b08      	ldr	r3, [sp, #32]
 8010928:	1b1b      	subs	r3, r3, r4
 801092a:	9308      	str	r3, [sp, #32]
 801092c:	f000 80b1 	beq.w	8010a92 <_dtoa_r+0x8ea>
 8010930:	9a08      	ldr	r2, [sp, #32]
 8010932:	4641      	mov	r1, r8
 8010934:	4648      	mov	r0, r9
 8010936:	f000 fbfd 	bl	8011134 <__pow5mult>
 801093a:	9002      	str	r0, [sp, #8]
 801093c:	2101      	movs	r1, #1
 801093e:	4648      	mov	r0, r9
 8010940:	f000 fb40 	bl	8010fc4 <__i2b>
 8010944:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010946:	4604      	mov	r4, r0
 8010948:	2b00      	cmp	r3, #0
 801094a:	f000 81d8 	beq.w	8010cfe <_dtoa_r+0xb56>
 801094e:	461a      	mov	r2, r3
 8010950:	4601      	mov	r1, r0
 8010952:	4648      	mov	r0, r9
 8010954:	f000 fbee 	bl	8011134 <__pow5mult>
 8010958:	9b07      	ldr	r3, [sp, #28]
 801095a:	2b01      	cmp	r3, #1
 801095c:	4604      	mov	r4, r0
 801095e:	f300 809f 	bgt.w	8010aa0 <_dtoa_r+0x8f8>
 8010962:	9b04      	ldr	r3, [sp, #16]
 8010964:	2b00      	cmp	r3, #0
 8010966:	f040 8097 	bne.w	8010a98 <_dtoa_r+0x8f0>
 801096a:	9b05      	ldr	r3, [sp, #20]
 801096c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010970:	2b00      	cmp	r3, #0
 8010972:	f040 8093 	bne.w	8010a9c <_dtoa_r+0x8f4>
 8010976:	9b05      	ldr	r3, [sp, #20]
 8010978:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801097c:	0d1b      	lsrs	r3, r3, #20
 801097e:	051b      	lsls	r3, r3, #20
 8010980:	b133      	cbz	r3, 8010990 <_dtoa_r+0x7e8>
 8010982:	9b00      	ldr	r3, [sp, #0]
 8010984:	3301      	adds	r3, #1
 8010986:	9300      	str	r3, [sp, #0]
 8010988:	9b06      	ldr	r3, [sp, #24]
 801098a:	3301      	adds	r3, #1
 801098c:	9306      	str	r3, [sp, #24]
 801098e:	2301      	movs	r3, #1
 8010990:	9308      	str	r3, [sp, #32]
 8010992:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010994:	2b00      	cmp	r3, #0
 8010996:	f000 81b8 	beq.w	8010d0a <_dtoa_r+0xb62>
 801099a:	6923      	ldr	r3, [r4, #16]
 801099c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80109a0:	6918      	ldr	r0, [r3, #16]
 80109a2:	f000 fac3 	bl	8010f2c <__hi0bits>
 80109a6:	f1c0 0020 	rsb	r0, r0, #32
 80109aa:	9b06      	ldr	r3, [sp, #24]
 80109ac:	4418      	add	r0, r3
 80109ae:	f010 001f 	ands.w	r0, r0, #31
 80109b2:	f000 8082 	beq.w	8010aba <_dtoa_r+0x912>
 80109b6:	f1c0 0320 	rsb	r3, r0, #32
 80109ba:	2b04      	cmp	r3, #4
 80109bc:	dd73      	ble.n	8010aa6 <_dtoa_r+0x8fe>
 80109be:	9b00      	ldr	r3, [sp, #0]
 80109c0:	f1c0 001c 	rsb	r0, r0, #28
 80109c4:	4403      	add	r3, r0
 80109c6:	9300      	str	r3, [sp, #0]
 80109c8:	9b06      	ldr	r3, [sp, #24]
 80109ca:	4403      	add	r3, r0
 80109cc:	4406      	add	r6, r0
 80109ce:	9306      	str	r3, [sp, #24]
 80109d0:	9b00      	ldr	r3, [sp, #0]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	dd05      	ble.n	80109e2 <_dtoa_r+0x83a>
 80109d6:	9902      	ldr	r1, [sp, #8]
 80109d8:	461a      	mov	r2, r3
 80109da:	4648      	mov	r0, r9
 80109dc:	f000 fc04 	bl	80111e8 <__lshift>
 80109e0:	9002      	str	r0, [sp, #8]
 80109e2:	9b06      	ldr	r3, [sp, #24]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	dd05      	ble.n	80109f4 <_dtoa_r+0x84c>
 80109e8:	4621      	mov	r1, r4
 80109ea:	461a      	mov	r2, r3
 80109ec:	4648      	mov	r0, r9
 80109ee:	f000 fbfb 	bl	80111e8 <__lshift>
 80109f2:	4604      	mov	r4, r0
 80109f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d061      	beq.n	8010abe <_dtoa_r+0x916>
 80109fa:	9802      	ldr	r0, [sp, #8]
 80109fc:	4621      	mov	r1, r4
 80109fe:	f000 fc5f 	bl	80112c0 <__mcmp>
 8010a02:	2800      	cmp	r0, #0
 8010a04:	da5b      	bge.n	8010abe <_dtoa_r+0x916>
 8010a06:	2300      	movs	r3, #0
 8010a08:	9902      	ldr	r1, [sp, #8]
 8010a0a:	220a      	movs	r2, #10
 8010a0c:	4648      	mov	r0, r9
 8010a0e:	f000 fa47 	bl	8010ea0 <__multadd>
 8010a12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a14:	9002      	str	r0, [sp, #8]
 8010a16:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	f000 8177 	beq.w	8010d0e <_dtoa_r+0xb66>
 8010a20:	4629      	mov	r1, r5
 8010a22:	2300      	movs	r3, #0
 8010a24:	220a      	movs	r2, #10
 8010a26:	4648      	mov	r0, r9
 8010a28:	f000 fa3a 	bl	8010ea0 <__multadd>
 8010a2c:	f1bb 0f00 	cmp.w	fp, #0
 8010a30:	4605      	mov	r5, r0
 8010a32:	dc6f      	bgt.n	8010b14 <_dtoa_r+0x96c>
 8010a34:	9b07      	ldr	r3, [sp, #28]
 8010a36:	2b02      	cmp	r3, #2
 8010a38:	dc49      	bgt.n	8010ace <_dtoa_r+0x926>
 8010a3a:	e06b      	b.n	8010b14 <_dtoa_r+0x96c>
 8010a3c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010a3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010a42:	e73c      	b.n	80108be <_dtoa_r+0x716>
 8010a44:	3fe00000 	.word	0x3fe00000
 8010a48:	40240000 	.word	0x40240000
 8010a4c:	9b03      	ldr	r3, [sp, #12]
 8010a4e:	1e5c      	subs	r4, r3, #1
 8010a50:	9b08      	ldr	r3, [sp, #32]
 8010a52:	42a3      	cmp	r3, r4
 8010a54:	db09      	blt.n	8010a6a <_dtoa_r+0x8c2>
 8010a56:	1b1c      	subs	r4, r3, r4
 8010a58:	9b03      	ldr	r3, [sp, #12]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	f6bf af30 	bge.w	80108c0 <_dtoa_r+0x718>
 8010a60:	9b00      	ldr	r3, [sp, #0]
 8010a62:	9a03      	ldr	r2, [sp, #12]
 8010a64:	1a9e      	subs	r6, r3, r2
 8010a66:	2300      	movs	r3, #0
 8010a68:	e72b      	b.n	80108c2 <_dtoa_r+0x71a>
 8010a6a:	9b08      	ldr	r3, [sp, #32]
 8010a6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010a6e:	9408      	str	r4, [sp, #32]
 8010a70:	1ae3      	subs	r3, r4, r3
 8010a72:	441a      	add	r2, r3
 8010a74:	9e00      	ldr	r6, [sp, #0]
 8010a76:	9b03      	ldr	r3, [sp, #12]
 8010a78:	920d      	str	r2, [sp, #52]	@ 0x34
 8010a7a:	2400      	movs	r4, #0
 8010a7c:	e721      	b.n	80108c2 <_dtoa_r+0x71a>
 8010a7e:	9c08      	ldr	r4, [sp, #32]
 8010a80:	9e00      	ldr	r6, [sp, #0]
 8010a82:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8010a84:	e728      	b.n	80108d8 <_dtoa_r+0x730>
 8010a86:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010a8a:	e751      	b.n	8010930 <_dtoa_r+0x788>
 8010a8c:	9a08      	ldr	r2, [sp, #32]
 8010a8e:	9902      	ldr	r1, [sp, #8]
 8010a90:	e750      	b.n	8010934 <_dtoa_r+0x78c>
 8010a92:	f8cd 8008 	str.w	r8, [sp, #8]
 8010a96:	e751      	b.n	801093c <_dtoa_r+0x794>
 8010a98:	2300      	movs	r3, #0
 8010a9a:	e779      	b.n	8010990 <_dtoa_r+0x7e8>
 8010a9c:	9b04      	ldr	r3, [sp, #16]
 8010a9e:	e777      	b.n	8010990 <_dtoa_r+0x7e8>
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	9308      	str	r3, [sp, #32]
 8010aa4:	e779      	b.n	801099a <_dtoa_r+0x7f2>
 8010aa6:	d093      	beq.n	80109d0 <_dtoa_r+0x828>
 8010aa8:	9a00      	ldr	r2, [sp, #0]
 8010aaa:	331c      	adds	r3, #28
 8010aac:	441a      	add	r2, r3
 8010aae:	9200      	str	r2, [sp, #0]
 8010ab0:	9a06      	ldr	r2, [sp, #24]
 8010ab2:	441a      	add	r2, r3
 8010ab4:	441e      	add	r6, r3
 8010ab6:	9206      	str	r2, [sp, #24]
 8010ab8:	e78a      	b.n	80109d0 <_dtoa_r+0x828>
 8010aba:	4603      	mov	r3, r0
 8010abc:	e7f4      	b.n	8010aa8 <_dtoa_r+0x900>
 8010abe:	9b03      	ldr	r3, [sp, #12]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	46b8      	mov	r8, r7
 8010ac4:	dc20      	bgt.n	8010b08 <_dtoa_r+0x960>
 8010ac6:	469b      	mov	fp, r3
 8010ac8:	9b07      	ldr	r3, [sp, #28]
 8010aca:	2b02      	cmp	r3, #2
 8010acc:	dd1e      	ble.n	8010b0c <_dtoa_r+0x964>
 8010ace:	f1bb 0f00 	cmp.w	fp, #0
 8010ad2:	f47f adb1 	bne.w	8010638 <_dtoa_r+0x490>
 8010ad6:	4621      	mov	r1, r4
 8010ad8:	465b      	mov	r3, fp
 8010ada:	2205      	movs	r2, #5
 8010adc:	4648      	mov	r0, r9
 8010ade:	f000 f9df 	bl	8010ea0 <__multadd>
 8010ae2:	4601      	mov	r1, r0
 8010ae4:	4604      	mov	r4, r0
 8010ae6:	9802      	ldr	r0, [sp, #8]
 8010ae8:	f000 fbea 	bl	80112c0 <__mcmp>
 8010aec:	2800      	cmp	r0, #0
 8010aee:	f77f ada3 	ble.w	8010638 <_dtoa_r+0x490>
 8010af2:	4656      	mov	r6, sl
 8010af4:	2331      	movs	r3, #49	@ 0x31
 8010af6:	f806 3b01 	strb.w	r3, [r6], #1
 8010afa:	f108 0801 	add.w	r8, r8, #1
 8010afe:	e59f      	b.n	8010640 <_dtoa_r+0x498>
 8010b00:	9c03      	ldr	r4, [sp, #12]
 8010b02:	46b8      	mov	r8, r7
 8010b04:	4625      	mov	r5, r4
 8010b06:	e7f4      	b.n	8010af2 <_dtoa_r+0x94a>
 8010b08:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8010b0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	f000 8101 	beq.w	8010d16 <_dtoa_r+0xb6e>
 8010b14:	2e00      	cmp	r6, #0
 8010b16:	dd05      	ble.n	8010b24 <_dtoa_r+0x97c>
 8010b18:	4629      	mov	r1, r5
 8010b1a:	4632      	mov	r2, r6
 8010b1c:	4648      	mov	r0, r9
 8010b1e:	f000 fb63 	bl	80111e8 <__lshift>
 8010b22:	4605      	mov	r5, r0
 8010b24:	9b08      	ldr	r3, [sp, #32]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d05c      	beq.n	8010be4 <_dtoa_r+0xa3c>
 8010b2a:	6869      	ldr	r1, [r5, #4]
 8010b2c:	4648      	mov	r0, r9
 8010b2e:	f000 f955 	bl	8010ddc <_Balloc>
 8010b32:	4606      	mov	r6, r0
 8010b34:	b928      	cbnz	r0, 8010b42 <_dtoa_r+0x99a>
 8010b36:	4b82      	ldr	r3, [pc, #520]	@ (8010d40 <_dtoa_r+0xb98>)
 8010b38:	4602      	mov	r2, r0
 8010b3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010b3e:	f7ff bb4a 	b.w	80101d6 <_dtoa_r+0x2e>
 8010b42:	692a      	ldr	r2, [r5, #16]
 8010b44:	3202      	adds	r2, #2
 8010b46:	0092      	lsls	r2, r2, #2
 8010b48:	f105 010c 	add.w	r1, r5, #12
 8010b4c:	300c      	adds	r0, #12
 8010b4e:	f000 fedd 	bl	801190c <memcpy>
 8010b52:	2201      	movs	r2, #1
 8010b54:	4631      	mov	r1, r6
 8010b56:	4648      	mov	r0, r9
 8010b58:	f000 fb46 	bl	80111e8 <__lshift>
 8010b5c:	f10a 0301 	add.w	r3, sl, #1
 8010b60:	9300      	str	r3, [sp, #0]
 8010b62:	eb0a 030b 	add.w	r3, sl, fp
 8010b66:	9308      	str	r3, [sp, #32]
 8010b68:	9b04      	ldr	r3, [sp, #16]
 8010b6a:	f003 0301 	and.w	r3, r3, #1
 8010b6e:	462f      	mov	r7, r5
 8010b70:	9306      	str	r3, [sp, #24]
 8010b72:	4605      	mov	r5, r0
 8010b74:	9b00      	ldr	r3, [sp, #0]
 8010b76:	9802      	ldr	r0, [sp, #8]
 8010b78:	4621      	mov	r1, r4
 8010b7a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8010b7e:	f7ff fa88 	bl	8010092 <quorem>
 8010b82:	4603      	mov	r3, r0
 8010b84:	3330      	adds	r3, #48	@ 0x30
 8010b86:	9003      	str	r0, [sp, #12]
 8010b88:	4639      	mov	r1, r7
 8010b8a:	9802      	ldr	r0, [sp, #8]
 8010b8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b8e:	f000 fb97 	bl	80112c0 <__mcmp>
 8010b92:	462a      	mov	r2, r5
 8010b94:	9004      	str	r0, [sp, #16]
 8010b96:	4621      	mov	r1, r4
 8010b98:	4648      	mov	r0, r9
 8010b9a:	f000 fbad 	bl	80112f8 <__mdiff>
 8010b9e:	68c2      	ldr	r2, [r0, #12]
 8010ba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ba2:	4606      	mov	r6, r0
 8010ba4:	bb02      	cbnz	r2, 8010be8 <_dtoa_r+0xa40>
 8010ba6:	4601      	mov	r1, r0
 8010ba8:	9802      	ldr	r0, [sp, #8]
 8010baa:	f000 fb89 	bl	80112c0 <__mcmp>
 8010bae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bb0:	4602      	mov	r2, r0
 8010bb2:	4631      	mov	r1, r6
 8010bb4:	4648      	mov	r0, r9
 8010bb6:	920c      	str	r2, [sp, #48]	@ 0x30
 8010bb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8010bba:	f000 f94f 	bl	8010e5c <_Bfree>
 8010bbe:	9b07      	ldr	r3, [sp, #28]
 8010bc0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010bc2:	9e00      	ldr	r6, [sp, #0]
 8010bc4:	ea42 0103 	orr.w	r1, r2, r3
 8010bc8:	9b06      	ldr	r3, [sp, #24]
 8010bca:	4319      	orrs	r1, r3
 8010bcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bce:	d10d      	bne.n	8010bec <_dtoa_r+0xa44>
 8010bd0:	2b39      	cmp	r3, #57	@ 0x39
 8010bd2:	d027      	beq.n	8010c24 <_dtoa_r+0xa7c>
 8010bd4:	9a04      	ldr	r2, [sp, #16]
 8010bd6:	2a00      	cmp	r2, #0
 8010bd8:	dd01      	ble.n	8010bde <_dtoa_r+0xa36>
 8010bda:	9b03      	ldr	r3, [sp, #12]
 8010bdc:	3331      	adds	r3, #49	@ 0x31
 8010bde:	f88b 3000 	strb.w	r3, [fp]
 8010be2:	e52e      	b.n	8010642 <_dtoa_r+0x49a>
 8010be4:	4628      	mov	r0, r5
 8010be6:	e7b9      	b.n	8010b5c <_dtoa_r+0x9b4>
 8010be8:	2201      	movs	r2, #1
 8010bea:	e7e2      	b.n	8010bb2 <_dtoa_r+0xa0a>
 8010bec:	9904      	ldr	r1, [sp, #16]
 8010bee:	2900      	cmp	r1, #0
 8010bf0:	db04      	blt.n	8010bfc <_dtoa_r+0xa54>
 8010bf2:	9807      	ldr	r0, [sp, #28]
 8010bf4:	4301      	orrs	r1, r0
 8010bf6:	9806      	ldr	r0, [sp, #24]
 8010bf8:	4301      	orrs	r1, r0
 8010bfa:	d120      	bne.n	8010c3e <_dtoa_r+0xa96>
 8010bfc:	2a00      	cmp	r2, #0
 8010bfe:	ddee      	ble.n	8010bde <_dtoa_r+0xa36>
 8010c00:	9902      	ldr	r1, [sp, #8]
 8010c02:	9300      	str	r3, [sp, #0]
 8010c04:	2201      	movs	r2, #1
 8010c06:	4648      	mov	r0, r9
 8010c08:	f000 faee 	bl	80111e8 <__lshift>
 8010c0c:	4621      	mov	r1, r4
 8010c0e:	9002      	str	r0, [sp, #8]
 8010c10:	f000 fb56 	bl	80112c0 <__mcmp>
 8010c14:	2800      	cmp	r0, #0
 8010c16:	9b00      	ldr	r3, [sp, #0]
 8010c18:	dc02      	bgt.n	8010c20 <_dtoa_r+0xa78>
 8010c1a:	d1e0      	bne.n	8010bde <_dtoa_r+0xa36>
 8010c1c:	07da      	lsls	r2, r3, #31
 8010c1e:	d5de      	bpl.n	8010bde <_dtoa_r+0xa36>
 8010c20:	2b39      	cmp	r3, #57	@ 0x39
 8010c22:	d1da      	bne.n	8010bda <_dtoa_r+0xa32>
 8010c24:	2339      	movs	r3, #57	@ 0x39
 8010c26:	f88b 3000 	strb.w	r3, [fp]
 8010c2a:	4633      	mov	r3, r6
 8010c2c:	461e      	mov	r6, r3
 8010c2e:	3b01      	subs	r3, #1
 8010c30:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010c34:	2a39      	cmp	r2, #57	@ 0x39
 8010c36:	d04e      	beq.n	8010cd6 <_dtoa_r+0xb2e>
 8010c38:	3201      	adds	r2, #1
 8010c3a:	701a      	strb	r2, [r3, #0]
 8010c3c:	e501      	b.n	8010642 <_dtoa_r+0x49a>
 8010c3e:	2a00      	cmp	r2, #0
 8010c40:	dd03      	ble.n	8010c4a <_dtoa_r+0xaa2>
 8010c42:	2b39      	cmp	r3, #57	@ 0x39
 8010c44:	d0ee      	beq.n	8010c24 <_dtoa_r+0xa7c>
 8010c46:	3301      	adds	r3, #1
 8010c48:	e7c9      	b.n	8010bde <_dtoa_r+0xa36>
 8010c4a:	9a00      	ldr	r2, [sp, #0]
 8010c4c:	9908      	ldr	r1, [sp, #32]
 8010c4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010c52:	428a      	cmp	r2, r1
 8010c54:	d028      	beq.n	8010ca8 <_dtoa_r+0xb00>
 8010c56:	9902      	ldr	r1, [sp, #8]
 8010c58:	2300      	movs	r3, #0
 8010c5a:	220a      	movs	r2, #10
 8010c5c:	4648      	mov	r0, r9
 8010c5e:	f000 f91f 	bl	8010ea0 <__multadd>
 8010c62:	42af      	cmp	r7, r5
 8010c64:	9002      	str	r0, [sp, #8]
 8010c66:	f04f 0300 	mov.w	r3, #0
 8010c6a:	f04f 020a 	mov.w	r2, #10
 8010c6e:	4639      	mov	r1, r7
 8010c70:	4648      	mov	r0, r9
 8010c72:	d107      	bne.n	8010c84 <_dtoa_r+0xadc>
 8010c74:	f000 f914 	bl	8010ea0 <__multadd>
 8010c78:	4607      	mov	r7, r0
 8010c7a:	4605      	mov	r5, r0
 8010c7c:	9b00      	ldr	r3, [sp, #0]
 8010c7e:	3301      	adds	r3, #1
 8010c80:	9300      	str	r3, [sp, #0]
 8010c82:	e777      	b.n	8010b74 <_dtoa_r+0x9cc>
 8010c84:	f000 f90c 	bl	8010ea0 <__multadd>
 8010c88:	4629      	mov	r1, r5
 8010c8a:	4607      	mov	r7, r0
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	220a      	movs	r2, #10
 8010c90:	4648      	mov	r0, r9
 8010c92:	f000 f905 	bl	8010ea0 <__multadd>
 8010c96:	4605      	mov	r5, r0
 8010c98:	e7f0      	b.n	8010c7c <_dtoa_r+0xad4>
 8010c9a:	f1bb 0f00 	cmp.w	fp, #0
 8010c9e:	bfcc      	ite	gt
 8010ca0:	465e      	movgt	r6, fp
 8010ca2:	2601      	movle	r6, #1
 8010ca4:	4456      	add	r6, sl
 8010ca6:	2700      	movs	r7, #0
 8010ca8:	9902      	ldr	r1, [sp, #8]
 8010caa:	9300      	str	r3, [sp, #0]
 8010cac:	2201      	movs	r2, #1
 8010cae:	4648      	mov	r0, r9
 8010cb0:	f000 fa9a 	bl	80111e8 <__lshift>
 8010cb4:	4621      	mov	r1, r4
 8010cb6:	9002      	str	r0, [sp, #8]
 8010cb8:	f000 fb02 	bl	80112c0 <__mcmp>
 8010cbc:	2800      	cmp	r0, #0
 8010cbe:	dcb4      	bgt.n	8010c2a <_dtoa_r+0xa82>
 8010cc0:	d102      	bne.n	8010cc8 <_dtoa_r+0xb20>
 8010cc2:	9b00      	ldr	r3, [sp, #0]
 8010cc4:	07db      	lsls	r3, r3, #31
 8010cc6:	d4b0      	bmi.n	8010c2a <_dtoa_r+0xa82>
 8010cc8:	4633      	mov	r3, r6
 8010cca:	461e      	mov	r6, r3
 8010ccc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010cd0:	2a30      	cmp	r2, #48	@ 0x30
 8010cd2:	d0fa      	beq.n	8010cca <_dtoa_r+0xb22>
 8010cd4:	e4b5      	b.n	8010642 <_dtoa_r+0x49a>
 8010cd6:	459a      	cmp	sl, r3
 8010cd8:	d1a8      	bne.n	8010c2c <_dtoa_r+0xa84>
 8010cda:	2331      	movs	r3, #49	@ 0x31
 8010cdc:	f108 0801 	add.w	r8, r8, #1
 8010ce0:	f88a 3000 	strb.w	r3, [sl]
 8010ce4:	e4ad      	b.n	8010642 <_dtoa_r+0x49a>
 8010ce6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010ce8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8010d44 <_dtoa_r+0xb9c>
 8010cec:	b11b      	cbz	r3, 8010cf6 <_dtoa_r+0xb4e>
 8010cee:	f10a 0308 	add.w	r3, sl, #8
 8010cf2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010cf4:	6013      	str	r3, [r2, #0]
 8010cf6:	4650      	mov	r0, sl
 8010cf8:	b017      	add	sp, #92	@ 0x5c
 8010cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cfe:	9b07      	ldr	r3, [sp, #28]
 8010d00:	2b01      	cmp	r3, #1
 8010d02:	f77f ae2e 	ble.w	8010962 <_dtoa_r+0x7ba>
 8010d06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010d08:	9308      	str	r3, [sp, #32]
 8010d0a:	2001      	movs	r0, #1
 8010d0c:	e64d      	b.n	80109aa <_dtoa_r+0x802>
 8010d0e:	f1bb 0f00 	cmp.w	fp, #0
 8010d12:	f77f aed9 	ble.w	8010ac8 <_dtoa_r+0x920>
 8010d16:	4656      	mov	r6, sl
 8010d18:	9802      	ldr	r0, [sp, #8]
 8010d1a:	4621      	mov	r1, r4
 8010d1c:	f7ff f9b9 	bl	8010092 <quorem>
 8010d20:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8010d24:	f806 3b01 	strb.w	r3, [r6], #1
 8010d28:	eba6 020a 	sub.w	r2, r6, sl
 8010d2c:	4593      	cmp	fp, r2
 8010d2e:	ddb4      	ble.n	8010c9a <_dtoa_r+0xaf2>
 8010d30:	9902      	ldr	r1, [sp, #8]
 8010d32:	2300      	movs	r3, #0
 8010d34:	220a      	movs	r2, #10
 8010d36:	4648      	mov	r0, r9
 8010d38:	f000 f8b2 	bl	8010ea0 <__multadd>
 8010d3c:	9002      	str	r0, [sp, #8]
 8010d3e:	e7eb      	b.n	8010d18 <_dtoa_r+0xb70>
 8010d40:	08012108 	.word	0x08012108
 8010d44:	0801208c 	.word	0x0801208c

08010d48 <_free_r>:
 8010d48:	b538      	push	{r3, r4, r5, lr}
 8010d4a:	4605      	mov	r5, r0
 8010d4c:	2900      	cmp	r1, #0
 8010d4e:	d041      	beq.n	8010dd4 <_free_r+0x8c>
 8010d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d54:	1f0c      	subs	r4, r1, #4
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	bfb8      	it	lt
 8010d5a:	18e4      	addlt	r4, r4, r3
 8010d5c:	f7fe fb6c 	bl	800f438 <__malloc_lock>
 8010d60:	4a1d      	ldr	r2, [pc, #116]	@ (8010dd8 <_free_r+0x90>)
 8010d62:	6813      	ldr	r3, [r2, #0]
 8010d64:	b933      	cbnz	r3, 8010d74 <_free_r+0x2c>
 8010d66:	6063      	str	r3, [r4, #4]
 8010d68:	6014      	str	r4, [r2, #0]
 8010d6a:	4628      	mov	r0, r5
 8010d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d70:	f7fe bb68 	b.w	800f444 <__malloc_unlock>
 8010d74:	42a3      	cmp	r3, r4
 8010d76:	d908      	bls.n	8010d8a <_free_r+0x42>
 8010d78:	6820      	ldr	r0, [r4, #0]
 8010d7a:	1821      	adds	r1, r4, r0
 8010d7c:	428b      	cmp	r3, r1
 8010d7e:	bf01      	itttt	eq
 8010d80:	6819      	ldreq	r1, [r3, #0]
 8010d82:	685b      	ldreq	r3, [r3, #4]
 8010d84:	1809      	addeq	r1, r1, r0
 8010d86:	6021      	streq	r1, [r4, #0]
 8010d88:	e7ed      	b.n	8010d66 <_free_r+0x1e>
 8010d8a:	461a      	mov	r2, r3
 8010d8c:	685b      	ldr	r3, [r3, #4]
 8010d8e:	b10b      	cbz	r3, 8010d94 <_free_r+0x4c>
 8010d90:	42a3      	cmp	r3, r4
 8010d92:	d9fa      	bls.n	8010d8a <_free_r+0x42>
 8010d94:	6811      	ldr	r1, [r2, #0]
 8010d96:	1850      	adds	r0, r2, r1
 8010d98:	42a0      	cmp	r0, r4
 8010d9a:	d10b      	bne.n	8010db4 <_free_r+0x6c>
 8010d9c:	6820      	ldr	r0, [r4, #0]
 8010d9e:	4401      	add	r1, r0
 8010da0:	1850      	adds	r0, r2, r1
 8010da2:	4283      	cmp	r3, r0
 8010da4:	6011      	str	r1, [r2, #0]
 8010da6:	d1e0      	bne.n	8010d6a <_free_r+0x22>
 8010da8:	6818      	ldr	r0, [r3, #0]
 8010daa:	685b      	ldr	r3, [r3, #4]
 8010dac:	6053      	str	r3, [r2, #4]
 8010dae:	4408      	add	r0, r1
 8010db0:	6010      	str	r0, [r2, #0]
 8010db2:	e7da      	b.n	8010d6a <_free_r+0x22>
 8010db4:	d902      	bls.n	8010dbc <_free_r+0x74>
 8010db6:	230c      	movs	r3, #12
 8010db8:	602b      	str	r3, [r5, #0]
 8010dba:	e7d6      	b.n	8010d6a <_free_r+0x22>
 8010dbc:	6820      	ldr	r0, [r4, #0]
 8010dbe:	1821      	adds	r1, r4, r0
 8010dc0:	428b      	cmp	r3, r1
 8010dc2:	bf04      	itt	eq
 8010dc4:	6819      	ldreq	r1, [r3, #0]
 8010dc6:	685b      	ldreq	r3, [r3, #4]
 8010dc8:	6063      	str	r3, [r4, #4]
 8010dca:	bf04      	itt	eq
 8010dcc:	1809      	addeq	r1, r1, r0
 8010dce:	6021      	streq	r1, [r4, #0]
 8010dd0:	6054      	str	r4, [r2, #4]
 8010dd2:	e7ca      	b.n	8010d6a <_free_r+0x22>
 8010dd4:	bd38      	pop	{r3, r4, r5, pc}
 8010dd6:	bf00      	nop
 8010dd8:	20002564 	.word	0x20002564

08010ddc <_Balloc>:
 8010ddc:	b570      	push	{r4, r5, r6, lr}
 8010dde:	69c6      	ldr	r6, [r0, #28]
 8010de0:	4604      	mov	r4, r0
 8010de2:	460d      	mov	r5, r1
 8010de4:	b976      	cbnz	r6, 8010e04 <_Balloc+0x28>
 8010de6:	2010      	movs	r0, #16
 8010de8:	f7fe fa74 	bl	800f2d4 <malloc>
 8010dec:	4602      	mov	r2, r0
 8010dee:	61e0      	str	r0, [r4, #28]
 8010df0:	b920      	cbnz	r0, 8010dfc <_Balloc+0x20>
 8010df2:	4b18      	ldr	r3, [pc, #96]	@ (8010e54 <_Balloc+0x78>)
 8010df4:	4818      	ldr	r0, [pc, #96]	@ (8010e58 <_Balloc+0x7c>)
 8010df6:	216b      	movs	r1, #107	@ 0x6b
 8010df8:	f000 fd96 	bl	8011928 <__assert_func>
 8010dfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010e00:	6006      	str	r6, [r0, #0]
 8010e02:	60c6      	str	r6, [r0, #12]
 8010e04:	69e6      	ldr	r6, [r4, #28]
 8010e06:	68f3      	ldr	r3, [r6, #12]
 8010e08:	b183      	cbz	r3, 8010e2c <_Balloc+0x50>
 8010e0a:	69e3      	ldr	r3, [r4, #28]
 8010e0c:	68db      	ldr	r3, [r3, #12]
 8010e0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010e12:	b9b8      	cbnz	r0, 8010e44 <_Balloc+0x68>
 8010e14:	2101      	movs	r1, #1
 8010e16:	fa01 f605 	lsl.w	r6, r1, r5
 8010e1a:	1d72      	adds	r2, r6, #5
 8010e1c:	0092      	lsls	r2, r2, #2
 8010e1e:	4620      	mov	r0, r4
 8010e20:	f000 fda0 	bl	8011964 <_calloc_r>
 8010e24:	b160      	cbz	r0, 8010e40 <_Balloc+0x64>
 8010e26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010e2a:	e00e      	b.n	8010e4a <_Balloc+0x6e>
 8010e2c:	2221      	movs	r2, #33	@ 0x21
 8010e2e:	2104      	movs	r1, #4
 8010e30:	4620      	mov	r0, r4
 8010e32:	f000 fd97 	bl	8011964 <_calloc_r>
 8010e36:	69e3      	ldr	r3, [r4, #28]
 8010e38:	60f0      	str	r0, [r6, #12]
 8010e3a:	68db      	ldr	r3, [r3, #12]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d1e4      	bne.n	8010e0a <_Balloc+0x2e>
 8010e40:	2000      	movs	r0, #0
 8010e42:	bd70      	pop	{r4, r5, r6, pc}
 8010e44:	6802      	ldr	r2, [r0, #0]
 8010e46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010e50:	e7f7      	b.n	8010e42 <_Balloc+0x66>
 8010e52:	bf00      	nop
 8010e54:	08012099 	.word	0x08012099
 8010e58:	08012119 	.word	0x08012119

08010e5c <_Bfree>:
 8010e5c:	b570      	push	{r4, r5, r6, lr}
 8010e5e:	69c6      	ldr	r6, [r0, #28]
 8010e60:	4605      	mov	r5, r0
 8010e62:	460c      	mov	r4, r1
 8010e64:	b976      	cbnz	r6, 8010e84 <_Bfree+0x28>
 8010e66:	2010      	movs	r0, #16
 8010e68:	f7fe fa34 	bl	800f2d4 <malloc>
 8010e6c:	4602      	mov	r2, r0
 8010e6e:	61e8      	str	r0, [r5, #28]
 8010e70:	b920      	cbnz	r0, 8010e7c <_Bfree+0x20>
 8010e72:	4b09      	ldr	r3, [pc, #36]	@ (8010e98 <_Bfree+0x3c>)
 8010e74:	4809      	ldr	r0, [pc, #36]	@ (8010e9c <_Bfree+0x40>)
 8010e76:	218f      	movs	r1, #143	@ 0x8f
 8010e78:	f000 fd56 	bl	8011928 <__assert_func>
 8010e7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010e80:	6006      	str	r6, [r0, #0]
 8010e82:	60c6      	str	r6, [r0, #12]
 8010e84:	b13c      	cbz	r4, 8010e96 <_Bfree+0x3a>
 8010e86:	69eb      	ldr	r3, [r5, #28]
 8010e88:	6862      	ldr	r2, [r4, #4]
 8010e8a:	68db      	ldr	r3, [r3, #12]
 8010e8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010e90:	6021      	str	r1, [r4, #0]
 8010e92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010e96:	bd70      	pop	{r4, r5, r6, pc}
 8010e98:	08012099 	.word	0x08012099
 8010e9c:	08012119 	.word	0x08012119

08010ea0 <__multadd>:
 8010ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ea4:	690d      	ldr	r5, [r1, #16]
 8010ea6:	4607      	mov	r7, r0
 8010ea8:	460c      	mov	r4, r1
 8010eaa:	461e      	mov	r6, r3
 8010eac:	f101 0c14 	add.w	ip, r1, #20
 8010eb0:	2000      	movs	r0, #0
 8010eb2:	f8dc 3000 	ldr.w	r3, [ip]
 8010eb6:	b299      	uxth	r1, r3
 8010eb8:	fb02 6101 	mla	r1, r2, r1, r6
 8010ebc:	0c1e      	lsrs	r6, r3, #16
 8010ebe:	0c0b      	lsrs	r3, r1, #16
 8010ec0:	fb02 3306 	mla	r3, r2, r6, r3
 8010ec4:	b289      	uxth	r1, r1
 8010ec6:	3001      	adds	r0, #1
 8010ec8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010ecc:	4285      	cmp	r5, r0
 8010ece:	f84c 1b04 	str.w	r1, [ip], #4
 8010ed2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010ed6:	dcec      	bgt.n	8010eb2 <__multadd+0x12>
 8010ed8:	b30e      	cbz	r6, 8010f1e <__multadd+0x7e>
 8010eda:	68a3      	ldr	r3, [r4, #8]
 8010edc:	42ab      	cmp	r3, r5
 8010ede:	dc19      	bgt.n	8010f14 <__multadd+0x74>
 8010ee0:	6861      	ldr	r1, [r4, #4]
 8010ee2:	4638      	mov	r0, r7
 8010ee4:	3101      	adds	r1, #1
 8010ee6:	f7ff ff79 	bl	8010ddc <_Balloc>
 8010eea:	4680      	mov	r8, r0
 8010eec:	b928      	cbnz	r0, 8010efa <__multadd+0x5a>
 8010eee:	4602      	mov	r2, r0
 8010ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8010f24 <__multadd+0x84>)
 8010ef2:	480d      	ldr	r0, [pc, #52]	@ (8010f28 <__multadd+0x88>)
 8010ef4:	21ba      	movs	r1, #186	@ 0xba
 8010ef6:	f000 fd17 	bl	8011928 <__assert_func>
 8010efa:	6922      	ldr	r2, [r4, #16]
 8010efc:	3202      	adds	r2, #2
 8010efe:	f104 010c 	add.w	r1, r4, #12
 8010f02:	0092      	lsls	r2, r2, #2
 8010f04:	300c      	adds	r0, #12
 8010f06:	f000 fd01 	bl	801190c <memcpy>
 8010f0a:	4621      	mov	r1, r4
 8010f0c:	4638      	mov	r0, r7
 8010f0e:	f7ff ffa5 	bl	8010e5c <_Bfree>
 8010f12:	4644      	mov	r4, r8
 8010f14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010f18:	3501      	adds	r5, #1
 8010f1a:	615e      	str	r6, [r3, #20]
 8010f1c:	6125      	str	r5, [r4, #16]
 8010f1e:	4620      	mov	r0, r4
 8010f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f24:	08012108 	.word	0x08012108
 8010f28:	08012119 	.word	0x08012119

08010f2c <__hi0bits>:
 8010f2c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010f30:	4603      	mov	r3, r0
 8010f32:	bf36      	itet	cc
 8010f34:	0403      	lslcc	r3, r0, #16
 8010f36:	2000      	movcs	r0, #0
 8010f38:	2010      	movcc	r0, #16
 8010f3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010f3e:	bf3c      	itt	cc
 8010f40:	021b      	lslcc	r3, r3, #8
 8010f42:	3008      	addcc	r0, #8
 8010f44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010f48:	bf3c      	itt	cc
 8010f4a:	011b      	lslcc	r3, r3, #4
 8010f4c:	3004      	addcc	r0, #4
 8010f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010f52:	bf3c      	itt	cc
 8010f54:	009b      	lslcc	r3, r3, #2
 8010f56:	3002      	addcc	r0, #2
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	db05      	blt.n	8010f68 <__hi0bits+0x3c>
 8010f5c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010f60:	f100 0001 	add.w	r0, r0, #1
 8010f64:	bf08      	it	eq
 8010f66:	2020      	moveq	r0, #32
 8010f68:	4770      	bx	lr

08010f6a <__lo0bits>:
 8010f6a:	6803      	ldr	r3, [r0, #0]
 8010f6c:	4602      	mov	r2, r0
 8010f6e:	f013 0007 	ands.w	r0, r3, #7
 8010f72:	d00b      	beq.n	8010f8c <__lo0bits+0x22>
 8010f74:	07d9      	lsls	r1, r3, #31
 8010f76:	d421      	bmi.n	8010fbc <__lo0bits+0x52>
 8010f78:	0798      	lsls	r0, r3, #30
 8010f7a:	bf49      	itett	mi
 8010f7c:	085b      	lsrmi	r3, r3, #1
 8010f7e:	089b      	lsrpl	r3, r3, #2
 8010f80:	2001      	movmi	r0, #1
 8010f82:	6013      	strmi	r3, [r2, #0]
 8010f84:	bf5c      	itt	pl
 8010f86:	6013      	strpl	r3, [r2, #0]
 8010f88:	2002      	movpl	r0, #2
 8010f8a:	4770      	bx	lr
 8010f8c:	b299      	uxth	r1, r3
 8010f8e:	b909      	cbnz	r1, 8010f94 <__lo0bits+0x2a>
 8010f90:	0c1b      	lsrs	r3, r3, #16
 8010f92:	2010      	movs	r0, #16
 8010f94:	b2d9      	uxtb	r1, r3
 8010f96:	b909      	cbnz	r1, 8010f9c <__lo0bits+0x32>
 8010f98:	3008      	adds	r0, #8
 8010f9a:	0a1b      	lsrs	r3, r3, #8
 8010f9c:	0719      	lsls	r1, r3, #28
 8010f9e:	bf04      	itt	eq
 8010fa0:	091b      	lsreq	r3, r3, #4
 8010fa2:	3004      	addeq	r0, #4
 8010fa4:	0799      	lsls	r1, r3, #30
 8010fa6:	bf04      	itt	eq
 8010fa8:	089b      	lsreq	r3, r3, #2
 8010faa:	3002      	addeq	r0, #2
 8010fac:	07d9      	lsls	r1, r3, #31
 8010fae:	d403      	bmi.n	8010fb8 <__lo0bits+0x4e>
 8010fb0:	085b      	lsrs	r3, r3, #1
 8010fb2:	f100 0001 	add.w	r0, r0, #1
 8010fb6:	d003      	beq.n	8010fc0 <__lo0bits+0x56>
 8010fb8:	6013      	str	r3, [r2, #0]
 8010fba:	4770      	bx	lr
 8010fbc:	2000      	movs	r0, #0
 8010fbe:	4770      	bx	lr
 8010fc0:	2020      	movs	r0, #32
 8010fc2:	4770      	bx	lr

08010fc4 <__i2b>:
 8010fc4:	b510      	push	{r4, lr}
 8010fc6:	460c      	mov	r4, r1
 8010fc8:	2101      	movs	r1, #1
 8010fca:	f7ff ff07 	bl	8010ddc <_Balloc>
 8010fce:	4602      	mov	r2, r0
 8010fd0:	b928      	cbnz	r0, 8010fde <__i2b+0x1a>
 8010fd2:	4b05      	ldr	r3, [pc, #20]	@ (8010fe8 <__i2b+0x24>)
 8010fd4:	4805      	ldr	r0, [pc, #20]	@ (8010fec <__i2b+0x28>)
 8010fd6:	f240 1145 	movw	r1, #325	@ 0x145
 8010fda:	f000 fca5 	bl	8011928 <__assert_func>
 8010fde:	2301      	movs	r3, #1
 8010fe0:	6144      	str	r4, [r0, #20]
 8010fe2:	6103      	str	r3, [r0, #16]
 8010fe4:	bd10      	pop	{r4, pc}
 8010fe6:	bf00      	nop
 8010fe8:	08012108 	.word	0x08012108
 8010fec:	08012119 	.word	0x08012119

08010ff0 <__multiply>:
 8010ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ff4:	4617      	mov	r7, r2
 8010ff6:	690a      	ldr	r2, [r1, #16]
 8010ff8:	693b      	ldr	r3, [r7, #16]
 8010ffa:	429a      	cmp	r2, r3
 8010ffc:	bfa8      	it	ge
 8010ffe:	463b      	movge	r3, r7
 8011000:	4689      	mov	r9, r1
 8011002:	bfa4      	itt	ge
 8011004:	460f      	movge	r7, r1
 8011006:	4699      	movge	r9, r3
 8011008:	693d      	ldr	r5, [r7, #16]
 801100a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801100e:	68bb      	ldr	r3, [r7, #8]
 8011010:	6879      	ldr	r1, [r7, #4]
 8011012:	eb05 060a 	add.w	r6, r5, sl
 8011016:	42b3      	cmp	r3, r6
 8011018:	b085      	sub	sp, #20
 801101a:	bfb8      	it	lt
 801101c:	3101      	addlt	r1, #1
 801101e:	f7ff fedd 	bl	8010ddc <_Balloc>
 8011022:	b930      	cbnz	r0, 8011032 <__multiply+0x42>
 8011024:	4602      	mov	r2, r0
 8011026:	4b41      	ldr	r3, [pc, #260]	@ (801112c <__multiply+0x13c>)
 8011028:	4841      	ldr	r0, [pc, #260]	@ (8011130 <__multiply+0x140>)
 801102a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801102e:	f000 fc7b 	bl	8011928 <__assert_func>
 8011032:	f100 0414 	add.w	r4, r0, #20
 8011036:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801103a:	4623      	mov	r3, r4
 801103c:	2200      	movs	r2, #0
 801103e:	4573      	cmp	r3, lr
 8011040:	d320      	bcc.n	8011084 <__multiply+0x94>
 8011042:	f107 0814 	add.w	r8, r7, #20
 8011046:	f109 0114 	add.w	r1, r9, #20
 801104a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801104e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8011052:	9302      	str	r3, [sp, #8]
 8011054:	1beb      	subs	r3, r5, r7
 8011056:	3b15      	subs	r3, #21
 8011058:	f023 0303 	bic.w	r3, r3, #3
 801105c:	3304      	adds	r3, #4
 801105e:	3715      	adds	r7, #21
 8011060:	42bd      	cmp	r5, r7
 8011062:	bf38      	it	cc
 8011064:	2304      	movcc	r3, #4
 8011066:	9301      	str	r3, [sp, #4]
 8011068:	9b02      	ldr	r3, [sp, #8]
 801106a:	9103      	str	r1, [sp, #12]
 801106c:	428b      	cmp	r3, r1
 801106e:	d80c      	bhi.n	801108a <__multiply+0x9a>
 8011070:	2e00      	cmp	r6, #0
 8011072:	dd03      	ble.n	801107c <__multiply+0x8c>
 8011074:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011078:	2b00      	cmp	r3, #0
 801107a:	d055      	beq.n	8011128 <__multiply+0x138>
 801107c:	6106      	str	r6, [r0, #16]
 801107e:	b005      	add	sp, #20
 8011080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011084:	f843 2b04 	str.w	r2, [r3], #4
 8011088:	e7d9      	b.n	801103e <__multiply+0x4e>
 801108a:	f8b1 a000 	ldrh.w	sl, [r1]
 801108e:	f1ba 0f00 	cmp.w	sl, #0
 8011092:	d01f      	beq.n	80110d4 <__multiply+0xe4>
 8011094:	46c4      	mov	ip, r8
 8011096:	46a1      	mov	r9, r4
 8011098:	2700      	movs	r7, #0
 801109a:	f85c 2b04 	ldr.w	r2, [ip], #4
 801109e:	f8d9 3000 	ldr.w	r3, [r9]
 80110a2:	fa1f fb82 	uxth.w	fp, r2
 80110a6:	b29b      	uxth	r3, r3
 80110a8:	fb0a 330b 	mla	r3, sl, fp, r3
 80110ac:	443b      	add	r3, r7
 80110ae:	f8d9 7000 	ldr.w	r7, [r9]
 80110b2:	0c12      	lsrs	r2, r2, #16
 80110b4:	0c3f      	lsrs	r7, r7, #16
 80110b6:	fb0a 7202 	mla	r2, sl, r2, r7
 80110ba:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80110be:	b29b      	uxth	r3, r3
 80110c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80110c4:	4565      	cmp	r5, ip
 80110c6:	f849 3b04 	str.w	r3, [r9], #4
 80110ca:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80110ce:	d8e4      	bhi.n	801109a <__multiply+0xaa>
 80110d0:	9b01      	ldr	r3, [sp, #4]
 80110d2:	50e7      	str	r7, [r4, r3]
 80110d4:	9b03      	ldr	r3, [sp, #12]
 80110d6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80110da:	3104      	adds	r1, #4
 80110dc:	f1b9 0f00 	cmp.w	r9, #0
 80110e0:	d020      	beq.n	8011124 <__multiply+0x134>
 80110e2:	6823      	ldr	r3, [r4, #0]
 80110e4:	4647      	mov	r7, r8
 80110e6:	46a4      	mov	ip, r4
 80110e8:	f04f 0a00 	mov.w	sl, #0
 80110ec:	f8b7 b000 	ldrh.w	fp, [r7]
 80110f0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80110f4:	fb09 220b 	mla	r2, r9, fp, r2
 80110f8:	4452      	add	r2, sl
 80110fa:	b29b      	uxth	r3, r3
 80110fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011100:	f84c 3b04 	str.w	r3, [ip], #4
 8011104:	f857 3b04 	ldr.w	r3, [r7], #4
 8011108:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801110c:	f8bc 3000 	ldrh.w	r3, [ip]
 8011110:	fb09 330a 	mla	r3, r9, sl, r3
 8011114:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8011118:	42bd      	cmp	r5, r7
 801111a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801111e:	d8e5      	bhi.n	80110ec <__multiply+0xfc>
 8011120:	9a01      	ldr	r2, [sp, #4]
 8011122:	50a3      	str	r3, [r4, r2]
 8011124:	3404      	adds	r4, #4
 8011126:	e79f      	b.n	8011068 <__multiply+0x78>
 8011128:	3e01      	subs	r6, #1
 801112a:	e7a1      	b.n	8011070 <__multiply+0x80>
 801112c:	08012108 	.word	0x08012108
 8011130:	08012119 	.word	0x08012119

08011134 <__pow5mult>:
 8011134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011138:	4615      	mov	r5, r2
 801113a:	f012 0203 	ands.w	r2, r2, #3
 801113e:	4607      	mov	r7, r0
 8011140:	460e      	mov	r6, r1
 8011142:	d007      	beq.n	8011154 <__pow5mult+0x20>
 8011144:	4c25      	ldr	r4, [pc, #148]	@ (80111dc <__pow5mult+0xa8>)
 8011146:	3a01      	subs	r2, #1
 8011148:	2300      	movs	r3, #0
 801114a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801114e:	f7ff fea7 	bl	8010ea0 <__multadd>
 8011152:	4606      	mov	r6, r0
 8011154:	10ad      	asrs	r5, r5, #2
 8011156:	d03d      	beq.n	80111d4 <__pow5mult+0xa0>
 8011158:	69fc      	ldr	r4, [r7, #28]
 801115a:	b97c      	cbnz	r4, 801117c <__pow5mult+0x48>
 801115c:	2010      	movs	r0, #16
 801115e:	f7fe f8b9 	bl	800f2d4 <malloc>
 8011162:	4602      	mov	r2, r0
 8011164:	61f8      	str	r0, [r7, #28]
 8011166:	b928      	cbnz	r0, 8011174 <__pow5mult+0x40>
 8011168:	4b1d      	ldr	r3, [pc, #116]	@ (80111e0 <__pow5mult+0xac>)
 801116a:	481e      	ldr	r0, [pc, #120]	@ (80111e4 <__pow5mult+0xb0>)
 801116c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011170:	f000 fbda 	bl	8011928 <__assert_func>
 8011174:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011178:	6004      	str	r4, [r0, #0]
 801117a:	60c4      	str	r4, [r0, #12]
 801117c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011180:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011184:	b94c      	cbnz	r4, 801119a <__pow5mult+0x66>
 8011186:	f240 2171 	movw	r1, #625	@ 0x271
 801118a:	4638      	mov	r0, r7
 801118c:	f7ff ff1a 	bl	8010fc4 <__i2b>
 8011190:	2300      	movs	r3, #0
 8011192:	f8c8 0008 	str.w	r0, [r8, #8]
 8011196:	4604      	mov	r4, r0
 8011198:	6003      	str	r3, [r0, #0]
 801119a:	f04f 0900 	mov.w	r9, #0
 801119e:	07eb      	lsls	r3, r5, #31
 80111a0:	d50a      	bpl.n	80111b8 <__pow5mult+0x84>
 80111a2:	4631      	mov	r1, r6
 80111a4:	4622      	mov	r2, r4
 80111a6:	4638      	mov	r0, r7
 80111a8:	f7ff ff22 	bl	8010ff0 <__multiply>
 80111ac:	4631      	mov	r1, r6
 80111ae:	4680      	mov	r8, r0
 80111b0:	4638      	mov	r0, r7
 80111b2:	f7ff fe53 	bl	8010e5c <_Bfree>
 80111b6:	4646      	mov	r6, r8
 80111b8:	106d      	asrs	r5, r5, #1
 80111ba:	d00b      	beq.n	80111d4 <__pow5mult+0xa0>
 80111bc:	6820      	ldr	r0, [r4, #0]
 80111be:	b938      	cbnz	r0, 80111d0 <__pow5mult+0x9c>
 80111c0:	4622      	mov	r2, r4
 80111c2:	4621      	mov	r1, r4
 80111c4:	4638      	mov	r0, r7
 80111c6:	f7ff ff13 	bl	8010ff0 <__multiply>
 80111ca:	6020      	str	r0, [r4, #0]
 80111cc:	f8c0 9000 	str.w	r9, [r0]
 80111d0:	4604      	mov	r4, r0
 80111d2:	e7e4      	b.n	801119e <__pow5mult+0x6a>
 80111d4:	4630      	mov	r0, r6
 80111d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111da:	bf00      	nop
 80111dc:	080121cc 	.word	0x080121cc
 80111e0:	08012099 	.word	0x08012099
 80111e4:	08012119 	.word	0x08012119

080111e8 <__lshift>:
 80111e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111ec:	460c      	mov	r4, r1
 80111ee:	6849      	ldr	r1, [r1, #4]
 80111f0:	6923      	ldr	r3, [r4, #16]
 80111f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80111f6:	68a3      	ldr	r3, [r4, #8]
 80111f8:	4607      	mov	r7, r0
 80111fa:	4691      	mov	r9, r2
 80111fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011200:	f108 0601 	add.w	r6, r8, #1
 8011204:	42b3      	cmp	r3, r6
 8011206:	db0b      	blt.n	8011220 <__lshift+0x38>
 8011208:	4638      	mov	r0, r7
 801120a:	f7ff fde7 	bl	8010ddc <_Balloc>
 801120e:	4605      	mov	r5, r0
 8011210:	b948      	cbnz	r0, 8011226 <__lshift+0x3e>
 8011212:	4602      	mov	r2, r0
 8011214:	4b28      	ldr	r3, [pc, #160]	@ (80112b8 <__lshift+0xd0>)
 8011216:	4829      	ldr	r0, [pc, #164]	@ (80112bc <__lshift+0xd4>)
 8011218:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801121c:	f000 fb84 	bl	8011928 <__assert_func>
 8011220:	3101      	adds	r1, #1
 8011222:	005b      	lsls	r3, r3, #1
 8011224:	e7ee      	b.n	8011204 <__lshift+0x1c>
 8011226:	2300      	movs	r3, #0
 8011228:	f100 0114 	add.w	r1, r0, #20
 801122c:	f100 0210 	add.w	r2, r0, #16
 8011230:	4618      	mov	r0, r3
 8011232:	4553      	cmp	r3, sl
 8011234:	db33      	blt.n	801129e <__lshift+0xb6>
 8011236:	6920      	ldr	r0, [r4, #16]
 8011238:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801123c:	f104 0314 	add.w	r3, r4, #20
 8011240:	f019 091f 	ands.w	r9, r9, #31
 8011244:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011248:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801124c:	d02b      	beq.n	80112a6 <__lshift+0xbe>
 801124e:	f1c9 0e20 	rsb	lr, r9, #32
 8011252:	468a      	mov	sl, r1
 8011254:	2200      	movs	r2, #0
 8011256:	6818      	ldr	r0, [r3, #0]
 8011258:	fa00 f009 	lsl.w	r0, r0, r9
 801125c:	4310      	orrs	r0, r2
 801125e:	f84a 0b04 	str.w	r0, [sl], #4
 8011262:	f853 2b04 	ldr.w	r2, [r3], #4
 8011266:	459c      	cmp	ip, r3
 8011268:	fa22 f20e 	lsr.w	r2, r2, lr
 801126c:	d8f3      	bhi.n	8011256 <__lshift+0x6e>
 801126e:	ebac 0304 	sub.w	r3, ip, r4
 8011272:	3b15      	subs	r3, #21
 8011274:	f023 0303 	bic.w	r3, r3, #3
 8011278:	3304      	adds	r3, #4
 801127a:	f104 0015 	add.w	r0, r4, #21
 801127e:	4560      	cmp	r0, ip
 8011280:	bf88      	it	hi
 8011282:	2304      	movhi	r3, #4
 8011284:	50ca      	str	r2, [r1, r3]
 8011286:	b10a      	cbz	r2, 801128c <__lshift+0xa4>
 8011288:	f108 0602 	add.w	r6, r8, #2
 801128c:	3e01      	subs	r6, #1
 801128e:	4638      	mov	r0, r7
 8011290:	612e      	str	r6, [r5, #16]
 8011292:	4621      	mov	r1, r4
 8011294:	f7ff fde2 	bl	8010e5c <_Bfree>
 8011298:	4628      	mov	r0, r5
 801129a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801129e:	f842 0f04 	str.w	r0, [r2, #4]!
 80112a2:	3301      	adds	r3, #1
 80112a4:	e7c5      	b.n	8011232 <__lshift+0x4a>
 80112a6:	3904      	subs	r1, #4
 80112a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80112ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80112b0:	459c      	cmp	ip, r3
 80112b2:	d8f9      	bhi.n	80112a8 <__lshift+0xc0>
 80112b4:	e7ea      	b.n	801128c <__lshift+0xa4>
 80112b6:	bf00      	nop
 80112b8:	08012108 	.word	0x08012108
 80112bc:	08012119 	.word	0x08012119

080112c0 <__mcmp>:
 80112c0:	690a      	ldr	r2, [r1, #16]
 80112c2:	4603      	mov	r3, r0
 80112c4:	6900      	ldr	r0, [r0, #16]
 80112c6:	1a80      	subs	r0, r0, r2
 80112c8:	b530      	push	{r4, r5, lr}
 80112ca:	d10e      	bne.n	80112ea <__mcmp+0x2a>
 80112cc:	3314      	adds	r3, #20
 80112ce:	3114      	adds	r1, #20
 80112d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80112d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80112d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80112dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80112e0:	4295      	cmp	r5, r2
 80112e2:	d003      	beq.n	80112ec <__mcmp+0x2c>
 80112e4:	d205      	bcs.n	80112f2 <__mcmp+0x32>
 80112e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80112ea:	bd30      	pop	{r4, r5, pc}
 80112ec:	42a3      	cmp	r3, r4
 80112ee:	d3f3      	bcc.n	80112d8 <__mcmp+0x18>
 80112f0:	e7fb      	b.n	80112ea <__mcmp+0x2a>
 80112f2:	2001      	movs	r0, #1
 80112f4:	e7f9      	b.n	80112ea <__mcmp+0x2a>
	...

080112f8 <__mdiff>:
 80112f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112fc:	4689      	mov	r9, r1
 80112fe:	4606      	mov	r6, r0
 8011300:	4611      	mov	r1, r2
 8011302:	4648      	mov	r0, r9
 8011304:	4614      	mov	r4, r2
 8011306:	f7ff ffdb 	bl	80112c0 <__mcmp>
 801130a:	1e05      	subs	r5, r0, #0
 801130c:	d112      	bne.n	8011334 <__mdiff+0x3c>
 801130e:	4629      	mov	r1, r5
 8011310:	4630      	mov	r0, r6
 8011312:	f7ff fd63 	bl	8010ddc <_Balloc>
 8011316:	4602      	mov	r2, r0
 8011318:	b928      	cbnz	r0, 8011326 <__mdiff+0x2e>
 801131a:	4b3f      	ldr	r3, [pc, #252]	@ (8011418 <__mdiff+0x120>)
 801131c:	f240 2137 	movw	r1, #567	@ 0x237
 8011320:	483e      	ldr	r0, [pc, #248]	@ (801141c <__mdiff+0x124>)
 8011322:	f000 fb01 	bl	8011928 <__assert_func>
 8011326:	2301      	movs	r3, #1
 8011328:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801132c:	4610      	mov	r0, r2
 801132e:	b003      	add	sp, #12
 8011330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011334:	bfbc      	itt	lt
 8011336:	464b      	movlt	r3, r9
 8011338:	46a1      	movlt	r9, r4
 801133a:	4630      	mov	r0, r6
 801133c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011340:	bfba      	itte	lt
 8011342:	461c      	movlt	r4, r3
 8011344:	2501      	movlt	r5, #1
 8011346:	2500      	movge	r5, #0
 8011348:	f7ff fd48 	bl	8010ddc <_Balloc>
 801134c:	4602      	mov	r2, r0
 801134e:	b918      	cbnz	r0, 8011358 <__mdiff+0x60>
 8011350:	4b31      	ldr	r3, [pc, #196]	@ (8011418 <__mdiff+0x120>)
 8011352:	f240 2145 	movw	r1, #581	@ 0x245
 8011356:	e7e3      	b.n	8011320 <__mdiff+0x28>
 8011358:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801135c:	6926      	ldr	r6, [r4, #16]
 801135e:	60c5      	str	r5, [r0, #12]
 8011360:	f109 0310 	add.w	r3, r9, #16
 8011364:	f109 0514 	add.w	r5, r9, #20
 8011368:	f104 0e14 	add.w	lr, r4, #20
 801136c:	f100 0b14 	add.w	fp, r0, #20
 8011370:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011374:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011378:	9301      	str	r3, [sp, #4]
 801137a:	46d9      	mov	r9, fp
 801137c:	f04f 0c00 	mov.w	ip, #0
 8011380:	9b01      	ldr	r3, [sp, #4]
 8011382:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011386:	f853 af04 	ldr.w	sl, [r3, #4]!
 801138a:	9301      	str	r3, [sp, #4]
 801138c:	fa1f f38a 	uxth.w	r3, sl
 8011390:	4619      	mov	r1, r3
 8011392:	b283      	uxth	r3, r0
 8011394:	1acb      	subs	r3, r1, r3
 8011396:	0c00      	lsrs	r0, r0, #16
 8011398:	4463      	add	r3, ip
 801139a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801139e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80113a2:	b29b      	uxth	r3, r3
 80113a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80113a8:	4576      	cmp	r6, lr
 80113aa:	f849 3b04 	str.w	r3, [r9], #4
 80113ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80113b2:	d8e5      	bhi.n	8011380 <__mdiff+0x88>
 80113b4:	1b33      	subs	r3, r6, r4
 80113b6:	3b15      	subs	r3, #21
 80113b8:	f023 0303 	bic.w	r3, r3, #3
 80113bc:	3415      	adds	r4, #21
 80113be:	3304      	adds	r3, #4
 80113c0:	42a6      	cmp	r6, r4
 80113c2:	bf38      	it	cc
 80113c4:	2304      	movcc	r3, #4
 80113c6:	441d      	add	r5, r3
 80113c8:	445b      	add	r3, fp
 80113ca:	461e      	mov	r6, r3
 80113cc:	462c      	mov	r4, r5
 80113ce:	4544      	cmp	r4, r8
 80113d0:	d30e      	bcc.n	80113f0 <__mdiff+0xf8>
 80113d2:	f108 0103 	add.w	r1, r8, #3
 80113d6:	1b49      	subs	r1, r1, r5
 80113d8:	f021 0103 	bic.w	r1, r1, #3
 80113dc:	3d03      	subs	r5, #3
 80113de:	45a8      	cmp	r8, r5
 80113e0:	bf38      	it	cc
 80113e2:	2100      	movcc	r1, #0
 80113e4:	440b      	add	r3, r1
 80113e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80113ea:	b191      	cbz	r1, 8011412 <__mdiff+0x11a>
 80113ec:	6117      	str	r7, [r2, #16]
 80113ee:	e79d      	b.n	801132c <__mdiff+0x34>
 80113f0:	f854 1b04 	ldr.w	r1, [r4], #4
 80113f4:	46e6      	mov	lr, ip
 80113f6:	0c08      	lsrs	r0, r1, #16
 80113f8:	fa1c fc81 	uxtah	ip, ip, r1
 80113fc:	4471      	add	r1, lr
 80113fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011402:	b289      	uxth	r1, r1
 8011404:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011408:	f846 1b04 	str.w	r1, [r6], #4
 801140c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011410:	e7dd      	b.n	80113ce <__mdiff+0xd6>
 8011412:	3f01      	subs	r7, #1
 8011414:	e7e7      	b.n	80113e6 <__mdiff+0xee>
 8011416:	bf00      	nop
 8011418:	08012108 	.word	0x08012108
 801141c:	08012119 	.word	0x08012119

08011420 <__d2b>:
 8011420:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011424:	460f      	mov	r7, r1
 8011426:	2101      	movs	r1, #1
 8011428:	ec59 8b10 	vmov	r8, r9, d0
 801142c:	4616      	mov	r6, r2
 801142e:	f7ff fcd5 	bl	8010ddc <_Balloc>
 8011432:	4604      	mov	r4, r0
 8011434:	b930      	cbnz	r0, 8011444 <__d2b+0x24>
 8011436:	4602      	mov	r2, r0
 8011438:	4b23      	ldr	r3, [pc, #140]	@ (80114c8 <__d2b+0xa8>)
 801143a:	4824      	ldr	r0, [pc, #144]	@ (80114cc <__d2b+0xac>)
 801143c:	f240 310f 	movw	r1, #783	@ 0x30f
 8011440:	f000 fa72 	bl	8011928 <__assert_func>
 8011444:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011448:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801144c:	b10d      	cbz	r5, 8011452 <__d2b+0x32>
 801144e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011452:	9301      	str	r3, [sp, #4]
 8011454:	f1b8 0300 	subs.w	r3, r8, #0
 8011458:	d023      	beq.n	80114a2 <__d2b+0x82>
 801145a:	4668      	mov	r0, sp
 801145c:	9300      	str	r3, [sp, #0]
 801145e:	f7ff fd84 	bl	8010f6a <__lo0bits>
 8011462:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011466:	b1d0      	cbz	r0, 801149e <__d2b+0x7e>
 8011468:	f1c0 0320 	rsb	r3, r0, #32
 801146c:	fa02 f303 	lsl.w	r3, r2, r3
 8011470:	430b      	orrs	r3, r1
 8011472:	40c2      	lsrs	r2, r0
 8011474:	6163      	str	r3, [r4, #20]
 8011476:	9201      	str	r2, [sp, #4]
 8011478:	9b01      	ldr	r3, [sp, #4]
 801147a:	61a3      	str	r3, [r4, #24]
 801147c:	2b00      	cmp	r3, #0
 801147e:	bf0c      	ite	eq
 8011480:	2201      	moveq	r2, #1
 8011482:	2202      	movne	r2, #2
 8011484:	6122      	str	r2, [r4, #16]
 8011486:	b1a5      	cbz	r5, 80114b2 <__d2b+0x92>
 8011488:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801148c:	4405      	add	r5, r0
 801148e:	603d      	str	r5, [r7, #0]
 8011490:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011494:	6030      	str	r0, [r6, #0]
 8011496:	4620      	mov	r0, r4
 8011498:	b003      	add	sp, #12
 801149a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801149e:	6161      	str	r1, [r4, #20]
 80114a0:	e7ea      	b.n	8011478 <__d2b+0x58>
 80114a2:	a801      	add	r0, sp, #4
 80114a4:	f7ff fd61 	bl	8010f6a <__lo0bits>
 80114a8:	9b01      	ldr	r3, [sp, #4]
 80114aa:	6163      	str	r3, [r4, #20]
 80114ac:	3020      	adds	r0, #32
 80114ae:	2201      	movs	r2, #1
 80114b0:	e7e8      	b.n	8011484 <__d2b+0x64>
 80114b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80114b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80114ba:	6038      	str	r0, [r7, #0]
 80114bc:	6918      	ldr	r0, [r3, #16]
 80114be:	f7ff fd35 	bl	8010f2c <__hi0bits>
 80114c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80114c6:	e7e5      	b.n	8011494 <__d2b+0x74>
 80114c8:	08012108 	.word	0x08012108
 80114cc:	08012119 	.word	0x08012119

080114d0 <__ssputs_r>:
 80114d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114d4:	688e      	ldr	r6, [r1, #8]
 80114d6:	461f      	mov	r7, r3
 80114d8:	42be      	cmp	r6, r7
 80114da:	680b      	ldr	r3, [r1, #0]
 80114dc:	4682      	mov	sl, r0
 80114de:	460c      	mov	r4, r1
 80114e0:	4690      	mov	r8, r2
 80114e2:	d82d      	bhi.n	8011540 <__ssputs_r+0x70>
 80114e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80114e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80114ec:	d026      	beq.n	801153c <__ssputs_r+0x6c>
 80114ee:	6965      	ldr	r5, [r4, #20]
 80114f0:	6909      	ldr	r1, [r1, #16]
 80114f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80114f6:	eba3 0901 	sub.w	r9, r3, r1
 80114fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80114fe:	1c7b      	adds	r3, r7, #1
 8011500:	444b      	add	r3, r9
 8011502:	106d      	asrs	r5, r5, #1
 8011504:	429d      	cmp	r5, r3
 8011506:	bf38      	it	cc
 8011508:	461d      	movcc	r5, r3
 801150a:	0553      	lsls	r3, r2, #21
 801150c:	d527      	bpl.n	801155e <__ssputs_r+0x8e>
 801150e:	4629      	mov	r1, r5
 8011510:	f7fd ff12 	bl	800f338 <_malloc_r>
 8011514:	4606      	mov	r6, r0
 8011516:	b360      	cbz	r0, 8011572 <__ssputs_r+0xa2>
 8011518:	6921      	ldr	r1, [r4, #16]
 801151a:	464a      	mov	r2, r9
 801151c:	f000 f9f6 	bl	801190c <memcpy>
 8011520:	89a3      	ldrh	r3, [r4, #12]
 8011522:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011526:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801152a:	81a3      	strh	r3, [r4, #12]
 801152c:	6126      	str	r6, [r4, #16]
 801152e:	6165      	str	r5, [r4, #20]
 8011530:	444e      	add	r6, r9
 8011532:	eba5 0509 	sub.w	r5, r5, r9
 8011536:	6026      	str	r6, [r4, #0]
 8011538:	60a5      	str	r5, [r4, #8]
 801153a:	463e      	mov	r6, r7
 801153c:	42be      	cmp	r6, r7
 801153e:	d900      	bls.n	8011542 <__ssputs_r+0x72>
 8011540:	463e      	mov	r6, r7
 8011542:	6820      	ldr	r0, [r4, #0]
 8011544:	4632      	mov	r2, r6
 8011546:	4641      	mov	r1, r8
 8011548:	f000 f9c6 	bl	80118d8 <memmove>
 801154c:	68a3      	ldr	r3, [r4, #8]
 801154e:	1b9b      	subs	r3, r3, r6
 8011550:	60a3      	str	r3, [r4, #8]
 8011552:	6823      	ldr	r3, [r4, #0]
 8011554:	4433      	add	r3, r6
 8011556:	6023      	str	r3, [r4, #0]
 8011558:	2000      	movs	r0, #0
 801155a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801155e:	462a      	mov	r2, r5
 8011560:	f000 fa26 	bl	80119b0 <_realloc_r>
 8011564:	4606      	mov	r6, r0
 8011566:	2800      	cmp	r0, #0
 8011568:	d1e0      	bne.n	801152c <__ssputs_r+0x5c>
 801156a:	6921      	ldr	r1, [r4, #16]
 801156c:	4650      	mov	r0, sl
 801156e:	f7ff fbeb 	bl	8010d48 <_free_r>
 8011572:	230c      	movs	r3, #12
 8011574:	f8ca 3000 	str.w	r3, [sl]
 8011578:	89a3      	ldrh	r3, [r4, #12]
 801157a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801157e:	81a3      	strh	r3, [r4, #12]
 8011580:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011584:	e7e9      	b.n	801155a <__ssputs_r+0x8a>
	...

08011588 <_svfiprintf_r>:
 8011588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801158c:	4698      	mov	r8, r3
 801158e:	898b      	ldrh	r3, [r1, #12]
 8011590:	061b      	lsls	r3, r3, #24
 8011592:	b09d      	sub	sp, #116	@ 0x74
 8011594:	4607      	mov	r7, r0
 8011596:	460d      	mov	r5, r1
 8011598:	4614      	mov	r4, r2
 801159a:	d510      	bpl.n	80115be <_svfiprintf_r+0x36>
 801159c:	690b      	ldr	r3, [r1, #16]
 801159e:	b973      	cbnz	r3, 80115be <_svfiprintf_r+0x36>
 80115a0:	2140      	movs	r1, #64	@ 0x40
 80115a2:	f7fd fec9 	bl	800f338 <_malloc_r>
 80115a6:	6028      	str	r0, [r5, #0]
 80115a8:	6128      	str	r0, [r5, #16]
 80115aa:	b930      	cbnz	r0, 80115ba <_svfiprintf_r+0x32>
 80115ac:	230c      	movs	r3, #12
 80115ae:	603b      	str	r3, [r7, #0]
 80115b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80115b4:	b01d      	add	sp, #116	@ 0x74
 80115b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115ba:	2340      	movs	r3, #64	@ 0x40
 80115bc:	616b      	str	r3, [r5, #20]
 80115be:	2300      	movs	r3, #0
 80115c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80115c2:	2320      	movs	r3, #32
 80115c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80115c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80115cc:	2330      	movs	r3, #48	@ 0x30
 80115ce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801176c <_svfiprintf_r+0x1e4>
 80115d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80115d6:	f04f 0901 	mov.w	r9, #1
 80115da:	4623      	mov	r3, r4
 80115dc:	469a      	mov	sl, r3
 80115de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80115e2:	b10a      	cbz	r2, 80115e8 <_svfiprintf_r+0x60>
 80115e4:	2a25      	cmp	r2, #37	@ 0x25
 80115e6:	d1f9      	bne.n	80115dc <_svfiprintf_r+0x54>
 80115e8:	ebba 0b04 	subs.w	fp, sl, r4
 80115ec:	d00b      	beq.n	8011606 <_svfiprintf_r+0x7e>
 80115ee:	465b      	mov	r3, fp
 80115f0:	4622      	mov	r2, r4
 80115f2:	4629      	mov	r1, r5
 80115f4:	4638      	mov	r0, r7
 80115f6:	f7ff ff6b 	bl	80114d0 <__ssputs_r>
 80115fa:	3001      	adds	r0, #1
 80115fc:	f000 80a7 	beq.w	801174e <_svfiprintf_r+0x1c6>
 8011600:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011602:	445a      	add	r2, fp
 8011604:	9209      	str	r2, [sp, #36]	@ 0x24
 8011606:	f89a 3000 	ldrb.w	r3, [sl]
 801160a:	2b00      	cmp	r3, #0
 801160c:	f000 809f 	beq.w	801174e <_svfiprintf_r+0x1c6>
 8011610:	2300      	movs	r3, #0
 8011612:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011616:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801161a:	f10a 0a01 	add.w	sl, sl, #1
 801161e:	9304      	str	r3, [sp, #16]
 8011620:	9307      	str	r3, [sp, #28]
 8011622:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011626:	931a      	str	r3, [sp, #104]	@ 0x68
 8011628:	4654      	mov	r4, sl
 801162a:	2205      	movs	r2, #5
 801162c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011630:	484e      	ldr	r0, [pc, #312]	@ (801176c <_svfiprintf_r+0x1e4>)
 8011632:	f7ee fdf5 	bl	8000220 <memchr>
 8011636:	9a04      	ldr	r2, [sp, #16]
 8011638:	b9d8      	cbnz	r0, 8011672 <_svfiprintf_r+0xea>
 801163a:	06d0      	lsls	r0, r2, #27
 801163c:	bf44      	itt	mi
 801163e:	2320      	movmi	r3, #32
 8011640:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011644:	0711      	lsls	r1, r2, #28
 8011646:	bf44      	itt	mi
 8011648:	232b      	movmi	r3, #43	@ 0x2b
 801164a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801164e:	f89a 3000 	ldrb.w	r3, [sl]
 8011652:	2b2a      	cmp	r3, #42	@ 0x2a
 8011654:	d015      	beq.n	8011682 <_svfiprintf_r+0xfa>
 8011656:	9a07      	ldr	r2, [sp, #28]
 8011658:	4654      	mov	r4, sl
 801165a:	2000      	movs	r0, #0
 801165c:	f04f 0c0a 	mov.w	ip, #10
 8011660:	4621      	mov	r1, r4
 8011662:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011666:	3b30      	subs	r3, #48	@ 0x30
 8011668:	2b09      	cmp	r3, #9
 801166a:	d94b      	bls.n	8011704 <_svfiprintf_r+0x17c>
 801166c:	b1b0      	cbz	r0, 801169c <_svfiprintf_r+0x114>
 801166e:	9207      	str	r2, [sp, #28]
 8011670:	e014      	b.n	801169c <_svfiprintf_r+0x114>
 8011672:	eba0 0308 	sub.w	r3, r0, r8
 8011676:	fa09 f303 	lsl.w	r3, r9, r3
 801167a:	4313      	orrs	r3, r2
 801167c:	9304      	str	r3, [sp, #16]
 801167e:	46a2      	mov	sl, r4
 8011680:	e7d2      	b.n	8011628 <_svfiprintf_r+0xa0>
 8011682:	9b03      	ldr	r3, [sp, #12]
 8011684:	1d19      	adds	r1, r3, #4
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	9103      	str	r1, [sp, #12]
 801168a:	2b00      	cmp	r3, #0
 801168c:	bfbb      	ittet	lt
 801168e:	425b      	neglt	r3, r3
 8011690:	f042 0202 	orrlt.w	r2, r2, #2
 8011694:	9307      	strge	r3, [sp, #28]
 8011696:	9307      	strlt	r3, [sp, #28]
 8011698:	bfb8      	it	lt
 801169a:	9204      	strlt	r2, [sp, #16]
 801169c:	7823      	ldrb	r3, [r4, #0]
 801169e:	2b2e      	cmp	r3, #46	@ 0x2e
 80116a0:	d10a      	bne.n	80116b8 <_svfiprintf_r+0x130>
 80116a2:	7863      	ldrb	r3, [r4, #1]
 80116a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80116a6:	d132      	bne.n	801170e <_svfiprintf_r+0x186>
 80116a8:	9b03      	ldr	r3, [sp, #12]
 80116aa:	1d1a      	adds	r2, r3, #4
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	9203      	str	r2, [sp, #12]
 80116b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80116b4:	3402      	adds	r4, #2
 80116b6:	9305      	str	r3, [sp, #20]
 80116b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801177c <_svfiprintf_r+0x1f4>
 80116bc:	7821      	ldrb	r1, [r4, #0]
 80116be:	2203      	movs	r2, #3
 80116c0:	4650      	mov	r0, sl
 80116c2:	f7ee fdad 	bl	8000220 <memchr>
 80116c6:	b138      	cbz	r0, 80116d8 <_svfiprintf_r+0x150>
 80116c8:	9b04      	ldr	r3, [sp, #16]
 80116ca:	eba0 000a 	sub.w	r0, r0, sl
 80116ce:	2240      	movs	r2, #64	@ 0x40
 80116d0:	4082      	lsls	r2, r0
 80116d2:	4313      	orrs	r3, r2
 80116d4:	3401      	adds	r4, #1
 80116d6:	9304      	str	r3, [sp, #16]
 80116d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116dc:	4824      	ldr	r0, [pc, #144]	@ (8011770 <_svfiprintf_r+0x1e8>)
 80116de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80116e2:	2206      	movs	r2, #6
 80116e4:	f7ee fd9c 	bl	8000220 <memchr>
 80116e8:	2800      	cmp	r0, #0
 80116ea:	d036      	beq.n	801175a <_svfiprintf_r+0x1d2>
 80116ec:	4b21      	ldr	r3, [pc, #132]	@ (8011774 <_svfiprintf_r+0x1ec>)
 80116ee:	bb1b      	cbnz	r3, 8011738 <_svfiprintf_r+0x1b0>
 80116f0:	9b03      	ldr	r3, [sp, #12]
 80116f2:	3307      	adds	r3, #7
 80116f4:	f023 0307 	bic.w	r3, r3, #7
 80116f8:	3308      	adds	r3, #8
 80116fa:	9303      	str	r3, [sp, #12]
 80116fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116fe:	4433      	add	r3, r6
 8011700:	9309      	str	r3, [sp, #36]	@ 0x24
 8011702:	e76a      	b.n	80115da <_svfiprintf_r+0x52>
 8011704:	fb0c 3202 	mla	r2, ip, r2, r3
 8011708:	460c      	mov	r4, r1
 801170a:	2001      	movs	r0, #1
 801170c:	e7a8      	b.n	8011660 <_svfiprintf_r+0xd8>
 801170e:	2300      	movs	r3, #0
 8011710:	3401      	adds	r4, #1
 8011712:	9305      	str	r3, [sp, #20]
 8011714:	4619      	mov	r1, r3
 8011716:	f04f 0c0a 	mov.w	ip, #10
 801171a:	4620      	mov	r0, r4
 801171c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011720:	3a30      	subs	r2, #48	@ 0x30
 8011722:	2a09      	cmp	r2, #9
 8011724:	d903      	bls.n	801172e <_svfiprintf_r+0x1a6>
 8011726:	2b00      	cmp	r3, #0
 8011728:	d0c6      	beq.n	80116b8 <_svfiprintf_r+0x130>
 801172a:	9105      	str	r1, [sp, #20]
 801172c:	e7c4      	b.n	80116b8 <_svfiprintf_r+0x130>
 801172e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011732:	4604      	mov	r4, r0
 8011734:	2301      	movs	r3, #1
 8011736:	e7f0      	b.n	801171a <_svfiprintf_r+0x192>
 8011738:	ab03      	add	r3, sp, #12
 801173a:	9300      	str	r3, [sp, #0]
 801173c:	462a      	mov	r2, r5
 801173e:	4b0e      	ldr	r3, [pc, #56]	@ (8011778 <_svfiprintf_r+0x1f0>)
 8011740:	a904      	add	r1, sp, #16
 8011742:	4638      	mov	r0, r7
 8011744:	f7fd ff24 	bl	800f590 <_printf_float>
 8011748:	1c42      	adds	r2, r0, #1
 801174a:	4606      	mov	r6, r0
 801174c:	d1d6      	bne.n	80116fc <_svfiprintf_r+0x174>
 801174e:	89ab      	ldrh	r3, [r5, #12]
 8011750:	065b      	lsls	r3, r3, #25
 8011752:	f53f af2d 	bmi.w	80115b0 <_svfiprintf_r+0x28>
 8011756:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011758:	e72c      	b.n	80115b4 <_svfiprintf_r+0x2c>
 801175a:	ab03      	add	r3, sp, #12
 801175c:	9300      	str	r3, [sp, #0]
 801175e:	462a      	mov	r2, r5
 8011760:	4b05      	ldr	r3, [pc, #20]	@ (8011778 <_svfiprintf_r+0x1f0>)
 8011762:	a904      	add	r1, sp, #16
 8011764:	4638      	mov	r0, r7
 8011766:	f7fe f9ab 	bl	800fac0 <_printf_i>
 801176a:	e7ed      	b.n	8011748 <_svfiprintf_r+0x1c0>
 801176c:	08012172 	.word	0x08012172
 8011770:	0801217c 	.word	0x0801217c
 8011774:	0800f591 	.word	0x0800f591
 8011778:	080114d1 	.word	0x080114d1
 801177c:	08012178 	.word	0x08012178

08011780 <__sflush_r>:
 8011780:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011788:	0716      	lsls	r6, r2, #28
 801178a:	4605      	mov	r5, r0
 801178c:	460c      	mov	r4, r1
 801178e:	d454      	bmi.n	801183a <__sflush_r+0xba>
 8011790:	684b      	ldr	r3, [r1, #4]
 8011792:	2b00      	cmp	r3, #0
 8011794:	dc02      	bgt.n	801179c <__sflush_r+0x1c>
 8011796:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011798:	2b00      	cmp	r3, #0
 801179a:	dd48      	ble.n	801182e <__sflush_r+0xae>
 801179c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801179e:	2e00      	cmp	r6, #0
 80117a0:	d045      	beq.n	801182e <__sflush_r+0xae>
 80117a2:	2300      	movs	r3, #0
 80117a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80117a8:	682f      	ldr	r7, [r5, #0]
 80117aa:	6a21      	ldr	r1, [r4, #32]
 80117ac:	602b      	str	r3, [r5, #0]
 80117ae:	d030      	beq.n	8011812 <__sflush_r+0x92>
 80117b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80117b2:	89a3      	ldrh	r3, [r4, #12]
 80117b4:	0759      	lsls	r1, r3, #29
 80117b6:	d505      	bpl.n	80117c4 <__sflush_r+0x44>
 80117b8:	6863      	ldr	r3, [r4, #4]
 80117ba:	1ad2      	subs	r2, r2, r3
 80117bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80117be:	b10b      	cbz	r3, 80117c4 <__sflush_r+0x44>
 80117c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80117c2:	1ad2      	subs	r2, r2, r3
 80117c4:	2300      	movs	r3, #0
 80117c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80117c8:	6a21      	ldr	r1, [r4, #32]
 80117ca:	4628      	mov	r0, r5
 80117cc:	47b0      	blx	r6
 80117ce:	1c43      	adds	r3, r0, #1
 80117d0:	89a3      	ldrh	r3, [r4, #12]
 80117d2:	d106      	bne.n	80117e2 <__sflush_r+0x62>
 80117d4:	6829      	ldr	r1, [r5, #0]
 80117d6:	291d      	cmp	r1, #29
 80117d8:	d82b      	bhi.n	8011832 <__sflush_r+0xb2>
 80117da:	4a2a      	ldr	r2, [pc, #168]	@ (8011884 <__sflush_r+0x104>)
 80117dc:	40ca      	lsrs	r2, r1
 80117de:	07d6      	lsls	r6, r2, #31
 80117e0:	d527      	bpl.n	8011832 <__sflush_r+0xb2>
 80117e2:	2200      	movs	r2, #0
 80117e4:	6062      	str	r2, [r4, #4]
 80117e6:	04d9      	lsls	r1, r3, #19
 80117e8:	6922      	ldr	r2, [r4, #16]
 80117ea:	6022      	str	r2, [r4, #0]
 80117ec:	d504      	bpl.n	80117f8 <__sflush_r+0x78>
 80117ee:	1c42      	adds	r2, r0, #1
 80117f0:	d101      	bne.n	80117f6 <__sflush_r+0x76>
 80117f2:	682b      	ldr	r3, [r5, #0]
 80117f4:	b903      	cbnz	r3, 80117f8 <__sflush_r+0x78>
 80117f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80117f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80117fa:	602f      	str	r7, [r5, #0]
 80117fc:	b1b9      	cbz	r1, 801182e <__sflush_r+0xae>
 80117fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011802:	4299      	cmp	r1, r3
 8011804:	d002      	beq.n	801180c <__sflush_r+0x8c>
 8011806:	4628      	mov	r0, r5
 8011808:	f7ff fa9e 	bl	8010d48 <_free_r>
 801180c:	2300      	movs	r3, #0
 801180e:	6363      	str	r3, [r4, #52]	@ 0x34
 8011810:	e00d      	b.n	801182e <__sflush_r+0xae>
 8011812:	2301      	movs	r3, #1
 8011814:	4628      	mov	r0, r5
 8011816:	47b0      	blx	r6
 8011818:	4602      	mov	r2, r0
 801181a:	1c50      	adds	r0, r2, #1
 801181c:	d1c9      	bne.n	80117b2 <__sflush_r+0x32>
 801181e:	682b      	ldr	r3, [r5, #0]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d0c6      	beq.n	80117b2 <__sflush_r+0x32>
 8011824:	2b1d      	cmp	r3, #29
 8011826:	d001      	beq.n	801182c <__sflush_r+0xac>
 8011828:	2b16      	cmp	r3, #22
 801182a:	d11e      	bne.n	801186a <__sflush_r+0xea>
 801182c:	602f      	str	r7, [r5, #0]
 801182e:	2000      	movs	r0, #0
 8011830:	e022      	b.n	8011878 <__sflush_r+0xf8>
 8011832:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011836:	b21b      	sxth	r3, r3
 8011838:	e01b      	b.n	8011872 <__sflush_r+0xf2>
 801183a:	690f      	ldr	r7, [r1, #16]
 801183c:	2f00      	cmp	r7, #0
 801183e:	d0f6      	beq.n	801182e <__sflush_r+0xae>
 8011840:	0793      	lsls	r3, r2, #30
 8011842:	680e      	ldr	r6, [r1, #0]
 8011844:	bf08      	it	eq
 8011846:	694b      	ldreq	r3, [r1, #20]
 8011848:	600f      	str	r7, [r1, #0]
 801184a:	bf18      	it	ne
 801184c:	2300      	movne	r3, #0
 801184e:	eba6 0807 	sub.w	r8, r6, r7
 8011852:	608b      	str	r3, [r1, #8]
 8011854:	f1b8 0f00 	cmp.w	r8, #0
 8011858:	dde9      	ble.n	801182e <__sflush_r+0xae>
 801185a:	6a21      	ldr	r1, [r4, #32]
 801185c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801185e:	4643      	mov	r3, r8
 8011860:	463a      	mov	r2, r7
 8011862:	4628      	mov	r0, r5
 8011864:	47b0      	blx	r6
 8011866:	2800      	cmp	r0, #0
 8011868:	dc08      	bgt.n	801187c <__sflush_r+0xfc>
 801186a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801186e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011872:	81a3      	strh	r3, [r4, #12]
 8011874:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801187c:	4407      	add	r7, r0
 801187e:	eba8 0800 	sub.w	r8, r8, r0
 8011882:	e7e7      	b.n	8011854 <__sflush_r+0xd4>
 8011884:	20400001 	.word	0x20400001

08011888 <_fflush_r>:
 8011888:	b538      	push	{r3, r4, r5, lr}
 801188a:	690b      	ldr	r3, [r1, #16]
 801188c:	4605      	mov	r5, r0
 801188e:	460c      	mov	r4, r1
 8011890:	b913      	cbnz	r3, 8011898 <_fflush_r+0x10>
 8011892:	2500      	movs	r5, #0
 8011894:	4628      	mov	r0, r5
 8011896:	bd38      	pop	{r3, r4, r5, pc}
 8011898:	b118      	cbz	r0, 80118a2 <_fflush_r+0x1a>
 801189a:	6a03      	ldr	r3, [r0, #32]
 801189c:	b90b      	cbnz	r3, 80118a2 <_fflush_r+0x1a>
 801189e:	f7fe fab9 	bl	800fe14 <__sinit>
 80118a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d0f3      	beq.n	8011892 <_fflush_r+0xa>
 80118aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80118ac:	07d0      	lsls	r0, r2, #31
 80118ae:	d404      	bmi.n	80118ba <_fflush_r+0x32>
 80118b0:	0599      	lsls	r1, r3, #22
 80118b2:	d402      	bmi.n	80118ba <_fflush_r+0x32>
 80118b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80118b6:	f7fe fbea 	bl	801008e <__retarget_lock_acquire_recursive>
 80118ba:	4628      	mov	r0, r5
 80118bc:	4621      	mov	r1, r4
 80118be:	f7ff ff5f 	bl	8011780 <__sflush_r>
 80118c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80118c4:	07da      	lsls	r2, r3, #31
 80118c6:	4605      	mov	r5, r0
 80118c8:	d4e4      	bmi.n	8011894 <_fflush_r+0xc>
 80118ca:	89a3      	ldrh	r3, [r4, #12]
 80118cc:	059b      	lsls	r3, r3, #22
 80118ce:	d4e1      	bmi.n	8011894 <_fflush_r+0xc>
 80118d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80118d2:	f7fe fbdd 	bl	8010090 <__retarget_lock_release_recursive>
 80118d6:	e7dd      	b.n	8011894 <_fflush_r+0xc>

080118d8 <memmove>:
 80118d8:	4288      	cmp	r0, r1
 80118da:	b510      	push	{r4, lr}
 80118dc:	eb01 0402 	add.w	r4, r1, r2
 80118e0:	d902      	bls.n	80118e8 <memmove+0x10>
 80118e2:	4284      	cmp	r4, r0
 80118e4:	4623      	mov	r3, r4
 80118e6:	d807      	bhi.n	80118f8 <memmove+0x20>
 80118e8:	1e43      	subs	r3, r0, #1
 80118ea:	42a1      	cmp	r1, r4
 80118ec:	d008      	beq.n	8011900 <memmove+0x28>
 80118ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80118f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80118f6:	e7f8      	b.n	80118ea <memmove+0x12>
 80118f8:	4402      	add	r2, r0
 80118fa:	4601      	mov	r1, r0
 80118fc:	428a      	cmp	r2, r1
 80118fe:	d100      	bne.n	8011902 <memmove+0x2a>
 8011900:	bd10      	pop	{r4, pc}
 8011902:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011906:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801190a:	e7f7      	b.n	80118fc <memmove+0x24>

0801190c <memcpy>:
 801190c:	440a      	add	r2, r1
 801190e:	4291      	cmp	r1, r2
 8011910:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8011914:	d100      	bne.n	8011918 <memcpy+0xc>
 8011916:	4770      	bx	lr
 8011918:	b510      	push	{r4, lr}
 801191a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801191e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011922:	4291      	cmp	r1, r2
 8011924:	d1f9      	bne.n	801191a <memcpy+0xe>
 8011926:	bd10      	pop	{r4, pc}

08011928 <__assert_func>:
 8011928:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801192a:	4614      	mov	r4, r2
 801192c:	461a      	mov	r2, r3
 801192e:	4b09      	ldr	r3, [pc, #36]	@ (8011954 <__assert_func+0x2c>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	4605      	mov	r5, r0
 8011934:	68d8      	ldr	r0, [r3, #12]
 8011936:	b14c      	cbz	r4, 801194c <__assert_func+0x24>
 8011938:	4b07      	ldr	r3, [pc, #28]	@ (8011958 <__assert_func+0x30>)
 801193a:	9100      	str	r1, [sp, #0]
 801193c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011940:	4906      	ldr	r1, [pc, #24]	@ (801195c <__assert_func+0x34>)
 8011942:	462b      	mov	r3, r5
 8011944:	f000 f870 	bl	8011a28 <fiprintf>
 8011948:	f000 f880 	bl	8011a4c <abort>
 801194c:	4b04      	ldr	r3, [pc, #16]	@ (8011960 <__assert_func+0x38>)
 801194e:	461c      	mov	r4, r3
 8011950:	e7f3      	b.n	801193a <__assert_func+0x12>
 8011952:	bf00      	nop
 8011954:	20000118 	.word	0x20000118
 8011958:	0801218d 	.word	0x0801218d
 801195c:	0801219a 	.word	0x0801219a
 8011960:	080121c8 	.word	0x080121c8

08011964 <_calloc_r>:
 8011964:	b570      	push	{r4, r5, r6, lr}
 8011966:	fba1 5402 	umull	r5, r4, r1, r2
 801196a:	b934      	cbnz	r4, 801197a <_calloc_r+0x16>
 801196c:	4629      	mov	r1, r5
 801196e:	f7fd fce3 	bl	800f338 <_malloc_r>
 8011972:	4606      	mov	r6, r0
 8011974:	b928      	cbnz	r0, 8011982 <_calloc_r+0x1e>
 8011976:	4630      	mov	r0, r6
 8011978:	bd70      	pop	{r4, r5, r6, pc}
 801197a:	220c      	movs	r2, #12
 801197c:	6002      	str	r2, [r0, #0]
 801197e:	2600      	movs	r6, #0
 8011980:	e7f9      	b.n	8011976 <_calloc_r+0x12>
 8011982:	462a      	mov	r2, r5
 8011984:	4621      	mov	r1, r4
 8011986:	f7fe faf4 	bl	800ff72 <memset>
 801198a:	e7f4      	b.n	8011976 <_calloc_r+0x12>

0801198c <__ascii_mbtowc>:
 801198c:	b082      	sub	sp, #8
 801198e:	b901      	cbnz	r1, 8011992 <__ascii_mbtowc+0x6>
 8011990:	a901      	add	r1, sp, #4
 8011992:	b142      	cbz	r2, 80119a6 <__ascii_mbtowc+0x1a>
 8011994:	b14b      	cbz	r3, 80119aa <__ascii_mbtowc+0x1e>
 8011996:	7813      	ldrb	r3, [r2, #0]
 8011998:	600b      	str	r3, [r1, #0]
 801199a:	7812      	ldrb	r2, [r2, #0]
 801199c:	1e10      	subs	r0, r2, #0
 801199e:	bf18      	it	ne
 80119a0:	2001      	movne	r0, #1
 80119a2:	b002      	add	sp, #8
 80119a4:	4770      	bx	lr
 80119a6:	4610      	mov	r0, r2
 80119a8:	e7fb      	b.n	80119a2 <__ascii_mbtowc+0x16>
 80119aa:	f06f 0001 	mvn.w	r0, #1
 80119ae:	e7f8      	b.n	80119a2 <__ascii_mbtowc+0x16>

080119b0 <_realloc_r>:
 80119b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119b4:	4607      	mov	r7, r0
 80119b6:	4614      	mov	r4, r2
 80119b8:	460d      	mov	r5, r1
 80119ba:	b921      	cbnz	r1, 80119c6 <_realloc_r+0x16>
 80119bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80119c0:	4611      	mov	r1, r2
 80119c2:	f7fd bcb9 	b.w	800f338 <_malloc_r>
 80119c6:	b92a      	cbnz	r2, 80119d4 <_realloc_r+0x24>
 80119c8:	f7ff f9be 	bl	8010d48 <_free_r>
 80119cc:	4625      	mov	r5, r4
 80119ce:	4628      	mov	r0, r5
 80119d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119d4:	f000 f841 	bl	8011a5a <_malloc_usable_size_r>
 80119d8:	4284      	cmp	r4, r0
 80119da:	4606      	mov	r6, r0
 80119dc:	d802      	bhi.n	80119e4 <_realloc_r+0x34>
 80119de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80119e2:	d8f4      	bhi.n	80119ce <_realloc_r+0x1e>
 80119e4:	4621      	mov	r1, r4
 80119e6:	4638      	mov	r0, r7
 80119e8:	f7fd fca6 	bl	800f338 <_malloc_r>
 80119ec:	4680      	mov	r8, r0
 80119ee:	b908      	cbnz	r0, 80119f4 <_realloc_r+0x44>
 80119f0:	4645      	mov	r5, r8
 80119f2:	e7ec      	b.n	80119ce <_realloc_r+0x1e>
 80119f4:	42b4      	cmp	r4, r6
 80119f6:	4622      	mov	r2, r4
 80119f8:	4629      	mov	r1, r5
 80119fa:	bf28      	it	cs
 80119fc:	4632      	movcs	r2, r6
 80119fe:	f7ff ff85 	bl	801190c <memcpy>
 8011a02:	4629      	mov	r1, r5
 8011a04:	4638      	mov	r0, r7
 8011a06:	f7ff f99f 	bl	8010d48 <_free_r>
 8011a0a:	e7f1      	b.n	80119f0 <_realloc_r+0x40>

08011a0c <__ascii_wctomb>:
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	4608      	mov	r0, r1
 8011a10:	b141      	cbz	r1, 8011a24 <__ascii_wctomb+0x18>
 8011a12:	2aff      	cmp	r2, #255	@ 0xff
 8011a14:	d904      	bls.n	8011a20 <__ascii_wctomb+0x14>
 8011a16:	228a      	movs	r2, #138	@ 0x8a
 8011a18:	601a      	str	r2, [r3, #0]
 8011a1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011a1e:	4770      	bx	lr
 8011a20:	700a      	strb	r2, [r1, #0]
 8011a22:	2001      	movs	r0, #1
 8011a24:	4770      	bx	lr
	...

08011a28 <fiprintf>:
 8011a28:	b40e      	push	{r1, r2, r3}
 8011a2a:	b503      	push	{r0, r1, lr}
 8011a2c:	4601      	mov	r1, r0
 8011a2e:	ab03      	add	r3, sp, #12
 8011a30:	4805      	ldr	r0, [pc, #20]	@ (8011a48 <fiprintf+0x20>)
 8011a32:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a36:	6800      	ldr	r0, [r0, #0]
 8011a38:	9301      	str	r3, [sp, #4]
 8011a3a:	f000 f83f 	bl	8011abc <_vfiprintf_r>
 8011a3e:	b002      	add	sp, #8
 8011a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8011a44:	b003      	add	sp, #12
 8011a46:	4770      	bx	lr
 8011a48:	20000118 	.word	0x20000118

08011a4c <abort>:
 8011a4c:	b508      	push	{r3, lr}
 8011a4e:	2006      	movs	r0, #6
 8011a50:	f000 fa08 	bl	8011e64 <raise>
 8011a54:	2001      	movs	r0, #1
 8011a56:	f7f1 f8f1 	bl	8002c3c <_exit>

08011a5a <_malloc_usable_size_r>:
 8011a5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a5e:	1f18      	subs	r0, r3, #4
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	bfbc      	itt	lt
 8011a64:	580b      	ldrlt	r3, [r1, r0]
 8011a66:	18c0      	addlt	r0, r0, r3
 8011a68:	4770      	bx	lr

08011a6a <__sfputc_r>:
 8011a6a:	6893      	ldr	r3, [r2, #8]
 8011a6c:	3b01      	subs	r3, #1
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	b410      	push	{r4}
 8011a72:	6093      	str	r3, [r2, #8]
 8011a74:	da08      	bge.n	8011a88 <__sfputc_r+0x1e>
 8011a76:	6994      	ldr	r4, [r2, #24]
 8011a78:	42a3      	cmp	r3, r4
 8011a7a:	db01      	blt.n	8011a80 <__sfputc_r+0x16>
 8011a7c:	290a      	cmp	r1, #10
 8011a7e:	d103      	bne.n	8011a88 <__sfputc_r+0x1e>
 8011a80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a84:	f000 b932 	b.w	8011cec <__swbuf_r>
 8011a88:	6813      	ldr	r3, [r2, #0]
 8011a8a:	1c58      	adds	r0, r3, #1
 8011a8c:	6010      	str	r0, [r2, #0]
 8011a8e:	7019      	strb	r1, [r3, #0]
 8011a90:	4608      	mov	r0, r1
 8011a92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a96:	4770      	bx	lr

08011a98 <__sfputs_r>:
 8011a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a9a:	4606      	mov	r6, r0
 8011a9c:	460f      	mov	r7, r1
 8011a9e:	4614      	mov	r4, r2
 8011aa0:	18d5      	adds	r5, r2, r3
 8011aa2:	42ac      	cmp	r4, r5
 8011aa4:	d101      	bne.n	8011aaa <__sfputs_r+0x12>
 8011aa6:	2000      	movs	r0, #0
 8011aa8:	e007      	b.n	8011aba <__sfputs_r+0x22>
 8011aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011aae:	463a      	mov	r2, r7
 8011ab0:	4630      	mov	r0, r6
 8011ab2:	f7ff ffda 	bl	8011a6a <__sfputc_r>
 8011ab6:	1c43      	adds	r3, r0, #1
 8011ab8:	d1f3      	bne.n	8011aa2 <__sfputs_r+0xa>
 8011aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011abc <_vfiprintf_r>:
 8011abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ac0:	460d      	mov	r5, r1
 8011ac2:	b09d      	sub	sp, #116	@ 0x74
 8011ac4:	4614      	mov	r4, r2
 8011ac6:	4698      	mov	r8, r3
 8011ac8:	4606      	mov	r6, r0
 8011aca:	b118      	cbz	r0, 8011ad4 <_vfiprintf_r+0x18>
 8011acc:	6a03      	ldr	r3, [r0, #32]
 8011ace:	b90b      	cbnz	r3, 8011ad4 <_vfiprintf_r+0x18>
 8011ad0:	f7fe f9a0 	bl	800fe14 <__sinit>
 8011ad4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011ad6:	07d9      	lsls	r1, r3, #31
 8011ad8:	d405      	bmi.n	8011ae6 <_vfiprintf_r+0x2a>
 8011ada:	89ab      	ldrh	r3, [r5, #12]
 8011adc:	059a      	lsls	r2, r3, #22
 8011ade:	d402      	bmi.n	8011ae6 <_vfiprintf_r+0x2a>
 8011ae0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011ae2:	f7fe fad4 	bl	801008e <__retarget_lock_acquire_recursive>
 8011ae6:	89ab      	ldrh	r3, [r5, #12]
 8011ae8:	071b      	lsls	r3, r3, #28
 8011aea:	d501      	bpl.n	8011af0 <_vfiprintf_r+0x34>
 8011aec:	692b      	ldr	r3, [r5, #16]
 8011aee:	b99b      	cbnz	r3, 8011b18 <_vfiprintf_r+0x5c>
 8011af0:	4629      	mov	r1, r5
 8011af2:	4630      	mov	r0, r6
 8011af4:	f000 f938 	bl	8011d68 <__swsetup_r>
 8011af8:	b170      	cbz	r0, 8011b18 <_vfiprintf_r+0x5c>
 8011afa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011afc:	07dc      	lsls	r4, r3, #31
 8011afe:	d504      	bpl.n	8011b0a <_vfiprintf_r+0x4e>
 8011b00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011b04:	b01d      	add	sp, #116	@ 0x74
 8011b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b0a:	89ab      	ldrh	r3, [r5, #12]
 8011b0c:	0598      	lsls	r0, r3, #22
 8011b0e:	d4f7      	bmi.n	8011b00 <_vfiprintf_r+0x44>
 8011b10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011b12:	f7fe fabd 	bl	8010090 <__retarget_lock_release_recursive>
 8011b16:	e7f3      	b.n	8011b00 <_vfiprintf_r+0x44>
 8011b18:	2300      	movs	r3, #0
 8011b1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b1c:	2320      	movs	r3, #32
 8011b1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011b22:	f8cd 800c 	str.w	r8, [sp, #12]
 8011b26:	2330      	movs	r3, #48	@ 0x30
 8011b28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011cd8 <_vfiprintf_r+0x21c>
 8011b2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011b30:	f04f 0901 	mov.w	r9, #1
 8011b34:	4623      	mov	r3, r4
 8011b36:	469a      	mov	sl, r3
 8011b38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b3c:	b10a      	cbz	r2, 8011b42 <_vfiprintf_r+0x86>
 8011b3e:	2a25      	cmp	r2, #37	@ 0x25
 8011b40:	d1f9      	bne.n	8011b36 <_vfiprintf_r+0x7a>
 8011b42:	ebba 0b04 	subs.w	fp, sl, r4
 8011b46:	d00b      	beq.n	8011b60 <_vfiprintf_r+0xa4>
 8011b48:	465b      	mov	r3, fp
 8011b4a:	4622      	mov	r2, r4
 8011b4c:	4629      	mov	r1, r5
 8011b4e:	4630      	mov	r0, r6
 8011b50:	f7ff ffa2 	bl	8011a98 <__sfputs_r>
 8011b54:	3001      	adds	r0, #1
 8011b56:	f000 80a7 	beq.w	8011ca8 <_vfiprintf_r+0x1ec>
 8011b5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011b5c:	445a      	add	r2, fp
 8011b5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8011b60:	f89a 3000 	ldrb.w	r3, [sl]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	f000 809f 	beq.w	8011ca8 <_vfiprintf_r+0x1ec>
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011b70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b74:	f10a 0a01 	add.w	sl, sl, #1
 8011b78:	9304      	str	r3, [sp, #16]
 8011b7a:	9307      	str	r3, [sp, #28]
 8011b7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011b80:	931a      	str	r3, [sp, #104]	@ 0x68
 8011b82:	4654      	mov	r4, sl
 8011b84:	2205      	movs	r2, #5
 8011b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b8a:	4853      	ldr	r0, [pc, #332]	@ (8011cd8 <_vfiprintf_r+0x21c>)
 8011b8c:	f7ee fb48 	bl	8000220 <memchr>
 8011b90:	9a04      	ldr	r2, [sp, #16]
 8011b92:	b9d8      	cbnz	r0, 8011bcc <_vfiprintf_r+0x110>
 8011b94:	06d1      	lsls	r1, r2, #27
 8011b96:	bf44      	itt	mi
 8011b98:	2320      	movmi	r3, #32
 8011b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011b9e:	0713      	lsls	r3, r2, #28
 8011ba0:	bf44      	itt	mi
 8011ba2:	232b      	movmi	r3, #43	@ 0x2b
 8011ba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ba8:	f89a 3000 	ldrb.w	r3, [sl]
 8011bac:	2b2a      	cmp	r3, #42	@ 0x2a
 8011bae:	d015      	beq.n	8011bdc <_vfiprintf_r+0x120>
 8011bb0:	9a07      	ldr	r2, [sp, #28]
 8011bb2:	4654      	mov	r4, sl
 8011bb4:	2000      	movs	r0, #0
 8011bb6:	f04f 0c0a 	mov.w	ip, #10
 8011bba:	4621      	mov	r1, r4
 8011bbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011bc0:	3b30      	subs	r3, #48	@ 0x30
 8011bc2:	2b09      	cmp	r3, #9
 8011bc4:	d94b      	bls.n	8011c5e <_vfiprintf_r+0x1a2>
 8011bc6:	b1b0      	cbz	r0, 8011bf6 <_vfiprintf_r+0x13a>
 8011bc8:	9207      	str	r2, [sp, #28]
 8011bca:	e014      	b.n	8011bf6 <_vfiprintf_r+0x13a>
 8011bcc:	eba0 0308 	sub.w	r3, r0, r8
 8011bd0:	fa09 f303 	lsl.w	r3, r9, r3
 8011bd4:	4313      	orrs	r3, r2
 8011bd6:	9304      	str	r3, [sp, #16]
 8011bd8:	46a2      	mov	sl, r4
 8011bda:	e7d2      	b.n	8011b82 <_vfiprintf_r+0xc6>
 8011bdc:	9b03      	ldr	r3, [sp, #12]
 8011bde:	1d19      	adds	r1, r3, #4
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	9103      	str	r1, [sp, #12]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	bfbb      	ittet	lt
 8011be8:	425b      	neglt	r3, r3
 8011bea:	f042 0202 	orrlt.w	r2, r2, #2
 8011bee:	9307      	strge	r3, [sp, #28]
 8011bf0:	9307      	strlt	r3, [sp, #28]
 8011bf2:	bfb8      	it	lt
 8011bf4:	9204      	strlt	r2, [sp, #16]
 8011bf6:	7823      	ldrb	r3, [r4, #0]
 8011bf8:	2b2e      	cmp	r3, #46	@ 0x2e
 8011bfa:	d10a      	bne.n	8011c12 <_vfiprintf_r+0x156>
 8011bfc:	7863      	ldrb	r3, [r4, #1]
 8011bfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c00:	d132      	bne.n	8011c68 <_vfiprintf_r+0x1ac>
 8011c02:	9b03      	ldr	r3, [sp, #12]
 8011c04:	1d1a      	adds	r2, r3, #4
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	9203      	str	r2, [sp, #12]
 8011c0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011c0e:	3402      	adds	r4, #2
 8011c10:	9305      	str	r3, [sp, #20]
 8011c12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011ce8 <_vfiprintf_r+0x22c>
 8011c16:	7821      	ldrb	r1, [r4, #0]
 8011c18:	2203      	movs	r2, #3
 8011c1a:	4650      	mov	r0, sl
 8011c1c:	f7ee fb00 	bl	8000220 <memchr>
 8011c20:	b138      	cbz	r0, 8011c32 <_vfiprintf_r+0x176>
 8011c22:	9b04      	ldr	r3, [sp, #16]
 8011c24:	eba0 000a 	sub.w	r0, r0, sl
 8011c28:	2240      	movs	r2, #64	@ 0x40
 8011c2a:	4082      	lsls	r2, r0
 8011c2c:	4313      	orrs	r3, r2
 8011c2e:	3401      	adds	r4, #1
 8011c30:	9304      	str	r3, [sp, #16]
 8011c32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c36:	4829      	ldr	r0, [pc, #164]	@ (8011cdc <_vfiprintf_r+0x220>)
 8011c38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011c3c:	2206      	movs	r2, #6
 8011c3e:	f7ee faef 	bl	8000220 <memchr>
 8011c42:	2800      	cmp	r0, #0
 8011c44:	d03f      	beq.n	8011cc6 <_vfiprintf_r+0x20a>
 8011c46:	4b26      	ldr	r3, [pc, #152]	@ (8011ce0 <_vfiprintf_r+0x224>)
 8011c48:	bb1b      	cbnz	r3, 8011c92 <_vfiprintf_r+0x1d6>
 8011c4a:	9b03      	ldr	r3, [sp, #12]
 8011c4c:	3307      	adds	r3, #7
 8011c4e:	f023 0307 	bic.w	r3, r3, #7
 8011c52:	3308      	adds	r3, #8
 8011c54:	9303      	str	r3, [sp, #12]
 8011c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c58:	443b      	add	r3, r7
 8011c5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c5c:	e76a      	b.n	8011b34 <_vfiprintf_r+0x78>
 8011c5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c62:	460c      	mov	r4, r1
 8011c64:	2001      	movs	r0, #1
 8011c66:	e7a8      	b.n	8011bba <_vfiprintf_r+0xfe>
 8011c68:	2300      	movs	r3, #0
 8011c6a:	3401      	adds	r4, #1
 8011c6c:	9305      	str	r3, [sp, #20]
 8011c6e:	4619      	mov	r1, r3
 8011c70:	f04f 0c0a 	mov.w	ip, #10
 8011c74:	4620      	mov	r0, r4
 8011c76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c7a:	3a30      	subs	r2, #48	@ 0x30
 8011c7c:	2a09      	cmp	r2, #9
 8011c7e:	d903      	bls.n	8011c88 <_vfiprintf_r+0x1cc>
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d0c6      	beq.n	8011c12 <_vfiprintf_r+0x156>
 8011c84:	9105      	str	r1, [sp, #20]
 8011c86:	e7c4      	b.n	8011c12 <_vfiprintf_r+0x156>
 8011c88:	fb0c 2101 	mla	r1, ip, r1, r2
 8011c8c:	4604      	mov	r4, r0
 8011c8e:	2301      	movs	r3, #1
 8011c90:	e7f0      	b.n	8011c74 <_vfiprintf_r+0x1b8>
 8011c92:	ab03      	add	r3, sp, #12
 8011c94:	9300      	str	r3, [sp, #0]
 8011c96:	462a      	mov	r2, r5
 8011c98:	4b12      	ldr	r3, [pc, #72]	@ (8011ce4 <_vfiprintf_r+0x228>)
 8011c9a:	a904      	add	r1, sp, #16
 8011c9c:	4630      	mov	r0, r6
 8011c9e:	f7fd fc77 	bl	800f590 <_printf_float>
 8011ca2:	4607      	mov	r7, r0
 8011ca4:	1c78      	adds	r0, r7, #1
 8011ca6:	d1d6      	bne.n	8011c56 <_vfiprintf_r+0x19a>
 8011ca8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011caa:	07d9      	lsls	r1, r3, #31
 8011cac:	d405      	bmi.n	8011cba <_vfiprintf_r+0x1fe>
 8011cae:	89ab      	ldrh	r3, [r5, #12]
 8011cb0:	059a      	lsls	r2, r3, #22
 8011cb2:	d402      	bmi.n	8011cba <_vfiprintf_r+0x1fe>
 8011cb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011cb6:	f7fe f9eb 	bl	8010090 <__retarget_lock_release_recursive>
 8011cba:	89ab      	ldrh	r3, [r5, #12]
 8011cbc:	065b      	lsls	r3, r3, #25
 8011cbe:	f53f af1f 	bmi.w	8011b00 <_vfiprintf_r+0x44>
 8011cc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011cc4:	e71e      	b.n	8011b04 <_vfiprintf_r+0x48>
 8011cc6:	ab03      	add	r3, sp, #12
 8011cc8:	9300      	str	r3, [sp, #0]
 8011cca:	462a      	mov	r2, r5
 8011ccc:	4b05      	ldr	r3, [pc, #20]	@ (8011ce4 <_vfiprintf_r+0x228>)
 8011cce:	a904      	add	r1, sp, #16
 8011cd0:	4630      	mov	r0, r6
 8011cd2:	f7fd fef5 	bl	800fac0 <_printf_i>
 8011cd6:	e7e4      	b.n	8011ca2 <_vfiprintf_r+0x1e6>
 8011cd8:	08012172 	.word	0x08012172
 8011cdc:	0801217c 	.word	0x0801217c
 8011ce0:	0800f591 	.word	0x0800f591
 8011ce4:	08011a99 	.word	0x08011a99
 8011ce8:	08012178 	.word	0x08012178

08011cec <__swbuf_r>:
 8011cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cee:	460e      	mov	r6, r1
 8011cf0:	4614      	mov	r4, r2
 8011cf2:	4605      	mov	r5, r0
 8011cf4:	b118      	cbz	r0, 8011cfe <__swbuf_r+0x12>
 8011cf6:	6a03      	ldr	r3, [r0, #32]
 8011cf8:	b90b      	cbnz	r3, 8011cfe <__swbuf_r+0x12>
 8011cfa:	f7fe f88b 	bl	800fe14 <__sinit>
 8011cfe:	69a3      	ldr	r3, [r4, #24]
 8011d00:	60a3      	str	r3, [r4, #8]
 8011d02:	89a3      	ldrh	r3, [r4, #12]
 8011d04:	071a      	lsls	r2, r3, #28
 8011d06:	d501      	bpl.n	8011d0c <__swbuf_r+0x20>
 8011d08:	6923      	ldr	r3, [r4, #16]
 8011d0a:	b943      	cbnz	r3, 8011d1e <__swbuf_r+0x32>
 8011d0c:	4621      	mov	r1, r4
 8011d0e:	4628      	mov	r0, r5
 8011d10:	f000 f82a 	bl	8011d68 <__swsetup_r>
 8011d14:	b118      	cbz	r0, 8011d1e <__swbuf_r+0x32>
 8011d16:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8011d1a:	4638      	mov	r0, r7
 8011d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d1e:	6823      	ldr	r3, [r4, #0]
 8011d20:	6922      	ldr	r2, [r4, #16]
 8011d22:	1a98      	subs	r0, r3, r2
 8011d24:	6963      	ldr	r3, [r4, #20]
 8011d26:	b2f6      	uxtb	r6, r6
 8011d28:	4283      	cmp	r3, r0
 8011d2a:	4637      	mov	r7, r6
 8011d2c:	dc05      	bgt.n	8011d3a <__swbuf_r+0x4e>
 8011d2e:	4621      	mov	r1, r4
 8011d30:	4628      	mov	r0, r5
 8011d32:	f7ff fda9 	bl	8011888 <_fflush_r>
 8011d36:	2800      	cmp	r0, #0
 8011d38:	d1ed      	bne.n	8011d16 <__swbuf_r+0x2a>
 8011d3a:	68a3      	ldr	r3, [r4, #8]
 8011d3c:	3b01      	subs	r3, #1
 8011d3e:	60a3      	str	r3, [r4, #8]
 8011d40:	6823      	ldr	r3, [r4, #0]
 8011d42:	1c5a      	adds	r2, r3, #1
 8011d44:	6022      	str	r2, [r4, #0]
 8011d46:	701e      	strb	r6, [r3, #0]
 8011d48:	6962      	ldr	r2, [r4, #20]
 8011d4a:	1c43      	adds	r3, r0, #1
 8011d4c:	429a      	cmp	r2, r3
 8011d4e:	d004      	beq.n	8011d5a <__swbuf_r+0x6e>
 8011d50:	89a3      	ldrh	r3, [r4, #12]
 8011d52:	07db      	lsls	r3, r3, #31
 8011d54:	d5e1      	bpl.n	8011d1a <__swbuf_r+0x2e>
 8011d56:	2e0a      	cmp	r6, #10
 8011d58:	d1df      	bne.n	8011d1a <__swbuf_r+0x2e>
 8011d5a:	4621      	mov	r1, r4
 8011d5c:	4628      	mov	r0, r5
 8011d5e:	f7ff fd93 	bl	8011888 <_fflush_r>
 8011d62:	2800      	cmp	r0, #0
 8011d64:	d0d9      	beq.n	8011d1a <__swbuf_r+0x2e>
 8011d66:	e7d6      	b.n	8011d16 <__swbuf_r+0x2a>

08011d68 <__swsetup_r>:
 8011d68:	b538      	push	{r3, r4, r5, lr}
 8011d6a:	4b29      	ldr	r3, [pc, #164]	@ (8011e10 <__swsetup_r+0xa8>)
 8011d6c:	4605      	mov	r5, r0
 8011d6e:	6818      	ldr	r0, [r3, #0]
 8011d70:	460c      	mov	r4, r1
 8011d72:	b118      	cbz	r0, 8011d7c <__swsetup_r+0x14>
 8011d74:	6a03      	ldr	r3, [r0, #32]
 8011d76:	b90b      	cbnz	r3, 8011d7c <__swsetup_r+0x14>
 8011d78:	f7fe f84c 	bl	800fe14 <__sinit>
 8011d7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d80:	0719      	lsls	r1, r3, #28
 8011d82:	d422      	bmi.n	8011dca <__swsetup_r+0x62>
 8011d84:	06da      	lsls	r2, r3, #27
 8011d86:	d407      	bmi.n	8011d98 <__swsetup_r+0x30>
 8011d88:	2209      	movs	r2, #9
 8011d8a:	602a      	str	r2, [r5, #0]
 8011d8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d90:	81a3      	strh	r3, [r4, #12]
 8011d92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011d96:	e033      	b.n	8011e00 <__swsetup_r+0x98>
 8011d98:	0758      	lsls	r0, r3, #29
 8011d9a:	d512      	bpl.n	8011dc2 <__swsetup_r+0x5a>
 8011d9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011d9e:	b141      	cbz	r1, 8011db2 <__swsetup_r+0x4a>
 8011da0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011da4:	4299      	cmp	r1, r3
 8011da6:	d002      	beq.n	8011dae <__swsetup_r+0x46>
 8011da8:	4628      	mov	r0, r5
 8011daa:	f7fe ffcd 	bl	8010d48 <_free_r>
 8011dae:	2300      	movs	r3, #0
 8011db0:	6363      	str	r3, [r4, #52]	@ 0x34
 8011db2:	89a3      	ldrh	r3, [r4, #12]
 8011db4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011db8:	81a3      	strh	r3, [r4, #12]
 8011dba:	2300      	movs	r3, #0
 8011dbc:	6063      	str	r3, [r4, #4]
 8011dbe:	6923      	ldr	r3, [r4, #16]
 8011dc0:	6023      	str	r3, [r4, #0]
 8011dc2:	89a3      	ldrh	r3, [r4, #12]
 8011dc4:	f043 0308 	orr.w	r3, r3, #8
 8011dc8:	81a3      	strh	r3, [r4, #12]
 8011dca:	6923      	ldr	r3, [r4, #16]
 8011dcc:	b94b      	cbnz	r3, 8011de2 <__swsetup_r+0x7a>
 8011dce:	89a3      	ldrh	r3, [r4, #12]
 8011dd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011dd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011dd8:	d003      	beq.n	8011de2 <__swsetup_r+0x7a>
 8011dda:	4621      	mov	r1, r4
 8011ddc:	4628      	mov	r0, r5
 8011dde:	f000 f883 	bl	8011ee8 <__smakebuf_r>
 8011de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011de6:	f013 0201 	ands.w	r2, r3, #1
 8011dea:	d00a      	beq.n	8011e02 <__swsetup_r+0x9a>
 8011dec:	2200      	movs	r2, #0
 8011dee:	60a2      	str	r2, [r4, #8]
 8011df0:	6962      	ldr	r2, [r4, #20]
 8011df2:	4252      	negs	r2, r2
 8011df4:	61a2      	str	r2, [r4, #24]
 8011df6:	6922      	ldr	r2, [r4, #16]
 8011df8:	b942      	cbnz	r2, 8011e0c <__swsetup_r+0xa4>
 8011dfa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011dfe:	d1c5      	bne.n	8011d8c <__swsetup_r+0x24>
 8011e00:	bd38      	pop	{r3, r4, r5, pc}
 8011e02:	0799      	lsls	r1, r3, #30
 8011e04:	bf58      	it	pl
 8011e06:	6962      	ldrpl	r2, [r4, #20]
 8011e08:	60a2      	str	r2, [r4, #8]
 8011e0a:	e7f4      	b.n	8011df6 <__swsetup_r+0x8e>
 8011e0c:	2000      	movs	r0, #0
 8011e0e:	e7f7      	b.n	8011e00 <__swsetup_r+0x98>
 8011e10:	20000118 	.word	0x20000118

08011e14 <_raise_r>:
 8011e14:	291f      	cmp	r1, #31
 8011e16:	b538      	push	{r3, r4, r5, lr}
 8011e18:	4605      	mov	r5, r0
 8011e1a:	460c      	mov	r4, r1
 8011e1c:	d904      	bls.n	8011e28 <_raise_r+0x14>
 8011e1e:	2316      	movs	r3, #22
 8011e20:	6003      	str	r3, [r0, #0]
 8011e22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011e26:	bd38      	pop	{r3, r4, r5, pc}
 8011e28:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011e2a:	b112      	cbz	r2, 8011e32 <_raise_r+0x1e>
 8011e2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011e30:	b94b      	cbnz	r3, 8011e46 <_raise_r+0x32>
 8011e32:	4628      	mov	r0, r5
 8011e34:	f000 f830 	bl	8011e98 <_getpid_r>
 8011e38:	4622      	mov	r2, r4
 8011e3a:	4601      	mov	r1, r0
 8011e3c:	4628      	mov	r0, r5
 8011e3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e42:	f000 b817 	b.w	8011e74 <_kill_r>
 8011e46:	2b01      	cmp	r3, #1
 8011e48:	d00a      	beq.n	8011e60 <_raise_r+0x4c>
 8011e4a:	1c59      	adds	r1, r3, #1
 8011e4c:	d103      	bne.n	8011e56 <_raise_r+0x42>
 8011e4e:	2316      	movs	r3, #22
 8011e50:	6003      	str	r3, [r0, #0]
 8011e52:	2001      	movs	r0, #1
 8011e54:	e7e7      	b.n	8011e26 <_raise_r+0x12>
 8011e56:	2100      	movs	r1, #0
 8011e58:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011e5c:	4620      	mov	r0, r4
 8011e5e:	4798      	blx	r3
 8011e60:	2000      	movs	r0, #0
 8011e62:	e7e0      	b.n	8011e26 <_raise_r+0x12>

08011e64 <raise>:
 8011e64:	4b02      	ldr	r3, [pc, #8]	@ (8011e70 <raise+0xc>)
 8011e66:	4601      	mov	r1, r0
 8011e68:	6818      	ldr	r0, [r3, #0]
 8011e6a:	f7ff bfd3 	b.w	8011e14 <_raise_r>
 8011e6e:	bf00      	nop
 8011e70:	20000118 	.word	0x20000118

08011e74 <_kill_r>:
 8011e74:	b538      	push	{r3, r4, r5, lr}
 8011e76:	4d07      	ldr	r5, [pc, #28]	@ (8011e94 <_kill_r+0x20>)
 8011e78:	2300      	movs	r3, #0
 8011e7a:	4604      	mov	r4, r0
 8011e7c:	4608      	mov	r0, r1
 8011e7e:	4611      	mov	r1, r2
 8011e80:	602b      	str	r3, [r5, #0]
 8011e82:	f7f0 fecb 	bl	8002c1c <_kill>
 8011e86:	1c43      	adds	r3, r0, #1
 8011e88:	d102      	bne.n	8011e90 <_kill_r+0x1c>
 8011e8a:	682b      	ldr	r3, [r5, #0]
 8011e8c:	b103      	cbz	r3, 8011e90 <_kill_r+0x1c>
 8011e8e:	6023      	str	r3, [r4, #0]
 8011e90:	bd38      	pop	{r3, r4, r5, pc}
 8011e92:	bf00      	nop
 8011e94:	200026a4 	.word	0x200026a4

08011e98 <_getpid_r>:
 8011e98:	f7f0 beb8 	b.w	8002c0c <_getpid>

08011e9c <__swhatbuf_r>:
 8011e9c:	b570      	push	{r4, r5, r6, lr}
 8011e9e:	460c      	mov	r4, r1
 8011ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ea4:	2900      	cmp	r1, #0
 8011ea6:	b096      	sub	sp, #88	@ 0x58
 8011ea8:	4615      	mov	r5, r2
 8011eaa:	461e      	mov	r6, r3
 8011eac:	da0d      	bge.n	8011eca <__swhatbuf_r+0x2e>
 8011eae:	89a3      	ldrh	r3, [r4, #12]
 8011eb0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011eb4:	f04f 0100 	mov.w	r1, #0
 8011eb8:	bf14      	ite	ne
 8011eba:	2340      	movne	r3, #64	@ 0x40
 8011ebc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011ec0:	2000      	movs	r0, #0
 8011ec2:	6031      	str	r1, [r6, #0]
 8011ec4:	602b      	str	r3, [r5, #0]
 8011ec6:	b016      	add	sp, #88	@ 0x58
 8011ec8:	bd70      	pop	{r4, r5, r6, pc}
 8011eca:	466a      	mov	r2, sp
 8011ecc:	f000 f848 	bl	8011f60 <_fstat_r>
 8011ed0:	2800      	cmp	r0, #0
 8011ed2:	dbec      	blt.n	8011eae <__swhatbuf_r+0x12>
 8011ed4:	9901      	ldr	r1, [sp, #4]
 8011ed6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011eda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011ede:	4259      	negs	r1, r3
 8011ee0:	4159      	adcs	r1, r3
 8011ee2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011ee6:	e7eb      	b.n	8011ec0 <__swhatbuf_r+0x24>

08011ee8 <__smakebuf_r>:
 8011ee8:	898b      	ldrh	r3, [r1, #12]
 8011eea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011eec:	079d      	lsls	r5, r3, #30
 8011eee:	4606      	mov	r6, r0
 8011ef0:	460c      	mov	r4, r1
 8011ef2:	d507      	bpl.n	8011f04 <__smakebuf_r+0x1c>
 8011ef4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011ef8:	6023      	str	r3, [r4, #0]
 8011efa:	6123      	str	r3, [r4, #16]
 8011efc:	2301      	movs	r3, #1
 8011efe:	6163      	str	r3, [r4, #20]
 8011f00:	b003      	add	sp, #12
 8011f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f04:	ab01      	add	r3, sp, #4
 8011f06:	466a      	mov	r2, sp
 8011f08:	f7ff ffc8 	bl	8011e9c <__swhatbuf_r>
 8011f0c:	9f00      	ldr	r7, [sp, #0]
 8011f0e:	4605      	mov	r5, r0
 8011f10:	4639      	mov	r1, r7
 8011f12:	4630      	mov	r0, r6
 8011f14:	f7fd fa10 	bl	800f338 <_malloc_r>
 8011f18:	b948      	cbnz	r0, 8011f2e <__smakebuf_r+0x46>
 8011f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f1e:	059a      	lsls	r2, r3, #22
 8011f20:	d4ee      	bmi.n	8011f00 <__smakebuf_r+0x18>
 8011f22:	f023 0303 	bic.w	r3, r3, #3
 8011f26:	f043 0302 	orr.w	r3, r3, #2
 8011f2a:	81a3      	strh	r3, [r4, #12]
 8011f2c:	e7e2      	b.n	8011ef4 <__smakebuf_r+0xc>
 8011f2e:	89a3      	ldrh	r3, [r4, #12]
 8011f30:	6020      	str	r0, [r4, #0]
 8011f32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f36:	81a3      	strh	r3, [r4, #12]
 8011f38:	9b01      	ldr	r3, [sp, #4]
 8011f3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011f3e:	b15b      	cbz	r3, 8011f58 <__smakebuf_r+0x70>
 8011f40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f44:	4630      	mov	r0, r6
 8011f46:	f000 f81d 	bl	8011f84 <_isatty_r>
 8011f4a:	b128      	cbz	r0, 8011f58 <__smakebuf_r+0x70>
 8011f4c:	89a3      	ldrh	r3, [r4, #12]
 8011f4e:	f023 0303 	bic.w	r3, r3, #3
 8011f52:	f043 0301 	orr.w	r3, r3, #1
 8011f56:	81a3      	strh	r3, [r4, #12]
 8011f58:	89a3      	ldrh	r3, [r4, #12]
 8011f5a:	431d      	orrs	r5, r3
 8011f5c:	81a5      	strh	r5, [r4, #12]
 8011f5e:	e7cf      	b.n	8011f00 <__smakebuf_r+0x18>

08011f60 <_fstat_r>:
 8011f60:	b538      	push	{r3, r4, r5, lr}
 8011f62:	4d07      	ldr	r5, [pc, #28]	@ (8011f80 <_fstat_r+0x20>)
 8011f64:	2300      	movs	r3, #0
 8011f66:	4604      	mov	r4, r0
 8011f68:	4608      	mov	r0, r1
 8011f6a:	4611      	mov	r1, r2
 8011f6c:	602b      	str	r3, [r5, #0]
 8011f6e:	f7f0 feb5 	bl	8002cdc <_fstat>
 8011f72:	1c43      	adds	r3, r0, #1
 8011f74:	d102      	bne.n	8011f7c <_fstat_r+0x1c>
 8011f76:	682b      	ldr	r3, [r5, #0]
 8011f78:	b103      	cbz	r3, 8011f7c <_fstat_r+0x1c>
 8011f7a:	6023      	str	r3, [r4, #0]
 8011f7c:	bd38      	pop	{r3, r4, r5, pc}
 8011f7e:	bf00      	nop
 8011f80:	200026a4 	.word	0x200026a4

08011f84 <_isatty_r>:
 8011f84:	b538      	push	{r3, r4, r5, lr}
 8011f86:	4d06      	ldr	r5, [pc, #24]	@ (8011fa0 <_isatty_r+0x1c>)
 8011f88:	2300      	movs	r3, #0
 8011f8a:	4604      	mov	r4, r0
 8011f8c:	4608      	mov	r0, r1
 8011f8e:	602b      	str	r3, [r5, #0]
 8011f90:	f7f0 feb4 	bl	8002cfc <_isatty>
 8011f94:	1c43      	adds	r3, r0, #1
 8011f96:	d102      	bne.n	8011f9e <_isatty_r+0x1a>
 8011f98:	682b      	ldr	r3, [r5, #0]
 8011f9a:	b103      	cbz	r3, 8011f9e <_isatty_r+0x1a>
 8011f9c:	6023      	str	r3, [r4, #0]
 8011f9e:	bd38      	pop	{r3, r4, r5, pc}
 8011fa0:	200026a4 	.word	0x200026a4

08011fa4 <_init>:
 8011fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fa6:	bf00      	nop
 8011fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011faa:	bc08      	pop	{r3}
 8011fac:	469e      	mov	lr, r3
 8011fae:	4770      	bx	lr

08011fb0 <_fini>:
 8011fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fb2:	bf00      	nop
 8011fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011fb6:	bc08      	pop	{r3}
 8011fb8:	469e      	mov	lr, r3
 8011fba:	4770      	bx	lr
