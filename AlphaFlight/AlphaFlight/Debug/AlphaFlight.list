
AlphaFlight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000115d4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  080117b8  080117b8  000127b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011bd4  08011bd4  000132d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011bd4  08011bd4  00012bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011bdc  08011bdc  000132d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011bdc  08011bdc  00012bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011be0  08011be0  00012be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d4  20000000  08011be4  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023bc  200002d4  08011eb8  000132d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002690  08011eb8  00013690  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000132d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000257db  00000000  00000000  00013304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053ec  00000000  00000000  00038adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002078  00000000  00000000  0003ded0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000190e  00000000  00000000  0003ff48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a670  00000000  00000000  00041856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029ba4  00000000  00000000  0006bec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0434  00000000  00000000  00095a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00185e9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a00  00000000  00000000  00185ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0018f8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002d4 	.word	0x200002d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801179c 	.word	0x0801179c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002d8 	.word	0x200002d8
 800021c:	0801179c 	.word	0x0801179c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <CRSF_Init>:

CRSF_Data_t crsf_data = {0};  // Struct instance to hold CRSF channel data
static UART_HandleTypeDef *crsf_huart;  // Pointer to UART handler
static uint8_t crsf_rx_buffer[CRSF_BUFFER_SIZE];  // DMA buffer

void CRSF_Init(UART_HandleTypeDef *huart) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
    crsf_huart = huart;
 8000f2c:	4a06      	ldr	r2, [pc, #24]	@ (8000f48 <CRSF_Init+0x24>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_DMA(crsf_huart, crsf_rx_buffer, CRSF_BUFFER_SIZE);  // Start UART DMA
 8000f32:	4b05      	ldr	r3, [pc, #20]	@ (8000f48 <CRSF_Init+0x24>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2240      	movs	r2, #64	@ 0x40
 8000f38:	4904      	ldr	r1, [pc, #16]	@ (8000f4c <CRSF_Init+0x28>)
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f007 ff07 	bl	8008d4e <HAL_UART_Receive_DMA>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000310 	.word	0x20000310
 8000f4c:	20000314 	.word	0x20000314

08000f50 <CRSF_GetRxCount>:

// Get received byte count in DMA buffer
static uint16_t CRSF_GetRxCount() {
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
    return CRSF_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(crsf_huart->hdmarx);
 8000f54:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <CRSF_GetRxCount+0x20>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000f64:	b29b      	uxth	r3, r3
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	20000310 	.word	0x20000310

08000f74 <CRSF_DecodeChannels>:

// Decode CRSF channel data
static void CRSF_DecodeChannels(uint8_t *data) {
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
    crsf_data.channels[0]  = (data[0] | data[1] << 8) & 0x07FF;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	b21a      	sxth	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3301      	adds	r3, #1
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	b21b      	sxth	r3, r3
 8000f8a:	021b      	lsls	r3, r3, #8
 8000f8c:	b21b      	sxth	r3, r3
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	4b7d      	ldr	r3, [pc, #500]	@ (8001190 <CRSF_DecodeChannels+0x21c>)
 8000f9c:	801a      	strh	r2, [r3, #0]
    crsf_data.channels[1]  = (data[1] >> 3 | data[2] << 5) & 0x07FF;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	08db      	lsrs	r3, r3, #3
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	b21a      	sxth	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3302      	adds	r3, #2
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	b21b      	sxth	r3, r3
 8000fb2:	015b      	lsls	r3, r3, #5
 8000fb4:	b21b      	sxth	r3, r3
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	4b73      	ldr	r3, [pc, #460]	@ (8001190 <CRSF_DecodeChannels+0x21c>)
 8000fc4:	805a      	strh	r2, [r3, #2]
    crsf_data.channels[2]  = (data[2] >> 6 | data[3] << 2 | data[4] << 10) & 0x07FF;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3302      	adds	r3, #2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	099b      	lsrs	r3, r3, #6
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	b21a      	sxth	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3303      	adds	r3, #3
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	b21b      	sxth	r3, r3
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	029b      	lsls	r3, r3, #10
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	4b65      	ldr	r3, [pc, #404]	@ (8001190 <CRSF_DecodeChannels+0x21c>)
 8000ffc:	809a      	strh	r2, [r3, #4]
    crsf_data.channels[3]  = (data[4] >> 1 | data[5] << 7) & 0x07FF;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3304      	adds	r3, #4
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	085b      	lsrs	r3, r3, #1
 8001006:	b2db      	uxtb	r3, r3
 8001008:	b21a      	sxth	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3305      	adds	r3, #5
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b21b      	sxth	r3, r3
 8001012:	01db      	lsls	r3, r3, #7
 8001014:	b21b      	sxth	r3, r3
 8001016:	4313      	orrs	r3, r2
 8001018:	b21b      	sxth	r3, r3
 800101a:	b29b      	uxth	r3, r3
 800101c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001020:	b29a      	uxth	r2, r3
 8001022:	4b5b      	ldr	r3, [pc, #364]	@ (8001190 <CRSF_DecodeChannels+0x21c>)
 8001024:	80da      	strh	r2, [r3, #6]
    crsf_data.channels[4]  = (data[5] >> 4 | data[6] << 4) & 0x07FF;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3305      	adds	r3, #5
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	091b      	lsrs	r3, r3, #4
 800102e:	b2db      	uxtb	r3, r3
 8001030:	b21a      	sxth	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3306      	adds	r3, #6
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	b21b      	sxth	r3, r3
 800103a:	011b      	lsls	r3, r3, #4
 800103c:	b21b      	sxth	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b21b      	sxth	r3, r3
 8001042:	b29b      	uxth	r3, r3
 8001044:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001048:	b29a      	uxth	r2, r3
 800104a:	4b51      	ldr	r3, [pc, #324]	@ (8001190 <CRSF_DecodeChannels+0x21c>)
 800104c:	811a      	strh	r2, [r3, #8]
    crsf_data.channels[5]  = (data[6] >> 7 | data[7] << 1 | data[8] << 9) & 0x07FF;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3306      	adds	r3, #6
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	09db      	lsrs	r3, r3, #7
 8001056:	b2db      	uxtb	r3, r3
 8001058:	b21a      	sxth	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3307      	adds	r3, #7
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b21b      	sxth	r3, r3
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	b21b      	sxth	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	b21a      	sxth	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3308      	adds	r3, #8
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b21b      	sxth	r3, r3
 8001072:	025b      	lsls	r3, r3, #9
 8001074:	b21b      	sxth	r3, r3
 8001076:	4313      	orrs	r3, r2
 8001078:	b21b      	sxth	r3, r3
 800107a:	b29b      	uxth	r3, r3
 800107c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001080:	b29a      	uxth	r2, r3
 8001082:	4b43      	ldr	r3, [pc, #268]	@ (8001190 <CRSF_DecodeChannels+0x21c>)
 8001084:	815a      	strh	r2, [r3, #10]
    crsf_data.channels[6]  = (data[8] >> 2 | data[9] << 6) & 0x07FF;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3308      	adds	r3, #8
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	b2db      	uxtb	r3, r3
 8001090:	b21a      	sxth	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3309      	adds	r3, #9
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	b21b      	sxth	r3, r3
 800109a:	019b      	lsls	r3, r3, #6
 800109c:	b21b      	sxth	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	b21b      	sxth	r3, r3
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	4b39      	ldr	r3, [pc, #228]	@ (8001190 <CRSF_DecodeChannels+0x21c>)
 80010ac:	819a      	strh	r2, [r3, #12]
    crsf_data.channels[7]  = (data[9] >> 5 | data[10] << 3) & 0x07FF;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3309      	adds	r3, #9
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	095b      	lsrs	r3, r3, #5
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	330a      	adds	r3, #10
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	b21b      	sxth	r3, r3
 80010c6:	4313      	orrs	r3, r2
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001190 <CRSF_DecodeChannels+0x21c>)
 80010d4:	81da      	strh	r2, [r3, #14]
    crsf_data.channels[8]  = (data[11] | data[12] << 8) & 0x07FF;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	330b      	adds	r3, #11
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b21a      	sxth	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	330c      	adds	r3, #12
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	4b26      	ldr	r3, [pc, #152]	@ (8001190 <CRSF_DecodeChannels+0x21c>)
 80010f8:	821a      	strh	r2, [r3, #16]
    crsf_data.channels[9]  = (data[12] >> 3 | data[13] << 5) & 0x07FF;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	330c      	adds	r3, #12
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	08db      	lsrs	r3, r3, #3
 8001102:	b2db      	uxtb	r3, r3
 8001104:	b21a      	sxth	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	330d      	adds	r3, #13
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b21b      	sxth	r3, r3
 800110e:	015b      	lsls	r3, r3, #5
 8001110:	b21b      	sxth	r3, r3
 8001112:	4313      	orrs	r3, r2
 8001114:	b21b      	sxth	r3, r3
 8001116:	b29b      	uxth	r3, r3
 8001118:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800111c:	b29a      	uxth	r2, r3
 800111e:	4b1c      	ldr	r3, [pc, #112]	@ (8001190 <CRSF_DecodeChannels+0x21c>)
 8001120:	825a      	strh	r2, [r3, #18]
    crsf_data.channels[10] = (data[13] >> 6 | data[14] << 2 | data[15] << 10) & 0x07FF;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	330d      	adds	r3, #13
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	099b      	lsrs	r3, r3, #6
 800112a:	b2db      	uxtb	r3, r3
 800112c:	b21a      	sxth	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	330e      	adds	r3, #14
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b21b      	sxth	r3, r3
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	b21b      	sxth	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b21a      	sxth	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	330f      	adds	r3, #15
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	b21b      	sxth	r3, r3
 8001146:	029b      	lsls	r3, r3, #10
 8001148:	b21b      	sxth	r3, r3
 800114a:	4313      	orrs	r3, r2
 800114c:	b21b      	sxth	r3, r3
 800114e:	b29b      	uxth	r3, r3
 8001150:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001154:	b29a      	uxth	r2, r3
 8001156:	4b0e      	ldr	r3, [pc, #56]	@ (8001190 <CRSF_DecodeChannels+0x21c>)
 8001158:	829a      	strh	r2, [r3, #20]
    crsf_data.channels[11] = (data[15] >> 1 | data[16] << 7) & 0x07FF;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	330f      	adds	r3, #15
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	085b      	lsrs	r3, r3, #1
 8001162:	b2db      	uxtb	r3, r3
 8001164:	b21a      	sxth	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3310      	adds	r3, #16
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	b21b      	sxth	r3, r3
 800116e:	01db      	lsls	r3, r3, #7
 8001170:	b21b      	sxth	r3, r3
 8001172:	4313      	orrs	r3, r2
 8001174:	b21b      	sxth	r3, r3
 8001176:	b29b      	uxth	r3, r3
 8001178:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800117c:	b29a      	uxth	r2, r3
 800117e:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <CRSF_DecodeChannels+0x21c>)
 8001180:	82da      	strh	r2, [r3, #22]
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	200002f0 	.word	0x200002f0

08001194 <CRSF_Process>:

// Process CRSF data in main loop
void CRSF_Process() {
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
    uint16_t bytes_received = CRSF_GetRxCount();
 800119a:	f7ff fed9 	bl	8000f50 <CRSF_GetRxCount>
 800119e:	4603      	mov	r3, r0
 80011a0:	80bb      	strh	r3, [r7, #4]
    if (bytes_received < 3) return;  // Not enough data for a CRSF packet
 80011a2:	88bb      	ldrh	r3, [r7, #4]
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d92b      	bls.n	8001200 <CRSF_Process+0x6c>

    for (uint16_t i = 0; i < bytes_received - 2; i++) {
 80011a8:	2300      	movs	r3, #0
 80011aa:	80fb      	strh	r3, [r7, #6]
 80011ac:	e022      	b.n	80011f4 <CRSF_Process+0x60>
        if (crsf_rx_buffer[i] == 0xEA) {  // Start of an RC packet
 80011ae:	88fb      	ldrh	r3, [r7, #6]
 80011b0:	4a15      	ldr	r2, [pc, #84]	@ (8001208 <CRSF_Process+0x74>)
 80011b2:	5cd3      	ldrb	r3, [r2, r3]
 80011b4:	2bea      	cmp	r3, #234	@ 0xea
 80011b6:	d11a      	bne.n	80011ee <CRSF_Process+0x5a>
            uint8_t length = crsf_rx_buffer[i + 1];
 80011b8:	88fb      	ldrh	r3, [r7, #6]
 80011ba:	3301      	adds	r3, #1
 80011bc:	4a12      	ldr	r2, [pc, #72]	@ (8001208 <CRSF_Process+0x74>)
 80011be:	5cd3      	ldrb	r3, [r2, r3]
 80011c0:	70fb      	strb	r3, [r7, #3]
            if (length <= (bytes_received - i - 2)) {  // Check if full packet is available
 80011c2:	88ba      	ldrh	r2, [r7, #4]
 80011c4:	88fb      	ldrh	r3, [r7, #6]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	1e5a      	subs	r2, r3, #1
 80011ca:	78fb      	ldrb	r3, [r7, #3]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	dd0e      	ble.n	80011ee <CRSF_Process+0x5a>
                uint8_t type = crsf_rx_buffer[i + 2];
 80011d0:	88fb      	ldrh	r3, [r7, #6]
 80011d2:	3302      	adds	r3, #2
 80011d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001208 <CRSF_Process+0x74>)
 80011d6:	5cd3      	ldrb	r3, [r2, r3]
 80011d8:	70bb      	strb	r3, [r7, #2]
                if (type == 0x16) {  // RC Channel Data
 80011da:	78bb      	ldrb	r3, [r7, #2]
 80011dc:	2b16      	cmp	r3, #22
 80011de:	d106      	bne.n	80011ee <CRSF_Process+0x5a>
                    CRSF_DecodeChannels(&crsf_rx_buffer[i + 3]);  // Extract channel values
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	3303      	adds	r3, #3
 80011e4:	4a08      	ldr	r2, [pc, #32]	@ (8001208 <CRSF_Process+0x74>)
 80011e6:	4413      	add	r3, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fec3 	bl	8000f74 <CRSF_DecodeChannels>
    for (uint16_t i = 0; i < bytes_received - 2; i++) {
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	3301      	adds	r3, #1
 80011f2:	80fb      	strh	r3, [r7, #6]
 80011f4:	88fa      	ldrh	r2, [r7, #6]
 80011f6:	88bb      	ldrh	r3, [r7, #4]
 80011f8:	3b02      	subs	r3, #2
 80011fa:	429a      	cmp	r2, r3
 80011fc:	dbd7      	blt.n	80011ae <CRSF_Process+0x1a>
 80011fe:	e000      	b.n	8001202 <CRSF_Process+0x6e>
    if (bytes_received < 3) return;  // Not enough data for a CRSF packet
 8001200:	bf00      	nop
                }
            }
        }
    }
}
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000314 	.word	0x20000314

0800120c <HAL_UART_RxCpltCallback>:
    if (channel >= NUM_CHANNELS) return 1500;  // Return midpoint if out of range
    return 988 + ((crsf_data.channels[channel] * 988) / 2047);  // Scale to 1000-2000µs
}

// Optional: Restart DMA when transmission is complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
    if (huart == crsf_huart) {
 8001214:	4b08      	ldr	r3, [pc, #32]	@ (8001238 <HAL_UART_RxCpltCallback+0x2c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	429a      	cmp	r2, r3
 800121c:	d108      	bne.n	8001230 <HAL_UART_RxCpltCallback+0x24>
        CRSF_Process();
 800121e:	f7ff ffb9 	bl	8001194 <CRSF_Process>
        HAL_UART_Receive_DMA(crsf_huart, crsf_rx_buffer, CRSF_BUFFER_SIZE);  // Restart DMA
 8001222:	4b05      	ldr	r3, [pc, #20]	@ (8001238 <HAL_UART_RxCpltCallback+0x2c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2240      	movs	r2, #64	@ 0x40
 8001228:	4904      	ldr	r1, [pc, #16]	@ (800123c <HAL_UART_RxCpltCallback+0x30>)
 800122a:	4618      	mov	r0, r3
 800122c:	f007 fd8f 	bl	8008d4e <HAL_UART_Receive_DMA>
    }
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000310 	.word	0x20000310
 800123c:	20000314 	.word	0x20000314

08001240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001240:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001244:	b094      	sub	sp, #80	@ 0x50
 8001246:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001248:	f000 fd90 	bl	8001d6c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124c:	f001 fc8b 	bl	8002b66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001250:	f000 f8c2 	bl	80013d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001254:	f000 fcbc 	bl	8001bd0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001258:	f000 fc60 	bl	8001b1c <MX_DMA_Init>
  MX_USART1_UART_Init();
 800125c:	f000 fb9e 	bl	800199c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001260:	f000 fbcc 	bl	80019fc <MX_USART2_UART_Init>
  MX_SDMMC1_SD_Init();
 8001264:	f000 f9b8 	bl	80015d8 <MX_SDMMC1_SD_Init>
  MX_USART6_UART_Init();
 8001268:	f000 fc28 	bl	8001abc <MX_USART6_UART_Init>
  MX_SPI1_Init();
 800126c:	f000 f9d6 	bl	800161c <MX_SPI1_Init>
  MX_I2C1_Init();
 8001270:	f000 f972 	bl	8001558 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001274:	f000 fa10 	bl	8001698 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001278:	f000 fa4c 	bl	8001714 <MX_TIM1_Init>
  MX_UART4_Init();
 800127c:	f000 fb5e 	bl	800193c <MX_UART4_Init>
  MX_USART3_UART_Init();
 8001280:	f000 fbec 	bl	8001a5c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001284:	f000 f916 	bl	80014b4 <MX_ADC1_Init>
  MX_TIM6_Init();
 8001288:	f000 fb22 	bl	80018d0 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 800128c:	f00c fe96 	bl	800dfbc <MX_USB_DEVICE_Init>
  MX_FATFS_Init();
 8001290:	f00a fc9e 	bl	800bbd0 <MX_FATFS_Init>
  MX_TIM2_Init();
 8001294:	f000 face 	bl	8001834 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  CRSF_Init(&huart1);
 8001298:	4849      	ldr	r0, [pc, #292]	@ (80013c0 <main+0x180>)
 800129a:	f7ff fe43 	bl	8000f24 <CRSF_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start(&htim2);
 800129e:	4849      	ldr	r0, [pc, #292]	@ (80013c4 <main+0x184>)
 80012a0:	f006 fd28 	bl	8007cf4 <HAL_TIM_Base_Start>
  uint64_t delay_loop = (1000 * 1000);
 80012a4:	4a48      	ldr	r2, [pc, #288]	@ (80013c8 <main+0x188>)
 80012a6:	f04f 0300 	mov.w	r3, #0
 80012aa:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  while (1)
  {
	  /*CRSF_Process();
	  	uint16_t ch0 = CRSF_GetChannel(0);
	  	printf("Ch 0: %d\n", ch0);*/
	  if(__HAL_TIM_GET_COUNTER(&htim2) > delay_loop){
 80012ae:	4b45      	ldr	r3, [pc, #276]	@ (80013c4 <main+0x184>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b4:	2200      	movs	r2, #0
 80012b6:	461c      	mov	r4, r3
 80012b8:	4615      	mov	r5, r2
 80012ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80012be:	42a2      	cmp	r2, r4
 80012c0:	41ab      	sbcs	r3, r5
 80012c2:	d2f4      	bcs.n	80012ae <main+0x6e>
		snprintf(message, sizeof(message), "Hello, World sent %f seconds after boot!", (__HAL_TIM_GET_COUNTER(&htim2) / 1000000.0));
 80012c4:	4b3f      	ldr	r3, [pc, #252]	@ (80013c4 <main+0x184>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff f942 	bl	8000554 <__aeabi_ui2d>
 80012d0:	a339      	add	r3, pc, #228	@ (adr r3, 80013b8 <main+0x178>)
 80012d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d6:	f7ff fae1 	bl	800089c <__aeabi_ddiv>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4638      	mov	r0, r7
 80012e0:	e9cd 2300 	strd	r2, r3, [sp]
 80012e4:	4a39      	ldr	r2, [pc, #228]	@ (80013cc <main+0x18c>)
 80012e6:	2140      	movs	r1, #64	@ 0x40
 80012e8:	f00e f9c8 	bl	800f67c <sniprintf>
		CDC_Transmit_FS((uint8_t *)message, strlen(message));
 80012ec:	463b      	mov	r3, r7
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7fe ffe6 	bl	80002c0 <strlen>
 80012f4:	4603      	mov	r3, r0
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	463b      	mov	r3, r7
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f00c ff1b 	bl	800e138 <CDC_Transmit_FS>
		HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen(message), 10);
 8001302:	463b      	mov	r3, r7
 8001304:	4618      	mov	r0, r3
 8001306:	f7fe ffdb 	bl	80002c0 <strlen>
 800130a:	4603      	mov	r3, r0
 800130c:	b29a      	uxth	r2, r3
 800130e:	4639      	mov	r1, r7
 8001310:	230a      	movs	r3, #10
 8001312:	482b      	ldr	r0, [pc, #172]	@ (80013c0 <main+0x180>)
 8001314:	f007 fc92 	bl	8008c3c <HAL_UART_Transmit>
		delay_loop += (1000 * 1000);
 8001318:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800131c:	492a      	ldr	r1, [pc, #168]	@ (80013c8 <main+0x188>)
 800131e:	eb12 0801 	adds.w	r8, r2, r1
 8001322:	f143 0900 	adc.w	r9, r3, #0
 8001326:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == GPIO_PIN_RESET){
 800132a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800132e:	4828      	ldr	r0, [pc, #160]	@ (80013d0 <main+0x190>)
 8001330:	f002 fdcc 	bl	8003ecc <HAL_GPIO_ReadPin>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d111      	bne.n	800135e <main+0x11e>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800133a:	2201      	movs	r2, #1
 800133c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001340:	4823      	ldr	r0, [pc, #140]	@ (80013d0 <main+0x190>)
 8001342:	f002 fddb 	bl	8003efc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800134c:	4820      	ldr	r0, [pc, #128]	@ (80013d0 <main+0x190>)
 800134e:	f002 fdd5 	bl	8003efc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001352:	2201      	movs	r2, #1
 8001354:	2108      	movs	r1, #8
 8001356:	481f      	ldr	r0, [pc, #124]	@ (80013d4 <main+0x194>)
 8001358:	f002 fdd0 	bl	8003efc <HAL_GPIO_WritePin>
 800135c:	e7a7      	b.n	80012ae <main+0x6e>
		}
		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == GPIO_PIN_RESET){
 800135e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001362:	481b      	ldr	r0, [pc, #108]	@ (80013d0 <main+0x190>)
 8001364:	f002 fdb2 	bl	8003ecc <HAL_GPIO_ReadPin>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d111      	bne.n	8001392 <main+0x152>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800136e:	2201      	movs	r2, #1
 8001370:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001374:	4816      	ldr	r0, [pc, #88]	@ (80013d0 <main+0x190>)
 8001376:	f002 fdc1 	bl	8003efc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800137a:	2201      	movs	r2, #1
 800137c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001380:	4813      	ldr	r0, [pc, #76]	@ (80013d0 <main+0x190>)
 8001382:	f002 fdbb 	bl	8003efc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	2108      	movs	r1, #8
 800138a:	4812      	ldr	r0, [pc, #72]	@ (80013d4 <main+0x194>)
 800138c:	f002 fdb6 	bl	8003efc <HAL_GPIO_WritePin>
 8001390:	e78d      	b.n	80012ae <main+0x6e>
		}
		else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001398:	480d      	ldr	r0, [pc, #52]	@ (80013d0 <main+0x190>)
 800139a:	f002 fdaf 	bl	8003efc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800139e:	2201      	movs	r2, #1
 80013a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013a4:	480a      	ldr	r0, [pc, #40]	@ (80013d0 <main+0x190>)
 80013a6:	f002 fda9 	bl	8003efc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80013aa:	2201      	movs	r2, #1
 80013ac:	2108      	movs	r1, #8
 80013ae:	4809      	ldr	r0, [pc, #36]	@ (80013d4 <main+0x194>)
 80013b0:	f002 fda4 	bl	8003efc <HAL_GPIO_WritePin>
	  if(__HAL_TIM_GET_COUNTER(&htim2) > delay_loop){
 80013b4:	e77b      	b.n	80012ae <main+0x6e>
 80013b6:	bf00      	nop
 80013b8:	00000000 	.word	0x00000000
 80013bc:	412e8480 	.word	0x412e8480
 80013c0:	20000708 	.word	0x20000708
 80013c4:	20000588 	.word	0x20000588
 80013c8:	000f4240 	.word	0x000f4240
 80013cc:	080117b8 	.word	0x080117b8
 80013d0:	40020400 	.word	0x40020400
 80013d4:	40020800 	.word	0x40020800

080013d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b094      	sub	sp, #80	@ 0x50
 80013dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013de:	f107 0320 	add.w	r3, r7, #32
 80013e2:	2230      	movs	r2, #48	@ 0x30
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f00e f9c1 	bl	800f76e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fc:	4b2b      	ldr	r3, [pc, #172]	@ (80014ac <SystemClock_Config+0xd4>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001400:	4a2a      	ldr	r2, [pc, #168]	@ (80014ac <SystemClock_Config+0xd4>)
 8001402:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001406:	6413      	str	r3, [r2, #64]	@ 0x40
 8001408:	4b28      	ldr	r3, [pc, #160]	@ (80014ac <SystemClock_Config+0xd4>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001414:	4b26      	ldr	r3, [pc, #152]	@ (80014b0 <SystemClock_Config+0xd8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a25      	ldr	r2, [pc, #148]	@ (80014b0 <SystemClock_Config+0xd8>)
 800141a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	4b23      	ldr	r3, [pc, #140]	@ (80014b0 <SystemClock_Config+0xd8>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800142c:	2301      	movs	r3, #1
 800142e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001430:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001434:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001436:	2302      	movs	r3, #2
 8001438:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800143a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800143e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001440:	2304      	movs	r3, #4
 8001442:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001444:	23d8      	movs	r3, #216	@ 0xd8
 8001446:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001448:	2302      	movs	r3, #2
 800144a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800144c:	2309      	movs	r3, #9
 800144e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001450:	f107 0320 	add.w	r3, r7, #32
 8001454:	4618      	mov	r0, r3
 8001456:	f004 f977 	bl	8005748 <HAL_RCC_OscConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001460:	f000 fcb0 	bl	8001dc4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001464:	f004 f920 	bl	80056a8 <HAL_PWREx_EnableOverDrive>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800146e:	f000 fca9 	bl	8001dc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001472:	230f      	movs	r3, #15
 8001474:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001476:	2302      	movs	r3, #2
 8001478:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800147e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001482:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001484:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001488:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800148a:	f107 030c 	add.w	r3, r7, #12
 800148e:	2107      	movs	r1, #7
 8001490:	4618      	mov	r0, r3
 8001492:	f004 fbfd 	bl	8005c90 <HAL_RCC_ClockConfig>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800149c:	f000 fc92 	bl	8001dc4 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80014a0:	f004 fce2 	bl	8005e68 <HAL_RCC_EnableCSS>
}
 80014a4:	bf00      	nop
 80014a6:	3750      	adds	r7, #80	@ 0x50
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40007000 	.word	0x40007000

080014b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ba:	463b      	mov	r3, r7
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014c6:	4b21      	ldr	r3, [pc, #132]	@ (800154c <MX_ADC1_Init+0x98>)
 80014c8:	4a21      	ldr	r2, [pc, #132]	@ (8001550 <MX_ADC1_Init+0x9c>)
 80014ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014cc:	4b1f      	ldr	r3, [pc, #124]	@ (800154c <MX_ADC1_Init+0x98>)
 80014ce:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80014d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014d4:	4b1d      	ldr	r3, [pc, #116]	@ (800154c <MX_ADC1_Init+0x98>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014da:	4b1c      	ldr	r3, [pc, #112]	@ (800154c <MX_ADC1_Init+0x98>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014e0:	4b1a      	ldr	r3, [pc, #104]	@ (800154c <MX_ADC1_Init+0x98>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014e6:	4b19      	ldr	r3, [pc, #100]	@ (800154c <MX_ADC1_Init+0x98>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014ee:	4b17      	ldr	r3, [pc, #92]	@ (800154c <MX_ADC1_Init+0x98>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014f4:	4b15      	ldr	r3, [pc, #84]	@ (800154c <MX_ADC1_Init+0x98>)
 80014f6:	4a17      	ldr	r2, [pc, #92]	@ (8001554 <MX_ADC1_Init+0xa0>)
 80014f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014fa:	4b14      	ldr	r3, [pc, #80]	@ (800154c <MX_ADC1_Init+0x98>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001500:	4b12      	ldr	r3, [pc, #72]	@ (800154c <MX_ADC1_Init+0x98>)
 8001502:	2201      	movs	r2, #1
 8001504:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001506:	4b11      	ldr	r3, [pc, #68]	@ (800154c <MX_ADC1_Init+0x98>)
 8001508:	2200      	movs	r2, #0
 800150a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800150e:	4b0f      	ldr	r3, [pc, #60]	@ (800154c <MX_ADC1_Init+0x98>)
 8001510:	2201      	movs	r2, #1
 8001512:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001514:	480d      	ldr	r0, [pc, #52]	@ (800154c <MX_ADC1_Init+0x98>)
 8001516:	f001 fba7 	bl	8002c68 <HAL_ADC_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001520:	f000 fc50 	bl	8001dc4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001524:	230a      	movs	r3, #10
 8001526:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001528:	2301      	movs	r3, #1
 800152a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800152c:	2300      	movs	r3, #0
 800152e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001530:	463b      	mov	r3, r7
 8001532:	4619      	mov	r1, r3
 8001534:	4805      	ldr	r0, [pc, #20]	@ (800154c <MX_ADC1_Init+0x98>)
 8001536:	f001 fbdb 	bl	8002cf0 <HAL_ADC_ConfigChannel>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001540:	f000 fc40 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001544:	bf00      	nop
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000354 	.word	0x20000354
 8001550:	40012000 	.word	0x40012000
 8001554:	0f000001 	.word	0x0f000001

08001558 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800155c:	4b1b      	ldr	r3, [pc, #108]	@ (80015cc <MX_I2C1_Init+0x74>)
 800155e:	4a1c      	ldr	r2, [pc, #112]	@ (80015d0 <MX_I2C1_Init+0x78>)
 8001560:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001562:	4b1a      	ldr	r3, [pc, #104]	@ (80015cc <MX_I2C1_Init+0x74>)
 8001564:	4a1b      	ldr	r2, [pc, #108]	@ (80015d4 <MX_I2C1_Init+0x7c>)
 8001566:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001568:	4b18      	ldr	r3, [pc, #96]	@ (80015cc <MX_I2C1_Init+0x74>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800156e:	4b17      	ldr	r3, [pc, #92]	@ (80015cc <MX_I2C1_Init+0x74>)
 8001570:	2201      	movs	r2, #1
 8001572:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001574:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <MX_I2C1_Init+0x74>)
 8001576:	2200      	movs	r2, #0
 8001578:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800157a:	4b14      	ldr	r3, [pc, #80]	@ (80015cc <MX_I2C1_Init+0x74>)
 800157c:	2200      	movs	r2, #0
 800157e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001580:	4b12      	ldr	r3, [pc, #72]	@ (80015cc <MX_I2C1_Init+0x74>)
 8001582:	2200      	movs	r2, #0
 8001584:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001586:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <MX_I2C1_Init+0x74>)
 8001588:	2200      	movs	r2, #0
 800158a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800158c:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <MX_I2C1_Init+0x74>)
 800158e:	2200      	movs	r2, #0
 8001590:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001592:	480e      	ldr	r0, [pc, #56]	@ (80015cc <MX_I2C1_Init+0x74>)
 8001594:	f002 fccc 	bl	8003f30 <HAL_I2C_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800159e:	f000 fc11 	bl	8001dc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015a2:	2100      	movs	r1, #0
 80015a4:	4809      	ldr	r0, [pc, #36]	@ (80015cc <MX_I2C1_Init+0x74>)
 80015a6:	f002 fd5f 	bl	8004068 <HAL_I2CEx_ConfigAnalogFilter>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015b0:	f000 fc08 	bl	8001dc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015b4:	2100      	movs	r1, #0
 80015b6:	4805      	ldr	r0, [pc, #20]	@ (80015cc <MX_I2C1_Init+0x74>)
 80015b8:	f002 fda1 	bl	80040fe <HAL_I2CEx_ConfigDigitalFilter>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015c2:	f000 fbff 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	2000039c 	.word	0x2000039c
 80015d0:	40005400 	.word	0x40005400
 80015d4:	20404768 	.word	0x20404768

080015d8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80015dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001614 <MX_SDMMC1_SD_Init+0x3c>)
 80015de:	4a0e      	ldr	r2, [pc, #56]	@ (8001618 <MX_SDMMC1_SD_Init+0x40>)
 80015e0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80015e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <MX_SDMMC1_SD_Init+0x3c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80015e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001614 <MX_SDMMC1_SD_Init+0x3c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80015ee:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <MX_SDMMC1_SD_Init+0x3c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80015f4:	4b07      	ldr	r3, [pc, #28]	@ (8001614 <MX_SDMMC1_SD_Init+0x3c>)
 80015f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015fa:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80015fc:	4b05      	ldr	r3, [pc, #20]	@ (8001614 <MX_SDMMC1_SD_Init+0x3c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001602:	4b04      	ldr	r3, [pc, #16]	@ (8001614 <MX_SDMMC1_SD_Init+0x3c>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	200003f0 	.word	0x200003f0
 8001618:	40012c00 	.word	0x40012c00

0800161c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001620:	4b1b      	ldr	r3, [pc, #108]	@ (8001690 <MX_SPI1_Init+0x74>)
 8001622:	4a1c      	ldr	r2, [pc, #112]	@ (8001694 <MX_SPI1_Init+0x78>)
 8001624:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001626:	4b1a      	ldr	r3, [pc, #104]	@ (8001690 <MX_SPI1_Init+0x74>)
 8001628:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800162c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800162e:	4b18      	ldr	r3, [pc, #96]	@ (8001690 <MX_SPI1_Init+0x74>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001634:	4b16      	ldr	r3, [pc, #88]	@ (8001690 <MX_SPI1_Init+0x74>)
 8001636:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800163a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800163c:	4b14      	ldr	r3, [pc, #80]	@ (8001690 <MX_SPI1_Init+0x74>)
 800163e:	2200      	movs	r2, #0
 8001640:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001642:	4b13      	ldr	r3, [pc, #76]	@ (8001690 <MX_SPI1_Init+0x74>)
 8001644:	2200      	movs	r2, #0
 8001646:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001648:	4b11      	ldr	r3, [pc, #68]	@ (8001690 <MX_SPI1_Init+0x74>)
 800164a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800164e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001650:	4b0f      	ldr	r3, [pc, #60]	@ (8001690 <MX_SPI1_Init+0x74>)
 8001652:	2228      	movs	r2, #40	@ 0x28
 8001654:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001656:	4b0e      	ldr	r3, [pc, #56]	@ (8001690 <MX_SPI1_Init+0x74>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800165c:	4b0c      	ldr	r3, [pc, #48]	@ (8001690 <MX_SPI1_Init+0x74>)
 800165e:	2200      	movs	r2, #0
 8001660:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001662:	4b0b      	ldr	r3, [pc, #44]	@ (8001690 <MX_SPI1_Init+0x74>)
 8001664:	2200      	movs	r2, #0
 8001666:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001668:	4b09      	ldr	r3, [pc, #36]	@ (8001690 <MX_SPI1_Init+0x74>)
 800166a:	2207      	movs	r2, #7
 800166c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800166e:	4b08      	ldr	r3, [pc, #32]	@ (8001690 <MX_SPI1_Init+0x74>)
 8001670:	2200      	movs	r2, #0
 8001672:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001674:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <MX_SPI1_Init+0x74>)
 8001676:	2208      	movs	r2, #8
 8001678:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800167a:	4805      	ldr	r0, [pc, #20]	@ (8001690 <MX_SPI1_Init+0x74>)
 800167c:	f006 fa37 	bl	8007aee <HAL_SPI_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001686:	f000 fb9d 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000474 	.word	0x20000474
 8001694:	40013000 	.word	0x40013000

08001698 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800169c:	4b1b      	ldr	r3, [pc, #108]	@ (800170c <MX_SPI2_Init+0x74>)
 800169e:	4a1c      	ldr	r2, [pc, #112]	@ (8001710 <MX_SPI2_Init+0x78>)
 80016a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016a2:	4b1a      	ldr	r3, [pc, #104]	@ (800170c <MX_SPI2_Init+0x74>)
 80016a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016aa:	4b18      	ldr	r3, [pc, #96]	@ (800170c <MX_SPI2_Init+0x74>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80016b0:	4b16      	ldr	r3, [pc, #88]	@ (800170c <MX_SPI2_Init+0x74>)
 80016b2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80016b6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016b8:	4b14      	ldr	r3, [pc, #80]	@ (800170c <MX_SPI2_Init+0x74>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016be:	4b13      	ldr	r3, [pc, #76]	@ (800170c <MX_SPI2_Init+0x74>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016c4:	4b11      	ldr	r3, [pc, #68]	@ (800170c <MX_SPI2_Init+0x74>)
 80016c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016ca:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	@ (800170c <MX_SPI2_Init+0x74>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <MX_SPI2_Init+0x74>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <MX_SPI2_Init+0x74>)
 80016da:	2200      	movs	r2, #0
 80016dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016de:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <MX_SPI2_Init+0x74>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80016e4:	4b09      	ldr	r3, [pc, #36]	@ (800170c <MX_SPI2_Init+0x74>)
 80016e6:	2207      	movs	r2, #7
 80016e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016ea:	4b08      	ldr	r3, [pc, #32]	@ (800170c <MX_SPI2_Init+0x74>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016f0:	4b06      	ldr	r3, [pc, #24]	@ (800170c <MX_SPI2_Init+0x74>)
 80016f2:	2208      	movs	r2, #8
 80016f4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016f6:	4805      	ldr	r0, [pc, #20]	@ (800170c <MX_SPI2_Init+0x74>)
 80016f8:	f006 f9f9 	bl	8007aee <HAL_SPI_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001702:	f000 fb5f 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200004d8 	.word	0x200004d8
 8001710:	40003800 	.word	0x40003800

08001714 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b096      	sub	sp, #88	@ 0x58
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800171a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001726:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
 8001734:	611a      	str	r2, [r3, #16]
 8001736:	615a      	str	r2, [r3, #20]
 8001738:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	222c      	movs	r2, #44	@ 0x2c
 800173e:	2100      	movs	r1, #0
 8001740:	4618      	mov	r0, r3
 8001742:	f00e f814 	bl	800f76e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001746:	4b39      	ldr	r3, [pc, #228]	@ (800182c <MX_TIM1_Init+0x118>)
 8001748:	4a39      	ldr	r2, [pc, #228]	@ (8001830 <MX_TIM1_Init+0x11c>)
 800174a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800174c:	4b37      	ldr	r3, [pc, #220]	@ (800182c <MX_TIM1_Init+0x118>)
 800174e:	2200      	movs	r2, #0
 8001750:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001752:	4b36      	ldr	r3, [pc, #216]	@ (800182c <MX_TIM1_Init+0x118>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001758:	4b34      	ldr	r3, [pc, #208]	@ (800182c <MX_TIM1_Init+0x118>)
 800175a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800175e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001760:	4b32      	ldr	r3, [pc, #200]	@ (800182c <MX_TIM1_Init+0x118>)
 8001762:	2200      	movs	r2, #0
 8001764:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001766:	4b31      	ldr	r3, [pc, #196]	@ (800182c <MX_TIM1_Init+0x118>)
 8001768:	2200      	movs	r2, #0
 800176a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800176c:	4b2f      	ldr	r3, [pc, #188]	@ (800182c <MX_TIM1_Init+0x118>)
 800176e:	2280      	movs	r2, #128	@ 0x80
 8001770:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001772:	482e      	ldr	r0, [pc, #184]	@ (800182c <MX_TIM1_Init+0x118>)
 8001774:	f006 fb2e 	bl	8007dd4 <HAL_TIM_PWM_Init>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800177e:	f000 fb21 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001782:	2300      	movs	r3, #0
 8001784:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001786:	2300      	movs	r3, #0
 8001788:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800178a:	2300      	movs	r3, #0
 800178c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800178e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001792:	4619      	mov	r1, r3
 8001794:	4825      	ldr	r0, [pc, #148]	@ (800182c <MX_TIM1_Init+0x118>)
 8001796:	f007 f8f7 	bl	8008988 <HAL_TIMEx_MasterConfigSynchronization>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80017a0:	f000 fb10 	bl	8001dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017a4:	2360      	movs	r3, #96	@ 0x60
 80017a6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ac:	2300      	movs	r3, #0
 80017ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017b0:	2300      	movs	r3, #0
 80017b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017b8:	2300      	movs	r3, #0
 80017ba:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017bc:	2300      	movs	r3, #0
 80017be:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017c0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017c4:	2200      	movs	r2, #0
 80017c6:	4619      	mov	r1, r3
 80017c8:	4818      	ldr	r0, [pc, #96]	@ (800182c <MX_TIM1_Init+0x118>)
 80017ca:	f006 fb5b 	bl	8007e84 <HAL_TIM_PWM_ConfigChannel>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80017d4:	f000 faf6 	bl	8001dc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017d8:	2300      	movs	r3, #0
 80017da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017fe:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	4619      	mov	r1, r3
 800180c:	4807      	ldr	r0, [pc, #28]	@ (800182c <MX_TIM1_Init+0x118>)
 800180e:	f007 f949 	bl	8008aa4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001818:	f000 fad4 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800181c:	4803      	ldr	r0, [pc, #12]	@ (800182c <MX_TIM1_Init+0x118>)
 800181e:	f000 fd39 	bl	8002294 <HAL_TIM_MspPostInit>

}
 8001822:	bf00      	nop
 8001824:	3758      	adds	r7, #88	@ 0x58
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	2000053c 	.word	0x2000053c
 8001830:	40010000 	.word	0x40010000

08001834 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800183a:	f107 0310 	add.w	r3, r7, #16
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001852:	4b1e      	ldr	r3, [pc, #120]	@ (80018cc <MX_TIM2_Init+0x98>)
 8001854:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001858:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 800185a:	4b1c      	ldr	r3, [pc, #112]	@ (80018cc <MX_TIM2_Init+0x98>)
 800185c:	226b      	movs	r2, #107	@ 0x6b
 800185e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001860:	4b1a      	ldr	r3, [pc, #104]	@ (80018cc <MX_TIM2_Init+0x98>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001866:	4b19      	ldr	r3, [pc, #100]	@ (80018cc <MX_TIM2_Init+0x98>)
 8001868:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800186c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186e:	4b17      	ldr	r3, [pc, #92]	@ (80018cc <MX_TIM2_Init+0x98>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001874:	4b15      	ldr	r3, [pc, #84]	@ (80018cc <MX_TIM2_Init+0x98>)
 8001876:	2280      	movs	r2, #128	@ 0x80
 8001878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800187a:	4814      	ldr	r0, [pc, #80]	@ (80018cc <MX_TIM2_Init+0x98>)
 800187c:	f006 f9e2 	bl	8007c44 <HAL_TIM_Base_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001886:	f000 fa9d 	bl	8001dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800188a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800188e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001890:	f107 0310 	add.w	r3, r7, #16
 8001894:	4619      	mov	r1, r3
 8001896:	480d      	ldr	r0, [pc, #52]	@ (80018cc <MX_TIM2_Init+0x98>)
 8001898:	f006 fc08 	bl	80080ac <HAL_TIM_ConfigClockSource>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80018a2:	f000 fa8f 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	4619      	mov	r1, r3
 80018b2:	4806      	ldr	r0, [pc, #24]	@ (80018cc <MX_TIM2_Init+0x98>)
 80018b4:	f007 f868 	bl	8008988 <HAL_TIMEx_MasterConfigSynchronization>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80018be:	f000 fa81 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018c2:	bf00      	nop
 80018c4:	3720      	adds	r7, #32
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000588 	.word	0x20000588

080018d0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018e0:	4b14      	ldr	r3, [pc, #80]	@ (8001934 <MX_TIM6_Init+0x64>)
 80018e2:	4a15      	ldr	r2, [pc, #84]	@ (8001938 <MX_TIM6_Init+0x68>)
 80018e4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80018e6:	4b13      	ldr	r3, [pc, #76]	@ (8001934 <MX_TIM6_Init+0x64>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ec:	4b11      	ldr	r3, [pc, #68]	@ (8001934 <MX_TIM6_Init+0x64>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80018f2:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <MX_TIM6_Init+0x64>)
 80018f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018f8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001934 <MX_TIM6_Init+0x64>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001900:	480c      	ldr	r0, [pc, #48]	@ (8001934 <MX_TIM6_Init+0x64>)
 8001902:	f006 f99f 	bl	8007c44 <HAL_TIM_Base_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800190c:	f000 fa5a 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001910:	2300      	movs	r3, #0
 8001912:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001914:	2300      	movs	r3, #0
 8001916:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	4619      	mov	r1, r3
 800191c:	4805      	ldr	r0, [pc, #20]	@ (8001934 <MX_TIM6_Init+0x64>)
 800191e:	f007 f833 	bl	8008988 <HAL_TIMEx_MasterConfigSynchronization>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001928:	f000 fa4c 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800192c:	bf00      	nop
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	200005d4 	.word	0x200005d4
 8001938:	40001000 	.word	0x40001000

0800193c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001940:	4b14      	ldr	r3, [pc, #80]	@ (8001994 <MX_UART4_Init+0x58>)
 8001942:	4a15      	ldr	r2, [pc, #84]	@ (8001998 <MX_UART4_Init+0x5c>)
 8001944:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001946:	4b13      	ldr	r3, [pc, #76]	@ (8001994 <MX_UART4_Init+0x58>)
 8001948:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800194c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800194e:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <MX_UART4_Init+0x58>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001954:	4b0f      	ldr	r3, [pc, #60]	@ (8001994 <MX_UART4_Init+0x58>)
 8001956:	2200      	movs	r2, #0
 8001958:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800195a:	4b0e      	ldr	r3, [pc, #56]	@ (8001994 <MX_UART4_Init+0x58>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001960:	4b0c      	ldr	r3, [pc, #48]	@ (8001994 <MX_UART4_Init+0x58>)
 8001962:	220c      	movs	r2, #12
 8001964:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001966:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <MX_UART4_Init+0x58>)
 8001968:	2200      	movs	r2, #0
 800196a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800196c:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <MX_UART4_Init+0x58>)
 800196e:	2200      	movs	r2, #0
 8001970:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001972:	4b08      	ldr	r3, [pc, #32]	@ (8001994 <MX_UART4_Init+0x58>)
 8001974:	2200      	movs	r2, #0
 8001976:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001978:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <MX_UART4_Init+0x58>)
 800197a:	2200      	movs	r2, #0
 800197c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800197e:	4805      	ldr	r0, [pc, #20]	@ (8001994 <MX_UART4_Init+0x58>)
 8001980:	f007 f90e 	bl	8008ba0 <HAL_UART_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800198a:	f000 fa1b 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000680 	.word	0x20000680
 8001998:	40004c00 	.word	0x40004c00

0800199c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019a0:	4b14      	ldr	r3, [pc, #80]	@ (80019f4 <MX_USART1_UART_Init+0x58>)
 80019a2:	4a15      	ldr	r2, [pc, #84]	@ (80019f8 <MX_USART1_UART_Init+0x5c>)
 80019a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019a6:	4b13      	ldr	r3, [pc, #76]	@ (80019f4 <MX_USART1_UART_Init+0x58>)
 80019a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019ae:	4b11      	ldr	r3, [pc, #68]	@ (80019f4 <MX_USART1_UART_Init+0x58>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019b4:	4b0f      	ldr	r3, [pc, #60]	@ (80019f4 <MX_USART1_UART_Init+0x58>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019ba:	4b0e      	ldr	r3, [pc, #56]	@ (80019f4 <MX_USART1_UART_Init+0x58>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019c0:	4b0c      	ldr	r3, [pc, #48]	@ (80019f4 <MX_USART1_UART_Init+0x58>)
 80019c2:	220c      	movs	r2, #12
 80019c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c6:	4b0b      	ldr	r3, [pc, #44]	@ (80019f4 <MX_USART1_UART_Init+0x58>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019cc:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <MX_USART1_UART_Init+0x58>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019d2:	4b08      	ldr	r3, [pc, #32]	@ (80019f4 <MX_USART1_UART_Init+0x58>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019d8:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <MX_USART1_UART_Init+0x58>)
 80019da:	2200      	movs	r2, #0
 80019dc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019de:	4805      	ldr	r0, [pc, #20]	@ (80019f4 <MX_USART1_UART_Init+0x58>)
 80019e0:	f007 f8de 	bl	8008ba0 <HAL_UART_Init>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80019ea:	f000 f9eb 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000708 	.word	0x20000708
 80019f8:	40011000 	.word	0x40011000

080019fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a00:	4b14      	ldr	r3, [pc, #80]	@ (8001a54 <MX_USART2_UART_Init+0x58>)
 8001a02:	4a15      	ldr	r2, [pc, #84]	@ (8001a58 <MX_USART2_UART_Init+0x5c>)
 8001a04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a06:	4b13      	ldr	r3, [pc, #76]	@ (8001a54 <MX_USART2_UART_Init+0x58>)
 8001a08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0e:	4b11      	ldr	r3, [pc, #68]	@ (8001a54 <MX_USART2_UART_Init+0x58>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a14:	4b0f      	ldr	r3, [pc, #60]	@ (8001a54 <MX_USART2_UART_Init+0x58>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a54 <MX_USART2_UART_Init+0x58>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a20:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <MX_USART2_UART_Init+0x58>)
 8001a22:	220c      	movs	r2, #12
 8001a24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a26:	4b0b      	ldr	r3, [pc, #44]	@ (8001a54 <MX_USART2_UART_Init+0x58>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a2c:	4b09      	ldr	r3, [pc, #36]	@ (8001a54 <MX_USART2_UART_Init+0x58>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a32:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <MX_USART2_UART_Init+0x58>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a38:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <MX_USART2_UART_Init+0x58>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a3e:	4805      	ldr	r0, [pc, #20]	@ (8001a54 <MX_USART2_UART_Init+0x58>)
 8001a40:	f007 f8ae 	bl	8008ba0 <HAL_UART_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a4a:	f000 f9bb 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000790 	.word	0x20000790
 8001a58:	40004400 	.word	0x40004400

08001a5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a60:	4b14      	ldr	r3, [pc, #80]	@ (8001ab4 <MX_USART3_UART_Init+0x58>)
 8001a62:	4a15      	ldr	r2, [pc, #84]	@ (8001ab8 <MX_USART3_UART_Init+0x5c>)
 8001a64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a66:	4b13      	ldr	r3, [pc, #76]	@ (8001ab4 <MX_USART3_UART_Init+0x58>)
 8001a68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6e:	4b11      	ldr	r3, [pc, #68]	@ (8001ab4 <MX_USART3_UART_Init+0x58>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a74:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab4 <MX_USART3_UART_Init+0x58>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab4 <MX_USART3_UART_Init+0x58>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a80:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab4 <MX_USART3_UART_Init+0x58>)
 8001a82:	220c      	movs	r2, #12
 8001a84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a86:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <MX_USART3_UART_Init+0x58>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a8c:	4b09      	ldr	r3, [pc, #36]	@ (8001ab4 <MX_USART3_UART_Init+0x58>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a92:	4b08      	ldr	r3, [pc, #32]	@ (8001ab4 <MX_USART3_UART_Init+0x58>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a98:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <MX_USART3_UART_Init+0x58>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a9e:	4805      	ldr	r0, [pc, #20]	@ (8001ab4 <MX_USART3_UART_Init+0x58>)
 8001aa0:	f007 f87e 	bl	8008ba0 <HAL_UART_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001aaa:	f000 f98b 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000818 	.word	0x20000818
 8001ab8:	40004800 	.word	0x40004800

08001abc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001ac0:	4b14      	ldr	r3, [pc, #80]	@ (8001b14 <MX_USART6_UART_Init+0x58>)
 8001ac2:	4a15      	ldr	r2, [pc, #84]	@ (8001b18 <MX_USART6_UART_Init+0x5c>)
 8001ac4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001ac6:	4b13      	ldr	r3, [pc, #76]	@ (8001b14 <MX_USART6_UART_Init+0x58>)
 8001ac8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001acc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001ace:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <MX_USART6_UART_Init+0x58>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b14 <MX_USART6_UART_Init+0x58>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001ada:	4b0e      	ldr	r3, [pc, #56]	@ (8001b14 <MX_USART6_UART_Init+0x58>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b14 <MX_USART6_UART_Init+0x58>)
 8001ae2:	220c      	movs	r2, #12
 8001ae4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8001b14 <MX_USART6_UART_Init+0x58>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aec:	4b09      	ldr	r3, [pc, #36]	@ (8001b14 <MX_USART6_UART_Init+0x58>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001af2:	4b08      	ldr	r3, [pc, #32]	@ (8001b14 <MX_USART6_UART_Init+0x58>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001af8:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <MX_USART6_UART_Init+0x58>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001afe:	4805      	ldr	r0, [pc, #20]	@ (8001b14 <MX_USART6_UART_Init+0x58>)
 8001b00:	f007 f84e 	bl	8008ba0 <HAL_UART_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001b0a:	f000 f95b 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	200008a0 	.word	0x200008a0
 8001b18:	40011400 	.word	0x40011400

08001b1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b22:	4b2a      	ldr	r3, [pc, #168]	@ (8001bcc <MX_DMA_Init+0xb0>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b26:	4a29      	ldr	r2, [pc, #164]	@ (8001bcc <MX_DMA_Init+0xb0>)
 8001b28:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b2e:	4b27      	ldr	r3, [pc, #156]	@ (8001bcc <MX_DMA_Init+0xb0>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b3a:	4b24      	ldr	r3, [pc, #144]	@ (8001bcc <MX_DMA_Init+0xb0>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	4a23      	ldr	r2, [pc, #140]	@ (8001bcc <MX_DMA_Init+0xb0>)
 8001b40:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b46:	4b21      	ldr	r3, [pc, #132]	@ (8001bcc <MX_DMA_Init+0xb0>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2100      	movs	r1, #0
 8001b56:	200c      	movs	r0, #12
 8001b58:	f001 fbf5 	bl	8003346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b5c:	200c      	movs	r0, #12
 8001b5e:	f001 fc0e 	bl	800337e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2100      	movs	r1, #0
 8001b66:	200d      	movs	r0, #13
 8001b68:	f001 fbed 	bl	8003346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001b6c:	200d      	movs	r0, #13
 8001b6e:	f001 fc06 	bl	800337e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2100      	movs	r1, #0
 8001b76:	2010      	movs	r0, #16
 8001b78:	f001 fbe5 	bl	8003346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001b7c:	2010      	movs	r0, #16
 8001b7e:	f001 fbfe 	bl	800337e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	2039      	movs	r0, #57	@ 0x39
 8001b88:	f001 fbdd 	bl	8003346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001b8c:	2039      	movs	r0, #57	@ 0x39
 8001b8e:	f001 fbf6 	bl	800337e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2100      	movs	r1, #0
 8001b96:	203a      	movs	r0, #58	@ 0x3a
 8001b98:	f001 fbd5 	bl	8003346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001b9c:	203a      	movs	r0, #58	@ 0x3a
 8001b9e:	f001 fbee 	bl	800337e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	203b      	movs	r0, #59	@ 0x3b
 8001ba8:	f001 fbcd 	bl	8003346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001bac:	203b      	movs	r0, #59	@ 0x3b
 8001bae:	f001 fbe6 	bl	800337e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	2046      	movs	r0, #70	@ 0x46
 8001bb8:	f001 fbc5 	bl	8003346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001bbc:	2046      	movs	r0, #70	@ 0x46
 8001bbe:	f001 fbde 	bl	800337e <HAL_NVIC_EnableIRQ>

}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800

08001bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	@ 0x28
 8001bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd6:	f107 0314 	add.w	r3, r7, #20
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	609a      	str	r2, [r3, #8]
 8001be2:	60da      	str	r2, [r3, #12]
 8001be4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001be6:	4b5d      	ldr	r3, [pc, #372]	@ (8001d5c <MX_GPIO_Init+0x18c>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	4a5c      	ldr	r2, [pc, #368]	@ (8001d5c <MX_GPIO_Init+0x18c>)
 8001bec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf2:	4b5a      	ldr	r3, [pc, #360]	@ (8001d5c <MX_GPIO_Init+0x18c>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bfe:	4b57      	ldr	r3, [pc, #348]	@ (8001d5c <MX_GPIO_Init+0x18c>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c02:	4a56      	ldr	r2, [pc, #344]	@ (8001d5c <MX_GPIO_Init+0x18c>)
 8001c04:	f043 0304 	orr.w	r3, r3, #4
 8001c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0a:	4b54      	ldr	r3, [pc, #336]	@ (8001d5c <MX_GPIO_Init+0x18c>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0e:	f003 0304 	and.w	r3, r3, #4
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c16:	4b51      	ldr	r3, [pc, #324]	@ (8001d5c <MX_GPIO_Init+0x18c>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1a:	4a50      	ldr	r2, [pc, #320]	@ (8001d5c <MX_GPIO_Init+0x18c>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c22:	4b4e      	ldr	r3, [pc, #312]	@ (8001d5c <MX_GPIO_Init+0x18c>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2e:	4b4b      	ldr	r3, [pc, #300]	@ (8001d5c <MX_GPIO_Init+0x18c>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c32:	4a4a      	ldr	r2, [pc, #296]	@ (8001d5c <MX_GPIO_Init+0x18c>)
 8001c34:	f043 0302 	orr.w	r3, r3, #2
 8001c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c3a:	4b48      	ldr	r3, [pc, #288]	@ (8001d5c <MX_GPIO_Init+0x18c>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c46:	4b45      	ldr	r3, [pc, #276]	@ (8001d5c <MX_GPIO_Init+0x18c>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	4a44      	ldr	r2, [pc, #272]	@ (8001d5c <MX_GPIO_Init+0x18c>)
 8001c4c:	f043 0308 	orr.w	r3, r3, #8
 8001c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c52:	4b42      	ldr	r3, [pc, #264]	@ (8001d5c <MX_GPIO_Init+0x18c>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RGB_R_Pin|BARO_CS_Pin, GPIO_PIN_SET);
 8001c5e:	2201      	movs	r2, #1
 8001c60:	2118      	movs	r1, #24
 8001c62:	483f      	ldr	r0, [pc, #252]	@ (8001d60 <MX_GPIO_Init+0x190>)
 8001c64:	f002 f94a 	bl	8003efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GYRO_CS_Pin|ACCEL_CS_Pin|CS_EXT_3_Pin|CS_EXT_2_Pin
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f240 313b 	movw	r1, #827	@ 0x33b
 8001c6e:	483d      	ldr	r0, [pc, #244]	@ (8001d64 <MX_GPIO_Init+0x194>)
 8001c70:	f002 f944 	bl	8003efc <HAL_GPIO_WritePin>
                          |CS_EXT_1_Pin|RGB_B_Pin|RGB_G_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SERVO1_Pin|SERVO2_Pin|SERVO3_Pin|SERVO4_Pin, GPIO_PIN_RESET);
 8001c74:	2200      	movs	r2, #0
 8001c76:	f24d 0104 	movw	r1, #53252	@ 0xd004
 8001c7a:	483a      	ldr	r0, [pc, #232]	@ (8001d64 <MX_GPIO_Init+0x194>)
 8001c7c:	f002 f93e 	bl	8003efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SERVO7_Pin|SEVO5_Pin|SERVO6_Pin, GPIO_PIN_RESET);
 8001c80:	2200      	movs	r2, #0
 8001c82:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001c86:	4838      	ldr	r0, [pc, #224]	@ (8001d68 <MX_GPIO_Init+0x198>)
 8001c88:	f002 f938 	bl	8003efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RGB_R_Pin */
  GPIO_InitStruct.Pin = RGB_R_Pin;
 8001c8c:	2308      	movs	r3, #8
 8001c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001c90:	2311      	movs	r3, #17
 8001c92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RGB_R_GPIO_Port, &GPIO_InitStruct);
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	482f      	ldr	r0, [pc, #188]	@ (8001d60 <MX_GPIO_Init+0x190>)
 8001ca4:	f001 ff76 	bl	8003b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CD_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 8001ca8:	2310      	movs	r3, #16
 8001caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	4619      	mov	r1, r3
 8001cba:	482b      	ldr	r0, [pc, #172]	@ (8001d68 <MX_GPIO_Init+0x198>)
 8001cbc:	f001 ff6a 	bl	8003b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : BARO_CS_Pin */
  GPIO_InitStruct.Pin = BARO_CS_Pin;
 8001cc0:	2310      	movs	r3, #16
 8001cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BARO_CS_GPIO_Port, &GPIO_InitStruct);
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4822      	ldr	r0, [pc, #136]	@ (8001d60 <MX_GPIO_Init+0x190>)
 8001cd8:	f001 ff5c 	bl	8003b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : GYRO_CS_Pin ACCEL_CS_Pin CS_EXT_3_Pin CS_EXT_2_Pin
                           CS_EXT_1_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin|ACCEL_CS_Pin|CS_EXT_3_Pin|CS_EXT_2_Pin
 8001cdc:	233b      	movs	r3, #59	@ 0x3b
 8001cde:	617b      	str	r3, [r7, #20]
                          |CS_EXT_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	481c      	ldr	r0, [pc, #112]	@ (8001d64 <MX_GPIO_Init+0x194>)
 8001cf4:	f001 ff4e 	bl	8003b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : SERVO1_Pin SERVO2_Pin SERVO3_Pin SERVO4_Pin */
  GPIO_InitStruct.Pin = SERVO1_Pin|SERVO2_Pin|SERVO3_Pin|SERVO4_Pin;
 8001cf8:	f24d 0304 	movw	r3, #53252	@ 0xd004
 8001cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d06:	2303      	movs	r3, #3
 8001d08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0a:	f107 0314 	add.w	r3, r7, #20
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4814      	ldr	r0, [pc, #80]	@ (8001d64 <MX_GPIO_Init+0x194>)
 8001d12:	f001 ff3f 	bl	8003b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : SERVO7_Pin SEVO5_Pin SERVO6_Pin */
  GPIO_InitStruct.Pin = SERVO7_Pin|SEVO5_Pin|SERVO6_Pin;
 8001d16:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001d1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d24:	2303      	movs	r3, #3
 8001d26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	480e      	ldr	r0, [pc, #56]	@ (8001d68 <MX_GPIO_Init+0x198>)
 8001d30:	f001 ff30 	bl	8003b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : RGB_B_Pin RGB_G_Pin */
  GPIO_InitStruct.Pin = RGB_B_Pin|RGB_G_Pin;
 8001d34:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001d3a:	2311      	movs	r3, #17
 8001d3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d42:	2300      	movs	r3, #0
 8001d44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4805      	ldr	r0, [pc, #20]	@ (8001d64 <MX_GPIO_Init+0x194>)
 8001d4e:	f001 ff21 	bl	8003b94 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001d52:	bf00      	nop
 8001d54:	3728      	adds	r7, #40	@ 0x28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40020800 	.word	0x40020800
 8001d64:	40020400 	.word	0x40020400
 8001d68:	40020000 	.word	0x40020000

08001d6c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001d72:	463b      	mov	r3, r7
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001d7e:	f001 fb19 	bl	80033b4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001d82:	2301      	movs	r3, #1
 8001d84:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001d8e:	231f      	movs	r3, #31
 8001d90:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001d92:	2387      	movs	r3, #135	@ 0x87
 8001d94:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001da2:	2301      	movs	r3, #1
 8001da4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001daa:	2300      	movs	r3, #0
 8001dac:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001dae:	463b      	mov	r3, r7
 8001db0:	4618      	mov	r0, r3
 8001db2:	f001 fb37 	bl	8003424 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001db6:	2004      	movs	r0, #4
 8001db8:	f001 fb14 	bl	80033e4 <HAL_MPU_Enable>

}
 8001dbc:	bf00      	nop
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc8:	b672      	cpsid	i
}
 8001dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dcc:	bf00      	nop
 8001dce:	e7fd      	b.n	8001dcc <Error_Handler+0x8>

08001dd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e14 <HAL_MspInit+0x44>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	4a0e      	ldr	r2, [pc, #56]	@ (8001e14 <HAL_MspInit+0x44>)
 8001ddc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001de2:	4b0c      	ldr	r3, [pc, #48]	@ (8001e14 <HAL_MspInit+0x44>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dea:	607b      	str	r3, [r7, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dee:	4b09      	ldr	r3, [pc, #36]	@ (8001e14 <HAL_MspInit+0x44>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df2:	4a08      	ldr	r2, [pc, #32]	@ (8001e14 <HAL_MspInit+0x44>)
 8001df4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001df8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dfa:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <HAL_MspInit+0x44>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	40023800 	.word	0x40023800

08001e18 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08a      	sub	sp, #40	@ 0x28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e20:	f107 0314 	add.w	r3, r7, #20
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a15      	ldr	r2, [pc, #84]	@ (8001e8c <HAL_ADC_MspInit+0x74>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d123      	bne.n	8001e82 <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e3a:	4b15      	ldr	r3, [pc, #84]	@ (8001e90 <HAL_ADC_MspInit+0x78>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3e:	4a14      	ldr	r2, [pc, #80]	@ (8001e90 <HAL_ADC_MspInit+0x78>)
 8001e40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e46:	4b12      	ldr	r3, [pc, #72]	@ (8001e90 <HAL_ADC_MspInit+0x78>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e52:	4b0f      	ldr	r3, [pc, #60]	@ (8001e90 <HAL_ADC_MspInit+0x78>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e56:	4a0e      	ldr	r2, [pc, #56]	@ (8001e90 <HAL_ADC_MspInit+0x78>)
 8001e58:	f043 0304 	orr.w	r3, r3, #4
 8001e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e90 <HAL_ADC_MspInit+0x78>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = VBAT_SENSE_Pin;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBAT_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001e76:	f107 0314 	add.w	r3, r7, #20
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4805      	ldr	r0, [pc, #20]	@ (8001e94 <HAL_ADC_MspInit+0x7c>)
 8001e7e:	f001 fe89 	bl	8003b94 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001e82:	bf00      	nop
 8001e84:	3728      	adds	r7, #40	@ 0x28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40012000 	.word	0x40012000
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40020800 	.word	0x40020800

08001e98 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b0aa      	sub	sp, #168	@ 0xa8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	2280      	movs	r2, #128	@ 0x80
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f00d fc58 	bl	800f76e <memset>
  if(hi2c->Instance==I2C1)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a21      	ldr	r2, [pc, #132]	@ (8001f48 <HAL_I2C_MspInit+0xb0>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d13b      	bne.n	8001f40 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ec8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ecc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ed2:	f107 0314 	add.w	r3, r7, #20
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f004 f92c 	bl	8006134 <HAL_RCCEx_PeriphCLKConfig>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001ee2:	f7ff ff6f 	bl	8001dc4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee6:	4b19      	ldr	r3, [pc, #100]	@ (8001f4c <HAL_I2C_MspInit+0xb4>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eea:	4a18      	ldr	r2, [pc, #96]	@ (8001f4c <HAL_I2C_MspInit+0xb4>)
 8001eec:	f043 0302 	orr.w	r3, r3, #2
 8001ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ef2:	4b16      	ldr	r3, [pc, #88]	@ (8001f4c <HAL_I2C_MspInit+0xb4>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001efe:	23c0      	movs	r3, #192	@ 0xc0
 8001f00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f04:	2312      	movs	r3, #18
 8001f06:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f10:	2303      	movs	r3, #3
 8001f12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f16:	2304      	movs	r3, #4
 8001f18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001f20:	4619      	mov	r1, r3
 8001f22:	480b      	ldr	r0, [pc, #44]	@ (8001f50 <HAL_I2C_MspInit+0xb8>)
 8001f24:	f001 fe36 	bl	8003b94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f28:	4b08      	ldr	r3, [pc, #32]	@ (8001f4c <HAL_I2C_MspInit+0xb4>)
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2c:	4a07      	ldr	r2, [pc, #28]	@ (8001f4c <HAL_I2C_MspInit+0xb4>)
 8001f2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f32:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f34:	4b05      	ldr	r3, [pc, #20]	@ (8001f4c <HAL_I2C_MspInit+0xb4>)
 8001f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f40:	bf00      	nop
 8001f42:	37a8      	adds	r7, #168	@ 0xa8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40005400 	.word	0x40005400
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40020400 	.word	0x40020400

08001f54 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b0aa      	sub	sp, #168	@ 0xa8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f6c:	f107 0314 	add.w	r3, r7, #20
 8001f70:	2280      	movs	r2, #128	@ 0x80
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f00d fbfa 	bl	800f76e <memset>
  if(hsd->Instance==SDMMC1)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a34      	ldr	r2, [pc, #208]	@ (8002050 <HAL_SD_MspInit+0xfc>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d161      	bne.n	8002048 <HAL_SD_MspInit+0xf4>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8001f84:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 8001f88:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f96:	f107 0314 	add.w	r3, r7, #20
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f004 f8ca 	bl	8006134 <HAL_RCCEx_PeriphCLKConfig>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8001fa6:	f7ff ff0d 	bl	8001dc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001faa:	4b2a      	ldr	r3, [pc, #168]	@ (8002054 <HAL_SD_MspInit+0x100>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fae:	4a29      	ldr	r2, [pc, #164]	@ (8002054 <HAL_SD_MspInit+0x100>)
 8001fb0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001fb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fb6:	4b27      	ldr	r3, [pc, #156]	@ (8002054 <HAL_SD_MspInit+0x100>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc2:	4b24      	ldr	r3, [pc, #144]	@ (8002054 <HAL_SD_MspInit+0x100>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	4a23      	ldr	r2, [pc, #140]	@ (8002054 <HAL_SD_MspInit+0x100>)
 8001fc8:	f043 0304 	orr.w	r3, r3, #4
 8001fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fce:	4b21      	ldr	r3, [pc, #132]	@ (8002054 <HAL_SD_MspInit+0x100>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fda:	4b1e      	ldr	r3, [pc, #120]	@ (8002054 <HAL_SD_MspInit+0x100>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	4a1d      	ldr	r2, [pc, #116]	@ (8002054 <HAL_SD_MspInit+0x100>)
 8001fe0:	f043 0308 	orr.w	r3, r3, #8
 8001fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8002054 <HAL_SD_MspInit+0x100>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001ff2:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001ff6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002006:	2303      	movs	r3, #3
 8002008:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800200c:	230c      	movs	r3, #12
 800200e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002012:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002016:	4619      	mov	r1, r3
 8002018:	480f      	ldr	r0, [pc, #60]	@ (8002058 <HAL_SD_MspInit+0x104>)
 800201a:	f001 fdbb 	bl	8003b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800201e:	2304      	movs	r3, #4
 8002020:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002024:	2302      	movs	r3, #2
 8002026:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002030:	2303      	movs	r3, #3
 8002032:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002036:	230c      	movs	r3, #12
 8002038:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800203c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002040:	4619      	mov	r1, r3
 8002042:	4806      	ldr	r0, [pc, #24]	@ (800205c <HAL_SD_MspInit+0x108>)
 8002044:	f001 fda6 	bl	8003b94 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8002048:	bf00      	nop
 800204a:	37a8      	adds	r7, #168	@ 0xa8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40012c00 	.word	0x40012c00
 8002054:	40023800 	.word	0x40023800
 8002058:	40020800 	.word	0x40020800
 800205c:	40020c00 	.word	0x40020c00

08002060 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08c      	sub	sp, #48	@ 0x30
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002068:	f107 031c 	add.w	r3, r7, #28
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a3c      	ldr	r2, [pc, #240]	@ (8002170 <HAL_SPI_MspInit+0x110>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d128      	bne.n	80020d4 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002082:	4b3c      	ldr	r3, [pc, #240]	@ (8002174 <HAL_SPI_MspInit+0x114>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002086:	4a3b      	ldr	r2, [pc, #236]	@ (8002174 <HAL_SPI_MspInit+0x114>)
 8002088:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800208c:	6453      	str	r3, [r2, #68]	@ 0x44
 800208e:	4b39      	ldr	r3, [pc, #228]	@ (8002174 <HAL_SPI_MspInit+0x114>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002092:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002096:	61bb      	str	r3, [r7, #24]
 8002098:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209a:	4b36      	ldr	r3, [pc, #216]	@ (8002174 <HAL_SPI_MspInit+0x114>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209e:	4a35      	ldr	r2, [pc, #212]	@ (8002174 <HAL_SPI_MspInit+0x114>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020a6:	4b33      	ldr	r3, [pc, #204]	@ (8002174 <HAL_SPI_MspInit+0x114>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80020b2:	23e0      	movs	r3, #224	@ 0xe0
 80020b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b6:	2302      	movs	r3, #2
 80020b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020be:	2303      	movs	r3, #3
 80020c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020c2:	2305      	movs	r3, #5
 80020c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c6:	f107 031c 	add.w	r3, r7, #28
 80020ca:	4619      	mov	r1, r3
 80020cc:	482a      	ldr	r0, [pc, #168]	@ (8002178 <HAL_SPI_MspInit+0x118>)
 80020ce:	f001 fd61 	bl	8003b94 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 80020d2:	e049      	b.n	8002168 <HAL_SPI_MspInit+0x108>
  else if(hspi->Instance==SPI2)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a28      	ldr	r2, [pc, #160]	@ (800217c <HAL_SPI_MspInit+0x11c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d144      	bne.n	8002168 <HAL_SPI_MspInit+0x108>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020de:	4b25      	ldr	r3, [pc, #148]	@ (8002174 <HAL_SPI_MspInit+0x114>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	4a24      	ldr	r2, [pc, #144]	@ (8002174 <HAL_SPI_MspInit+0x114>)
 80020e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ea:	4b22      	ldr	r3, [pc, #136]	@ (8002174 <HAL_SPI_MspInit+0x114>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002174 <HAL_SPI_MspInit+0x114>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002174 <HAL_SPI_MspInit+0x114>)
 80020fc:	f043 0304 	orr.w	r3, r3, #4
 8002100:	6313      	str	r3, [r2, #48]	@ 0x30
 8002102:	4b1c      	ldr	r3, [pc, #112]	@ (8002174 <HAL_SPI_MspInit+0x114>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800210e:	4b19      	ldr	r3, [pc, #100]	@ (8002174 <HAL_SPI_MspInit+0x114>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002112:	4a18      	ldr	r2, [pc, #96]	@ (8002174 <HAL_SPI_MspInit+0x114>)
 8002114:	f043 0302 	orr.w	r3, r3, #2
 8002118:	6313      	str	r3, [r2, #48]	@ 0x30
 800211a:	4b16      	ldr	r3, [pc, #88]	@ (8002174 <HAL_SPI_MspInit+0x114>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	60bb      	str	r3, [r7, #8]
 8002124:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002126:	2306      	movs	r3, #6
 8002128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212a:	2302      	movs	r3, #2
 800212c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002132:	2303      	movs	r3, #3
 8002134:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002136:	2305      	movs	r3, #5
 8002138:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800213a:	f107 031c 	add.w	r3, r7, #28
 800213e:	4619      	mov	r1, r3
 8002140:	480f      	ldr	r0, [pc, #60]	@ (8002180 <HAL_SPI_MspInit+0x120>)
 8002142:	f001 fd27 	bl	8003b94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002146:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800214a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002154:	2303      	movs	r3, #3
 8002156:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002158:	2305      	movs	r3, #5
 800215a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215c:	f107 031c 	add.w	r3, r7, #28
 8002160:	4619      	mov	r1, r3
 8002162:	4808      	ldr	r0, [pc, #32]	@ (8002184 <HAL_SPI_MspInit+0x124>)
 8002164:	f001 fd16 	bl	8003b94 <HAL_GPIO_Init>
}
 8002168:	bf00      	nop
 800216a:	3730      	adds	r7, #48	@ 0x30
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40013000 	.word	0x40013000
 8002174:	40023800 	.word	0x40023800
 8002178:	40020000 	.word	0x40020000
 800217c:	40003800 	.word	0x40003800
 8002180:	40020800 	.word	0x40020800
 8002184:	40020400 	.word	0x40020400

08002188 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a22      	ldr	r2, [pc, #136]	@ (8002220 <HAL_TIM_PWM_MspInit+0x98>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d13d      	bne.n	8002216 <HAL_TIM_PWM_MspInit+0x8e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800219a:	4b22      	ldr	r3, [pc, #136]	@ (8002224 <HAL_TIM_PWM_MspInit+0x9c>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219e:	4a21      	ldr	r2, [pc, #132]	@ (8002224 <HAL_TIM_PWM_MspInit+0x9c>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80021a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002224 <HAL_TIM_PWM_MspInit+0x9c>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream3;
 80021b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002228 <HAL_TIM_PWM_MspInit+0xa0>)
 80021b4:	4a1d      	ldr	r2, [pc, #116]	@ (800222c <HAL_TIM_PWM_MspInit+0xa4>)
 80021b6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80021b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002228 <HAL_TIM_PWM_MspInit+0xa0>)
 80021ba:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80021be:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021c0:	4b19      	ldr	r3, [pc, #100]	@ (8002228 <HAL_TIM_PWM_MspInit+0xa0>)
 80021c2:	2240      	movs	r2, #64	@ 0x40
 80021c4:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021c6:	4b18      	ldr	r3, [pc, #96]	@ (8002228 <HAL_TIM_PWM_MspInit+0xa0>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80021cc:	4b16      	ldr	r3, [pc, #88]	@ (8002228 <HAL_TIM_PWM_MspInit+0xa0>)
 80021ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021d2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021d4:	4b14      	ldr	r3, [pc, #80]	@ (8002228 <HAL_TIM_PWM_MspInit+0xa0>)
 80021d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80021da:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021dc:	4b12      	ldr	r3, [pc, #72]	@ (8002228 <HAL_TIM_PWM_MspInit+0xa0>)
 80021de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021e2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 80021e4:	4b10      	ldr	r3, [pc, #64]	@ (8002228 <HAL_TIM_PWM_MspInit+0xa0>)
 80021e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021ea:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80021ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002228 <HAL_TIM_PWM_MspInit+0xa0>)
 80021ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021f2:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002228 <HAL_TIM_PWM_MspInit+0xa0>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80021fa:	480b      	ldr	r0, [pc, #44]	@ (8002228 <HAL_TIM_PWM_MspInit+0xa0>)
 80021fc:	f001 f952 	bl	80034a4 <HAL_DMA_Init>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 8002206:	f7ff fddd 	bl	8001dc4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a06      	ldr	r2, [pc, #24]	@ (8002228 <HAL_TIM_PWM_MspInit+0xa0>)
 800220e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002210:	4a05      	ldr	r2, [pc, #20]	@ (8002228 <HAL_TIM_PWM_MspInit+0xa0>)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002216:	bf00      	nop
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40010000 	.word	0x40010000
 8002224:	40023800 	.word	0x40023800
 8002228:	20000620 	.word	0x20000620
 800222c:	40026458 	.word	0x40026458

08002230 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002240:	d10c      	bne.n	800225c <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002242:	4b12      	ldr	r3, [pc, #72]	@ (800228c <HAL_TIM_Base_MspInit+0x5c>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002246:	4a11      	ldr	r2, [pc, #68]	@ (800228c <HAL_TIM_Base_MspInit+0x5c>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	6413      	str	r3, [r2, #64]	@ 0x40
 800224e:	4b0f      	ldr	r3, [pc, #60]	@ (800228c <HAL_TIM_Base_MspInit+0x5c>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 800225a:	e010      	b.n	800227e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM6)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a0b      	ldr	r2, [pc, #44]	@ (8002290 <HAL_TIM_Base_MspInit+0x60>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d10b      	bne.n	800227e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002266:	4b09      	ldr	r3, [pc, #36]	@ (800228c <HAL_TIM_Base_MspInit+0x5c>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226a:	4a08      	ldr	r2, [pc, #32]	@ (800228c <HAL_TIM_Base_MspInit+0x5c>)
 800226c:	f043 0310 	orr.w	r3, r3, #16
 8002270:	6413      	str	r3, [r2, #64]	@ 0x40
 8002272:	4b06      	ldr	r3, [pc, #24]	@ (800228c <HAL_TIM_Base_MspInit+0x5c>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002276:	f003 0310 	and.w	r3, r3, #16
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	68bb      	ldr	r3, [r7, #8]
}
 800227e:	bf00      	nop
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40023800 	.word	0x40023800
 8002290:	40001000 	.word	0x40001000

08002294 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b088      	sub	sp, #32
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229c:	f107 030c 	add.w	r3, r7, #12
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a11      	ldr	r2, [pc, #68]	@ (80022f8 <HAL_TIM_MspPostInit+0x64>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d11c      	bne.n	80022f0 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b6:	4b11      	ldr	r3, [pc, #68]	@ (80022fc <HAL_TIM_MspPostInit+0x68>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	4a10      	ldr	r2, [pc, #64]	@ (80022fc <HAL_TIM_MspPostInit+0x68>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c2:	4b0e      	ldr	r3, [pc, #56]	@ (80022fc <HAL_TIM_MspPostInit+0x68>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DSHOT_PIN_Pin;
 80022ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d4:	2302      	movs	r3, #2
 80022d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022dc:	2303      	movs	r3, #3
 80022de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022e0:	2301      	movs	r3, #1
 80022e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DSHOT_PIN_GPIO_Port, &GPIO_InitStruct);
 80022e4:	f107 030c 	add.w	r3, r7, #12
 80022e8:	4619      	mov	r1, r3
 80022ea:	4805      	ldr	r0, [pc, #20]	@ (8002300 <HAL_TIM_MspPostInit+0x6c>)
 80022ec:	f001 fc52 	bl	8003b94 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80022f0:	bf00      	nop
 80022f2:	3720      	adds	r7, #32
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40010000 	.word	0x40010000
 80022fc:	40023800 	.word	0x40023800
 8002300:	40020000 	.word	0x40020000

08002304 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b0b2      	sub	sp, #200	@ 0xc8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800231c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002320:	2280      	movs	r2, #128	@ 0x80
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f00d fa22 	bl	800f76e <memset>
  if(huart->Instance==UART4)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a89      	ldr	r2, [pc, #548]	@ (8002554 <HAL_UART_MspInit+0x250>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d16b      	bne.n	800240c <HAL_UART_MspInit+0x108>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002334:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002338:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800233a:	2300      	movs	r3, #0
 800233c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800233e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002342:	4618      	mov	r0, r3
 8002344:	f003 fef6 	bl	8006134 <HAL_RCCEx_PeriphCLKConfig>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800234e:	f7ff fd39 	bl	8001dc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002352:	4b81      	ldr	r3, [pc, #516]	@ (8002558 <HAL_UART_MspInit+0x254>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002356:	4a80      	ldr	r2, [pc, #512]	@ (8002558 <HAL_UART_MspInit+0x254>)
 8002358:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800235c:	6413      	str	r3, [r2, #64]	@ 0x40
 800235e:	4b7e      	ldr	r3, [pc, #504]	@ (8002558 <HAL_UART_MspInit+0x254>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002366:	633b      	str	r3, [r7, #48]	@ 0x30
 8002368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800236a:	4b7b      	ldr	r3, [pc, #492]	@ (8002558 <HAL_UART_MspInit+0x254>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	4a7a      	ldr	r2, [pc, #488]	@ (8002558 <HAL_UART_MspInit+0x254>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	6313      	str	r3, [r2, #48]	@ 0x30
 8002376:	4b78      	ldr	r3, [pc, #480]	@ (8002558 <HAL_UART_MspInit+0x254>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002382:	2303      	movs	r3, #3
 8002384:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002388:	2302      	movs	r3, #2
 800238a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002394:	2303      	movs	r3, #3
 8002396:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800239a:	2308      	movs	r3, #8
 800239c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80023a4:	4619      	mov	r1, r3
 80023a6:	486d      	ldr	r0, [pc, #436]	@ (800255c <HAL_UART_MspInit+0x258>)
 80023a8:	f001 fbf4 	bl	8003b94 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80023ac:	4b6c      	ldr	r3, [pc, #432]	@ (8002560 <HAL_UART_MspInit+0x25c>)
 80023ae:	4a6d      	ldr	r2, [pc, #436]	@ (8002564 <HAL_UART_MspInit+0x260>)
 80023b0:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80023b2:	4b6b      	ldr	r3, [pc, #428]	@ (8002560 <HAL_UART_MspInit+0x25c>)
 80023b4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80023b8:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023ba:	4b69      	ldr	r3, [pc, #420]	@ (8002560 <HAL_UART_MspInit+0x25c>)
 80023bc:	2200      	movs	r2, #0
 80023be:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023c0:	4b67      	ldr	r3, [pc, #412]	@ (8002560 <HAL_UART_MspInit+0x25c>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023c6:	4b66      	ldr	r3, [pc, #408]	@ (8002560 <HAL_UART_MspInit+0x25c>)
 80023c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023cc:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023ce:	4b64      	ldr	r3, [pc, #400]	@ (8002560 <HAL_UART_MspInit+0x25c>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023d4:	4b62      	ldr	r3, [pc, #392]	@ (8002560 <HAL_UART_MspInit+0x25c>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80023da:	4b61      	ldr	r3, [pc, #388]	@ (8002560 <HAL_UART_MspInit+0x25c>)
 80023dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023e0:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002560 <HAL_UART_MspInit+0x25c>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023e8:	4b5d      	ldr	r3, [pc, #372]	@ (8002560 <HAL_UART_MspInit+0x25c>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80023ee:	485c      	ldr	r0, [pc, #368]	@ (8002560 <HAL_UART_MspInit+0x25c>)
 80023f0:	f001 f858 	bl	80034a4 <HAL_DMA_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 80023fa:	f7ff fce3 	bl	8001dc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a57      	ldr	r2, [pc, #348]	@ (8002560 <HAL_UART_MspInit+0x25c>)
 8002402:	675a      	str	r2, [r3, #116]	@ 0x74
 8002404:	4a56      	ldr	r2, [pc, #344]	@ (8002560 <HAL_UART_MspInit+0x25c>)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 800240a:	e20a      	b.n	8002822 <HAL_UART_MspInit+0x51e>
  else if(huart->Instance==USART1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a55      	ldr	r2, [pc, #340]	@ (8002568 <HAL_UART_MspInit+0x264>)
 8002412:	4293      	cmp	r3, r2
 8002414:	f040 80b2 	bne.w	800257c <HAL_UART_MspInit+0x278>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002418:	2340      	movs	r3, #64	@ 0x40
 800241a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800241c:	2300      	movs	r3, #0
 800241e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002420:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002424:	4618      	mov	r0, r3
 8002426:	f003 fe85 	bl	8006134 <HAL_RCCEx_PeriphCLKConfig>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8002430:	f7ff fcc8 	bl	8001dc4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002434:	4b48      	ldr	r3, [pc, #288]	@ (8002558 <HAL_UART_MspInit+0x254>)
 8002436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002438:	4a47      	ldr	r2, [pc, #284]	@ (8002558 <HAL_UART_MspInit+0x254>)
 800243a:	f043 0310 	orr.w	r3, r3, #16
 800243e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002440:	4b45      	ldr	r3, [pc, #276]	@ (8002558 <HAL_UART_MspInit+0x254>)
 8002442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002444:	f003 0310 	and.w	r3, r3, #16
 8002448:	62bb      	str	r3, [r7, #40]	@ 0x28
 800244a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244c:	4b42      	ldr	r3, [pc, #264]	@ (8002558 <HAL_UART_MspInit+0x254>)
 800244e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002450:	4a41      	ldr	r2, [pc, #260]	@ (8002558 <HAL_UART_MspInit+0x254>)
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	6313      	str	r3, [r2, #48]	@ 0x30
 8002458:	4b3f      	ldr	r3, [pc, #252]	@ (8002558 <HAL_UART_MspInit+0x254>)
 800245a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	627b      	str	r3, [r7, #36]	@ 0x24
 8002462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002464:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002468:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246c:	2302      	movs	r3, #2
 800246e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002478:	2303      	movs	r3, #3
 800247a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800247e:	2307      	movs	r3, #7
 8002480:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002484:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002488:	4619      	mov	r1, r3
 800248a:	4834      	ldr	r0, [pc, #208]	@ (800255c <HAL_UART_MspInit+0x258>)
 800248c:	f001 fb82 	bl	8003b94 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002490:	4b36      	ldr	r3, [pc, #216]	@ (800256c <HAL_UART_MspInit+0x268>)
 8002492:	4a37      	ldr	r2, [pc, #220]	@ (8002570 <HAL_UART_MspInit+0x26c>)
 8002494:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002496:	4b35      	ldr	r3, [pc, #212]	@ (800256c <HAL_UART_MspInit+0x268>)
 8002498:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800249c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800249e:	4b33      	ldr	r3, [pc, #204]	@ (800256c <HAL_UART_MspInit+0x268>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024a4:	4b31      	ldr	r3, [pc, #196]	@ (800256c <HAL_UART_MspInit+0x268>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024aa:	4b30      	ldr	r3, [pc, #192]	@ (800256c <HAL_UART_MspInit+0x268>)
 80024ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024b0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024b2:	4b2e      	ldr	r3, [pc, #184]	@ (800256c <HAL_UART_MspInit+0x268>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024b8:	4b2c      	ldr	r3, [pc, #176]	@ (800256c <HAL_UART_MspInit+0x268>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80024be:	4b2b      	ldr	r3, [pc, #172]	@ (800256c <HAL_UART_MspInit+0x268>)
 80024c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024c4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80024c6:	4b29      	ldr	r3, [pc, #164]	@ (800256c <HAL_UART_MspInit+0x268>)
 80024c8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80024cc:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024ce:	4b27      	ldr	r3, [pc, #156]	@ (800256c <HAL_UART_MspInit+0x268>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80024d4:	4825      	ldr	r0, [pc, #148]	@ (800256c <HAL_UART_MspInit+0x268>)
 80024d6:	f000 ffe5 	bl	80034a4 <HAL_DMA_Init>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 80024e0:	f7ff fc70 	bl	8001dc4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a21      	ldr	r2, [pc, #132]	@ (800256c <HAL_UART_MspInit+0x268>)
 80024e8:	675a      	str	r2, [r3, #116]	@ 0x74
 80024ea:	4a20      	ldr	r2, [pc, #128]	@ (800256c <HAL_UART_MspInit+0x268>)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80024f0:	4b20      	ldr	r3, [pc, #128]	@ (8002574 <HAL_UART_MspInit+0x270>)
 80024f2:	4a21      	ldr	r2, [pc, #132]	@ (8002578 <HAL_UART_MspInit+0x274>)
 80024f4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80024f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002574 <HAL_UART_MspInit+0x270>)
 80024f8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80024fc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002574 <HAL_UART_MspInit+0x270>)
 8002500:	2240      	movs	r2, #64	@ 0x40
 8002502:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002504:	4b1b      	ldr	r3, [pc, #108]	@ (8002574 <HAL_UART_MspInit+0x270>)
 8002506:	2200      	movs	r2, #0
 8002508:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800250a:	4b1a      	ldr	r3, [pc, #104]	@ (8002574 <HAL_UART_MspInit+0x270>)
 800250c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002510:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002512:	4b18      	ldr	r3, [pc, #96]	@ (8002574 <HAL_UART_MspInit+0x270>)
 8002514:	2200      	movs	r2, #0
 8002516:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002518:	4b16      	ldr	r3, [pc, #88]	@ (8002574 <HAL_UART_MspInit+0x270>)
 800251a:	2200      	movs	r2, #0
 800251c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 800251e:	4b15      	ldr	r3, [pc, #84]	@ (8002574 <HAL_UART_MspInit+0x270>)
 8002520:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002524:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002526:	4b13      	ldr	r3, [pc, #76]	@ (8002574 <HAL_UART_MspInit+0x270>)
 8002528:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800252c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800252e:	4b11      	ldr	r3, [pc, #68]	@ (8002574 <HAL_UART_MspInit+0x270>)
 8002530:	2200      	movs	r2, #0
 8002532:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002534:	480f      	ldr	r0, [pc, #60]	@ (8002574 <HAL_UART_MspInit+0x270>)
 8002536:	f000 ffb5 	bl	80034a4 <HAL_DMA_Init>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_UART_MspInit+0x240>
      Error_Handler();
 8002540:	f7ff fc40 	bl	8001dc4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a0b      	ldr	r2, [pc, #44]	@ (8002574 <HAL_UART_MspInit+0x270>)
 8002548:	671a      	str	r2, [r3, #112]	@ 0x70
 800254a:	4a0a      	ldr	r2, [pc, #40]	@ (8002574 <HAL_UART_MspInit+0x270>)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002550:	e167      	b.n	8002822 <HAL_UART_MspInit+0x51e>
 8002552:	bf00      	nop
 8002554:	40004c00 	.word	0x40004c00
 8002558:	40023800 	.word	0x40023800
 800255c:	40020000 	.word	0x40020000
 8002560:	20000928 	.word	0x20000928
 8002564:	40026040 	.word	0x40026040
 8002568:	40011000 	.word	0x40011000
 800256c:	20000988 	.word	0x20000988
 8002570:	40026440 	.word	0x40026440
 8002574:	200009e8 	.word	0x200009e8
 8002578:	400264b8 	.word	0x400264b8
  else if(huart->Instance==USART2)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4aaa      	ldr	r2, [pc, #680]	@ (800282c <HAL_UART_MspInit+0x528>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d16a      	bne.n	800265c <HAL_UART_MspInit+0x358>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002586:	2380      	movs	r3, #128	@ 0x80
 8002588:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800258a:	2300      	movs	r3, #0
 800258c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800258e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002592:	4618      	mov	r0, r3
 8002594:	f003 fdce 	bl	8006134 <HAL_RCCEx_PeriphCLKConfig>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_UART_MspInit+0x29e>
      Error_Handler();
 800259e:	f7ff fc11 	bl	8001dc4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80025a2:	4ba3      	ldr	r3, [pc, #652]	@ (8002830 <HAL_UART_MspInit+0x52c>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a6:	4aa2      	ldr	r2, [pc, #648]	@ (8002830 <HAL_UART_MspInit+0x52c>)
 80025a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ae:	4ba0      	ldr	r3, [pc, #640]	@ (8002830 <HAL_UART_MspInit+0x52c>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b6:	623b      	str	r3, [r7, #32]
 80025b8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ba:	4b9d      	ldr	r3, [pc, #628]	@ (8002830 <HAL_UART_MspInit+0x52c>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025be:	4a9c      	ldr	r2, [pc, #624]	@ (8002830 <HAL_UART_MspInit+0x52c>)
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025c6:	4b9a      	ldr	r3, [pc, #616]	@ (8002830 <HAL_UART_MspInit+0x52c>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	61fb      	str	r3, [r7, #28]
 80025d0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025d2:	230c      	movs	r3, #12
 80025d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d8:	2302      	movs	r3, #2
 80025da:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e4:	2303      	movs	r3, #3
 80025e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025ea:	2307      	movs	r3, #7
 80025ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80025f4:	4619      	mov	r1, r3
 80025f6:	488f      	ldr	r0, [pc, #572]	@ (8002834 <HAL_UART_MspInit+0x530>)
 80025f8:	f001 facc 	bl	8003b94 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80025fc:	4b8e      	ldr	r3, [pc, #568]	@ (8002838 <HAL_UART_MspInit+0x534>)
 80025fe:	4a8f      	ldr	r2, [pc, #572]	@ (800283c <HAL_UART_MspInit+0x538>)
 8002600:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002602:	4b8d      	ldr	r3, [pc, #564]	@ (8002838 <HAL_UART_MspInit+0x534>)
 8002604:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002608:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800260a:	4b8b      	ldr	r3, [pc, #556]	@ (8002838 <HAL_UART_MspInit+0x534>)
 800260c:	2200      	movs	r2, #0
 800260e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002610:	4b89      	ldr	r3, [pc, #548]	@ (8002838 <HAL_UART_MspInit+0x534>)
 8002612:	2200      	movs	r2, #0
 8002614:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002616:	4b88      	ldr	r3, [pc, #544]	@ (8002838 <HAL_UART_MspInit+0x534>)
 8002618:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800261c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800261e:	4b86      	ldr	r3, [pc, #536]	@ (8002838 <HAL_UART_MspInit+0x534>)
 8002620:	2200      	movs	r2, #0
 8002622:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002624:	4b84      	ldr	r3, [pc, #528]	@ (8002838 <HAL_UART_MspInit+0x534>)
 8002626:	2200      	movs	r2, #0
 8002628:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800262a:	4b83      	ldr	r3, [pc, #524]	@ (8002838 <HAL_UART_MspInit+0x534>)
 800262c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002630:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002632:	4b81      	ldr	r3, [pc, #516]	@ (8002838 <HAL_UART_MspInit+0x534>)
 8002634:	2200      	movs	r2, #0
 8002636:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002638:	4b7f      	ldr	r3, [pc, #508]	@ (8002838 <HAL_UART_MspInit+0x534>)
 800263a:	2200      	movs	r2, #0
 800263c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800263e:	487e      	ldr	r0, [pc, #504]	@ (8002838 <HAL_UART_MspInit+0x534>)
 8002640:	f000 ff30 	bl	80034a4 <HAL_DMA_Init>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_UART_MspInit+0x34a>
      Error_Handler();
 800264a:	f7ff fbbb 	bl	8001dc4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a79      	ldr	r2, [pc, #484]	@ (8002838 <HAL_UART_MspInit+0x534>)
 8002652:	675a      	str	r2, [r3, #116]	@ 0x74
 8002654:	4a78      	ldr	r2, [pc, #480]	@ (8002838 <HAL_UART_MspInit+0x534>)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800265a:	e0e2      	b.n	8002822 <HAL_UART_MspInit+0x51e>
  else if(huart->Instance==USART3)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a77      	ldr	r2, [pc, #476]	@ (8002840 <HAL_UART_MspInit+0x53c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d16c      	bne.n	8002740 <HAL_UART_MspInit+0x43c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002666:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800266a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800266c:	2300      	movs	r3, #0
 800266e:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002670:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002674:	4618      	mov	r0, r3
 8002676:	f003 fd5d 	bl	8006134 <HAL_RCCEx_PeriphCLKConfig>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <HAL_UART_MspInit+0x380>
      Error_Handler();
 8002680:	f7ff fba0 	bl	8001dc4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002684:	4b6a      	ldr	r3, [pc, #424]	@ (8002830 <HAL_UART_MspInit+0x52c>)
 8002686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002688:	4a69      	ldr	r2, [pc, #420]	@ (8002830 <HAL_UART_MspInit+0x52c>)
 800268a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800268e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002690:	4b67      	ldr	r3, [pc, #412]	@ (8002830 <HAL_UART_MspInit+0x52c>)
 8002692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002694:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002698:	61bb      	str	r3, [r7, #24]
 800269a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800269c:	4b64      	ldr	r3, [pc, #400]	@ (8002830 <HAL_UART_MspInit+0x52c>)
 800269e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a0:	4a63      	ldr	r2, [pc, #396]	@ (8002830 <HAL_UART_MspInit+0x52c>)
 80026a2:	f043 0302 	orr.w	r3, r3, #2
 80026a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80026a8:	4b61      	ldr	r3, [pc, #388]	@ (8002830 <HAL_UART_MspInit+0x52c>)
 80026aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80026b4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80026b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026bc:	2302      	movs	r3, #2
 80026be:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c8:	2303      	movs	r3, #3
 80026ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80026ce:	2307      	movs	r3, #7
 80026d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d4:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80026d8:	4619      	mov	r1, r3
 80026da:	485a      	ldr	r0, [pc, #360]	@ (8002844 <HAL_UART_MspInit+0x540>)
 80026dc:	f001 fa5a 	bl	8003b94 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80026e0:	4b59      	ldr	r3, [pc, #356]	@ (8002848 <HAL_UART_MspInit+0x544>)
 80026e2:	4a5a      	ldr	r2, [pc, #360]	@ (800284c <HAL_UART_MspInit+0x548>)
 80026e4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80026e6:	4b58      	ldr	r3, [pc, #352]	@ (8002848 <HAL_UART_MspInit+0x544>)
 80026e8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80026ec:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026ee:	4b56      	ldr	r3, [pc, #344]	@ (8002848 <HAL_UART_MspInit+0x544>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026f4:	4b54      	ldr	r3, [pc, #336]	@ (8002848 <HAL_UART_MspInit+0x544>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026fa:	4b53      	ldr	r3, [pc, #332]	@ (8002848 <HAL_UART_MspInit+0x544>)
 80026fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002700:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002702:	4b51      	ldr	r3, [pc, #324]	@ (8002848 <HAL_UART_MspInit+0x544>)
 8002704:	2200      	movs	r2, #0
 8002706:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002708:	4b4f      	ldr	r3, [pc, #316]	@ (8002848 <HAL_UART_MspInit+0x544>)
 800270a:	2200      	movs	r2, #0
 800270c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800270e:	4b4e      	ldr	r3, [pc, #312]	@ (8002848 <HAL_UART_MspInit+0x544>)
 8002710:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002714:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002716:	4b4c      	ldr	r3, [pc, #304]	@ (8002848 <HAL_UART_MspInit+0x544>)
 8002718:	2200      	movs	r2, #0
 800271a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800271c:	4b4a      	ldr	r3, [pc, #296]	@ (8002848 <HAL_UART_MspInit+0x544>)
 800271e:	2200      	movs	r2, #0
 8002720:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002722:	4849      	ldr	r0, [pc, #292]	@ (8002848 <HAL_UART_MspInit+0x544>)
 8002724:	f000 febe 	bl	80034a4 <HAL_DMA_Init>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_UART_MspInit+0x42e>
      Error_Handler();
 800272e:	f7ff fb49 	bl	8001dc4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a44      	ldr	r2, [pc, #272]	@ (8002848 <HAL_UART_MspInit+0x544>)
 8002736:	675a      	str	r2, [r3, #116]	@ 0x74
 8002738:	4a43      	ldr	r2, [pc, #268]	@ (8002848 <HAL_UART_MspInit+0x544>)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800273e:	e070      	b.n	8002822 <HAL_UART_MspInit+0x51e>
  else if(huart->Instance==USART6)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a42      	ldr	r2, [pc, #264]	@ (8002850 <HAL_UART_MspInit+0x54c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d16b      	bne.n	8002822 <HAL_UART_MspInit+0x51e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800274a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800274e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002750:	2300      	movs	r3, #0
 8002752:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002756:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800275a:	4618      	mov	r0, r3
 800275c:	f003 fcea 	bl	8006134 <HAL_RCCEx_PeriphCLKConfig>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_UART_MspInit+0x466>
      Error_Handler();
 8002766:	f7ff fb2d 	bl	8001dc4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800276a:	4b31      	ldr	r3, [pc, #196]	@ (8002830 <HAL_UART_MspInit+0x52c>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276e:	4a30      	ldr	r2, [pc, #192]	@ (8002830 <HAL_UART_MspInit+0x52c>)
 8002770:	f043 0320 	orr.w	r3, r3, #32
 8002774:	6453      	str	r3, [r2, #68]	@ 0x44
 8002776:	4b2e      	ldr	r3, [pc, #184]	@ (8002830 <HAL_UART_MspInit+0x52c>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277a:	f003 0320 	and.w	r3, r3, #32
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002782:	4b2b      	ldr	r3, [pc, #172]	@ (8002830 <HAL_UART_MspInit+0x52c>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002786:	4a2a      	ldr	r2, [pc, #168]	@ (8002830 <HAL_UART_MspInit+0x52c>)
 8002788:	f043 0304 	orr.w	r3, r3, #4
 800278c:	6313      	str	r3, [r2, #48]	@ 0x30
 800278e:	4b28      	ldr	r3, [pc, #160]	@ (8002830 <HAL_UART_MspInit+0x52c>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800279a:	23c0      	movs	r3, #192	@ 0xc0
 800279c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a0:	2302      	movs	r3, #2
 80027a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ac:	2303      	movs	r3, #3
 80027ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80027b2:	2308      	movs	r3, #8
 80027b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027b8:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80027bc:	4619      	mov	r1, r3
 80027be:	4825      	ldr	r0, [pc, #148]	@ (8002854 <HAL_UART_MspInit+0x550>)
 80027c0:	f001 f9e8 	bl	8003b94 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80027c4:	4b24      	ldr	r3, [pc, #144]	@ (8002858 <HAL_UART_MspInit+0x554>)
 80027c6:	4a25      	ldr	r2, [pc, #148]	@ (800285c <HAL_UART_MspInit+0x558>)
 80027c8:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80027ca:	4b23      	ldr	r3, [pc, #140]	@ (8002858 <HAL_UART_MspInit+0x554>)
 80027cc:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80027d0:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027d2:	4b21      	ldr	r3, [pc, #132]	@ (8002858 <HAL_UART_MspInit+0x554>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002858 <HAL_UART_MspInit+0x554>)
 80027da:	2200      	movs	r2, #0
 80027dc:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027de:	4b1e      	ldr	r3, [pc, #120]	@ (8002858 <HAL_UART_MspInit+0x554>)
 80027e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027e4:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002858 <HAL_UART_MspInit+0x554>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002858 <HAL_UART_MspInit+0x554>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80027f2:	4b19      	ldr	r3, [pc, #100]	@ (8002858 <HAL_UART_MspInit+0x554>)
 80027f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027f8:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027fa:	4b17      	ldr	r3, [pc, #92]	@ (8002858 <HAL_UART_MspInit+0x554>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002800:	4b15      	ldr	r3, [pc, #84]	@ (8002858 <HAL_UART_MspInit+0x554>)
 8002802:	2200      	movs	r2, #0
 8002804:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002806:	4814      	ldr	r0, [pc, #80]	@ (8002858 <HAL_UART_MspInit+0x554>)
 8002808:	f000 fe4c 	bl	80034a4 <HAL_DMA_Init>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_UART_MspInit+0x512>
      Error_Handler();
 8002812:	f7ff fad7 	bl	8001dc4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a0f      	ldr	r2, [pc, #60]	@ (8002858 <HAL_UART_MspInit+0x554>)
 800281a:	675a      	str	r2, [r3, #116]	@ 0x74
 800281c:	4a0e      	ldr	r2, [pc, #56]	@ (8002858 <HAL_UART_MspInit+0x554>)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002822:	bf00      	nop
 8002824:	37c8      	adds	r7, #200	@ 0xc8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40004400 	.word	0x40004400
 8002830:	40023800 	.word	0x40023800
 8002834:	40020000 	.word	0x40020000
 8002838:	20000a48 	.word	0x20000a48
 800283c:	40026088 	.word	0x40026088
 8002840:	40004800 	.word	0x40004800
 8002844:	40020400 	.word	0x40020400
 8002848:	20000aa8 	.word	0x20000aa8
 800284c:	40026028 	.word	0x40026028
 8002850:	40011400 	.word	0x40011400
 8002854:	40020800 	.word	0x40020800
 8002858:	20000b08 	.word	0x20000b08
 800285c:	40026428 	.word	0x40026428

08002860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002864:	f003 fc4a 	bl	80060fc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002868:	bf00      	nop
 800286a:	e7fd      	b.n	8002868 <NMI_Handler+0x8>

0800286c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002870:	bf00      	nop
 8002872:	e7fd      	b.n	8002870 <HardFault_Handler+0x4>

08002874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002878:	bf00      	nop
 800287a:	e7fd      	b.n	8002878 <MemManage_Handler+0x4>

0800287c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002880:	bf00      	nop
 8002882:	e7fd      	b.n	8002880 <BusFault_Handler+0x4>

08002884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002888:	bf00      	nop
 800288a:	e7fd      	b.n	8002888 <UsageFault_Handler+0x4>

0800288c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800289a:	b480      	push	{r7}
 800289c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800289e:	bf00      	nop
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028ba:	f000 f991 	bl	8002be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80028c8:	4802      	ldr	r0, [pc, #8]	@ (80028d4 <DMA1_Stream1_IRQHandler+0x10>)
 80028ca:	f000 fef9 	bl	80036c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000aa8 	.word	0x20000aa8

080028d8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80028dc:	4802      	ldr	r0, [pc, #8]	@ (80028e8 <DMA1_Stream2_IRQHandler+0x10>)
 80028de:	f000 feef 	bl	80036c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000928 	.word	0x20000928

080028ec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80028f0:	4802      	ldr	r0, [pc, #8]	@ (80028fc <DMA1_Stream5_IRQHandler+0x10>)
 80028f2:	f000 fee5 	bl	80036c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000a48 	.word	0x20000a48

08002900 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002904:	4802      	ldr	r0, [pc, #8]	@ (8002910 <DMA2_Stream1_IRQHandler+0x10>)
 8002906:	f000 fedb 	bl	80036c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20000b08 	.word	0x20000b08

08002914 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002918:	4802      	ldr	r0, [pc, #8]	@ (8002924 <DMA2_Stream2_IRQHandler+0x10>)
 800291a:	f000 fed1 	bl	80036c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20000988 	.word	0x20000988

08002928 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800292c:	4802      	ldr	r0, [pc, #8]	@ (8002938 <DMA2_Stream3_IRQHandler+0x10>)
 800292e:	f000 fec7 	bl	80036c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20000620 	.word	0x20000620

0800293c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002940:	4802      	ldr	r0, [pc, #8]	@ (800294c <OTG_FS_IRQHandler+0x10>)
 8002942:	f001 fd60 	bl	8004406 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20002064 	.word	0x20002064

08002950 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002954:	4802      	ldr	r0, [pc, #8]	@ (8002960 <DMA2_Stream7_IRQHandler+0x10>)
 8002956:	f000 feb3 	bl	80036c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	200009e8 	.word	0x200009e8

08002964 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return 1;
 8002968:	2301      	movs	r3, #1
}
 800296a:	4618      	mov	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <_kill>:

int _kill(int pid, int sig)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800297e:	f00c ff59 	bl	800f834 <__errno>
 8002982:	4603      	mov	r3, r0
 8002984:	2216      	movs	r2, #22
 8002986:	601a      	str	r2, [r3, #0]
  return -1;
 8002988:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <_exit>:

void _exit (int status)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800299c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff ffe7 	bl	8002974 <_kill>
  while (1) {}    /* Make sure we hang here */
 80029a6:	bf00      	nop
 80029a8:	e7fd      	b.n	80029a6 <_exit+0x12>

080029aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b086      	sub	sp, #24
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	e00a      	b.n	80029d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029bc:	f3af 8000 	nop.w
 80029c0:	4601      	mov	r1, r0
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	60ba      	str	r2, [r7, #8]
 80029c8:	b2ca      	uxtb	r2, r1
 80029ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	3301      	adds	r3, #1
 80029d0:	617b      	str	r3, [r7, #20]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	dbf0      	blt.n	80029bc <_read+0x12>
  }

  return len;
 80029da:	687b      	ldr	r3, [r7, #4]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	e009      	b.n	8002a0a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	60ba      	str	r2, [r7, #8]
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	3301      	adds	r3, #1
 8002a08:	617b      	str	r3, [r7, #20]
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	dbf1      	blt.n	80029f6 <_write+0x12>
  }
  return len;
 8002a12:	687b      	ldr	r3, [r7, #4]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <_close>:

int _close(int file)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a44:	605a      	str	r2, [r3, #4]
  return 0;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <_isatty>:

int _isatty(int file)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a5c:	2301      	movs	r3, #1
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b085      	sub	sp, #20
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a8c:	4a14      	ldr	r2, [pc, #80]	@ (8002ae0 <_sbrk+0x5c>)
 8002a8e:	4b15      	ldr	r3, [pc, #84]	@ (8002ae4 <_sbrk+0x60>)
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a98:	4b13      	ldr	r3, [pc, #76]	@ (8002ae8 <_sbrk+0x64>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d102      	bne.n	8002aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002aa0:	4b11      	ldr	r3, [pc, #68]	@ (8002ae8 <_sbrk+0x64>)
 8002aa2:	4a12      	ldr	r2, [pc, #72]	@ (8002aec <_sbrk+0x68>)
 8002aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aa6:	4b10      	ldr	r3, [pc, #64]	@ (8002ae8 <_sbrk+0x64>)
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4413      	add	r3, r2
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d207      	bcs.n	8002ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ab4:	f00c febe 	bl	800f834 <__errno>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	220c      	movs	r2, #12
 8002abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002abe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ac2:	e009      	b.n	8002ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ac4:	4b08      	ldr	r3, [pc, #32]	@ (8002ae8 <_sbrk+0x64>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002aca:	4b07      	ldr	r3, [pc, #28]	@ (8002ae8 <_sbrk+0x64>)
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	4a05      	ldr	r2, [pc, #20]	@ (8002ae8 <_sbrk+0x64>)
 8002ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	20040000 	.word	0x20040000
 8002ae4:	00000400 	.word	0x00000400
 8002ae8:	20000b68 	.word	0x20000b68
 8002aec:	20002690 	.word	0x20002690

08002af0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002af4:	4b06      	ldr	r3, [pc, #24]	@ (8002b10 <SystemInit+0x20>)
 8002af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002afa:	4a05      	ldr	r2, [pc, #20]	@ (8002b10 <SystemInit+0x20>)
 8002afc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b04:	bf00      	nop
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	e000ed00 	.word	0xe000ed00

08002b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 8002b18:	f7ff ffea 	bl	8002af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b1c:	480c      	ldr	r0, [pc, #48]	@ (8002b50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b1e:	490d      	ldr	r1, [pc, #52]	@ (8002b54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b20:	4a0d      	ldr	r2, [pc, #52]	@ (8002b58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b24:	e002      	b.n	8002b2c <LoopCopyDataInit>

08002b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b2a:	3304      	adds	r3, #4

08002b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b30:	d3f9      	bcc.n	8002b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b32:	4a0a      	ldr	r2, [pc, #40]	@ (8002b5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b34:	4c0a      	ldr	r4, [pc, #40]	@ (8002b60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b38:	e001      	b.n	8002b3e <LoopFillZerobss>

08002b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b3c:	3204      	adds	r2, #4

08002b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b40:	d3fb      	bcc.n	8002b3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b42:	f00c fe7d 	bl	800f840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b46:	f7fe fb7b 	bl	8001240 <main>
  bx  lr    
 8002b4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b4c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b54:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8002b58:	08011be4 	.word	0x08011be4
  ldr r2, =_sbss
 8002b5c:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8002b60:	20002690 	.word	0x20002690

08002b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b64:	e7fe      	b.n	8002b64 <ADC_IRQHandler>

08002b66 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b6a:	2003      	movs	r0, #3
 8002b6c:	f000 fbe0 	bl	8003330 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b70:	200f      	movs	r0, #15
 8002b72:	f000 f805 	bl	8002b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b76:	f7ff f92b 	bl	8001dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b88:	4b12      	ldr	r3, [pc, #72]	@ (8002bd4 <HAL_InitTick+0x54>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	4b12      	ldr	r3, [pc, #72]	@ (8002bd8 <HAL_InitTick+0x58>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	4619      	mov	r1, r3
 8002b92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 fbfb 	bl	800339a <HAL_SYSTICK_Config>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e00e      	b.n	8002bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b0f      	cmp	r3, #15
 8002bb2:	d80a      	bhi.n	8002bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002bbc:	f000 fbc3 	bl	8003346 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bc0:	4a06      	ldr	r2, [pc, #24]	@ (8002bdc <HAL_InitTick+0x5c>)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	e000      	b.n	8002bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	20000000 	.word	0x20000000
 8002bd8:	20000008 	.word	0x20000008
 8002bdc:	20000004 	.word	0x20000004

08002be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002be4:	4b06      	ldr	r3, [pc, #24]	@ (8002c00 <HAL_IncTick+0x20>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	461a      	mov	r2, r3
 8002bea:	4b06      	ldr	r3, [pc, #24]	@ (8002c04 <HAL_IncTick+0x24>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4413      	add	r3, r2
 8002bf0:	4a04      	ldr	r2, [pc, #16]	@ (8002c04 <HAL_IncTick+0x24>)
 8002bf2:	6013      	str	r3, [r2, #0]
}
 8002bf4:	bf00      	nop
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	20000008 	.word	0x20000008
 8002c04:	20000b6c 	.word	0x20000b6c

08002c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c0c:	4b03      	ldr	r3, [pc, #12]	@ (8002c1c <HAL_GetTick+0x14>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	20000b6c 	.word	0x20000b6c

08002c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c28:	f7ff ffee 	bl	8002c08 <HAL_GetTick>
 8002c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c38:	d005      	beq.n	8002c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c64 <HAL_Delay+0x44>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	4413      	add	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c46:	bf00      	nop
 8002c48:	f7ff ffde 	bl	8002c08 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d8f7      	bhi.n	8002c48 <HAL_Delay+0x28>
  {
  }
}
 8002c58:	bf00      	nop
 8002c5a:	bf00      	nop
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	20000008 	.word	0x20000008

08002c68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c70:	2300      	movs	r3, #0
 8002c72:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e031      	b.n	8002ce2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d109      	bne.n	8002c9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff f8c6 	bl	8001e18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9e:	f003 0310 	and.w	r3, r3, #16
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d116      	bne.n	8002cd4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002caa:	4b10      	ldr	r3, [pc, #64]	@ (8002cec <HAL_ADC_Init+0x84>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	f043 0202 	orr.w	r2, r3, #2
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f970 	bl	8002f9c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc6:	f023 0303 	bic.w	r3, r3, #3
 8002cca:	f043 0201 	orr.w	r2, r3, #1
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	641a      	str	r2, [r3, #64]	@ 0x40
 8002cd2:	e001      	b.n	8002cd8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	ffffeefd 	.word	0xffffeefd

08002cf0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x1c>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e136      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x28a>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b09      	cmp	r3, #9
 8002d1a:	d93a      	bls.n	8002d92 <HAL_ADC_ConfigChannel+0xa2>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d24:	d035      	beq.n	8002d92 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68d9      	ldr	r1, [r3, #12]
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	461a      	mov	r2, r3
 8002d34:	4613      	mov	r3, r2
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	4413      	add	r3, r2
 8002d3a:	3b1e      	subs	r3, #30
 8002d3c:	2207      	movs	r2, #7
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43da      	mvns	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	400a      	ands	r2, r1
 8002d4a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a8d      	ldr	r2, [pc, #564]	@ (8002f88 <HAL_ADC_ConfigChannel+0x298>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d10a      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68d9      	ldr	r1, [r3, #12]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	061a      	lsls	r2, r3, #24
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d6a:	e035      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68d9      	ldr	r1, [r3, #12]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	4603      	mov	r3, r0
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	4403      	add	r3, r0
 8002d84:	3b1e      	subs	r3, #30
 8002d86:	409a      	lsls	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d90:	e022      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6919      	ldr	r1, [r3, #16]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	461a      	mov	r2, r3
 8002da0:	4613      	mov	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	4413      	add	r3, r2
 8002da6:	2207      	movs	r2, #7
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43da      	mvns	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	400a      	ands	r2, r1
 8002db4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6919      	ldr	r1, [r3, #16]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	4603      	mov	r3, r0
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	4403      	add	r3, r0
 8002dce:	409a      	lsls	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b06      	cmp	r3, #6
 8002dde:	d824      	bhi.n	8002e2a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	4613      	mov	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	3b05      	subs	r3, #5
 8002df2:	221f      	movs	r2, #31
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43da      	mvns	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	400a      	ands	r2, r1
 8002e00:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	4618      	mov	r0, r3
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	4613      	mov	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	3b05      	subs	r3, #5
 8002e1c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e28:	e04c      	b.n	8002ec4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2b0c      	cmp	r3, #12
 8002e30:	d824      	bhi.n	8002e7c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	3b23      	subs	r3, #35	@ 0x23
 8002e44:	221f      	movs	r2, #31
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43da      	mvns	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	400a      	ands	r2, r1
 8002e52:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	4618      	mov	r0, r3
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3b23      	subs	r3, #35	@ 0x23
 8002e6e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e7a:	e023      	b.n	8002ec4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	4613      	mov	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3b41      	subs	r3, #65	@ 0x41
 8002e8e:	221f      	movs	r2, #31
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	43da      	mvns	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	400a      	ands	r2, r1
 8002e9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	4618      	mov	r0, r3
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3b41      	subs	r3, #65	@ 0x41
 8002eb8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a30      	ldr	r2, [pc, #192]	@ (8002f8c <HAL_ADC_ConfigChannel+0x29c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d10a      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x1f4>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ed6:	d105      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002ed8:	4b2d      	ldr	r3, [pc, #180]	@ (8002f90 <HAL_ADC_ConfigChannel+0x2a0>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	4a2c      	ldr	r2, [pc, #176]	@ (8002f90 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ede:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002ee2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a28      	ldr	r2, [pc, #160]	@ (8002f8c <HAL_ADC_ConfigChannel+0x29c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d10f      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x21e>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b12      	cmp	r3, #18
 8002ef4:	d10b      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002ef6:	4b26      	ldr	r3, [pc, #152]	@ (8002f90 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	4a25      	ldr	r2, [pc, #148]	@ (8002f90 <HAL_ADC_ConfigChannel+0x2a0>)
 8002efc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002f00:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002f02:	4b23      	ldr	r3, [pc, #140]	@ (8002f90 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	4a22      	ldr	r2, [pc, #136]	@ (8002f90 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f08:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f0c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a1e      	ldr	r2, [pc, #120]	@ (8002f8c <HAL_ADC_ConfigChannel+0x29c>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d12b      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x280>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a1a      	ldr	r2, [pc, #104]	@ (8002f88 <HAL_ADC_ConfigChannel+0x298>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d003      	beq.n	8002f2a <HAL_ADC_ConfigChannel+0x23a>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b11      	cmp	r3, #17
 8002f28:	d122      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002f2a:	4b19      	ldr	r3, [pc, #100]	@ (8002f90 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	4a18      	ldr	r2, [pc, #96]	@ (8002f90 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f30:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002f34:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002f36:	4b16      	ldr	r3, [pc, #88]	@ (8002f90 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	4a15      	ldr	r2, [pc, #84]	@ (8002f90 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f3c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f40:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a10      	ldr	r2, [pc, #64]	@ (8002f88 <HAL_ADC_ConfigChannel+0x298>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d111      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002f4c:	4b11      	ldr	r3, [pc, #68]	@ (8002f94 <HAL_ADC_ConfigChannel+0x2a4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a11      	ldr	r2, [pc, #68]	@ (8002f98 <HAL_ADC_ConfigChannel+0x2a8>)
 8002f52:	fba2 2303 	umull	r2, r3, r2, r3
 8002f56:	0c9a      	lsrs	r2, r3, #18
 8002f58:	4613      	mov	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f62:	e002      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	3b01      	subs	r3, #1
 8002f68:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1f9      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	10000012 	.word	0x10000012
 8002f8c:	40012000 	.word	0x40012000
 8002f90:	40012300 	.word	0x40012300
 8002f94:	20000000 	.word	0x20000000
 8002f98:	431bde83 	.word	0x431bde83

08002f9c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002fa4:	4b78      	ldr	r3, [pc, #480]	@ (8003188 <ADC_Init+0x1ec>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	4a77      	ldr	r2, [pc, #476]	@ (8003188 <ADC_Init+0x1ec>)
 8002faa:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002fae:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002fb0:	4b75      	ldr	r3, [pc, #468]	@ (8003188 <ADC_Init+0x1ec>)
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	4973      	ldr	r1, [pc, #460]	@ (8003188 <ADC_Init+0x1ec>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6859      	ldr	r1, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	021a      	lsls	r2, r3, #8
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002ff0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6859      	ldr	r1, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003012:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6899      	ldr	r1, [r3, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302a:	4a58      	ldr	r2, [pc, #352]	@ (800318c <ADC_Init+0x1f0>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d022      	beq.n	8003076 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800303e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6899      	ldr	r1, [r3, #8]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003060:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6899      	ldr	r1, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	609a      	str	r2, [r3, #8]
 8003074:	e00f      	b.n	8003096 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003084:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003094:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0202 	bic.w	r2, r2, #2
 80030a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6899      	ldr	r1, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	005a      	lsls	r2, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d01b      	beq.n	80030fc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80030e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6859      	ldr	r1, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ee:	3b01      	subs	r3, #1
 80030f0:	035a      	lsls	r2, r3, #13
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	e007      	b.n	800310c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800310a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800311a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	3b01      	subs	r3, #1
 8003128:	051a      	lsls	r2, r3, #20
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003140:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6899      	ldr	r1, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800314e:	025a      	lsls	r2, r3, #9
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003166:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6899      	ldr	r1, [r3, #8]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	029a      	lsls	r2, r3, #10
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	609a      	str	r2, [r3, #8]
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	40012300 	.word	0x40012300
 800318c:	0f000001 	.word	0x0f000001

08003190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031a0:	4b0b      	ldr	r3, [pc, #44]	@ (80031d0 <__NVIC_SetPriorityGrouping+0x40>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031ac:	4013      	ands	r3, r2
 80031ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031b8:	4b06      	ldr	r3, [pc, #24]	@ (80031d4 <__NVIC_SetPriorityGrouping+0x44>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031be:	4a04      	ldr	r2, [pc, #16]	@ (80031d0 <__NVIC_SetPriorityGrouping+0x40>)
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	60d3      	str	r3, [r2, #12]
}
 80031c4:	bf00      	nop
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	e000ed00 	.word	0xe000ed00
 80031d4:	05fa0000 	.word	0x05fa0000

080031d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031dc:	4b04      	ldr	r3, [pc, #16]	@ (80031f0 <__NVIC_GetPriorityGrouping+0x18>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	0a1b      	lsrs	r3, r3, #8
 80031e2:	f003 0307 	and.w	r3, r3, #7
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	e000ed00 	.word	0xe000ed00

080031f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	4603      	mov	r3, r0
 80031fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003202:	2b00      	cmp	r3, #0
 8003204:	db0b      	blt.n	800321e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003206:	79fb      	ldrb	r3, [r7, #7]
 8003208:	f003 021f 	and.w	r2, r3, #31
 800320c:	4907      	ldr	r1, [pc, #28]	@ (800322c <__NVIC_EnableIRQ+0x38>)
 800320e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003212:	095b      	lsrs	r3, r3, #5
 8003214:	2001      	movs	r0, #1
 8003216:	fa00 f202 	lsl.w	r2, r0, r2
 800321a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	e000e100 	.word	0xe000e100

08003230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	4603      	mov	r3, r0
 8003238:	6039      	str	r1, [r7, #0]
 800323a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800323c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003240:	2b00      	cmp	r3, #0
 8003242:	db0a      	blt.n	800325a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	b2da      	uxtb	r2, r3
 8003248:	490c      	ldr	r1, [pc, #48]	@ (800327c <__NVIC_SetPriority+0x4c>)
 800324a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324e:	0112      	lsls	r2, r2, #4
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	440b      	add	r3, r1
 8003254:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003258:	e00a      	b.n	8003270 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	b2da      	uxtb	r2, r3
 800325e:	4908      	ldr	r1, [pc, #32]	@ (8003280 <__NVIC_SetPriority+0x50>)
 8003260:	79fb      	ldrb	r3, [r7, #7]
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	3b04      	subs	r3, #4
 8003268:	0112      	lsls	r2, r2, #4
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	440b      	add	r3, r1
 800326e:	761a      	strb	r2, [r3, #24]
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	e000e100 	.word	0xe000e100
 8003280:	e000ed00 	.word	0xe000ed00

08003284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003284:	b480      	push	{r7}
 8003286:	b089      	sub	sp, #36	@ 0x24
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f1c3 0307 	rsb	r3, r3, #7
 800329e:	2b04      	cmp	r3, #4
 80032a0:	bf28      	it	cs
 80032a2:	2304      	movcs	r3, #4
 80032a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	3304      	adds	r3, #4
 80032aa:	2b06      	cmp	r3, #6
 80032ac:	d902      	bls.n	80032b4 <NVIC_EncodePriority+0x30>
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	3b03      	subs	r3, #3
 80032b2:	e000      	b.n	80032b6 <NVIC_EncodePriority+0x32>
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43da      	mvns	r2, r3
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	401a      	ands	r2, r3
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	fa01 f303 	lsl.w	r3, r1, r3
 80032d6:	43d9      	mvns	r1, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032dc:	4313      	orrs	r3, r2
         );
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3724      	adds	r7, #36	@ 0x24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
	...

080032ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032fc:	d301      	bcc.n	8003302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032fe:	2301      	movs	r3, #1
 8003300:	e00f      	b.n	8003322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003302:	4a0a      	ldr	r2, [pc, #40]	@ (800332c <SysTick_Config+0x40>)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3b01      	subs	r3, #1
 8003308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800330a:	210f      	movs	r1, #15
 800330c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003310:	f7ff ff8e 	bl	8003230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003314:	4b05      	ldr	r3, [pc, #20]	@ (800332c <SysTick_Config+0x40>)
 8003316:	2200      	movs	r2, #0
 8003318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800331a:	4b04      	ldr	r3, [pc, #16]	@ (800332c <SysTick_Config+0x40>)
 800331c:	2207      	movs	r2, #7
 800331e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	e000e010 	.word	0xe000e010

08003330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff ff29 	bl	8003190 <__NVIC_SetPriorityGrouping>
}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003346:	b580      	push	{r7, lr}
 8003348:	b086      	sub	sp, #24
 800334a:	af00      	add	r7, sp, #0
 800334c:	4603      	mov	r3, r0
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
 8003352:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003358:	f7ff ff3e 	bl	80031d8 <__NVIC_GetPriorityGrouping>
 800335c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	68b9      	ldr	r1, [r7, #8]
 8003362:	6978      	ldr	r0, [r7, #20]
 8003364:	f7ff ff8e 	bl	8003284 <NVIC_EncodePriority>
 8003368:	4602      	mov	r2, r0
 800336a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800336e:	4611      	mov	r1, r2
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff ff5d 	bl	8003230 <__NVIC_SetPriority>
}
 8003376:	bf00      	nop
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b082      	sub	sp, #8
 8003382:	af00      	add	r7, sp, #0
 8003384:	4603      	mov	r3, r0
 8003386:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff ff31 	bl	80031f4 <__NVIC_EnableIRQ>
}
 8003392:	bf00      	nop
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b082      	sub	sp, #8
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff ffa2 	bl	80032ec <SysTick_Config>
 80033a8:	4603      	mov	r3, r0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80033b8:	f3bf 8f5f 	dmb	sy
}
 80033bc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80033be:	4b07      	ldr	r3, [pc, #28]	@ (80033dc <HAL_MPU_Disable+0x28>)
 80033c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c2:	4a06      	ldr	r2, [pc, #24]	@ (80033dc <HAL_MPU_Disable+0x28>)
 80033c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033c8:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80033ca:	4b05      	ldr	r3, [pc, #20]	@ (80033e0 <HAL_MPU_Disable+0x2c>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	605a      	str	r2, [r3, #4]
}
 80033d0:	bf00      	nop
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	e000ed00 	.word	0xe000ed00
 80033e0:	e000ed90 	.word	0xe000ed90

080033e4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80033ec:	4a0b      	ldr	r2, [pc, #44]	@ (800341c <HAL_MPU_Enable+0x38>)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f043 0301 	orr.w	r3, r3, #1
 80033f4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80033f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003420 <HAL_MPU_Enable+0x3c>)
 80033f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fa:	4a09      	ldr	r2, [pc, #36]	@ (8003420 <HAL_MPU_Enable+0x3c>)
 80033fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003400:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003402:	f3bf 8f4f 	dsb	sy
}
 8003406:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003408:	f3bf 8f6f 	isb	sy
}
 800340c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	e000ed90 	.word	0xe000ed90
 8003420:	e000ed00 	.word	0xe000ed00

08003424 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	785a      	ldrb	r2, [r3, #1]
 8003430:	4b1b      	ldr	r3, [pc, #108]	@ (80034a0 <HAL_MPU_ConfigRegion+0x7c>)
 8003432:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003434:	4b1a      	ldr	r3, [pc, #104]	@ (80034a0 <HAL_MPU_ConfigRegion+0x7c>)
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	4a19      	ldr	r2, [pc, #100]	@ (80034a0 <HAL_MPU_ConfigRegion+0x7c>)
 800343a:	f023 0301 	bic.w	r3, r3, #1
 800343e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003440:	4a17      	ldr	r2, [pc, #92]	@ (80034a0 <HAL_MPU_ConfigRegion+0x7c>)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	7b1b      	ldrb	r3, [r3, #12]
 800344c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	7adb      	ldrb	r3, [r3, #11]
 8003452:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003454:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	7a9b      	ldrb	r3, [r3, #10]
 800345a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800345c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	7b5b      	ldrb	r3, [r3, #13]
 8003462:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003464:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	7b9b      	ldrb	r3, [r3, #14]
 800346a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800346c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	7bdb      	ldrb	r3, [r3, #15]
 8003472:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003474:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	7a5b      	ldrb	r3, [r3, #9]
 800347a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800347c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	7a1b      	ldrb	r3, [r3, #8]
 8003482:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003484:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	7812      	ldrb	r2, [r2, #0]
 800348a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800348c:	4a04      	ldr	r2, [pc, #16]	@ (80034a0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800348e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003490:	6113      	str	r3, [r2, #16]
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	e000ed90 	.word	0xe000ed90

080034a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034b0:	f7ff fbaa 	bl	8002c08 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e099      	b.n	80035f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0201 	bic.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034e0:	e00f      	b.n	8003502 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034e2:	f7ff fb91 	bl	8002c08 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b05      	cmp	r3, #5
 80034ee:	d908      	bls.n	8003502 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2220      	movs	r2, #32
 80034f4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2203      	movs	r2, #3
 80034fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e078      	b.n	80035f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1e8      	bne.n	80034e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	4b38      	ldr	r3, [pc, #224]	@ (80035fc <HAL_DMA_Init+0x158>)
 800351c:	4013      	ands	r3, r2
 800351e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800352e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800353a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003546:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	4313      	orrs	r3, r2
 8003552:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003558:	2b04      	cmp	r3, #4
 800355a:	d107      	bne.n	800356c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003564:	4313      	orrs	r3, r2
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	4313      	orrs	r3, r2
 800356a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f023 0307 	bic.w	r3, r3, #7
 8003582:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	4313      	orrs	r3, r2
 800358c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003592:	2b04      	cmp	r3, #4
 8003594:	d117      	bne.n	80035c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	4313      	orrs	r3, r2
 800359e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00e      	beq.n	80035c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 fa77 	bl	8003a9c <DMA_CheckFifoParam>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d008      	beq.n	80035c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2240      	movs	r2, #64	@ 0x40
 80035b8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80035c2:	2301      	movs	r3, #1
 80035c4:	e016      	b.n	80035f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 fa2e 	bl	8003a30 <DMA_CalcBaseAndBitshift>
 80035d4:	4603      	mov	r3, r0
 80035d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035dc:	223f      	movs	r2, #63	@ 0x3f
 80035de:	409a      	lsls	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	e010803f 	.word	0xe010803f

08003600 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
 800360c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003616:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800361e:	2b01      	cmp	r3, #1
 8003620:	d101      	bne.n	8003626 <HAL_DMA_Start_IT+0x26>
 8003622:	2302      	movs	r3, #2
 8003624:	e048      	b.n	80036b8 <HAL_DMA_Start_IT+0xb8>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b01      	cmp	r3, #1
 8003638:	d137      	bne.n	80036aa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2202      	movs	r2, #2
 800363e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	68b9      	ldr	r1, [r7, #8]
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 f9c0 	bl	80039d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003658:	223f      	movs	r2, #63	@ 0x3f
 800365a:	409a      	lsls	r2, r3
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0216 	orr.w	r2, r2, #22
 800366e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695a      	ldr	r2, [r3, #20]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800367e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003684:	2b00      	cmp	r3, #0
 8003686:	d007      	beq.n	8003698 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0208 	orr.w	r2, r2, #8
 8003696:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0201 	orr.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	e005      	b.n	80036b6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036b2:	2302      	movs	r3, #2
 80036b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80036b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80036c8:	2300      	movs	r3, #0
 80036ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80036cc:	4b8e      	ldr	r3, [pc, #568]	@ (8003908 <HAL_DMA_IRQHandler+0x248>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a8e      	ldr	r2, [pc, #568]	@ (800390c <HAL_DMA_IRQHandler+0x24c>)
 80036d2:	fba2 2303 	umull	r2, r3, r2, r3
 80036d6:	0a9b      	lsrs	r3, r3, #10
 80036d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ea:	2208      	movs	r2, #8
 80036ec:	409a      	lsls	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d01a      	beq.n	800372c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	d013      	beq.n	800372c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0204 	bic.w	r2, r2, #4
 8003712:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003718:	2208      	movs	r2, #8
 800371a:	409a      	lsls	r2, r3
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003724:	f043 0201 	orr.w	r2, r3, #1
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003730:	2201      	movs	r2, #1
 8003732:	409a      	lsls	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4013      	ands	r3, r2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d012      	beq.n	8003762 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00b      	beq.n	8003762 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800374e:	2201      	movs	r2, #1
 8003750:	409a      	lsls	r2, r3
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800375a:	f043 0202 	orr.w	r2, r3, #2
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003766:	2204      	movs	r2, #4
 8003768:	409a      	lsls	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4013      	ands	r3, r2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d012      	beq.n	8003798 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00b      	beq.n	8003798 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003784:	2204      	movs	r2, #4
 8003786:	409a      	lsls	r2, r3
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003790:	f043 0204 	orr.w	r2, r3, #4
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800379c:	2210      	movs	r2, #16
 800379e:	409a      	lsls	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4013      	ands	r3, r2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d043      	beq.n	8003830 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d03c      	beq.n	8003830 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ba:	2210      	movs	r2, #16
 80037bc:	409a      	lsls	r2, r3
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d018      	beq.n	8003802 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d108      	bne.n	80037f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d024      	beq.n	8003830 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	4798      	blx	r3
 80037ee:	e01f      	b.n	8003830 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d01b      	beq.n	8003830 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	4798      	blx	r3
 8003800:	e016      	b.n	8003830 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800380c:	2b00      	cmp	r3, #0
 800380e:	d107      	bne.n	8003820 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0208 	bic.w	r2, r2, #8
 800381e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003834:	2220      	movs	r2, #32
 8003836:	409a      	lsls	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	4013      	ands	r3, r2
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 808f 	beq.w	8003960 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0310 	and.w	r3, r3, #16
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 8087 	beq.w	8003960 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003856:	2220      	movs	r2, #32
 8003858:	409a      	lsls	r2, r3
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b05      	cmp	r3, #5
 8003868:	d136      	bne.n	80038d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0216 	bic.w	r2, r2, #22
 8003878:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695a      	ldr	r2, [r3, #20]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003888:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388e:	2b00      	cmp	r3, #0
 8003890:	d103      	bne.n	800389a <HAL_DMA_IRQHandler+0x1da>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003896:	2b00      	cmp	r3, #0
 8003898:	d007      	beq.n	80038aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0208 	bic.w	r2, r2, #8
 80038a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ae:	223f      	movs	r2, #63	@ 0x3f
 80038b0:	409a      	lsls	r2, r3
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d07e      	beq.n	80039cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	4798      	blx	r3
        }
        return;
 80038d6:	e079      	b.n	80039cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d01d      	beq.n	8003922 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10d      	bne.n	8003910 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d031      	beq.n	8003960 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	4798      	blx	r3
 8003904:	e02c      	b.n	8003960 <HAL_DMA_IRQHandler+0x2a0>
 8003906:	bf00      	nop
 8003908:	20000000 	.word	0x20000000
 800390c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003914:	2b00      	cmp	r3, #0
 8003916:	d023      	beq.n	8003960 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	4798      	blx	r3
 8003920:	e01e      	b.n	8003960 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10f      	bne.n	8003950 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0210 	bic.w	r2, r2, #16
 800393e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003964:	2b00      	cmp	r3, #0
 8003966:	d032      	beq.n	80039ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b00      	cmp	r3, #0
 8003972:	d022      	beq.n	80039ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2205      	movs	r2, #5
 8003978:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0201 	bic.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	3301      	adds	r3, #1
 8003990:	60bb      	str	r3, [r7, #8]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	429a      	cmp	r2, r3
 8003996:	d307      	bcc.n	80039a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f2      	bne.n	800398c <HAL_DMA_IRQHandler+0x2cc>
 80039a6:	e000      	b.n	80039aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80039a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d005      	beq.n	80039ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	4798      	blx	r3
 80039ca:	e000      	b.n	80039ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80039cc:	bf00      	nop
    }
  }
}
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80039f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	2b40      	cmp	r3, #64	@ 0x40
 8003a00:	d108      	bne.n	8003a14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a12:	e007      	b.n	8003a24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	60da      	str	r2, [r3, #12]
}
 8003a24:	bf00      	nop
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	3b10      	subs	r3, #16
 8003a40:	4a13      	ldr	r2, [pc, #76]	@ (8003a90 <DMA_CalcBaseAndBitshift+0x60>)
 8003a42:	fba2 2303 	umull	r2, r3, r2, r3
 8003a46:	091b      	lsrs	r3, r3, #4
 8003a48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a4a:	4a12      	ldr	r2, [pc, #72]	@ (8003a94 <DMA_CalcBaseAndBitshift+0x64>)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4413      	add	r3, r2
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d908      	bls.n	8003a70 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	461a      	mov	r2, r3
 8003a64:	4b0c      	ldr	r3, [pc, #48]	@ (8003a98 <DMA_CalcBaseAndBitshift+0x68>)
 8003a66:	4013      	ands	r3, r2
 8003a68:	1d1a      	adds	r2, r3, #4
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a6e:	e006      	b.n	8003a7e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	461a      	mov	r2, r3
 8003a76:	4b08      	ldr	r3, [pc, #32]	@ (8003a98 <DMA_CalcBaseAndBitshift+0x68>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	aaaaaaab 	.word	0xaaaaaaab
 8003a94:	08011844 	.word	0x08011844
 8003a98:	fffffc00 	.word	0xfffffc00

08003a9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d11f      	bne.n	8003af6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d856      	bhi.n	8003b6a <DMA_CheckFifoParam+0xce>
 8003abc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ac4 <DMA_CheckFifoParam+0x28>)
 8003abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac2:	bf00      	nop
 8003ac4:	08003ad5 	.word	0x08003ad5
 8003ac8:	08003ae7 	.word	0x08003ae7
 8003acc:	08003ad5 	.word	0x08003ad5
 8003ad0:	08003b6b 	.word	0x08003b6b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d046      	beq.n	8003b6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ae4:	e043      	b.n	8003b6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aea:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003aee:	d140      	bne.n	8003b72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003af4:	e03d      	b.n	8003b72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003afe:	d121      	bne.n	8003b44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b03      	cmp	r3, #3
 8003b04:	d837      	bhi.n	8003b76 <DMA_CheckFifoParam+0xda>
 8003b06:	a201      	add	r2, pc, #4	@ (adr r2, 8003b0c <DMA_CheckFifoParam+0x70>)
 8003b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0c:	08003b1d 	.word	0x08003b1d
 8003b10:	08003b23 	.word	0x08003b23
 8003b14:	08003b1d 	.word	0x08003b1d
 8003b18:	08003b35 	.word	0x08003b35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b20:	e030      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d025      	beq.n	8003b7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b32:	e022      	b.n	8003b7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b38:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b3c:	d11f      	bne.n	8003b7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b42:	e01c      	b.n	8003b7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d903      	bls.n	8003b52 <DMA_CheckFifoParam+0xb6>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b03      	cmp	r3, #3
 8003b4e:	d003      	beq.n	8003b58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b50:	e018      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	73fb      	strb	r3, [r7, #15]
      break;
 8003b56:	e015      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00e      	beq.n	8003b82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	73fb      	strb	r3, [r7, #15]
      break;
 8003b68:	e00b      	b.n	8003b82 <DMA_CheckFifoParam+0xe6>
      break;
 8003b6a:	bf00      	nop
 8003b6c:	e00a      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
      break;
 8003b6e:	bf00      	nop
 8003b70:	e008      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
      break;
 8003b72:	bf00      	nop
 8003b74:	e006      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
      break;
 8003b76:	bf00      	nop
 8003b78:	e004      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
      break;
 8003b7a:	bf00      	nop
 8003b7c:	e002      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b7e:	bf00      	nop
 8003b80:	e000      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
      break;
 8003b82:	bf00      	nop
    }
  } 
  
  return status; 
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop

08003b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b089      	sub	sp, #36	@ 0x24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003baa:	2300      	movs	r3, #0
 8003bac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61fb      	str	r3, [r7, #28]
 8003bb2:	e169      	b.n	8003e88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	f040 8158 	bne.w	8003e82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d005      	beq.n	8003bea <HAL_GPIO_Init+0x56>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d130      	bne.n	8003c4c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	2203      	movs	r2, #3
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c20:	2201      	movs	r2, #1
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	091b      	lsrs	r3, r3, #4
 8003c36:	f003 0201 	and.w	r2, r3, #1
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f003 0303 	and.w	r3, r3, #3
 8003c54:	2b03      	cmp	r3, #3
 8003c56:	d017      	beq.n	8003c88 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	2203      	movs	r2, #3
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 0303 	and.w	r3, r3, #3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d123      	bne.n	8003cdc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	08da      	lsrs	r2, r3, #3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3208      	adds	r2, #8
 8003c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	220f      	movs	r2, #15
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	691a      	ldr	r2, [r3, #16]
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	08da      	lsrs	r2, r3, #3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	3208      	adds	r2, #8
 8003cd6:	69b9      	ldr	r1, [r7, #24]
 8003cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	2203      	movs	r2, #3
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	43db      	mvns	r3, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 0203 	and.w	r2, r3, #3
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 80b2 	beq.w	8003e82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d1e:	4b60      	ldr	r3, [pc, #384]	@ (8003ea0 <HAL_GPIO_Init+0x30c>)
 8003d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d22:	4a5f      	ldr	r2, [pc, #380]	@ (8003ea0 <HAL_GPIO_Init+0x30c>)
 8003d24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d2a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ea0 <HAL_GPIO_Init+0x30c>)
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003d36:	4a5b      	ldr	r2, [pc, #364]	@ (8003ea4 <HAL_GPIO_Init+0x310>)
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	089b      	lsrs	r3, r3, #2
 8003d3c:	3302      	adds	r3, #2
 8003d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	220f      	movs	r2, #15
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	43db      	mvns	r3, r3
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	4013      	ands	r3, r2
 8003d58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a52      	ldr	r2, [pc, #328]	@ (8003ea8 <HAL_GPIO_Init+0x314>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d02b      	beq.n	8003dba <HAL_GPIO_Init+0x226>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a51      	ldr	r2, [pc, #324]	@ (8003eac <HAL_GPIO_Init+0x318>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d025      	beq.n	8003db6 <HAL_GPIO_Init+0x222>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a50      	ldr	r2, [pc, #320]	@ (8003eb0 <HAL_GPIO_Init+0x31c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d01f      	beq.n	8003db2 <HAL_GPIO_Init+0x21e>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a4f      	ldr	r2, [pc, #316]	@ (8003eb4 <HAL_GPIO_Init+0x320>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d019      	beq.n	8003dae <HAL_GPIO_Init+0x21a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a4e      	ldr	r2, [pc, #312]	@ (8003eb8 <HAL_GPIO_Init+0x324>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d013      	beq.n	8003daa <HAL_GPIO_Init+0x216>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a4d      	ldr	r2, [pc, #308]	@ (8003ebc <HAL_GPIO_Init+0x328>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00d      	beq.n	8003da6 <HAL_GPIO_Init+0x212>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a4c      	ldr	r2, [pc, #304]	@ (8003ec0 <HAL_GPIO_Init+0x32c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d007      	beq.n	8003da2 <HAL_GPIO_Init+0x20e>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a4b      	ldr	r2, [pc, #300]	@ (8003ec4 <HAL_GPIO_Init+0x330>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d101      	bne.n	8003d9e <HAL_GPIO_Init+0x20a>
 8003d9a:	2307      	movs	r3, #7
 8003d9c:	e00e      	b.n	8003dbc <HAL_GPIO_Init+0x228>
 8003d9e:	2308      	movs	r3, #8
 8003da0:	e00c      	b.n	8003dbc <HAL_GPIO_Init+0x228>
 8003da2:	2306      	movs	r3, #6
 8003da4:	e00a      	b.n	8003dbc <HAL_GPIO_Init+0x228>
 8003da6:	2305      	movs	r3, #5
 8003da8:	e008      	b.n	8003dbc <HAL_GPIO_Init+0x228>
 8003daa:	2304      	movs	r3, #4
 8003dac:	e006      	b.n	8003dbc <HAL_GPIO_Init+0x228>
 8003dae:	2303      	movs	r3, #3
 8003db0:	e004      	b.n	8003dbc <HAL_GPIO_Init+0x228>
 8003db2:	2302      	movs	r3, #2
 8003db4:	e002      	b.n	8003dbc <HAL_GPIO_Init+0x228>
 8003db6:	2301      	movs	r3, #1
 8003db8:	e000      	b.n	8003dbc <HAL_GPIO_Init+0x228>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	69fa      	ldr	r2, [r7, #28]
 8003dbe:	f002 0203 	and.w	r2, r2, #3
 8003dc2:	0092      	lsls	r2, r2, #2
 8003dc4:	4093      	lsls	r3, r2
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003dcc:	4935      	ldr	r1, [pc, #212]	@ (8003ea4 <HAL_GPIO_Init+0x310>)
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	089b      	lsrs	r3, r3, #2
 8003dd2:	3302      	adds	r3, #2
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dda:	4b3b      	ldr	r3, [pc, #236]	@ (8003ec8 <HAL_GPIO_Init+0x334>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	43db      	mvns	r3, r3
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	4013      	ands	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dfe:	4a32      	ldr	r2, [pc, #200]	@ (8003ec8 <HAL_GPIO_Init+0x334>)
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e04:	4b30      	ldr	r3, [pc, #192]	@ (8003ec8 <HAL_GPIO_Init+0x334>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	4013      	ands	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e28:	4a27      	ldr	r2, [pc, #156]	@ (8003ec8 <HAL_GPIO_Init+0x334>)
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e2e:	4b26      	ldr	r3, [pc, #152]	@ (8003ec8 <HAL_GPIO_Init+0x334>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	43db      	mvns	r3, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e52:	4a1d      	ldr	r2, [pc, #116]	@ (8003ec8 <HAL_GPIO_Init+0x334>)
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e58:	4b1b      	ldr	r3, [pc, #108]	@ (8003ec8 <HAL_GPIO_Init+0x334>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	43db      	mvns	r3, r3
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	4013      	ands	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e7c:	4a12      	ldr	r2, [pc, #72]	@ (8003ec8 <HAL_GPIO_Init+0x334>)
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	3301      	adds	r3, #1
 8003e86:	61fb      	str	r3, [r7, #28]
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	2b0f      	cmp	r3, #15
 8003e8c:	f67f ae92 	bls.w	8003bb4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003e90:	bf00      	nop
 8003e92:	bf00      	nop
 8003e94:	3724      	adds	r7, #36	@ 0x24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	40013800 	.word	0x40013800
 8003ea8:	40020000 	.word	0x40020000
 8003eac:	40020400 	.word	0x40020400
 8003eb0:	40020800 	.word	0x40020800
 8003eb4:	40020c00 	.word	0x40020c00
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	40021400 	.word	0x40021400
 8003ec0:	40021800 	.word	0x40021800
 8003ec4:	40021c00 	.word	0x40021c00
 8003ec8:	40013c00 	.word	0x40013c00

08003ecc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691a      	ldr	r2, [r3, #16]
 8003edc:	887b      	ldrh	r3, [r7, #2]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	73fb      	strb	r3, [r7, #15]
 8003ee8:	e001      	b.n	8003eee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003eea:	2300      	movs	r3, #0
 8003eec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	460b      	mov	r3, r1
 8003f06:	807b      	strh	r3, [r7, #2]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f0c:	787b      	ldrb	r3, [r7, #1]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f12:	887a      	ldrh	r2, [r7, #2]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003f18:	e003      	b.n	8003f22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003f1a:	887b      	ldrh	r3, [r7, #2]
 8003f1c:	041a      	lsls	r2, r3, #16
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	619a      	str	r2, [r3, #24]
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
	...

08003f30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e08b      	b.n	800405a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d106      	bne.n	8003f5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7fd ff9e 	bl	8001e98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2224      	movs	r2, #36	@ 0x24
 8003f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0201 	bic.w	r2, r2, #1
 8003f72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d107      	bne.n	8003faa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fa6:	609a      	str	r2, [r3, #8]
 8003fa8:	e006      	b.n	8003fb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689a      	ldr	r2, [r3, #8]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003fb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d108      	bne.n	8003fd2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fce:	605a      	str	r2, [r3, #4]
 8003fd0:	e007      	b.n	8003fe2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fe0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6859      	ldr	r1, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	4b1d      	ldr	r3, [pc, #116]	@ (8004064 <HAL_I2C_Init+0x134>)
 8003fee:	430b      	orrs	r3, r1
 8003ff0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004000:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691a      	ldr	r2, [r3, #16]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	69d9      	ldr	r1, [r3, #28]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a1a      	ldr	r2, [r3, #32]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0201 	orr.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	02008000 	.word	0x02008000

08004068 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b20      	cmp	r3, #32
 800407c:	d138      	bne.n	80040f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004088:	2302      	movs	r3, #2
 800408a:	e032      	b.n	80040f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2224      	movs	r2, #36	@ 0x24
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0201 	bic.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80040ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6819      	ldr	r1, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2220      	movs	r2, #32
 80040e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040ec:	2300      	movs	r3, #0
 80040ee:	e000      	b.n	80040f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040f0:	2302      	movs	r3, #2
  }
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040fe:	b480      	push	{r7}
 8004100:	b085      	sub	sp, #20
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
 8004106:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b20      	cmp	r3, #32
 8004112:	d139      	bne.n	8004188 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800411a:	2b01      	cmp	r3, #1
 800411c:	d101      	bne.n	8004122 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800411e:	2302      	movs	r3, #2
 8004120:	e033      	b.n	800418a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2224      	movs	r2, #36	@ 0x24
 800412e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 0201 	bic.w	r2, r2, #1
 8004140:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004150:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	021b      	lsls	r3, r3, #8
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	4313      	orrs	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0201 	orr.w	r2, r2, #1
 8004172:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004184:	2300      	movs	r3, #0
 8004186:	e000      	b.n	800418a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004188:	2302      	movs	r3, #2
  }
}
 800418a:	4618      	mov	r0, r3
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b086      	sub	sp, #24
 800419a:	af02      	add	r7, sp, #8
 800419c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e108      	b.n	80043ba <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d106      	bne.n	80041c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f00a f912 	bl	800e3ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2203      	movs	r2, #3
 80041cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041d6:	d102      	bne.n	80041de <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f006 fab3 	bl	800a74e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6818      	ldr	r0, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	7c1a      	ldrb	r2, [r3, #16]
 80041f0:	f88d 2000 	strb.w	r2, [sp]
 80041f4:	3304      	adds	r3, #4
 80041f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041f8:	f006 f96a 	bl	800a4d0 <USB_CoreInit>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d005      	beq.n	800420e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2202      	movs	r2, #2
 8004206:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e0d5      	b.n	80043ba <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2100      	movs	r1, #0
 8004214:	4618      	mov	r0, r3
 8004216:	f006 faab 	bl	800a770 <USB_SetCurrentMode>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d005      	beq.n	800422c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e0c6      	b.n	80043ba <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800422c:	2300      	movs	r3, #0
 800422e:	73fb      	strb	r3, [r7, #15]
 8004230:	e04a      	b.n	80042c8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004232:	7bfa      	ldrb	r2, [r7, #15]
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	4613      	mov	r3, r2
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	4413      	add	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	440b      	add	r3, r1
 8004240:	3315      	adds	r3, #21
 8004242:	2201      	movs	r2, #1
 8004244:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004246:	7bfa      	ldrb	r2, [r7, #15]
 8004248:	6879      	ldr	r1, [r7, #4]
 800424a:	4613      	mov	r3, r2
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	4413      	add	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	440b      	add	r3, r1
 8004254:	3314      	adds	r3, #20
 8004256:	7bfa      	ldrb	r2, [r7, #15]
 8004258:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800425a:	7bfa      	ldrb	r2, [r7, #15]
 800425c:	7bfb      	ldrb	r3, [r7, #15]
 800425e:	b298      	uxth	r0, r3
 8004260:	6879      	ldr	r1, [r7, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	00db      	lsls	r3, r3, #3
 8004266:	4413      	add	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	440b      	add	r3, r1
 800426c:	332e      	adds	r3, #46	@ 0x2e
 800426e:	4602      	mov	r2, r0
 8004270:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004272:	7bfa      	ldrb	r2, [r7, #15]
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	4613      	mov	r3, r2
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	4413      	add	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	440b      	add	r3, r1
 8004280:	3318      	adds	r3, #24
 8004282:	2200      	movs	r2, #0
 8004284:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004286:	7bfa      	ldrb	r2, [r7, #15]
 8004288:	6879      	ldr	r1, [r7, #4]
 800428a:	4613      	mov	r3, r2
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	4413      	add	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	440b      	add	r3, r1
 8004294:	331c      	adds	r3, #28
 8004296:	2200      	movs	r2, #0
 8004298:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800429a:	7bfa      	ldrb	r2, [r7, #15]
 800429c:	6879      	ldr	r1, [r7, #4]
 800429e:	4613      	mov	r3, r2
 80042a0:	00db      	lsls	r3, r3, #3
 80042a2:	4413      	add	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	440b      	add	r3, r1
 80042a8:	3320      	adds	r3, #32
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80042ae:	7bfa      	ldrb	r2, [r7, #15]
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	4613      	mov	r3, r2
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	4413      	add	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	440b      	add	r3, r1
 80042bc:	3324      	adds	r3, #36	@ 0x24
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
 80042c4:	3301      	adds	r3, #1
 80042c6:	73fb      	strb	r3, [r7, #15]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	791b      	ldrb	r3, [r3, #4]
 80042cc:	7bfa      	ldrb	r2, [r7, #15]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d3af      	bcc.n	8004232 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042d2:	2300      	movs	r3, #0
 80042d4:	73fb      	strb	r3, [r7, #15]
 80042d6:	e044      	b.n	8004362 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042d8:	7bfa      	ldrb	r2, [r7, #15]
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	4613      	mov	r3, r2
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	4413      	add	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	440b      	add	r3, r1
 80042e6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80042ea:	2200      	movs	r2, #0
 80042ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80042ee:	7bfa      	ldrb	r2, [r7, #15]
 80042f0:	6879      	ldr	r1, [r7, #4]
 80042f2:	4613      	mov	r3, r2
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	4413      	add	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	440b      	add	r3, r1
 80042fc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004300:	7bfa      	ldrb	r2, [r7, #15]
 8004302:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004304:	7bfa      	ldrb	r2, [r7, #15]
 8004306:	6879      	ldr	r1, [r7, #4]
 8004308:	4613      	mov	r3, r2
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	4413      	add	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	440b      	add	r3, r1
 8004312:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004316:	2200      	movs	r2, #0
 8004318:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800431a:	7bfa      	ldrb	r2, [r7, #15]
 800431c:	6879      	ldr	r1, [r7, #4]
 800431e:	4613      	mov	r3, r2
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	4413      	add	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	440b      	add	r3, r1
 8004328:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004330:	7bfa      	ldrb	r2, [r7, #15]
 8004332:	6879      	ldr	r1, [r7, #4]
 8004334:	4613      	mov	r3, r2
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	4413      	add	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	440b      	add	r3, r1
 800433e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004346:	7bfa      	ldrb	r2, [r7, #15]
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	4613      	mov	r3, r2
 800434c:	00db      	lsls	r3, r3, #3
 800434e:	4413      	add	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	440b      	add	r3, r1
 8004354:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	3301      	adds	r3, #1
 8004360:	73fb      	strb	r3, [r7, #15]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	791b      	ldrb	r3, [r3, #4]
 8004366:	7bfa      	ldrb	r2, [r7, #15]
 8004368:	429a      	cmp	r2, r3
 800436a:	d3b5      	bcc.n	80042d8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6818      	ldr	r0, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	7c1a      	ldrb	r2, [r3, #16]
 8004374:	f88d 2000 	strb.w	r2, [sp]
 8004378:	3304      	adds	r3, #4
 800437a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800437c:	f006 fa44 	bl	800a808 <USB_DevInit>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d005      	beq.n	8004392 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2202      	movs	r2, #2
 800438a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e013      	b.n	80043ba <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	7b1b      	ldrb	r3, [r3, #12]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d102      	bne.n	80043ae <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f001 f959 	bl	8005660 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f007 fa95 	bl	800b8e2 <USB_DevDisconnect>

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b082      	sub	sp, #8
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d101      	bne.n	80043d8 <HAL_PCD_Start+0x16>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e012      	b.n	80043fe <HAL_PCD_Start+0x3c>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f006 f9a1 	bl	800a72c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f007 fa56 	bl	800b8a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004406:	b590      	push	{r4, r7, lr}
 8004408:	b08d      	sub	sp, #52	@ 0x34
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4618      	mov	r0, r3
 800441e:	f007 fb14 	bl	800ba4a <USB_GetMode>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	f040 84b9 	bne.w	8004d9c <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4618      	mov	r0, r3
 8004430:	f007 fa78 	bl	800b924 <USB_ReadInterrupts>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 84af 	beq.w	8004d9a <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	0a1b      	lsrs	r3, r3, #8
 8004446:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4618      	mov	r0, r3
 8004456:	f007 fa65 	bl	800b924 <USB_ReadInterrupts>
 800445a:	4603      	mov	r3, r0
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b02      	cmp	r3, #2
 8004462:	d107      	bne.n	8004474 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	695a      	ldr	r2, [r3, #20]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f002 0202 	and.w	r2, r2, #2
 8004472:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4618      	mov	r0, r3
 800447a:	f007 fa53 	bl	800b924 <USB_ReadInterrupts>
 800447e:	4603      	mov	r3, r0
 8004480:	f003 0310 	and.w	r3, r3, #16
 8004484:	2b10      	cmp	r3, #16
 8004486:	d161      	bne.n	800454c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	699a      	ldr	r2, [r3, #24]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0210 	bic.w	r2, r2, #16
 8004496:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	f003 020f 	and.w	r2, r3, #15
 80044a4:	4613      	mov	r3, r2
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	4413      	add	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	4413      	add	r3, r2
 80044b4:	3304      	adds	r3, #4
 80044b6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80044be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80044c2:	d124      	bne.n	800450e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80044ca:	4013      	ands	r3, r2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d035      	beq.n	800453c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	091b      	lsrs	r3, r3, #4
 80044d8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80044da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044de:	b29b      	uxth	r3, r3
 80044e0:	461a      	mov	r2, r3
 80044e2:	6a38      	ldr	r0, [r7, #32]
 80044e4:	f007 f88a 	bl	800b5fc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	68da      	ldr	r2, [r3, #12]
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	091b      	lsrs	r3, r3, #4
 80044f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044f4:	441a      	add	r2, r3
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	695a      	ldr	r2, [r3, #20]
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	091b      	lsrs	r3, r3, #4
 8004502:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004506:	441a      	add	r2, r3
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	615a      	str	r2, [r3, #20]
 800450c:	e016      	b.n	800453c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004514:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004518:	d110      	bne.n	800453c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004520:	2208      	movs	r2, #8
 8004522:	4619      	mov	r1, r3
 8004524:	6a38      	ldr	r0, [r7, #32]
 8004526:	f007 f869 	bl	800b5fc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	695a      	ldr	r2, [r3, #20]
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	091b      	lsrs	r3, r3, #4
 8004532:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004536:	441a      	add	r2, r3
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	699a      	ldr	r2, [r3, #24]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 0210 	orr.w	r2, r2, #16
 800454a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4618      	mov	r0, r3
 8004552:	f007 f9e7 	bl	800b924 <USB_ReadInterrupts>
 8004556:	4603      	mov	r3, r0
 8004558:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800455c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004560:	f040 80a7 	bne.w	80046b2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4618      	mov	r0, r3
 800456e:	f007 f9ec 	bl	800b94a <USB_ReadDevAllOutEpInterrupt>
 8004572:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004574:	e099      	b.n	80046aa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 808e 	beq.w	800469e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004588:	b2d2      	uxtb	r2, r2
 800458a:	4611      	mov	r1, r2
 800458c:	4618      	mov	r0, r3
 800458e:	f007 fa10 	bl	800b9b2 <USB_ReadDevOutEPInterrupt>
 8004592:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00c      	beq.n	80045b8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800459e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045aa:	461a      	mov	r2, r3
 80045ac:	2301      	movs	r3, #1
 80045ae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80045b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 fece 	bl	8005354 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00c      	beq.n	80045dc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80045c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ce:	461a      	mov	r2, r3
 80045d0:	2308      	movs	r3, #8
 80045d2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80045d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 ffa4 	bl	8005524 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	f003 0310 	and.w	r3, r3, #16
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d008      	beq.n	80045f8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80045e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e8:	015a      	lsls	r2, r3, #5
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	4413      	add	r3, r2
 80045ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045f2:	461a      	mov	r2, r3
 80045f4:	2310      	movs	r3, #16
 80045f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d030      	beq.n	8004664 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800460a:	2b80      	cmp	r3, #128	@ 0x80
 800460c:	d109      	bne.n	8004622 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	69fa      	ldr	r2, [r7, #28]
 8004618:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800461c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004620:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004624:	4613      	mov	r3, r2
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	4413      	add	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	4413      	add	r3, r2
 8004634:	3304      	adds	r3, #4
 8004636:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	78db      	ldrb	r3, [r3, #3]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d108      	bne.n	8004652 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	2200      	movs	r2, #0
 8004644:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004648:	b2db      	uxtb	r3, r3
 800464a:	4619      	mov	r1, r3
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f009 fff1 	bl	800e634 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	4413      	add	r3, r2
 800465a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800465e:	461a      	mov	r2, r3
 8004660:	2302      	movs	r3, #2
 8004662:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f003 0320 	and.w	r3, r3, #32
 800466a:	2b00      	cmp	r3, #0
 800466c:	d008      	beq.n	8004680 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800466e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004670:	015a      	lsls	r2, r3, #5
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	4413      	add	r3, r2
 8004676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800467a:	461a      	mov	r2, r3
 800467c:	2320      	movs	r3, #32
 800467e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d009      	beq.n	800469e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800468a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	4413      	add	r3, r2
 8004692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004696:	461a      	mov	r2, r3
 8004698:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800469c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800469e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a0:	3301      	adds	r3, #1
 80046a2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80046a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a6:	085b      	lsrs	r3, r3, #1
 80046a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80046aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f47f af62 	bne.w	8004576 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f007 f934 	bl	800b924 <USB_ReadInterrupts>
 80046bc:	4603      	mov	r3, r0
 80046be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80046c6:	f040 80db 	bne.w	8004880 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f007 f955 	bl	800b97e <USB_ReadDevAllInEpInterrupt>
 80046d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80046d6:	2300      	movs	r3, #0
 80046d8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80046da:	e0cd      	b.n	8004878 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80046dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 80c2 	beq.w	800486c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	4611      	mov	r1, r2
 80046f2:	4618      	mov	r0, r3
 80046f4:	f007 f97b 	bl	800b9ee <USB_ReadDevInEPInterrupt>
 80046f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b00      	cmp	r3, #0
 8004702:	d057      	beq.n	80047b4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	2201      	movs	r2, #1
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004718:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	43db      	mvns	r3, r3
 800471e:	69f9      	ldr	r1, [r7, #28]
 8004720:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004724:	4013      	ands	r3, r2
 8004726:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	4413      	add	r3, r2
 8004730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004734:	461a      	mov	r2, r3
 8004736:	2301      	movs	r3, #1
 8004738:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	799b      	ldrb	r3, [r3, #6]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d132      	bne.n	80047a8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004746:	4613      	mov	r3, r2
 8004748:	00db      	lsls	r3, r3, #3
 800474a:	4413      	add	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	440b      	add	r3, r1
 8004750:	3320      	adds	r3, #32
 8004752:	6819      	ldr	r1, [r3, #0]
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004758:	4613      	mov	r3, r2
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	4413      	add	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4403      	add	r3, r0
 8004762:	331c      	adds	r3, #28
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4419      	add	r1, r3
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800476c:	4613      	mov	r3, r2
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	4413      	add	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4403      	add	r3, r0
 8004776:	3320      	adds	r3, #32
 8004778:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800477a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477c:	2b00      	cmp	r3, #0
 800477e:	d113      	bne.n	80047a8 <HAL_PCD_IRQHandler+0x3a2>
 8004780:	6879      	ldr	r1, [r7, #4]
 8004782:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004784:	4613      	mov	r3, r2
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	4413      	add	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	440b      	add	r3, r1
 800478e:	3324      	adds	r3, #36	@ 0x24
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d108      	bne.n	80047a8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6818      	ldr	r0, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80047a0:	461a      	mov	r2, r3
 80047a2:	2101      	movs	r1, #1
 80047a4:	f007 f984 	bl	800bab0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80047a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	4619      	mov	r1, r3
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f009 febb 	bl	800e52a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	f003 0308 	and.w	r3, r3, #8
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d008      	beq.n	80047d0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80047be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047ca:	461a      	mov	r2, r3
 80047cc:	2308      	movs	r3, #8
 80047ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	f003 0310 	and.w	r3, r3, #16
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d008      	beq.n	80047ec <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80047da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047e6:	461a      	mov	r2, r3
 80047e8:	2310      	movs	r3, #16
 80047ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d008      	beq.n	8004808 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80047f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004802:	461a      	mov	r2, r3
 8004804:	2340      	movs	r3, #64	@ 0x40
 8004806:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d023      	beq.n	800485a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004812:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004814:	6a38      	ldr	r0, [r7, #32]
 8004816:	f006 f967 	bl	800aae8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800481a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800481c:	4613      	mov	r3, r2
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	4413      	add	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	3310      	adds	r3, #16
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	4413      	add	r3, r2
 800482a:	3304      	adds	r3, #4
 800482c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	78db      	ldrb	r3, [r3, #3]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d108      	bne.n	8004848 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2200      	movs	r2, #0
 800483a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800483c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483e:	b2db      	uxtb	r3, r3
 8004840:	4619      	mov	r1, r3
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f009 ff08 	bl	800e658 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004854:	461a      	mov	r2, r3
 8004856:	2302      	movs	r3, #2
 8004858:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004860:	2b00      	cmp	r3, #0
 8004862:	d003      	beq.n	800486c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004864:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fce8 	bl	800523c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800486c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486e:	3301      	adds	r3, #1
 8004870:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004874:	085b      	lsrs	r3, r3, #1
 8004876:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800487a:	2b00      	cmp	r3, #0
 800487c:	f47f af2e 	bne.w	80046dc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4618      	mov	r0, r3
 8004886:	f007 f84d 	bl	800b924 <USB_ReadInterrupts>
 800488a:	4603      	mov	r3, r0
 800488c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004890:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004894:	d122      	bne.n	80048dc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	69fa      	ldr	r2, [r7, #28]
 80048a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048a4:	f023 0301 	bic.w	r3, r3, #1
 80048a8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d108      	bne.n	80048c6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80048bc:	2100      	movs	r1, #0
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f00a f886 	bl	800e9d0 <HAL_PCDEx_LPM_Callback>
 80048c4:	e002      	b.n	80048cc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f009 fea6 	bl	800e618 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	695a      	ldr	r2, [r3, #20]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80048da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f007 f81f 	bl	800b924 <USB_ReadInterrupts>
 80048e6:	4603      	mov	r3, r0
 80048e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048f0:	d112      	bne.n	8004918 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d102      	bne.n	8004908 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f009 fe62 	bl	800e5cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695a      	ldr	r2, [r3, #20]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004916:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4618      	mov	r0, r3
 800491e:	f007 f801 	bl	800b924 <USB_ReadInterrupts>
 8004922:	4603      	mov	r3, r0
 8004924:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004928:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800492c:	d121      	bne.n	8004972 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	695a      	ldr	r2, [r3, #20]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800493c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004944:	2b00      	cmp	r3, #0
 8004946:	d111      	bne.n	800496c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004956:	089b      	lsrs	r3, r3, #2
 8004958:	f003 020f 	and.w	r2, r3, #15
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004962:	2101      	movs	r1, #1
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f00a f833 	bl	800e9d0 <HAL_PCDEx_LPM_Callback>
 800496a:	e002      	b.n	8004972 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f009 fe2d 	bl	800e5cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4618      	mov	r0, r3
 8004978:	f006 ffd4 	bl	800b924 <USB_ReadInterrupts>
 800497c:	4603      	mov	r3, r0
 800497e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004982:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004986:	f040 80b7 	bne.w	8004af8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	69fa      	ldr	r2, [r7, #28]
 8004994:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004998:	f023 0301 	bic.w	r3, r3, #1
 800499c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2110      	movs	r1, #16
 80049a4:	4618      	mov	r0, r3
 80049a6:	f006 f89f 	bl	800aae8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049aa:	2300      	movs	r3, #0
 80049ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049ae:	e046      	b.n	8004a3e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80049b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049bc:	461a      	mov	r2, r3
 80049be:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80049c2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80049c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049d4:	0151      	lsls	r1, r2, #5
 80049d6:	69fa      	ldr	r2, [r7, #28]
 80049d8:	440a      	add	r2, r1
 80049da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80049e2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80049e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049f0:	461a      	mov	r2, r3
 80049f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80049f6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80049f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a08:	0151      	lsls	r1, r2, #5
 8004a0a:	69fa      	ldr	r2, [r7, #28]
 8004a0c:	440a      	add	r2, r1
 8004a0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a16:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a28:	0151      	lsls	r1, r2, #5
 8004a2a:	69fa      	ldr	r2, [r7, #28]
 8004a2c:	440a      	add	r2, r1
 8004a2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a32:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004a36:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	791b      	ldrb	r3, [r3, #4]
 8004a42:	461a      	mov	r2, r3
 8004a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d3b2      	bcc.n	80049b0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	69fa      	ldr	r2, [r7, #28]
 8004a54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a58:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004a5c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	7bdb      	ldrb	r3, [r3, #15]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d016      	beq.n	8004a94 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a76:	f043 030b 	orr.w	r3, r3, #11
 8004a7a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a86:	69fa      	ldr	r2, [r7, #28]
 8004a88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a8c:	f043 030b 	orr.w	r3, r3, #11
 8004a90:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a92:	e015      	b.n	8004ac0 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a9a:	695a      	ldr	r2, [r3, #20]
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	f242 032b 	movw	r3, #8235	@ 0x202b
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	69fa      	ldr	r2, [r7, #28]
 8004ab6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004aba:	f043 030b 	orr.w	r3, r3, #11
 8004abe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	69fa      	ldr	r2, [r7, #28]
 8004aca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ace:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004ad2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6818      	ldr	r0, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	f006 ffe4 	bl	800bab0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695a      	ldr	r2, [r3, #20]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004af6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f006 ff11 	bl	800b924 <USB_ReadInterrupts>
 8004b02:	4603      	mov	r3, r0
 8004b04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b0c:	d123      	bne.n	8004b56 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f006 ffa8 	bl	800ba68 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f006 f85c 	bl	800abda <USB_GetDevSpeed>
 8004b22:	4603      	mov	r3, r0
 8004b24:	461a      	mov	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681c      	ldr	r4, [r3, #0]
 8004b2e:	f001 fab1 	bl	8006094 <HAL_RCC_GetHCLKFreq>
 8004b32:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004b38:	461a      	mov	r2, r3
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	f005 fd54 	bl	800a5e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f009 fd1a 	bl	800e57a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	695a      	ldr	r2, [r3, #20]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004b54:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f006 fee2 	bl	800b924 <USB_ReadInterrupts>
 8004b60:	4603      	mov	r3, r0
 8004b62:	f003 0308 	and.w	r3, r3, #8
 8004b66:	2b08      	cmp	r3, #8
 8004b68:	d10a      	bne.n	8004b80 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f009 fcf7 	bl	800e55e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	695a      	ldr	r2, [r3, #20]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f002 0208 	and.w	r2, r2, #8
 8004b7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f006 fecd 	bl	800b924 <USB_ReadInterrupts>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b90:	2b80      	cmp	r3, #128	@ 0x80
 8004b92:	d123      	bne.n	8004bdc <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ba4:	e014      	b.n	8004bd0 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004ba6:	6879      	ldr	r1, [r7, #4]
 8004ba8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004baa:	4613      	mov	r3, r2
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	4413      	add	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	440b      	add	r3, r1
 8004bb4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d105      	bne.n	8004bca <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 fb08 	bl	80051da <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bcc:	3301      	adds	r3, #1
 8004bce:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	791b      	ldrb	r3, [r3, #4]
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d3e4      	bcc.n	8004ba6 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f006 fe9f 	bl	800b924 <USB_ReadInterrupts>
 8004be6:	4603      	mov	r3, r0
 8004be8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bf0:	d13c      	bne.n	8004c6c <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bf6:	e02b      	b.n	8004c50 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	440b      	add	r3, r1
 8004c16:	3318      	adds	r3, #24
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d115      	bne.n	8004c4a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004c1e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	da12      	bge.n	8004c4a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c28:	4613      	mov	r3, r2
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	4413      	add	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	440b      	add	r3, r1
 8004c32:	3317      	adds	r3, #23
 8004c34:	2201      	movs	r2, #1
 8004c36:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	4619      	mov	r1, r3
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 fac8 	bl	80051da <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	791b      	ldrb	r3, [r3, #4]
 8004c54:	461a      	mov	r2, r3
 8004c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d3cd      	bcc.n	8004bf8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695a      	ldr	r2, [r3, #20]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004c6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f006 fe57 	bl	800b924 <USB_ReadInterrupts>
 8004c76:	4603      	mov	r3, r0
 8004c78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c80:	d156      	bne.n	8004d30 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c82:	2301      	movs	r3, #1
 8004c84:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c86:	e045      	b.n	8004d14 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c98:	6879      	ldr	r1, [r7, #4]
 8004c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	4413      	add	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	440b      	add	r3, r1
 8004ca6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d12e      	bne.n	8004d0e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004cb0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	da2b      	bge.n	8004d0e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004cc2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d121      	bne.n	8004d0e <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cce:	4613      	mov	r3, r2
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	440b      	add	r3, r1
 8004cd8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004cdc:	2201      	movs	r2, #1
 8004cde:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004ce8:	6a3b      	ldr	r3, [r7, #32]
 8004cea:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10a      	bne.n	8004d0e <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	69fa      	ldr	r2, [r7, #28]
 8004d02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d0a:	6053      	str	r3, [r2, #4]
            break;
 8004d0c:	e008      	b.n	8004d20 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d10:	3301      	adds	r3, #1
 8004d12:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	791b      	ldrb	r3, [r3, #4]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d3b3      	bcc.n	8004c88 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	695a      	ldr	r2, [r3, #20]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004d2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f006 fdf5 	bl	800b924 <USB_ReadInterrupts>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d44:	d10a      	bne.n	8004d5c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f009 fc98 	bl	800e67c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	695a      	ldr	r2, [r3, #20]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004d5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f006 fddf 	bl	800b924 <USB_ReadInterrupts>
 8004d66:	4603      	mov	r3, r0
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b04      	cmp	r3, #4
 8004d6e:	d115      	bne.n	8004d9c <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	f003 0304 	and.w	r3, r3, #4
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d002      	beq.n	8004d88 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f009 fc88 	bl	800e698 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6859      	ldr	r1, [r3, #4]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	430a      	orrs	r2, r1
 8004d96:	605a      	str	r2, [r3, #4]
 8004d98:	e000      	b.n	8004d9c <HAL_PCD_IRQHandler+0x996>
      return;
 8004d9a:	bf00      	nop
    }
  }
}
 8004d9c:	3734      	adds	r7, #52	@ 0x34
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd90      	pop	{r4, r7, pc}

08004da2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b082      	sub	sp, #8
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
 8004daa:	460b      	mov	r3, r1
 8004dac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d101      	bne.n	8004dbc <HAL_PCD_SetAddress+0x1a>
 8004db8:	2302      	movs	r3, #2
 8004dba:	e012      	b.n	8004de2 <HAL_PCD_SetAddress+0x40>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	78fa      	ldrb	r2, [r7, #3]
 8004dc8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	78fa      	ldrb	r2, [r7, #3]
 8004dd0:	4611      	mov	r1, r2
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f006 fd3e 	bl	800b854 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b084      	sub	sp, #16
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
 8004df2:	4608      	mov	r0, r1
 8004df4:	4611      	mov	r1, r2
 8004df6:	461a      	mov	r2, r3
 8004df8:	4603      	mov	r3, r0
 8004dfa:	70fb      	strb	r3, [r7, #3]
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	803b      	strh	r3, [r7, #0]
 8004e00:	4613      	mov	r3, r2
 8004e02:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004e04:	2300      	movs	r3, #0
 8004e06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	da0f      	bge.n	8004e30 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e10:	78fb      	ldrb	r3, [r7, #3]
 8004e12:	f003 020f 	and.w	r2, r3, #15
 8004e16:	4613      	mov	r3, r2
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	4413      	add	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	3310      	adds	r3, #16
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	4413      	add	r3, r2
 8004e24:	3304      	adds	r3, #4
 8004e26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	705a      	strb	r2, [r3, #1]
 8004e2e:	e00f      	b.n	8004e50 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e30:	78fb      	ldrb	r3, [r7, #3]
 8004e32:	f003 020f 	and.w	r2, r3, #15
 8004e36:	4613      	mov	r3, r2
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	4413      	add	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	4413      	add	r3, r2
 8004e46:	3304      	adds	r3, #4
 8004e48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004e50:	78fb      	ldrb	r3, [r7, #3]
 8004e52:	f003 030f 	and.w	r3, r3, #15
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004e5c:	883a      	ldrh	r2, [r7, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	78ba      	ldrb	r2, [r7, #2]
 8004e66:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	785b      	ldrb	r3, [r3, #1]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d004      	beq.n	8004e7a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	461a      	mov	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004e7a:	78bb      	ldrb	r3, [r7, #2]
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d102      	bne.n	8004e86 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d101      	bne.n	8004e94 <HAL_PCD_EP_Open+0xaa>
 8004e90:	2302      	movs	r3, #2
 8004e92:	e00e      	b.n	8004eb2 <HAL_PCD_EP_Open+0xc8>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68f9      	ldr	r1, [r7, #12]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f005 febe 	bl	800ac24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004eb0:	7afb      	ldrb	r3, [r7, #11]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b084      	sub	sp, #16
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ec6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	da0f      	bge.n	8004eee <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ece:	78fb      	ldrb	r3, [r7, #3]
 8004ed0:	f003 020f 	and.w	r2, r3, #15
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	4413      	add	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	3310      	adds	r3, #16
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	705a      	strb	r2, [r3, #1]
 8004eec:	e00f      	b.n	8004f0e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004eee:	78fb      	ldrb	r3, [r7, #3]
 8004ef0:	f003 020f 	and.w	r2, r3, #15
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	4413      	add	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	4413      	add	r3, r2
 8004f04:	3304      	adds	r3, #4
 8004f06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f0e:	78fb      	ldrb	r3, [r7, #3]
 8004f10:	f003 030f 	and.w	r3, r3, #15
 8004f14:	b2da      	uxtb	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_PCD_EP_Close+0x6e>
 8004f24:	2302      	movs	r3, #2
 8004f26:	e00e      	b.n	8004f46 <HAL_PCD_EP_Close+0x8c>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68f9      	ldr	r1, [r7, #12]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f005 fefc 	bl	800ad34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b086      	sub	sp, #24
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	60f8      	str	r0, [r7, #12]
 8004f56:	607a      	str	r2, [r7, #4]
 8004f58:	603b      	str	r3, [r7, #0]
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f5e:	7afb      	ldrb	r3, [r7, #11]
 8004f60:	f003 020f 	and.w	r2, r3, #15
 8004f64:	4613      	mov	r3, r2
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	4413      	add	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4413      	add	r3, r2
 8004f74:	3304      	adds	r3, #4
 8004f76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2200      	movs	r2, #0
 8004f88:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f90:	7afb      	ldrb	r3, [r7, #11]
 8004f92:	f003 030f 	and.w	r3, r3, #15
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	799b      	ldrb	r3, [r3, #6]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d102      	bne.n	8004faa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6818      	ldr	r0, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	799b      	ldrb	r3, [r3, #6]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	6979      	ldr	r1, [r7, #20]
 8004fb6:	f005 ff99 	bl	800aeec <USB_EPStartXfer>

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3718      	adds	r7, #24
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	460b      	mov	r3, r1
 8004fce:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004fd0:	78fb      	ldrb	r3, [r7, #3]
 8004fd2:	f003 020f 	and.w	r2, r3, #15
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	4413      	add	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	440b      	add	r3, r1
 8004fe2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004fe6:	681b      	ldr	r3, [r3, #0]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	607a      	str	r2, [r7, #4]
 8004ffe:	603b      	str	r3, [r7, #0]
 8005000:	460b      	mov	r3, r1
 8005002:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005004:	7afb      	ldrb	r3, [r7, #11]
 8005006:	f003 020f 	and.w	r2, r3, #15
 800500a:	4613      	mov	r3, r2
 800500c:	00db      	lsls	r3, r3, #3
 800500e:	4413      	add	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	3310      	adds	r3, #16
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	4413      	add	r3, r2
 8005018:	3304      	adds	r3, #4
 800501a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	2200      	movs	r2, #0
 800502c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	2201      	movs	r2, #1
 8005032:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005034:	7afb      	ldrb	r3, [r7, #11]
 8005036:	f003 030f 	and.w	r3, r3, #15
 800503a:	b2da      	uxtb	r2, r3
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	799b      	ldrb	r3, [r3, #6]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d102      	bne.n	800504e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6818      	ldr	r0, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	799b      	ldrb	r3, [r3, #6]
 8005056:	461a      	mov	r2, r3
 8005058:	6979      	ldr	r1, [r7, #20]
 800505a:	f005 ff47 	bl	800aeec <USB_EPStartXfer>

  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3718      	adds	r7, #24
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	460b      	mov	r3, r1
 8005072:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005074:	78fb      	ldrb	r3, [r7, #3]
 8005076:	f003 030f 	and.w	r3, r3, #15
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	7912      	ldrb	r2, [r2, #4]
 800507e:	4293      	cmp	r3, r2
 8005080:	d901      	bls.n	8005086 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e04f      	b.n	8005126 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005086:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800508a:	2b00      	cmp	r3, #0
 800508c:	da0f      	bge.n	80050ae <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800508e:	78fb      	ldrb	r3, [r7, #3]
 8005090:	f003 020f 	and.w	r2, r3, #15
 8005094:	4613      	mov	r3, r2
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	4413      	add	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	3310      	adds	r3, #16
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	4413      	add	r3, r2
 80050a2:	3304      	adds	r3, #4
 80050a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2201      	movs	r2, #1
 80050aa:	705a      	strb	r2, [r3, #1]
 80050ac:	e00d      	b.n	80050ca <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80050ae:	78fa      	ldrb	r2, [r7, #3]
 80050b0:	4613      	mov	r3, r2
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	4413      	add	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	4413      	add	r3, r2
 80050c0:	3304      	adds	r3, #4
 80050c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2201      	movs	r2, #1
 80050ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050d0:	78fb      	ldrb	r3, [r7, #3]
 80050d2:	f003 030f 	and.w	r3, r3, #15
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d101      	bne.n	80050ea <HAL_PCD_EP_SetStall+0x82>
 80050e6:	2302      	movs	r3, #2
 80050e8:	e01d      	b.n	8005126 <HAL_PCD_EP_SetStall+0xbe>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68f9      	ldr	r1, [r7, #12]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f006 fad7 	bl	800b6ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80050fe:	78fb      	ldrb	r3, [r7, #3]
 8005100:	f003 030f 	and.w	r3, r3, #15
 8005104:	2b00      	cmp	r3, #0
 8005106:	d109      	bne.n	800511c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6818      	ldr	r0, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	7999      	ldrb	r1, [r3, #6]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005116:	461a      	mov	r2, r3
 8005118:	f006 fcca 	bl	800bab0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b084      	sub	sp, #16
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	460b      	mov	r3, r1
 8005138:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800513a:	78fb      	ldrb	r3, [r7, #3]
 800513c:	f003 030f 	and.w	r3, r3, #15
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	7912      	ldrb	r2, [r2, #4]
 8005144:	4293      	cmp	r3, r2
 8005146:	d901      	bls.n	800514c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e042      	b.n	80051d2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800514c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005150:	2b00      	cmp	r3, #0
 8005152:	da0f      	bge.n	8005174 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005154:	78fb      	ldrb	r3, [r7, #3]
 8005156:	f003 020f 	and.w	r2, r3, #15
 800515a:	4613      	mov	r3, r2
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	4413      	add	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	3310      	adds	r3, #16
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	4413      	add	r3, r2
 8005168:	3304      	adds	r3, #4
 800516a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2201      	movs	r2, #1
 8005170:	705a      	strb	r2, [r3, #1]
 8005172:	e00f      	b.n	8005194 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005174:	78fb      	ldrb	r3, [r7, #3]
 8005176:	f003 020f 	and.w	r2, r3, #15
 800517a:	4613      	mov	r3, r2
 800517c:	00db      	lsls	r3, r3, #3
 800517e:	4413      	add	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	4413      	add	r3, r2
 800518a:	3304      	adds	r3, #4
 800518c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800519a:	78fb      	ldrb	r3, [r7, #3]
 800519c:	f003 030f 	and.w	r3, r3, #15
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_PCD_EP_ClrStall+0x86>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e00e      	b.n	80051d2 <HAL_PCD_EP_ClrStall+0xa4>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68f9      	ldr	r1, [r7, #12]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f006 fae0 	bl	800b788 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b084      	sub	sp, #16
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
 80051e2:	460b      	mov	r3, r1
 80051e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80051e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	da0c      	bge.n	8005208 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051ee:	78fb      	ldrb	r3, [r7, #3]
 80051f0:	f003 020f 	and.w	r2, r3, #15
 80051f4:	4613      	mov	r3, r2
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	4413      	add	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	3310      	adds	r3, #16
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	4413      	add	r3, r2
 8005202:	3304      	adds	r3, #4
 8005204:	60fb      	str	r3, [r7, #12]
 8005206:	e00c      	b.n	8005222 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005208:	78fb      	ldrb	r3, [r7, #3]
 800520a:	f003 020f 	and.w	r2, r3, #15
 800520e:	4613      	mov	r3, r2
 8005210:	00db      	lsls	r3, r3, #3
 8005212:	4413      	add	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	4413      	add	r3, r2
 800521e:	3304      	adds	r3, #4
 8005220:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68f9      	ldr	r1, [r7, #12]
 8005228:	4618      	mov	r0, r3
 800522a:	f006 f8ff 	bl	800b42c <USB_EPStopXfer>
 800522e:	4603      	mov	r3, r0
 8005230:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005232:	7afb      	ldrb	r3, [r7, #11]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b08a      	sub	sp, #40	@ 0x28
 8005240:	af02      	add	r7, sp, #8
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	4613      	mov	r3, r2
 8005254:	00db      	lsls	r3, r3, #3
 8005256:	4413      	add	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	3310      	adds	r3, #16
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	4413      	add	r3, r2
 8005260:	3304      	adds	r3, #4
 8005262:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	695a      	ldr	r2, [r3, #20]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	429a      	cmp	r2, r3
 800526e:	d901      	bls.n	8005274 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e06b      	b.n	800534c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	691a      	ldr	r2, [r3, #16]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	69fa      	ldr	r2, [r7, #28]
 8005286:	429a      	cmp	r2, r3
 8005288:	d902      	bls.n	8005290 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	3303      	adds	r3, #3
 8005294:	089b      	lsrs	r3, r3, #2
 8005296:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005298:	e02a      	b.n	80052f0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	691a      	ldr	r2, [r3, #16]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	69fa      	ldr	r2, [r7, #28]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d902      	bls.n	80052b6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	3303      	adds	r3, #3
 80052ba:	089b      	lsrs	r3, r3, #2
 80052bc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	68d9      	ldr	r1, [r3, #12]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80052ce:	9300      	str	r3, [sp, #0]
 80052d0:	4603      	mov	r3, r0
 80052d2:	6978      	ldr	r0, [r7, #20]
 80052d4:	f006 f954 	bl	800b580 <USB_WritePacket>

    ep->xfer_buff  += len;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	68da      	ldr	r2, [r3, #12]
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	441a      	add	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	695a      	ldr	r2, [r3, #20]
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	441a      	add	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	429a      	cmp	r2, r3
 8005304:	d809      	bhi.n	800531a <PCD_WriteEmptyTxFifo+0xde>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	695a      	ldr	r2, [r3, #20]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800530e:	429a      	cmp	r2, r3
 8005310:	d203      	bcs.n	800531a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1bf      	bne.n	800529a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	691a      	ldr	r2, [r3, #16]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	429a      	cmp	r2, r3
 8005324:	d811      	bhi.n	800534a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	f003 030f 	and.w	r3, r3, #15
 800532c:	2201      	movs	r2, #1
 800532e:	fa02 f303 	lsl.w	r3, r2, r3
 8005332:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800533a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	43db      	mvns	r3, r3
 8005340:	6939      	ldr	r1, [r7, #16]
 8005342:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005346:	4013      	ands	r3, r2
 8005348:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3720      	adds	r7, #32
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b088      	sub	sp, #32
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	333c      	adds	r3, #60	@ 0x3c
 800536c:	3304      	adds	r3, #4
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	015a      	lsls	r2, r3, #5
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	4413      	add	r3, r2
 800537a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	799b      	ldrb	r3, [r3, #6]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d17b      	bne.n	8005482 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f003 0308 	and.w	r3, r3, #8
 8005390:	2b00      	cmp	r3, #0
 8005392:	d015      	beq.n	80053c0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	4a61      	ldr	r2, [pc, #388]	@ (800551c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005398:	4293      	cmp	r3, r2
 800539a:	f240 80b9 	bls.w	8005510 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 80b3 	beq.w	8005510 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	015a      	lsls	r2, r3, #5
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	4413      	add	r3, r2
 80053b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053b6:	461a      	mov	r2, r3
 80053b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053bc:	6093      	str	r3, [r2, #8]
 80053be:	e0a7      	b.n	8005510 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f003 0320 	and.w	r3, r3, #32
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d009      	beq.n	80053de <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053d6:	461a      	mov	r2, r3
 80053d8:	2320      	movs	r3, #32
 80053da:	6093      	str	r3, [r2, #8]
 80053dc:	e098      	b.n	8005510 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f040 8093 	bne.w	8005510 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	4a4b      	ldr	r2, [pc, #300]	@ (800551c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d90f      	bls.n	8005412 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00a      	beq.n	8005412 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	4413      	add	r3, r2
 8005404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005408:	461a      	mov	r2, r3
 800540a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800540e:	6093      	str	r3, [r2, #8]
 8005410:	e07e      	b.n	8005510 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	4613      	mov	r3, r2
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	4413      	add	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	4413      	add	r3, r2
 8005424:	3304      	adds	r3, #4
 8005426:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6a1a      	ldr	r2, [r3, #32]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	0159      	lsls	r1, r3, #5
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	440b      	add	r3, r1
 8005434:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800543e:	1ad2      	subs	r2, r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d114      	bne.n	8005474 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d109      	bne.n	8005466 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6818      	ldr	r0, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800545c:	461a      	mov	r2, r3
 800545e:	2101      	movs	r1, #1
 8005460:	f006 fb26 	bl	800bab0 <USB_EP0_OutStart>
 8005464:	e006      	b.n	8005474 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	68da      	ldr	r2, [r3, #12]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	441a      	add	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	b2db      	uxtb	r3, r3
 8005478:	4619      	mov	r1, r3
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f009 f83a 	bl	800e4f4 <HAL_PCD_DataOutStageCallback>
 8005480:	e046      	b.n	8005510 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	4a26      	ldr	r2, [pc, #152]	@ (8005520 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d124      	bne.n	80054d4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00a      	beq.n	80054aa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054a0:	461a      	mov	r2, r3
 80054a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054a6:	6093      	str	r3, [r2, #8]
 80054a8:	e032      	b.n	8005510 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	f003 0320 	and.w	r3, r3, #32
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d008      	beq.n	80054c6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054c0:	461a      	mov	r2, r3
 80054c2:	2320      	movs	r3, #32
 80054c4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	4619      	mov	r1, r3
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f009 f811 	bl	800e4f4 <HAL_PCD_DataOutStageCallback>
 80054d2:	e01d      	b.n	8005510 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d114      	bne.n	8005504 <PCD_EP_OutXfrComplete_int+0x1b0>
 80054da:	6879      	ldr	r1, [r7, #4]
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	4613      	mov	r3, r2
 80054e0:	00db      	lsls	r3, r3, #3
 80054e2:	4413      	add	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	440b      	add	r3, r1
 80054e8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d108      	bne.n	8005504 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6818      	ldr	r0, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80054fc:	461a      	mov	r2, r3
 80054fe:	2100      	movs	r1, #0
 8005500:	f006 fad6 	bl	800bab0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	b2db      	uxtb	r3, r3
 8005508:	4619      	mov	r1, r3
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f008 fff2 	bl	800e4f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3720      	adds	r7, #32
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	4f54300a 	.word	0x4f54300a
 8005520:	4f54310a 	.word	0x4f54310a

08005524 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	333c      	adds	r3, #60	@ 0x3c
 800553c:	3304      	adds	r3, #4
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	4a15      	ldr	r2, [pc, #84]	@ (80055ac <PCD_EP_OutSetupPacket_int+0x88>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d90e      	bls.n	8005578 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005560:	2b00      	cmp	r3, #0
 8005562:	d009      	beq.n	8005578 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005570:	461a      	mov	r2, r3
 8005572:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005576:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f008 ffa9 	bl	800e4d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4a0a      	ldr	r2, [pc, #40]	@ (80055ac <PCD_EP_OutSetupPacket_int+0x88>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d90c      	bls.n	80055a0 <PCD_EP_OutSetupPacket_int+0x7c>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	799b      	ldrb	r3, [r3, #6]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d108      	bne.n	80055a0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005598:	461a      	mov	r2, r3
 800559a:	2101      	movs	r1, #1
 800559c:	f006 fa88 	bl	800bab0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3718      	adds	r7, #24
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	4f54300a 	.word	0x4f54300a

080055b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	460b      	mov	r3, r1
 80055ba:	70fb      	strb	r3, [r7, #3]
 80055bc:	4613      	mov	r3, r2
 80055be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80055c8:	78fb      	ldrb	r3, [r7, #3]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d107      	bne.n	80055de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80055ce:	883b      	ldrh	r3, [r7, #0]
 80055d0:	0419      	lsls	r1, r3, #16
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	430a      	orrs	r2, r1
 80055da:	629a      	str	r2, [r3, #40]	@ 0x28
 80055dc:	e028      	b.n	8005630 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e4:	0c1b      	lsrs	r3, r3, #16
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	4413      	add	r3, r2
 80055ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80055ec:	2300      	movs	r3, #0
 80055ee:	73fb      	strb	r3, [r7, #15]
 80055f0:	e00d      	b.n	800560e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	7bfb      	ldrb	r3, [r7, #15]
 80055f8:	3340      	adds	r3, #64	@ 0x40
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	0c1b      	lsrs	r3, r3, #16
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	4413      	add	r3, r2
 8005606:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005608:	7bfb      	ldrb	r3, [r7, #15]
 800560a:	3301      	adds	r3, #1
 800560c:	73fb      	strb	r3, [r7, #15]
 800560e:	7bfa      	ldrb	r2, [r7, #15]
 8005610:	78fb      	ldrb	r3, [r7, #3]
 8005612:	3b01      	subs	r3, #1
 8005614:	429a      	cmp	r2, r3
 8005616:	d3ec      	bcc.n	80055f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005618:	883b      	ldrh	r3, [r7, #0]
 800561a:	0418      	lsls	r0, r3, #16
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6819      	ldr	r1, [r3, #0]
 8005620:	78fb      	ldrb	r3, [r7, #3]
 8005622:	3b01      	subs	r3, #1
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	4302      	orrs	r2, r0
 8005628:	3340      	adds	r3, #64	@ 0x40
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	440b      	add	r3, r1
 800562e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
 8005646:	460b      	mov	r3, r1
 8005648:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	887a      	ldrh	r2, [r7, #2]
 8005650:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800568e:	4b05      	ldr	r3, [pc, #20]	@ (80056a4 <HAL_PCDEx_ActivateLPM+0x44>)
 8005690:	4313      	orrs	r3, r2
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	10000003 	.word	0x10000003

080056a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80056ae:	2300      	movs	r3, #0
 80056b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80056b2:	4b23      	ldr	r3, [pc, #140]	@ (8005740 <HAL_PWREx_EnableOverDrive+0x98>)
 80056b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b6:	4a22      	ldr	r2, [pc, #136]	@ (8005740 <HAL_PWREx_EnableOverDrive+0x98>)
 80056b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80056be:	4b20      	ldr	r3, [pc, #128]	@ (8005740 <HAL_PWREx_EnableOverDrive+0x98>)
 80056c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056c6:	603b      	str	r3, [r7, #0]
 80056c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80056ca:	4b1e      	ldr	r3, [pc, #120]	@ (8005744 <HAL_PWREx_EnableOverDrive+0x9c>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a1d      	ldr	r2, [pc, #116]	@ (8005744 <HAL_PWREx_EnableOverDrive+0x9c>)
 80056d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056d4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056d6:	f7fd fa97 	bl	8002c08 <HAL_GetTick>
 80056da:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80056dc:	e009      	b.n	80056f2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80056de:	f7fd fa93 	bl	8002c08 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80056ec:	d901      	bls.n	80056f2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e022      	b.n	8005738 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80056f2:	4b14      	ldr	r3, [pc, #80]	@ (8005744 <HAL_PWREx_EnableOverDrive+0x9c>)
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056fe:	d1ee      	bne.n	80056de <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005700:	4b10      	ldr	r3, [pc, #64]	@ (8005744 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a0f      	ldr	r2, [pc, #60]	@ (8005744 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005706:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800570a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800570c:	f7fd fa7c 	bl	8002c08 <HAL_GetTick>
 8005710:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005712:	e009      	b.n	8005728 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005714:	f7fd fa78 	bl	8002c08 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005722:	d901      	bls.n	8005728 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e007      	b.n	8005738 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005728:	4b06      	ldr	r3, [pc, #24]	@ (8005744 <HAL_PWREx_EnableOverDrive+0x9c>)
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005730:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005734:	d1ee      	bne.n	8005714 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	40023800 	.word	0x40023800
 8005744:	40007000 	.word	0x40007000

08005748 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005750:	2300      	movs	r3, #0
 8005752:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e291      	b.n	8005c82 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 8087 	beq.w	800587a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800576c:	4b96      	ldr	r3, [pc, #600]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f003 030c 	and.w	r3, r3, #12
 8005774:	2b04      	cmp	r3, #4
 8005776:	d00c      	beq.n	8005792 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005778:	4b93      	ldr	r3, [pc, #588]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f003 030c 	and.w	r3, r3, #12
 8005780:	2b08      	cmp	r3, #8
 8005782:	d112      	bne.n	80057aa <HAL_RCC_OscConfig+0x62>
 8005784:	4b90      	ldr	r3, [pc, #576]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800578c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005790:	d10b      	bne.n	80057aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005792:	4b8d      	ldr	r3, [pc, #564]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d06c      	beq.n	8005878 <HAL_RCC_OscConfig+0x130>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d168      	bne.n	8005878 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e26b      	b.n	8005c82 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057b2:	d106      	bne.n	80057c2 <HAL_RCC_OscConfig+0x7a>
 80057b4:	4b84      	ldr	r3, [pc, #528]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a83      	ldr	r2, [pc, #524]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 80057ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057be:	6013      	str	r3, [r2, #0]
 80057c0:	e02e      	b.n	8005820 <HAL_RCC_OscConfig+0xd8>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10c      	bne.n	80057e4 <HAL_RCC_OscConfig+0x9c>
 80057ca:	4b7f      	ldr	r3, [pc, #508]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a7e      	ldr	r2, [pc, #504]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 80057d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	4b7c      	ldr	r3, [pc, #496]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a7b      	ldr	r2, [pc, #492]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 80057dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057e0:	6013      	str	r3, [r2, #0]
 80057e2:	e01d      	b.n	8005820 <HAL_RCC_OscConfig+0xd8>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057ec:	d10c      	bne.n	8005808 <HAL_RCC_OscConfig+0xc0>
 80057ee:	4b76      	ldr	r3, [pc, #472]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a75      	ldr	r2, [pc, #468]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 80057f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	4b73      	ldr	r3, [pc, #460]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a72      	ldr	r2, [pc, #456]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 8005800:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005804:	6013      	str	r3, [r2, #0]
 8005806:	e00b      	b.n	8005820 <HAL_RCC_OscConfig+0xd8>
 8005808:	4b6f      	ldr	r3, [pc, #444]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a6e      	ldr	r2, [pc, #440]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 800580e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	4b6c      	ldr	r3, [pc, #432]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a6b      	ldr	r2, [pc, #428]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 800581a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800581e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d013      	beq.n	8005850 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005828:	f7fd f9ee 	bl	8002c08 <HAL_GetTick>
 800582c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800582e:	e008      	b.n	8005842 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005830:	f7fd f9ea 	bl	8002c08 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	2b64      	cmp	r3, #100	@ 0x64
 800583c:	d901      	bls.n	8005842 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e21f      	b.n	8005c82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005842:	4b61      	ldr	r3, [pc, #388]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0f0      	beq.n	8005830 <HAL_RCC_OscConfig+0xe8>
 800584e:	e014      	b.n	800587a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005850:	f7fd f9da 	bl	8002c08 <HAL_GetTick>
 8005854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005856:	e008      	b.n	800586a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005858:	f7fd f9d6 	bl	8002c08 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b64      	cmp	r3, #100	@ 0x64
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e20b      	b.n	8005c82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800586a:	4b57      	ldr	r3, [pc, #348]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1f0      	bne.n	8005858 <HAL_RCC_OscConfig+0x110>
 8005876:	e000      	b.n	800587a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d069      	beq.n	800595a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005886:	4b50      	ldr	r3, [pc, #320]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f003 030c 	and.w	r3, r3, #12
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00b      	beq.n	80058aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005892:	4b4d      	ldr	r3, [pc, #308]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f003 030c 	and.w	r3, r3, #12
 800589a:	2b08      	cmp	r3, #8
 800589c:	d11c      	bne.n	80058d8 <HAL_RCC_OscConfig+0x190>
 800589e:	4b4a      	ldr	r3, [pc, #296]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d116      	bne.n	80058d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058aa:	4b47      	ldr	r3, [pc, #284]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d005      	beq.n	80058c2 <HAL_RCC_OscConfig+0x17a>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d001      	beq.n	80058c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e1df      	b.n	8005c82 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058c2:	4b41      	ldr	r3, [pc, #260]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	493d      	ldr	r1, [pc, #244]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058d6:	e040      	b.n	800595a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d023      	beq.n	8005928 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058e0:	4b39      	ldr	r3, [pc, #228]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a38      	ldr	r2, [pc, #224]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 80058e6:	f043 0301 	orr.w	r3, r3, #1
 80058ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ec:	f7fd f98c 	bl	8002c08 <HAL_GetTick>
 80058f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058f2:	e008      	b.n	8005906 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058f4:	f7fd f988 	bl	8002c08 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d901      	bls.n	8005906 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e1bd      	b.n	8005c82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005906:	4b30      	ldr	r3, [pc, #192]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d0f0      	beq.n	80058f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005912:	4b2d      	ldr	r3, [pc, #180]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	4929      	ldr	r1, [pc, #164]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 8005922:	4313      	orrs	r3, r2
 8005924:	600b      	str	r3, [r1, #0]
 8005926:	e018      	b.n	800595a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005928:	4b27      	ldr	r3, [pc, #156]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a26      	ldr	r2, [pc, #152]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 800592e:	f023 0301 	bic.w	r3, r3, #1
 8005932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005934:	f7fd f968 	bl	8002c08 <HAL_GetTick>
 8005938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800593a:	e008      	b.n	800594e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800593c:	f7fd f964 	bl	8002c08 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d901      	bls.n	800594e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e199      	b.n	8005c82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800594e:	4b1e      	ldr	r3, [pc, #120]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1f0      	bne.n	800593c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0308 	and.w	r3, r3, #8
 8005962:	2b00      	cmp	r3, #0
 8005964:	d038      	beq.n	80059d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d019      	beq.n	80059a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800596e:	4b16      	ldr	r3, [pc, #88]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 8005970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005972:	4a15      	ldr	r2, [pc, #84]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 8005974:	f043 0301 	orr.w	r3, r3, #1
 8005978:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800597a:	f7fd f945 	bl	8002c08 <HAL_GetTick>
 800597e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005980:	e008      	b.n	8005994 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005982:	f7fd f941 	bl	8002c08 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	2b02      	cmp	r3, #2
 800598e:	d901      	bls.n	8005994 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e176      	b.n	8005c82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005994:	4b0c      	ldr	r3, [pc, #48]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 8005996:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d0f0      	beq.n	8005982 <HAL_RCC_OscConfig+0x23a>
 80059a0:	e01a      	b.n	80059d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059a2:	4b09      	ldr	r3, [pc, #36]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 80059a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059a6:	4a08      	ldr	r2, [pc, #32]	@ (80059c8 <HAL_RCC_OscConfig+0x280>)
 80059a8:	f023 0301 	bic.w	r3, r3, #1
 80059ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ae:	f7fd f92b 	bl	8002c08 <HAL_GetTick>
 80059b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059b4:	e00a      	b.n	80059cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059b6:	f7fd f927 	bl	8002c08 <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d903      	bls.n	80059cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e15c      	b.n	8005c82 <HAL_RCC_OscConfig+0x53a>
 80059c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059cc:	4b91      	ldr	r3, [pc, #580]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 80059ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1ee      	bne.n	80059b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0304 	and.w	r3, r3, #4
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f000 80a4 	beq.w	8005b2e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059e6:	4b8b      	ldr	r3, [pc, #556]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 80059e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10d      	bne.n	8005a0e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80059f2:	4b88      	ldr	r3, [pc, #544]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 80059f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f6:	4a87      	ldr	r2, [pc, #540]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 80059f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80059fe:	4b85      	ldr	r3, [pc, #532]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 8005a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a06:	60bb      	str	r3, [r7, #8]
 8005a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a0e:	4b82      	ldr	r3, [pc, #520]	@ (8005c18 <HAL_RCC_OscConfig+0x4d0>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d118      	bne.n	8005a4c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005a1a:	4b7f      	ldr	r3, [pc, #508]	@ (8005c18 <HAL_RCC_OscConfig+0x4d0>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a7e      	ldr	r2, [pc, #504]	@ (8005c18 <HAL_RCC_OscConfig+0x4d0>)
 8005a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a26:	f7fd f8ef 	bl	8002c08 <HAL_GetTick>
 8005a2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a2c:	e008      	b.n	8005a40 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a2e:	f7fd f8eb 	bl	8002c08 <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b64      	cmp	r3, #100	@ 0x64
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e120      	b.n	8005c82 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a40:	4b75      	ldr	r3, [pc, #468]	@ (8005c18 <HAL_RCC_OscConfig+0x4d0>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0f0      	beq.n	8005a2e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d106      	bne.n	8005a62 <HAL_RCC_OscConfig+0x31a>
 8005a54:	4b6f      	ldr	r3, [pc, #444]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 8005a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a58:	4a6e      	ldr	r2, [pc, #440]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 8005a5a:	f043 0301 	orr.w	r3, r3, #1
 8005a5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a60:	e02d      	b.n	8005abe <HAL_RCC_OscConfig+0x376>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10c      	bne.n	8005a84 <HAL_RCC_OscConfig+0x33c>
 8005a6a:	4b6a      	ldr	r3, [pc, #424]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 8005a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a6e:	4a69      	ldr	r2, [pc, #420]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 8005a70:	f023 0301 	bic.w	r3, r3, #1
 8005a74:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a76:	4b67      	ldr	r3, [pc, #412]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 8005a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a7a:	4a66      	ldr	r2, [pc, #408]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 8005a7c:	f023 0304 	bic.w	r3, r3, #4
 8005a80:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a82:	e01c      	b.n	8005abe <HAL_RCC_OscConfig+0x376>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	2b05      	cmp	r3, #5
 8005a8a:	d10c      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x35e>
 8005a8c:	4b61      	ldr	r3, [pc, #388]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 8005a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a90:	4a60      	ldr	r2, [pc, #384]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 8005a92:	f043 0304 	orr.w	r3, r3, #4
 8005a96:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a98:	4b5e      	ldr	r3, [pc, #376]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 8005a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a9c:	4a5d      	ldr	r2, [pc, #372]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 8005a9e:	f043 0301 	orr.w	r3, r3, #1
 8005aa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005aa4:	e00b      	b.n	8005abe <HAL_RCC_OscConfig+0x376>
 8005aa6:	4b5b      	ldr	r3, [pc, #364]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 8005aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aaa:	4a5a      	ldr	r2, [pc, #360]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 8005aac:	f023 0301 	bic.w	r3, r3, #1
 8005ab0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ab2:	4b58      	ldr	r3, [pc, #352]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 8005ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ab6:	4a57      	ldr	r2, [pc, #348]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 8005ab8:	f023 0304 	bic.w	r3, r3, #4
 8005abc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d015      	beq.n	8005af2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ac6:	f7fd f89f 	bl	8002c08 <HAL_GetTick>
 8005aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005acc:	e00a      	b.n	8005ae4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ace:	f7fd f89b 	bl	8002c08 <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d901      	bls.n	8005ae4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e0ce      	b.n	8005c82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ae4:	4b4b      	ldr	r3, [pc, #300]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 8005ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d0ee      	beq.n	8005ace <HAL_RCC_OscConfig+0x386>
 8005af0:	e014      	b.n	8005b1c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af2:	f7fd f889 	bl	8002c08 <HAL_GetTick>
 8005af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005af8:	e00a      	b.n	8005b10 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005afa:	f7fd f885 	bl	8002c08 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d901      	bls.n	8005b10 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e0b8      	b.n	8005c82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b10:	4b40      	ldr	r3, [pc, #256]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 8005b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b14:	f003 0302 	and.w	r3, r3, #2
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1ee      	bne.n	8005afa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b1c:	7dfb      	ldrb	r3, [r7, #23]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d105      	bne.n	8005b2e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b22:	4b3c      	ldr	r3, [pc, #240]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 8005b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b26:	4a3b      	ldr	r2, [pc, #236]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 8005b28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b2c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 80a4 	beq.w	8005c80 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b38:	4b36      	ldr	r3, [pc, #216]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f003 030c 	and.w	r3, r3, #12
 8005b40:	2b08      	cmp	r3, #8
 8005b42:	d06b      	beq.n	8005c1c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d149      	bne.n	8005be0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b4c:	4b31      	ldr	r3, [pc, #196]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a30      	ldr	r2, [pc, #192]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 8005b52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b58:	f7fd f856 	bl	8002c08 <HAL_GetTick>
 8005b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b5e:	e008      	b.n	8005b72 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b60:	f7fd f852 	bl	8002c08 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d901      	bls.n	8005b72 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e087      	b.n	8005c82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b72:	4b28      	ldr	r3, [pc, #160]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1f0      	bne.n	8005b60 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	69da      	ldr	r2, [r3, #28]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b8c:	019b      	lsls	r3, r3, #6
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b94:	085b      	lsrs	r3, r3, #1
 8005b96:	3b01      	subs	r3, #1
 8005b98:	041b      	lsls	r3, r3, #16
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba0:	061b      	lsls	r3, r3, #24
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 8005ba6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005baa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bac:	4b19      	ldr	r3, [pc, #100]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a18      	ldr	r2, [pc, #96]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 8005bb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb8:	f7fd f826 	bl	8002c08 <HAL_GetTick>
 8005bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bbe:	e008      	b.n	8005bd2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bc0:	f7fd f822 	bl	8002c08 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d901      	bls.n	8005bd2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e057      	b.n	8005c82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bd2:	4b10      	ldr	r3, [pc, #64]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d0f0      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x478>
 8005bde:	e04f      	b.n	8005c80 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005be0:	4b0c      	ldr	r3, [pc, #48]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a0b      	ldr	r2, [pc, #44]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 8005be6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005bea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bec:	f7fd f80c 	bl	8002c08 <HAL_GetTick>
 8005bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bf4:	f7fd f808 	bl	8002c08 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e03d      	b.n	8005c82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c06:	4b03      	ldr	r3, [pc, #12]	@ (8005c14 <HAL_RCC_OscConfig+0x4cc>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1f0      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x4ac>
 8005c12:	e035      	b.n	8005c80 <HAL_RCC_OscConfig+0x538>
 8005c14:	40023800 	.word	0x40023800
 8005c18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8005c8c <HAL_RCC_OscConfig+0x544>)
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d028      	beq.n	8005c7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d121      	bne.n	8005c7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d11a      	bne.n	8005c7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005c52:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d111      	bne.n	8005c7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c62:	085b      	lsrs	r3, r3, #1
 8005c64:	3b01      	subs	r3, #1
 8005c66:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d107      	bne.n	8005c7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c76:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d001      	beq.n	8005c80 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e000      	b.n	8005c82 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3718      	adds	r7, #24
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	40023800 	.word	0x40023800

08005c90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d101      	bne.n	8005ca8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e0d0      	b.n	8005e4a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ca8:	4b6a      	ldr	r3, [pc, #424]	@ (8005e54 <HAL_RCC_ClockConfig+0x1c4>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 030f 	and.w	r3, r3, #15
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d910      	bls.n	8005cd8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cb6:	4b67      	ldr	r3, [pc, #412]	@ (8005e54 <HAL_RCC_ClockConfig+0x1c4>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f023 020f 	bic.w	r2, r3, #15
 8005cbe:	4965      	ldr	r1, [pc, #404]	@ (8005e54 <HAL_RCC_ClockConfig+0x1c4>)
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cc6:	4b63      	ldr	r3, [pc, #396]	@ (8005e54 <HAL_RCC_ClockConfig+0x1c4>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 030f 	and.w	r3, r3, #15
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d001      	beq.n	8005cd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e0b8      	b.n	8005e4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0302 	and.w	r3, r3, #2
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d020      	beq.n	8005d26 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0304 	and.w	r3, r3, #4
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d005      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cf0:	4b59      	ldr	r3, [pc, #356]	@ (8005e58 <HAL_RCC_ClockConfig+0x1c8>)
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	4a58      	ldr	r2, [pc, #352]	@ (8005e58 <HAL_RCC_ClockConfig+0x1c8>)
 8005cf6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005cfa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0308 	and.w	r3, r3, #8
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d005      	beq.n	8005d14 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d08:	4b53      	ldr	r3, [pc, #332]	@ (8005e58 <HAL_RCC_ClockConfig+0x1c8>)
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	4a52      	ldr	r2, [pc, #328]	@ (8005e58 <HAL_RCC_ClockConfig+0x1c8>)
 8005d0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005d12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d14:	4b50      	ldr	r3, [pc, #320]	@ (8005e58 <HAL_RCC_ClockConfig+0x1c8>)
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	494d      	ldr	r1, [pc, #308]	@ (8005e58 <HAL_RCC_ClockConfig+0x1c8>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d040      	beq.n	8005db4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d107      	bne.n	8005d4a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d3a:	4b47      	ldr	r3, [pc, #284]	@ (8005e58 <HAL_RCC_ClockConfig+0x1c8>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d115      	bne.n	8005d72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e07f      	b.n	8005e4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d107      	bne.n	8005d62 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d52:	4b41      	ldr	r3, [pc, #260]	@ (8005e58 <HAL_RCC_ClockConfig+0x1c8>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d109      	bne.n	8005d72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e073      	b.n	8005e4a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d62:	4b3d      	ldr	r3, [pc, #244]	@ (8005e58 <HAL_RCC_ClockConfig+0x1c8>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e06b      	b.n	8005e4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d72:	4b39      	ldr	r3, [pc, #228]	@ (8005e58 <HAL_RCC_ClockConfig+0x1c8>)
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f023 0203 	bic.w	r2, r3, #3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	4936      	ldr	r1, [pc, #216]	@ (8005e58 <HAL_RCC_ClockConfig+0x1c8>)
 8005d80:	4313      	orrs	r3, r2
 8005d82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d84:	f7fc ff40 	bl	8002c08 <HAL_GetTick>
 8005d88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d8a:	e00a      	b.n	8005da2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d8c:	f7fc ff3c 	bl	8002c08 <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e053      	b.n	8005e4a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005da2:	4b2d      	ldr	r3, [pc, #180]	@ (8005e58 <HAL_RCC_ClockConfig+0x1c8>)
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f003 020c 	and.w	r2, r3, #12
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d1eb      	bne.n	8005d8c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005db4:	4b27      	ldr	r3, [pc, #156]	@ (8005e54 <HAL_RCC_ClockConfig+0x1c4>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 030f 	and.w	r3, r3, #15
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d210      	bcs.n	8005de4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dc2:	4b24      	ldr	r3, [pc, #144]	@ (8005e54 <HAL_RCC_ClockConfig+0x1c4>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f023 020f 	bic.w	r2, r3, #15
 8005dca:	4922      	ldr	r1, [pc, #136]	@ (8005e54 <HAL_RCC_ClockConfig+0x1c4>)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dd2:	4b20      	ldr	r3, [pc, #128]	@ (8005e54 <HAL_RCC_ClockConfig+0x1c4>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 030f 	and.w	r3, r3, #15
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d001      	beq.n	8005de4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e032      	b.n	8005e4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0304 	and.w	r3, r3, #4
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d008      	beq.n	8005e02 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005df0:	4b19      	ldr	r3, [pc, #100]	@ (8005e58 <HAL_RCC_ClockConfig+0x1c8>)
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	4916      	ldr	r1, [pc, #88]	@ (8005e58 <HAL_RCC_ClockConfig+0x1c8>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0308 	and.w	r3, r3, #8
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d009      	beq.n	8005e22 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e0e:	4b12      	ldr	r3, [pc, #72]	@ (8005e58 <HAL_RCC_ClockConfig+0x1c8>)
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	00db      	lsls	r3, r3, #3
 8005e1c:	490e      	ldr	r1, [pc, #56]	@ (8005e58 <HAL_RCC_ClockConfig+0x1c8>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e22:	f000 f831 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 8005e26:	4602      	mov	r2, r0
 8005e28:	4b0b      	ldr	r3, [pc, #44]	@ (8005e58 <HAL_RCC_ClockConfig+0x1c8>)
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	091b      	lsrs	r3, r3, #4
 8005e2e:	f003 030f 	and.w	r3, r3, #15
 8005e32:	490a      	ldr	r1, [pc, #40]	@ (8005e5c <HAL_RCC_ClockConfig+0x1cc>)
 8005e34:	5ccb      	ldrb	r3, [r1, r3]
 8005e36:	fa22 f303 	lsr.w	r3, r2, r3
 8005e3a:	4a09      	ldr	r2, [pc, #36]	@ (8005e60 <HAL_RCC_ClockConfig+0x1d0>)
 8005e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e3e:	4b09      	ldr	r3, [pc, #36]	@ (8005e64 <HAL_RCC_ClockConfig+0x1d4>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fc fe9c 	bl	8002b80 <HAL_InitTick>

  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	40023c00 	.word	0x40023c00
 8005e58:	40023800 	.word	0x40023800
 8005e5c:	0801182c 	.word	0x0801182c
 8005e60:	20000000 	.word	0x20000000
 8005e64:	20000004 	.word	0x20000004

08005e68 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8005e6c:	4b05      	ldr	r3, [pc, #20]	@ (8005e84 <HAL_RCC_EnableCSS+0x1c>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a04      	ldr	r2, [pc, #16]	@ (8005e84 <HAL_RCC_EnableCSS+0x1c>)
 8005e72:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e76:	6013      	str	r3, [r2, #0]
}
 8005e78:	bf00      	nop
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	40023800 	.word	0x40023800

08005e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e8c:	b094      	sub	sp, #80	@ 0x50
 8005e8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005e90:	2300      	movs	r3, #0
 8005e92:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e94:	2300      	movs	r3, #0
 8005e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e98:	2300      	movs	r3, #0
 8005e9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ea0:	4b79      	ldr	r3, [pc, #484]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f003 030c 	and.w	r3, r3, #12
 8005ea8:	2b08      	cmp	r3, #8
 8005eaa:	d00d      	beq.n	8005ec8 <HAL_RCC_GetSysClockFreq+0x40>
 8005eac:	2b08      	cmp	r3, #8
 8005eae:	f200 80e1 	bhi.w	8006074 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <HAL_RCC_GetSysClockFreq+0x34>
 8005eb6:	2b04      	cmp	r3, #4
 8005eb8:	d003      	beq.n	8005ec2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005eba:	e0db      	b.n	8006074 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ebc:	4b73      	ldr	r3, [pc, #460]	@ (800608c <HAL_RCC_GetSysClockFreq+0x204>)
 8005ebe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ec0:	e0db      	b.n	800607a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ec2:	4b73      	ldr	r3, [pc, #460]	@ (8006090 <HAL_RCC_GetSysClockFreq+0x208>)
 8005ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ec6:	e0d8      	b.n	800607a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ec8:	4b6f      	ldr	r3, [pc, #444]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x200>)
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ed0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005ed2:	4b6d      	ldr	r3, [pc, #436]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d063      	beq.n	8005fa6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ede:	4b6a      	ldr	r3, [pc, #424]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	099b      	lsrs	r3, r3, #6
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ee8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ef6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005efa:	4622      	mov	r2, r4
 8005efc:	462b      	mov	r3, r5
 8005efe:	f04f 0000 	mov.w	r0, #0
 8005f02:	f04f 0100 	mov.w	r1, #0
 8005f06:	0159      	lsls	r1, r3, #5
 8005f08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f0c:	0150      	lsls	r0, r2, #5
 8005f0e:	4602      	mov	r2, r0
 8005f10:	460b      	mov	r3, r1
 8005f12:	4621      	mov	r1, r4
 8005f14:	1a51      	subs	r1, r2, r1
 8005f16:	6139      	str	r1, [r7, #16]
 8005f18:	4629      	mov	r1, r5
 8005f1a:	eb63 0301 	sbc.w	r3, r3, r1
 8005f1e:	617b      	str	r3, [r7, #20]
 8005f20:	f04f 0200 	mov.w	r2, #0
 8005f24:	f04f 0300 	mov.w	r3, #0
 8005f28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f2c:	4659      	mov	r1, fp
 8005f2e:	018b      	lsls	r3, r1, #6
 8005f30:	4651      	mov	r1, sl
 8005f32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f36:	4651      	mov	r1, sl
 8005f38:	018a      	lsls	r2, r1, #6
 8005f3a:	4651      	mov	r1, sl
 8005f3c:	ebb2 0801 	subs.w	r8, r2, r1
 8005f40:	4659      	mov	r1, fp
 8005f42:	eb63 0901 	sbc.w	r9, r3, r1
 8005f46:	f04f 0200 	mov.w	r2, #0
 8005f4a:	f04f 0300 	mov.w	r3, #0
 8005f4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f5a:	4690      	mov	r8, r2
 8005f5c:	4699      	mov	r9, r3
 8005f5e:	4623      	mov	r3, r4
 8005f60:	eb18 0303 	adds.w	r3, r8, r3
 8005f64:	60bb      	str	r3, [r7, #8]
 8005f66:	462b      	mov	r3, r5
 8005f68:	eb49 0303 	adc.w	r3, r9, r3
 8005f6c:	60fb      	str	r3, [r7, #12]
 8005f6e:	f04f 0200 	mov.w	r2, #0
 8005f72:	f04f 0300 	mov.w	r3, #0
 8005f76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f7a:	4629      	mov	r1, r5
 8005f7c:	024b      	lsls	r3, r1, #9
 8005f7e:	4621      	mov	r1, r4
 8005f80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f84:	4621      	mov	r1, r4
 8005f86:	024a      	lsls	r2, r1, #9
 8005f88:	4610      	mov	r0, r2
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f8e:	2200      	movs	r2, #0
 8005f90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005f98:	f7fa fe2e 	bl	8000bf8 <__aeabi_uldivmod>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fa4:	e058      	b.n	8006058 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fa6:	4b38      	ldr	r3, [pc, #224]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	099b      	lsrs	r3, r3, #6
 8005fac:	2200      	movs	r2, #0
 8005fae:	4618      	mov	r0, r3
 8005fb0:	4611      	mov	r1, r2
 8005fb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005fb6:	623b      	str	r3, [r7, #32]
 8005fb8:	2300      	movs	r3, #0
 8005fba:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005fc0:	4642      	mov	r2, r8
 8005fc2:	464b      	mov	r3, r9
 8005fc4:	f04f 0000 	mov.w	r0, #0
 8005fc8:	f04f 0100 	mov.w	r1, #0
 8005fcc:	0159      	lsls	r1, r3, #5
 8005fce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fd2:	0150      	lsls	r0, r2, #5
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	4641      	mov	r1, r8
 8005fda:	ebb2 0a01 	subs.w	sl, r2, r1
 8005fde:	4649      	mov	r1, r9
 8005fe0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005fe4:	f04f 0200 	mov.w	r2, #0
 8005fe8:	f04f 0300 	mov.w	r3, #0
 8005fec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ff0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ff4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ff8:	ebb2 040a 	subs.w	r4, r2, sl
 8005ffc:	eb63 050b 	sbc.w	r5, r3, fp
 8006000:	f04f 0200 	mov.w	r2, #0
 8006004:	f04f 0300 	mov.w	r3, #0
 8006008:	00eb      	lsls	r3, r5, #3
 800600a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800600e:	00e2      	lsls	r2, r4, #3
 8006010:	4614      	mov	r4, r2
 8006012:	461d      	mov	r5, r3
 8006014:	4643      	mov	r3, r8
 8006016:	18e3      	adds	r3, r4, r3
 8006018:	603b      	str	r3, [r7, #0]
 800601a:	464b      	mov	r3, r9
 800601c:	eb45 0303 	adc.w	r3, r5, r3
 8006020:	607b      	str	r3, [r7, #4]
 8006022:	f04f 0200 	mov.w	r2, #0
 8006026:	f04f 0300 	mov.w	r3, #0
 800602a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800602e:	4629      	mov	r1, r5
 8006030:	028b      	lsls	r3, r1, #10
 8006032:	4621      	mov	r1, r4
 8006034:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006038:	4621      	mov	r1, r4
 800603a:	028a      	lsls	r2, r1, #10
 800603c:	4610      	mov	r0, r2
 800603e:	4619      	mov	r1, r3
 8006040:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006042:	2200      	movs	r2, #0
 8006044:	61bb      	str	r3, [r7, #24]
 8006046:	61fa      	str	r2, [r7, #28]
 8006048:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800604c:	f7fa fdd4 	bl	8000bf8 <__aeabi_uldivmod>
 8006050:	4602      	mov	r2, r0
 8006052:	460b      	mov	r3, r1
 8006054:	4613      	mov	r3, r2
 8006056:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006058:	4b0b      	ldr	r3, [pc, #44]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x200>)
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	0c1b      	lsrs	r3, r3, #16
 800605e:	f003 0303 	and.w	r3, r3, #3
 8006062:	3301      	adds	r3, #1
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006068:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800606a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800606c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006070:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006072:	e002      	b.n	800607a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006074:	4b05      	ldr	r3, [pc, #20]	@ (800608c <HAL_RCC_GetSysClockFreq+0x204>)
 8006076:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006078:	bf00      	nop
    }
  }
  return sysclockfreq;
 800607a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800607c:	4618      	mov	r0, r3
 800607e:	3750      	adds	r7, #80	@ 0x50
 8006080:	46bd      	mov	sp, r7
 8006082:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006086:	bf00      	nop
 8006088:	40023800 	.word	0x40023800
 800608c:	00f42400 	.word	0x00f42400
 8006090:	007a1200 	.word	0x007a1200

08006094 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006094:	b480      	push	{r7}
 8006096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006098:	4b03      	ldr	r3, [pc, #12]	@ (80060a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800609a:	681b      	ldr	r3, [r3, #0]
}
 800609c:	4618      	mov	r0, r3
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	20000000 	.word	0x20000000

080060ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80060b0:	f7ff fff0 	bl	8006094 <HAL_RCC_GetHCLKFreq>
 80060b4:	4602      	mov	r2, r0
 80060b6:	4b05      	ldr	r3, [pc, #20]	@ (80060cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	0a9b      	lsrs	r3, r3, #10
 80060bc:	f003 0307 	and.w	r3, r3, #7
 80060c0:	4903      	ldr	r1, [pc, #12]	@ (80060d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060c2:	5ccb      	ldrb	r3, [r1, r3]
 80060c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	40023800 	.word	0x40023800
 80060d0:	0801183c 	.word	0x0801183c

080060d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80060d8:	f7ff ffdc 	bl	8006094 <HAL_RCC_GetHCLKFreq>
 80060dc:	4602      	mov	r2, r0
 80060de:	4b05      	ldr	r3, [pc, #20]	@ (80060f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	0b5b      	lsrs	r3, r3, #13
 80060e4:	f003 0307 	and.w	r3, r3, #7
 80060e8:	4903      	ldr	r1, [pc, #12]	@ (80060f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060ea:	5ccb      	ldrb	r3, [r1, r3]
 80060ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	40023800 	.word	0x40023800
 80060f8:	0801183c 	.word	0x0801183c

080060fc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006100:	4b06      	ldr	r3, [pc, #24]	@ (800611c <HAL_RCC_NMI_IRQHandler+0x20>)
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006108:	2b80      	cmp	r3, #128	@ 0x80
 800610a:	d104      	bne.n	8006116 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800610c:	f000 f80a 	bl	8006124 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006110:	4b03      	ldr	r3, [pc, #12]	@ (8006120 <HAL_RCC_NMI_IRQHandler+0x24>)
 8006112:	2280      	movs	r2, #128	@ 0x80
 8006114:	701a      	strb	r2, [r3, #0]
  }
}
 8006116:	bf00      	nop
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	40023800 	.word	0x40023800
 8006120:	4002380e 	.word	0x4002380e

08006124 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8006124:	b480      	push	{r7}
 8006126:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006128:	bf00      	nop
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
	...

08006134 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b088      	sub	sp, #32
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800613c:	2300      	movs	r3, #0
 800613e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006140:	2300      	movs	r3, #0
 8006142:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8006144:	2300      	movs	r3, #0
 8006146:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006148:	2300      	movs	r3, #0
 800614a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b00      	cmp	r3, #0
 8006156:	d012      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006158:	4b65      	ldr	r3, [pc, #404]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	4a64      	ldr	r2, [pc, #400]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800615e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006162:	6093      	str	r3, [r2, #8]
 8006164:	4b62      	ldr	r3, [pc, #392]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006166:	689a      	ldr	r2, [r3, #8]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616c:	4960      	ldr	r1, [pc, #384]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800616e:	4313      	orrs	r3, r2
 8006170:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800617a:	2301      	movs	r3, #1
 800617c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d017      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800618a:	4b59      	ldr	r3, [pc, #356]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800618c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006190:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006198:	4955      	ldr	r1, [pc, #340]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800619a:	4313      	orrs	r3, r2
 800619c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061a8:	d101      	bne.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80061aa:	2301      	movs	r3, #1
 80061ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80061b6:	2301      	movs	r3, #1
 80061b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d017      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80061c6:	4b4a      	ldr	r3, [pc, #296]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80061c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061cc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d4:	4946      	ldr	r1, [pc, #280]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061e4:	d101      	bne.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80061e6:	2301      	movs	r3, #1
 80061e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d101      	bne.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80061f2:	2301      	movs	r3, #1
 80061f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0320 	and.w	r3, r3, #32
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f000 808b 	beq.w	800631a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006204:	4b3a      	ldr	r3, [pc, #232]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006208:	4a39      	ldr	r2, [pc, #228]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800620a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800620e:	6413      	str	r3, [r2, #64]	@ 0x40
 8006210:	4b37      	ldr	r3, [pc, #220]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006214:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006218:	60fb      	str	r3, [r7, #12]
 800621a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800621c:	4b35      	ldr	r3, [pc, #212]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a34      	ldr	r2, [pc, #208]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006222:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006226:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006228:	f7fc fcee 	bl	8002c08 <HAL_GetTick>
 800622c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800622e:	e008      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006230:	f7fc fcea 	bl	8002c08 <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	2b64      	cmp	r3, #100	@ 0x64
 800623c:	d901      	bls.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e2bc      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006242:	4b2c      	ldr	r3, [pc, #176]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0f0      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800624e:	4b28      	ldr	r3, [pc, #160]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006252:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006256:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d035      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006262:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	429a      	cmp	r2, r3
 800626a:	d02e      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800626c:	4b20      	ldr	r3, [pc, #128]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800626e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006270:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006274:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006276:	4b1e      	ldr	r3, [pc, #120]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800627a:	4a1d      	ldr	r2, [pc, #116]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800627c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006280:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006282:	4b1b      	ldr	r3, [pc, #108]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006286:	4a1a      	ldr	r2, [pc, #104]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006288:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800628c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800628e:	4a18      	ldr	r2, [pc, #96]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006294:	4b16      	ldr	r3, [pc, #88]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	2b01      	cmp	r3, #1
 800629e:	d114      	bne.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a0:	f7fc fcb2 	bl	8002c08 <HAL_GetTick>
 80062a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062a6:	e00a      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062a8:	f7fc fcae 	bl	8002c08 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d901      	bls.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e27e      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062be:	4b0c      	ldr	r3, [pc, #48]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80062c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d0ee      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062d6:	d111      	bne.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80062d8:	4b05      	ldr	r3, [pc, #20]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80062e4:	4b04      	ldr	r3, [pc, #16]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80062e6:	400b      	ands	r3, r1
 80062e8:	4901      	ldr	r1, [pc, #4]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	608b      	str	r3, [r1, #8]
 80062ee:	e00b      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80062f0:	40023800 	.word	0x40023800
 80062f4:	40007000 	.word	0x40007000
 80062f8:	0ffffcff 	.word	0x0ffffcff
 80062fc:	4ba4      	ldr	r3, [pc, #656]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	4aa3      	ldr	r2, [pc, #652]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006302:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006306:	6093      	str	r3, [r2, #8]
 8006308:	4ba1      	ldr	r3, [pc, #644]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800630a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006314:	499e      	ldr	r1, [pc, #632]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006316:	4313      	orrs	r3, r2
 8006318:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0310 	and.w	r3, r3, #16
 8006322:	2b00      	cmp	r3, #0
 8006324:	d010      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006326:	4b9a      	ldr	r3, [pc, #616]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006328:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800632c:	4a98      	ldr	r2, [pc, #608]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800632e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006332:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006336:	4b96      	ldr	r3, [pc, #600]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006338:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006340:	4993      	ldr	r1, [pc, #588]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006342:	4313      	orrs	r3, r2
 8006344:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00a      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006354:	4b8e      	ldr	r3, [pc, #568]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800635a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006362:	498b      	ldr	r1, [pc, #556]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006364:	4313      	orrs	r3, r2
 8006366:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00a      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006376:	4b86      	ldr	r3, [pc, #536]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800637c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006384:	4982      	ldr	r1, [pc, #520]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006386:	4313      	orrs	r3, r2
 8006388:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00a      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006398:	4b7d      	ldr	r3, [pc, #500]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800639a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800639e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063a6:	497a      	ldr	r1, [pc, #488]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00a      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063ba:	4b75      	ldr	r3, [pc, #468]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80063bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063c0:	f023 0203 	bic.w	r2, r3, #3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063c8:	4971      	ldr	r1, [pc, #452]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00a      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063dc:	4b6c      	ldr	r3, [pc, #432]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80063de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063e2:	f023 020c 	bic.w	r2, r3, #12
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ea:	4969      	ldr	r1, [pc, #420]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00a      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063fe:	4b64      	ldr	r3, [pc, #400]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006404:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800640c:	4960      	ldr	r1, [pc, #384]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800640e:	4313      	orrs	r3, r2
 8006410:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00a      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006420:	4b5b      	ldr	r3, [pc, #364]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006426:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800642e:	4958      	ldr	r1, [pc, #352]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006430:	4313      	orrs	r3, r2
 8006432:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00a      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006442:	4b53      	ldr	r3, [pc, #332]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006444:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006448:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006450:	494f      	ldr	r1, [pc, #316]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006452:	4313      	orrs	r3, r2
 8006454:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00a      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006464:	4b4a      	ldr	r3, [pc, #296]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800646a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006472:	4947      	ldr	r1, [pc, #284]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006474:	4313      	orrs	r3, r2
 8006476:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00a      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006486:	4b42      	ldr	r3, [pc, #264]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800648c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006494:	493e      	ldr	r1, [pc, #248]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006496:	4313      	orrs	r3, r2
 8006498:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00a      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80064a8:	4b39      	ldr	r3, [pc, #228]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80064aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064ae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064b6:	4936      	ldr	r1, [pc, #216]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80064b8:	4313      	orrs	r3, r2
 80064ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d011      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80064ca:	4b31      	ldr	r3, [pc, #196]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80064cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064d0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064d8:	492d      	ldr	r1, [pc, #180]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80064da:	4313      	orrs	r3, r2
 80064dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064e8:	d101      	bne.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80064ea:	2301      	movs	r3, #1
 80064ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00a      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064fa:	4b25      	ldr	r3, [pc, #148]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80064fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006500:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006508:	4921      	ldr	r1, [pc, #132]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800650a:	4313      	orrs	r3, r2
 800650c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00a      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800651c:	4b1c      	ldr	r3, [pc, #112]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800651e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006522:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800652a:	4919      	ldr	r1, [pc, #100]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800652c:	4313      	orrs	r3, r2
 800652e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00a      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800653e:	4b14      	ldr	r3, [pc, #80]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006544:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800654c:	4910      	ldr	r1, [pc, #64]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800654e:	4313      	orrs	r3, r2
 8006550:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d006      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006562:	2b00      	cmp	r3, #0
 8006564:	f000 809d 	beq.w	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006568:	4b09      	ldr	r3, [pc, #36]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a08      	ldr	r2, [pc, #32]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800656e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006572:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006574:	f7fc fb48 	bl	8002c08 <HAL_GetTick>
 8006578:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800657a:	e00b      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800657c:	f7fc fb44 	bl	8002c08 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	2b64      	cmp	r3, #100	@ 0x64
 8006588:	d904      	bls.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e116      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x688>
 800658e:	bf00      	nop
 8006590:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006594:	4b8b      	ldr	r3, [pc, #556]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1ed      	bne.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d017      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d113      	bne.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80065b4:	4b83      	ldr	r3, [pc, #524]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80065b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065ba:	0e1b      	lsrs	r3, r3, #24
 80065bc:	f003 030f 	and.w	r3, r3, #15
 80065c0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	019a      	lsls	r2, r3, #6
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	061b      	lsls	r3, r3, #24
 80065cc:	431a      	orrs	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	071b      	lsls	r3, r3, #28
 80065d4:	497b      	ldr	r1, [pc, #492]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80065d6:	4313      	orrs	r3, r2
 80065d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d004      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065f0:	d00a      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d024      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006602:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006606:	d11f      	bne.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006608:	4b6e      	ldr	r3, [pc, #440]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800660a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800660e:	0f1b      	lsrs	r3, r3, #28
 8006610:	f003 0307 	and.w	r3, r3, #7
 8006614:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	019a      	lsls	r2, r3, #6
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	061b      	lsls	r3, r3, #24
 8006622:	431a      	orrs	r2, r3
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	071b      	lsls	r3, r3, #28
 8006628:	4966      	ldr	r1, [pc, #408]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800662a:	4313      	orrs	r3, r2
 800662c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006630:	4b64      	ldr	r3, [pc, #400]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006632:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006636:	f023 021f 	bic.w	r2, r3, #31
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	3b01      	subs	r3, #1
 8006640:	4960      	ldr	r1, [pc, #384]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006642:	4313      	orrs	r3, r2
 8006644:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00d      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	019a      	lsls	r2, r3, #6
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	061b      	lsls	r3, r3, #24
 8006660:	431a      	orrs	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	071b      	lsls	r3, r3, #28
 8006668:	4956      	ldr	r1, [pc, #344]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800666a:	4313      	orrs	r3, r2
 800666c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006670:	4b54      	ldr	r3, [pc, #336]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a53      	ldr	r2, [pc, #332]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006676:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800667a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800667c:	f7fc fac4 	bl	8002c08 <HAL_GetTick>
 8006680:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006682:	e008      	b.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006684:	f7fc fac0 	bl	8002c08 <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	2b64      	cmp	r3, #100	@ 0x64
 8006690:	d901      	bls.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e092      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006696:	4b4b      	ldr	r3, [pc, #300]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d0f0      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	f040 8088 	bne.w	80067ba <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80066aa:	4b46      	ldr	r3, [pc, #280]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a45      	ldr	r2, [pc, #276]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80066b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066b6:	f7fc faa7 	bl	8002c08 <HAL_GetTick>
 80066ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80066bc:	e008      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80066be:	f7fc faa3 	bl	8002c08 <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	2b64      	cmp	r3, #100	@ 0x64
 80066ca:	d901      	bls.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e075      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80066d0:	4b3c      	ldr	r3, [pc, #240]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066dc:	d0ef      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d009      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d024      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006702:	2b00      	cmp	r3, #0
 8006704:	d120      	bne.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006706:	4b2f      	ldr	r3, [pc, #188]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800670c:	0c1b      	lsrs	r3, r3, #16
 800670e:	f003 0303 	and.w	r3, r3, #3
 8006712:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	019a      	lsls	r2, r3, #6
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	041b      	lsls	r3, r3, #16
 800671e:	431a      	orrs	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	695b      	ldr	r3, [r3, #20]
 8006724:	061b      	lsls	r3, r3, #24
 8006726:	4927      	ldr	r1, [pc, #156]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006728:	4313      	orrs	r3, r2
 800672a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800672e:	4b25      	ldr	r3, [pc, #148]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006730:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006734:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a1b      	ldr	r3, [r3, #32]
 800673c:	3b01      	subs	r3, #1
 800673e:	021b      	lsls	r3, r3, #8
 8006740:	4920      	ldr	r1, [pc, #128]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006742:	4313      	orrs	r3, r2
 8006744:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d018      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006758:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800675c:	d113      	bne.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800675e:	4b19      	ldr	r3, [pc, #100]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006760:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006764:	0e1b      	lsrs	r3, r3, #24
 8006766:	f003 030f 	and.w	r3, r3, #15
 800676a:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	019a      	lsls	r2, r3, #6
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	041b      	lsls	r3, r3, #16
 8006778:	431a      	orrs	r2, r3
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	061b      	lsls	r3, r3, #24
 800677e:	4911      	ldr	r1, [pc, #68]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006780:	4313      	orrs	r3, r2
 8006782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006786:	4b0f      	ldr	r3, [pc, #60]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a0e      	ldr	r2, [pc, #56]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800678c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006790:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006792:	f7fc fa39 	bl	8002c08 <HAL_GetTick>
 8006796:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006798:	e008      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800679a:	f7fc fa35 	bl	8002c08 <HAL_GetTick>
 800679e:	4602      	mov	r2, r0
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	2b64      	cmp	r3, #100	@ 0x64
 80067a6:	d901      	bls.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e007      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80067ac:	4b05      	ldr	r3, [pc, #20]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067b8:	d1ef      	bne.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3720      	adds	r7, #32
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	40023800 	.word	0x40023800

080067c8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e022      	b.n	8006820 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d105      	bne.n	80067f2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f7fb fbb1 	bl	8001f54 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2203      	movs	r2, #3
 80067f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f814 	bl	8006828 <HAL_SD_InitCard>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e00a      	b.n	8006820 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006828:	b5b0      	push	{r4, r5, r7, lr}
 800682a:	b08e      	sub	sp, #56	@ 0x38
 800682c:	af04      	add	r7, sp, #16
 800682e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006830:	2300      	movs	r3, #0
 8006832:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006834:	2300      	movs	r3, #0
 8006836:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006838:	2300      	movs	r3, #0
 800683a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800683c:	2300      	movs	r3, #0
 800683e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006840:	2300      	movs	r3, #0
 8006842:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006844:	2376      	movs	r3, #118	@ 0x76
 8006846:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681d      	ldr	r5, [r3, #0]
 800684c:	466c      	mov	r4, sp
 800684e:	f107 0314 	add.w	r3, r7, #20
 8006852:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006856:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800685a:	f107 0308 	add.w	r3, r7, #8
 800685e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006860:	4628      	mov	r0, r5
 8006862:	f003 f8bf 	bl	80099e4 <SDMMC_Init>
 8006866:	4603      	mov	r3, r0
 8006868:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800686c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006870:	2b00      	cmp	r3, #0
 8006872:	d001      	beq.n	8006878 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e059      	b.n	800692c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006886:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4618      	mov	r0, r3
 800688e:	f003 f8f3 	bl	8009a78 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	685a      	ldr	r2, [r3, #4]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80068a0:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80068a2:	2002      	movs	r0, #2
 80068a4:	f7fc f9bc 	bl	8002c20 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 ff01 	bl	80076b0 <SD_PowerON>
 80068ae:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00b      	beq.n	80068ce <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068c2:	6a3b      	ldr	r3, [r7, #32]
 80068c4:	431a      	orrs	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e02e      	b.n	800692c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 fe20 	bl	8007514 <SD_InitCard>
 80068d4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00b      	beq.n	80068f4 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068e8:	6a3b      	ldr	r3, [r7, #32]
 80068ea:	431a      	orrs	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e01b      	b.n	800692c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80068fc:	4618      	mov	r0, r3
 80068fe:	f003 f94d 	bl	8009b9c <SDMMC_CmdBlockLength>
 8006902:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006904:	6a3b      	ldr	r3, [r7, #32]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00f      	beq.n	800692a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a09      	ldr	r2, [pc, #36]	@ (8006934 <HAL_SD_InitCard+0x10c>)
 8006910:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006916:	6a3b      	ldr	r3, [r7, #32]
 8006918:	431a      	orrs	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e000      	b.n	800692c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3728      	adds	r7, #40	@ 0x28
 8006930:	46bd      	mov	sp, r7
 8006932:	bdb0      	pop	{r4, r5, r7, pc}
 8006934:	004005ff 	.word	0x004005ff

08006938 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b092      	sub	sp, #72	@ 0x48
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
 8006944:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006946:	f7fc f95f 	bl	8002c08 <HAL_GetTick>
 800694a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d107      	bne.n	800696a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800695e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e1bd      	b.n	8006ce6 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b01      	cmp	r3, #1
 8006974:	f040 81b0 	bne.w	8006cd8 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800697e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	441a      	add	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006988:	429a      	cmp	r2, r3
 800698a:	d907      	bls.n	800699c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006990:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e1a4      	b.n	8006ce6 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2203      	movs	r2, #3
 80069a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2200      	movs	r2, #0
 80069aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d002      	beq.n	80069ba <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80069b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b6:	025b      	lsls	r3, r3, #9
 80069b8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80069ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80069be:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	025b      	lsls	r3, r3, #9
 80069c4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80069c6:	2390      	movs	r3, #144	@ 0x90
 80069c8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80069ca:	2302      	movs	r3, #2
 80069cc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80069ce:	2300      	movs	r3, #0
 80069d0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80069d2:	2301      	movs	r3, #1
 80069d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f107 0214 	add.w	r2, r7, #20
 80069de:	4611      	mov	r1, r2
 80069e0:	4618      	mov	r0, r3
 80069e2:	f003 f8af 	bl	8009b44 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d90a      	bls.n	8006a02 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2202      	movs	r2, #2
 80069f0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80069f8:	4618      	mov	r0, r3
 80069fa:	f003 f913 	bl	8009c24 <SDMMC_CmdReadMultiBlock>
 80069fe:	6478      	str	r0, [r7, #68]	@ 0x44
 8006a00:	e009      	b.n	8006a16 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2201      	movs	r2, #1
 8006a06:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f003 f8e6 	bl	8009be0 <SDMMC_CmdReadSingleBlock>
 8006a14:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d012      	beq.n	8006a42 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a7a      	ldr	r2, [pc, #488]	@ (8006c0c <HAL_SD_ReadBlocks+0x2d4>)
 8006a22:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a2a:	431a      	orrs	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e151      	b.n	8006ce6 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006a46:	e061      	b.n	8006b0c <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d03c      	beq.n	8006ad0 <HAL_SD_ReadBlocks+0x198>
 8006a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d039      	beq.n	8006ad0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a60:	e033      	b.n	8006aca <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f002 ffe8 	bl	8009a3c <SDMMC_ReadFIFO>
 8006a6c:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a70:	b2da      	uxtb	r2, r3
 8006a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a74:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a78:	3301      	adds	r3, #1
 8006a7a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006a7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a84:	0a1b      	lsrs	r3, r3, #8
 8006a86:	b2da      	uxtb	r2, r3
 8006a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a8a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a8e:	3301      	adds	r3, #1
 8006a90:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006a92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a94:	3b01      	subs	r3, #1
 8006a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a9a:	0c1b      	lsrs	r3, r3, #16
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aa0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006aa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab0:	0e1b      	lsrs	r3, r3, #24
 8006ab2:	b2da      	uxtb	r2, r3
 8006ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ab6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aba:	3301      	adds	r3, #1
 8006abc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006abe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8006ac4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006aca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006acc:	2b07      	cmp	r3, #7
 8006ace:	d9c8      	bls.n	8006a62 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006ad0:	f7fc f89a 	bl	8002c08 <HAL_GetTick>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d902      	bls.n	8006ae6 <HAL_SD_ReadBlocks+0x1ae>
 8006ae0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d112      	bne.n	8006b0c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a48      	ldr	r2, [pc, #288]	@ (8006c0c <HAL_SD_ReadBlocks+0x2d4>)
 8006aec:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e0ec      	b.n	8006ce6 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b12:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d096      	beq.n	8006a48 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d022      	beq.n	8006b6e <HAL_SD_ReadBlocks+0x236>
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d91f      	bls.n	8006b6e <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b32:	2b03      	cmp	r3, #3
 8006b34:	d01b      	beq.n	8006b6e <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f003 f8d8 	bl	8009cf0 <SDMMC_CmdStopTransfer>
 8006b40:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006b42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d012      	beq.n	8006b6e <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a2f      	ldr	r2, [pc, #188]	@ (8006c0c <HAL_SD_ReadBlocks+0x2d4>)
 8006b4e:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b56:	431a      	orrs	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e0bb      	b.n	8006ce6 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b74:	f003 0308 	and.w	r3, r3, #8
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d012      	beq.n	8006ba2 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a22      	ldr	r2, [pc, #136]	@ (8006c0c <HAL_SD_ReadBlocks+0x2d4>)
 8006b82:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b88:	f043 0208 	orr.w	r2, r3, #8
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e0a1      	b.n	8006ce6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ba8:	f003 0302 	and.w	r3, r3, #2
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d012      	beq.n	8006bd6 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a15      	ldr	r2, [pc, #84]	@ (8006c0c <HAL_SD_ReadBlocks+0x2d4>)
 8006bb6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bbc:	f043 0202 	orr.w	r2, r3, #2
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e087      	b.n	8006ce6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bdc:	f003 0320 	and.w	r3, r3, #32
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d064      	beq.n	8006cae <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a08      	ldr	r2, [pc, #32]	@ (8006c0c <HAL_SD_ReadBlocks+0x2d4>)
 8006bea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bf0:	f043 0220 	orr.w	r2, r3, #32
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e06d      	b.n	8006ce6 <HAL_SD_ReadBlocks+0x3ae>
 8006c0a:	bf00      	nop
 8006c0c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4618      	mov	r0, r3
 8006c16:	f002 ff11 	bl	8009a3c <SDMMC_ReadFIFO>
 8006c1a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c1e:	b2da      	uxtb	r2, r3
 8006c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c22:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c26:	3301      	adds	r3, #1
 8006c28:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c32:	0a1b      	lsrs	r3, r3, #8
 8006c34:	b2da      	uxtb	r2, r3
 8006c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c38:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006c40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c42:	3b01      	subs	r3, #1
 8006c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c48:	0c1b      	lsrs	r3, r3, #16
 8006c4a:	b2da      	uxtb	r2, r3
 8006c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c4e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c52:	3301      	adds	r3, #1
 8006c54:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006c56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c5e:	0e1b      	lsrs	r3, r3, #24
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c64:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c68:	3301      	adds	r3, #1
 8006c6a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006c6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006c72:	f7fb ffc9 	bl	8002c08 <HAL_GetTick>
 8006c76:	4602      	mov	r2, r0
 8006c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d902      	bls.n	8006c88 <HAL_SD_ReadBlocks+0x350>
 8006c82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d112      	bne.n	8006cae <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a18      	ldr	r2, [pc, #96]	@ (8006cf0 <HAL_SD_ReadBlocks+0x3b8>)
 8006c8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c94:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e01b      	b.n	8006ce6 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d002      	beq.n	8006cc2 <HAL_SD_ReadBlocks+0x38a>
 8006cbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1a6      	bne.n	8006c10 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006cca:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	e006      	b.n	8006ce6 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cdc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
  }
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3748      	adds	r7, #72	@ 0x48
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	004005ff 	.word	0x004005ff

08006cf4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b092      	sub	sp, #72	@ 0x48
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
 8006d00:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006d02:	f7fb ff81 	bl	8002c08 <HAL_GetTick>
 8006d06:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d107      	bne.n	8006d26 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d1a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e165      	b.n	8006ff2 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	f040 8158 	bne.w	8006fe4 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006d3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	441a      	add	r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d907      	bls.n	8006d58 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d4c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e14c      	b.n	8006ff2 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2203      	movs	r2, #3
 8006d5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2200      	movs	r2, #0
 8006d66:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d002      	beq.n	8006d76 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d72:	025b      	lsls	r3, r3, #9
 8006d74:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006d76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006d7a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	025b      	lsls	r3, r3, #9
 8006d80:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006d82:	2390      	movs	r3, #144	@ 0x90
 8006d84:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006d86:	2300      	movs	r3, #0
 8006d88:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f107 0218 	add.w	r2, r7, #24
 8006d9a:	4611      	mov	r1, r2
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f002 fed1 	bl	8009b44 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d90a      	bls.n	8006dbe <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2220      	movs	r2, #32
 8006dac:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006db4:	4618      	mov	r0, r3
 8006db6:	f002 ff79 	bl	8009cac <SDMMC_CmdWriteMultiBlock>
 8006dba:	6478      	str	r0, [r7, #68]	@ 0x44
 8006dbc:	e009      	b.n	8006dd2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2210      	movs	r2, #16
 8006dc2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f002 ff4c 	bl	8009c68 <SDMMC_CmdWriteSingleBlock>
 8006dd0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006dd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d012      	beq.n	8006dfe <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a87      	ldr	r2, [pc, #540]	@ (8006ffc <HAL_SD_WriteBlocks+0x308>)
 8006dde:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006de6:	431a      	orrs	r2, r3
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e0f9      	b.n	8006ff2 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006e02:	e065      	b.n	8006ed0 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d040      	beq.n	8006e94 <HAL_SD_WriteBlocks+0x1a0>
 8006e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d03d      	beq.n	8006e94 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006e18:	2300      	movs	r3, #0
 8006e1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e1c:	e037      	b.n	8006e8e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8006e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e26:	3301      	adds	r3, #1
 8006e28:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	021a      	lsls	r2, r3, #8
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e3e:	3301      	adds	r3, #1
 8006e40:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006e42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e44:	3b01      	subs	r3, #1
 8006e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	041a      	lsls	r2, r3, #16
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e56:	3301      	adds	r3, #1
 8006e58:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	061a      	lsls	r2, r3, #24
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e6e:	3301      	adds	r3, #1
 8006e70:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e74:	3b01      	subs	r3, #1
 8006e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f107 0214 	add.w	r2, r7, #20
 8006e80:	4611      	mov	r1, r2
 8006e82:	4618      	mov	r0, r3
 8006e84:	f002 fde7 	bl	8009a56 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006e88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e90:	2b07      	cmp	r3, #7
 8006e92:	d9c4      	bls.n	8006e1e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006e94:	f7fb feb8 	bl	8002c08 <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d902      	bls.n	8006eaa <HAL_SD_WriteBlocks+0x1b6>
 8006ea4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d112      	bne.n	8006ed0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a53      	ldr	r2, [pc, #332]	@ (8006ffc <HAL_SD_WriteBlocks+0x308>)
 8006eb0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006eb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006eb8:	431a      	orrs	r2, r3
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e090      	b.n	8006ff2 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ed6:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d092      	beq.n	8006e04 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d022      	beq.n	8006f32 <HAL_SD_WriteBlocks+0x23e>
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d91f      	bls.n	8006f32 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ef6:	2b03      	cmp	r3, #3
 8006ef8:	d01b      	beq.n	8006f32 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f002 fef6 	bl	8009cf0 <SDMMC_CmdStopTransfer>
 8006f04:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006f06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d012      	beq.n	8006f32 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a3a      	ldr	r2, [pc, #232]	@ (8006ffc <HAL_SD_WriteBlocks+0x308>)
 8006f12:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f1a:	431a      	orrs	r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e05f      	b.n	8006ff2 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f38:	f003 0308 	and.w	r3, r3, #8
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d012      	beq.n	8006f66 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a2d      	ldr	r2, [pc, #180]	@ (8006ffc <HAL_SD_WriteBlocks+0x308>)
 8006f46:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f4c:	f043 0208 	orr.w	r2, r3, #8
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e045      	b.n	8006ff2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f6c:	f003 0302 	and.w	r3, r3, #2
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d012      	beq.n	8006f9a <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a20      	ldr	r2, [pc, #128]	@ (8006ffc <HAL_SD_WriteBlocks+0x308>)
 8006f7a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f80:	f043 0202 	orr.w	r2, r3, #2
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e02b      	b.n	8006ff2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fa0:	f003 0310 	and.w	r3, r3, #16
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d012      	beq.n	8006fce <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a13      	ldr	r2, [pc, #76]	@ (8006ffc <HAL_SD_WriteBlocks+0x308>)
 8006fae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb4:	f043 0210 	orr.w	r2, r3, #16
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e011      	b.n	8006ff2 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006fd6:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	e006      	b.n	8006ff2 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
  }
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3748      	adds	r7, #72	@ 0x48
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	004005ff 	.word	0x004005ff

08007000 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800700e:	0f9b      	lsrs	r3, r3, #30
 8007010:	b2da      	uxtb	r2, r3
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800701a:	0e9b      	lsrs	r3, r3, #26
 800701c:	b2db      	uxtb	r3, r3
 800701e:	f003 030f 	and.w	r3, r3, #15
 8007022:	b2da      	uxtb	r2, r3
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800702c:	0e1b      	lsrs	r3, r3, #24
 800702e:	b2db      	uxtb	r3, r3
 8007030:	f003 0303 	and.w	r3, r3, #3
 8007034:	b2da      	uxtb	r2, r3
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800703e:	0c1b      	lsrs	r3, r3, #16
 8007040:	b2da      	uxtb	r2, r3
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800704a:	0a1b      	lsrs	r3, r3, #8
 800704c:	b2da      	uxtb	r2, r3
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007056:	b2da      	uxtb	r2, r3
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007060:	0d1b      	lsrs	r3, r3, #20
 8007062:	b29a      	uxth	r2, r3
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800706c:	0c1b      	lsrs	r3, r3, #16
 800706e:	b2db      	uxtb	r3, r3
 8007070:	f003 030f 	and.w	r3, r3, #15
 8007074:	b2da      	uxtb	r2, r3
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800707e:	0bdb      	lsrs	r3, r3, #15
 8007080:	b2db      	uxtb	r3, r3
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	b2da      	uxtb	r2, r3
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007090:	0b9b      	lsrs	r3, r3, #14
 8007092:	b2db      	uxtb	r3, r3
 8007094:	f003 0301 	and.w	r3, r3, #1
 8007098:	b2da      	uxtb	r2, r3
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070a2:	0b5b      	lsrs	r3, r3, #13
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	f003 0301 	and.w	r3, r3, #1
 80070aa:	b2da      	uxtb	r2, r3
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070b4:	0b1b      	lsrs	r3, r3, #12
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	f003 0301 	and.w	r3, r3, #1
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	2200      	movs	r2, #0
 80070c6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d163      	bne.n	8007198 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070d4:	009a      	lsls	r2, r3, #2
 80070d6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80070da:	4013      	ands	r3, r2
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80070e0:	0f92      	lsrs	r2, r2, #30
 80070e2:	431a      	orrs	r2, r3
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070ec:	0edb      	lsrs	r3, r3, #27
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	f003 0307 	and.w	r3, r3, #7
 80070f4:	b2da      	uxtb	r2, r3
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070fe:	0e1b      	lsrs	r3, r3, #24
 8007100:	b2db      	uxtb	r3, r3
 8007102:	f003 0307 	and.w	r3, r3, #7
 8007106:	b2da      	uxtb	r2, r3
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007110:	0d5b      	lsrs	r3, r3, #21
 8007112:	b2db      	uxtb	r3, r3
 8007114:	f003 0307 	and.w	r3, r3, #7
 8007118:	b2da      	uxtb	r2, r3
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007122:	0c9b      	lsrs	r3, r3, #18
 8007124:	b2db      	uxtb	r3, r3
 8007126:	f003 0307 	and.w	r3, r3, #7
 800712a:	b2da      	uxtb	r2, r3
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007134:	0bdb      	lsrs	r3, r3, #15
 8007136:	b2db      	uxtb	r3, r3
 8007138:	f003 0307 	and.w	r3, r3, #7
 800713c:	b2da      	uxtb	r2, r3
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	1c5a      	adds	r2, r3, #1
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	7e1b      	ldrb	r3, [r3, #24]
 8007150:	b2db      	uxtb	r3, r3
 8007152:	f003 0307 	and.w	r3, r3, #7
 8007156:	3302      	adds	r3, #2
 8007158:	2201      	movs	r2, #1
 800715a:	fa02 f303 	lsl.w	r3, r2, r3
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007162:	fb03 f202 	mul.w	r2, r3, r2
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	7a1b      	ldrb	r3, [r3, #8]
 800716e:	b2db      	uxtb	r3, r3
 8007170:	f003 030f 	and.w	r3, r3, #15
 8007174:	2201      	movs	r2, #1
 8007176:	409a      	lsls	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007184:	0a52      	lsrs	r2, r2, #9
 8007186:	fb03 f202 	mul.w	r2, r3, r2
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007194:	661a      	str	r2, [r3, #96]	@ 0x60
 8007196:	e031      	b.n	80071fc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800719c:	2b01      	cmp	r3, #1
 800719e:	d11d      	bne.n	80071dc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80071a4:	041b      	lsls	r3, r3, #16
 80071a6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071ae:	0c1b      	lsrs	r3, r3, #16
 80071b0:	431a      	orrs	r2, r3
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	3301      	adds	r3, #1
 80071bc:	029a      	lsls	r2, r3, #10
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071d0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	661a      	str	r2, [r3, #96]	@ 0x60
 80071da:	e00f      	b.n	80071fc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a58      	ldr	r2, [pc, #352]	@ (8007344 <HAL_SD_GetCardCSD+0x344>)
 80071e2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071e8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e09d      	b.n	8007338 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007200:	0b9b      	lsrs	r3, r3, #14
 8007202:	b2db      	uxtb	r3, r3
 8007204:	f003 0301 	and.w	r3, r3, #1
 8007208:	b2da      	uxtb	r2, r3
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007212:	09db      	lsrs	r3, r3, #7
 8007214:	b2db      	uxtb	r3, r3
 8007216:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800721a:	b2da      	uxtb	r2, r3
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007224:	b2db      	uxtb	r3, r3
 8007226:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800722a:	b2da      	uxtb	r2, r3
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007234:	0fdb      	lsrs	r3, r3, #31
 8007236:	b2da      	uxtb	r2, r3
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007240:	0f5b      	lsrs	r3, r3, #29
 8007242:	b2db      	uxtb	r3, r3
 8007244:	f003 0303 	and.w	r3, r3, #3
 8007248:	b2da      	uxtb	r2, r3
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007252:	0e9b      	lsrs	r3, r3, #26
 8007254:	b2db      	uxtb	r3, r3
 8007256:	f003 0307 	and.w	r3, r3, #7
 800725a:	b2da      	uxtb	r2, r3
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007264:	0d9b      	lsrs	r3, r3, #22
 8007266:	b2db      	uxtb	r3, r3
 8007268:	f003 030f 	and.w	r3, r3, #15
 800726c:	b2da      	uxtb	r2, r3
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007276:	0d5b      	lsrs	r3, r3, #21
 8007278:	b2db      	uxtb	r3, r3
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	b2da      	uxtb	r2, r3
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007292:	0c1b      	lsrs	r3, r3, #16
 8007294:	b2db      	uxtb	r3, r3
 8007296:	f003 0301 	and.w	r3, r3, #1
 800729a:	b2da      	uxtb	r2, r3
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072a6:	0bdb      	lsrs	r3, r3, #15
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072ba:	0b9b      	lsrs	r3, r3, #14
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072ce:	0b5b      	lsrs	r3, r3, #13
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072e2:	0b1b      	lsrs	r3, r3, #12
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	b2da      	uxtb	r2, r3
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072f6:	0a9b      	lsrs	r3, r3, #10
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	f003 0303 	and.w	r3, r3, #3
 80072fe:	b2da      	uxtb	r2, r3
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800730a:	0a1b      	lsrs	r3, r3, #8
 800730c:	b2db      	uxtb	r3, r3
 800730e:	f003 0303 	and.w	r3, r3, #3
 8007312:	b2da      	uxtb	r2, r3
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800731e:	085b      	lsrs	r3, r3, #1
 8007320:	b2db      	uxtb	r3, r3
 8007322:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007326:	b2da      	uxtb	r2, r3
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	004005ff 	.word	0x004005ff

08007348 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80073a0:	b5b0      	push	{r4, r5, r7, lr}
 80073a2:	b08e      	sub	sp, #56	@ 0x38
 80073a4:	af04      	add	r7, sp, #16
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2203      	movs	r2, #3
 80073b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d02e      	beq.n	800741e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073c6:	d106      	bne.n	80073d6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073cc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	639a      	str	r2, [r3, #56]	@ 0x38
 80073d4:	e029      	b.n	800742a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073dc:	d10a      	bne.n	80073f4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fa1c 	bl	800781c <SD_WideBus_Enable>
 80073e4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073ea:	6a3b      	ldr	r3, [r7, #32]
 80073ec:	431a      	orrs	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	639a      	str	r2, [r3, #56]	@ 0x38
 80073f2:	e01a      	b.n	800742a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10a      	bne.n	8007410 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fa59 	bl	80078b2 <SD_WideBus_Disable>
 8007400:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007406:	6a3b      	ldr	r3, [r7, #32]
 8007408:	431a      	orrs	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	639a      	str	r2, [r3, #56]	@ 0x38
 800740e:	e00c      	b.n	800742a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007414:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	639a      	str	r2, [r3, #56]	@ 0x38
 800741c:	e005      	b.n	800742a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007422:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00b      	beq.n	800744a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a26      	ldr	r2, [pc, #152]	@ (80074d0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007438:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007448:	e01f      	b.n	800748a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	695b      	ldr	r3, [r3, #20]
 8007464:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681d      	ldr	r5, [r3, #0]
 8007470:	466c      	mov	r4, sp
 8007472:	f107 0314 	add.w	r3, r7, #20
 8007476:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800747a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800747e:	f107 0308 	add.w	r3, r7, #8
 8007482:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007484:	4628      	mov	r0, r5
 8007486:	f002 faad 	bl	80099e4 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007492:	4618      	mov	r0, r3
 8007494:	f002 fb82 	bl	8009b9c <SDMMC_CmdBlockLength>
 8007498:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800749a:	6a3b      	ldr	r3, [r7, #32]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00c      	beq.n	80074ba <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a0a      	ldr	r2, [pc, #40]	@ (80074d0 <HAL_SD_ConfigWideBusOperation+0x130>)
 80074a6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074ac:	6a3b      	ldr	r3, [r7, #32]
 80074ae:	431a      	orrs	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2201      	movs	r2, #1
 80074be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 80074c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3728      	adds	r7, #40	@ 0x28
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bdb0      	pop	{r4, r5, r7, pc}
 80074ce:	bf00      	nop
 80074d0:	004005ff 	.word	0x004005ff

080074d4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80074dc:	2300      	movs	r3, #0
 80074de:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80074e0:	f107 030c 	add.w	r3, r7, #12
 80074e4:	4619      	mov	r1, r3
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f970 	bl	80077cc <SD_SendStatus>
 80074ec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d005      	beq.n	8007500 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	431a      	orrs	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	0a5b      	lsrs	r3, r3, #9
 8007504:	f003 030f 	and.w	r3, r3, #15
 8007508:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800750a:	693b      	ldr	r3, [r7, #16]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3718      	adds	r7, #24
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007514:	b5b0      	push	{r4, r5, r7, lr}
 8007516:	b094      	sub	sp, #80	@ 0x50
 8007518:	af04      	add	r7, sp, #16
 800751a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800751c:	2301      	movs	r3, #1
 800751e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4618      	mov	r0, r3
 8007526:	f002 fab5 	bl	8009a94 <SDMMC_GetPowerState>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d102      	bne.n	8007536 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007530:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8007534:	e0b8      	b.n	80076a8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800753a:	2b03      	cmp	r3, #3
 800753c:	d02f      	beq.n	800759e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4618      	mov	r0, r3
 8007544:	f002 fcdf 	bl	8009f06 <SDMMC_CmdSendCID>
 8007548:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800754a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800754c:	2b00      	cmp	r3, #0
 800754e:	d001      	beq.n	8007554 <SD_InitCard+0x40>
    {
      return errorstate;
 8007550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007552:	e0a9      	b.n	80076a8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2100      	movs	r1, #0
 800755a:	4618      	mov	r0, r3
 800755c:	f002 fadf 	bl	8009b1e <SDMMC_GetResponse>
 8007560:	4602      	mov	r2, r0
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2104      	movs	r1, #4
 800756c:	4618      	mov	r0, r3
 800756e:	f002 fad6 	bl	8009b1e <SDMMC_GetResponse>
 8007572:	4602      	mov	r2, r0
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2108      	movs	r1, #8
 800757e:	4618      	mov	r0, r3
 8007580:	f002 facd 	bl	8009b1e <SDMMC_GetResponse>
 8007584:	4602      	mov	r2, r0
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	210c      	movs	r1, #12
 8007590:	4618      	mov	r0, r3
 8007592:	f002 fac4 	bl	8009b1e <SDMMC_GetResponse>
 8007596:	4602      	mov	r2, r0
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075a2:	2b03      	cmp	r3, #3
 80075a4:	d00d      	beq.n	80075c2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f107 020e 	add.w	r2, r7, #14
 80075ae:	4611      	mov	r1, r2
 80075b0:	4618      	mov	r0, r3
 80075b2:	f002 fce5 	bl	8009f80 <SDMMC_CmdSetRelAdd>
 80075b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80075b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d001      	beq.n	80075c2 <SD_InitCard+0xae>
    {
      return errorstate;
 80075be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075c0:	e072      	b.n	80076a8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075c6:	2b03      	cmp	r3, #3
 80075c8:	d036      	beq.n	8007638 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80075ca:	89fb      	ldrh	r3, [r7, #14]
 80075cc:	461a      	mov	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075da:	041b      	lsls	r3, r3, #16
 80075dc:	4619      	mov	r1, r3
 80075de:	4610      	mov	r0, r2
 80075e0:	f002 fcaf 	bl	8009f42 <SDMMC_CmdSendCSD>
 80075e4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80075e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d001      	beq.n	80075f0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80075ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075ee:	e05b      	b.n	80076a8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2100      	movs	r1, #0
 80075f6:	4618      	mov	r0, r3
 80075f8:	f002 fa91 	bl	8009b1e <SDMMC_GetResponse>
 80075fc:	4602      	mov	r2, r0
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2104      	movs	r1, #4
 8007608:	4618      	mov	r0, r3
 800760a:	f002 fa88 	bl	8009b1e <SDMMC_GetResponse>
 800760e:	4602      	mov	r2, r0
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2108      	movs	r1, #8
 800761a:	4618      	mov	r0, r3
 800761c:	f002 fa7f 	bl	8009b1e <SDMMC_GetResponse>
 8007620:	4602      	mov	r2, r0
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	210c      	movs	r1, #12
 800762c:	4618      	mov	r0, r3
 800762e:	f002 fa76 	bl	8009b1e <SDMMC_GetResponse>
 8007632:	4602      	mov	r2, r0
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2104      	movs	r1, #4
 800763e:	4618      	mov	r0, r3
 8007640:	f002 fa6d 	bl	8009b1e <SDMMC_GetResponse>
 8007644:	4603      	mov	r3, r0
 8007646:	0d1a      	lsrs	r2, r3, #20
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800764c:	f107 0310 	add.w	r3, r7, #16
 8007650:	4619      	mov	r1, r3
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7ff fcd4 	bl	8007000 <HAL_SD_GetCardCSD>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d002      	beq.n	8007664 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800765e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007662:	e021      	b.n	80076a8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6819      	ldr	r1, [r3, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800766c:	041b      	lsls	r3, r3, #16
 800766e:	2200      	movs	r2, #0
 8007670:	461c      	mov	r4, r3
 8007672:	4615      	mov	r5, r2
 8007674:	4622      	mov	r2, r4
 8007676:	462b      	mov	r3, r5
 8007678:	4608      	mov	r0, r1
 800767a:	f002 fb5b 	bl	8009d34 <SDMMC_CmdSelDesel>
 800767e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007682:	2b00      	cmp	r3, #0
 8007684:	d001      	beq.n	800768a <SD_InitCard+0x176>
  {
    return errorstate;
 8007686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007688:	e00e      	b.n	80076a8 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681d      	ldr	r5, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	466c      	mov	r4, sp
 8007692:	f103 0210 	add.w	r2, r3, #16
 8007696:	ca07      	ldmia	r2, {r0, r1, r2}
 8007698:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800769c:	3304      	adds	r3, #4
 800769e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80076a0:	4628      	mov	r0, r5
 80076a2:	f002 f99f 	bl	80099e4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3740      	adds	r7, #64	@ 0x40
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bdb0      	pop	{r4, r5, r7, pc}

080076b0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b086      	sub	sp, #24
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076b8:	2300      	movs	r3, #0
 80076ba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80076bc:	2300      	movs	r3, #0
 80076be:	617b      	str	r3, [r7, #20]
 80076c0:	2300      	movs	r3, #0
 80076c2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4618      	mov	r0, r3
 80076ca:	f002 fb56 	bl	8009d7a <SDMMC_CmdGoIdleState>
 80076ce:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <SD_PowerON+0x2a>
  {
    return errorstate;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	e072      	b.n	80077c0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4618      	mov	r0, r3
 80076e0:	f002 fb69 	bl	8009db6 <SDMMC_CmdOperCond>
 80076e4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00d      	beq.n	8007708 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4618      	mov	r0, r3
 80076f8:	f002 fb3f 	bl	8009d7a <SDMMC_CmdGoIdleState>
 80076fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d004      	beq.n	800770e <SD_PowerON+0x5e>
    {
      return errorstate;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	e05b      	b.n	80077c0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007712:	2b01      	cmp	r3, #1
 8007714:	d137      	bne.n	8007786 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2100      	movs	r1, #0
 800771c:	4618      	mov	r0, r3
 800771e:	f002 fb69 	bl	8009df4 <SDMMC_CmdAppCommand>
 8007722:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d02d      	beq.n	8007786 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800772a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800772e:	e047      	b.n	80077c0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2100      	movs	r1, #0
 8007736:	4618      	mov	r0, r3
 8007738:	f002 fb5c 	bl	8009df4 <SDMMC_CmdAppCommand>
 800773c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d001      	beq.n	8007748 <SD_PowerON+0x98>
    {
      return errorstate;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	e03b      	b.n	80077c0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	491e      	ldr	r1, [pc, #120]	@ (80077c8 <SD_PowerON+0x118>)
 800774e:	4618      	mov	r0, r3
 8007750:	f002 fb72 	bl	8009e38 <SDMMC_CmdAppOperCommand>
 8007754:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d002      	beq.n	8007762 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800775c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007760:	e02e      	b.n	80077c0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2100      	movs	r1, #0
 8007768:	4618      	mov	r0, r3
 800776a:	f002 f9d8 	bl	8009b1e <SDMMC_GetResponse>
 800776e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	0fdb      	lsrs	r3, r3, #31
 8007774:	2b01      	cmp	r3, #1
 8007776:	d101      	bne.n	800777c <SD_PowerON+0xcc>
 8007778:	2301      	movs	r3, #1
 800777a:	e000      	b.n	800777e <SD_PowerON+0xce>
 800777c:	2300      	movs	r3, #0
 800777e:	613b      	str	r3, [r7, #16]

    count++;
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	3301      	adds	r3, #1
 8007784:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800778c:	4293      	cmp	r3, r2
 800778e:	d802      	bhi.n	8007796 <SD_PowerON+0xe6>
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d0cc      	beq.n	8007730 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800779c:	4293      	cmp	r3, r2
 800779e:	d902      	bls.n	80077a6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80077a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80077a4:	e00c      	b.n	80077c0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d003      	beq.n	80077b8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	645a      	str	r2, [r3, #68]	@ 0x44
 80077b6:	e002      	b.n	80077be <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3718      	adds	r7, #24
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	c1100000 	.word	0xc1100000

080077cc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d102      	bne.n	80077e2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80077dc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80077e0:	e018      	b.n	8007814 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077ea:	041b      	lsls	r3, r3, #16
 80077ec:	4619      	mov	r1, r3
 80077ee:	4610      	mov	r0, r2
 80077f0:	f002 fbe7 	bl	8009fc2 <SDMMC_CmdSendStatus>
 80077f4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d001      	beq.n	8007800 <SD_SendStatus+0x34>
  {
    return errorstate;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	e009      	b.n	8007814 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2100      	movs	r1, #0
 8007806:	4618      	mov	r0, r3
 8007808:	f002 f989 	bl	8009b1e <SDMMC_GetResponse>
 800780c:	4602      	mov	r2, r0
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007824:	2300      	movs	r3, #0
 8007826:	60fb      	str	r3, [r7, #12]
 8007828:	2300      	movs	r3, #0
 800782a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2100      	movs	r1, #0
 8007832:	4618      	mov	r0, r3
 8007834:	f002 f973 	bl	8009b1e <SDMMC_GetResponse>
 8007838:	4603      	mov	r3, r0
 800783a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800783e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007842:	d102      	bne.n	800784a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007844:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007848:	e02f      	b.n	80078aa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800784a:	f107 030c 	add.w	r3, r7, #12
 800784e:	4619      	mov	r1, r3
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f879 	bl	8007948 <SD_FindSCR>
 8007856:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	e023      	b.n	80078aa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007868:	2b00      	cmp	r3, #0
 800786a:	d01c      	beq.n	80078a6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007874:	041b      	lsls	r3, r3, #16
 8007876:	4619      	mov	r1, r3
 8007878:	4610      	mov	r0, r2
 800787a:	f002 fabb 	bl	8009df4 <SDMMC_CmdAppCommand>
 800787e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d001      	beq.n	800788a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	e00f      	b.n	80078aa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2102      	movs	r1, #2
 8007890:	4618      	mov	r0, r3
 8007892:	f002 faf5 	bl	8009e80 <SDMMC_CmdBusWidth>
 8007896:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d001      	beq.n	80078a2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	e003      	b.n	80078aa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80078a2:	2300      	movs	r3, #0
 80078a4:	e001      	b.n	80078aa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80078a6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3718      	adds	r7, #24
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b086      	sub	sp, #24
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80078ba:	2300      	movs	r3, #0
 80078bc:	60fb      	str	r3, [r7, #12]
 80078be:	2300      	movs	r3, #0
 80078c0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2100      	movs	r1, #0
 80078c8:	4618      	mov	r0, r3
 80078ca:	f002 f928 	bl	8009b1e <SDMMC_GetResponse>
 80078ce:	4603      	mov	r3, r0
 80078d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80078d8:	d102      	bne.n	80078e0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80078da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80078de:	e02f      	b.n	8007940 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80078e0:	f107 030c 	add.w	r3, r7, #12
 80078e4:	4619      	mov	r1, r3
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f82e 	bl	8007948 <SD_FindSCR>
 80078ec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d001      	beq.n	80078f8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	e023      	b.n	8007940 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d01c      	beq.n	800793c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800790a:	041b      	lsls	r3, r3, #16
 800790c:	4619      	mov	r1, r3
 800790e:	4610      	mov	r0, r2
 8007910:	f002 fa70 	bl	8009df4 <SDMMC_CmdAppCommand>
 8007914:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d001      	beq.n	8007920 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	e00f      	b.n	8007940 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2100      	movs	r1, #0
 8007926:	4618      	mov	r0, r3
 8007928:	f002 faaa 	bl	8009e80 <SDMMC_CmdBusWidth>
 800792c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d001      	beq.n	8007938 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	e003      	b.n	8007940 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007938:	2300      	movs	r3, #0
 800793a:	e001      	b.n	8007940 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800793c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8007940:	4618      	mov	r0, r3
 8007942:	3718      	adds	r7, #24
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007948:	b590      	push	{r4, r7, lr}
 800794a:	b08f      	sub	sp, #60	@ 0x3c
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007952:	f7fb f959 	bl	8002c08 <HAL_GetTick>
 8007956:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8007958:	2300      	movs	r3, #0
 800795a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800795c:	2300      	movs	r3, #0
 800795e:	60bb      	str	r3, [r7, #8]
 8007960:	2300      	movs	r3, #0
 8007962:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2108      	movs	r1, #8
 800796e:	4618      	mov	r0, r3
 8007970:	f002 f914 	bl	8009b9c <SDMMC_CmdBlockLength>
 8007974:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007978:	2b00      	cmp	r3, #0
 800797a:	d001      	beq.n	8007980 <SD_FindSCR+0x38>
  {
    return errorstate;
 800797c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800797e:	e0b2      	b.n	8007ae6 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007988:	041b      	lsls	r3, r3, #16
 800798a:	4619      	mov	r1, r3
 800798c:	4610      	mov	r0, r2
 800798e:	f002 fa31 	bl	8009df4 <SDMMC_CmdAppCommand>
 8007992:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007996:	2b00      	cmp	r3, #0
 8007998:	d001      	beq.n	800799e <SD_FindSCR+0x56>
  {
    return errorstate;
 800799a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800799c:	e0a3      	b.n	8007ae6 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800799e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80079a2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80079a4:	2308      	movs	r3, #8
 80079a6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80079a8:	2330      	movs	r3, #48	@ 0x30
 80079aa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80079ac:	2302      	movs	r3, #2
 80079ae:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80079b0:	2300      	movs	r3, #0
 80079b2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80079b4:	2301      	movs	r3, #1
 80079b6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f107 0210 	add.w	r2, r7, #16
 80079c0:	4611      	mov	r1, r2
 80079c2:	4618      	mov	r0, r3
 80079c4:	f002 f8be 	bl	8009b44 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4618      	mov	r0, r3
 80079ce:	f002 fa79 	bl	8009ec4 <SDMMC_CmdSendSCR>
 80079d2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80079d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d02a      	beq.n	8007a30 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80079da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079dc:	e083      	b.n	8007ae6 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00f      	beq.n	8007a0c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6819      	ldr	r1, [r3, #0]
 80079f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	f107 0208 	add.w	r2, r7, #8
 80079f8:	18d4      	adds	r4, r2, r3
 80079fa:	4608      	mov	r0, r1
 80079fc:	f002 f81e 	bl	8009a3c <SDMMC_ReadFIFO>
 8007a00:	4603      	mov	r3, r0
 8007a02:	6023      	str	r3, [r4, #0]
      index++;
 8007a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a06:	3301      	adds	r3, #1
 8007a08:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a0a:	e006      	b.n	8007a1a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d012      	beq.n	8007a40 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007a1a:	f7fb f8f5 	bl	8002c08 <HAL_GetTick>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a28:	d102      	bne.n	8007a30 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007a2a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007a2e:	e05a      	b.n	8007ae6 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a36:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d0cf      	beq.n	80079de <SD_FindSCR+0x96>
 8007a3e:	e000      	b.n	8007a42 <SD_FindSCR+0xfa>
      break;
 8007a40:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a48:	f003 0308 	and.w	r3, r3, #8
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d005      	beq.n	8007a5c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2208      	movs	r2, #8
 8007a56:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007a58:	2308      	movs	r3, #8
 8007a5a:	e044      	b.n	8007ae6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a62:	f003 0302 	and.w	r3, r3, #2
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d005      	beq.n	8007a76 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2202      	movs	r2, #2
 8007a70:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007a72:	2302      	movs	r3, #2
 8007a74:	e037      	b.n	8007ae6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a7c:	f003 0320 	and.w	r3, r3, #32
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d005      	beq.n	8007a90 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2220      	movs	r2, #32
 8007a8a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007a8c:	2320      	movs	r3, #32
 8007a8e:	e02a      	b.n	8007ae6 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007a98:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	061a      	lsls	r2, r3, #24
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	021b      	lsls	r3, r3, #8
 8007aa2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007aa6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	0a1b      	lsrs	r3, r3, #8
 8007aac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007ab0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	0e1b      	lsrs	r3, r3, #24
 8007ab6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aba:	601a      	str	r2, [r3, #0]
    scr++;
 8007abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007abe:	3304      	adds	r3, #4
 8007ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	061a      	lsls	r2, r3, #24
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	021b      	lsls	r3, r3, #8
 8007aca:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007ace:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	0a1b      	lsrs	r3, r3, #8
 8007ad4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007ad8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	0e1b      	lsrs	r3, r3, #24
 8007ade:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ae2:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	373c      	adds	r7, #60	@ 0x3c
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd90      	pop	{r4, r7, pc}

08007aee <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b084      	sub	sp, #16
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d101      	bne.n	8007b00 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e09d      	b.n	8007c3c <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d108      	bne.n	8007b1a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b10:	d009      	beq.n	8007b26 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	61da      	str	r2, [r3, #28]
 8007b18:	e005      	b.n	8007b26 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d106      	bne.n	8007b46 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f7fa fa8d 	bl	8002060 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2202      	movs	r2, #2
 8007b4a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b5c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007b66:	d902      	bls.n	8007b6e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	60fb      	str	r3, [r7, #12]
 8007b6c:	e002      	b.n	8007b74 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007b6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007b72:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007b7c:	d007      	beq.n	8007b8e <HAL_SPI_Init+0xa0>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007b86:	d002      	beq.n	8007b8e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007b9e:	431a      	orrs	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	f003 0302 	and.w	r3, r3, #2
 8007ba8:	431a      	orrs	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	431a      	orrs	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007bbc:	431a      	orrs	r2, r3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	69db      	ldr	r3, [r3, #28]
 8007bc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007bc6:	431a      	orrs	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a1b      	ldr	r3, [r3, #32]
 8007bcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bd0:	ea42 0103 	orr.w	r1, r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bd8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	430a      	orrs	r2, r1
 8007be2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	0c1b      	lsrs	r3, r3, #16
 8007bea:	f003 0204 	and.w	r2, r3, #4
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf2:	f003 0310 	and.w	r3, r3, #16
 8007bf6:	431a      	orrs	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bfc:	f003 0308 	and.w	r3, r3, #8
 8007c00:	431a      	orrs	r2, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007c0a:	ea42 0103 	orr.w	r1, r2, r3
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	430a      	orrs	r2, r1
 8007c1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	69da      	ldr	r2, [r3, #28]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007c2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2201      	movs	r2, #1
 8007c36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d101      	bne.n	8007c56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e049      	b.n	8007cea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d106      	bne.n	8007c70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7fa fae0 	bl	8002230 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2202      	movs	r2, #2
 8007c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	3304      	adds	r3, #4
 8007c80:	4619      	mov	r1, r3
 8007c82:	4610      	mov	r0, r2
 8007c84:	f000 fadc 	bl	8008240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
	...

08007cf4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d001      	beq.n	8007d0c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e04c      	b.n	8007da6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a26      	ldr	r2, [pc, #152]	@ (8007db4 <HAL_TIM_Base_Start+0xc0>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d022      	beq.n	8007d64 <HAL_TIM_Base_Start+0x70>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d26:	d01d      	beq.n	8007d64 <HAL_TIM_Base_Start+0x70>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a22      	ldr	r2, [pc, #136]	@ (8007db8 <HAL_TIM_Base_Start+0xc4>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d018      	beq.n	8007d64 <HAL_TIM_Base_Start+0x70>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a21      	ldr	r2, [pc, #132]	@ (8007dbc <HAL_TIM_Base_Start+0xc8>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d013      	beq.n	8007d64 <HAL_TIM_Base_Start+0x70>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a1f      	ldr	r2, [pc, #124]	@ (8007dc0 <HAL_TIM_Base_Start+0xcc>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d00e      	beq.n	8007d64 <HAL_TIM_Base_Start+0x70>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a1e      	ldr	r2, [pc, #120]	@ (8007dc4 <HAL_TIM_Base_Start+0xd0>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d009      	beq.n	8007d64 <HAL_TIM_Base_Start+0x70>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a1c      	ldr	r2, [pc, #112]	@ (8007dc8 <HAL_TIM_Base_Start+0xd4>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d004      	beq.n	8007d64 <HAL_TIM_Base_Start+0x70>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a1b      	ldr	r2, [pc, #108]	@ (8007dcc <HAL_TIM_Base_Start+0xd8>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d115      	bne.n	8007d90 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	689a      	ldr	r2, [r3, #8]
 8007d6a:	4b19      	ldr	r3, [pc, #100]	@ (8007dd0 <HAL_TIM_Base_Start+0xdc>)
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2b06      	cmp	r3, #6
 8007d74:	d015      	beq.n	8007da2 <HAL_TIM_Base_Start+0xae>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d7c:	d011      	beq.n	8007da2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f042 0201 	orr.w	r2, r2, #1
 8007d8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d8e:	e008      	b.n	8007da2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f042 0201 	orr.w	r2, r2, #1
 8007d9e:	601a      	str	r2, [r3, #0]
 8007da0:	e000      	b.n	8007da4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007da2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3714      	adds	r7, #20
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	40010000 	.word	0x40010000
 8007db8:	40000400 	.word	0x40000400
 8007dbc:	40000800 	.word	0x40000800
 8007dc0:	40000c00 	.word	0x40000c00
 8007dc4:	40010400 	.word	0x40010400
 8007dc8:	40014000 	.word	0x40014000
 8007dcc:	40001800 	.word	0x40001800
 8007dd0:	00010007 	.word	0x00010007

08007dd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d101      	bne.n	8007de6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e049      	b.n	8007e7a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d106      	bne.n	8007e00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f7fa f9c4 	bl	8002188 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2202      	movs	r2, #2
 8007e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	3304      	adds	r3, #4
 8007e10:	4619      	mov	r1, r3
 8007e12:	4610      	mov	r0, r2
 8007e14:	f000 fa14 	bl	8008240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
	...

08007e84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b086      	sub	sp, #24
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d101      	bne.n	8007ea2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e9e:	2302      	movs	r3, #2
 8007ea0:	e0ff      	b.n	80080a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2b14      	cmp	r3, #20
 8007eae:	f200 80f0 	bhi.w	8008092 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8007eb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb8:	08007f0d 	.word	0x08007f0d
 8007ebc:	08008093 	.word	0x08008093
 8007ec0:	08008093 	.word	0x08008093
 8007ec4:	08008093 	.word	0x08008093
 8007ec8:	08007f4d 	.word	0x08007f4d
 8007ecc:	08008093 	.word	0x08008093
 8007ed0:	08008093 	.word	0x08008093
 8007ed4:	08008093 	.word	0x08008093
 8007ed8:	08007f8f 	.word	0x08007f8f
 8007edc:	08008093 	.word	0x08008093
 8007ee0:	08008093 	.word	0x08008093
 8007ee4:	08008093 	.word	0x08008093
 8007ee8:	08007fcf 	.word	0x08007fcf
 8007eec:	08008093 	.word	0x08008093
 8007ef0:	08008093 	.word	0x08008093
 8007ef4:	08008093 	.word	0x08008093
 8007ef8:	08008011 	.word	0x08008011
 8007efc:	08008093 	.word	0x08008093
 8007f00:	08008093 	.word	0x08008093
 8007f04:	08008093 	.word	0x08008093
 8007f08:	08008051 	.word	0x08008051
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	68b9      	ldr	r1, [r7, #8]
 8007f12:	4618      	mov	r0, r3
 8007f14:	f000 fa40 	bl	8008398 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	699a      	ldr	r2, [r3, #24]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f042 0208 	orr.w	r2, r2, #8
 8007f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	699a      	ldr	r2, [r3, #24]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f022 0204 	bic.w	r2, r2, #4
 8007f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	6999      	ldr	r1, [r3, #24]
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	691a      	ldr	r2, [r3, #16]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	430a      	orrs	r2, r1
 8007f48:	619a      	str	r2, [r3, #24]
      break;
 8007f4a:	e0a5      	b.n	8008098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68b9      	ldr	r1, [r7, #8]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 fa92 	bl	800847c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	699a      	ldr	r2, [r3, #24]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	699a      	ldr	r2, [r3, #24]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	6999      	ldr	r1, [r3, #24]
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	021a      	lsls	r2, r3, #8
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	430a      	orrs	r2, r1
 8007f8a:	619a      	str	r2, [r3, #24]
      break;
 8007f8c:	e084      	b.n	8008098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68b9      	ldr	r1, [r7, #8]
 8007f94:	4618      	mov	r0, r3
 8007f96:	f000 fae9 	bl	800856c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	69da      	ldr	r2, [r3, #28]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f042 0208 	orr.w	r2, r2, #8
 8007fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	69da      	ldr	r2, [r3, #28]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f022 0204 	bic.w	r2, r2, #4
 8007fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	69d9      	ldr	r1, [r3, #28]
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	691a      	ldr	r2, [r3, #16]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	430a      	orrs	r2, r1
 8007fca:	61da      	str	r2, [r3, #28]
      break;
 8007fcc:	e064      	b.n	8008098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68b9      	ldr	r1, [r7, #8]
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f000 fb3f 	bl	8008658 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	69da      	ldr	r2, [r3, #28]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007fe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	69da      	ldr	r2, [r3, #28]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ff8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	69d9      	ldr	r1, [r3, #28]
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	021a      	lsls	r2, r3, #8
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	430a      	orrs	r2, r1
 800800c:	61da      	str	r2, [r3, #28]
      break;
 800800e:	e043      	b.n	8008098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68b9      	ldr	r1, [r7, #8]
 8008016:	4618      	mov	r0, r3
 8008018:	f000 fb76 	bl	8008708 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f042 0208 	orr.w	r2, r2, #8
 800802a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f022 0204 	bic.w	r2, r2, #4
 800803a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	691a      	ldr	r2, [r3, #16]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	430a      	orrs	r2, r1
 800804c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800804e:	e023      	b.n	8008098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68b9      	ldr	r1, [r7, #8]
 8008056:	4618      	mov	r0, r3
 8008058:	f000 fba8 	bl	80087ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800806a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800807a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	021a      	lsls	r2, r3, #8
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	430a      	orrs	r2, r1
 800808e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008090:	e002      	b.n	8008098 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	75fb      	strb	r3, [r7, #23]
      break;
 8008096:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2200      	movs	r2, #0
 800809c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80080a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3718      	adds	r7, #24
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop

080080ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080b6:	2300      	movs	r3, #0
 80080b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d101      	bne.n	80080c8 <HAL_TIM_ConfigClockSource+0x1c>
 80080c4:	2302      	movs	r3, #2
 80080c6:	e0b4      	b.n	8008232 <HAL_TIM_ConfigClockSource+0x186>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2202      	movs	r2, #2
 80080d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	4b56      	ldr	r3, [pc, #344]	@ (800823c <HAL_TIM_ConfigClockSource+0x190>)
 80080e4:	4013      	ands	r3, r2
 80080e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80080ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68ba      	ldr	r2, [r7, #8]
 80080f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008100:	d03e      	beq.n	8008180 <HAL_TIM_ConfigClockSource+0xd4>
 8008102:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008106:	f200 8087 	bhi.w	8008218 <HAL_TIM_ConfigClockSource+0x16c>
 800810a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800810e:	f000 8086 	beq.w	800821e <HAL_TIM_ConfigClockSource+0x172>
 8008112:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008116:	d87f      	bhi.n	8008218 <HAL_TIM_ConfigClockSource+0x16c>
 8008118:	2b70      	cmp	r3, #112	@ 0x70
 800811a:	d01a      	beq.n	8008152 <HAL_TIM_ConfigClockSource+0xa6>
 800811c:	2b70      	cmp	r3, #112	@ 0x70
 800811e:	d87b      	bhi.n	8008218 <HAL_TIM_ConfigClockSource+0x16c>
 8008120:	2b60      	cmp	r3, #96	@ 0x60
 8008122:	d050      	beq.n	80081c6 <HAL_TIM_ConfigClockSource+0x11a>
 8008124:	2b60      	cmp	r3, #96	@ 0x60
 8008126:	d877      	bhi.n	8008218 <HAL_TIM_ConfigClockSource+0x16c>
 8008128:	2b50      	cmp	r3, #80	@ 0x50
 800812a:	d03c      	beq.n	80081a6 <HAL_TIM_ConfigClockSource+0xfa>
 800812c:	2b50      	cmp	r3, #80	@ 0x50
 800812e:	d873      	bhi.n	8008218 <HAL_TIM_ConfigClockSource+0x16c>
 8008130:	2b40      	cmp	r3, #64	@ 0x40
 8008132:	d058      	beq.n	80081e6 <HAL_TIM_ConfigClockSource+0x13a>
 8008134:	2b40      	cmp	r3, #64	@ 0x40
 8008136:	d86f      	bhi.n	8008218 <HAL_TIM_ConfigClockSource+0x16c>
 8008138:	2b30      	cmp	r3, #48	@ 0x30
 800813a:	d064      	beq.n	8008206 <HAL_TIM_ConfigClockSource+0x15a>
 800813c:	2b30      	cmp	r3, #48	@ 0x30
 800813e:	d86b      	bhi.n	8008218 <HAL_TIM_ConfigClockSource+0x16c>
 8008140:	2b20      	cmp	r3, #32
 8008142:	d060      	beq.n	8008206 <HAL_TIM_ConfigClockSource+0x15a>
 8008144:	2b20      	cmp	r3, #32
 8008146:	d867      	bhi.n	8008218 <HAL_TIM_ConfigClockSource+0x16c>
 8008148:	2b00      	cmp	r3, #0
 800814a:	d05c      	beq.n	8008206 <HAL_TIM_ConfigClockSource+0x15a>
 800814c:	2b10      	cmp	r3, #16
 800814e:	d05a      	beq.n	8008206 <HAL_TIM_ConfigClockSource+0x15a>
 8008150:	e062      	b.n	8008218 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008162:	f000 fbf1 	bl	8008948 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008174:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	609a      	str	r2, [r3, #8]
      break;
 800817e:	e04f      	b.n	8008220 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008190:	f000 fbda 	bl	8008948 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	689a      	ldr	r2, [r3, #8]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80081a2:	609a      	str	r2, [r3, #8]
      break;
 80081a4:	e03c      	b.n	8008220 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081b2:	461a      	mov	r2, r3
 80081b4:	f000 fb4e 	bl	8008854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2150      	movs	r1, #80	@ 0x50
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 fba7 	bl	8008912 <TIM_ITRx_SetConfig>
      break;
 80081c4:	e02c      	b.n	8008220 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80081d2:	461a      	mov	r2, r3
 80081d4:	f000 fb6d 	bl	80088b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2160      	movs	r1, #96	@ 0x60
 80081de:	4618      	mov	r0, r3
 80081e0:	f000 fb97 	bl	8008912 <TIM_ITRx_SetConfig>
      break;
 80081e4:	e01c      	b.n	8008220 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081f2:	461a      	mov	r2, r3
 80081f4:	f000 fb2e 	bl	8008854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2140      	movs	r1, #64	@ 0x40
 80081fe:	4618      	mov	r0, r3
 8008200:	f000 fb87 	bl	8008912 <TIM_ITRx_SetConfig>
      break;
 8008204:	e00c      	b.n	8008220 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4619      	mov	r1, r3
 8008210:	4610      	mov	r0, r2
 8008212:	f000 fb7e 	bl	8008912 <TIM_ITRx_SetConfig>
      break;
 8008216:	e003      	b.n	8008220 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	73fb      	strb	r3, [r7, #15]
      break;
 800821c:	e000      	b.n	8008220 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800821e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008230:	7bfb      	ldrb	r3, [r7, #15]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	fffeff88 	.word	0xfffeff88

08008240 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a46      	ldr	r2, [pc, #280]	@ (800836c <TIM_Base_SetConfig+0x12c>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d013      	beq.n	8008280 <TIM_Base_SetConfig+0x40>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800825e:	d00f      	beq.n	8008280 <TIM_Base_SetConfig+0x40>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a43      	ldr	r2, [pc, #268]	@ (8008370 <TIM_Base_SetConfig+0x130>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d00b      	beq.n	8008280 <TIM_Base_SetConfig+0x40>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4a42      	ldr	r2, [pc, #264]	@ (8008374 <TIM_Base_SetConfig+0x134>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d007      	beq.n	8008280 <TIM_Base_SetConfig+0x40>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a41      	ldr	r2, [pc, #260]	@ (8008378 <TIM_Base_SetConfig+0x138>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d003      	beq.n	8008280 <TIM_Base_SetConfig+0x40>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a40      	ldr	r2, [pc, #256]	@ (800837c <TIM_Base_SetConfig+0x13c>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d108      	bne.n	8008292 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	4313      	orrs	r3, r2
 8008290:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a35      	ldr	r2, [pc, #212]	@ (800836c <TIM_Base_SetConfig+0x12c>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d02b      	beq.n	80082f2 <TIM_Base_SetConfig+0xb2>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082a0:	d027      	beq.n	80082f2 <TIM_Base_SetConfig+0xb2>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a32      	ldr	r2, [pc, #200]	@ (8008370 <TIM_Base_SetConfig+0x130>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d023      	beq.n	80082f2 <TIM_Base_SetConfig+0xb2>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a31      	ldr	r2, [pc, #196]	@ (8008374 <TIM_Base_SetConfig+0x134>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d01f      	beq.n	80082f2 <TIM_Base_SetConfig+0xb2>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a30      	ldr	r2, [pc, #192]	@ (8008378 <TIM_Base_SetConfig+0x138>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d01b      	beq.n	80082f2 <TIM_Base_SetConfig+0xb2>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a2f      	ldr	r2, [pc, #188]	@ (800837c <TIM_Base_SetConfig+0x13c>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d017      	beq.n	80082f2 <TIM_Base_SetConfig+0xb2>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a2e      	ldr	r2, [pc, #184]	@ (8008380 <TIM_Base_SetConfig+0x140>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d013      	beq.n	80082f2 <TIM_Base_SetConfig+0xb2>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4a2d      	ldr	r2, [pc, #180]	@ (8008384 <TIM_Base_SetConfig+0x144>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d00f      	beq.n	80082f2 <TIM_Base_SetConfig+0xb2>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a2c      	ldr	r2, [pc, #176]	@ (8008388 <TIM_Base_SetConfig+0x148>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d00b      	beq.n	80082f2 <TIM_Base_SetConfig+0xb2>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a2b      	ldr	r2, [pc, #172]	@ (800838c <TIM_Base_SetConfig+0x14c>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d007      	beq.n	80082f2 <TIM_Base_SetConfig+0xb2>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4a2a      	ldr	r2, [pc, #168]	@ (8008390 <TIM_Base_SetConfig+0x150>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d003      	beq.n	80082f2 <TIM_Base_SetConfig+0xb2>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4a29      	ldr	r2, [pc, #164]	@ (8008394 <TIM_Base_SetConfig+0x154>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d108      	bne.n	8008304 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	4313      	orrs	r3, r2
 8008302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	695b      	ldr	r3, [r3, #20]
 800830e:	4313      	orrs	r3, r2
 8008310:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	689a      	ldr	r2, [r3, #8]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4a10      	ldr	r2, [pc, #64]	@ (800836c <TIM_Base_SetConfig+0x12c>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d003      	beq.n	8008338 <TIM_Base_SetConfig+0xf8>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4a12      	ldr	r2, [pc, #72]	@ (800837c <TIM_Base_SetConfig+0x13c>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d103      	bne.n	8008340 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	691a      	ldr	r2, [r3, #16]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	f003 0301 	and.w	r3, r3, #1
 800834e:	2b01      	cmp	r3, #1
 8008350:	d105      	bne.n	800835e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	f023 0201 	bic.w	r2, r3, #1
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	611a      	str	r2, [r3, #16]
  }
}
 800835e:	bf00      	nop
 8008360:	3714      	adds	r7, #20
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop
 800836c:	40010000 	.word	0x40010000
 8008370:	40000400 	.word	0x40000400
 8008374:	40000800 	.word	0x40000800
 8008378:	40000c00 	.word	0x40000c00
 800837c:	40010400 	.word	0x40010400
 8008380:	40014000 	.word	0x40014000
 8008384:	40014400 	.word	0x40014400
 8008388:	40014800 	.word	0x40014800
 800838c:	40001800 	.word	0x40001800
 8008390:	40001c00 	.word	0x40001c00
 8008394:	40002000 	.word	0x40002000

08008398 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008398:	b480      	push	{r7}
 800839a:	b087      	sub	sp, #28
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a1b      	ldr	r3, [r3, #32]
 80083ac:	f023 0201 	bic.w	r2, r3, #1
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	699b      	ldr	r3, [r3, #24]
 80083be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	4b2b      	ldr	r3, [pc, #172]	@ (8008470 <TIM_OC1_SetConfig+0xd8>)
 80083c4:	4013      	ands	r3, r2
 80083c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f023 0303 	bic.w	r3, r3, #3
 80083ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	f023 0302 	bic.w	r3, r3, #2
 80083e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	697a      	ldr	r2, [r7, #20]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a21      	ldr	r2, [pc, #132]	@ (8008474 <TIM_OC1_SetConfig+0xdc>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d003      	beq.n	80083fc <TIM_OC1_SetConfig+0x64>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a20      	ldr	r2, [pc, #128]	@ (8008478 <TIM_OC1_SetConfig+0xe0>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d10c      	bne.n	8008416 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	f023 0308 	bic.w	r3, r3, #8
 8008402:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	697a      	ldr	r2, [r7, #20]
 800840a:	4313      	orrs	r3, r2
 800840c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	f023 0304 	bic.w	r3, r3, #4
 8008414:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a16      	ldr	r2, [pc, #88]	@ (8008474 <TIM_OC1_SetConfig+0xdc>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d003      	beq.n	8008426 <TIM_OC1_SetConfig+0x8e>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a15      	ldr	r2, [pc, #84]	@ (8008478 <TIM_OC1_SetConfig+0xe0>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d111      	bne.n	800844a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800842c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008434:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	695b      	ldr	r3, [r3, #20]
 800843a:	693a      	ldr	r2, [r7, #16]
 800843c:	4313      	orrs	r3, r2
 800843e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	699b      	ldr	r3, [r3, #24]
 8008444:	693a      	ldr	r2, [r7, #16]
 8008446:	4313      	orrs	r3, r2
 8008448:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	685a      	ldr	r2, [r3, #4]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	697a      	ldr	r2, [r7, #20]
 8008462:	621a      	str	r2, [r3, #32]
}
 8008464:	bf00      	nop
 8008466:	371c      	adds	r7, #28
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr
 8008470:	fffeff8f 	.word	0xfffeff8f
 8008474:	40010000 	.word	0x40010000
 8008478:	40010400 	.word	0x40010400

0800847c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800847c:	b480      	push	{r7}
 800847e:	b087      	sub	sp, #28
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a1b      	ldr	r3, [r3, #32]
 800848a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a1b      	ldr	r3, [r3, #32]
 8008490:	f023 0210 	bic.w	r2, r3, #16
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	4b2e      	ldr	r3, [pc, #184]	@ (8008560 <TIM_OC2_SetConfig+0xe4>)
 80084a8:	4013      	ands	r3, r2
 80084aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	021b      	lsls	r3, r3, #8
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	4313      	orrs	r3, r2
 80084be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	f023 0320 	bic.w	r3, r3, #32
 80084c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	011b      	lsls	r3, r3, #4
 80084ce:	697a      	ldr	r2, [r7, #20]
 80084d0:	4313      	orrs	r3, r2
 80084d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a23      	ldr	r2, [pc, #140]	@ (8008564 <TIM_OC2_SetConfig+0xe8>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d003      	beq.n	80084e4 <TIM_OC2_SetConfig+0x68>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4a22      	ldr	r2, [pc, #136]	@ (8008568 <TIM_OC2_SetConfig+0xec>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d10d      	bne.n	8008500 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	011b      	lsls	r3, r3, #4
 80084f2:	697a      	ldr	r2, [r7, #20]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a18      	ldr	r2, [pc, #96]	@ (8008564 <TIM_OC2_SetConfig+0xe8>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d003      	beq.n	8008510 <TIM_OC2_SetConfig+0x94>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a17      	ldr	r2, [pc, #92]	@ (8008568 <TIM_OC2_SetConfig+0xec>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d113      	bne.n	8008538 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008516:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800851e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	695b      	ldr	r3, [r3, #20]
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	693a      	ldr	r2, [r7, #16]
 8008528:	4313      	orrs	r3, r2
 800852a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	699b      	ldr	r3, [r3, #24]
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	693a      	ldr	r2, [r7, #16]
 8008534:	4313      	orrs	r3, r2
 8008536:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	693a      	ldr	r2, [r7, #16]
 800853c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	685a      	ldr	r2, [r3, #4]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	697a      	ldr	r2, [r7, #20]
 8008550:	621a      	str	r2, [r3, #32]
}
 8008552:	bf00      	nop
 8008554:	371c      	adds	r7, #28
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	feff8fff 	.word	0xfeff8fff
 8008564:	40010000 	.word	0x40010000
 8008568:	40010400 	.word	0x40010400

0800856c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800856c:	b480      	push	{r7}
 800856e:	b087      	sub	sp, #28
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a1b      	ldr	r3, [r3, #32]
 8008580:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	69db      	ldr	r3, [r3, #28]
 8008592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	4b2d      	ldr	r3, [pc, #180]	@ (800864c <TIM_OC3_SetConfig+0xe0>)
 8008598:	4013      	ands	r3, r2
 800859a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f023 0303 	bic.w	r3, r3, #3
 80085a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80085b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	021b      	lsls	r3, r3, #8
 80085bc:	697a      	ldr	r2, [r7, #20]
 80085be:	4313      	orrs	r3, r2
 80085c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a22      	ldr	r2, [pc, #136]	@ (8008650 <TIM_OC3_SetConfig+0xe4>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d003      	beq.n	80085d2 <TIM_OC3_SetConfig+0x66>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a21      	ldr	r2, [pc, #132]	@ (8008654 <TIM_OC3_SetConfig+0xe8>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d10d      	bne.n	80085ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80085d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	021b      	lsls	r3, r3, #8
 80085e0:	697a      	ldr	r2, [r7, #20]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80085ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4a17      	ldr	r2, [pc, #92]	@ (8008650 <TIM_OC3_SetConfig+0xe4>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d003      	beq.n	80085fe <TIM_OC3_SetConfig+0x92>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a16      	ldr	r2, [pc, #88]	@ (8008654 <TIM_OC3_SetConfig+0xe8>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d113      	bne.n	8008626 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008604:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800860c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	695b      	ldr	r3, [r3, #20]
 8008612:	011b      	lsls	r3, r3, #4
 8008614:	693a      	ldr	r2, [r7, #16]
 8008616:	4313      	orrs	r3, r2
 8008618:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	011b      	lsls	r3, r3, #4
 8008620:	693a      	ldr	r2, [r7, #16]
 8008622:	4313      	orrs	r3, r2
 8008624:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	693a      	ldr	r2, [r7, #16]
 800862a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	685a      	ldr	r2, [r3, #4]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	697a      	ldr	r2, [r7, #20]
 800863e:	621a      	str	r2, [r3, #32]
}
 8008640:	bf00      	nop
 8008642:	371c      	adds	r7, #28
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr
 800864c:	fffeff8f 	.word	0xfffeff8f
 8008650:	40010000 	.word	0x40010000
 8008654:	40010400 	.word	0x40010400

08008658 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008658:	b480      	push	{r7}
 800865a:	b087      	sub	sp, #28
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a1b      	ldr	r3, [r3, #32]
 8008666:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6a1b      	ldr	r3, [r3, #32]
 800866c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	69db      	ldr	r3, [r3, #28]
 800867e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	4b1e      	ldr	r3, [pc, #120]	@ (80086fc <TIM_OC4_SetConfig+0xa4>)
 8008684:	4013      	ands	r3, r2
 8008686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800868e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	021b      	lsls	r3, r3, #8
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	4313      	orrs	r3, r2
 800869a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80086a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	031b      	lsls	r3, r3, #12
 80086aa:	693a      	ldr	r2, [r7, #16]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a13      	ldr	r2, [pc, #76]	@ (8008700 <TIM_OC4_SetConfig+0xa8>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d003      	beq.n	80086c0 <TIM_OC4_SetConfig+0x68>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4a12      	ldr	r2, [pc, #72]	@ (8008704 <TIM_OC4_SetConfig+0xac>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d109      	bne.n	80086d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80086c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	019b      	lsls	r3, r3, #6
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	697a      	ldr	r2, [r7, #20]
 80086d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	685a      	ldr	r2, [r3, #4]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	693a      	ldr	r2, [r7, #16]
 80086ec:	621a      	str	r2, [r3, #32]
}
 80086ee:	bf00      	nop
 80086f0:	371c      	adds	r7, #28
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop
 80086fc:	feff8fff 	.word	0xfeff8fff
 8008700:	40010000 	.word	0x40010000
 8008704:	40010400 	.word	0x40010400

08008708 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008708:	b480      	push	{r7}
 800870a:	b087      	sub	sp, #28
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a1b      	ldr	r3, [r3, #32]
 8008716:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6a1b      	ldr	r3, [r3, #32]
 800871c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800872e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	4b1b      	ldr	r3, [pc, #108]	@ (80087a0 <TIM_OC5_SetConfig+0x98>)
 8008734:	4013      	ands	r3, r2
 8008736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	4313      	orrs	r3, r2
 8008740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008748:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	041b      	lsls	r3, r3, #16
 8008750:	693a      	ldr	r2, [r7, #16]
 8008752:	4313      	orrs	r3, r2
 8008754:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a12      	ldr	r2, [pc, #72]	@ (80087a4 <TIM_OC5_SetConfig+0x9c>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d003      	beq.n	8008766 <TIM_OC5_SetConfig+0x5e>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a11      	ldr	r2, [pc, #68]	@ (80087a8 <TIM_OC5_SetConfig+0xa0>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d109      	bne.n	800877a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800876c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	695b      	ldr	r3, [r3, #20]
 8008772:	021b      	lsls	r3, r3, #8
 8008774:	697a      	ldr	r2, [r7, #20]
 8008776:	4313      	orrs	r3, r2
 8008778:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	697a      	ldr	r2, [r7, #20]
 800877e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	68fa      	ldr	r2, [r7, #12]
 8008784:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	685a      	ldr	r2, [r3, #4]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	693a      	ldr	r2, [r7, #16]
 8008792:	621a      	str	r2, [r3, #32]
}
 8008794:	bf00      	nop
 8008796:	371c      	adds	r7, #28
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr
 80087a0:	fffeff8f 	.word	0xfffeff8f
 80087a4:	40010000 	.word	0x40010000
 80087a8:	40010400 	.word	0x40010400

080087ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b087      	sub	sp, #28
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a1b      	ldr	r3, [r3, #32]
 80087ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6a1b      	ldr	r3, [r3, #32]
 80087c0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	4b1c      	ldr	r3, [pc, #112]	@ (8008848 <TIM_OC6_SetConfig+0x9c>)
 80087d8:	4013      	ands	r3, r2
 80087da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	021b      	lsls	r3, r3, #8
 80087e2:	68fa      	ldr	r2, [r7, #12]
 80087e4:	4313      	orrs	r3, r2
 80087e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80087ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	051b      	lsls	r3, r3, #20
 80087f6:	693a      	ldr	r2, [r7, #16]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4a13      	ldr	r2, [pc, #76]	@ (800884c <TIM_OC6_SetConfig+0xa0>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d003      	beq.n	800880c <TIM_OC6_SetConfig+0x60>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4a12      	ldr	r2, [pc, #72]	@ (8008850 <TIM_OC6_SetConfig+0xa4>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d109      	bne.n	8008820 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008812:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	695b      	ldr	r3, [r3, #20]
 8008818:	029b      	lsls	r3, r3, #10
 800881a:	697a      	ldr	r2, [r7, #20]
 800881c:	4313      	orrs	r3, r2
 800881e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	697a      	ldr	r2, [r7, #20]
 8008824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	685a      	ldr	r2, [r3, #4]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	693a      	ldr	r2, [r7, #16]
 8008838:	621a      	str	r2, [r3, #32]
}
 800883a:	bf00      	nop
 800883c:	371c      	adds	r7, #28
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr
 8008846:	bf00      	nop
 8008848:	feff8fff 	.word	0xfeff8fff
 800884c:	40010000 	.word	0x40010000
 8008850:	40010400 	.word	0x40010400

08008854 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008854:	b480      	push	{r7}
 8008856:	b087      	sub	sp, #28
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6a1b      	ldr	r3, [r3, #32]
 8008864:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6a1b      	ldr	r3, [r3, #32]
 800886a:	f023 0201 	bic.w	r2, r3, #1
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	699b      	ldr	r3, [r3, #24]
 8008876:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800887e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	011b      	lsls	r3, r3, #4
 8008884:	693a      	ldr	r2, [r7, #16]
 8008886:	4313      	orrs	r3, r2
 8008888:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	f023 030a 	bic.w	r3, r3, #10
 8008890:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	4313      	orrs	r3, r2
 8008898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	693a      	ldr	r2, [r7, #16]
 800889e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	621a      	str	r2, [r3, #32]
}
 80088a6:	bf00      	nop
 80088a8:	371c      	adds	r7, #28
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr

080088b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088b2:	b480      	push	{r7}
 80088b4:	b087      	sub	sp, #28
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	60f8      	str	r0, [r7, #12]
 80088ba:	60b9      	str	r1, [r7, #8]
 80088bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6a1b      	ldr	r3, [r3, #32]
 80088c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6a1b      	ldr	r3, [r3, #32]
 80088c8:	f023 0210 	bic.w	r2, r3, #16
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	699b      	ldr	r3, [r3, #24]
 80088d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80088dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	031b      	lsls	r3, r3, #12
 80088e2:	693a      	ldr	r2, [r7, #16]
 80088e4:	4313      	orrs	r3, r2
 80088e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80088ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	011b      	lsls	r3, r3, #4
 80088f4:	697a      	ldr	r2, [r7, #20]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	693a      	ldr	r2, [r7, #16]
 80088fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	697a      	ldr	r2, [r7, #20]
 8008904:	621a      	str	r2, [r3, #32]
}
 8008906:	bf00      	nop
 8008908:	371c      	adds	r7, #28
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr

08008912 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008912:	b480      	push	{r7}
 8008914:	b085      	sub	sp, #20
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
 800891a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008928:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800892a:	683a      	ldr	r2, [r7, #0]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	4313      	orrs	r3, r2
 8008930:	f043 0307 	orr.w	r3, r3, #7
 8008934:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	609a      	str	r2, [r3, #8]
}
 800893c:	bf00      	nop
 800893e:	3714      	adds	r7, #20
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008948:	b480      	push	{r7}
 800894a:	b087      	sub	sp, #28
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	607a      	str	r2, [r7, #4]
 8008954:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008962:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	021a      	lsls	r2, r3, #8
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	431a      	orrs	r2, r3
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	4313      	orrs	r3, r2
 8008970:	697a      	ldr	r2, [r7, #20]
 8008972:	4313      	orrs	r3, r2
 8008974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	697a      	ldr	r2, [r7, #20]
 800897a:	609a      	str	r2, [r3, #8]
}
 800897c:	bf00      	nop
 800897e:	371c      	adds	r7, #28
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008998:	2b01      	cmp	r3, #1
 800899a:	d101      	bne.n	80089a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800899c:	2302      	movs	r3, #2
 800899e:	e06d      	b.n	8008a7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2201      	movs	r2, #1
 80089a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2202      	movs	r2, #2
 80089ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a30      	ldr	r2, [pc, #192]	@ (8008a88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d004      	beq.n	80089d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a2f      	ldr	r2, [pc, #188]	@ (8008a8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d108      	bne.n	80089e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80089da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	4313      	orrs	r3, r2
 80089f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a20      	ldr	r2, [pc, #128]	@ (8008a88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d022      	beq.n	8008a50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a12:	d01d      	beq.n	8008a50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a1d      	ldr	r2, [pc, #116]	@ (8008a90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d018      	beq.n	8008a50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a1c      	ldr	r2, [pc, #112]	@ (8008a94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d013      	beq.n	8008a50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a1a      	ldr	r2, [pc, #104]	@ (8008a98 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d00e      	beq.n	8008a50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a15      	ldr	r2, [pc, #84]	@ (8008a8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d009      	beq.n	8008a50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a16      	ldr	r2, [pc, #88]	@ (8008a9c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d004      	beq.n	8008a50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a15      	ldr	r2, [pc, #84]	@ (8008aa0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d10c      	bne.n	8008a6a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	68ba      	ldr	r2, [r7, #8]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	68ba      	ldr	r2, [r7, #8]
 8008a68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3714      	adds	r7, #20
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr
 8008a88:	40010000 	.word	0x40010000
 8008a8c:	40010400 	.word	0x40010400
 8008a90:	40000400 	.word	0x40000400
 8008a94:	40000800 	.word	0x40000800
 8008a98:	40000c00 	.word	0x40000c00
 8008a9c:	40014000 	.word	0x40014000
 8008aa0:	40001800 	.word	0x40001800

08008aa4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d101      	bne.n	8008ac0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008abc:	2302      	movs	r3, #2
 8008abe:	e065      	b.n	8008b8c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	695b      	ldr	r3, [r3, #20]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b26:	4313      	orrs	r3, r2
 8008b28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	699b      	ldr	r3, [r3, #24]
 8008b34:	041b      	lsls	r3, r3, #16
 8008b36:	4313      	orrs	r3, r2
 8008b38:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a16      	ldr	r2, [pc, #88]	@ (8008b98 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d004      	beq.n	8008b4e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a14      	ldr	r2, [pc, #80]	@ (8008b9c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d115      	bne.n	8008b7a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b58:	051b      	lsls	r3, r3, #20
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	69db      	ldr	r3, [r3, #28]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3714      	adds	r7, #20
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr
 8008b98:	40010000 	.word	0x40010000
 8008b9c:	40010400 	.word	0x40010400

08008ba0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b082      	sub	sp, #8
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d101      	bne.n	8008bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e040      	b.n	8008c34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d106      	bne.n	8008bc8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f7f9 fb9e 	bl	8002304 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2224      	movs	r2, #36	@ 0x24
 8008bcc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	681a      	ldr	r2, [r3, #0]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f022 0201 	bic.w	r2, r2, #1
 8008bdc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d002      	beq.n	8008bec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 fb7a 	bl	80092e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 f913 	bl	8008e18 <UART_SetConfig>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d101      	bne.n	8008bfc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e01b      	b.n	8008c34 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	685a      	ldr	r2, [r3, #4]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008c0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	689a      	ldr	r2, [r3, #8]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008c1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f042 0201 	orr.w	r2, r2, #1
 8008c2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 fbf9 	bl	8009424 <UART_CheckIdleState>
 8008c32:	4603      	mov	r3, r0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3708      	adds	r7, #8
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b08a      	sub	sp, #40	@ 0x28
 8008c40:	af02      	add	r7, sp, #8
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	603b      	str	r3, [r7, #0]
 8008c48:	4613      	mov	r3, r2
 8008c4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c50:	2b20      	cmp	r3, #32
 8008c52:	d177      	bne.n	8008d44 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d002      	beq.n	8008c60 <HAL_UART_Transmit+0x24>
 8008c5a:	88fb      	ldrh	r3, [r7, #6]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d101      	bne.n	8008c64 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	e070      	b.n	8008d46 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2221      	movs	r2, #33	@ 0x21
 8008c70:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c72:	f7f9 ffc9 	bl	8002c08 <HAL_GetTick>
 8008c76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	88fa      	ldrh	r2, [r7, #6]
 8008c7c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	88fa      	ldrh	r2, [r7, #6]
 8008c84:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c90:	d108      	bne.n	8008ca4 <HAL_UART_Transmit+0x68>
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d104      	bne.n	8008ca4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	61bb      	str	r3, [r7, #24]
 8008ca2:	e003      	b.n	8008cac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008cac:	e02f      	b.n	8008d0e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	9300      	str	r3, [sp, #0]
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	2180      	movs	r1, #128	@ 0x80
 8008cb8:	68f8      	ldr	r0, [r7, #12]
 8008cba:	f000 fc0a 	bl	80094d2 <UART_WaitOnFlagUntilTimeout>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d004      	beq.n	8008cce <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2220      	movs	r2, #32
 8008cc8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	e03b      	b.n	8008d46 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d10b      	bne.n	8008cec <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	881b      	ldrh	r3, [r3, #0]
 8008cd8:	461a      	mov	r2, r3
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ce2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	3302      	adds	r3, #2
 8008ce8:	61bb      	str	r3, [r7, #24]
 8008cea:	e007      	b.n	8008cfc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	781a      	ldrb	r2, [r3, #0]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	3b01      	subs	r3, #1
 8008d06:	b29a      	uxth	r2, r3
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1c9      	bne.n	8008cae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	2200      	movs	r2, #0
 8008d22:	2140      	movs	r1, #64	@ 0x40
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f000 fbd4 	bl	80094d2 <UART_WaitOnFlagUntilTimeout>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d004      	beq.n	8008d3a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2220      	movs	r2, #32
 8008d34:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008d36:	2303      	movs	r3, #3
 8008d38:	e005      	b.n	8008d46 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2220      	movs	r2, #32
 8008d3e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	e000      	b.n	8008d46 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008d44:	2302      	movs	r3, #2
  }
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3720      	adds	r7, #32
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b08a      	sub	sp, #40	@ 0x28
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	60f8      	str	r0, [r7, #12]
 8008d56:	60b9      	str	r1, [r7, #8]
 8008d58:	4613      	mov	r3, r2
 8008d5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d62:	2b20      	cmp	r3, #32
 8008d64:	d132      	bne.n	8008dcc <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d002      	beq.n	8008d72 <HAL_UART_Receive_DMA+0x24>
 8008d6c:	88fb      	ldrh	r3, [r7, #6]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d101      	bne.n	8008d76 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e02b      	b.n	8008dce <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d018      	beq.n	8008dbc <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	e853 3f00 	ldrex	r3, [r3]
 8008d96:	613b      	str	r3, [r7, #16]
   return(result);
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	461a      	mov	r2, r3
 8008da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da8:	623b      	str	r3, [r7, #32]
 8008daa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dac:	69f9      	ldr	r1, [r7, #28]
 8008dae:	6a3a      	ldr	r2, [r7, #32]
 8008db0:	e841 2300 	strex	r3, r2, [r1]
 8008db4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d1e6      	bne.n	8008d8a <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008dbc:	88fb      	ldrh	r3, [r7, #6]
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	68b9      	ldr	r1, [r7, #8]
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	f000 fbf2 	bl	80095ac <UART_Start_Receive_DMA>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	e000      	b.n	8008dce <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8008dcc:	2302      	movs	r3, #2
  }
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3728      	adds	r7, #40	@ 0x28
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008dd6:	b480      	push	{r7}
 8008dd8:	b083      	sub	sp, #12
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008dde:	bf00      	nop
 8008de0:	370c      	adds	r7, #12
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr

08008dea <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008dea:	b480      	push	{r7}
 8008dec:	b083      	sub	sp, #12
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008df2:	bf00      	nop
 8008df4:	370c      	adds	r7, #12
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr

08008dfe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008dfe:	b480      	push	{r7}
 8008e00:	b083      	sub	sp, #12
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
 8008e06:	460b      	mov	r3, r1
 8008e08:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e0a:	bf00      	nop
 8008e0c:	370c      	adds	r7, #12
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr
	...

08008e18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b088      	sub	sp, #32
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e20:	2300      	movs	r3, #0
 8008e22:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	689a      	ldr	r2, [r3, #8]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	431a      	orrs	r2, r3
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	695b      	ldr	r3, [r3, #20]
 8008e32:	431a      	orrs	r2, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	69db      	ldr	r3, [r3, #28]
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	4ba6      	ldr	r3, [pc, #664]	@ (80090dc <UART_SetConfig+0x2c4>)
 8008e44:	4013      	ands	r3, r2
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	6812      	ldr	r2, [r2, #0]
 8008e4a:	6979      	ldr	r1, [r7, #20]
 8008e4c:	430b      	orrs	r3, r1
 8008e4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	68da      	ldr	r2, [r3, #12]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	430a      	orrs	r2, r1
 8008e64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	699b      	ldr	r3, [r3, #24]
 8008e6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6a1b      	ldr	r3, [r3, #32]
 8008e70:	697a      	ldr	r2, [r7, #20]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	697a      	ldr	r2, [r7, #20]
 8008e86:	430a      	orrs	r2, r1
 8008e88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a94      	ldr	r2, [pc, #592]	@ (80090e0 <UART_SetConfig+0x2c8>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d120      	bne.n	8008ed6 <UART_SetConfig+0xbe>
 8008e94:	4b93      	ldr	r3, [pc, #588]	@ (80090e4 <UART_SetConfig+0x2cc>)
 8008e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e9a:	f003 0303 	and.w	r3, r3, #3
 8008e9e:	2b03      	cmp	r3, #3
 8008ea0:	d816      	bhi.n	8008ed0 <UART_SetConfig+0xb8>
 8008ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ea8 <UART_SetConfig+0x90>)
 8008ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea8:	08008eb9 	.word	0x08008eb9
 8008eac:	08008ec5 	.word	0x08008ec5
 8008eb0:	08008ebf 	.word	0x08008ebf
 8008eb4:	08008ecb 	.word	0x08008ecb
 8008eb8:	2301      	movs	r3, #1
 8008eba:	77fb      	strb	r3, [r7, #31]
 8008ebc:	e150      	b.n	8009160 <UART_SetConfig+0x348>
 8008ebe:	2302      	movs	r3, #2
 8008ec0:	77fb      	strb	r3, [r7, #31]
 8008ec2:	e14d      	b.n	8009160 <UART_SetConfig+0x348>
 8008ec4:	2304      	movs	r3, #4
 8008ec6:	77fb      	strb	r3, [r7, #31]
 8008ec8:	e14a      	b.n	8009160 <UART_SetConfig+0x348>
 8008eca:	2308      	movs	r3, #8
 8008ecc:	77fb      	strb	r3, [r7, #31]
 8008ece:	e147      	b.n	8009160 <UART_SetConfig+0x348>
 8008ed0:	2310      	movs	r3, #16
 8008ed2:	77fb      	strb	r3, [r7, #31]
 8008ed4:	e144      	b.n	8009160 <UART_SetConfig+0x348>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a83      	ldr	r2, [pc, #524]	@ (80090e8 <UART_SetConfig+0x2d0>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d132      	bne.n	8008f46 <UART_SetConfig+0x12e>
 8008ee0:	4b80      	ldr	r3, [pc, #512]	@ (80090e4 <UART_SetConfig+0x2cc>)
 8008ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ee6:	f003 030c 	and.w	r3, r3, #12
 8008eea:	2b0c      	cmp	r3, #12
 8008eec:	d828      	bhi.n	8008f40 <UART_SetConfig+0x128>
 8008eee:	a201      	add	r2, pc, #4	@ (adr r2, 8008ef4 <UART_SetConfig+0xdc>)
 8008ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef4:	08008f29 	.word	0x08008f29
 8008ef8:	08008f41 	.word	0x08008f41
 8008efc:	08008f41 	.word	0x08008f41
 8008f00:	08008f41 	.word	0x08008f41
 8008f04:	08008f35 	.word	0x08008f35
 8008f08:	08008f41 	.word	0x08008f41
 8008f0c:	08008f41 	.word	0x08008f41
 8008f10:	08008f41 	.word	0x08008f41
 8008f14:	08008f2f 	.word	0x08008f2f
 8008f18:	08008f41 	.word	0x08008f41
 8008f1c:	08008f41 	.word	0x08008f41
 8008f20:	08008f41 	.word	0x08008f41
 8008f24:	08008f3b 	.word	0x08008f3b
 8008f28:	2300      	movs	r3, #0
 8008f2a:	77fb      	strb	r3, [r7, #31]
 8008f2c:	e118      	b.n	8009160 <UART_SetConfig+0x348>
 8008f2e:	2302      	movs	r3, #2
 8008f30:	77fb      	strb	r3, [r7, #31]
 8008f32:	e115      	b.n	8009160 <UART_SetConfig+0x348>
 8008f34:	2304      	movs	r3, #4
 8008f36:	77fb      	strb	r3, [r7, #31]
 8008f38:	e112      	b.n	8009160 <UART_SetConfig+0x348>
 8008f3a:	2308      	movs	r3, #8
 8008f3c:	77fb      	strb	r3, [r7, #31]
 8008f3e:	e10f      	b.n	8009160 <UART_SetConfig+0x348>
 8008f40:	2310      	movs	r3, #16
 8008f42:	77fb      	strb	r3, [r7, #31]
 8008f44:	e10c      	b.n	8009160 <UART_SetConfig+0x348>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a68      	ldr	r2, [pc, #416]	@ (80090ec <UART_SetConfig+0x2d4>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d120      	bne.n	8008f92 <UART_SetConfig+0x17a>
 8008f50:	4b64      	ldr	r3, [pc, #400]	@ (80090e4 <UART_SetConfig+0x2cc>)
 8008f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f56:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008f5a:	2b30      	cmp	r3, #48	@ 0x30
 8008f5c:	d013      	beq.n	8008f86 <UART_SetConfig+0x16e>
 8008f5e:	2b30      	cmp	r3, #48	@ 0x30
 8008f60:	d814      	bhi.n	8008f8c <UART_SetConfig+0x174>
 8008f62:	2b20      	cmp	r3, #32
 8008f64:	d009      	beq.n	8008f7a <UART_SetConfig+0x162>
 8008f66:	2b20      	cmp	r3, #32
 8008f68:	d810      	bhi.n	8008f8c <UART_SetConfig+0x174>
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d002      	beq.n	8008f74 <UART_SetConfig+0x15c>
 8008f6e:	2b10      	cmp	r3, #16
 8008f70:	d006      	beq.n	8008f80 <UART_SetConfig+0x168>
 8008f72:	e00b      	b.n	8008f8c <UART_SetConfig+0x174>
 8008f74:	2300      	movs	r3, #0
 8008f76:	77fb      	strb	r3, [r7, #31]
 8008f78:	e0f2      	b.n	8009160 <UART_SetConfig+0x348>
 8008f7a:	2302      	movs	r3, #2
 8008f7c:	77fb      	strb	r3, [r7, #31]
 8008f7e:	e0ef      	b.n	8009160 <UART_SetConfig+0x348>
 8008f80:	2304      	movs	r3, #4
 8008f82:	77fb      	strb	r3, [r7, #31]
 8008f84:	e0ec      	b.n	8009160 <UART_SetConfig+0x348>
 8008f86:	2308      	movs	r3, #8
 8008f88:	77fb      	strb	r3, [r7, #31]
 8008f8a:	e0e9      	b.n	8009160 <UART_SetConfig+0x348>
 8008f8c:	2310      	movs	r3, #16
 8008f8e:	77fb      	strb	r3, [r7, #31]
 8008f90:	e0e6      	b.n	8009160 <UART_SetConfig+0x348>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a56      	ldr	r2, [pc, #344]	@ (80090f0 <UART_SetConfig+0x2d8>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d120      	bne.n	8008fde <UART_SetConfig+0x1c6>
 8008f9c:	4b51      	ldr	r3, [pc, #324]	@ (80090e4 <UART_SetConfig+0x2cc>)
 8008f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fa2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008fa6:	2bc0      	cmp	r3, #192	@ 0xc0
 8008fa8:	d013      	beq.n	8008fd2 <UART_SetConfig+0x1ba>
 8008faa:	2bc0      	cmp	r3, #192	@ 0xc0
 8008fac:	d814      	bhi.n	8008fd8 <UART_SetConfig+0x1c0>
 8008fae:	2b80      	cmp	r3, #128	@ 0x80
 8008fb0:	d009      	beq.n	8008fc6 <UART_SetConfig+0x1ae>
 8008fb2:	2b80      	cmp	r3, #128	@ 0x80
 8008fb4:	d810      	bhi.n	8008fd8 <UART_SetConfig+0x1c0>
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d002      	beq.n	8008fc0 <UART_SetConfig+0x1a8>
 8008fba:	2b40      	cmp	r3, #64	@ 0x40
 8008fbc:	d006      	beq.n	8008fcc <UART_SetConfig+0x1b4>
 8008fbe:	e00b      	b.n	8008fd8 <UART_SetConfig+0x1c0>
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	77fb      	strb	r3, [r7, #31]
 8008fc4:	e0cc      	b.n	8009160 <UART_SetConfig+0x348>
 8008fc6:	2302      	movs	r3, #2
 8008fc8:	77fb      	strb	r3, [r7, #31]
 8008fca:	e0c9      	b.n	8009160 <UART_SetConfig+0x348>
 8008fcc:	2304      	movs	r3, #4
 8008fce:	77fb      	strb	r3, [r7, #31]
 8008fd0:	e0c6      	b.n	8009160 <UART_SetConfig+0x348>
 8008fd2:	2308      	movs	r3, #8
 8008fd4:	77fb      	strb	r3, [r7, #31]
 8008fd6:	e0c3      	b.n	8009160 <UART_SetConfig+0x348>
 8008fd8:	2310      	movs	r3, #16
 8008fda:	77fb      	strb	r3, [r7, #31]
 8008fdc:	e0c0      	b.n	8009160 <UART_SetConfig+0x348>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a44      	ldr	r2, [pc, #272]	@ (80090f4 <UART_SetConfig+0x2dc>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d125      	bne.n	8009034 <UART_SetConfig+0x21c>
 8008fe8:	4b3e      	ldr	r3, [pc, #248]	@ (80090e4 <UART_SetConfig+0x2cc>)
 8008fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ff2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ff6:	d017      	beq.n	8009028 <UART_SetConfig+0x210>
 8008ff8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ffc:	d817      	bhi.n	800902e <UART_SetConfig+0x216>
 8008ffe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009002:	d00b      	beq.n	800901c <UART_SetConfig+0x204>
 8009004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009008:	d811      	bhi.n	800902e <UART_SetConfig+0x216>
 800900a:	2b00      	cmp	r3, #0
 800900c:	d003      	beq.n	8009016 <UART_SetConfig+0x1fe>
 800900e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009012:	d006      	beq.n	8009022 <UART_SetConfig+0x20a>
 8009014:	e00b      	b.n	800902e <UART_SetConfig+0x216>
 8009016:	2300      	movs	r3, #0
 8009018:	77fb      	strb	r3, [r7, #31]
 800901a:	e0a1      	b.n	8009160 <UART_SetConfig+0x348>
 800901c:	2302      	movs	r3, #2
 800901e:	77fb      	strb	r3, [r7, #31]
 8009020:	e09e      	b.n	8009160 <UART_SetConfig+0x348>
 8009022:	2304      	movs	r3, #4
 8009024:	77fb      	strb	r3, [r7, #31]
 8009026:	e09b      	b.n	8009160 <UART_SetConfig+0x348>
 8009028:	2308      	movs	r3, #8
 800902a:	77fb      	strb	r3, [r7, #31]
 800902c:	e098      	b.n	8009160 <UART_SetConfig+0x348>
 800902e:	2310      	movs	r3, #16
 8009030:	77fb      	strb	r3, [r7, #31]
 8009032:	e095      	b.n	8009160 <UART_SetConfig+0x348>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a2f      	ldr	r2, [pc, #188]	@ (80090f8 <UART_SetConfig+0x2e0>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d125      	bne.n	800908a <UART_SetConfig+0x272>
 800903e:	4b29      	ldr	r3, [pc, #164]	@ (80090e4 <UART_SetConfig+0x2cc>)
 8009040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009044:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009048:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800904c:	d017      	beq.n	800907e <UART_SetConfig+0x266>
 800904e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009052:	d817      	bhi.n	8009084 <UART_SetConfig+0x26c>
 8009054:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009058:	d00b      	beq.n	8009072 <UART_SetConfig+0x25a>
 800905a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800905e:	d811      	bhi.n	8009084 <UART_SetConfig+0x26c>
 8009060:	2b00      	cmp	r3, #0
 8009062:	d003      	beq.n	800906c <UART_SetConfig+0x254>
 8009064:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009068:	d006      	beq.n	8009078 <UART_SetConfig+0x260>
 800906a:	e00b      	b.n	8009084 <UART_SetConfig+0x26c>
 800906c:	2301      	movs	r3, #1
 800906e:	77fb      	strb	r3, [r7, #31]
 8009070:	e076      	b.n	8009160 <UART_SetConfig+0x348>
 8009072:	2302      	movs	r3, #2
 8009074:	77fb      	strb	r3, [r7, #31]
 8009076:	e073      	b.n	8009160 <UART_SetConfig+0x348>
 8009078:	2304      	movs	r3, #4
 800907a:	77fb      	strb	r3, [r7, #31]
 800907c:	e070      	b.n	8009160 <UART_SetConfig+0x348>
 800907e:	2308      	movs	r3, #8
 8009080:	77fb      	strb	r3, [r7, #31]
 8009082:	e06d      	b.n	8009160 <UART_SetConfig+0x348>
 8009084:	2310      	movs	r3, #16
 8009086:	77fb      	strb	r3, [r7, #31]
 8009088:	e06a      	b.n	8009160 <UART_SetConfig+0x348>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a1b      	ldr	r2, [pc, #108]	@ (80090fc <UART_SetConfig+0x2e4>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d138      	bne.n	8009106 <UART_SetConfig+0x2ee>
 8009094:	4b13      	ldr	r3, [pc, #76]	@ (80090e4 <UART_SetConfig+0x2cc>)
 8009096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800909a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800909e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80090a2:	d017      	beq.n	80090d4 <UART_SetConfig+0x2bc>
 80090a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80090a8:	d82a      	bhi.n	8009100 <UART_SetConfig+0x2e8>
 80090aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090ae:	d00b      	beq.n	80090c8 <UART_SetConfig+0x2b0>
 80090b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090b4:	d824      	bhi.n	8009100 <UART_SetConfig+0x2e8>
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d003      	beq.n	80090c2 <UART_SetConfig+0x2aa>
 80090ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090be:	d006      	beq.n	80090ce <UART_SetConfig+0x2b6>
 80090c0:	e01e      	b.n	8009100 <UART_SetConfig+0x2e8>
 80090c2:	2300      	movs	r3, #0
 80090c4:	77fb      	strb	r3, [r7, #31]
 80090c6:	e04b      	b.n	8009160 <UART_SetConfig+0x348>
 80090c8:	2302      	movs	r3, #2
 80090ca:	77fb      	strb	r3, [r7, #31]
 80090cc:	e048      	b.n	8009160 <UART_SetConfig+0x348>
 80090ce:	2304      	movs	r3, #4
 80090d0:	77fb      	strb	r3, [r7, #31]
 80090d2:	e045      	b.n	8009160 <UART_SetConfig+0x348>
 80090d4:	2308      	movs	r3, #8
 80090d6:	77fb      	strb	r3, [r7, #31]
 80090d8:	e042      	b.n	8009160 <UART_SetConfig+0x348>
 80090da:	bf00      	nop
 80090dc:	efff69f3 	.word	0xefff69f3
 80090e0:	40011000 	.word	0x40011000
 80090e4:	40023800 	.word	0x40023800
 80090e8:	40004400 	.word	0x40004400
 80090ec:	40004800 	.word	0x40004800
 80090f0:	40004c00 	.word	0x40004c00
 80090f4:	40005000 	.word	0x40005000
 80090f8:	40011400 	.word	0x40011400
 80090fc:	40007800 	.word	0x40007800
 8009100:	2310      	movs	r3, #16
 8009102:	77fb      	strb	r3, [r7, #31]
 8009104:	e02c      	b.n	8009160 <UART_SetConfig+0x348>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a72      	ldr	r2, [pc, #456]	@ (80092d4 <UART_SetConfig+0x4bc>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d125      	bne.n	800915c <UART_SetConfig+0x344>
 8009110:	4b71      	ldr	r3, [pc, #452]	@ (80092d8 <UART_SetConfig+0x4c0>)
 8009112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009116:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800911a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800911e:	d017      	beq.n	8009150 <UART_SetConfig+0x338>
 8009120:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009124:	d817      	bhi.n	8009156 <UART_SetConfig+0x33e>
 8009126:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800912a:	d00b      	beq.n	8009144 <UART_SetConfig+0x32c>
 800912c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009130:	d811      	bhi.n	8009156 <UART_SetConfig+0x33e>
 8009132:	2b00      	cmp	r3, #0
 8009134:	d003      	beq.n	800913e <UART_SetConfig+0x326>
 8009136:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800913a:	d006      	beq.n	800914a <UART_SetConfig+0x332>
 800913c:	e00b      	b.n	8009156 <UART_SetConfig+0x33e>
 800913e:	2300      	movs	r3, #0
 8009140:	77fb      	strb	r3, [r7, #31]
 8009142:	e00d      	b.n	8009160 <UART_SetConfig+0x348>
 8009144:	2302      	movs	r3, #2
 8009146:	77fb      	strb	r3, [r7, #31]
 8009148:	e00a      	b.n	8009160 <UART_SetConfig+0x348>
 800914a:	2304      	movs	r3, #4
 800914c:	77fb      	strb	r3, [r7, #31]
 800914e:	e007      	b.n	8009160 <UART_SetConfig+0x348>
 8009150:	2308      	movs	r3, #8
 8009152:	77fb      	strb	r3, [r7, #31]
 8009154:	e004      	b.n	8009160 <UART_SetConfig+0x348>
 8009156:	2310      	movs	r3, #16
 8009158:	77fb      	strb	r3, [r7, #31]
 800915a:	e001      	b.n	8009160 <UART_SetConfig+0x348>
 800915c:	2310      	movs	r3, #16
 800915e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	69db      	ldr	r3, [r3, #28]
 8009164:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009168:	d15b      	bne.n	8009222 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800916a:	7ffb      	ldrb	r3, [r7, #31]
 800916c:	2b08      	cmp	r3, #8
 800916e:	d828      	bhi.n	80091c2 <UART_SetConfig+0x3aa>
 8009170:	a201      	add	r2, pc, #4	@ (adr r2, 8009178 <UART_SetConfig+0x360>)
 8009172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009176:	bf00      	nop
 8009178:	0800919d 	.word	0x0800919d
 800917c:	080091a5 	.word	0x080091a5
 8009180:	080091ad 	.word	0x080091ad
 8009184:	080091c3 	.word	0x080091c3
 8009188:	080091b3 	.word	0x080091b3
 800918c:	080091c3 	.word	0x080091c3
 8009190:	080091c3 	.word	0x080091c3
 8009194:	080091c3 	.word	0x080091c3
 8009198:	080091bb 	.word	0x080091bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800919c:	f7fc ff86 	bl	80060ac <HAL_RCC_GetPCLK1Freq>
 80091a0:	61b8      	str	r0, [r7, #24]
        break;
 80091a2:	e013      	b.n	80091cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091a4:	f7fc ff96 	bl	80060d4 <HAL_RCC_GetPCLK2Freq>
 80091a8:	61b8      	str	r0, [r7, #24]
        break;
 80091aa:	e00f      	b.n	80091cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091ac:	4b4b      	ldr	r3, [pc, #300]	@ (80092dc <UART_SetConfig+0x4c4>)
 80091ae:	61bb      	str	r3, [r7, #24]
        break;
 80091b0:	e00c      	b.n	80091cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091b2:	f7fc fe69 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 80091b6:	61b8      	str	r0, [r7, #24]
        break;
 80091b8:	e008      	b.n	80091cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091be:	61bb      	str	r3, [r7, #24]
        break;
 80091c0:	e004      	b.n	80091cc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80091c2:	2300      	movs	r3, #0
 80091c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	77bb      	strb	r3, [r7, #30]
        break;
 80091ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d074      	beq.n	80092bc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	005a      	lsls	r2, r3, #1
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	085b      	lsrs	r3, r3, #1
 80091dc:	441a      	add	r2, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80091e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	2b0f      	cmp	r3, #15
 80091ec:	d916      	bls.n	800921c <UART_SetConfig+0x404>
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091f4:	d212      	bcs.n	800921c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	f023 030f 	bic.w	r3, r3, #15
 80091fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	085b      	lsrs	r3, r3, #1
 8009204:	b29b      	uxth	r3, r3
 8009206:	f003 0307 	and.w	r3, r3, #7
 800920a:	b29a      	uxth	r2, r3
 800920c:	89fb      	ldrh	r3, [r7, #14]
 800920e:	4313      	orrs	r3, r2
 8009210:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	89fa      	ldrh	r2, [r7, #14]
 8009218:	60da      	str	r2, [r3, #12]
 800921a:	e04f      	b.n	80092bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	77bb      	strb	r3, [r7, #30]
 8009220:	e04c      	b.n	80092bc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009222:	7ffb      	ldrb	r3, [r7, #31]
 8009224:	2b08      	cmp	r3, #8
 8009226:	d828      	bhi.n	800927a <UART_SetConfig+0x462>
 8009228:	a201      	add	r2, pc, #4	@ (adr r2, 8009230 <UART_SetConfig+0x418>)
 800922a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800922e:	bf00      	nop
 8009230:	08009255 	.word	0x08009255
 8009234:	0800925d 	.word	0x0800925d
 8009238:	08009265 	.word	0x08009265
 800923c:	0800927b 	.word	0x0800927b
 8009240:	0800926b 	.word	0x0800926b
 8009244:	0800927b 	.word	0x0800927b
 8009248:	0800927b 	.word	0x0800927b
 800924c:	0800927b 	.word	0x0800927b
 8009250:	08009273 	.word	0x08009273
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009254:	f7fc ff2a 	bl	80060ac <HAL_RCC_GetPCLK1Freq>
 8009258:	61b8      	str	r0, [r7, #24]
        break;
 800925a:	e013      	b.n	8009284 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800925c:	f7fc ff3a 	bl	80060d4 <HAL_RCC_GetPCLK2Freq>
 8009260:	61b8      	str	r0, [r7, #24]
        break;
 8009262:	e00f      	b.n	8009284 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009264:	4b1d      	ldr	r3, [pc, #116]	@ (80092dc <UART_SetConfig+0x4c4>)
 8009266:	61bb      	str	r3, [r7, #24]
        break;
 8009268:	e00c      	b.n	8009284 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800926a:	f7fc fe0d 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 800926e:	61b8      	str	r0, [r7, #24]
        break;
 8009270:	e008      	b.n	8009284 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009272:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009276:	61bb      	str	r3, [r7, #24]
        break;
 8009278:	e004      	b.n	8009284 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800927a:	2300      	movs	r3, #0
 800927c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	77bb      	strb	r3, [r7, #30]
        break;
 8009282:	bf00      	nop
    }

    if (pclk != 0U)
 8009284:	69bb      	ldr	r3, [r7, #24]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d018      	beq.n	80092bc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	085a      	lsrs	r2, r3, #1
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	441a      	add	r2, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	fbb2 f3f3 	udiv	r3, r2, r3
 800929c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	2b0f      	cmp	r3, #15
 80092a2:	d909      	bls.n	80092b8 <UART_SetConfig+0x4a0>
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092aa:	d205      	bcs.n	80092b8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	b29a      	uxth	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	60da      	str	r2, [r3, #12]
 80092b6:	e001      	b.n	80092bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80092c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3720      	adds	r7, #32
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	40007c00 	.word	0x40007c00
 80092d8:	40023800 	.word	0x40023800
 80092dc:	00f42400 	.word	0x00f42400

080092e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ec:	f003 0308 	and.w	r3, r3, #8
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d00a      	beq.n	800930a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	430a      	orrs	r2, r1
 8009308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800930e:	f003 0301 	and.w	r3, r3, #1
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00a      	beq.n	800932c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	430a      	orrs	r2, r1
 800932a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009330:	f003 0302 	and.w	r3, r3, #2
 8009334:	2b00      	cmp	r3, #0
 8009336:	d00a      	beq.n	800934e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	430a      	orrs	r2, r1
 800934c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009352:	f003 0304 	and.w	r3, r3, #4
 8009356:	2b00      	cmp	r3, #0
 8009358:	d00a      	beq.n	8009370 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	430a      	orrs	r2, r1
 800936e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009374:	f003 0310 	and.w	r3, r3, #16
 8009378:	2b00      	cmp	r3, #0
 800937a:	d00a      	beq.n	8009392 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	430a      	orrs	r2, r1
 8009390:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009396:	f003 0320 	and.w	r3, r3, #32
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00a      	beq.n	80093b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	430a      	orrs	r2, r1
 80093b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d01a      	beq.n	80093f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	430a      	orrs	r2, r1
 80093d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093de:	d10a      	bne.n	80093f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	430a      	orrs	r2, r1
 80093f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00a      	beq.n	8009418 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	430a      	orrs	r2, r1
 8009416:	605a      	str	r2, [r3, #4]
  }
}
 8009418:	bf00      	nop
 800941a:	370c      	adds	r7, #12
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b08c      	sub	sp, #48	@ 0x30
 8009428:	af02      	add	r7, sp, #8
 800942a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009434:	f7f9 fbe8 	bl	8002c08 <HAL_GetTick>
 8009438:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f003 0308 	and.w	r3, r3, #8
 8009444:	2b08      	cmp	r3, #8
 8009446:	d12e      	bne.n	80094a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009448:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800944c:	9300      	str	r3, [sp, #0]
 800944e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009450:	2200      	movs	r2, #0
 8009452:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 f83b 	bl	80094d2 <UART_WaitOnFlagUntilTimeout>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d021      	beq.n	80094a6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	e853 3f00 	ldrex	r3, [r3]
 800946e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009476:	623b      	str	r3, [r7, #32]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	461a      	mov	r2, r3
 800947e:	6a3b      	ldr	r3, [r7, #32]
 8009480:	61fb      	str	r3, [r7, #28]
 8009482:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009484:	69b9      	ldr	r1, [r7, #24]
 8009486:	69fa      	ldr	r2, [r7, #28]
 8009488:	e841 2300 	strex	r3, r2, [r1]
 800948c:	617b      	str	r3, [r7, #20]
   return(result);
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d1e6      	bne.n	8009462 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2220      	movs	r2, #32
 8009498:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094a2:	2303      	movs	r3, #3
 80094a4:	e011      	b.n	80094ca <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2220      	movs	r2, #32
 80094aa:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2220      	movs	r2, #32
 80094b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80094c8:	2300      	movs	r3, #0
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3728      	adds	r7, #40	@ 0x28
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b084      	sub	sp, #16
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	60f8      	str	r0, [r7, #12]
 80094da:	60b9      	str	r1, [r7, #8]
 80094dc:	603b      	str	r3, [r7, #0]
 80094de:	4613      	mov	r3, r2
 80094e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094e2:	e04f      	b.n	8009584 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80094ea:	d04b      	beq.n	8009584 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094ec:	f7f9 fb8c 	bl	8002c08 <HAL_GetTick>
 80094f0:	4602      	mov	r2, r0
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	1ad3      	subs	r3, r2, r3
 80094f6:	69ba      	ldr	r2, [r7, #24]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d302      	bcc.n	8009502 <UART_WaitOnFlagUntilTimeout+0x30>
 80094fc:	69bb      	ldr	r3, [r7, #24]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d101      	bne.n	8009506 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009502:	2303      	movs	r3, #3
 8009504:	e04e      	b.n	80095a4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f003 0304 	and.w	r3, r3, #4
 8009510:	2b00      	cmp	r3, #0
 8009512:	d037      	beq.n	8009584 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	2b80      	cmp	r3, #128	@ 0x80
 8009518:	d034      	beq.n	8009584 <UART_WaitOnFlagUntilTimeout+0xb2>
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	2b40      	cmp	r3, #64	@ 0x40
 800951e:	d031      	beq.n	8009584 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	69db      	ldr	r3, [r3, #28]
 8009526:	f003 0308 	and.w	r3, r3, #8
 800952a:	2b08      	cmp	r3, #8
 800952c:	d110      	bne.n	8009550 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2208      	movs	r2, #8
 8009534:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f000 f8fe 	bl	8009738 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2208      	movs	r2, #8
 8009540:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2200      	movs	r2, #0
 8009548:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	e029      	b.n	80095a4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	69db      	ldr	r3, [r3, #28]
 8009556:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800955a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800955e:	d111      	bne.n	8009584 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009568:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800956a:	68f8      	ldr	r0, [r7, #12]
 800956c:	f000 f8e4 	bl	8009738 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2220      	movs	r2, #32
 8009574:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009580:	2303      	movs	r3, #3
 8009582:	e00f      	b.n	80095a4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	69da      	ldr	r2, [r3, #28]
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	4013      	ands	r3, r2
 800958e:	68ba      	ldr	r2, [r7, #8]
 8009590:	429a      	cmp	r2, r3
 8009592:	bf0c      	ite	eq
 8009594:	2301      	moveq	r3, #1
 8009596:	2300      	movne	r3, #0
 8009598:	b2db      	uxtb	r3, r3
 800959a:	461a      	mov	r2, r3
 800959c:	79fb      	ldrb	r3, [r7, #7]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d0a0      	beq.n	80094e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095a2:	2300      	movs	r3, #0
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3710      	adds	r7, #16
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b096      	sub	sp, #88	@ 0x58
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	4613      	mov	r3, r2
 80095b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	68ba      	ldr	r2, [r7, #8]
 80095be:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	88fa      	ldrh	r2, [r7, #6]
 80095c4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2222      	movs	r2, #34	@ 0x22
 80095d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d028      	beq.n	8009632 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095e4:	4a3e      	ldr	r2, [pc, #248]	@ (80096e0 <UART_Start_Receive_DMA+0x134>)
 80095e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095ec:	4a3d      	ldr	r2, [pc, #244]	@ (80096e4 <UART_Start_Receive_DMA+0x138>)
 80095ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095f4:	4a3c      	ldr	r2, [pc, #240]	@ (80096e8 <UART_Start_Receive_DMA+0x13c>)
 80095f6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095fc:	2200      	movs	r2, #0
 80095fe:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	3324      	adds	r3, #36	@ 0x24
 800960a:	4619      	mov	r1, r3
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009610:	461a      	mov	r2, r3
 8009612:	88fb      	ldrh	r3, [r7, #6]
 8009614:	f7f9 fff4 	bl	8003600 <HAL_DMA_Start_IT>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d009      	beq.n	8009632 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2210      	movs	r2, #16
 8009622:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2220      	movs	r2, #32
 800962a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800962e:	2301      	movs	r3, #1
 8009630:	e051      	b.n	80096d6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	691b      	ldr	r3, [r3, #16]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d018      	beq.n	800966c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009642:	e853 3f00 	ldrex	r3, [r3]
 8009646:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800964a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800964e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	461a      	mov	r2, r3
 8009656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009658:	64bb      	str	r3, [r7, #72]	@ 0x48
 800965a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800965e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009660:	e841 2300 	strex	r3, r2, [r1]
 8009664:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009668:	2b00      	cmp	r3, #0
 800966a:	d1e6      	bne.n	800963a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	3308      	adds	r3, #8
 8009672:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009676:	e853 3f00 	ldrex	r3, [r3]
 800967a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800967c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800967e:	f043 0301 	orr.w	r3, r3, #1
 8009682:	653b      	str	r3, [r7, #80]	@ 0x50
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	3308      	adds	r3, #8
 800968a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800968c:	637a      	str	r2, [r7, #52]	@ 0x34
 800968e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009690:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009692:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009694:	e841 2300 	strex	r3, r2, [r1]
 8009698:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800969a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800969c:	2b00      	cmp	r3, #0
 800969e:	d1e5      	bne.n	800966c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	3308      	adds	r3, #8
 80096a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	e853 3f00 	ldrex	r3, [r3]
 80096ae:	613b      	str	r3, [r7, #16]
   return(result);
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	3308      	adds	r3, #8
 80096be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80096c0:	623a      	str	r2, [r7, #32]
 80096c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c4:	69f9      	ldr	r1, [r7, #28]
 80096c6:	6a3a      	ldr	r2, [r7, #32]
 80096c8:	e841 2300 	strex	r3, r2, [r1]
 80096cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1e5      	bne.n	80096a0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3758      	adds	r7, #88	@ 0x58
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	08009801 	.word	0x08009801
 80096e4:	08009929 	.word	0x08009929
 80096e8:	08009967 	.word	0x08009967

080096ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b089      	sub	sp, #36	@ 0x24
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	e853 3f00 	ldrex	r3, [r3]
 8009700:	60bb      	str	r3, [r7, #8]
   return(result);
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009708:	61fb      	str	r3, [r7, #28]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	461a      	mov	r2, r3
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	61bb      	str	r3, [r7, #24]
 8009714:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009716:	6979      	ldr	r1, [r7, #20]
 8009718:	69ba      	ldr	r2, [r7, #24]
 800971a:	e841 2300 	strex	r3, r2, [r1]
 800971e:	613b      	str	r3, [r7, #16]
   return(result);
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d1e6      	bne.n	80096f4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2220      	movs	r2, #32
 800972a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800972c:	bf00      	nop
 800972e:	3724      	adds	r7, #36	@ 0x24
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009738:	b480      	push	{r7}
 800973a:	b095      	sub	sp, #84	@ 0x54
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009748:	e853 3f00 	ldrex	r3, [r3]
 800974c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800974e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009750:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009754:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	461a      	mov	r2, r3
 800975c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800975e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009760:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009762:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009764:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009766:	e841 2300 	strex	r3, r2, [r1]
 800976a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800976c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1e6      	bne.n	8009740 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	3308      	adds	r3, #8
 8009778:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800977a:	6a3b      	ldr	r3, [r7, #32]
 800977c:	e853 3f00 	ldrex	r3, [r3]
 8009780:	61fb      	str	r3, [r7, #28]
   return(result);
 8009782:	69fb      	ldr	r3, [r7, #28]
 8009784:	f023 0301 	bic.w	r3, r3, #1
 8009788:	64bb      	str	r3, [r7, #72]	@ 0x48
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	3308      	adds	r3, #8
 8009790:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009792:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009794:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009796:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009798:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800979a:	e841 2300 	strex	r3, r2, [r1]
 800979e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80097a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d1e5      	bne.n	8009772 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d118      	bne.n	80097e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	e853 3f00 	ldrex	r3, [r3]
 80097ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	f023 0310 	bic.w	r3, r3, #16
 80097c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	461a      	mov	r2, r3
 80097ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097cc:	61bb      	str	r3, [r7, #24]
 80097ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d0:	6979      	ldr	r1, [r7, #20]
 80097d2:	69ba      	ldr	r2, [r7, #24]
 80097d4:	e841 2300 	strex	r3, r2, [r1]
 80097d8:	613b      	str	r3, [r7, #16]
   return(result);
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d1e6      	bne.n	80097ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2220      	movs	r2, #32
 80097e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80097f4:	bf00      	nop
 80097f6:	3754      	adds	r7, #84	@ 0x54
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b09c      	sub	sp, #112	@ 0x70
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800980c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	69db      	ldr	r3, [r3, #28]
 8009812:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009816:	d071      	beq.n	80098fc <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009818:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800981a:	2200      	movs	r2, #0
 800981c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009820:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009826:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009828:	e853 3f00 	ldrex	r3, [r3]
 800982c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800982e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009830:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009834:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009836:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	461a      	mov	r2, r3
 800983c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800983e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009840:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009842:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009844:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009846:	e841 2300 	strex	r3, r2, [r1]
 800984a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800984c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800984e:	2b00      	cmp	r3, #0
 8009850:	d1e6      	bne.n	8009820 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009852:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	3308      	adds	r3, #8
 8009858:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800985a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800985c:	e853 3f00 	ldrex	r3, [r3]
 8009860:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009864:	f023 0301 	bic.w	r3, r3, #1
 8009868:	667b      	str	r3, [r7, #100]	@ 0x64
 800986a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	3308      	adds	r3, #8
 8009870:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009872:	647a      	str	r2, [r7, #68]	@ 0x44
 8009874:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009876:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009878:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800987a:	e841 2300 	strex	r3, r2, [r1]
 800987e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1e5      	bne.n	8009852 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009886:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	3308      	adds	r3, #8
 800988c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009890:	e853 3f00 	ldrex	r3, [r3]
 8009894:	623b      	str	r3, [r7, #32]
   return(result);
 8009896:	6a3b      	ldr	r3, [r7, #32]
 8009898:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800989c:	663b      	str	r3, [r7, #96]	@ 0x60
 800989e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	3308      	adds	r3, #8
 80098a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80098a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80098a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098ae:	e841 2300 	strex	r3, r2, [r1]
 80098b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80098b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1e5      	bne.n	8009886 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80098ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098bc:	2220      	movs	r2, #32
 80098be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d118      	bne.n	80098fc <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	e853 3f00 	ldrex	r3, [r3]
 80098d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f023 0310 	bic.w	r3, r3, #16
 80098de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80098e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	461a      	mov	r2, r3
 80098e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098e8:	61fb      	str	r3, [r7, #28]
 80098ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ec:	69b9      	ldr	r1, [r7, #24]
 80098ee:	69fa      	ldr	r2, [r7, #28]
 80098f0:	e841 2300 	strex	r3, r2, [r1]
 80098f4:	617b      	str	r3, [r7, #20]
   return(result);
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d1e6      	bne.n	80098ca <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098fe:	2200      	movs	r2, #0
 8009900:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009902:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009906:	2b01      	cmp	r3, #1
 8009908:	d107      	bne.n	800991a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800990a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800990c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009910:	4619      	mov	r1, r3
 8009912:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009914:	f7ff fa73 	bl	8008dfe <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009918:	e002      	b.n	8009920 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800991a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800991c:	f7f7 fc76 	bl	800120c <HAL_UART_RxCpltCallback>
}
 8009920:	bf00      	nop
 8009922:	3770      	adds	r7, #112	@ 0x70
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009934:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2201      	movs	r2, #1
 800993a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009940:	2b01      	cmp	r3, #1
 8009942:	d109      	bne.n	8009958 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800994a:	085b      	lsrs	r3, r3, #1
 800994c:	b29b      	uxth	r3, r3
 800994e:	4619      	mov	r1, r3
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	f7ff fa54 	bl	8008dfe <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009956:	e002      	b.n	800995e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f7ff fa3c 	bl	8008dd6 <HAL_UART_RxHalfCpltCallback>
}
 800995e:	bf00      	nop
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b086      	sub	sp, #24
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009972:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009978:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009980:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	689b      	ldr	r3, [r3, #8]
 8009988:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800998c:	2b80      	cmp	r3, #128	@ 0x80
 800998e:	d109      	bne.n	80099a4 <UART_DMAError+0x3e>
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	2b21      	cmp	r3, #33	@ 0x21
 8009994:	d106      	bne.n	80099a4 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	2200      	movs	r2, #0
 800999a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800999e:	6978      	ldr	r0, [r7, #20]
 80099a0:	f7ff fea4 	bl	80096ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	689b      	ldr	r3, [r3, #8]
 80099aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099ae:	2b40      	cmp	r3, #64	@ 0x40
 80099b0:	d109      	bne.n	80099c6 <UART_DMAError+0x60>
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2b22      	cmp	r3, #34	@ 0x22
 80099b6:	d106      	bne.n	80099c6 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	2200      	movs	r2, #0
 80099bc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80099c0:	6978      	ldr	r0, [r7, #20]
 80099c2:	f7ff feb9 	bl	8009738 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099cc:	f043 0210 	orr.w	r2, r3, #16
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099d6:	6978      	ldr	r0, [r7, #20]
 80099d8:	f7ff fa07 	bl	8008dea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099dc:	bf00      	nop
 80099de:	3718      	adds	r7, #24
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80099e4:	b084      	sub	sp, #16
 80099e6:	b480      	push	{r7}
 80099e8:	b085      	sub	sp, #20
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
 80099ee:	f107 001c 	add.w	r0, r7, #28
 80099f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80099f6:	2300      	movs	r3, #0
 80099f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80099fa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80099fc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80099fe:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8009a02:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8009a06:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8009a0a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8009a0e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	685a      	ldr	r2, [r3, #4]
 8009a1a:	4b07      	ldr	r3, [pc, #28]	@ (8009a38 <SDMMC_Init+0x54>)
 8009a1c:	4013      	ands	r3, r2
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	431a      	orrs	r2, r3
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009a26:	2300      	movs	r3, #0
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3714      	adds	r7, #20
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	b004      	add	sp, #16
 8009a34:	4770      	bx	lr
 8009a36:	bf00      	nop
 8009a38:	ffff8100 	.word	0xffff8100

08009a3c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	370c      	adds	r7, #12
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8009a56:	b480      	push	{r7}
 8009a58:	b083      	sub	sp, #12
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
 8009a5e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	370c      	adds	r7, #12
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2203      	movs	r2, #3
 8009a84:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f003 0303 	and.w	r3, r3, #3
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	370c      	adds	r7, #12
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b085      	sub	sp, #20
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009aba:	2300      	movs	r3, #0
 8009abc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009ace:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009ad4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009ada:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	68da      	ldr	r2, [r3, #12]
 8009ae6:	4b06      	ldr	r3, [pc, #24]	@ (8009b00 <SDMMC_SendCommand+0x50>)
 8009ae8:	4013      	ands	r3, r2
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	431a      	orrs	r2, r3
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3714      	adds	r7, #20
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr
 8009b00:	fffff000 	.word	0xfffff000

08009b04 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	691b      	ldr	r3, [r3, #16]
 8009b10:	b2db      	uxtb	r3, r3
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	370c      	adds	r7, #12
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr

08009b1e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009b1e:	b480      	push	{r7}
 8009b20:	b085      	sub	sp, #20
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
 8009b26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	3314      	adds	r3, #20
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	4413      	add	r3, r2
 8009b32:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
}  
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3714      	adds	r7, #20
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b085      	sub	sp, #20
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	685a      	ldr	r2, [r3, #4]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009b6a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009b70:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009b76:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009b78:	68fa      	ldr	r2, [r7, #12]
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b82:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	431a      	orrs	r2, r3
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009b8e:	2300      	movs	r3, #0

}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3714      	adds	r7, #20
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b088      	sub	sp, #32
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009baa:	2310      	movs	r3, #16
 8009bac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bae:	2340      	movs	r3, #64	@ 0x40
 8009bb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009bba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bbc:	f107 0308 	add.w	r3, r7, #8
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f7ff ff74 	bl	8009ab0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009bc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009bcc:	2110      	movs	r1, #16
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 fa1a 	bl	800a008 <SDMMC_GetCmdResp1>
 8009bd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bd6:	69fb      	ldr	r3, [r7, #28]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3720      	adds	r7, #32
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b088      	sub	sp, #32
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009bee:	2311      	movs	r3, #17
 8009bf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bf2:	2340      	movs	r3, #64	@ 0x40
 8009bf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009bfe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c00:	f107 0308 	add.w	r3, r7, #8
 8009c04:	4619      	mov	r1, r3
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f7ff ff52 	bl	8009ab0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009c0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c10:	2111      	movs	r1, #17
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 f9f8 	bl	800a008 <SDMMC_GetCmdResp1>
 8009c18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c1a:	69fb      	ldr	r3, [r7, #28]
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3720      	adds	r7, #32
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b088      	sub	sp, #32
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009c32:	2312      	movs	r3, #18
 8009c34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c36:	2340      	movs	r3, #64	@ 0x40
 8009c38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c44:	f107 0308 	add.w	r3, r7, #8
 8009c48:	4619      	mov	r1, r3
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f7ff ff30 	bl	8009ab0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009c50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c54:	2112      	movs	r1, #18
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 f9d6 	bl	800a008 <SDMMC_GetCmdResp1>
 8009c5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c5e:	69fb      	ldr	r3, [r7, #28]
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3720      	adds	r7, #32
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b088      	sub	sp, #32
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009c76:	2318      	movs	r3, #24
 8009c78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c7a:	2340      	movs	r3, #64	@ 0x40
 8009c7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c88:	f107 0308 	add.w	r3, r7, #8
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f7ff ff0e 	bl	8009ab0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009c94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c98:	2118      	movs	r1, #24
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 f9b4 	bl	800a008 <SDMMC_GetCmdResp1>
 8009ca0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ca2:	69fb      	ldr	r3, [r7, #28]
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3720      	adds	r7, #32
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b088      	sub	sp, #32
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009cba:	2319      	movs	r3, #25
 8009cbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009cbe:	2340      	movs	r3, #64	@ 0x40
 8009cc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009cca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ccc:	f107 0308 	add.w	r3, r7, #8
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f7ff feec 	bl	8009ab0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009cd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009cdc:	2119      	movs	r1, #25
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 f992 	bl	800a008 <SDMMC_GetCmdResp1>
 8009ce4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ce6:	69fb      	ldr	r3, [r7, #28]
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3720      	adds	r7, #32
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b088      	sub	sp, #32
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009cfc:	230c      	movs	r3, #12
 8009cfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d00:	2340      	movs	r3, #64	@ 0x40
 8009d02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d04:	2300      	movs	r3, #0
 8009d06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d0c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d0e:	f107 0308 	add.w	r3, r7, #8
 8009d12:	4619      	mov	r1, r3
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f7ff fecb 	bl	8009ab0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009d1a:	4a05      	ldr	r2, [pc, #20]	@ (8009d30 <SDMMC_CmdStopTransfer+0x40>)
 8009d1c:	210c      	movs	r1, #12
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 f972 	bl	800a008 <SDMMC_GetCmdResp1>
 8009d24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d26:	69fb      	ldr	r3, [r7, #28]
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3720      	adds	r7, #32
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	05f5e100 	.word	0x05f5e100

08009d34 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b08a      	sub	sp, #40	@ 0x28
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009d44:	2307      	movs	r3, #7
 8009d46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d48:	2340      	movs	r3, #64	@ 0x40
 8009d4a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d54:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d56:	f107 0310 	add.w	r3, r7, #16
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	68f8      	ldr	r0, [r7, #12]
 8009d5e:	f7ff fea7 	bl	8009ab0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d66:	2107      	movs	r1, #7
 8009d68:	68f8      	ldr	r0, [r7, #12]
 8009d6a:	f000 f94d 	bl	800a008 <SDMMC_GetCmdResp1>
 8009d6e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8009d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3728      	adds	r7, #40	@ 0x28
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b088      	sub	sp, #32
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009d82:	2300      	movs	r3, #0
 8009d84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009d86:	2300      	movs	r3, #0
 8009d88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d98:	f107 0308 	add.w	r3, r7, #8
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f7ff fe86 	bl	8009ab0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 fb67 	bl	800a478 <SDMMC_GetCmdError>
 8009daa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dac:	69fb      	ldr	r3, [r7, #28]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3720      	adds	r7, #32
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b088      	sub	sp, #32
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009dbe:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8009dc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009dc4:	2308      	movs	r3, #8
 8009dc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009dc8:	2340      	movs	r3, #64	@ 0x40
 8009dca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009dd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009dd4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009dd6:	f107 0308 	add.w	r3, r7, #8
 8009dda:	4619      	mov	r1, r3
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f7ff fe67 	bl	8009ab0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 fafa 	bl	800a3dc <SDMMC_GetCmdResp7>
 8009de8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dea:	69fb      	ldr	r3, [r7, #28]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3720      	adds	r7, #32
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b088      	sub	sp, #32
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009e02:	2337      	movs	r3, #55	@ 0x37
 8009e04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e06:	2340      	movs	r3, #64	@ 0x40
 8009e08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e14:	f107 0308 	add.w	r3, r7, #8
 8009e18:	4619      	mov	r1, r3
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f7ff fe48 	bl	8009ab0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009e20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e24:	2137      	movs	r1, #55	@ 0x37
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 f8ee 	bl	800a008 <SDMMC_GetCmdResp1>
 8009e2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e2e:	69fb      	ldr	r3, [r7, #28]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3720      	adds	r7, #32
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b088      	sub	sp, #32
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009e42:	683a      	ldr	r2, [r7, #0]
 8009e44:	4b0d      	ldr	r3, [pc, #52]	@ (8009e7c <SDMMC_CmdAppOperCommand+0x44>)
 8009e46:	4313      	orrs	r3, r2
 8009e48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009e4a:	2329      	movs	r3, #41	@ 0x29
 8009e4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e4e:	2340      	movs	r3, #64	@ 0x40
 8009e50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e52:	2300      	movs	r3, #0
 8009e54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e5c:	f107 0308 	add.w	r3, r7, #8
 8009e60:	4619      	mov	r1, r3
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f7ff fe24 	bl	8009ab0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 fa03 	bl	800a274 <SDMMC_GetCmdResp3>
 8009e6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e70:	69fb      	ldr	r3, [r7, #28]
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3720      	adds	r7, #32
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	80100000 	.word	0x80100000

08009e80 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b088      	sub	sp, #32
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009e8e:	2306      	movs	r3, #6
 8009e90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e92:	2340      	movs	r3, #64	@ 0x40
 8009e94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e96:	2300      	movs	r3, #0
 8009e98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ea0:	f107 0308 	add.w	r3, r7, #8
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f7ff fe02 	bl	8009ab0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009eac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009eb0:	2106      	movs	r1, #6
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 f8a8 	bl	800a008 <SDMMC_GetCmdResp1>
 8009eb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009eba:	69fb      	ldr	r3, [r7, #28]
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3720      	adds	r7, #32
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b088      	sub	sp, #32
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009ed0:	2333      	movs	r3, #51	@ 0x33
 8009ed2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ed4:	2340      	movs	r3, #64	@ 0x40
 8009ed6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009edc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ee0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ee2:	f107 0308 	add.w	r3, r7, #8
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f7ff fde1 	bl	8009ab0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ef2:	2133      	movs	r1, #51	@ 0x33
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 f887 	bl	800a008 <SDMMC_GetCmdResp1>
 8009efa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009efc:	69fb      	ldr	r3, [r7, #28]
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3720      	adds	r7, #32
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b088      	sub	sp, #32
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009f12:	2302      	movs	r3, #2
 8009f14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009f16:	23c0      	movs	r3, #192	@ 0xc0
 8009f18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f24:	f107 0308 	add.w	r3, r7, #8
 8009f28:	4619      	mov	r1, r3
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f7ff fdc0 	bl	8009ab0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 f957 	bl	800a1e4 <SDMMC_GetCmdResp2>
 8009f36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f38:	69fb      	ldr	r3, [r7, #28]
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3720      	adds	r7, #32
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}

08009f42 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009f42:	b580      	push	{r7, lr}
 8009f44:	b088      	sub	sp, #32
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
 8009f4a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009f50:	2309      	movs	r3, #9
 8009f52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009f54:	23c0      	movs	r3, #192	@ 0xc0
 8009f56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f62:	f107 0308 	add.w	r3, r7, #8
 8009f66:	4619      	mov	r1, r3
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f7ff fda1 	bl	8009ab0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f938 	bl	800a1e4 <SDMMC_GetCmdResp2>
 8009f74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f76:	69fb      	ldr	r3, [r7, #28]
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3720      	adds	r7, #32
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b088      	sub	sp, #32
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009f8e:	2303      	movs	r3, #3
 8009f90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f92:	2340      	movs	r3, #64	@ 0x40
 8009f94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f96:	2300      	movs	r3, #0
 8009f98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009fa0:	f107 0308 	add.w	r3, r7, #8
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f7ff fd82 	bl	8009ab0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009fac:	683a      	ldr	r2, [r7, #0]
 8009fae:	2103      	movs	r1, #3
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 f99d 	bl	800a2f0 <SDMMC_GetCmdResp6>
 8009fb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fb8:	69fb      	ldr	r3, [r7, #28]
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3720      	adds	r7, #32
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}

08009fc2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009fc2:	b580      	push	{r7, lr}
 8009fc4:	b088      	sub	sp, #32
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
 8009fca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009fd0:	230d      	movs	r3, #13
 8009fd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009fd4:	2340      	movs	r3, #64	@ 0x40
 8009fd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009fdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009fe0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009fe2:	f107 0308 	add.w	r3, r7, #8
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f7ff fd61 	bl	8009ab0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ff2:	210d      	movs	r1, #13
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 f807 	bl	800a008 <SDMMC_GetCmdResp1>
 8009ffa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ffc:	69fb      	ldr	r3, [r7, #28]
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3720      	adds	r7, #32
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
	...

0800a008 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b088      	sub	sp, #32
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	460b      	mov	r3, r1
 800a012:	607a      	str	r2, [r7, #4]
 800a014:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a016:	4b70      	ldr	r3, [pc, #448]	@ (800a1d8 <SDMMC_GetCmdResp1+0x1d0>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a70      	ldr	r2, [pc, #448]	@ (800a1dc <SDMMC_GetCmdResp1+0x1d4>)
 800a01c:	fba2 2303 	umull	r2, r3, r2, r3
 800a020:	0a5a      	lsrs	r2, r3, #9
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	fb02 f303 	mul.w	r3, r2, r3
 800a028:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a02a:	69fb      	ldr	r3, [r7, #28]
 800a02c:	1e5a      	subs	r2, r3, #1
 800a02e:	61fa      	str	r2, [r7, #28]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d102      	bne.n	800a03a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a034:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a038:	e0c9      	b.n	800a1ce <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a03e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a046:	2b00      	cmp	r3, #0
 800a048:	d0ef      	beq.n	800a02a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a050:	2b00      	cmp	r3, #0
 800a052:	d1ea      	bne.n	800a02a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a058:	f003 0304 	and.w	r3, r3, #4
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d004      	beq.n	800a06a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2204      	movs	r2, #4
 800a064:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a066:	2304      	movs	r3, #4
 800a068:	e0b1      	b.n	800a1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a06e:	f003 0301 	and.w	r3, r3, #1
 800a072:	2b00      	cmp	r3, #0
 800a074:	d004      	beq.n	800a080 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2201      	movs	r2, #1
 800a07a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a07c:	2301      	movs	r3, #1
 800a07e:	e0a6      	b.n	800a1ce <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	22c5      	movs	r2, #197	@ 0xc5
 800a084:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a086:	68f8      	ldr	r0, [r7, #12]
 800a088:	f7ff fd3c 	bl	8009b04 <SDMMC_GetCommandResponse>
 800a08c:	4603      	mov	r3, r0
 800a08e:	461a      	mov	r2, r3
 800a090:	7afb      	ldrb	r3, [r7, #11]
 800a092:	4293      	cmp	r3, r2
 800a094:	d001      	beq.n	800a09a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a096:	2301      	movs	r3, #1
 800a098:	e099      	b.n	800a1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a09a:	2100      	movs	r1, #0
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f7ff fd3e 	bl	8009b1e <SDMMC_GetResponse>
 800a0a2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a0a4:	697a      	ldr	r2, [r7, #20]
 800a0a6:	4b4e      	ldr	r3, [pc, #312]	@ (800a1e0 <SDMMC_GetCmdResp1+0x1d8>)
 800a0a8:	4013      	ands	r3, r2
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d101      	bne.n	800a0b2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	e08d      	b.n	800a1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	da02      	bge.n	800a0be <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a0b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a0bc:	e087      	b.n	800a1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d001      	beq.n	800a0cc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a0c8:	2340      	movs	r3, #64	@ 0x40
 800a0ca:	e080      	b.n	800a1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d001      	beq.n	800a0da <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a0d6:	2380      	movs	r3, #128	@ 0x80
 800a0d8:	e079      	b.n	800a1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d002      	beq.n	800a0ea <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a0e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a0e8:	e071      	b.n	800a1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d002      	beq.n	800a0fa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a0f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a0f8:	e069      	b.n	800a1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a100:	2b00      	cmp	r3, #0
 800a102:	d002      	beq.n	800a10a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a104:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a108:	e061      	b.n	800a1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a110:	2b00      	cmp	r3, #0
 800a112:	d002      	beq.n	800a11a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a114:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a118:	e059      	b.n	800a1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a120:	2b00      	cmp	r3, #0
 800a122:	d002      	beq.n	800a12a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a124:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a128:	e051      	b.n	800a1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a130:	2b00      	cmp	r3, #0
 800a132:	d002      	beq.n	800a13a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a134:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a138:	e049      	b.n	800a1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a140:	2b00      	cmp	r3, #0
 800a142:	d002      	beq.n	800a14a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a144:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a148:	e041      	b.n	800a1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a150:	2b00      	cmp	r3, #0
 800a152:	d002      	beq.n	800a15a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a154:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a158:	e039      	b.n	800a1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a160:	2b00      	cmp	r3, #0
 800a162:	d002      	beq.n	800a16a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a164:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a168:	e031      	b.n	800a1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a170:	2b00      	cmp	r3, #0
 800a172:	d002      	beq.n	800a17a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a174:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a178:	e029      	b.n	800a1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a180:	2b00      	cmp	r3, #0
 800a182:	d002      	beq.n	800a18a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a184:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a188:	e021      	b.n	800a1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a190:	2b00      	cmp	r3, #0
 800a192:	d002      	beq.n	800a19a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a194:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a198:	e019      	b.n	800a1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d002      	beq.n	800a1aa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a1a4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a1a8:	e011      	b.n	800a1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d002      	beq.n	800a1ba <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a1b4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a1b8:	e009      	b.n	800a1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	f003 0308 	and.w	r3, r3, #8
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d002      	beq.n	800a1ca <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a1c4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a1c8:	e001      	b.n	800a1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a1ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3720      	adds	r7, #32
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	20000000 	.word	0x20000000
 800a1dc:	10624dd3 	.word	0x10624dd3
 800a1e0:	fdffe008 	.word	0xfdffe008

0800a1e4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b085      	sub	sp, #20
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a1ec:	4b1f      	ldr	r3, [pc, #124]	@ (800a26c <SDMMC_GetCmdResp2+0x88>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a1f      	ldr	r2, [pc, #124]	@ (800a270 <SDMMC_GetCmdResp2+0x8c>)
 800a1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1f6:	0a5b      	lsrs	r3, r3, #9
 800a1f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1fc:	fb02 f303 	mul.w	r3, r2, r3
 800a200:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	1e5a      	subs	r2, r3, #1
 800a206:	60fa      	str	r2, [r7, #12]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d102      	bne.n	800a212 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a20c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a210:	e026      	b.n	800a260 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a216:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d0ef      	beq.n	800a202 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d1ea      	bne.n	800a202 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a230:	f003 0304 	and.w	r3, r3, #4
 800a234:	2b00      	cmp	r3, #0
 800a236:	d004      	beq.n	800a242 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2204      	movs	r2, #4
 800a23c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a23e:	2304      	movs	r3, #4
 800a240:	e00e      	b.n	800a260 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a246:	f003 0301 	and.w	r3, r3, #1
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d004      	beq.n	800a258 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2201      	movs	r2, #1
 800a252:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a254:	2301      	movs	r3, #1
 800a256:	e003      	b.n	800a260 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	22c5      	movs	r2, #197	@ 0xc5
 800a25c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	3714      	adds	r7, #20
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr
 800a26c:	20000000 	.word	0x20000000
 800a270:	10624dd3 	.word	0x10624dd3

0800a274 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a274:	b480      	push	{r7}
 800a276:	b085      	sub	sp, #20
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a27c:	4b1a      	ldr	r3, [pc, #104]	@ (800a2e8 <SDMMC_GetCmdResp3+0x74>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a1a      	ldr	r2, [pc, #104]	@ (800a2ec <SDMMC_GetCmdResp3+0x78>)
 800a282:	fba2 2303 	umull	r2, r3, r2, r3
 800a286:	0a5b      	lsrs	r3, r3, #9
 800a288:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a28c:	fb02 f303 	mul.w	r3, r2, r3
 800a290:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	1e5a      	subs	r2, r3, #1
 800a296:	60fa      	str	r2, [r7, #12]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d102      	bne.n	800a2a2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a29c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a2a0:	e01b      	b.n	800a2da <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d0ef      	beq.n	800a292 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d1ea      	bne.n	800a292 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2c0:	f003 0304 	and.w	r3, r3, #4
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d004      	beq.n	800a2d2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2204      	movs	r2, #4
 800a2cc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a2ce:	2304      	movs	r3, #4
 800a2d0:	e003      	b.n	800a2da <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	22c5      	movs	r2, #197	@ 0xc5
 800a2d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a2d8:	2300      	movs	r3, #0
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3714      	adds	r7, #20
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr
 800a2e6:	bf00      	nop
 800a2e8:	20000000 	.word	0x20000000
 800a2ec:	10624dd3 	.word	0x10624dd3

0800a2f0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b088      	sub	sp, #32
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	607a      	str	r2, [r7, #4]
 800a2fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a2fe:	4b35      	ldr	r3, [pc, #212]	@ (800a3d4 <SDMMC_GetCmdResp6+0xe4>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a35      	ldr	r2, [pc, #212]	@ (800a3d8 <SDMMC_GetCmdResp6+0xe8>)
 800a304:	fba2 2303 	umull	r2, r3, r2, r3
 800a308:	0a5b      	lsrs	r3, r3, #9
 800a30a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a30e:	fb02 f303 	mul.w	r3, r2, r3
 800a312:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	1e5a      	subs	r2, r3, #1
 800a318:	61fa      	str	r2, [r7, #28]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d102      	bne.n	800a324 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a31e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a322:	e052      	b.n	800a3ca <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a328:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a32a:	69bb      	ldr	r3, [r7, #24]
 800a32c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a330:	2b00      	cmp	r3, #0
 800a332:	d0ef      	beq.n	800a314 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a334:	69bb      	ldr	r3, [r7, #24]
 800a336:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d1ea      	bne.n	800a314 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a342:	f003 0304 	and.w	r3, r3, #4
 800a346:	2b00      	cmp	r3, #0
 800a348:	d004      	beq.n	800a354 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2204      	movs	r2, #4
 800a34e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a350:	2304      	movs	r3, #4
 800a352:	e03a      	b.n	800a3ca <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a358:	f003 0301 	and.w	r3, r3, #1
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d004      	beq.n	800a36a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2201      	movs	r2, #1
 800a364:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a366:	2301      	movs	r3, #1
 800a368:	e02f      	b.n	800a3ca <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a36a:	68f8      	ldr	r0, [r7, #12]
 800a36c:	f7ff fbca 	bl	8009b04 <SDMMC_GetCommandResponse>
 800a370:	4603      	mov	r3, r0
 800a372:	461a      	mov	r2, r3
 800a374:	7afb      	ldrb	r3, [r7, #11]
 800a376:	4293      	cmp	r3, r2
 800a378:	d001      	beq.n	800a37e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a37a:	2301      	movs	r3, #1
 800a37c:	e025      	b.n	800a3ca <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	22c5      	movs	r2, #197	@ 0xc5
 800a382:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a384:	2100      	movs	r1, #0
 800a386:	68f8      	ldr	r0, [r7, #12]
 800a388:	f7ff fbc9 	bl	8009b1e <SDMMC_GetResponse>
 800a38c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800a394:	2b00      	cmp	r3, #0
 800a396:	d106      	bne.n	800a3a6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	0c1b      	lsrs	r3, r3, #16
 800a39c:	b29a      	uxth	r2, r3
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	e011      	b.n	800a3ca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d002      	beq.n	800a3b6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a3b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a3b4:	e009      	b.n	800a3ca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d002      	beq.n	800a3c6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a3c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a3c4:	e001      	b.n	800a3ca <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a3c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3720      	adds	r7, #32
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	20000000 	.word	0x20000000
 800a3d8:	10624dd3 	.word	0x10624dd3

0800a3dc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b085      	sub	sp, #20
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a3e4:	4b22      	ldr	r3, [pc, #136]	@ (800a470 <SDMMC_GetCmdResp7+0x94>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a22      	ldr	r2, [pc, #136]	@ (800a474 <SDMMC_GetCmdResp7+0x98>)
 800a3ea:	fba2 2303 	umull	r2, r3, r2, r3
 800a3ee:	0a5b      	lsrs	r3, r3, #9
 800a3f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3f4:	fb02 f303 	mul.w	r3, r2, r3
 800a3f8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	1e5a      	subs	r2, r3, #1
 800a3fe:	60fa      	str	r2, [r7, #12]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d102      	bne.n	800a40a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a404:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a408:	e02c      	b.n	800a464 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a40e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a416:	2b00      	cmp	r3, #0
 800a418:	d0ef      	beq.n	800a3fa <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a420:	2b00      	cmp	r3, #0
 800a422:	d1ea      	bne.n	800a3fa <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a428:	f003 0304 	and.w	r3, r3, #4
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d004      	beq.n	800a43a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2204      	movs	r2, #4
 800a434:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a436:	2304      	movs	r3, #4
 800a438:	e014      	b.n	800a464 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a43e:	f003 0301 	and.w	r3, r3, #1
 800a442:	2b00      	cmp	r3, #0
 800a444:	d004      	beq.n	800a450 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2201      	movs	r2, #1
 800a44a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a44c:	2301      	movs	r3, #1
 800a44e:	e009      	b.n	800a464 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d002      	beq.n	800a462 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2240      	movs	r2, #64	@ 0x40
 800a460:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a462:	2300      	movs	r3, #0
  
}
 800a464:	4618      	mov	r0, r3
 800a466:	3714      	adds	r7, #20
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr
 800a470:	20000000 	.word	0x20000000
 800a474:	10624dd3 	.word	0x10624dd3

0800a478 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a478:	b480      	push	{r7}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a480:	4b11      	ldr	r3, [pc, #68]	@ (800a4c8 <SDMMC_GetCmdError+0x50>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4a11      	ldr	r2, [pc, #68]	@ (800a4cc <SDMMC_GetCmdError+0x54>)
 800a486:	fba2 2303 	umull	r2, r3, r2, r3
 800a48a:	0a5b      	lsrs	r3, r3, #9
 800a48c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a490:	fb02 f303 	mul.w	r3, r2, r3
 800a494:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	1e5a      	subs	r2, r3, #1
 800a49a:	60fa      	str	r2, [r7, #12]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d102      	bne.n	800a4a6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a4a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a4a4:	e009      	b.n	800a4ba <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d0f1      	beq.n	800a496 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	22c5      	movs	r2, #197	@ 0xc5
 800a4b6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800a4b8:	2300      	movs	r3, #0
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3714      	adds	r7, #20
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr
 800a4c6:	bf00      	nop
 800a4c8:	20000000 	.word	0x20000000
 800a4cc:	10624dd3 	.word	0x10624dd3

0800a4d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a4d0:	b084      	sub	sp, #16
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b084      	sub	sp, #16
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
 800a4da:	f107 001c 	add.w	r0, r7, #28
 800a4de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a4e2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d127      	bne.n	800a53a <USB_CoreInit+0x6a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4ee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	68da      	ldr	r2, [r3, #12]
 800a4fa:	4b3a      	ldr	r3, [pc, #232]	@ (800a5e4 <USB_CoreInit+0x114>)
 800a4fc:	4013      	ands	r3, r2
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	f043 0210 	orr.w	r2, r3, #16
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	68db      	ldr	r3, [r3, #12]
 800a512:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a51a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d105      	bne.n	800a52e <USB_CoreInit+0x5e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f001 fb1c 	bl	800bb6c <USB_CoreReset>
 800a534:	4603      	mov	r3, r0
 800a536:	73fb      	strb	r3, [r7, #15]
 800a538:	e03c      	b.n	800a5b4 <USB_CoreInit+0xe4>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800a53a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a53e:	2b03      	cmp	r3, #3
 800a540:	d127      	bne.n	800a592 <USB_CoreInit+0xc2>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a546:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	68da      	ldr	r2, [r3, #12]
 800a552:	4b24      	ldr	r3, [pc, #144]	@ (800a5e4 <USB_CoreInit+0x114>)
 800a554:	4013      	ands	r3, r2
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	68db      	ldr	r3, [r3, #12]
 800a55e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	68db      	ldr	r3, [r3, #12]
 800a56a:	f023 0210 	bic.w	r2, r3, #16
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 800a572:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a576:	2b01      	cmp	r3, #1
 800a578:	d105      	bne.n	800a586 <USB_CoreInit+0xb6>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	68db      	ldr	r3, [r3, #12]
 800a57e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f001 faf0 	bl	800bb6c <USB_CoreReset>
 800a58c:	4603      	mov	r3, r0
 800a58e:	73fb      	strb	r3, [r7, #15]
 800a590:	e010      	b.n	800a5b4 <USB_CoreInit+0xe4>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f001 fae4 	bl	800bb6c <USB_CoreReset>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5ac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800a5b4:	7fbb      	ldrb	r3, [r7, #30]
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d10b      	bne.n	800a5d2 <USB_CoreInit+0x102>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	689b      	ldr	r3, [r3, #8]
 800a5be:	f043 0206 	orr.w	r2, r3, #6
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	689b      	ldr	r3, [r3, #8]
 800a5ca:	f043 0220 	orr.w	r2, r3, #32
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a5d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3710      	adds	r7, #16
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a5de:	b004      	add	sp, #16
 800a5e0:	4770      	bx	lr
 800a5e2:	bf00      	nop
 800a5e4:	ffbdffbf 	.word	0xffbdffbf

0800a5e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b087      	sub	sp, #28
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	4613      	mov	r3, r2
 800a5f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a5f6:	79fb      	ldrb	r3, [r7, #7]
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	d165      	bne.n	800a6c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	4a41      	ldr	r2, [pc, #260]	@ (800a704 <USB_SetTurnaroundTime+0x11c>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d906      	bls.n	800a612 <USB_SetTurnaroundTime+0x2a>
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	4a40      	ldr	r2, [pc, #256]	@ (800a708 <USB_SetTurnaroundTime+0x120>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d202      	bcs.n	800a612 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a60c:	230f      	movs	r3, #15
 800a60e:	617b      	str	r3, [r7, #20]
 800a610:	e062      	b.n	800a6d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	4a3c      	ldr	r2, [pc, #240]	@ (800a708 <USB_SetTurnaroundTime+0x120>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d306      	bcc.n	800a628 <USB_SetTurnaroundTime+0x40>
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	4a3b      	ldr	r2, [pc, #236]	@ (800a70c <USB_SetTurnaroundTime+0x124>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d202      	bcs.n	800a628 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a622:	230e      	movs	r3, #14
 800a624:	617b      	str	r3, [r7, #20]
 800a626:	e057      	b.n	800a6d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	4a38      	ldr	r2, [pc, #224]	@ (800a70c <USB_SetTurnaroundTime+0x124>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d306      	bcc.n	800a63e <USB_SetTurnaroundTime+0x56>
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	4a37      	ldr	r2, [pc, #220]	@ (800a710 <USB_SetTurnaroundTime+0x128>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d202      	bcs.n	800a63e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a638:	230d      	movs	r3, #13
 800a63a:	617b      	str	r3, [r7, #20]
 800a63c:	e04c      	b.n	800a6d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	4a33      	ldr	r2, [pc, #204]	@ (800a710 <USB_SetTurnaroundTime+0x128>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d306      	bcc.n	800a654 <USB_SetTurnaroundTime+0x6c>
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	4a32      	ldr	r2, [pc, #200]	@ (800a714 <USB_SetTurnaroundTime+0x12c>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d802      	bhi.n	800a654 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a64e:	230c      	movs	r3, #12
 800a650:	617b      	str	r3, [r7, #20]
 800a652:	e041      	b.n	800a6d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	4a2f      	ldr	r2, [pc, #188]	@ (800a714 <USB_SetTurnaroundTime+0x12c>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d906      	bls.n	800a66a <USB_SetTurnaroundTime+0x82>
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	4a2e      	ldr	r2, [pc, #184]	@ (800a718 <USB_SetTurnaroundTime+0x130>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d802      	bhi.n	800a66a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a664:	230b      	movs	r3, #11
 800a666:	617b      	str	r3, [r7, #20]
 800a668:	e036      	b.n	800a6d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	4a2a      	ldr	r2, [pc, #168]	@ (800a718 <USB_SetTurnaroundTime+0x130>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d906      	bls.n	800a680 <USB_SetTurnaroundTime+0x98>
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	4a29      	ldr	r2, [pc, #164]	@ (800a71c <USB_SetTurnaroundTime+0x134>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d802      	bhi.n	800a680 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a67a:	230a      	movs	r3, #10
 800a67c:	617b      	str	r3, [r7, #20]
 800a67e:	e02b      	b.n	800a6d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	4a26      	ldr	r2, [pc, #152]	@ (800a71c <USB_SetTurnaroundTime+0x134>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d906      	bls.n	800a696 <USB_SetTurnaroundTime+0xae>
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	4a25      	ldr	r2, [pc, #148]	@ (800a720 <USB_SetTurnaroundTime+0x138>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d202      	bcs.n	800a696 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a690:	2309      	movs	r3, #9
 800a692:	617b      	str	r3, [r7, #20]
 800a694:	e020      	b.n	800a6d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	4a21      	ldr	r2, [pc, #132]	@ (800a720 <USB_SetTurnaroundTime+0x138>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d306      	bcc.n	800a6ac <USB_SetTurnaroundTime+0xc4>
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	4a20      	ldr	r2, [pc, #128]	@ (800a724 <USB_SetTurnaroundTime+0x13c>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d802      	bhi.n	800a6ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a6a6:	2308      	movs	r3, #8
 800a6a8:	617b      	str	r3, [r7, #20]
 800a6aa:	e015      	b.n	800a6d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	4a1d      	ldr	r2, [pc, #116]	@ (800a724 <USB_SetTurnaroundTime+0x13c>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d906      	bls.n	800a6c2 <USB_SetTurnaroundTime+0xda>
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	4a1c      	ldr	r2, [pc, #112]	@ (800a728 <USB_SetTurnaroundTime+0x140>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d202      	bcs.n	800a6c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a6bc:	2307      	movs	r3, #7
 800a6be:	617b      	str	r3, [r7, #20]
 800a6c0:	e00a      	b.n	800a6d8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a6c2:	2306      	movs	r3, #6
 800a6c4:	617b      	str	r3, [r7, #20]
 800a6c6:	e007      	b.n	800a6d8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a6c8:	79fb      	ldrb	r3, [r7, #7]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d102      	bne.n	800a6d4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a6ce:	2309      	movs	r3, #9
 800a6d0:	617b      	str	r3, [r7, #20]
 800a6d2:	e001      	b.n	800a6d8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a6d4:	2309      	movs	r3, #9
 800a6d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	68da      	ldr	r2, [r3, #12]
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	029b      	lsls	r3, r3, #10
 800a6ec:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a6f0:	431a      	orrs	r2, r3
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a6f6:	2300      	movs	r3, #0
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	371c      	adds	r7, #28
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr
 800a704:	00d8acbf 	.word	0x00d8acbf
 800a708:	00e4e1c0 	.word	0x00e4e1c0
 800a70c:	00f42400 	.word	0x00f42400
 800a710:	01067380 	.word	0x01067380
 800a714:	011a499f 	.word	0x011a499f
 800a718:	01312cff 	.word	0x01312cff
 800a71c:	014ca43f 	.word	0x014ca43f
 800a720:	016e3600 	.word	0x016e3600
 800a724:	01a6ab1f 	.word	0x01a6ab1f
 800a728:	01e84800 	.word	0x01e84800

0800a72c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b083      	sub	sp, #12
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	f043 0201 	orr.w	r2, r3, #1
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a740:	2300      	movs	r3, #0
}
 800a742:	4618      	mov	r0, r3
 800a744:	370c      	adds	r7, #12
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr

0800a74e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a74e:	b480      	push	{r7}
 800a750:	b083      	sub	sp, #12
 800a752:	af00      	add	r7, sp, #0
 800a754:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	689b      	ldr	r3, [r3, #8]
 800a75a:	f023 0201 	bic.w	r2, r3, #1
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a762:	2300      	movs	r3, #0
}
 800a764:	4618      	mov	r0, r3
 800a766:	370c      	adds	r7, #12
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	460b      	mov	r3, r1
 800a77a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a77c:	2300      	movs	r3, #0
 800a77e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	68db      	ldr	r3, [r3, #12]
 800a784:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a78c:	78fb      	ldrb	r3, [r7, #3]
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d115      	bne.n	800a7be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a79e:	200a      	movs	r0, #10
 800a7a0:	f7f8 fa3e 	bl	8002c20 <HAL_Delay>
      ms += 10U;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	330a      	adds	r3, #10
 800a7a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f001 f94d 	bl	800ba4a <USB_GetMode>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d01e      	beq.n	800a7f4 <USB_SetCurrentMode+0x84>
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2bc7      	cmp	r3, #199	@ 0xc7
 800a7ba:	d9f0      	bls.n	800a79e <USB_SetCurrentMode+0x2e>
 800a7bc:	e01a      	b.n	800a7f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a7be:	78fb      	ldrb	r3, [r7, #3]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d115      	bne.n	800a7f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a7d0:	200a      	movs	r0, #10
 800a7d2:	f7f8 fa25 	bl	8002c20 <HAL_Delay>
      ms += 10U;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	330a      	adds	r3, #10
 800a7da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f001 f934 	bl	800ba4a <USB_GetMode>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d005      	beq.n	800a7f4 <USB_SetCurrentMode+0x84>
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2bc7      	cmp	r3, #199	@ 0xc7
 800a7ec:	d9f0      	bls.n	800a7d0 <USB_SetCurrentMode+0x60>
 800a7ee:	e001      	b.n	800a7f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	e005      	b.n	800a800 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2bc8      	cmp	r3, #200	@ 0xc8
 800a7f8:	d101      	bne.n	800a7fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	e000      	b.n	800a800 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	4618      	mov	r0, r3
 800a802:	3710      	adds	r7, #16
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a808:	b084      	sub	sp, #16
 800a80a:	b580      	push	{r7, lr}
 800a80c:	b086      	sub	sp, #24
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
 800a812:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a816:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a81a:	2300      	movs	r3, #0
 800a81c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a822:	2300      	movs	r3, #0
 800a824:	613b      	str	r3, [r7, #16]
 800a826:	e009      	b.n	800a83c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	3340      	adds	r3, #64	@ 0x40
 800a82e:	009b      	lsls	r3, r3, #2
 800a830:	4413      	add	r3, r2
 800a832:	2200      	movs	r2, #0
 800a834:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	3301      	adds	r3, #1
 800a83a:	613b      	str	r3, [r7, #16]
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	2b0e      	cmp	r3, #14
 800a840:	d9f2      	bls.n	800a828 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a842:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a846:	2b00      	cmp	r3, #0
 800a848:	d11c      	bne.n	800a884 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	68fa      	ldr	r2, [r7, #12]
 800a854:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a858:	f043 0302 	orr.w	r3, r3, #2
 800a85c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a862:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	601a      	str	r2, [r3, #0]
 800a882:	e005      	b.n	800a890 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a888:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a896:	461a      	mov	r2, r3
 800a898:	2300      	movs	r3, #0
 800a89a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a89c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d10d      	bne.n	800a8c0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a8a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d104      	bne.n	800a8b6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a8ac:	2100      	movs	r1, #0
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 f97a 	bl	800aba8 <USB_SetDevSpeed>
 800a8b4:	e01a      	b.n	800a8ec <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a8b6:	2101      	movs	r1, #1
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 f975 	bl	800aba8 <USB_SetDevSpeed>
 800a8be:	e015      	b.n	800a8ec <USB_DevInit+0xe4>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800a8c0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a8c4:	2b03      	cmp	r3, #3
 800a8c6:	d10d      	bne.n	800a8e4 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a8c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d104      	bne.n	800a8da <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 f968 	bl	800aba8 <USB_SetDevSpeed>
 800a8d8:	e008      	b.n	800a8ec <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a8da:	2101      	movs	r1, #1
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 f963 	bl	800aba8 <USB_SetDevSpeed>
 800a8e2:	e003      	b.n	800a8ec <USB_DevInit+0xe4>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a8e4:	2103      	movs	r1, #3
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 f95e 	bl	800aba8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a8ec:	2110      	movs	r1, #16
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 f8fa 	bl	800aae8 <USB_FlushTxFifo>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d001      	beq.n	800a8fe <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f000 f924 	bl	800ab4c <USB_FlushRxFifo>
 800a904:	4603      	mov	r3, r0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d001      	beq.n	800a90e <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 800a90a:	2301      	movs	r3, #1
 800a90c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a914:	461a      	mov	r2, r3
 800a916:	2300      	movs	r3, #0
 800a918:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a920:	461a      	mov	r2, r3
 800a922:	2300      	movs	r3, #0
 800a924:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a92c:	461a      	mov	r2, r3
 800a92e:	2300      	movs	r3, #0
 800a930:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a932:	2300      	movs	r3, #0
 800a934:	613b      	str	r3, [r7, #16]
 800a936:	e043      	b.n	800a9c0 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	015a      	lsls	r2, r3, #5
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	4413      	add	r3, r2
 800a940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a94a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a94e:	d118      	bne.n	800a982 <USB_DevInit+0x17a>
    {
      if (i == 0U)
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d10a      	bne.n	800a96c <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	015a      	lsls	r2, r3, #5
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	4413      	add	r3, r2
 800a95e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a962:	461a      	mov	r2, r3
 800a964:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a968:	6013      	str	r3, [r2, #0]
 800a96a:	e013      	b.n	800a994 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	015a      	lsls	r2, r3, #5
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	4413      	add	r3, r2
 800a974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a978:	461a      	mov	r2, r3
 800a97a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a97e:	6013      	str	r3, [r2, #0]
 800a980:	e008      	b.n	800a994 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	015a      	lsls	r2, r3, #5
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	4413      	add	r3, r2
 800a98a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a98e:	461a      	mov	r2, r3
 800a990:	2300      	movs	r3, #0
 800a992:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	015a      	lsls	r2, r3, #5
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	4413      	add	r3, r2
 800a99c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	015a      	lsls	r2, r3, #5
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	4413      	add	r3, r2
 800a9ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a9b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	3301      	adds	r3, #1
 800a9be:	613b      	str	r3, [r7, #16]
 800a9c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d3b5      	bcc.n	800a938 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	613b      	str	r3, [r7, #16]
 800a9d0:	e043      	b.n	800aa5a <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	015a      	lsls	r2, r3, #5
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	4413      	add	r3, r2
 800a9da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a9e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a9e8:	d118      	bne.n	800aa1c <USB_DevInit+0x214>
    {
      if (i == 0U)
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d10a      	bne.n	800aa06 <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	015a      	lsls	r2, r3, #5
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	4413      	add	r3, r2
 800a9f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800aa02:	6013      	str	r3, [r2, #0]
 800aa04:	e013      	b.n	800aa2e <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	015a      	lsls	r2, r3, #5
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa12:	461a      	mov	r2, r3
 800aa14:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800aa18:	6013      	str	r3, [r2, #0]
 800aa1a:	e008      	b.n	800aa2e <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	015a      	lsls	r2, r3, #5
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	4413      	add	r3, r2
 800aa24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa28:	461a      	mov	r2, r3
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	015a      	lsls	r2, r3, #5
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	4413      	add	r3, r2
 800aa36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	015a      	lsls	r2, r3, #5
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	4413      	add	r3, r2
 800aa48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800aa52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	3301      	adds	r3, #1
 800aa58:	613b      	str	r3, [r7, #16]
 800aa5a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800aa5e:	461a      	mov	r2, r3
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d3b5      	bcc.n	800a9d2 <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa6c:	691b      	ldr	r3, [r3, #16]
 800aa6e:	68fa      	ldr	r2, [r7, #12]
 800aa70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa78:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800aa86:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aa88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d105      	bne.n	800aa9c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	699b      	ldr	r3, [r3, #24]
 800aa94:	f043 0210 	orr.w	r2, r3, #16
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	699a      	ldr	r2, [r3, #24]
 800aaa0:	4b0f      	ldr	r3, [pc, #60]	@ (800aae0 <USB_DevInit+0x2d8>)
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800aaa8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d005      	beq.n	800aabc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	699b      	ldr	r3, [r3, #24]
 800aab4:	f043 0208 	orr.w	r2, r3, #8
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aabc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d105      	bne.n	800aad0 <USB_DevInit+0x2c8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	699a      	ldr	r2, [r3, #24]
 800aac8:	4b06      	ldr	r3, [pc, #24]	@ (800aae4 <USB_DevInit+0x2dc>)
 800aaca:	4313      	orrs	r3, r2
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aad0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3718      	adds	r7, #24
 800aad6:	46bd      	mov	sp, r7
 800aad8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aadc:	b004      	add	sp, #16
 800aade:	4770      	bx	lr
 800aae0:	803c3800 	.word	0x803c3800
 800aae4:	40000004 	.word	0x40000004

0800aae8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b085      	sub	sp, #20
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	3301      	adds	r3, #1
 800aafa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab02:	d901      	bls.n	800ab08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ab04:	2303      	movs	r3, #3
 800ab06:	e01b      	b.n	800ab40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	691b      	ldr	r3, [r3, #16]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	daf2      	bge.n	800aaf6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ab10:	2300      	movs	r3, #0
 800ab12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	019b      	lsls	r3, r3, #6
 800ab18:	f043 0220 	orr.w	r2, r3, #32
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	3301      	adds	r3, #1
 800ab24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab2c:	d901      	bls.n	800ab32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ab2e:	2303      	movs	r3, #3
 800ab30:	e006      	b.n	800ab40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	691b      	ldr	r3, [r3, #16]
 800ab36:	f003 0320 	and.w	r3, r3, #32
 800ab3a:	2b20      	cmp	r3, #32
 800ab3c:	d0f0      	beq.n	800ab20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ab3e:	2300      	movs	r3, #0
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3714      	adds	r7, #20
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr

0800ab4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b085      	sub	sp, #20
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab54:	2300      	movs	r3, #0
 800ab56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab64:	d901      	bls.n	800ab6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ab66:	2303      	movs	r3, #3
 800ab68:	e018      	b.n	800ab9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	691b      	ldr	r3, [r3, #16]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	daf2      	bge.n	800ab58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ab72:	2300      	movs	r3, #0
 800ab74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2210      	movs	r2, #16
 800ab7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	3301      	adds	r3, #1
 800ab80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab88:	d901      	bls.n	800ab8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ab8a:	2303      	movs	r3, #3
 800ab8c:	e006      	b.n	800ab9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	691b      	ldr	r3, [r3, #16]
 800ab92:	f003 0310 	and.w	r3, r3, #16
 800ab96:	2b10      	cmp	r3, #16
 800ab98:	d0f0      	beq.n	800ab7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ab9a:	2300      	movs	r3, #0
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3714      	adds	r7, #20
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b085      	sub	sp, #20
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	460b      	mov	r3, r1
 800abb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abbe:	681a      	ldr	r2, [r3, #0]
 800abc0:	78fb      	ldrb	r3, [r7, #3]
 800abc2:	68f9      	ldr	r1, [r7, #12]
 800abc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800abc8:	4313      	orrs	r3, r2
 800abca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800abcc:	2300      	movs	r3, #0
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3714      	adds	r7, #20
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr

0800abda <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800abda:	b480      	push	{r7}
 800abdc:	b087      	sub	sp, #28
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	f003 0306 	and.w	r3, r3, #6
 800abf2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d102      	bne.n	800ac00 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800abfa:	2300      	movs	r3, #0
 800abfc:	75fb      	strb	r3, [r7, #23]
 800abfe:	e00a      	b.n	800ac16 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2b02      	cmp	r3, #2
 800ac04:	d002      	beq.n	800ac0c <USB_GetDevSpeed+0x32>
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2b06      	cmp	r3, #6
 800ac0a:	d102      	bne.n	800ac12 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ac0c:	2302      	movs	r3, #2
 800ac0e:	75fb      	strb	r3, [r7, #23]
 800ac10:	e001      	b.n	800ac16 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ac12:	230f      	movs	r3, #15
 800ac14:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ac16:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	371c      	adds	r7, #28
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr

0800ac24 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b085      	sub	sp, #20
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	785b      	ldrb	r3, [r3, #1]
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d139      	bne.n	800acb4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac46:	69da      	ldr	r2, [r3, #28]
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	f003 030f 	and.w	r3, r3, #15
 800ac50:	2101      	movs	r1, #1
 800ac52:	fa01 f303 	lsl.w	r3, r1, r3
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	68f9      	ldr	r1, [r7, #12]
 800ac5a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	015a      	lsls	r2, r3, #5
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	4413      	add	r3, r2
 800ac6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d153      	bne.n	800ad20 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	015a      	lsls	r2, r3, #5
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	4413      	add	r3, r2
 800ac80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	689b      	ldr	r3, [r3, #8]
 800ac8a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	791b      	ldrb	r3, [r3, #4]
 800ac92:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ac94:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	059b      	lsls	r3, r3, #22
 800ac9a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ac9c:	431a      	orrs	r2, r3
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	0159      	lsls	r1, r3, #5
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	440b      	add	r3, r1
 800aca6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acaa:	4619      	mov	r1, r3
 800acac:	4b20      	ldr	r3, [pc, #128]	@ (800ad30 <USB_ActivateEndpoint+0x10c>)
 800acae:	4313      	orrs	r3, r2
 800acb0:	600b      	str	r3, [r1, #0]
 800acb2:	e035      	b.n	800ad20 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acba:	69da      	ldr	r2, [r3, #28]
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	f003 030f 	and.w	r3, r3, #15
 800acc4:	2101      	movs	r1, #1
 800acc6:	fa01 f303 	lsl.w	r3, r1, r3
 800acca:	041b      	lsls	r3, r3, #16
 800accc:	68f9      	ldr	r1, [r7, #12]
 800acce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800acd2:	4313      	orrs	r3, r2
 800acd4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	015a      	lsls	r2, r3, #5
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	4413      	add	r3, r2
 800acde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d119      	bne.n	800ad20 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	015a      	lsls	r2, r3, #5
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	4413      	add	r3, r2
 800acf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acf8:	681a      	ldr	r2, [r3, #0]
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	689b      	ldr	r3, [r3, #8]
 800acfe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	791b      	ldrb	r3, [r3, #4]
 800ad06:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ad08:	430b      	orrs	r3, r1
 800ad0a:	431a      	orrs	r2, r3
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	0159      	lsls	r1, r3, #5
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	440b      	add	r3, r1
 800ad14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad18:	4619      	mov	r1, r3
 800ad1a:	4b05      	ldr	r3, [pc, #20]	@ (800ad30 <USB_ActivateEndpoint+0x10c>)
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ad20:	2300      	movs	r3, #0
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3714      	adds	r7, #20
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr
 800ad2e:	bf00      	nop
 800ad30:	10008000 	.word	0x10008000

0800ad34 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b085      	sub	sp, #20
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	785b      	ldrb	r3, [r3, #1]
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d161      	bne.n	800ae14 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	015a      	lsls	r2, r3, #5
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	4413      	add	r3, r2
 800ad58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ad62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad66:	d11f      	bne.n	800ada8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	015a      	lsls	r2, r3, #5
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	4413      	add	r3, r2
 800ad70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	68ba      	ldr	r2, [r7, #8]
 800ad78:	0151      	lsls	r1, r2, #5
 800ad7a:	68fa      	ldr	r2, [r7, #12]
 800ad7c:	440a      	add	r2, r1
 800ad7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad82:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ad86:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	015a      	lsls	r2, r3, #5
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	4413      	add	r3, r2
 800ad90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	68ba      	ldr	r2, [r7, #8]
 800ad98:	0151      	lsls	r1, r2, #5
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	440a      	add	r2, r1
 800ad9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ada2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ada6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	f003 030f 	and.w	r3, r3, #15
 800adb8:	2101      	movs	r1, #1
 800adba:	fa01 f303 	lsl.w	r3, r1, r3
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	43db      	mvns	r3, r3
 800adc2:	68f9      	ldr	r1, [r7, #12]
 800adc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800adc8:	4013      	ands	r3, r2
 800adca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800add2:	69da      	ldr	r2, [r3, #28]
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	f003 030f 	and.w	r3, r3, #15
 800addc:	2101      	movs	r1, #1
 800adde:	fa01 f303 	lsl.w	r3, r1, r3
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	43db      	mvns	r3, r3
 800ade6:	68f9      	ldr	r1, [r7, #12]
 800ade8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800adec:	4013      	ands	r3, r2
 800adee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	015a      	lsls	r2, r3, #5
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	4413      	add	r3, r2
 800adf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	0159      	lsls	r1, r3, #5
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	440b      	add	r3, r1
 800ae06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	4b35      	ldr	r3, [pc, #212]	@ (800aee4 <USB_DeactivateEndpoint+0x1b0>)
 800ae0e:	4013      	ands	r3, r2
 800ae10:	600b      	str	r3, [r1, #0]
 800ae12:	e060      	b.n	800aed6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	015a      	lsls	r2, r3, #5
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	4413      	add	r3, r2
 800ae1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ae26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae2a:	d11f      	bne.n	800ae6c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	015a      	lsls	r2, r3, #5
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	4413      	add	r3, r2
 800ae34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	68ba      	ldr	r2, [r7, #8]
 800ae3c:	0151      	lsls	r1, r2, #5
 800ae3e:	68fa      	ldr	r2, [r7, #12]
 800ae40:	440a      	add	r2, r1
 800ae42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae46:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ae4a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	015a      	lsls	r2, r3, #5
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	4413      	add	r3, r2
 800ae54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	68ba      	ldr	r2, [r7, #8]
 800ae5c:	0151      	lsls	r1, r2, #5
 800ae5e:	68fa      	ldr	r2, [r7, #12]
 800ae60:	440a      	add	r2, r1
 800ae62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ae6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	f003 030f 	and.w	r3, r3, #15
 800ae7c:	2101      	movs	r1, #1
 800ae7e:	fa01 f303 	lsl.w	r3, r1, r3
 800ae82:	041b      	lsls	r3, r3, #16
 800ae84:	43db      	mvns	r3, r3
 800ae86:	68f9      	ldr	r1, [r7, #12]
 800ae88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ae8c:	4013      	ands	r3, r2
 800ae8e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae96:	69da      	ldr	r2, [r3, #28]
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	f003 030f 	and.w	r3, r3, #15
 800aea0:	2101      	movs	r1, #1
 800aea2:	fa01 f303 	lsl.w	r3, r1, r3
 800aea6:	041b      	lsls	r3, r3, #16
 800aea8:	43db      	mvns	r3, r3
 800aeaa:	68f9      	ldr	r1, [r7, #12]
 800aeac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aeb0:	4013      	ands	r3, r2
 800aeb2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	015a      	lsls	r2, r3, #5
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	4413      	add	r3, r2
 800aebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aec0:	681a      	ldr	r2, [r3, #0]
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	0159      	lsls	r1, r3, #5
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	440b      	add	r3, r1
 800aeca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aece:	4619      	mov	r1, r3
 800aed0:	4b05      	ldr	r3, [pc, #20]	@ (800aee8 <USB_DeactivateEndpoint+0x1b4>)
 800aed2:	4013      	ands	r3, r2
 800aed4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800aed6:	2300      	movs	r3, #0
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3714      	adds	r7, #20
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr
 800aee4:	ec337800 	.word	0xec337800
 800aee8:	eff37800 	.word	0xeff37800

0800aeec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b08a      	sub	sp, #40	@ 0x28
 800aef0:	af02      	add	r7, sp, #8
 800aef2:	60f8      	str	r0, [r7, #12]
 800aef4:	60b9      	str	r1, [r7, #8]
 800aef6:	4613      	mov	r3, r2
 800aef8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	785b      	ldrb	r3, [r3, #1]
 800af08:	2b01      	cmp	r3, #1
 800af0a:	f040 8181 	bne.w	800b210 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	691b      	ldr	r3, [r3, #16]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d132      	bne.n	800af7c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800af16:	69bb      	ldr	r3, [r7, #24]
 800af18:	015a      	lsls	r2, r3, #5
 800af1a:	69fb      	ldr	r3, [r7, #28]
 800af1c:	4413      	add	r3, r2
 800af1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af22:	691a      	ldr	r2, [r3, #16]
 800af24:	69bb      	ldr	r3, [r7, #24]
 800af26:	0159      	lsls	r1, r3, #5
 800af28:	69fb      	ldr	r3, [r7, #28]
 800af2a:	440b      	add	r3, r1
 800af2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af30:	4619      	mov	r1, r3
 800af32:	4ba5      	ldr	r3, [pc, #660]	@ (800b1c8 <USB_EPStartXfer+0x2dc>)
 800af34:	4013      	ands	r3, r2
 800af36:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800af38:	69bb      	ldr	r3, [r7, #24]
 800af3a:	015a      	lsls	r2, r3, #5
 800af3c:	69fb      	ldr	r3, [r7, #28]
 800af3e:	4413      	add	r3, r2
 800af40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af44:	691b      	ldr	r3, [r3, #16]
 800af46:	69ba      	ldr	r2, [r7, #24]
 800af48:	0151      	lsls	r1, r2, #5
 800af4a:	69fa      	ldr	r2, [r7, #28]
 800af4c:	440a      	add	r2, r1
 800af4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800af56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800af58:	69bb      	ldr	r3, [r7, #24]
 800af5a:	015a      	lsls	r2, r3, #5
 800af5c:	69fb      	ldr	r3, [r7, #28]
 800af5e:	4413      	add	r3, r2
 800af60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af64:	691a      	ldr	r2, [r3, #16]
 800af66:	69bb      	ldr	r3, [r7, #24]
 800af68:	0159      	lsls	r1, r3, #5
 800af6a:	69fb      	ldr	r3, [r7, #28]
 800af6c:	440b      	add	r3, r1
 800af6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af72:	4619      	mov	r1, r3
 800af74:	4b95      	ldr	r3, [pc, #596]	@ (800b1cc <USB_EPStartXfer+0x2e0>)
 800af76:	4013      	ands	r3, r2
 800af78:	610b      	str	r3, [r1, #16]
 800af7a:	e092      	b.n	800b0a2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800af7c:	69bb      	ldr	r3, [r7, #24]
 800af7e:	015a      	lsls	r2, r3, #5
 800af80:	69fb      	ldr	r3, [r7, #28]
 800af82:	4413      	add	r3, r2
 800af84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af88:	691a      	ldr	r2, [r3, #16]
 800af8a:	69bb      	ldr	r3, [r7, #24]
 800af8c:	0159      	lsls	r1, r3, #5
 800af8e:	69fb      	ldr	r3, [r7, #28]
 800af90:	440b      	add	r3, r1
 800af92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af96:	4619      	mov	r1, r3
 800af98:	4b8c      	ldr	r3, [pc, #560]	@ (800b1cc <USB_EPStartXfer+0x2e0>)
 800af9a:	4013      	ands	r3, r2
 800af9c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800af9e:	69bb      	ldr	r3, [r7, #24]
 800afa0:	015a      	lsls	r2, r3, #5
 800afa2:	69fb      	ldr	r3, [r7, #28]
 800afa4:	4413      	add	r3, r2
 800afa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afaa:	691a      	ldr	r2, [r3, #16]
 800afac:	69bb      	ldr	r3, [r7, #24]
 800afae:	0159      	lsls	r1, r3, #5
 800afb0:	69fb      	ldr	r3, [r7, #28]
 800afb2:	440b      	add	r3, r1
 800afb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afb8:	4619      	mov	r1, r3
 800afba:	4b83      	ldr	r3, [pc, #524]	@ (800b1c8 <USB_EPStartXfer+0x2dc>)
 800afbc:	4013      	ands	r3, r2
 800afbe:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800afc0:	69bb      	ldr	r3, [r7, #24]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d11a      	bne.n	800affc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	691a      	ldr	r2, [r3, #16]
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	689b      	ldr	r3, [r3, #8]
 800afce:	429a      	cmp	r2, r3
 800afd0:	d903      	bls.n	800afda <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	689a      	ldr	r2, [r3, #8]
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800afda:	69bb      	ldr	r3, [r7, #24]
 800afdc:	015a      	lsls	r2, r3, #5
 800afde:	69fb      	ldr	r3, [r7, #28]
 800afe0:	4413      	add	r3, r2
 800afe2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afe6:	691b      	ldr	r3, [r3, #16]
 800afe8:	69ba      	ldr	r2, [r7, #24]
 800afea:	0151      	lsls	r1, r2, #5
 800afec:	69fa      	ldr	r2, [r7, #28]
 800afee:	440a      	add	r2, r1
 800aff0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aff4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aff8:	6113      	str	r3, [r2, #16]
 800affa:	e01b      	b.n	800b034 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800affc:	69bb      	ldr	r3, [r7, #24]
 800affe:	015a      	lsls	r2, r3, #5
 800b000:	69fb      	ldr	r3, [r7, #28]
 800b002:	4413      	add	r3, r2
 800b004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b008:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	6919      	ldr	r1, [r3, #16]
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	689b      	ldr	r3, [r3, #8]
 800b012:	440b      	add	r3, r1
 800b014:	1e59      	subs	r1, r3, #1
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	689b      	ldr	r3, [r3, #8]
 800b01a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b01e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b020:	4b6b      	ldr	r3, [pc, #428]	@ (800b1d0 <USB_EPStartXfer+0x2e4>)
 800b022:	400b      	ands	r3, r1
 800b024:	69b9      	ldr	r1, [r7, #24]
 800b026:	0148      	lsls	r0, r1, #5
 800b028:	69f9      	ldr	r1, [r7, #28]
 800b02a:	4401      	add	r1, r0
 800b02c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b030:	4313      	orrs	r3, r2
 800b032:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b034:	69bb      	ldr	r3, [r7, #24]
 800b036:	015a      	lsls	r2, r3, #5
 800b038:	69fb      	ldr	r3, [r7, #28]
 800b03a:	4413      	add	r3, r2
 800b03c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b040:	691a      	ldr	r2, [r3, #16]
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	691b      	ldr	r3, [r3, #16]
 800b046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b04a:	69b9      	ldr	r1, [r7, #24]
 800b04c:	0148      	lsls	r0, r1, #5
 800b04e:	69f9      	ldr	r1, [r7, #28]
 800b050:	4401      	add	r1, r0
 800b052:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b056:	4313      	orrs	r3, r2
 800b058:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	791b      	ldrb	r3, [r3, #4]
 800b05e:	2b01      	cmp	r3, #1
 800b060:	d11f      	bne.n	800b0a2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b062:	69bb      	ldr	r3, [r7, #24]
 800b064:	015a      	lsls	r2, r3, #5
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	4413      	add	r3, r2
 800b06a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b06e:	691b      	ldr	r3, [r3, #16]
 800b070:	69ba      	ldr	r2, [r7, #24]
 800b072:	0151      	lsls	r1, r2, #5
 800b074:	69fa      	ldr	r2, [r7, #28]
 800b076:	440a      	add	r2, r1
 800b078:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b07c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800b080:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b082:	69bb      	ldr	r3, [r7, #24]
 800b084:	015a      	lsls	r2, r3, #5
 800b086:	69fb      	ldr	r3, [r7, #28]
 800b088:	4413      	add	r3, r2
 800b08a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b08e:	691b      	ldr	r3, [r3, #16]
 800b090:	69ba      	ldr	r2, [r7, #24]
 800b092:	0151      	lsls	r1, r2, #5
 800b094:	69fa      	ldr	r2, [r7, #28]
 800b096:	440a      	add	r2, r1
 800b098:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b09c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b0a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b0a2:	79fb      	ldrb	r3, [r7, #7]
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d14b      	bne.n	800b140 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	69db      	ldr	r3, [r3, #28]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d009      	beq.n	800b0c4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b0b0:	69bb      	ldr	r3, [r7, #24]
 800b0b2:	015a      	lsls	r2, r3, #5
 800b0b4:	69fb      	ldr	r3, [r7, #28]
 800b0b6:	4413      	add	r3, r2
 800b0b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0bc:	461a      	mov	r2, r3
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	69db      	ldr	r3, [r3, #28]
 800b0c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	791b      	ldrb	r3, [r3, #4]
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d128      	bne.n	800b11e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0d2:	689b      	ldr	r3, [r3, #8]
 800b0d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d110      	bne.n	800b0fe <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b0dc:	69bb      	ldr	r3, [r7, #24]
 800b0de:	015a      	lsls	r2, r3, #5
 800b0e0:	69fb      	ldr	r3, [r7, #28]
 800b0e2:	4413      	add	r3, r2
 800b0e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	69ba      	ldr	r2, [r7, #24]
 800b0ec:	0151      	lsls	r1, r2, #5
 800b0ee:	69fa      	ldr	r2, [r7, #28]
 800b0f0:	440a      	add	r2, r1
 800b0f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b0f6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b0fa:	6013      	str	r3, [r2, #0]
 800b0fc:	e00f      	b.n	800b11e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b0fe:	69bb      	ldr	r3, [r7, #24]
 800b100:	015a      	lsls	r2, r3, #5
 800b102:	69fb      	ldr	r3, [r7, #28]
 800b104:	4413      	add	r3, r2
 800b106:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	69ba      	ldr	r2, [r7, #24]
 800b10e:	0151      	lsls	r1, r2, #5
 800b110:	69fa      	ldr	r2, [r7, #28]
 800b112:	440a      	add	r2, r1
 800b114:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b11c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b11e:	69bb      	ldr	r3, [r7, #24]
 800b120:	015a      	lsls	r2, r3, #5
 800b122:	69fb      	ldr	r3, [r7, #28]
 800b124:	4413      	add	r3, r2
 800b126:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	69ba      	ldr	r2, [r7, #24]
 800b12e:	0151      	lsls	r1, r2, #5
 800b130:	69fa      	ldr	r2, [r7, #28]
 800b132:	440a      	add	r2, r1
 800b134:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b138:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b13c:	6013      	str	r3, [r2, #0]
 800b13e:	e16a      	b.n	800b416 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b140:	69bb      	ldr	r3, [r7, #24]
 800b142:	015a      	lsls	r2, r3, #5
 800b144:	69fb      	ldr	r3, [r7, #28]
 800b146:	4413      	add	r3, r2
 800b148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	69ba      	ldr	r2, [r7, #24]
 800b150:	0151      	lsls	r1, r2, #5
 800b152:	69fa      	ldr	r2, [r7, #28]
 800b154:	440a      	add	r2, r1
 800b156:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b15a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b15e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	791b      	ldrb	r3, [r3, #4]
 800b164:	2b01      	cmp	r3, #1
 800b166:	d015      	beq.n	800b194 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	691b      	ldr	r3, [r3, #16]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	f000 8152 	beq.w	800b416 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b172:	69fb      	ldr	r3, [r7, #28]
 800b174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b178:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	f003 030f 	and.w	r3, r3, #15
 800b182:	2101      	movs	r1, #1
 800b184:	fa01 f303 	lsl.w	r3, r1, r3
 800b188:	69f9      	ldr	r1, [r7, #28]
 800b18a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b18e:	4313      	orrs	r3, r2
 800b190:	634b      	str	r3, [r1, #52]	@ 0x34
 800b192:	e140      	b.n	800b416 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b194:	69fb      	ldr	r3, [r7, #28]
 800b196:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b19a:	689b      	ldr	r3, [r3, #8]
 800b19c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d117      	bne.n	800b1d4 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b1a4:	69bb      	ldr	r3, [r7, #24]
 800b1a6:	015a      	lsls	r2, r3, #5
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	4413      	add	r3, r2
 800b1ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	69ba      	ldr	r2, [r7, #24]
 800b1b4:	0151      	lsls	r1, r2, #5
 800b1b6:	69fa      	ldr	r2, [r7, #28]
 800b1b8:	440a      	add	r2, r1
 800b1ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1be:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b1c2:	6013      	str	r3, [r2, #0]
 800b1c4:	e016      	b.n	800b1f4 <USB_EPStartXfer+0x308>
 800b1c6:	bf00      	nop
 800b1c8:	e007ffff 	.word	0xe007ffff
 800b1cc:	fff80000 	.word	0xfff80000
 800b1d0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b1d4:	69bb      	ldr	r3, [r7, #24]
 800b1d6:	015a      	lsls	r2, r3, #5
 800b1d8:	69fb      	ldr	r3, [r7, #28]
 800b1da:	4413      	add	r3, r2
 800b1dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	69ba      	ldr	r2, [r7, #24]
 800b1e4:	0151      	lsls	r1, r2, #5
 800b1e6:	69fa      	ldr	r2, [r7, #28]
 800b1e8:	440a      	add	r2, r1
 800b1ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b1f2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	68d9      	ldr	r1, [r3, #12]
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	781a      	ldrb	r2, [r3, #0]
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	691b      	ldr	r3, [r3, #16]
 800b200:	b298      	uxth	r0, r3
 800b202:	79fb      	ldrb	r3, [r7, #7]
 800b204:	9300      	str	r3, [sp, #0]
 800b206:	4603      	mov	r3, r0
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	f000 f9b9 	bl	800b580 <USB_WritePacket>
 800b20e:	e102      	b.n	800b416 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	015a      	lsls	r2, r3, #5
 800b214:	69fb      	ldr	r3, [r7, #28]
 800b216:	4413      	add	r3, r2
 800b218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b21c:	691a      	ldr	r2, [r3, #16]
 800b21e:	69bb      	ldr	r3, [r7, #24]
 800b220:	0159      	lsls	r1, r3, #5
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	440b      	add	r3, r1
 800b226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b22a:	4619      	mov	r1, r3
 800b22c:	4b7c      	ldr	r3, [pc, #496]	@ (800b420 <USB_EPStartXfer+0x534>)
 800b22e:	4013      	ands	r3, r2
 800b230:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b232:	69bb      	ldr	r3, [r7, #24]
 800b234:	015a      	lsls	r2, r3, #5
 800b236:	69fb      	ldr	r3, [r7, #28]
 800b238:	4413      	add	r3, r2
 800b23a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b23e:	691a      	ldr	r2, [r3, #16]
 800b240:	69bb      	ldr	r3, [r7, #24]
 800b242:	0159      	lsls	r1, r3, #5
 800b244:	69fb      	ldr	r3, [r7, #28]
 800b246:	440b      	add	r3, r1
 800b248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b24c:	4619      	mov	r1, r3
 800b24e:	4b75      	ldr	r3, [pc, #468]	@ (800b424 <USB_EPStartXfer+0x538>)
 800b250:	4013      	ands	r3, r2
 800b252:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800b254:	69bb      	ldr	r3, [r7, #24]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d12f      	bne.n	800b2ba <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	691b      	ldr	r3, [r3, #16]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d003      	beq.n	800b26a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	689a      	ldr	r2, [r3, #8]
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	689a      	ldr	r2, [r3, #8]
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b272:	69bb      	ldr	r3, [r7, #24]
 800b274:	015a      	lsls	r2, r3, #5
 800b276:	69fb      	ldr	r3, [r7, #28]
 800b278:	4413      	add	r3, r2
 800b27a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b27e:	691a      	ldr	r2, [r3, #16]
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	6a1b      	ldr	r3, [r3, #32]
 800b284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b288:	69b9      	ldr	r1, [r7, #24]
 800b28a:	0148      	lsls	r0, r1, #5
 800b28c:	69f9      	ldr	r1, [r7, #28]
 800b28e:	4401      	add	r1, r0
 800b290:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b294:	4313      	orrs	r3, r2
 800b296:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b298:	69bb      	ldr	r3, [r7, #24]
 800b29a:	015a      	lsls	r2, r3, #5
 800b29c:	69fb      	ldr	r3, [r7, #28]
 800b29e:	4413      	add	r3, r2
 800b2a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2a4:	691b      	ldr	r3, [r3, #16]
 800b2a6:	69ba      	ldr	r2, [r7, #24]
 800b2a8:	0151      	lsls	r1, r2, #5
 800b2aa:	69fa      	ldr	r2, [r7, #28]
 800b2ac:	440a      	add	r2, r1
 800b2ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b2b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b2b6:	6113      	str	r3, [r2, #16]
 800b2b8:	e05f      	b.n	800b37a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	691b      	ldr	r3, [r3, #16]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d123      	bne.n	800b30a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	015a      	lsls	r2, r3, #5
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2ce:	691a      	ldr	r2, [r3, #16]
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	689b      	ldr	r3, [r3, #8]
 800b2d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2d8:	69b9      	ldr	r1, [r7, #24]
 800b2da:	0148      	lsls	r0, r1, #5
 800b2dc:	69f9      	ldr	r1, [r7, #28]
 800b2de:	4401      	add	r1, r0
 800b2e0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b2e4:	4313      	orrs	r3, r2
 800b2e6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	015a      	lsls	r2, r3, #5
 800b2ec:	69fb      	ldr	r3, [r7, #28]
 800b2ee:	4413      	add	r3, r2
 800b2f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2f4:	691b      	ldr	r3, [r3, #16]
 800b2f6:	69ba      	ldr	r2, [r7, #24]
 800b2f8:	0151      	lsls	r1, r2, #5
 800b2fa:	69fa      	ldr	r2, [r7, #28]
 800b2fc:	440a      	add	r2, r1
 800b2fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b302:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b306:	6113      	str	r3, [r2, #16]
 800b308:	e037      	b.n	800b37a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	691a      	ldr	r2, [r3, #16]
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	689b      	ldr	r3, [r3, #8]
 800b312:	4413      	add	r3, r2
 800b314:	1e5a      	subs	r2, r3, #1
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	689b      	ldr	r3, [r3, #8]
 800b31a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b31e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	8afa      	ldrh	r2, [r7, #22]
 800b326:	fb03 f202 	mul.w	r2, r3, r2
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b32e:	69bb      	ldr	r3, [r7, #24]
 800b330:	015a      	lsls	r2, r3, #5
 800b332:	69fb      	ldr	r3, [r7, #28]
 800b334:	4413      	add	r3, r2
 800b336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b33a:	691a      	ldr	r2, [r3, #16]
 800b33c:	8afb      	ldrh	r3, [r7, #22]
 800b33e:	04d9      	lsls	r1, r3, #19
 800b340:	4b39      	ldr	r3, [pc, #228]	@ (800b428 <USB_EPStartXfer+0x53c>)
 800b342:	400b      	ands	r3, r1
 800b344:	69b9      	ldr	r1, [r7, #24]
 800b346:	0148      	lsls	r0, r1, #5
 800b348:	69f9      	ldr	r1, [r7, #28]
 800b34a:	4401      	add	r1, r0
 800b34c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b350:	4313      	orrs	r3, r2
 800b352:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b354:	69bb      	ldr	r3, [r7, #24]
 800b356:	015a      	lsls	r2, r3, #5
 800b358:	69fb      	ldr	r3, [r7, #28]
 800b35a:	4413      	add	r3, r2
 800b35c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b360:	691a      	ldr	r2, [r3, #16]
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	6a1b      	ldr	r3, [r3, #32]
 800b366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b36a:	69b9      	ldr	r1, [r7, #24]
 800b36c:	0148      	lsls	r0, r1, #5
 800b36e:	69f9      	ldr	r1, [r7, #28]
 800b370:	4401      	add	r1, r0
 800b372:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b376:	4313      	orrs	r3, r2
 800b378:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b37a:	79fb      	ldrb	r3, [r7, #7]
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d10d      	bne.n	800b39c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	68db      	ldr	r3, [r3, #12]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d009      	beq.n	800b39c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	68d9      	ldr	r1, [r3, #12]
 800b38c:	69bb      	ldr	r3, [r7, #24]
 800b38e:	015a      	lsls	r2, r3, #5
 800b390:	69fb      	ldr	r3, [r7, #28]
 800b392:	4413      	add	r3, r2
 800b394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b398:	460a      	mov	r2, r1
 800b39a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	791b      	ldrb	r3, [r3, #4]
 800b3a0:	2b01      	cmp	r3, #1
 800b3a2:	d128      	bne.n	800b3f6 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b3a4:	69fb      	ldr	r3, [r7, #28]
 800b3a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3aa:	689b      	ldr	r3, [r3, #8]
 800b3ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d110      	bne.n	800b3d6 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b3b4:	69bb      	ldr	r3, [r7, #24]
 800b3b6:	015a      	lsls	r2, r3, #5
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	4413      	add	r3, r2
 800b3bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	69ba      	ldr	r2, [r7, #24]
 800b3c4:	0151      	lsls	r1, r2, #5
 800b3c6:	69fa      	ldr	r2, [r7, #28]
 800b3c8:	440a      	add	r2, r1
 800b3ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b3ce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b3d2:	6013      	str	r3, [r2, #0]
 800b3d4:	e00f      	b.n	800b3f6 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b3d6:	69bb      	ldr	r3, [r7, #24]
 800b3d8:	015a      	lsls	r2, r3, #5
 800b3da:	69fb      	ldr	r3, [r7, #28]
 800b3dc:	4413      	add	r3, r2
 800b3de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	69ba      	ldr	r2, [r7, #24]
 800b3e6:	0151      	lsls	r1, r2, #5
 800b3e8:	69fa      	ldr	r2, [r7, #28]
 800b3ea:	440a      	add	r2, r1
 800b3ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b3f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b3f4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b3f6:	69bb      	ldr	r3, [r7, #24]
 800b3f8:	015a      	lsls	r2, r3, #5
 800b3fa:	69fb      	ldr	r3, [r7, #28]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	69ba      	ldr	r2, [r7, #24]
 800b406:	0151      	lsls	r1, r2, #5
 800b408:	69fa      	ldr	r2, [r7, #28]
 800b40a:	440a      	add	r2, r1
 800b40c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b410:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b414:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b416:	2300      	movs	r3, #0
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3720      	adds	r7, #32
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}
 800b420:	fff80000 	.word	0xfff80000
 800b424:	e007ffff 	.word	0xe007ffff
 800b428:	1ff80000 	.word	0x1ff80000

0800b42c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b087      	sub	sp, #28
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b436:	2300      	movs	r3, #0
 800b438:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b43a:	2300      	movs	r3, #0
 800b43c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	785b      	ldrb	r3, [r3, #1]
 800b446:	2b01      	cmp	r3, #1
 800b448:	d14a      	bne.n	800b4e0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	015a      	lsls	r2, r3, #5
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	4413      	add	r3, r2
 800b454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b45e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b462:	f040 8086 	bne.w	800b572 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	015a      	lsls	r2, r3, #5
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	4413      	add	r3, r2
 800b470:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	683a      	ldr	r2, [r7, #0]
 800b478:	7812      	ldrb	r2, [r2, #0]
 800b47a:	0151      	lsls	r1, r2, #5
 800b47c:	693a      	ldr	r2, [r7, #16]
 800b47e:	440a      	add	r2, r1
 800b480:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b484:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b488:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	015a      	lsls	r2, r3, #5
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	4413      	add	r3, r2
 800b494:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	683a      	ldr	r2, [r7, #0]
 800b49c:	7812      	ldrb	r2, [r2, #0]
 800b49e:	0151      	lsls	r1, r2, #5
 800b4a0:	693a      	ldr	r2, [r7, #16]
 800b4a2:	440a      	add	r2, r1
 800b4a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b4ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d902      	bls.n	800b4c4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	75fb      	strb	r3, [r7, #23]
          break;
 800b4c2:	e056      	b.n	800b572 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	015a      	lsls	r2, r3, #5
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b4d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b4dc:	d0e7      	beq.n	800b4ae <USB_EPStopXfer+0x82>
 800b4de:	e048      	b.n	800b572 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	015a      	lsls	r2, r3, #5
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	4413      	add	r3, r2
 800b4ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b4f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b4f8:	d13b      	bne.n	800b572 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	015a      	lsls	r2, r3, #5
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	4413      	add	r3, r2
 800b504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	683a      	ldr	r2, [r7, #0]
 800b50c:	7812      	ldrb	r2, [r2, #0]
 800b50e:	0151      	lsls	r1, r2, #5
 800b510:	693a      	ldr	r2, [r7, #16]
 800b512:	440a      	add	r2, r1
 800b514:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b518:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b51c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	781b      	ldrb	r3, [r3, #0]
 800b522:	015a      	lsls	r2, r3, #5
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	4413      	add	r3, r2
 800b528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	683a      	ldr	r2, [r7, #0]
 800b530:	7812      	ldrb	r2, [r2, #0]
 800b532:	0151      	lsls	r1, r2, #5
 800b534:	693a      	ldr	r2, [r7, #16]
 800b536:	440a      	add	r2, r1
 800b538:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b53c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b540:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	3301      	adds	r3, #1
 800b546:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b54e:	4293      	cmp	r3, r2
 800b550:	d902      	bls.n	800b558 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b552:	2301      	movs	r3, #1
 800b554:	75fb      	strb	r3, [r7, #23]
          break;
 800b556:	e00c      	b.n	800b572 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	015a      	lsls	r2, r3, #5
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	4413      	add	r3, r2
 800b562:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b56c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b570:	d0e7      	beq.n	800b542 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b572:	7dfb      	ldrb	r3, [r7, #23]
}
 800b574:	4618      	mov	r0, r3
 800b576:	371c      	adds	r7, #28
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr

0800b580 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b580:	b480      	push	{r7}
 800b582:	b089      	sub	sp, #36	@ 0x24
 800b584:	af00      	add	r7, sp, #0
 800b586:	60f8      	str	r0, [r7, #12]
 800b588:	60b9      	str	r1, [r7, #8]
 800b58a:	4611      	mov	r1, r2
 800b58c:	461a      	mov	r2, r3
 800b58e:	460b      	mov	r3, r1
 800b590:	71fb      	strb	r3, [r7, #7]
 800b592:	4613      	mov	r3, r2
 800b594:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b59e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d123      	bne.n	800b5ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b5a6:	88bb      	ldrh	r3, [r7, #4]
 800b5a8:	3303      	adds	r3, #3
 800b5aa:	089b      	lsrs	r3, r3, #2
 800b5ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	61bb      	str	r3, [r7, #24]
 800b5b2:	e018      	b.n	800b5e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b5b4:	79fb      	ldrb	r3, [r7, #7]
 800b5b6:	031a      	lsls	r2, r3, #12
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	4413      	add	r3, r2
 800b5bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	69fb      	ldr	r3, [r7, #28]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b5c8:	69fb      	ldr	r3, [r7, #28]
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b5ce:	69fb      	ldr	r3, [r7, #28]
 800b5d0:	3301      	adds	r3, #1
 800b5d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b5d4:	69fb      	ldr	r3, [r7, #28]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b5da:	69fb      	ldr	r3, [r7, #28]
 800b5dc:	3301      	adds	r3, #1
 800b5de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b5e0:	69bb      	ldr	r3, [r7, #24]
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	61bb      	str	r3, [r7, #24]
 800b5e6:	69ba      	ldr	r2, [r7, #24]
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d3e2      	bcc.n	800b5b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b5ee:	2300      	movs	r3, #0
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3724      	adds	r7, #36	@ 0x24
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b08b      	sub	sp, #44	@ 0x2c
 800b600:	af00      	add	r7, sp, #0
 800b602:	60f8      	str	r0, [r7, #12]
 800b604:	60b9      	str	r1, [r7, #8]
 800b606:	4613      	mov	r3, r2
 800b608:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b612:	88fb      	ldrh	r3, [r7, #6]
 800b614:	089b      	lsrs	r3, r3, #2
 800b616:	b29b      	uxth	r3, r3
 800b618:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b61a:	88fb      	ldrh	r3, [r7, #6]
 800b61c:	f003 0303 	and.w	r3, r3, #3
 800b620:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b622:	2300      	movs	r3, #0
 800b624:	623b      	str	r3, [r7, #32]
 800b626:	e014      	b.n	800b652 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b628:	69bb      	ldr	r3, [r7, #24]
 800b62a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b632:	601a      	str	r2, [r3, #0]
    pDest++;
 800b634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b636:	3301      	adds	r3, #1
 800b638:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b63c:	3301      	adds	r3, #1
 800b63e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b642:	3301      	adds	r3, #1
 800b644:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b648:	3301      	adds	r3, #1
 800b64a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b64c:	6a3b      	ldr	r3, [r7, #32]
 800b64e:	3301      	adds	r3, #1
 800b650:	623b      	str	r3, [r7, #32]
 800b652:	6a3a      	ldr	r2, [r7, #32]
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	429a      	cmp	r2, r3
 800b658:	d3e6      	bcc.n	800b628 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b65a:	8bfb      	ldrh	r3, [r7, #30]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d01e      	beq.n	800b69e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b660:	2300      	movs	r3, #0
 800b662:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b664:	69bb      	ldr	r3, [r7, #24]
 800b666:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b66a:	461a      	mov	r2, r3
 800b66c:	f107 0310 	add.w	r3, r7, #16
 800b670:	6812      	ldr	r2, [r2, #0]
 800b672:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b674:	693a      	ldr	r2, [r7, #16]
 800b676:	6a3b      	ldr	r3, [r7, #32]
 800b678:	b2db      	uxtb	r3, r3
 800b67a:	00db      	lsls	r3, r3, #3
 800b67c:	fa22 f303 	lsr.w	r3, r2, r3
 800b680:	b2da      	uxtb	r2, r3
 800b682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b684:	701a      	strb	r2, [r3, #0]
      i++;
 800b686:	6a3b      	ldr	r3, [r7, #32]
 800b688:	3301      	adds	r3, #1
 800b68a:	623b      	str	r3, [r7, #32]
      pDest++;
 800b68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b68e:	3301      	adds	r3, #1
 800b690:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b692:	8bfb      	ldrh	r3, [r7, #30]
 800b694:	3b01      	subs	r3, #1
 800b696:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b698:	8bfb      	ldrh	r3, [r7, #30]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d1ea      	bne.n	800b674 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b69e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	372c      	adds	r7, #44	@ 0x2c
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b085      	sub	sp, #20
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	785b      	ldrb	r3, [r3, #1]
 800b6c4:	2b01      	cmp	r3, #1
 800b6c6:	d12c      	bne.n	800b722 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	015a      	lsls	r2, r3, #5
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	4413      	add	r3, r2
 800b6d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	db12      	blt.n	800b700 <USB_EPSetStall+0x54>
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d00f      	beq.n	800b700 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	015a      	lsls	r2, r3, #5
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	4413      	add	r3, r2
 800b6e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	68ba      	ldr	r2, [r7, #8]
 800b6f0:	0151      	lsls	r1, r2, #5
 800b6f2:	68fa      	ldr	r2, [r7, #12]
 800b6f4:	440a      	add	r2, r1
 800b6f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b6fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b6fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	015a      	lsls	r2, r3, #5
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	4413      	add	r3, r2
 800b708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	68ba      	ldr	r2, [r7, #8]
 800b710:	0151      	lsls	r1, r2, #5
 800b712:	68fa      	ldr	r2, [r7, #12]
 800b714:	440a      	add	r2, r1
 800b716:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b71a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b71e:	6013      	str	r3, [r2, #0]
 800b720:	e02b      	b.n	800b77a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	015a      	lsls	r2, r3, #5
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	4413      	add	r3, r2
 800b72a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	2b00      	cmp	r3, #0
 800b732:	db12      	blt.n	800b75a <USB_EPSetStall+0xae>
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d00f      	beq.n	800b75a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	015a      	lsls	r2, r3, #5
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	4413      	add	r3, r2
 800b742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	68ba      	ldr	r2, [r7, #8]
 800b74a:	0151      	lsls	r1, r2, #5
 800b74c:	68fa      	ldr	r2, [r7, #12]
 800b74e:	440a      	add	r2, r1
 800b750:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b754:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b758:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	015a      	lsls	r2, r3, #5
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	4413      	add	r3, r2
 800b762:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	68ba      	ldr	r2, [r7, #8]
 800b76a:	0151      	lsls	r1, r2, #5
 800b76c:	68fa      	ldr	r2, [r7, #12]
 800b76e:	440a      	add	r2, r1
 800b770:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b774:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b778:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b77a:	2300      	movs	r3, #0
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3714      	adds	r7, #20
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr

0800b788 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b788:	b480      	push	{r7}
 800b78a:	b085      	sub	sp, #20
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	785b      	ldrb	r3, [r3, #1]
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d128      	bne.n	800b7f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	015a      	lsls	r2, r3, #5
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	4413      	add	r3, r2
 800b7ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	68ba      	ldr	r2, [r7, #8]
 800b7b4:	0151      	lsls	r1, r2, #5
 800b7b6:	68fa      	ldr	r2, [r7, #12]
 800b7b8:	440a      	add	r2, r1
 800b7ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b7be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b7c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	791b      	ldrb	r3, [r3, #4]
 800b7c8:	2b03      	cmp	r3, #3
 800b7ca:	d003      	beq.n	800b7d4 <USB_EPClearStall+0x4c>
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	791b      	ldrb	r3, [r3, #4]
 800b7d0:	2b02      	cmp	r3, #2
 800b7d2:	d138      	bne.n	800b846 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	015a      	lsls	r2, r3, #5
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	4413      	add	r3, r2
 800b7dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	68ba      	ldr	r2, [r7, #8]
 800b7e4:	0151      	lsls	r1, r2, #5
 800b7e6:	68fa      	ldr	r2, [r7, #12]
 800b7e8:	440a      	add	r2, r1
 800b7ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b7ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b7f2:	6013      	str	r3, [r2, #0]
 800b7f4:	e027      	b.n	800b846 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	015a      	lsls	r2, r3, #5
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	4413      	add	r3, r2
 800b7fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	68ba      	ldr	r2, [r7, #8]
 800b806:	0151      	lsls	r1, r2, #5
 800b808:	68fa      	ldr	r2, [r7, #12]
 800b80a:	440a      	add	r2, r1
 800b80c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b810:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b814:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	791b      	ldrb	r3, [r3, #4]
 800b81a:	2b03      	cmp	r3, #3
 800b81c:	d003      	beq.n	800b826 <USB_EPClearStall+0x9e>
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	791b      	ldrb	r3, [r3, #4]
 800b822:	2b02      	cmp	r3, #2
 800b824:	d10f      	bne.n	800b846 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	015a      	lsls	r2, r3, #5
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	4413      	add	r3, r2
 800b82e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	68ba      	ldr	r2, [r7, #8]
 800b836:	0151      	lsls	r1, r2, #5
 800b838:	68fa      	ldr	r2, [r7, #12]
 800b83a:	440a      	add	r2, r1
 800b83c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b840:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b844:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b846:	2300      	movs	r3, #0
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3714      	adds	r7, #20
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr

0800b854 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b854:	b480      	push	{r7}
 800b856:	b085      	sub	sp, #20
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	460b      	mov	r3, r1
 800b85e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	68fa      	ldr	r2, [r7, #12]
 800b86e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b872:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b876:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b87e:	681a      	ldr	r2, [r3, #0]
 800b880:	78fb      	ldrb	r3, [r7, #3]
 800b882:	011b      	lsls	r3, r3, #4
 800b884:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b888:	68f9      	ldr	r1, [r7, #12]
 800b88a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b88e:	4313      	orrs	r3, r2
 800b890:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b892:	2300      	movs	r3, #0
}
 800b894:	4618      	mov	r0, r3
 800b896:	3714      	adds	r7, #20
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr

0800b8a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b085      	sub	sp, #20
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	68fa      	ldr	r2, [r7, #12]
 800b8b6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b8ba:	f023 0303 	bic.w	r3, r3, #3
 800b8be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	68fa      	ldr	r2, [r7, #12]
 800b8ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b8ce:	f023 0302 	bic.w	r3, r3, #2
 800b8d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b8d4:	2300      	movs	r3, #0
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3714      	adds	r7, #20
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e0:	4770      	bx	lr

0800b8e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b8e2:	b480      	push	{r7}
 800b8e4:	b085      	sub	sp, #20
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	68fa      	ldr	r2, [r7, #12]
 800b8f8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b8fc:	f023 0303 	bic.w	r3, r3, #3
 800b900:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	68fa      	ldr	r2, [r7, #12]
 800b90c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b910:	f043 0302 	orr.w	r3, r3, #2
 800b914:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b916:	2300      	movs	r3, #0
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3714      	adds	r7, #20
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr

0800b924 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b924:	b480      	push	{r7}
 800b926:	b085      	sub	sp, #20
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	695b      	ldr	r3, [r3, #20]
 800b930:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	699b      	ldr	r3, [r3, #24]
 800b936:	68fa      	ldr	r2, [r7, #12]
 800b938:	4013      	ands	r3, r2
 800b93a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b93c:	68fb      	ldr	r3, [r7, #12]
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3714      	adds	r7, #20
 800b942:	46bd      	mov	sp, r7
 800b944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b948:	4770      	bx	lr

0800b94a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b94a:	b480      	push	{r7}
 800b94c:	b085      	sub	sp, #20
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b95c:	699b      	ldr	r3, [r3, #24]
 800b95e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b966:	69db      	ldr	r3, [r3, #28]
 800b968:	68ba      	ldr	r2, [r7, #8]
 800b96a:	4013      	ands	r3, r2
 800b96c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	0c1b      	lsrs	r3, r3, #16
}
 800b972:	4618      	mov	r0, r3
 800b974:	3714      	adds	r7, #20
 800b976:	46bd      	mov	sp, r7
 800b978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97c:	4770      	bx	lr

0800b97e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b97e:	b480      	push	{r7}
 800b980:	b085      	sub	sp, #20
 800b982:	af00      	add	r7, sp, #0
 800b984:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b990:	699b      	ldr	r3, [r3, #24]
 800b992:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b99a:	69db      	ldr	r3, [r3, #28]
 800b99c:	68ba      	ldr	r2, [r7, #8]
 800b99e:	4013      	ands	r3, r2
 800b9a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	b29b      	uxth	r3, r3
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3714      	adds	r7, #20
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr

0800b9b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b9b2:	b480      	push	{r7}
 800b9b4:	b085      	sub	sp, #20
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b9c2:	78fb      	ldrb	r3, [r7, #3]
 800b9c4:	015a      	lsls	r2, r3, #5
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	4413      	add	r3, r2
 800b9ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9ce:	689b      	ldr	r3, [r3, #8]
 800b9d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9d8:	695b      	ldr	r3, [r3, #20]
 800b9da:	68ba      	ldr	r2, [r7, #8]
 800b9dc:	4013      	ands	r3, r2
 800b9de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b9e0:	68bb      	ldr	r3, [r7, #8]
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3714      	adds	r7, #20
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ec:	4770      	bx	lr

0800b9ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b9ee:	b480      	push	{r7}
 800b9f0:	b087      	sub	sp, #28
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba04:	691b      	ldr	r3, [r3, #16]
 800ba06:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba10:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ba12:	78fb      	ldrb	r3, [r7, #3]
 800ba14:	f003 030f 	and.w	r3, r3, #15
 800ba18:	68fa      	ldr	r2, [r7, #12]
 800ba1a:	fa22 f303 	lsr.w	r3, r2, r3
 800ba1e:	01db      	lsls	r3, r3, #7
 800ba20:	b2db      	uxtb	r3, r3
 800ba22:	693a      	ldr	r2, [r7, #16]
 800ba24:	4313      	orrs	r3, r2
 800ba26:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ba28:	78fb      	ldrb	r3, [r7, #3]
 800ba2a:	015a      	lsls	r2, r3, #5
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	4413      	add	r3, r2
 800ba30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba34:	689b      	ldr	r3, [r3, #8]
 800ba36:	693a      	ldr	r2, [r7, #16]
 800ba38:	4013      	ands	r3, r2
 800ba3a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ba3c:	68bb      	ldr	r3, [r7, #8]
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	371c      	adds	r7, #28
 800ba42:	46bd      	mov	sp, r7
 800ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba48:	4770      	bx	lr

0800ba4a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ba4a:	b480      	push	{r7}
 800ba4c:	b083      	sub	sp, #12
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	695b      	ldr	r3, [r3, #20]
 800ba56:	f003 0301 	and.w	r3, r3, #1
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	370c      	adds	r7, #12
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba64:	4770      	bx	lr
	...

0800ba68 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba7a:	681a      	ldr	r2, [r3, #0]
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba82:	4619      	mov	r1, r3
 800ba84:	4b09      	ldr	r3, [pc, #36]	@ (800baac <USB_ActivateSetup+0x44>)
 800ba86:	4013      	ands	r3, r2
 800ba88:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba90:	685b      	ldr	r3, [r3, #4]
 800ba92:	68fa      	ldr	r2, [r7, #12]
 800ba94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ba98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ba9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ba9e:	2300      	movs	r3, #0
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3714      	adds	r7, #20
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr
 800baac:	fffff800 	.word	0xfffff800

0800bab0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b087      	sub	sp, #28
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	60f8      	str	r0, [r7, #12]
 800bab8:	460b      	mov	r3, r1
 800baba:	607a      	str	r2, [r7, #4]
 800babc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	333c      	adds	r3, #60	@ 0x3c
 800bac6:	3304      	adds	r3, #4
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	4a26      	ldr	r2, [pc, #152]	@ (800bb68 <USB_EP0_OutStart+0xb8>)
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d90a      	bls.n	800baea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bae0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bae4:	d101      	bne.n	800baea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bae6:	2300      	movs	r3, #0
 800bae8:	e037      	b.n	800bb5a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800baf0:	461a      	mov	r2, r3
 800baf2:	2300      	movs	r3, #0
 800baf4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bafc:	691b      	ldr	r3, [r3, #16]
 800bafe:	697a      	ldr	r2, [r7, #20]
 800bb00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bb08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb10:	691b      	ldr	r3, [r3, #16]
 800bb12:	697a      	ldr	r2, [r7, #20]
 800bb14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb18:	f043 0318 	orr.w	r3, r3, #24
 800bb1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb24:	691b      	ldr	r3, [r3, #16]
 800bb26:	697a      	ldr	r2, [r7, #20]
 800bb28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb2c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800bb30:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bb32:	7afb      	ldrb	r3, [r7, #11]
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	d10f      	bne.n	800bb58 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb3e:	461a      	mov	r2, r3
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	697a      	ldr	r2, [r7, #20]
 800bb4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb52:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800bb56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bb58:	2300      	movs	r3, #0
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	371c      	adds	r7, #28
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr
 800bb66:	bf00      	nop
 800bb68:	4f54300a 	.word	0x4f54300a

0800bb6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b085      	sub	sp, #20
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bb74:	2300      	movs	r3, #0
 800bb76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bb84:	d901      	bls.n	800bb8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bb86:	2303      	movs	r3, #3
 800bb88:	e01b      	b.n	800bbc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	691b      	ldr	r3, [r3, #16]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	daf2      	bge.n	800bb78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bb92:	2300      	movs	r3, #0
 800bb94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	691b      	ldr	r3, [r3, #16]
 800bb9a:	f043 0201 	orr.w	r2, r3, #1
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	3301      	adds	r3, #1
 800bba6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bbae:	d901      	bls.n	800bbb4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bbb0:	2303      	movs	r3, #3
 800bbb2:	e006      	b.n	800bbc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	691b      	ldr	r3, [r3, #16]
 800bbb8:	f003 0301 	and.w	r3, r3, #1
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d0f0      	beq.n	800bba2 <USB_CoreReset+0x36>

  return HAL_OK;
 800bbc0:	2300      	movs	r3, #0
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3714      	adds	r7, #20
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbcc:	4770      	bx	lr
	...

0800bbd0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bbd4:	4904      	ldr	r1, [pc, #16]	@ (800bbe8 <MX_FATFS_Init+0x18>)
 800bbd6:	4805      	ldr	r0, [pc, #20]	@ (800bbec <MX_FATFS_Init+0x1c>)
 800bbd8:	f002 f9e0 	bl	800df9c <FATFS_LinkDriver>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	461a      	mov	r2, r3
 800bbe0:	4b03      	ldr	r3, [pc, #12]	@ (800bbf0 <MX_FATFS_Init+0x20>)
 800bbe2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bbe4:	bf00      	nop
 800bbe6:	bd80      	pop	{r7, pc}
 800bbe8:	20000b74 	.word	0x20000b74
 800bbec:	0801184c 	.word	0x0801184c
 800bbf0:	20000b70 	.word	0x20000b70

0800bbf4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bbfe:	f000 f879 	bl	800bcf4 <BSP_SD_IsDetected>
 800bc02:	4603      	mov	r3, r0
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d001      	beq.n	800bc0c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bc08:	2302      	movs	r3, #2
 800bc0a:	e012      	b.n	800bc32 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bc0c:	480b      	ldr	r0, [pc, #44]	@ (800bc3c <BSP_SD_Init+0x48>)
 800bc0e:	f7fa fddb 	bl	80067c8 <HAL_SD_Init>
 800bc12:	4603      	mov	r3, r0
 800bc14:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bc16:	79fb      	ldrb	r3, [r7, #7]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d109      	bne.n	800bc30 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bc1c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800bc20:	4806      	ldr	r0, [pc, #24]	@ (800bc3c <BSP_SD_Init+0x48>)
 800bc22:	f7fb fbbd 	bl	80073a0 <HAL_SD_ConfigWideBusOperation>
 800bc26:	4603      	mov	r3, r0
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d001      	beq.n	800bc30 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bc30:	79fb      	ldrb	r3, [r7, #7]
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3708      	adds	r7, #8
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	200003f0 	.word	0x200003f0

0800bc40 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b088      	sub	sp, #32
 800bc44:	af02      	add	r7, sp, #8
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	60b9      	str	r1, [r7, #8]
 800bc4a:	607a      	str	r2, [r7, #4]
 800bc4c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	9300      	str	r3, [sp, #0]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	68ba      	ldr	r2, [r7, #8]
 800bc5a:	68f9      	ldr	r1, [r7, #12]
 800bc5c:	4806      	ldr	r0, [pc, #24]	@ (800bc78 <BSP_SD_ReadBlocks+0x38>)
 800bc5e:	f7fa fe6b 	bl	8006938 <HAL_SD_ReadBlocks>
 800bc62:	4603      	mov	r3, r0
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d001      	beq.n	800bc6c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bc6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3718      	adds	r7, #24
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	200003f0 	.word	0x200003f0

0800bc7c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b088      	sub	sp, #32
 800bc80:	af02      	add	r7, sp, #8
 800bc82:	60f8      	str	r0, [r7, #12]
 800bc84:	60b9      	str	r1, [r7, #8]
 800bc86:	607a      	str	r2, [r7, #4]
 800bc88:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	9300      	str	r3, [sp, #0]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	68ba      	ldr	r2, [r7, #8]
 800bc96:	68f9      	ldr	r1, [r7, #12]
 800bc98:	4806      	ldr	r0, [pc, #24]	@ (800bcb4 <BSP_SD_WriteBlocks+0x38>)
 800bc9a:	f7fb f82b 	bl	8006cf4 <HAL_SD_WriteBlocks>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d001      	beq.n	800bca8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800bca4:	2301      	movs	r3, #1
 800bca6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bca8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3718      	adds	r7, #24
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
 800bcb2:	bf00      	nop
 800bcb4:	200003f0 	.word	0x200003f0

0800bcb8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bcbc:	4805      	ldr	r0, [pc, #20]	@ (800bcd4 <BSP_SD_GetCardState+0x1c>)
 800bcbe:	f7fb fc09 	bl	80074d4 <HAL_SD_GetCardState>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	2b04      	cmp	r3, #4
 800bcc6:	bf14      	ite	ne
 800bcc8:	2301      	movne	r3, #1
 800bcca:	2300      	moveq	r3, #0
 800bccc:	b2db      	uxtb	r3, r3
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	200003f0 	.word	0x200003f0

0800bcd8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b082      	sub	sp, #8
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800bce0:	6879      	ldr	r1, [r7, #4]
 800bce2:	4803      	ldr	r0, [pc, #12]	@ (800bcf0 <BSP_SD_GetCardInfo+0x18>)
 800bce4:	f7fb fb30 	bl	8007348 <HAL_SD_GetCardInfo>
}
 800bce8:	bf00      	nop
 800bcea:	3708      	adds	r7, #8
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}
 800bcf0:	200003f0 	.word	0x200003f0

0800bcf4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b082      	sub	sp, #8
 800bcf8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800bcfe:	f000 f80b 	bl	800bd18 <BSP_PlatformIsDetected>
 800bd02:	4603      	mov	r3, r0
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d101      	bne.n	800bd0c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bd08:	2300      	movs	r3, #0
 800bd0a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bd0c:	79fb      	ldrb	r3, [r7, #7]
 800bd0e:	b2db      	uxtb	r3, r3
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3708      	adds	r7, #8
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bd22:	2110      	movs	r1, #16
 800bd24:	4806      	ldr	r0, [pc, #24]	@ (800bd40 <BSP_PlatformIsDetected+0x28>)
 800bd26:	f7f8 f8d1 	bl	8003ecc <HAL_GPIO_ReadPin>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d001      	beq.n	800bd34 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800bd30:	2300      	movs	r3, #0
 800bd32:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800bd34:	79fb      	ldrb	r3, [r7, #7]
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3708      	adds	r7, #8
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	40020000 	.word	0x40020000

0800bd44 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bd4e:	4b0b      	ldr	r3, [pc, #44]	@ (800bd7c <SD_CheckStatus+0x38>)
 800bd50:	2201      	movs	r2, #1
 800bd52:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800bd54:	f7ff ffb0 	bl	800bcb8 <BSP_SD_GetCardState>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d107      	bne.n	800bd6e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bd5e:	4b07      	ldr	r3, [pc, #28]	@ (800bd7c <SD_CheckStatus+0x38>)
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	b2db      	uxtb	r3, r3
 800bd64:	f023 0301 	bic.w	r3, r3, #1
 800bd68:	b2da      	uxtb	r2, r3
 800bd6a:	4b04      	ldr	r3, [pc, #16]	@ (800bd7c <SD_CheckStatus+0x38>)
 800bd6c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bd6e:	4b03      	ldr	r3, [pc, #12]	@ (800bd7c <SD_CheckStatus+0x38>)
 800bd70:	781b      	ldrb	r3, [r3, #0]
 800bd72:	b2db      	uxtb	r3, r3
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3708      	adds	r7, #8
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}
 800bd7c:	20000009 	.word	0x20000009

0800bd80 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	4603      	mov	r3, r0
 800bd88:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800bd8a:	4b0b      	ldr	r3, [pc, #44]	@ (800bdb8 <SD_initialize+0x38>)
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800bd90:	f7ff ff30 	bl	800bbf4 <BSP_SD_Init>
 800bd94:	4603      	mov	r3, r0
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d107      	bne.n	800bdaa <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800bd9a:	79fb      	ldrb	r3, [r7, #7]
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f7ff ffd1 	bl	800bd44 <SD_CheckStatus>
 800bda2:	4603      	mov	r3, r0
 800bda4:	461a      	mov	r2, r3
 800bda6:	4b04      	ldr	r3, [pc, #16]	@ (800bdb8 <SD_initialize+0x38>)
 800bda8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800bdaa:	4b03      	ldr	r3, [pc, #12]	@ (800bdb8 <SD_initialize+0x38>)
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	b2db      	uxtb	r3, r3
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3708      	adds	r7, #8
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}
 800bdb8:	20000009 	.word	0x20000009

0800bdbc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b082      	sub	sp, #8
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bdc6:	79fb      	ldrb	r3, [r7, #7]
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7ff ffbb 	bl	800bd44 <SD_CheckStatus>
 800bdce:	4603      	mov	r3, r0
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3708      	adds	r7, #8
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b086      	sub	sp, #24
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	60b9      	str	r1, [r7, #8]
 800bde0:	607a      	str	r2, [r7, #4]
 800bde2:	603b      	str	r3, [r7, #0]
 800bde4:	4603      	mov	r3, r0
 800bde6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bde8:	2301      	movs	r3, #1
 800bdea:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800bdec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bdf0:	683a      	ldr	r2, [r7, #0]
 800bdf2:	6879      	ldr	r1, [r7, #4]
 800bdf4:	68b8      	ldr	r0, [r7, #8]
 800bdf6:	f7ff ff23 	bl	800bc40 <BSP_SD_ReadBlocks>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d107      	bne.n	800be10 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800be00:	bf00      	nop
 800be02:	f7ff ff59 	bl	800bcb8 <BSP_SD_GetCardState>
 800be06:	4603      	mov	r3, r0
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d1fa      	bne.n	800be02 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800be0c:	2300      	movs	r3, #0
 800be0e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800be10:	7dfb      	ldrb	r3, [r7, #23]
}
 800be12:	4618      	mov	r0, r3
 800be14:	3718      	adds	r7, #24
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}

0800be1a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800be1a:	b580      	push	{r7, lr}
 800be1c:	b086      	sub	sp, #24
 800be1e:	af00      	add	r7, sp, #0
 800be20:	60b9      	str	r1, [r7, #8]
 800be22:	607a      	str	r2, [r7, #4]
 800be24:	603b      	str	r3, [r7, #0]
 800be26:	4603      	mov	r3, r0
 800be28:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800be2a:	2301      	movs	r3, #1
 800be2c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800be2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800be32:	683a      	ldr	r2, [r7, #0]
 800be34:	6879      	ldr	r1, [r7, #4]
 800be36:	68b8      	ldr	r0, [r7, #8]
 800be38:	f7ff ff20 	bl	800bc7c <BSP_SD_WriteBlocks>
 800be3c:	4603      	mov	r3, r0
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d107      	bne.n	800be52 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800be42:	bf00      	nop
 800be44:	f7ff ff38 	bl	800bcb8 <BSP_SD_GetCardState>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d1fa      	bne.n	800be44 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800be4e:	2300      	movs	r3, #0
 800be50:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800be52:	7dfb      	ldrb	r3, [r7, #23]
}
 800be54:	4618      	mov	r0, r3
 800be56:	3718      	adds	r7, #24
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}

0800be5c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b08c      	sub	sp, #48	@ 0x30
 800be60:	af00      	add	r7, sp, #0
 800be62:	4603      	mov	r3, r0
 800be64:	603a      	str	r2, [r7, #0]
 800be66:	71fb      	strb	r3, [r7, #7]
 800be68:	460b      	mov	r3, r1
 800be6a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800be6c:	2301      	movs	r3, #1
 800be6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800be72:	4b25      	ldr	r3, [pc, #148]	@ (800bf08 <SD_ioctl+0xac>)
 800be74:	781b      	ldrb	r3, [r3, #0]
 800be76:	b2db      	uxtb	r3, r3
 800be78:	f003 0301 	and.w	r3, r3, #1
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d001      	beq.n	800be84 <SD_ioctl+0x28>
 800be80:	2303      	movs	r3, #3
 800be82:	e03c      	b.n	800befe <SD_ioctl+0xa2>

  switch (cmd)
 800be84:	79bb      	ldrb	r3, [r7, #6]
 800be86:	2b03      	cmp	r3, #3
 800be88:	d834      	bhi.n	800bef4 <SD_ioctl+0x98>
 800be8a:	a201      	add	r2, pc, #4	@ (adr r2, 800be90 <SD_ioctl+0x34>)
 800be8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be90:	0800bea1 	.word	0x0800bea1
 800be94:	0800bea9 	.word	0x0800bea9
 800be98:	0800bec1 	.word	0x0800bec1
 800be9c:	0800bedb 	.word	0x0800bedb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bea0:	2300      	movs	r3, #0
 800bea2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800bea6:	e028      	b.n	800befa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bea8:	f107 030c 	add.w	r3, r7, #12
 800beac:	4618      	mov	r0, r3
 800beae:	f7ff ff13 	bl	800bcd8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800beb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800beb8:	2300      	movs	r3, #0
 800beba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800bebe:	e01c      	b.n	800befa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bec0:	f107 030c 	add.w	r3, r7, #12
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7ff ff07 	bl	800bcd8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800beca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800becc:	b29a      	uxth	r2, r3
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bed2:	2300      	movs	r3, #0
 800bed4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800bed8:	e00f      	b.n	800befa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800beda:	f107 030c 	add.w	r3, r7, #12
 800bede:	4618      	mov	r0, r3
 800bee0:	f7ff fefa 	bl	800bcd8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bee6:	0a5a      	lsrs	r2, r3, #9
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800beec:	2300      	movs	r3, #0
 800beee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800bef2:	e002      	b.n	800befa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bef4:	2304      	movs	r3, #4
 800bef6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800befa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3730      	adds	r7, #48	@ 0x30
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
 800bf06:	bf00      	nop
 800bf08:	20000009 	.word	0x20000009

0800bf0c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b084      	sub	sp, #16
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	460b      	mov	r3, r1
 800bf16:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bf18:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800bf1c:	f002 fdd8 	bl	800ead0 <malloc>
 800bf20:	4603      	mov	r3, r0
 800bf22:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d109      	bne.n	800bf3e <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	32b0      	adds	r2, #176	@ 0xb0
 800bf34:	2100      	movs	r1, #0
 800bf36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bf3a:	2302      	movs	r3, #2
 800bf3c:	e0d4      	b.n	800c0e8 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bf3e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800bf42:	2100      	movs	r1, #0
 800bf44:	68f8      	ldr	r0, [r7, #12]
 800bf46:	f003 fc12 	bl	800f76e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	32b0      	adds	r2, #176	@ 0xb0
 800bf54:	68f9      	ldr	r1, [r7, #12]
 800bf56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	32b0      	adds	r2, #176	@ 0xb0
 800bf64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	7c1b      	ldrb	r3, [r3, #16]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d138      	bne.n	800bfe8 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bf76:	4b5e      	ldr	r3, [pc, #376]	@ (800c0f0 <USBD_CDC_Init+0x1e4>)
 800bf78:	7819      	ldrb	r1, [r3, #0]
 800bf7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bf7e:	2202      	movs	r2, #2
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f002 fc02 	bl	800e78a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bf86:	4b5a      	ldr	r3, [pc, #360]	@ (800c0f0 <USBD_CDC_Init+0x1e4>)
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	f003 020f 	and.w	r2, r3, #15
 800bf8e:	6879      	ldr	r1, [r7, #4]
 800bf90:	4613      	mov	r3, r2
 800bf92:	009b      	lsls	r3, r3, #2
 800bf94:	4413      	add	r3, r2
 800bf96:	009b      	lsls	r3, r3, #2
 800bf98:	440b      	add	r3, r1
 800bf9a:	3324      	adds	r3, #36	@ 0x24
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bfa0:	4b54      	ldr	r3, [pc, #336]	@ (800c0f4 <USBD_CDC_Init+0x1e8>)
 800bfa2:	7819      	ldrb	r1, [r3, #0]
 800bfa4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bfa8:	2202      	movs	r2, #2
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f002 fbed 	bl	800e78a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bfb0:	4b50      	ldr	r3, [pc, #320]	@ (800c0f4 <USBD_CDC_Init+0x1e8>)
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	f003 020f 	and.w	r2, r3, #15
 800bfb8:	6879      	ldr	r1, [r7, #4]
 800bfba:	4613      	mov	r3, r2
 800bfbc:	009b      	lsls	r3, r3, #2
 800bfbe:	4413      	add	r3, r2
 800bfc0:	009b      	lsls	r3, r3, #2
 800bfc2:	440b      	add	r3, r1
 800bfc4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bfc8:	2201      	movs	r2, #1
 800bfca:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bfcc:	4b4a      	ldr	r3, [pc, #296]	@ (800c0f8 <USBD_CDC_Init+0x1ec>)
 800bfce:	781b      	ldrb	r3, [r3, #0]
 800bfd0:	f003 020f 	and.w	r2, r3, #15
 800bfd4:	6879      	ldr	r1, [r7, #4]
 800bfd6:	4613      	mov	r3, r2
 800bfd8:	009b      	lsls	r3, r3, #2
 800bfda:	4413      	add	r3, r2
 800bfdc:	009b      	lsls	r3, r3, #2
 800bfde:	440b      	add	r3, r1
 800bfe0:	3326      	adds	r3, #38	@ 0x26
 800bfe2:	2210      	movs	r2, #16
 800bfe4:	801a      	strh	r2, [r3, #0]
 800bfe6:	e035      	b.n	800c054 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bfe8:	4b41      	ldr	r3, [pc, #260]	@ (800c0f0 <USBD_CDC_Init+0x1e4>)
 800bfea:	7819      	ldrb	r1, [r3, #0]
 800bfec:	2340      	movs	r3, #64	@ 0x40
 800bfee:	2202      	movs	r2, #2
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f002 fbca 	bl	800e78a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bff6:	4b3e      	ldr	r3, [pc, #248]	@ (800c0f0 <USBD_CDC_Init+0x1e4>)
 800bff8:	781b      	ldrb	r3, [r3, #0]
 800bffa:	f003 020f 	and.w	r2, r3, #15
 800bffe:	6879      	ldr	r1, [r7, #4]
 800c000:	4613      	mov	r3, r2
 800c002:	009b      	lsls	r3, r3, #2
 800c004:	4413      	add	r3, r2
 800c006:	009b      	lsls	r3, r3, #2
 800c008:	440b      	add	r3, r1
 800c00a:	3324      	adds	r3, #36	@ 0x24
 800c00c:	2201      	movs	r2, #1
 800c00e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c010:	4b38      	ldr	r3, [pc, #224]	@ (800c0f4 <USBD_CDC_Init+0x1e8>)
 800c012:	7819      	ldrb	r1, [r3, #0]
 800c014:	2340      	movs	r3, #64	@ 0x40
 800c016:	2202      	movs	r2, #2
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f002 fbb6 	bl	800e78a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c01e:	4b35      	ldr	r3, [pc, #212]	@ (800c0f4 <USBD_CDC_Init+0x1e8>)
 800c020:	781b      	ldrb	r3, [r3, #0]
 800c022:	f003 020f 	and.w	r2, r3, #15
 800c026:	6879      	ldr	r1, [r7, #4]
 800c028:	4613      	mov	r3, r2
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	4413      	add	r3, r2
 800c02e:	009b      	lsls	r3, r3, #2
 800c030:	440b      	add	r3, r1
 800c032:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c036:	2201      	movs	r2, #1
 800c038:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c03a:	4b2f      	ldr	r3, [pc, #188]	@ (800c0f8 <USBD_CDC_Init+0x1ec>)
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	f003 020f 	and.w	r2, r3, #15
 800c042:	6879      	ldr	r1, [r7, #4]
 800c044:	4613      	mov	r3, r2
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	4413      	add	r3, r2
 800c04a:	009b      	lsls	r3, r3, #2
 800c04c:	440b      	add	r3, r1
 800c04e:	3326      	adds	r3, #38	@ 0x26
 800c050:	2210      	movs	r2, #16
 800c052:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c054:	4b28      	ldr	r3, [pc, #160]	@ (800c0f8 <USBD_CDC_Init+0x1ec>)
 800c056:	7819      	ldrb	r1, [r3, #0]
 800c058:	2308      	movs	r3, #8
 800c05a:	2203      	movs	r2, #3
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f002 fb94 	bl	800e78a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c062:	4b25      	ldr	r3, [pc, #148]	@ (800c0f8 <USBD_CDC_Init+0x1ec>)
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	f003 020f 	and.w	r2, r3, #15
 800c06a:	6879      	ldr	r1, [r7, #4]
 800c06c:	4613      	mov	r3, r2
 800c06e:	009b      	lsls	r3, r3, #2
 800c070:	4413      	add	r3, r2
 800c072:	009b      	lsls	r3, r3, #2
 800c074:	440b      	add	r3, r1
 800c076:	3324      	adds	r3, #36	@ 0x24
 800c078:	2201      	movs	r2, #1
 800c07a:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	2200      	movs	r2, #0
 800c080:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	33b0      	adds	r3, #176	@ 0xb0
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	4413      	add	r3, r2
 800c092:	685b      	ldr	r3, [r3, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2200      	movs	r2, #0
 800c09c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d101      	bne.n	800c0b6 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800c0b2:	2302      	movs	r3, #2
 800c0b4:	e018      	b.n	800c0e8 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	7c1b      	ldrb	r3, [r3, #16]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d10a      	bne.n	800c0d4 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c0be:	4b0d      	ldr	r3, [pc, #52]	@ (800c0f4 <USBD_CDC_Init+0x1e8>)
 800c0c0:	7819      	ldrb	r1, [r3, #0]
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c0c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f002 fc4b 	bl	800e968 <USBD_LL_PrepareReceive>
 800c0d2:	e008      	b.n	800c0e6 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c0d4:	4b07      	ldr	r3, [pc, #28]	@ (800c0f4 <USBD_CDC_Init+0x1e8>)
 800c0d6:	7819      	ldrb	r1, [r3, #0]
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c0de:	2340      	movs	r3, #64	@ 0x40
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f002 fc41 	bl	800e968 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c0e6:	2300      	movs	r3, #0
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3710      	adds	r7, #16
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}
 800c0f0:	20000093 	.word	0x20000093
 800c0f4:	20000094 	.word	0x20000094
 800c0f8:	20000095 	.word	0x20000095

0800c0fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	460b      	mov	r3, r1
 800c106:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c108:	4b3a      	ldr	r3, [pc, #232]	@ (800c1f4 <USBD_CDC_DeInit+0xf8>)
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	4619      	mov	r1, r3
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f002 fb61 	bl	800e7d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c114:	4b37      	ldr	r3, [pc, #220]	@ (800c1f4 <USBD_CDC_DeInit+0xf8>)
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	f003 020f 	and.w	r2, r3, #15
 800c11c:	6879      	ldr	r1, [r7, #4]
 800c11e:	4613      	mov	r3, r2
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	4413      	add	r3, r2
 800c124:	009b      	lsls	r3, r3, #2
 800c126:	440b      	add	r3, r1
 800c128:	3324      	adds	r3, #36	@ 0x24
 800c12a:	2200      	movs	r2, #0
 800c12c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c12e:	4b32      	ldr	r3, [pc, #200]	@ (800c1f8 <USBD_CDC_DeInit+0xfc>)
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	4619      	mov	r1, r3
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f002 fb4e 	bl	800e7d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c13a:	4b2f      	ldr	r3, [pc, #188]	@ (800c1f8 <USBD_CDC_DeInit+0xfc>)
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	f003 020f 	and.w	r2, r3, #15
 800c142:	6879      	ldr	r1, [r7, #4]
 800c144:	4613      	mov	r3, r2
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	4413      	add	r3, r2
 800c14a:	009b      	lsls	r3, r3, #2
 800c14c:	440b      	add	r3, r1
 800c14e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c152:	2200      	movs	r2, #0
 800c154:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c156:	4b29      	ldr	r3, [pc, #164]	@ (800c1fc <USBD_CDC_DeInit+0x100>)
 800c158:	781b      	ldrb	r3, [r3, #0]
 800c15a:	4619      	mov	r1, r3
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f002 fb3a 	bl	800e7d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c162:	4b26      	ldr	r3, [pc, #152]	@ (800c1fc <USBD_CDC_DeInit+0x100>)
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	f003 020f 	and.w	r2, r3, #15
 800c16a:	6879      	ldr	r1, [r7, #4]
 800c16c:	4613      	mov	r3, r2
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	4413      	add	r3, r2
 800c172:	009b      	lsls	r3, r3, #2
 800c174:	440b      	add	r3, r1
 800c176:	3324      	adds	r3, #36	@ 0x24
 800c178:	2200      	movs	r2, #0
 800c17a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c17c:	4b1f      	ldr	r3, [pc, #124]	@ (800c1fc <USBD_CDC_DeInit+0x100>)
 800c17e:	781b      	ldrb	r3, [r3, #0]
 800c180:	f003 020f 	and.w	r2, r3, #15
 800c184:	6879      	ldr	r1, [r7, #4]
 800c186:	4613      	mov	r3, r2
 800c188:	009b      	lsls	r3, r3, #2
 800c18a:	4413      	add	r3, r2
 800c18c:	009b      	lsls	r3, r3, #2
 800c18e:	440b      	add	r3, r1
 800c190:	3326      	adds	r3, #38	@ 0x26
 800c192:	2200      	movs	r2, #0
 800c194:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	32b0      	adds	r2, #176	@ 0xb0
 800c1a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d01f      	beq.n	800c1e8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	33b0      	adds	r3, #176	@ 0xb0
 800c1b2:	009b      	lsls	r3, r3, #2
 800c1b4:	4413      	add	r3, r2
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	685b      	ldr	r3, [r3, #4]
 800c1ba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	32b0      	adds	r2, #176	@ 0xb0
 800c1c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f002 fc88 	bl	800eae0 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	32b0      	adds	r2, #176	@ 0xb0
 800c1da:	2100      	movs	r1, #0
 800c1dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c1e8:	2300      	movs	r3, #0
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3708      	adds	r7, #8
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}
 800c1f2:	bf00      	nop
 800c1f4:	20000093 	.word	0x20000093
 800c1f8:	20000094 	.word	0x20000094
 800c1fc:	20000095 	.word	0x20000095

0800c200 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b086      	sub	sp, #24
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	32b0      	adds	r2, #176	@ 0xb0
 800c214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c218:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c21a:	2300      	movs	r3, #0
 800c21c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c21e:	2300      	movs	r3, #0
 800c220:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c222:	2300      	movs	r3, #0
 800c224:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d101      	bne.n	800c230 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c22c:	2303      	movs	r3, #3
 800c22e:	e0bf      	b.n	800c3b0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	781b      	ldrb	r3, [r3, #0]
 800c234:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d050      	beq.n	800c2de <USBD_CDC_Setup+0xde>
 800c23c:	2b20      	cmp	r3, #32
 800c23e:	f040 80af 	bne.w	800c3a0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	88db      	ldrh	r3, [r3, #6]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d03a      	beq.n	800c2c0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	781b      	ldrb	r3, [r3, #0]
 800c24e:	b25b      	sxtb	r3, r3
 800c250:	2b00      	cmp	r3, #0
 800c252:	da1b      	bge.n	800c28c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	33b0      	adds	r3, #176	@ 0xb0
 800c25e:	009b      	lsls	r3, r3, #2
 800c260:	4413      	add	r3, r2
 800c262:	685b      	ldr	r3, [r3, #4]
 800c264:	689b      	ldr	r3, [r3, #8]
 800c266:	683a      	ldr	r2, [r7, #0]
 800c268:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c26a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c26c:	683a      	ldr	r2, [r7, #0]
 800c26e:	88d2      	ldrh	r2, [r2, #6]
 800c270:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	88db      	ldrh	r3, [r3, #6]
 800c276:	2b07      	cmp	r3, #7
 800c278:	bf28      	it	cs
 800c27a:	2307      	movcs	r3, #7
 800c27c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	89fa      	ldrh	r2, [r7, #14]
 800c282:	4619      	mov	r1, r3
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f001 fdbd 	bl	800de04 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c28a:	e090      	b.n	800c3ae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	785a      	ldrb	r2, [r3, #1]
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	88db      	ldrh	r3, [r3, #6]
 800c29a:	2b3f      	cmp	r3, #63	@ 0x3f
 800c29c:	d803      	bhi.n	800c2a6 <USBD_CDC_Setup+0xa6>
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	88db      	ldrh	r3, [r3, #6]
 800c2a2:	b2da      	uxtb	r2, r3
 800c2a4:	e000      	b.n	800c2a8 <USBD_CDC_Setup+0xa8>
 800c2a6:	2240      	movs	r2, #64	@ 0x40
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c2ae:	6939      	ldr	r1, [r7, #16]
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f001 fdcf 	bl	800de5c <USBD_CtlPrepareRx>
      break;
 800c2be:	e076      	b.n	800c3ae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	33b0      	adds	r3, #176	@ 0xb0
 800c2ca:	009b      	lsls	r3, r3, #2
 800c2cc:	4413      	add	r3, r2
 800c2ce:	685b      	ldr	r3, [r3, #4]
 800c2d0:	689b      	ldr	r3, [r3, #8]
 800c2d2:	683a      	ldr	r2, [r7, #0]
 800c2d4:	7850      	ldrb	r0, [r2, #1]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	6839      	ldr	r1, [r7, #0]
 800c2da:	4798      	blx	r3
      break;
 800c2dc:	e067      	b.n	800c3ae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	785b      	ldrb	r3, [r3, #1]
 800c2e2:	2b0b      	cmp	r3, #11
 800c2e4:	d851      	bhi.n	800c38a <USBD_CDC_Setup+0x18a>
 800c2e6:	a201      	add	r2, pc, #4	@ (adr r2, 800c2ec <USBD_CDC_Setup+0xec>)
 800c2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ec:	0800c31d 	.word	0x0800c31d
 800c2f0:	0800c399 	.word	0x0800c399
 800c2f4:	0800c38b 	.word	0x0800c38b
 800c2f8:	0800c38b 	.word	0x0800c38b
 800c2fc:	0800c38b 	.word	0x0800c38b
 800c300:	0800c38b 	.word	0x0800c38b
 800c304:	0800c38b 	.word	0x0800c38b
 800c308:	0800c38b 	.word	0x0800c38b
 800c30c:	0800c38b 	.word	0x0800c38b
 800c310:	0800c38b 	.word	0x0800c38b
 800c314:	0800c347 	.word	0x0800c347
 800c318:	0800c371 	.word	0x0800c371
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c322:	b2db      	uxtb	r3, r3
 800c324:	2b03      	cmp	r3, #3
 800c326:	d107      	bne.n	800c338 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c328:	f107 030a 	add.w	r3, r7, #10
 800c32c:	2202      	movs	r2, #2
 800c32e:	4619      	mov	r1, r3
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f001 fd67 	bl	800de04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c336:	e032      	b.n	800c39e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c338:	6839      	ldr	r1, [r7, #0]
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f001 fce5 	bl	800dd0a <USBD_CtlError>
            ret = USBD_FAIL;
 800c340:	2303      	movs	r3, #3
 800c342:	75fb      	strb	r3, [r7, #23]
          break;
 800c344:	e02b      	b.n	800c39e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c34c:	b2db      	uxtb	r3, r3
 800c34e:	2b03      	cmp	r3, #3
 800c350:	d107      	bne.n	800c362 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c352:	f107 030d 	add.w	r3, r7, #13
 800c356:	2201      	movs	r2, #1
 800c358:	4619      	mov	r1, r3
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f001 fd52 	bl	800de04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c360:	e01d      	b.n	800c39e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c362:	6839      	ldr	r1, [r7, #0]
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f001 fcd0 	bl	800dd0a <USBD_CtlError>
            ret = USBD_FAIL;
 800c36a:	2303      	movs	r3, #3
 800c36c:	75fb      	strb	r3, [r7, #23]
          break;
 800c36e:	e016      	b.n	800c39e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c376:	b2db      	uxtb	r3, r3
 800c378:	2b03      	cmp	r3, #3
 800c37a:	d00f      	beq.n	800c39c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c37c:	6839      	ldr	r1, [r7, #0]
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f001 fcc3 	bl	800dd0a <USBD_CtlError>
            ret = USBD_FAIL;
 800c384:	2303      	movs	r3, #3
 800c386:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c388:	e008      	b.n	800c39c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c38a:	6839      	ldr	r1, [r7, #0]
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f001 fcbc 	bl	800dd0a <USBD_CtlError>
          ret = USBD_FAIL;
 800c392:	2303      	movs	r3, #3
 800c394:	75fb      	strb	r3, [r7, #23]
          break;
 800c396:	e002      	b.n	800c39e <USBD_CDC_Setup+0x19e>
          break;
 800c398:	bf00      	nop
 800c39a:	e008      	b.n	800c3ae <USBD_CDC_Setup+0x1ae>
          break;
 800c39c:	bf00      	nop
      }
      break;
 800c39e:	e006      	b.n	800c3ae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c3a0:	6839      	ldr	r1, [r7, #0]
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f001 fcb1 	bl	800dd0a <USBD_CtlError>
      ret = USBD_FAIL;
 800c3a8:	2303      	movs	r3, #3
 800c3aa:	75fb      	strb	r3, [r7, #23]
      break;
 800c3ac:	bf00      	nop
  }

  return (uint8_t)ret;
 800c3ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3718      	adds	r7, #24
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c3ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	32b0      	adds	r2, #176	@ 0xb0
 800c3d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d101      	bne.n	800c3e2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c3de:	2303      	movs	r3, #3
 800c3e0:	e065      	b.n	800c4ae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	32b0      	adds	r2, #176	@ 0xb0
 800c3ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c3f2:	78fb      	ldrb	r3, [r7, #3]
 800c3f4:	f003 020f 	and.w	r2, r3, #15
 800c3f8:	6879      	ldr	r1, [r7, #4]
 800c3fa:	4613      	mov	r3, r2
 800c3fc:	009b      	lsls	r3, r3, #2
 800c3fe:	4413      	add	r3, r2
 800c400:	009b      	lsls	r3, r3, #2
 800c402:	440b      	add	r3, r1
 800c404:	3318      	adds	r3, #24
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d02f      	beq.n	800c46c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c40c:	78fb      	ldrb	r3, [r7, #3]
 800c40e:	f003 020f 	and.w	r2, r3, #15
 800c412:	6879      	ldr	r1, [r7, #4]
 800c414:	4613      	mov	r3, r2
 800c416:	009b      	lsls	r3, r3, #2
 800c418:	4413      	add	r3, r2
 800c41a:	009b      	lsls	r3, r3, #2
 800c41c:	440b      	add	r3, r1
 800c41e:	3318      	adds	r3, #24
 800c420:	681a      	ldr	r2, [r3, #0]
 800c422:	78fb      	ldrb	r3, [r7, #3]
 800c424:	f003 010f 	and.w	r1, r3, #15
 800c428:	68f8      	ldr	r0, [r7, #12]
 800c42a:	460b      	mov	r3, r1
 800c42c:	00db      	lsls	r3, r3, #3
 800c42e:	440b      	add	r3, r1
 800c430:	009b      	lsls	r3, r3, #2
 800c432:	4403      	add	r3, r0
 800c434:	331c      	adds	r3, #28
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	fbb2 f1f3 	udiv	r1, r2, r3
 800c43c:	fb01 f303 	mul.w	r3, r1, r3
 800c440:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c442:	2b00      	cmp	r3, #0
 800c444:	d112      	bne.n	800c46c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c446:	78fb      	ldrb	r3, [r7, #3]
 800c448:	f003 020f 	and.w	r2, r3, #15
 800c44c:	6879      	ldr	r1, [r7, #4]
 800c44e:	4613      	mov	r3, r2
 800c450:	009b      	lsls	r3, r3, #2
 800c452:	4413      	add	r3, r2
 800c454:	009b      	lsls	r3, r3, #2
 800c456:	440b      	add	r3, r1
 800c458:	3318      	adds	r3, #24
 800c45a:	2200      	movs	r2, #0
 800c45c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c45e:	78f9      	ldrb	r1, [r7, #3]
 800c460:	2300      	movs	r3, #0
 800c462:	2200      	movs	r2, #0
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f002 fa5e 	bl	800e926 <USBD_LL_Transmit>
 800c46a:	e01f      	b.n	800c4ac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	2200      	movs	r2, #0
 800c470:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	33b0      	adds	r3, #176	@ 0xb0
 800c47e:	009b      	lsls	r3, r3, #2
 800c480:	4413      	add	r3, r2
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	691b      	ldr	r3, [r3, #16]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d010      	beq.n	800c4ac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c490:	687a      	ldr	r2, [r7, #4]
 800c492:	33b0      	adds	r3, #176	@ 0xb0
 800c494:	009b      	lsls	r3, r3, #2
 800c496:	4413      	add	r3, r2
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	691b      	ldr	r3, [r3, #16]
 800c49c:	68ba      	ldr	r2, [r7, #8]
 800c49e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c4a2:	68ba      	ldr	r2, [r7, #8]
 800c4a4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800c4a8:	78fa      	ldrb	r2, [r7, #3]
 800c4aa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c4ac:	2300      	movs	r3, #0
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3710      	adds	r7, #16
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}

0800c4b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c4b6:	b580      	push	{r7, lr}
 800c4b8:	b084      	sub	sp, #16
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
 800c4be:	460b      	mov	r3, r1
 800c4c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	32b0      	adds	r2, #176	@ 0xb0
 800c4cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	32b0      	adds	r2, #176	@ 0xb0
 800c4dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d101      	bne.n	800c4e8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c4e4:	2303      	movs	r3, #3
 800c4e6:	e01a      	b.n	800c51e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c4e8:	78fb      	ldrb	r3, [r7, #3]
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f002 fa5c 	bl	800e9aa <USBD_LL_GetRxDataSize>
 800c4f2:	4602      	mov	r2, r0
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	33b0      	adds	r3, #176	@ 0xb0
 800c504:	009b      	lsls	r3, r3, #2
 800c506:	4413      	add	r3, r2
 800c508:	685b      	ldr	r3, [r3, #4]
 800c50a:	68db      	ldr	r3, [r3, #12]
 800c50c:	68fa      	ldr	r2, [r7, #12]
 800c50e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c512:	68fa      	ldr	r2, [r7, #12]
 800c514:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c518:	4611      	mov	r1, r2
 800c51a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c51c:	2300      	movs	r3, #0
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3710      	adds	r7, #16
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}

0800c526 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c526:	b580      	push	{r7, lr}
 800c528:	b084      	sub	sp, #16
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	32b0      	adds	r2, #176	@ 0xb0
 800c538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c53c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d101      	bne.n	800c548 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c544:	2303      	movs	r3, #3
 800c546:	e024      	b.n	800c592 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c54e:	687a      	ldr	r2, [r7, #4]
 800c550:	33b0      	adds	r3, #176	@ 0xb0
 800c552:	009b      	lsls	r3, r3, #2
 800c554:	4413      	add	r3, r2
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d019      	beq.n	800c590 <USBD_CDC_EP0_RxReady+0x6a>
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c562:	2bff      	cmp	r3, #255	@ 0xff
 800c564:	d014      	beq.n	800c590 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	33b0      	adds	r3, #176	@ 0xb0
 800c570:	009b      	lsls	r3, r3, #2
 800c572:	4413      	add	r3, r2
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	689b      	ldr	r3, [r3, #8]
 800c578:	68fa      	ldr	r2, [r7, #12]
 800c57a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800c57e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c580:	68fa      	ldr	r2, [r7, #12]
 800c582:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c586:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	22ff      	movs	r2, #255	@ 0xff
 800c58c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c590:	2300      	movs	r3, #0
}
 800c592:	4618      	mov	r0, r3
 800c594:	3710      	adds	r7, #16
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
	...

0800c59c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b086      	sub	sp, #24
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c5a4:	2182      	movs	r1, #130	@ 0x82
 800c5a6:	4818      	ldr	r0, [pc, #96]	@ (800c608 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c5a8:	f000 fd4f 	bl	800d04a <USBD_GetEpDesc>
 800c5ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c5ae:	2101      	movs	r1, #1
 800c5b0:	4815      	ldr	r0, [pc, #84]	@ (800c608 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c5b2:	f000 fd4a 	bl	800d04a <USBD_GetEpDesc>
 800c5b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c5b8:	2181      	movs	r1, #129	@ 0x81
 800c5ba:	4813      	ldr	r0, [pc, #76]	@ (800c608 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c5bc:	f000 fd45 	bl	800d04a <USBD_GetEpDesc>
 800c5c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d002      	beq.n	800c5ce <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	2210      	movs	r2, #16
 800c5cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d006      	beq.n	800c5e2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c5dc:	711a      	strb	r2, [r3, #4]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d006      	beq.n	800c5f6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c5f0:	711a      	strb	r2, [r3, #4]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2243      	movs	r2, #67	@ 0x43
 800c5fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c5fc:	4b02      	ldr	r3, [pc, #8]	@ (800c608 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3718      	adds	r7, #24
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
 800c606:	bf00      	nop
 800c608:	20000050 	.word	0x20000050

0800c60c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b086      	sub	sp, #24
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c614:	2182      	movs	r1, #130	@ 0x82
 800c616:	4818      	ldr	r0, [pc, #96]	@ (800c678 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c618:	f000 fd17 	bl	800d04a <USBD_GetEpDesc>
 800c61c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c61e:	2101      	movs	r1, #1
 800c620:	4815      	ldr	r0, [pc, #84]	@ (800c678 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c622:	f000 fd12 	bl	800d04a <USBD_GetEpDesc>
 800c626:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c628:	2181      	movs	r1, #129	@ 0x81
 800c62a:	4813      	ldr	r0, [pc, #76]	@ (800c678 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c62c:	f000 fd0d 	bl	800d04a <USBD_GetEpDesc>
 800c630:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d002      	beq.n	800c63e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	2210      	movs	r2, #16
 800c63c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d006      	beq.n	800c652 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	2200      	movs	r2, #0
 800c648:	711a      	strb	r2, [r3, #4]
 800c64a:	2200      	movs	r2, #0
 800c64c:	f042 0202 	orr.w	r2, r2, #2
 800c650:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d006      	beq.n	800c666 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	2200      	movs	r2, #0
 800c65c:	711a      	strb	r2, [r3, #4]
 800c65e:	2200      	movs	r2, #0
 800c660:	f042 0202 	orr.w	r2, r2, #2
 800c664:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2243      	movs	r2, #67	@ 0x43
 800c66a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c66c:	4b02      	ldr	r3, [pc, #8]	@ (800c678 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3718      	adds	r7, #24
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	20000050 	.word	0x20000050

0800c67c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b086      	sub	sp, #24
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c684:	2182      	movs	r1, #130	@ 0x82
 800c686:	4818      	ldr	r0, [pc, #96]	@ (800c6e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c688:	f000 fcdf 	bl	800d04a <USBD_GetEpDesc>
 800c68c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c68e:	2101      	movs	r1, #1
 800c690:	4815      	ldr	r0, [pc, #84]	@ (800c6e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c692:	f000 fcda 	bl	800d04a <USBD_GetEpDesc>
 800c696:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c698:	2181      	movs	r1, #129	@ 0x81
 800c69a:	4813      	ldr	r0, [pc, #76]	@ (800c6e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c69c:	f000 fcd5 	bl	800d04a <USBD_GetEpDesc>
 800c6a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d002      	beq.n	800c6ae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	2210      	movs	r2, #16
 800c6ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d006      	beq.n	800c6c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c6bc:	711a      	strb	r2, [r3, #4]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d006      	beq.n	800c6d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c6d0:	711a      	strb	r2, [r3, #4]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2243      	movs	r2, #67	@ 0x43
 800c6da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c6dc:	4b02      	ldr	r3, [pc, #8]	@ (800c6e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3718      	adds	r7, #24
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	20000050 	.word	0x20000050

0800c6ec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b083      	sub	sp, #12
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	220a      	movs	r2, #10
 800c6f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c6fa:	4b03      	ldr	r3, [pc, #12]	@ (800c708 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	370c      	adds	r7, #12
 800c700:	46bd      	mov	sp, r7
 800c702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c706:	4770      	bx	lr
 800c708:	2000000c 	.word	0x2000000c

0800c70c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b083      	sub	sp, #12
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d101      	bne.n	800c720 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c71c:	2303      	movs	r3, #3
 800c71e:	e009      	b.n	800c734 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c726:	687a      	ldr	r2, [r7, #4]
 800c728:	33b0      	adds	r3, #176	@ 0xb0
 800c72a:	009b      	lsls	r3, r3, #2
 800c72c:	4413      	add	r3, r2
 800c72e:	683a      	ldr	r2, [r7, #0]
 800c730:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c732:	2300      	movs	r3, #0
}
 800c734:	4618      	mov	r0, r3
 800c736:	370c      	adds	r7, #12
 800c738:	46bd      	mov	sp, r7
 800c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73e:	4770      	bx	lr

0800c740 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c740:	b480      	push	{r7}
 800c742:	b087      	sub	sp, #28
 800c744:	af00      	add	r7, sp, #0
 800c746:	60f8      	str	r0, [r7, #12]
 800c748:	60b9      	str	r1, [r7, #8]
 800c74a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	32b0      	adds	r2, #176	@ 0xb0
 800c756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c75a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d101      	bne.n	800c766 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c762:	2303      	movs	r3, #3
 800c764:	e008      	b.n	800c778 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	68ba      	ldr	r2, [r7, #8]
 800c76a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	687a      	ldr	r2, [r7, #4]
 800c772:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c776:	2300      	movs	r3, #0
}
 800c778:	4618      	mov	r0, r3
 800c77a:	371c      	adds	r7, #28
 800c77c:	46bd      	mov	sp, r7
 800c77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c782:	4770      	bx	lr

0800c784 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c784:	b480      	push	{r7}
 800c786:	b085      	sub	sp, #20
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
 800c78c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	32b0      	adds	r2, #176	@ 0xb0
 800c798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c79c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d101      	bne.n	800c7a8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c7a4:	2303      	movs	r3, #3
 800c7a6:	e004      	b.n	800c7b2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	683a      	ldr	r2, [r7, #0]
 800c7ac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c7b0:	2300      	movs	r3, #0
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3714      	adds	r7, #20
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7bc:	4770      	bx	lr
	...

0800c7c0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b084      	sub	sp, #16
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	32b0      	adds	r2, #176	@ 0xb0
 800c7d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7d6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c7d8:	2301      	movs	r3, #1
 800c7da:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d101      	bne.n	800c7e6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c7e2:	2303      	movs	r3, #3
 800c7e4:	e025      	b.n	800c832 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d11f      	bne.n	800c830 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c7f8:	4b10      	ldr	r3, [pc, #64]	@ (800c83c <USBD_CDC_TransmitPacket+0x7c>)
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	f003 020f 	and.w	r2, r3, #15
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	4613      	mov	r3, r2
 800c80a:	009b      	lsls	r3, r3, #2
 800c80c:	4413      	add	r3, r2
 800c80e:	009b      	lsls	r3, r3, #2
 800c810:	4403      	add	r3, r0
 800c812:	3318      	adds	r3, #24
 800c814:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c816:	4b09      	ldr	r3, [pc, #36]	@ (800c83c <USBD_CDC_TransmitPacket+0x7c>)
 800c818:	7819      	ldrb	r1, [r3, #0]
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f002 f87d 	bl	800e926 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c82c:	2300      	movs	r3, #0
 800c82e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c830:	7bfb      	ldrb	r3, [r7, #15]
}
 800c832:	4618      	mov	r0, r3
 800c834:	3710      	adds	r7, #16
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	bf00      	nop
 800c83c:	20000093 	.word	0x20000093

0800c840 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	32b0      	adds	r2, #176	@ 0xb0
 800c852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c856:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	32b0      	adds	r2, #176	@ 0xb0
 800c862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d101      	bne.n	800c86e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c86a:	2303      	movs	r3, #3
 800c86c:	e018      	b.n	800c8a0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	7c1b      	ldrb	r3, [r3, #16]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d10a      	bne.n	800c88c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c876:	4b0c      	ldr	r3, [pc, #48]	@ (800c8a8 <USBD_CDC_ReceivePacket+0x68>)
 800c878:	7819      	ldrb	r1, [r3, #0]
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c880:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f002 f86f 	bl	800e968 <USBD_LL_PrepareReceive>
 800c88a:	e008      	b.n	800c89e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c88c:	4b06      	ldr	r3, [pc, #24]	@ (800c8a8 <USBD_CDC_ReceivePacket+0x68>)
 800c88e:	7819      	ldrb	r1, [r3, #0]
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c896:	2340      	movs	r3, #64	@ 0x40
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f002 f865 	bl	800e968 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c89e:	2300      	movs	r3, #0
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3710      	adds	r7, #16
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	20000094 	.word	0x20000094

0800c8ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b086      	sub	sp, #24
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	60b9      	str	r1, [r7, #8]
 800c8b6:	4613      	mov	r3, r2
 800c8b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d101      	bne.n	800c8c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c8c0:	2303      	movs	r3, #3
 800c8c2:	e01f      	b.n	800c904 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d003      	beq.n	800c8ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	68ba      	ldr	r2, [r7, #8]
 800c8e6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	2201      	movs	r2, #1
 800c8ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	79fa      	ldrb	r2, [r7, #7]
 800c8f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c8f8:	68f8      	ldr	r0, [r7, #12]
 800c8fa:	f001 fedb 	bl	800e6b4 <USBD_LL_Init>
 800c8fe:	4603      	mov	r3, r0
 800c900:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c902:	7dfb      	ldrb	r3, [r7, #23]
}
 800c904:	4618      	mov	r0, r3
 800c906:	3718      	adds	r7, #24
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b084      	sub	sp, #16
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c916:	2300      	movs	r3, #0
 800c918:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d101      	bne.n	800c924 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c920:	2303      	movs	r3, #3
 800c922:	e025      	b.n	800c970 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	683a      	ldr	r2, [r7, #0]
 800c928:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	32ae      	adds	r2, #174	@ 0xae
 800c936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c93a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d00f      	beq.n	800c960 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	32ae      	adds	r2, #174	@ 0xae
 800c94a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c94e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c950:	f107 020e 	add.w	r2, r7, #14
 800c954:	4610      	mov	r0, r2
 800c956:	4798      	blx	r3
 800c958:	4602      	mov	r2, r0
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c966:	1c5a      	adds	r2, r3, #1
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c96e:	2300      	movs	r3, #0
}
 800c970:	4618      	mov	r0, r3
 800c972:	3710      	adds	r7, #16
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}

0800c978 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f001 fee7 	bl	800e754 <USBD_LL_Start>
 800c986:	4603      	mov	r3, r0
}
 800c988:	4618      	mov	r0, r3
 800c98a:	3708      	adds	r7, #8
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}

0800c990 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c990:	b480      	push	{r7}
 800c992:	b083      	sub	sp, #12
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c998:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	370c      	adds	r7, #12
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a4:	4770      	bx	lr

0800c9a6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c9a6:	b580      	push	{r7, lr}
 800c9a8:	b084      	sub	sp, #16
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	6078      	str	r0, [r7, #4]
 800c9ae:	460b      	mov	r3, r1
 800c9b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d009      	beq.n	800c9d4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	78fa      	ldrb	r2, [r7, #3]
 800c9ca:	4611      	mov	r1, r2
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	4798      	blx	r3
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c9d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3710      	adds	r7, #16
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}

0800c9de <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c9de:	b580      	push	{r7, lr}
 800c9e0:	b084      	sub	sp, #16
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	6078      	str	r0, [r7, #4]
 800c9e6:	460b      	mov	r3, r1
 800c9e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9f4:	685b      	ldr	r3, [r3, #4]
 800c9f6:	78fa      	ldrb	r2, [r7, #3]
 800c9f8:	4611      	mov	r1, r2
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	4798      	blx	r3
 800c9fe:	4603      	mov	r3, r0
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d001      	beq.n	800ca08 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ca04:	2303      	movs	r3, #3
 800ca06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ca08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3710      	adds	r7, #16
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}

0800ca12 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ca12:	b580      	push	{r7, lr}
 800ca14:	b084      	sub	sp, #16
 800ca16:	af00      	add	r7, sp, #0
 800ca18:	6078      	str	r0, [r7, #4]
 800ca1a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ca22:	6839      	ldr	r1, [r7, #0]
 800ca24:	4618      	mov	r0, r3
 800ca26:	f001 f936 	bl	800dc96 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ca38:	461a      	mov	r2, r3
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ca46:	f003 031f 	and.w	r3, r3, #31
 800ca4a:	2b02      	cmp	r3, #2
 800ca4c:	d01a      	beq.n	800ca84 <USBD_LL_SetupStage+0x72>
 800ca4e:	2b02      	cmp	r3, #2
 800ca50:	d822      	bhi.n	800ca98 <USBD_LL_SetupStage+0x86>
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d002      	beq.n	800ca5c <USBD_LL_SetupStage+0x4a>
 800ca56:	2b01      	cmp	r3, #1
 800ca58:	d00a      	beq.n	800ca70 <USBD_LL_SetupStage+0x5e>
 800ca5a:	e01d      	b.n	800ca98 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ca62:	4619      	mov	r1, r3
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f000 fb63 	bl	800d130 <USBD_StdDevReq>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	73fb      	strb	r3, [r7, #15]
      break;
 800ca6e:	e020      	b.n	800cab2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ca76:	4619      	mov	r1, r3
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f000 fbcb 	bl	800d214 <USBD_StdItfReq>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	73fb      	strb	r3, [r7, #15]
      break;
 800ca82:	e016      	b.n	800cab2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ca8a:	4619      	mov	r1, r3
 800ca8c:	6878      	ldr	r0, [r7, #4]
 800ca8e:	f000 fc2d 	bl	800d2ec <USBD_StdEPReq>
 800ca92:	4603      	mov	r3, r0
 800ca94:	73fb      	strb	r3, [r7, #15]
      break;
 800ca96:	e00c      	b.n	800cab2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ca9e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800caa2:	b2db      	uxtb	r3, r3
 800caa4:	4619      	mov	r1, r3
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f001 feb4 	bl	800e814 <USBD_LL_StallEP>
 800caac:	4603      	mov	r3, r0
 800caae:	73fb      	strb	r3, [r7, #15]
      break;
 800cab0:	bf00      	nop
  }

  return ret;
 800cab2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3710      	adds	r7, #16
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b086      	sub	sp, #24
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	460b      	mov	r3, r1
 800cac6:	607a      	str	r2, [r7, #4]
 800cac8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800caca:	2300      	movs	r3, #0
 800cacc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800cace:	7afb      	ldrb	r3, [r7, #11]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d16e      	bne.n	800cbb2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800cada:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cae2:	2b03      	cmp	r3, #3
 800cae4:	f040 8098 	bne.w	800cc18 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	689a      	ldr	r2, [r3, #8]
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	68db      	ldr	r3, [r3, #12]
 800caf0:	429a      	cmp	r2, r3
 800caf2:	d913      	bls.n	800cb1c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	689a      	ldr	r2, [r3, #8]
 800caf8:	693b      	ldr	r3, [r7, #16]
 800cafa:	68db      	ldr	r3, [r3, #12]
 800cafc:	1ad2      	subs	r2, r2, r3
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	68da      	ldr	r2, [r3, #12]
 800cb06:	693b      	ldr	r3, [r7, #16]
 800cb08:	689b      	ldr	r3, [r3, #8]
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	bf28      	it	cs
 800cb0e:	4613      	movcs	r3, r2
 800cb10:	461a      	mov	r2, r3
 800cb12:	6879      	ldr	r1, [r7, #4]
 800cb14:	68f8      	ldr	r0, [r7, #12]
 800cb16:	f001 f9be 	bl	800de96 <USBD_CtlContinueRx>
 800cb1a:	e07d      	b.n	800cc18 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cb22:	f003 031f 	and.w	r3, r3, #31
 800cb26:	2b02      	cmp	r3, #2
 800cb28:	d014      	beq.n	800cb54 <USBD_LL_DataOutStage+0x98>
 800cb2a:	2b02      	cmp	r3, #2
 800cb2c:	d81d      	bhi.n	800cb6a <USBD_LL_DataOutStage+0xae>
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d002      	beq.n	800cb38 <USBD_LL_DataOutStage+0x7c>
 800cb32:	2b01      	cmp	r3, #1
 800cb34:	d003      	beq.n	800cb3e <USBD_LL_DataOutStage+0x82>
 800cb36:	e018      	b.n	800cb6a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	75bb      	strb	r3, [r7, #22]
            break;
 800cb3c:	e018      	b.n	800cb70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800cb44:	b2db      	uxtb	r3, r3
 800cb46:	4619      	mov	r1, r3
 800cb48:	68f8      	ldr	r0, [r7, #12]
 800cb4a:	f000 fa64 	bl	800d016 <USBD_CoreFindIF>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	75bb      	strb	r3, [r7, #22]
            break;
 800cb52:	e00d      	b.n	800cb70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800cb5a:	b2db      	uxtb	r3, r3
 800cb5c:	4619      	mov	r1, r3
 800cb5e:	68f8      	ldr	r0, [r7, #12]
 800cb60:	f000 fa66 	bl	800d030 <USBD_CoreFindEP>
 800cb64:	4603      	mov	r3, r0
 800cb66:	75bb      	strb	r3, [r7, #22]
            break;
 800cb68:	e002      	b.n	800cb70 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	75bb      	strb	r3, [r7, #22]
            break;
 800cb6e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800cb70:	7dbb      	ldrb	r3, [r7, #22]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d119      	bne.n	800cbaa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	2b03      	cmp	r3, #3
 800cb80:	d113      	bne.n	800cbaa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800cb82:	7dba      	ldrb	r2, [r7, #22]
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	32ae      	adds	r2, #174	@ 0xae
 800cb88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb8c:	691b      	ldr	r3, [r3, #16]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d00b      	beq.n	800cbaa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800cb92:	7dba      	ldrb	r2, [r7, #22]
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800cb9a:	7dba      	ldrb	r2, [r7, #22]
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	32ae      	adds	r2, #174	@ 0xae
 800cba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cba4:	691b      	ldr	r3, [r3, #16]
 800cba6:	68f8      	ldr	r0, [r7, #12]
 800cba8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cbaa:	68f8      	ldr	r0, [r7, #12]
 800cbac:	f001 f984 	bl	800deb8 <USBD_CtlSendStatus>
 800cbb0:	e032      	b.n	800cc18 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800cbb2:	7afb      	ldrb	r3, [r7, #11]
 800cbb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbb8:	b2db      	uxtb	r3, r3
 800cbba:	4619      	mov	r1, r3
 800cbbc:	68f8      	ldr	r0, [r7, #12]
 800cbbe:	f000 fa37 	bl	800d030 <USBD_CoreFindEP>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cbc6:	7dbb      	ldrb	r3, [r7, #22]
 800cbc8:	2bff      	cmp	r3, #255	@ 0xff
 800cbca:	d025      	beq.n	800cc18 <USBD_LL_DataOutStage+0x15c>
 800cbcc:	7dbb      	ldrb	r3, [r7, #22]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d122      	bne.n	800cc18 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbd8:	b2db      	uxtb	r3, r3
 800cbda:	2b03      	cmp	r3, #3
 800cbdc:	d117      	bne.n	800cc0e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800cbde:	7dba      	ldrb	r2, [r7, #22]
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	32ae      	adds	r2, #174	@ 0xae
 800cbe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbe8:	699b      	ldr	r3, [r3, #24]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d00f      	beq.n	800cc0e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800cbee:	7dba      	ldrb	r2, [r7, #22]
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800cbf6:	7dba      	ldrb	r2, [r7, #22]
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	32ae      	adds	r2, #174	@ 0xae
 800cbfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc00:	699b      	ldr	r3, [r3, #24]
 800cc02:	7afa      	ldrb	r2, [r7, #11]
 800cc04:	4611      	mov	r1, r2
 800cc06:	68f8      	ldr	r0, [r7, #12]
 800cc08:	4798      	blx	r3
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800cc0e:	7dfb      	ldrb	r3, [r7, #23]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d001      	beq.n	800cc18 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800cc14:	7dfb      	ldrb	r3, [r7, #23]
 800cc16:	e000      	b.n	800cc1a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800cc18:	2300      	movs	r3, #0
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3718      	adds	r7, #24
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}

0800cc22 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cc22:	b580      	push	{r7, lr}
 800cc24:	b086      	sub	sp, #24
 800cc26:	af00      	add	r7, sp, #0
 800cc28:	60f8      	str	r0, [r7, #12]
 800cc2a:	460b      	mov	r3, r1
 800cc2c:	607a      	str	r2, [r7, #4]
 800cc2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800cc30:	7afb      	ldrb	r3, [r7, #11]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d16f      	bne.n	800cd16 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	3314      	adds	r3, #20
 800cc3a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cc42:	2b02      	cmp	r3, #2
 800cc44:	d15a      	bne.n	800ccfc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	689a      	ldr	r2, [r3, #8]
 800cc4a:	693b      	ldr	r3, [r7, #16]
 800cc4c:	68db      	ldr	r3, [r3, #12]
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d914      	bls.n	800cc7c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cc52:	693b      	ldr	r3, [r7, #16]
 800cc54:	689a      	ldr	r2, [r3, #8]
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	68db      	ldr	r3, [r3, #12]
 800cc5a:	1ad2      	subs	r2, r2, r3
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	689b      	ldr	r3, [r3, #8]
 800cc64:	461a      	mov	r2, r3
 800cc66:	6879      	ldr	r1, [r7, #4]
 800cc68:	68f8      	ldr	r0, [r7, #12]
 800cc6a:	f001 f8e6 	bl	800de3a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cc6e:	2300      	movs	r3, #0
 800cc70:	2200      	movs	r2, #0
 800cc72:	2100      	movs	r1, #0
 800cc74:	68f8      	ldr	r0, [r7, #12]
 800cc76:	f001 fe77 	bl	800e968 <USBD_LL_PrepareReceive>
 800cc7a:	e03f      	b.n	800ccfc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cc7c:	693b      	ldr	r3, [r7, #16]
 800cc7e:	68da      	ldr	r2, [r3, #12]
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	689b      	ldr	r3, [r3, #8]
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d11c      	bne.n	800ccc2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	685a      	ldr	r2, [r3, #4]
 800cc8c:	693b      	ldr	r3, [r7, #16]
 800cc8e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d316      	bcc.n	800ccc2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	685a      	ldr	r2, [r3, #4]
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d20f      	bcs.n	800ccc2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cca2:	2200      	movs	r2, #0
 800cca4:	2100      	movs	r1, #0
 800cca6:	68f8      	ldr	r0, [r7, #12]
 800cca8:	f001 f8c7 	bl	800de3a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	2100      	movs	r1, #0
 800ccba:	68f8      	ldr	r0, [r7, #12]
 800ccbc:	f001 fe54 	bl	800e968 <USBD_LL_PrepareReceive>
 800ccc0:	e01c      	b.n	800ccfc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	2b03      	cmp	r3, #3
 800cccc:	d10f      	bne.n	800ccee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ccd4:	68db      	ldr	r3, [r3, #12]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d009      	beq.n	800ccee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cce8:	68db      	ldr	r3, [r3, #12]
 800ccea:	68f8      	ldr	r0, [r7, #12]
 800ccec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ccee:	2180      	movs	r1, #128	@ 0x80
 800ccf0:	68f8      	ldr	r0, [r7, #12]
 800ccf2:	f001 fd8f 	bl	800e814 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ccf6:	68f8      	ldr	r0, [r7, #12]
 800ccf8:	f001 f8f1 	bl	800dede <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d03a      	beq.n	800cd7c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800cd06:	68f8      	ldr	r0, [r7, #12]
 800cd08:	f7ff fe42 	bl	800c990 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800cd14:	e032      	b.n	800cd7c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cd16:	7afb      	ldrb	r3, [r7, #11]
 800cd18:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cd1c:	b2db      	uxtb	r3, r3
 800cd1e:	4619      	mov	r1, r3
 800cd20:	68f8      	ldr	r0, [r7, #12]
 800cd22:	f000 f985 	bl	800d030 <USBD_CoreFindEP>
 800cd26:	4603      	mov	r3, r0
 800cd28:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cd2a:	7dfb      	ldrb	r3, [r7, #23]
 800cd2c:	2bff      	cmp	r3, #255	@ 0xff
 800cd2e:	d025      	beq.n	800cd7c <USBD_LL_DataInStage+0x15a>
 800cd30:	7dfb      	ldrb	r3, [r7, #23]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d122      	bne.n	800cd7c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd3c:	b2db      	uxtb	r3, r3
 800cd3e:	2b03      	cmp	r3, #3
 800cd40:	d11c      	bne.n	800cd7c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cd42:	7dfa      	ldrb	r2, [r7, #23]
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	32ae      	adds	r2, #174	@ 0xae
 800cd48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd4c:	695b      	ldr	r3, [r3, #20]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d014      	beq.n	800cd7c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800cd52:	7dfa      	ldrb	r2, [r7, #23]
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800cd5a:	7dfa      	ldrb	r2, [r7, #23]
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	32ae      	adds	r2, #174	@ 0xae
 800cd60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd64:	695b      	ldr	r3, [r3, #20]
 800cd66:	7afa      	ldrb	r2, [r7, #11]
 800cd68:	4611      	mov	r1, r2
 800cd6a:	68f8      	ldr	r0, [r7, #12]
 800cd6c:	4798      	blx	r3
 800cd6e:	4603      	mov	r3, r0
 800cd70:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800cd72:	7dbb      	ldrb	r3, [r7, #22]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d001      	beq.n	800cd7c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800cd78:	7dbb      	ldrb	r3, [r7, #22]
 800cd7a:	e000      	b.n	800cd7e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800cd7c:	2300      	movs	r3, #0
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3718      	adds	r7, #24
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}

0800cd86 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cd86:	b580      	push	{r7, lr}
 800cd88:	b084      	sub	sp, #16
 800cd8a:	af00      	add	r7, sp, #0
 800cd8c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2201      	movs	r2, #1
 800cd96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2200      	movs	r2, #0
 800cda6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d014      	beq.n	800cdec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cdc8:	685b      	ldr	r3, [r3, #4]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d00e      	beq.n	800cdec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cdd4:	685b      	ldr	r3, [r3, #4]
 800cdd6:	687a      	ldr	r2, [r7, #4]
 800cdd8:	6852      	ldr	r2, [r2, #4]
 800cdda:	b2d2      	uxtb	r2, r2
 800cddc:	4611      	mov	r1, r2
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	4798      	blx	r3
 800cde2:	4603      	mov	r3, r0
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d001      	beq.n	800cdec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cde8:	2303      	movs	r3, #3
 800cdea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cdec:	2340      	movs	r3, #64	@ 0x40
 800cdee:	2200      	movs	r2, #0
 800cdf0:	2100      	movs	r1, #0
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f001 fcc9 	bl	800e78a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2240      	movs	r2, #64	@ 0x40
 800ce04:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ce08:	2340      	movs	r3, #64	@ 0x40
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	2180      	movs	r1, #128	@ 0x80
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f001 fcbb 	bl	800e78a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2201      	movs	r2, #1
 800ce18:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2240      	movs	r2, #64	@ 0x40
 800ce1e:	621a      	str	r2, [r3, #32]

  return ret;
 800ce20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3710      	adds	r7, #16
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}

0800ce2a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ce2a:	b480      	push	{r7}
 800ce2c:	b083      	sub	sp, #12
 800ce2e:	af00      	add	r7, sp, #0
 800ce30:	6078      	str	r0, [r7, #4]
 800ce32:	460b      	mov	r3, r1
 800ce34:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	78fa      	ldrb	r2, [r7, #3]
 800ce3a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ce3c:	2300      	movs	r3, #0
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	370c      	adds	r7, #12
 800ce42:	46bd      	mov	sp, r7
 800ce44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce48:	4770      	bx	lr

0800ce4a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ce4a:	b480      	push	{r7}
 800ce4c:	b083      	sub	sp, #12
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce58:	b2db      	uxtb	r3, r3
 800ce5a:	2b04      	cmp	r3, #4
 800ce5c:	d006      	beq.n	800ce6c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce64:	b2da      	uxtb	r2, r3
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2204      	movs	r2, #4
 800ce70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ce74:	2300      	movs	r3, #0
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	370c      	adds	r7, #12
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce80:	4770      	bx	lr

0800ce82 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ce82:	b480      	push	{r7}
 800ce84:	b083      	sub	sp, #12
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce90:	b2db      	uxtb	r3, r3
 800ce92:	2b04      	cmp	r3, #4
 800ce94:	d106      	bne.n	800cea4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ce9c:	b2da      	uxtb	r2, r3
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800cea4:	2300      	movs	r3, #0
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	370c      	adds	r7, #12
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb0:	4770      	bx	lr

0800ceb2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ceb2:	b580      	push	{r7, lr}
 800ceb4:	b082      	sub	sp, #8
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cec0:	b2db      	uxtb	r3, r3
 800cec2:	2b03      	cmp	r3, #3
 800cec4:	d110      	bne.n	800cee8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d00b      	beq.n	800cee8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ced6:	69db      	ldr	r3, [r3, #28]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d005      	beq.n	800cee8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cee2:	69db      	ldr	r3, [r3, #28]
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cee8:	2300      	movs	r3, #0
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3708      	adds	r7, #8
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}

0800cef2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cef2:	b580      	push	{r7, lr}
 800cef4:	b082      	sub	sp, #8
 800cef6:	af00      	add	r7, sp, #0
 800cef8:	6078      	str	r0, [r7, #4]
 800cefa:	460b      	mov	r3, r1
 800cefc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	32ae      	adds	r2, #174	@ 0xae
 800cf08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d101      	bne.n	800cf14 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cf10:	2303      	movs	r3, #3
 800cf12:	e01c      	b.n	800cf4e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf1a:	b2db      	uxtb	r3, r3
 800cf1c:	2b03      	cmp	r3, #3
 800cf1e:	d115      	bne.n	800cf4c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	32ae      	adds	r2, #174	@ 0xae
 800cf2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf2e:	6a1b      	ldr	r3, [r3, #32]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d00b      	beq.n	800cf4c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	32ae      	adds	r2, #174	@ 0xae
 800cf3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf42:	6a1b      	ldr	r3, [r3, #32]
 800cf44:	78fa      	ldrb	r2, [r7, #3]
 800cf46:	4611      	mov	r1, r2
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cf4c:	2300      	movs	r3, #0
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3708      	adds	r7, #8
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}

0800cf56 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cf56:	b580      	push	{r7, lr}
 800cf58:	b082      	sub	sp, #8
 800cf5a:	af00      	add	r7, sp, #0
 800cf5c:	6078      	str	r0, [r7, #4]
 800cf5e:	460b      	mov	r3, r1
 800cf60:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	32ae      	adds	r2, #174	@ 0xae
 800cf6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d101      	bne.n	800cf78 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cf74:	2303      	movs	r3, #3
 800cf76:	e01c      	b.n	800cfb2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf7e:	b2db      	uxtb	r3, r3
 800cf80:	2b03      	cmp	r3, #3
 800cf82:	d115      	bne.n	800cfb0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	32ae      	adds	r2, #174	@ 0xae
 800cf8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d00b      	beq.n	800cfb0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	32ae      	adds	r2, #174	@ 0xae
 800cfa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfa8:	78fa      	ldrb	r2, [r7, #3]
 800cfaa:	4611      	mov	r1, r2
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cfb0:	2300      	movs	r3, #0
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3708      	adds	r7, #8
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}

0800cfba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cfba:	b480      	push	{r7}
 800cfbc:	b083      	sub	sp, #12
 800cfbe:	af00      	add	r7, sp, #0
 800cfc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cfc2:	2300      	movs	r3, #0
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	370c      	adds	r7, #12
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfce:	4770      	bx	lr

0800cfd0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b084      	sub	sp, #16
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2201      	movs	r2, #1
 800cfe0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d00e      	beq.n	800d00c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cff4:	685b      	ldr	r3, [r3, #4]
 800cff6:	687a      	ldr	r2, [r7, #4]
 800cff8:	6852      	ldr	r2, [r2, #4]
 800cffa:	b2d2      	uxtb	r2, r2
 800cffc:	4611      	mov	r1, r2
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	4798      	blx	r3
 800d002:	4603      	mov	r3, r0
 800d004:	2b00      	cmp	r3, #0
 800d006:	d001      	beq.n	800d00c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d008:	2303      	movs	r3, #3
 800d00a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d00c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3710      	adds	r7, #16
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}

0800d016 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d016:	b480      	push	{r7}
 800d018:	b083      	sub	sp, #12
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	6078      	str	r0, [r7, #4]
 800d01e:	460b      	mov	r3, r1
 800d020:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d022:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d024:	4618      	mov	r0, r3
 800d026:	370c      	adds	r7, #12
 800d028:	46bd      	mov	sp, r7
 800d02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02e:	4770      	bx	lr

0800d030 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d030:	b480      	push	{r7}
 800d032:	b083      	sub	sp, #12
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	460b      	mov	r3, r1
 800d03a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d03c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d03e:	4618      	mov	r0, r3
 800d040:	370c      	adds	r7, #12
 800d042:	46bd      	mov	sp, r7
 800d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d048:	4770      	bx	lr

0800d04a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d04a:	b580      	push	{r7, lr}
 800d04c:	b086      	sub	sp, #24
 800d04e:	af00      	add	r7, sp, #0
 800d050:	6078      	str	r0, [r7, #4]
 800d052:	460b      	mov	r3, r1
 800d054:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d05e:	2300      	movs	r3, #0
 800d060:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	885b      	ldrh	r3, [r3, #2]
 800d066:	b29b      	uxth	r3, r3
 800d068:	68fa      	ldr	r2, [r7, #12]
 800d06a:	7812      	ldrb	r2, [r2, #0]
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d91f      	bls.n	800d0b0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d076:	e013      	b.n	800d0a0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d078:	f107 030a 	add.w	r3, r7, #10
 800d07c:	4619      	mov	r1, r3
 800d07e:	6978      	ldr	r0, [r7, #20]
 800d080:	f000 f81b 	bl	800d0ba <USBD_GetNextDesc>
 800d084:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	785b      	ldrb	r3, [r3, #1]
 800d08a:	2b05      	cmp	r3, #5
 800d08c:	d108      	bne.n	800d0a0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d092:	693b      	ldr	r3, [r7, #16]
 800d094:	789b      	ldrb	r3, [r3, #2]
 800d096:	78fa      	ldrb	r2, [r7, #3]
 800d098:	429a      	cmp	r2, r3
 800d09a:	d008      	beq.n	800d0ae <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d09c:	2300      	movs	r3, #0
 800d09e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	885b      	ldrh	r3, [r3, #2]
 800d0a4:	b29a      	uxth	r2, r3
 800d0a6:	897b      	ldrh	r3, [r7, #10]
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d8e5      	bhi.n	800d078 <USBD_GetEpDesc+0x2e>
 800d0ac:	e000      	b.n	800d0b0 <USBD_GetEpDesc+0x66>
          break;
 800d0ae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d0b0:	693b      	ldr	r3, [r7, #16]
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3718      	adds	r7, #24
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}

0800d0ba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d0ba:	b480      	push	{r7}
 800d0bc:	b085      	sub	sp, #20
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	6078      	str	r0, [r7, #4]
 800d0c2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	881b      	ldrh	r3, [r3, #0]
 800d0cc:	68fa      	ldr	r2, [r7, #12]
 800d0ce:	7812      	ldrb	r2, [r2, #0]
 800d0d0:	4413      	add	r3, r2
 800d0d2:	b29a      	uxth	r2, r3
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	781b      	ldrb	r3, [r3, #0]
 800d0dc:	461a      	mov	r2, r3
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	4413      	add	r3, r2
 800d0e2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d0e4:	68fb      	ldr	r3, [r7, #12]
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3714      	adds	r7, #20
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f0:	4770      	bx	lr

0800d0f2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d0f2:	b480      	push	{r7}
 800d0f4:	b087      	sub	sp, #28
 800d0f6:	af00      	add	r7, sp, #0
 800d0f8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	781b      	ldrb	r3, [r3, #0]
 800d102:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	3301      	adds	r3, #1
 800d108:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d110:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d114:	021b      	lsls	r3, r3, #8
 800d116:	b21a      	sxth	r2, r3
 800d118:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d11c:	4313      	orrs	r3, r2
 800d11e:	b21b      	sxth	r3, r3
 800d120:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d122:	89fb      	ldrh	r3, [r7, #14]
}
 800d124:	4618      	mov	r0, r3
 800d126:	371c      	adds	r7, #28
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr

0800d130 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b084      	sub	sp, #16
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
 800d138:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d13a:	2300      	movs	r3, #0
 800d13c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	781b      	ldrb	r3, [r3, #0]
 800d142:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d146:	2b40      	cmp	r3, #64	@ 0x40
 800d148:	d005      	beq.n	800d156 <USBD_StdDevReq+0x26>
 800d14a:	2b40      	cmp	r3, #64	@ 0x40
 800d14c:	d857      	bhi.n	800d1fe <USBD_StdDevReq+0xce>
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d00f      	beq.n	800d172 <USBD_StdDevReq+0x42>
 800d152:	2b20      	cmp	r3, #32
 800d154:	d153      	bne.n	800d1fe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	32ae      	adds	r2, #174	@ 0xae
 800d160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d164:	689b      	ldr	r3, [r3, #8]
 800d166:	6839      	ldr	r1, [r7, #0]
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	4798      	blx	r3
 800d16c:	4603      	mov	r3, r0
 800d16e:	73fb      	strb	r3, [r7, #15]
      break;
 800d170:	e04a      	b.n	800d208 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	785b      	ldrb	r3, [r3, #1]
 800d176:	2b09      	cmp	r3, #9
 800d178:	d83b      	bhi.n	800d1f2 <USBD_StdDevReq+0xc2>
 800d17a:	a201      	add	r2, pc, #4	@ (adr r2, 800d180 <USBD_StdDevReq+0x50>)
 800d17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d180:	0800d1d5 	.word	0x0800d1d5
 800d184:	0800d1e9 	.word	0x0800d1e9
 800d188:	0800d1f3 	.word	0x0800d1f3
 800d18c:	0800d1df 	.word	0x0800d1df
 800d190:	0800d1f3 	.word	0x0800d1f3
 800d194:	0800d1b3 	.word	0x0800d1b3
 800d198:	0800d1a9 	.word	0x0800d1a9
 800d19c:	0800d1f3 	.word	0x0800d1f3
 800d1a0:	0800d1cb 	.word	0x0800d1cb
 800d1a4:	0800d1bd 	.word	0x0800d1bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d1a8:	6839      	ldr	r1, [r7, #0]
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f000 fa3c 	bl	800d628 <USBD_GetDescriptor>
          break;
 800d1b0:	e024      	b.n	800d1fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d1b2:	6839      	ldr	r1, [r7, #0]
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f000 fbcb 	bl	800d950 <USBD_SetAddress>
          break;
 800d1ba:	e01f      	b.n	800d1fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d1bc:	6839      	ldr	r1, [r7, #0]
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f000 fc0a 	bl	800d9d8 <USBD_SetConfig>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	73fb      	strb	r3, [r7, #15]
          break;
 800d1c8:	e018      	b.n	800d1fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d1ca:	6839      	ldr	r1, [r7, #0]
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f000 fcad 	bl	800db2c <USBD_GetConfig>
          break;
 800d1d2:	e013      	b.n	800d1fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d1d4:	6839      	ldr	r1, [r7, #0]
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f000 fcde 	bl	800db98 <USBD_GetStatus>
          break;
 800d1dc:	e00e      	b.n	800d1fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d1de:	6839      	ldr	r1, [r7, #0]
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 fd0d 	bl	800dc00 <USBD_SetFeature>
          break;
 800d1e6:	e009      	b.n	800d1fc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d1e8:	6839      	ldr	r1, [r7, #0]
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f000 fd31 	bl	800dc52 <USBD_ClrFeature>
          break;
 800d1f0:	e004      	b.n	800d1fc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d1f2:	6839      	ldr	r1, [r7, #0]
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f000 fd88 	bl	800dd0a <USBD_CtlError>
          break;
 800d1fa:	bf00      	nop
      }
      break;
 800d1fc:	e004      	b.n	800d208 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d1fe:	6839      	ldr	r1, [r7, #0]
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f000 fd82 	bl	800dd0a <USBD_CtlError>
      break;
 800d206:	bf00      	nop
  }

  return ret;
 800d208:	7bfb      	ldrb	r3, [r7, #15]
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3710      	adds	r7, #16
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}
 800d212:	bf00      	nop

0800d214 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b084      	sub	sp, #16
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d21e:	2300      	movs	r3, #0
 800d220:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d22a:	2b40      	cmp	r3, #64	@ 0x40
 800d22c:	d005      	beq.n	800d23a <USBD_StdItfReq+0x26>
 800d22e:	2b40      	cmp	r3, #64	@ 0x40
 800d230:	d852      	bhi.n	800d2d8 <USBD_StdItfReq+0xc4>
 800d232:	2b00      	cmp	r3, #0
 800d234:	d001      	beq.n	800d23a <USBD_StdItfReq+0x26>
 800d236:	2b20      	cmp	r3, #32
 800d238:	d14e      	bne.n	800d2d8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d240:	b2db      	uxtb	r3, r3
 800d242:	3b01      	subs	r3, #1
 800d244:	2b02      	cmp	r3, #2
 800d246:	d840      	bhi.n	800d2ca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	889b      	ldrh	r3, [r3, #4]
 800d24c:	b2db      	uxtb	r3, r3
 800d24e:	2b01      	cmp	r3, #1
 800d250:	d836      	bhi.n	800d2c0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	889b      	ldrh	r3, [r3, #4]
 800d256:	b2db      	uxtb	r3, r3
 800d258:	4619      	mov	r1, r3
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f7ff fedb 	bl	800d016 <USBD_CoreFindIF>
 800d260:	4603      	mov	r3, r0
 800d262:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d264:	7bbb      	ldrb	r3, [r7, #14]
 800d266:	2bff      	cmp	r3, #255	@ 0xff
 800d268:	d01d      	beq.n	800d2a6 <USBD_StdItfReq+0x92>
 800d26a:	7bbb      	ldrb	r3, [r7, #14]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d11a      	bne.n	800d2a6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d270:	7bba      	ldrb	r2, [r7, #14]
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	32ae      	adds	r2, #174	@ 0xae
 800d276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d27a:	689b      	ldr	r3, [r3, #8]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d00f      	beq.n	800d2a0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d280:	7bba      	ldrb	r2, [r7, #14]
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d288:	7bba      	ldrb	r2, [r7, #14]
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	32ae      	adds	r2, #174	@ 0xae
 800d28e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d292:	689b      	ldr	r3, [r3, #8]
 800d294:	6839      	ldr	r1, [r7, #0]
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	4798      	blx	r3
 800d29a:	4603      	mov	r3, r0
 800d29c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d29e:	e004      	b.n	800d2aa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d2a0:	2303      	movs	r3, #3
 800d2a2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d2a4:	e001      	b.n	800d2aa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d2a6:	2303      	movs	r3, #3
 800d2a8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	88db      	ldrh	r3, [r3, #6]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d110      	bne.n	800d2d4 <USBD_StdItfReq+0xc0>
 800d2b2:	7bfb      	ldrb	r3, [r7, #15]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d10d      	bne.n	800d2d4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f000 fdfd 	bl	800deb8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d2be:	e009      	b.n	800d2d4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d2c0:	6839      	ldr	r1, [r7, #0]
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f000 fd21 	bl	800dd0a <USBD_CtlError>
          break;
 800d2c8:	e004      	b.n	800d2d4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d2ca:	6839      	ldr	r1, [r7, #0]
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f000 fd1c 	bl	800dd0a <USBD_CtlError>
          break;
 800d2d2:	e000      	b.n	800d2d6 <USBD_StdItfReq+0xc2>
          break;
 800d2d4:	bf00      	nop
      }
      break;
 800d2d6:	e004      	b.n	800d2e2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d2d8:	6839      	ldr	r1, [r7, #0]
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f000 fd15 	bl	800dd0a <USBD_CtlError>
      break;
 800d2e0:	bf00      	nop
  }

  return ret;
 800d2e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3710      	adds	r7, #16
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}

0800d2ec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b084      	sub	sp, #16
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	889b      	ldrh	r3, [r3, #4]
 800d2fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	781b      	ldrb	r3, [r3, #0]
 800d304:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d308:	2b40      	cmp	r3, #64	@ 0x40
 800d30a:	d007      	beq.n	800d31c <USBD_StdEPReq+0x30>
 800d30c:	2b40      	cmp	r3, #64	@ 0x40
 800d30e:	f200 817f 	bhi.w	800d610 <USBD_StdEPReq+0x324>
 800d312:	2b00      	cmp	r3, #0
 800d314:	d02a      	beq.n	800d36c <USBD_StdEPReq+0x80>
 800d316:	2b20      	cmp	r3, #32
 800d318:	f040 817a 	bne.w	800d610 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d31c:	7bbb      	ldrb	r3, [r7, #14]
 800d31e:	4619      	mov	r1, r3
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f7ff fe85 	bl	800d030 <USBD_CoreFindEP>
 800d326:	4603      	mov	r3, r0
 800d328:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d32a:	7b7b      	ldrb	r3, [r7, #13]
 800d32c:	2bff      	cmp	r3, #255	@ 0xff
 800d32e:	f000 8174 	beq.w	800d61a <USBD_StdEPReq+0x32e>
 800d332:	7b7b      	ldrb	r3, [r7, #13]
 800d334:	2b00      	cmp	r3, #0
 800d336:	f040 8170 	bne.w	800d61a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d33a:	7b7a      	ldrb	r2, [r7, #13]
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d342:	7b7a      	ldrb	r2, [r7, #13]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	32ae      	adds	r2, #174	@ 0xae
 800d348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d34c:	689b      	ldr	r3, [r3, #8]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	f000 8163 	beq.w	800d61a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d354:	7b7a      	ldrb	r2, [r7, #13]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	32ae      	adds	r2, #174	@ 0xae
 800d35a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d35e:	689b      	ldr	r3, [r3, #8]
 800d360:	6839      	ldr	r1, [r7, #0]
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	4798      	blx	r3
 800d366:	4603      	mov	r3, r0
 800d368:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d36a:	e156      	b.n	800d61a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	785b      	ldrb	r3, [r3, #1]
 800d370:	2b03      	cmp	r3, #3
 800d372:	d008      	beq.n	800d386 <USBD_StdEPReq+0x9a>
 800d374:	2b03      	cmp	r3, #3
 800d376:	f300 8145 	bgt.w	800d604 <USBD_StdEPReq+0x318>
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	f000 809b 	beq.w	800d4b6 <USBD_StdEPReq+0x1ca>
 800d380:	2b01      	cmp	r3, #1
 800d382:	d03c      	beq.n	800d3fe <USBD_StdEPReq+0x112>
 800d384:	e13e      	b.n	800d604 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d38c:	b2db      	uxtb	r3, r3
 800d38e:	2b02      	cmp	r3, #2
 800d390:	d002      	beq.n	800d398 <USBD_StdEPReq+0xac>
 800d392:	2b03      	cmp	r3, #3
 800d394:	d016      	beq.n	800d3c4 <USBD_StdEPReq+0xd8>
 800d396:	e02c      	b.n	800d3f2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d398:	7bbb      	ldrb	r3, [r7, #14]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d00d      	beq.n	800d3ba <USBD_StdEPReq+0xce>
 800d39e:	7bbb      	ldrb	r3, [r7, #14]
 800d3a0:	2b80      	cmp	r3, #128	@ 0x80
 800d3a2:	d00a      	beq.n	800d3ba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d3a4:	7bbb      	ldrb	r3, [r7, #14]
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f001 fa33 	bl	800e814 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d3ae:	2180      	movs	r1, #128	@ 0x80
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f001 fa2f 	bl	800e814 <USBD_LL_StallEP>
 800d3b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d3b8:	e020      	b.n	800d3fc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d3ba:	6839      	ldr	r1, [r7, #0]
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f000 fca4 	bl	800dd0a <USBD_CtlError>
              break;
 800d3c2:	e01b      	b.n	800d3fc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	885b      	ldrh	r3, [r3, #2]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d10e      	bne.n	800d3ea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d3cc:	7bbb      	ldrb	r3, [r7, #14]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d00b      	beq.n	800d3ea <USBD_StdEPReq+0xfe>
 800d3d2:	7bbb      	ldrb	r3, [r7, #14]
 800d3d4:	2b80      	cmp	r3, #128	@ 0x80
 800d3d6:	d008      	beq.n	800d3ea <USBD_StdEPReq+0xfe>
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	88db      	ldrh	r3, [r3, #6]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d104      	bne.n	800d3ea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d3e0:	7bbb      	ldrb	r3, [r7, #14]
 800d3e2:	4619      	mov	r1, r3
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f001 fa15 	bl	800e814 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	f000 fd64 	bl	800deb8 <USBD_CtlSendStatus>

              break;
 800d3f0:	e004      	b.n	800d3fc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d3f2:	6839      	ldr	r1, [r7, #0]
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f000 fc88 	bl	800dd0a <USBD_CtlError>
              break;
 800d3fa:	bf00      	nop
          }
          break;
 800d3fc:	e107      	b.n	800d60e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d404:	b2db      	uxtb	r3, r3
 800d406:	2b02      	cmp	r3, #2
 800d408:	d002      	beq.n	800d410 <USBD_StdEPReq+0x124>
 800d40a:	2b03      	cmp	r3, #3
 800d40c:	d016      	beq.n	800d43c <USBD_StdEPReq+0x150>
 800d40e:	e04b      	b.n	800d4a8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d410:	7bbb      	ldrb	r3, [r7, #14]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d00d      	beq.n	800d432 <USBD_StdEPReq+0x146>
 800d416:	7bbb      	ldrb	r3, [r7, #14]
 800d418:	2b80      	cmp	r3, #128	@ 0x80
 800d41a:	d00a      	beq.n	800d432 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d41c:	7bbb      	ldrb	r3, [r7, #14]
 800d41e:	4619      	mov	r1, r3
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f001 f9f7 	bl	800e814 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d426:	2180      	movs	r1, #128	@ 0x80
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f001 f9f3 	bl	800e814 <USBD_LL_StallEP>
 800d42e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d430:	e040      	b.n	800d4b4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d432:	6839      	ldr	r1, [r7, #0]
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f000 fc68 	bl	800dd0a <USBD_CtlError>
              break;
 800d43a:	e03b      	b.n	800d4b4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	885b      	ldrh	r3, [r3, #2]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d136      	bne.n	800d4b2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d444:	7bbb      	ldrb	r3, [r7, #14]
 800d446:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d004      	beq.n	800d458 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d44e:	7bbb      	ldrb	r3, [r7, #14]
 800d450:	4619      	mov	r1, r3
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f001 f9fd 	bl	800e852 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f000 fd2d 	bl	800deb8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d45e:	7bbb      	ldrb	r3, [r7, #14]
 800d460:	4619      	mov	r1, r3
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f7ff fde4 	bl	800d030 <USBD_CoreFindEP>
 800d468:	4603      	mov	r3, r0
 800d46a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d46c:	7b7b      	ldrb	r3, [r7, #13]
 800d46e:	2bff      	cmp	r3, #255	@ 0xff
 800d470:	d01f      	beq.n	800d4b2 <USBD_StdEPReq+0x1c6>
 800d472:	7b7b      	ldrb	r3, [r7, #13]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d11c      	bne.n	800d4b2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d478:	7b7a      	ldrb	r2, [r7, #13]
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d480:	7b7a      	ldrb	r2, [r7, #13]
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	32ae      	adds	r2, #174	@ 0xae
 800d486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d48a:	689b      	ldr	r3, [r3, #8]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d010      	beq.n	800d4b2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d490:	7b7a      	ldrb	r2, [r7, #13]
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	32ae      	adds	r2, #174	@ 0xae
 800d496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d49a:	689b      	ldr	r3, [r3, #8]
 800d49c:	6839      	ldr	r1, [r7, #0]
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	4798      	blx	r3
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d4a6:	e004      	b.n	800d4b2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d4a8:	6839      	ldr	r1, [r7, #0]
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f000 fc2d 	bl	800dd0a <USBD_CtlError>
              break;
 800d4b0:	e000      	b.n	800d4b4 <USBD_StdEPReq+0x1c8>
              break;
 800d4b2:	bf00      	nop
          }
          break;
 800d4b4:	e0ab      	b.n	800d60e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d4bc:	b2db      	uxtb	r3, r3
 800d4be:	2b02      	cmp	r3, #2
 800d4c0:	d002      	beq.n	800d4c8 <USBD_StdEPReq+0x1dc>
 800d4c2:	2b03      	cmp	r3, #3
 800d4c4:	d032      	beq.n	800d52c <USBD_StdEPReq+0x240>
 800d4c6:	e097      	b.n	800d5f8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d4c8:	7bbb      	ldrb	r3, [r7, #14]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d007      	beq.n	800d4de <USBD_StdEPReq+0x1f2>
 800d4ce:	7bbb      	ldrb	r3, [r7, #14]
 800d4d0:	2b80      	cmp	r3, #128	@ 0x80
 800d4d2:	d004      	beq.n	800d4de <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d4d4:	6839      	ldr	r1, [r7, #0]
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f000 fc17 	bl	800dd0a <USBD_CtlError>
                break;
 800d4dc:	e091      	b.n	800d602 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d4de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	da0b      	bge.n	800d4fe <USBD_StdEPReq+0x212>
 800d4e6:	7bbb      	ldrb	r3, [r7, #14]
 800d4e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d4ec:	4613      	mov	r3, r2
 800d4ee:	009b      	lsls	r3, r3, #2
 800d4f0:	4413      	add	r3, r2
 800d4f2:	009b      	lsls	r3, r3, #2
 800d4f4:	3310      	adds	r3, #16
 800d4f6:	687a      	ldr	r2, [r7, #4]
 800d4f8:	4413      	add	r3, r2
 800d4fa:	3304      	adds	r3, #4
 800d4fc:	e00b      	b.n	800d516 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d4fe:	7bbb      	ldrb	r3, [r7, #14]
 800d500:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d504:	4613      	mov	r3, r2
 800d506:	009b      	lsls	r3, r3, #2
 800d508:	4413      	add	r3, r2
 800d50a:	009b      	lsls	r3, r3, #2
 800d50c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d510:	687a      	ldr	r2, [r7, #4]
 800d512:	4413      	add	r3, r2
 800d514:	3304      	adds	r3, #4
 800d516:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	2200      	movs	r2, #0
 800d51c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	2202      	movs	r2, #2
 800d522:	4619      	mov	r1, r3
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f000 fc6d 	bl	800de04 <USBD_CtlSendData>
              break;
 800d52a:	e06a      	b.n	800d602 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d52c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d530:	2b00      	cmp	r3, #0
 800d532:	da11      	bge.n	800d558 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d534:	7bbb      	ldrb	r3, [r7, #14]
 800d536:	f003 020f 	and.w	r2, r3, #15
 800d53a:	6879      	ldr	r1, [r7, #4]
 800d53c:	4613      	mov	r3, r2
 800d53e:	009b      	lsls	r3, r3, #2
 800d540:	4413      	add	r3, r2
 800d542:	009b      	lsls	r3, r3, #2
 800d544:	440b      	add	r3, r1
 800d546:	3324      	adds	r3, #36	@ 0x24
 800d548:	881b      	ldrh	r3, [r3, #0]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d117      	bne.n	800d57e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d54e:	6839      	ldr	r1, [r7, #0]
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f000 fbda 	bl	800dd0a <USBD_CtlError>
                  break;
 800d556:	e054      	b.n	800d602 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d558:	7bbb      	ldrb	r3, [r7, #14]
 800d55a:	f003 020f 	and.w	r2, r3, #15
 800d55e:	6879      	ldr	r1, [r7, #4]
 800d560:	4613      	mov	r3, r2
 800d562:	009b      	lsls	r3, r3, #2
 800d564:	4413      	add	r3, r2
 800d566:	009b      	lsls	r3, r3, #2
 800d568:	440b      	add	r3, r1
 800d56a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d56e:	881b      	ldrh	r3, [r3, #0]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d104      	bne.n	800d57e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d574:	6839      	ldr	r1, [r7, #0]
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f000 fbc7 	bl	800dd0a <USBD_CtlError>
                  break;
 800d57c:	e041      	b.n	800d602 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d57e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d582:	2b00      	cmp	r3, #0
 800d584:	da0b      	bge.n	800d59e <USBD_StdEPReq+0x2b2>
 800d586:	7bbb      	ldrb	r3, [r7, #14]
 800d588:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d58c:	4613      	mov	r3, r2
 800d58e:	009b      	lsls	r3, r3, #2
 800d590:	4413      	add	r3, r2
 800d592:	009b      	lsls	r3, r3, #2
 800d594:	3310      	adds	r3, #16
 800d596:	687a      	ldr	r2, [r7, #4]
 800d598:	4413      	add	r3, r2
 800d59a:	3304      	adds	r3, #4
 800d59c:	e00b      	b.n	800d5b6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d59e:	7bbb      	ldrb	r3, [r7, #14]
 800d5a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d5a4:	4613      	mov	r3, r2
 800d5a6:	009b      	lsls	r3, r3, #2
 800d5a8:	4413      	add	r3, r2
 800d5aa:	009b      	lsls	r3, r3, #2
 800d5ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d5b0:	687a      	ldr	r2, [r7, #4]
 800d5b2:	4413      	add	r3, r2
 800d5b4:	3304      	adds	r3, #4
 800d5b6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d5b8:	7bbb      	ldrb	r3, [r7, #14]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d002      	beq.n	800d5c4 <USBD_StdEPReq+0x2d8>
 800d5be:	7bbb      	ldrb	r3, [r7, #14]
 800d5c0:	2b80      	cmp	r3, #128	@ 0x80
 800d5c2:	d103      	bne.n	800d5cc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	601a      	str	r2, [r3, #0]
 800d5ca:	e00e      	b.n	800d5ea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d5cc:	7bbb      	ldrb	r3, [r7, #14]
 800d5ce:	4619      	mov	r1, r3
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f001 f95d 	bl	800e890 <USBD_LL_IsStallEP>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d003      	beq.n	800d5e4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	2201      	movs	r2, #1
 800d5e0:	601a      	str	r2, [r3, #0]
 800d5e2:	e002      	b.n	800d5ea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	2202      	movs	r2, #2
 800d5ee:	4619      	mov	r1, r3
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f000 fc07 	bl	800de04 <USBD_CtlSendData>
              break;
 800d5f6:	e004      	b.n	800d602 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d5f8:	6839      	ldr	r1, [r7, #0]
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f000 fb85 	bl	800dd0a <USBD_CtlError>
              break;
 800d600:	bf00      	nop
          }
          break;
 800d602:	e004      	b.n	800d60e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d604:	6839      	ldr	r1, [r7, #0]
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f000 fb7f 	bl	800dd0a <USBD_CtlError>
          break;
 800d60c:	bf00      	nop
      }
      break;
 800d60e:	e005      	b.n	800d61c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d610:	6839      	ldr	r1, [r7, #0]
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f000 fb79 	bl	800dd0a <USBD_CtlError>
      break;
 800d618:	e000      	b.n	800d61c <USBD_StdEPReq+0x330>
      break;
 800d61a:	bf00      	nop
  }

  return ret;
 800d61c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3710      	adds	r7, #16
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
	...

0800d628 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b084      	sub	sp, #16
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
 800d630:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d632:	2300      	movs	r3, #0
 800d634:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d636:	2300      	movs	r3, #0
 800d638:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d63a:	2300      	movs	r3, #0
 800d63c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	885b      	ldrh	r3, [r3, #2]
 800d642:	0a1b      	lsrs	r3, r3, #8
 800d644:	b29b      	uxth	r3, r3
 800d646:	3b01      	subs	r3, #1
 800d648:	2b0e      	cmp	r3, #14
 800d64a:	f200 8152 	bhi.w	800d8f2 <USBD_GetDescriptor+0x2ca>
 800d64e:	a201      	add	r2, pc, #4	@ (adr r2, 800d654 <USBD_GetDescriptor+0x2c>)
 800d650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d654:	0800d6c5 	.word	0x0800d6c5
 800d658:	0800d6dd 	.word	0x0800d6dd
 800d65c:	0800d71d 	.word	0x0800d71d
 800d660:	0800d8f3 	.word	0x0800d8f3
 800d664:	0800d8f3 	.word	0x0800d8f3
 800d668:	0800d893 	.word	0x0800d893
 800d66c:	0800d8bf 	.word	0x0800d8bf
 800d670:	0800d8f3 	.word	0x0800d8f3
 800d674:	0800d8f3 	.word	0x0800d8f3
 800d678:	0800d8f3 	.word	0x0800d8f3
 800d67c:	0800d8f3 	.word	0x0800d8f3
 800d680:	0800d8f3 	.word	0x0800d8f3
 800d684:	0800d8f3 	.word	0x0800d8f3
 800d688:	0800d8f3 	.word	0x0800d8f3
 800d68c:	0800d691 	.word	0x0800d691
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d696:	69db      	ldr	r3, [r3, #28]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d00b      	beq.n	800d6b4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d6a2:	69db      	ldr	r3, [r3, #28]
 800d6a4:	687a      	ldr	r2, [r7, #4]
 800d6a6:	7c12      	ldrb	r2, [r2, #16]
 800d6a8:	f107 0108 	add.w	r1, r7, #8
 800d6ac:	4610      	mov	r0, r2
 800d6ae:	4798      	blx	r3
 800d6b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d6b2:	e126      	b.n	800d902 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d6b4:	6839      	ldr	r1, [r7, #0]
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f000 fb27 	bl	800dd0a <USBD_CtlError>
        err++;
 800d6bc:	7afb      	ldrb	r3, [r7, #11]
 800d6be:	3301      	adds	r3, #1
 800d6c0:	72fb      	strb	r3, [r7, #11]
      break;
 800d6c2:	e11e      	b.n	800d902 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	687a      	ldr	r2, [r7, #4]
 800d6ce:	7c12      	ldrb	r2, [r2, #16]
 800d6d0:	f107 0108 	add.w	r1, r7, #8
 800d6d4:	4610      	mov	r0, r2
 800d6d6:	4798      	blx	r3
 800d6d8:	60f8      	str	r0, [r7, #12]
      break;
 800d6da:	e112      	b.n	800d902 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	7c1b      	ldrb	r3, [r3, #16]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d10d      	bne.n	800d700 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d6ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6ec:	f107 0208 	add.w	r2, r7, #8
 800d6f0:	4610      	mov	r0, r2
 800d6f2:	4798      	blx	r3
 800d6f4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	3301      	adds	r3, #1
 800d6fa:	2202      	movs	r2, #2
 800d6fc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d6fe:	e100      	b.n	800d902 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d708:	f107 0208 	add.w	r2, r7, #8
 800d70c:	4610      	mov	r0, r2
 800d70e:	4798      	blx	r3
 800d710:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	3301      	adds	r3, #1
 800d716:	2202      	movs	r2, #2
 800d718:	701a      	strb	r2, [r3, #0]
      break;
 800d71a:	e0f2      	b.n	800d902 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	885b      	ldrh	r3, [r3, #2]
 800d720:	b2db      	uxtb	r3, r3
 800d722:	2b05      	cmp	r3, #5
 800d724:	f200 80ac 	bhi.w	800d880 <USBD_GetDescriptor+0x258>
 800d728:	a201      	add	r2, pc, #4	@ (adr r2, 800d730 <USBD_GetDescriptor+0x108>)
 800d72a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d72e:	bf00      	nop
 800d730:	0800d749 	.word	0x0800d749
 800d734:	0800d77d 	.word	0x0800d77d
 800d738:	0800d7b1 	.word	0x0800d7b1
 800d73c:	0800d7e5 	.word	0x0800d7e5
 800d740:	0800d819 	.word	0x0800d819
 800d744:	0800d84d 	.word	0x0800d84d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d74e:	685b      	ldr	r3, [r3, #4]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d00b      	beq.n	800d76c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	687a      	ldr	r2, [r7, #4]
 800d75e:	7c12      	ldrb	r2, [r2, #16]
 800d760:	f107 0108 	add.w	r1, r7, #8
 800d764:	4610      	mov	r0, r2
 800d766:	4798      	blx	r3
 800d768:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d76a:	e091      	b.n	800d890 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d76c:	6839      	ldr	r1, [r7, #0]
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f000 facb 	bl	800dd0a <USBD_CtlError>
            err++;
 800d774:	7afb      	ldrb	r3, [r7, #11]
 800d776:	3301      	adds	r3, #1
 800d778:	72fb      	strb	r3, [r7, #11]
          break;
 800d77a:	e089      	b.n	800d890 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d782:	689b      	ldr	r3, [r3, #8]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d00b      	beq.n	800d7a0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d78e:	689b      	ldr	r3, [r3, #8]
 800d790:	687a      	ldr	r2, [r7, #4]
 800d792:	7c12      	ldrb	r2, [r2, #16]
 800d794:	f107 0108 	add.w	r1, r7, #8
 800d798:	4610      	mov	r0, r2
 800d79a:	4798      	blx	r3
 800d79c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d79e:	e077      	b.n	800d890 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d7a0:	6839      	ldr	r1, [r7, #0]
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f000 fab1 	bl	800dd0a <USBD_CtlError>
            err++;
 800d7a8:	7afb      	ldrb	r3, [r7, #11]
 800d7aa:	3301      	adds	r3, #1
 800d7ac:	72fb      	strb	r3, [r7, #11]
          break;
 800d7ae:	e06f      	b.n	800d890 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d7b6:	68db      	ldr	r3, [r3, #12]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d00b      	beq.n	800d7d4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d7c2:	68db      	ldr	r3, [r3, #12]
 800d7c4:	687a      	ldr	r2, [r7, #4]
 800d7c6:	7c12      	ldrb	r2, [r2, #16]
 800d7c8:	f107 0108 	add.w	r1, r7, #8
 800d7cc:	4610      	mov	r0, r2
 800d7ce:	4798      	blx	r3
 800d7d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d7d2:	e05d      	b.n	800d890 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d7d4:	6839      	ldr	r1, [r7, #0]
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f000 fa97 	bl	800dd0a <USBD_CtlError>
            err++;
 800d7dc:	7afb      	ldrb	r3, [r7, #11]
 800d7de:	3301      	adds	r3, #1
 800d7e0:	72fb      	strb	r3, [r7, #11]
          break;
 800d7e2:	e055      	b.n	800d890 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d7ea:	691b      	ldr	r3, [r3, #16]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d00b      	beq.n	800d808 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d7f6:	691b      	ldr	r3, [r3, #16]
 800d7f8:	687a      	ldr	r2, [r7, #4]
 800d7fa:	7c12      	ldrb	r2, [r2, #16]
 800d7fc:	f107 0108 	add.w	r1, r7, #8
 800d800:	4610      	mov	r0, r2
 800d802:	4798      	blx	r3
 800d804:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d806:	e043      	b.n	800d890 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d808:	6839      	ldr	r1, [r7, #0]
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f000 fa7d 	bl	800dd0a <USBD_CtlError>
            err++;
 800d810:	7afb      	ldrb	r3, [r7, #11]
 800d812:	3301      	adds	r3, #1
 800d814:	72fb      	strb	r3, [r7, #11]
          break;
 800d816:	e03b      	b.n	800d890 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d81e:	695b      	ldr	r3, [r3, #20]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d00b      	beq.n	800d83c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d82a:	695b      	ldr	r3, [r3, #20]
 800d82c:	687a      	ldr	r2, [r7, #4]
 800d82e:	7c12      	ldrb	r2, [r2, #16]
 800d830:	f107 0108 	add.w	r1, r7, #8
 800d834:	4610      	mov	r0, r2
 800d836:	4798      	blx	r3
 800d838:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d83a:	e029      	b.n	800d890 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d83c:	6839      	ldr	r1, [r7, #0]
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f000 fa63 	bl	800dd0a <USBD_CtlError>
            err++;
 800d844:	7afb      	ldrb	r3, [r7, #11]
 800d846:	3301      	adds	r3, #1
 800d848:	72fb      	strb	r3, [r7, #11]
          break;
 800d84a:	e021      	b.n	800d890 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d852:	699b      	ldr	r3, [r3, #24]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d00b      	beq.n	800d870 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d85e:	699b      	ldr	r3, [r3, #24]
 800d860:	687a      	ldr	r2, [r7, #4]
 800d862:	7c12      	ldrb	r2, [r2, #16]
 800d864:	f107 0108 	add.w	r1, r7, #8
 800d868:	4610      	mov	r0, r2
 800d86a:	4798      	blx	r3
 800d86c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d86e:	e00f      	b.n	800d890 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d870:	6839      	ldr	r1, [r7, #0]
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f000 fa49 	bl	800dd0a <USBD_CtlError>
            err++;
 800d878:	7afb      	ldrb	r3, [r7, #11]
 800d87a:	3301      	adds	r3, #1
 800d87c:	72fb      	strb	r3, [r7, #11]
          break;
 800d87e:	e007      	b.n	800d890 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d880:	6839      	ldr	r1, [r7, #0]
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	f000 fa41 	bl	800dd0a <USBD_CtlError>
          err++;
 800d888:	7afb      	ldrb	r3, [r7, #11]
 800d88a:	3301      	adds	r3, #1
 800d88c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d88e:	bf00      	nop
      }
      break;
 800d890:	e037      	b.n	800d902 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	7c1b      	ldrb	r3, [r3, #16]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d109      	bne.n	800d8ae <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8a2:	f107 0208 	add.w	r2, r7, #8
 800d8a6:	4610      	mov	r0, r2
 800d8a8:	4798      	blx	r3
 800d8aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d8ac:	e029      	b.n	800d902 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d8ae:	6839      	ldr	r1, [r7, #0]
 800d8b0:	6878      	ldr	r0, [r7, #4]
 800d8b2:	f000 fa2a 	bl	800dd0a <USBD_CtlError>
        err++;
 800d8b6:	7afb      	ldrb	r3, [r7, #11]
 800d8b8:	3301      	adds	r3, #1
 800d8ba:	72fb      	strb	r3, [r7, #11]
      break;
 800d8bc:	e021      	b.n	800d902 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	7c1b      	ldrb	r3, [r3, #16]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d10d      	bne.n	800d8e2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d8ce:	f107 0208 	add.w	r2, r7, #8
 800d8d2:	4610      	mov	r0, r2
 800d8d4:	4798      	blx	r3
 800d8d6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	3301      	adds	r3, #1
 800d8dc:	2207      	movs	r2, #7
 800d8de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d8e0:	e00f      	b.n	800d902 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d8e2:	6839      	ldr	r1, [r7, #0]
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	f000 fa10 	bl	800dd0a <USBD_CtlError>
        err++;
 800d8ea:	7afb      	ldrb	r3, [r7, #11]
 800d8ec:	3301      	adds	r3, #1
 800d8ee:	72fb      	strb	r3, [r7, #11]
      break;
 800d8f0:	e007      	b.n	800d902 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d8f2:	6839      	ldr	r1, [r7, #0]
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f000 fa08 	bl	800dd0a <USBD_CtlError>
      err++;
 800d8fa:	7afb      	ldrb	r3, [r7, #11]
 800d8fc:	3301      	adds	r3, #1
 800d8fe:	72fb      	strb	r3, [r7, #11]
      break;
 800d900:	bf00      	nop
  }

  if (err != 0U)
 800d902:	7afb      	ldrb	r3, [r7, #11]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d11e      	bne.n	800d946 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	88db      	ldrh	r3, [r3, #6]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d016      	beq.n	800d93e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d910:	893b      	ldrh	r3, [r7, #8]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d00e      	beq.n	800d934 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	88da      	ldrh	r2, [r3, #6]
 800d91a:	893b      	ldrh	r3, [r7, #8]
 800d91c:	4293      	cmp	r3, r2
 800d91e:	bf28      	it	cs
 800d920:	4613      	movcs	r3, r2
 800d922:	b29b      	uxth	r3, r3
 800d924:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d926:	893b      	ldrh	r3, [r7, #8]
 800d928:	461a      	mov	r2, r3
 800d92a:	68f9      	ldr	r1, [r7, #12]
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f000 fa69 	bl	800de04 <USBD_CtlSendData>
 800d932:	e009      	b.n	800d948 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d934:	6839      	ldr	r1, [r7, #0]
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f000 f9e7 	bl	800dd0a <USBD_CtlError>
 800d93c:	e004      	b.n	800d948 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	f000 faba 	bl	800deb8 <USBD_CtlSendStatus>
 800d944:	e000      	b.n	800d948 <USBD_GetDescriptor+0x320>
    return;
 800d946:	bf00      	nop
  }
}
 800d948:	3710      	adds	r7, #16
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}
 800d94e:	bf00      	nop

0800d950 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b084      	sub	sp, #16
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	889b      	ldrh	r3, [r3, #4]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d131      	bne.n	800d9c6 <USBD_SetAddress+0x76>
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	88db      	ldrh	r3, [r3, #6]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d12d      	bne.n	800d9c6 <USBD_SetAddress+0x76>
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	885b      	ldrh	r3, [r3, #2]
 800d96e:	2b7f      	cmp	r3, #127	@ 0x7f
 800d970:	d829      	bhi.n	800d9c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	885b      	ldrh	r3, [r3, #2]
 800d976:	b2db      	uxtb	r3, r3
 800d978:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d97c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d984:	b2db      	uxtb	r3, r3
 800d986:	2b03      	cmp	r3, #3
 800d988:	d104      	bne.n	800d994 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d98a:	6839      	ldr	r1, [r7, #0]
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f000 f9bc 	bl	800dd0a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d992:	e01d      	b.n	800d9d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	7bfa      	ldrb	r2, [r7, #15]
 800d998:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d99c:	7bfb      	ldrb	r3, [r7, #15]
 800d99e:	4619      	mov	r1, r3
 800d9a0:	6878      	ldr	r0, [r7, #4]
 800d9a2:	f000 ffa1 	bl	800e8e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	f000 fa86 	bl	800deb8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d9ac:	7bfb      	ldrb	r3, [r7, #15]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d004      	beq.n	800d9bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2202      	movs	r2, #2
 800d9b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9ba:	e009      	b.n	800d9d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2201      	movs	r2, #1
 800d9c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9c4:	e004      	b.n	800d9d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d9c6:	6839      	ldr	r1, [r7, #0]
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f000 f99e 	bl	800dd0a <USBD_CtlError>
  }
}
 800d9ce:	bf00      	nop
 800d9d0:	bf00      	nop
 800d9d2:	3710      	adds	r7, #16
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}

0800d9d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b084      	sub	sp, #16
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
 800d9e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	885b      	ldrh	r3, [r3, #2]
 800d9ea:	b2da      	uxtb	r2, r3
 800d9ec:	4b4e      	ldr	r3, [pc, #312]	@ (800db28 <USBD_SetConfig+0x150>)
 800d9ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d9f0:	4b4d      	ldr	r3, [pc, #308]	@ (800db28 <USBD_SetConfig+0x150>)
 800d9f2:	781b      	ldrb	r3, [r3, #0]
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	d905      	bls.n	800da04 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d9f8:	6839      	ldr	r1, [r7, #0]
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f000 f985 	bl	800dd0a <USBD_CtlError>
    return USBD_FAIL;
 800da00:	2303      	movs	r3, #3
 800da02:	e08c      	b.n	800db1e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da0a:	b2db      	uxtb	r3, r3
 800da0c:	2b02      	cmp	r3, #2
 800da0e:	d002      	beq.n	800da16 <USBD_SetConfig+0x3e>
 800da10:	2b03      	cmp	r3, #3
 800da12:	d029      	beq.n	800da68 <USBD_SetConfig+0x90>
 800da14:	e075      	b.n	800db02 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800da16:	4b44      	ldr	r3, [pc, #272]	@ (800db28 <USBD_SetConfig+0x150>)
 800da18:	781b      	ldrb	r3, [r3, #0]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d020      	beq.n	800da60 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800da1e:	4b42      	ldr	r3, [pc, #264]	@ (800db28 <USBD_SetConfig+0x150>)
 800da20:	781b      	ldrb	r3, [r3, #0]
 800da22:	461a      	mov	r2, r3
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800da28:	4b3f      	ldr	r3, [pc, #252]	@ (800db28 <USBD_SetConfig+0x150>)
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	4619      	mov	r1, r3
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f7fe ffb9 	bl	800c9a6 <USBD_SetClassConfig>
 800da34:	4603      	mov	r3, r0
 800da36:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800da38:	7bfb      	ldrb	r3, [r7, #15]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d008      	beq.n	800da50 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800da3e:	6839      	ldr	r1, [r7, #0]
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f000 f962 	bl	800dd0a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2202      	movs	r2, #2
 800da4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800da4e:	e065      	b.n	800db1c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f000 fa31 	bl	800deb8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2203      	movs	r2, #3
 800da5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800da5e:	e05d      	b.n	800db1c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f000 fa29 	bl	800deb8 <USBD_CtlSendStatus>
      break;
 800da66:	e059      	b.n	800db1c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800da68:	4b2f      	ldr	r3, [pc, #188]	@ (800db28 <USBD_SetConfig+0x150>)
 800da6a:	781b      	ldrb	r3, [r3, #0]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d112      	bne.n	800da96 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2202      	movs	r2, #2
 800da74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800da78:	4b2b      	ldr	r3, [pc, #172]	@ (800db28 <USBD_SetConfig+0x150>)
 800da7a:	781b      	ldrb	r3, [r3, #0]
 800da7c:	461a      	mov	r2, r3
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800da82:	4b29      	ldr	r3, [pc, #164]	@ (800db28 <USBD_SetConfig+0x150>)
 800da84:	781b      	ldrb	r3, [r3, #0]
 800da86:	4619      	mov	r1, r3
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f7fe ffa8 	bl	800c9de <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f000 fa12 	bl	800deb8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800da94:	e042      	b.n	800db1c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800da96:	4b24      	ldr	r3, [pc, #144]	@ (800db28 <USBD_SetConfig+0x150>)
 800da98:	781b      	ldrb	r3, [r3, #0]
 800da9a:	461a      	mov	r2, r3
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	685b      	ldr	r3, [r3, #4]
 800daa0:	429a      	cmp	r2, r3
 800daa2:	d02a      	beq.n	800dafa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	685b      	ldr	r3, [r3, #4]
 800daa8:	b2db      	uxtb	r3, r3
 800daaa:	4619      	mov	r1, r3
 800daac:	6878      	ldr	r0, [r7, #4]
 800daae:	f7fe ff96 	bl	800c9de <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800dab2:	4b1d      	ldr	r3, [pc, #116]	@ (800db28 <USBD_SetConfig+0x150>)
 800dab4:	781b      	ldrb	r3, [r3, #0]
 800dab6:	461a      	mov	r2, r3
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dabc:	4b1a      	ldr	r3, [pc, #104]	@ (800db28 <USBD_SetConfig+0x150>)
 800dabe:	781b      	ldrb	r3, [r3, #0]
 800dac0:	4619      	mov	r1, r3
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f7fe ff6f 	bl	800c9a6 <USBD_SetClassConfig>
 800dac8:	4603      	mov	r3, r0
 800daca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800dacc:	7bfb      	ldrb	r3, [r7, #15]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d00f      	beq.n	800daf2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800dad2:	6839      	ldr	r1, [r7, #0]
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	f000 f918 	bl	800dd0a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	685b      	ldr	r3, [r3, #4]
 800dade:	b2db      	uxtb	r3, r3
 800dae0:	4619      	mov	r1, r3
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f7fe ff7b 	bl	800c9de <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2202      	movs	r2, #2
 800daec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800daf0:	e014      	b.n	800db1c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f000 f9e0 	bl	800deb8 <USBD_CtlSendStatus>
      break;
 800daf8:	e010      	b.n	800db1c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f000 f9dc 	bl	800deb8 <USBD_CtlSendStatus>
      break;
 800db00:	e00c      	b.n	800db1c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800db02:	6839      	ldr	r1, [r7, #0]
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	f000 f900 	bl	800dd0a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800db0a:	4b07      	ldr	r3, [pc, #28]	@ (800db28 <USBD_SetConfig+0x150>)
 800db0c:	781b      	ldrb	r3, [r3, #0]
 800db0e:	4619      	mov	r1, r3
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f7fe ff64 	bl	800c9de <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800db16:	2303      	movs	r3, #3
 800db18:	73fb      	strb	r3, [r7, #15]
      break;
 800db1a:	bf00      	nop
  }

  return ret;
 800db1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800db1e:	4618      	mov	r0, r3
 800db20:	3710      	adds	r7, #16
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}
 800db26:	bf00      	nop
 800db28:	20000b78 	.word	0x20000b78

0800db2c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b082      	sub	sp, #8
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
 800db34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	88db      	ldrh	r3, [r3, #6]
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	d004      	beq.n	800db48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800db3e:	6839      	ldr	r1, [r7, #0]
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f000 f8e2 	bl	800dd0a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800db46:	e023      	b.n	800db90 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db4e:	b2db      	uxtb	r3, r3
 800db50:	2b02      	cmp	r3, #2
 800db52:	dc02      	bgt.n	800db5a <USBD_GetConfig+0x2e>
 800db54:	2b00      	cmp	r3, #0
 800db56:	dc03      	bgt.n	800db60 <USBD_GetConfig+0x34>
 800db58:	e015      	b.n	800db86 <USBD_GetConfig+0x5a>
 800db5a:	2b03      	cmp	r3, #3
 800db5c:	d00b      	beq.n	800db76 <USBD_GetConfig+0x4a>
 800db5e:	e012      	b.n	800db86 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2200      	movs	r2, #0
 800db64:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	3308      	adds	r3, #8
 800db6a:	2201      	movs	r2, #1
 800db6c:	4619      	mov	r1, r3
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f000 f948 	bl	800de04 <USBD_CtlSendData>
        break;
 800db74:	e00c      	b.n	800db90 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	3304      	adds	r3, #4
 800db7a:	2201      	movs	r2, #1
 800db7c:	4619      	mov	r1, r3
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f000 f940 	bl	800de04 <USBD_CtlSendData>
        break;
 800db84:	e004      	b.n	800db90 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800db86:	6839      	ldr	r1, [r7, #0]
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f000 f8be 	bl	800dd0a <USBD_CtlError>
        break;
 800db8e:	bf00      	nop
}
 800db90:	bf00      	nop
 800db92:	3708      	adds	r7, #8
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}

0800db98 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b082      	sub	sp, #8
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
 800dba0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dba8:	b2db      	uxtb	r3, r3
 800dbaa:	3b01      	subs	r3, #1
 800dbac:	2b02      	cmp	r3, #2
 800dbae:	d81e      	bhi.n	800dbee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	88db      	ldrh	r3, [r3, #6]
 800dbb4:	2b02      	cmp	r3, #2
 800dbb6:	d004      	beq.n	800dbc2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800dbb8:	6839      	ldr	r1, [r7, #0]
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f000 f8a5 	bl	800dd0a <USBD_CtlError>
        break;
 800dbc0:	e01a      	b.n	800dbf8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2201      	movs	r2, #1
 800dbc6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d005      	beq.n	800dbde <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	68db      	ldr	r3, [r3, #12]
 800dbd6:	f043 0202 	orr.w	r2, r3, #2
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	330c      	adds	r3, #12
 800dbe2:	2202      	movs	r2, #2
 800dbe4:	4619      	mov	r1, r3
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f000 f90c 	bl	800de04 <USBD_CtlSendData>
      break;
 800dbec:	e004      	b.n	800dbf8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800dbee:	6839      	ldr	r1, [r7, #0]
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f000 f88a 	bl	800dd0a <USBD_CtlError>
      break;
 800dbf6:	bf00      	nop
  }
}
 800dbf8:	bf00      	nop
 800dbfa:	3708      	adds	r7, #8
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}

0800dc00 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b082      	sub	sp, #8
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
 800dc08:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	885b      	ldrh	r3, [r3, #2]
 800dc0e:	2b01      	cmp	r3, #1
 800dc10:	d107      	bne.n	800dc22 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2201      	movs	r2, #1
 800dc16:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	f000 f94c 	bl	800deb8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800dc20:	e013      	b.n	800dc4a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	885b      	ldrh	r3, [r3, #2]
 800dc26:	2b02      	cmp	r3, #2
 800dc28:	d10b      	bne.n	800dc42 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	889b      	ldrh	r3, [r3, #4]
 800dc2e:	0a1b      	lsrs	r3, r3, #8
 800dc30:	b29b      	uxth	r3, r3
 800dc32:	b2da      	uxtb	r2, r3
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f000 f93c 	bl	800deb8 <USBD_CtlSendStatus>
}
 800dc40:	e003      	b.n	800dc4a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800dc42:	6839      	ldr	r1, [r7, #0]
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f000 f860 	bl	800dd0a <USBD_CtlError>
}
 800dc4a:	bf00      	nop
 800dc4c:	3708      	adds	r7, #8
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}

0800dc52 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc52:	b580      	push	{r7, lr}
 800dc54:	b082      	sub	sp, #8
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	6078      	str	r0, [r7, #4]
 800dc5a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc62:	b2db      	uxtb	r3, r3
 800dc64:	3b01      	subs	r3, #1
 800dc66:	2b02      	cmp	r3, #2
 800dc68:	d80b      	bhi.n	800dc82 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	885b      	ldrh	r3, [r3, #2]
 800dc6e:	2b01      	cmp	r3, #1
 800dc70:	d10c      	bne.n	800dc8c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2200      	movs	r2, #0
 800dc76:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f000 f91c 	bl	800deb8 <USBD_CtlSendStatus>
      }
      break;
 800dc80:	e004      	b.n	800dc8c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800dc82:	6839      	ldr	r1, [r7, #0]
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f000 f840 	bl	800dd0a <USBD_CtlError>
      break;
 800dc8a:	e000      	b.n	800dc8e <USBD_ClrFeature+0x3c>
      break;
 800dc8c:	bf00      	nop
  }
}
 800dc8e:	bf00      	nop
 800dc90:	3708      	adds	r7, #8
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}

0800dc96 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dc96:	b580      	push	{r7, lr}
 800dc98:	b084      	sub	sp, #16
 800dc9a:	af00      	add	r7, sp, #0
 800dc9c:	6078      	str	r0, [r7, #4]
 800dc9e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	781a      	ldrb	r2, [r3, #0]
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	3301      	adds	r3, #1
 800dcb0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	781a      	ldrb	r2, [r3, #0]
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	3301      	adds	r3, #1
 800dcbe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800dcc0:	68f8      	ldr	r0, [r7, #12]
 800dcc2:	f7ff fa16 	bl	800d0f2 <SWAPBYTE>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	461a      	mov	r2, r3
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	3301      	adds	r3, #1
 800dcd2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	3301      	adds	r3, #1
 800dcd8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800dcda:	68f8      	ldr	r0, [r7, #12]
 800dcdc:	f7ff fa09 	bl	800d0f2 <SWAPBYTE>
 800dce0:	4603      	mov	r3, r0
 800dce2:	461a      	mov	r2, r3
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	3301      	adds	r3, #1
 800dcec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	3301      	adds	r3, #1
 800dcf2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dcf4:	68f8      	ldr	r0, [r7, #12]
 800dcf6:	f7ff f9fc 	bl	800d0f2 <SWAPBYTE>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	461a      	mov	r2, r3
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	80da      	strh	r2, [r3, #6]
}
 800dd02:	bf00      	nop
 800dd04:	3710      	adds	r7, #16
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}

0800dd0a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd0a:	b580      	push	{r7, lr}
 800dd0c:	b082      	sub	sp, #8
 800dd0e:	af00      	add	r7, sp, #0
 800dd10:	6078      	str	r0, [r7, #4]
 800dd12:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd14:	2180      	movs	r1, #128	@ 0x80
 800dd16:	6878      	ldr	r0, [r7, #4]
 800dd18:	f000 fd7c 	bl	800e814 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dd1c:	2100      	movs	r1, #0
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f000 fd78 	bl	800e814 <USBD_LL_StallEP>
}
 800dd24:	bf00      	nop
 800dd26:	3708      	adds	r7, #8
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bd80      	pop	{r7, pc}

0800dd2c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b086      	sub	sp, #24
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	60f8      	str	r0, [r7, #12]
 800dd34:	60b9      	str	r1, [r7, #8]
 800dd36:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dd38:	2300      	movs	r3, #0
 800dd3a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d042      	beq.n	800ddc8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800dd46:	6938      	ldr	r0, [r7, #16]
 800dd48:	f000 f842 	bl	800ddd0 <USBD_GetLen>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	3301      	adds	r3, #1
 800dd50:	005b      	lsls	r3, r3, #1
 800dd52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd56:	d808      	bhi.n	800dd6a <USBD_GetString+0x3e>
 800dd58:	6938      	ldr	r0, [r7, #16]
 800dd5a:	f000 f839 	bl	800ddd0 <USBD_GetLen>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	3301      	adds	r3, #1
 800dd62:	b29b      	uxth	r3, r3
 800dd64:	005b      	lsls	r3, r3, #1
 800dd66:	b29a      	uxth	r2, r3
 800dd68:	e001      	b.n	800dd6e <USBD_GetString+0x42>
 800dd6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800dd72:	7dfb      	ldrb	r3, [r7, #23]
 800dd74:	68ba      	ldr	r2, [r7, #8]
 800dd76:	4413      	add	r3, r2
 800dd78:	687a      	ldr	r2, [r7, #4]
 800dd7a:	7812      	ldrb	r2, [r2, #0]
 800dd7c:	701a      	strb	r2, [r3, #0]
  idx++;
 800dd7e:	7dfb      	ldrb	r3, [r7, #23]
 800dd80:	3301      	adds	r3, #1
 800dd82:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800dd84:	7dfb      	ldrb	r3, [r7, #23]
 800dd86:	68ba      	ldr	r2, [r7, #8]
 800dd88:	4413      	add	r3, r2
 800dd8a:	2203      	movs	r2, #3
 800dd8c:	701a      	strb	r2, [r3, #0]
  idx++;
 800dd8e:	7dfb      	ldrb	r3, [r7, #23]
 800dd90:	3301      	adds	r3, #1
 800dd92:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dd94:	e013      	b.n	800ddbe <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800dd96:	7dfb      	ldrb	r3, [r7, #23]
 800dd98:	68ba      	ldr	r2, [r7, #8]
 800dd9a:	4413      	add	r3, r2
 800dd9c:	693a      	ldr	r2, [r7, #16]
 800dd9e:	7812      	ldrb	r2, [r2, #0]
 800dda0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dda2:	693b      	ldr	r3, [r7, #16]
 800dda4:	3301      	adds	r3, #1
 800dda6:	613b      	str	r3, [r7, #16]
    idx++;
 800dda8:	7dfb      	ldrb	r3, [r7, #23]
 800ddaa:	3301      	adds	r3, #1
 800ddac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ddae:	7dfb      	ldrb	r3, [r7, #23]
 800ddb0:	68ba      	ldr	r2, [r7, #8]
 800ddb2:	4413      	add	r3, r2
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	701a      	strb	r2, [r3, #0]
    idx++;
 800ddb8:	7dfb      	ldrb	r3, [r7, #23]
 800ddba:	3301      	adds	r3, #1
 800ddbc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ddbe:	693b      	ldr	r3, [r7, #16]
 800ddc0:	781b      	ldrb	r3, [r3, #0]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d1e7      	bne.n	800dd96 <USBD_GetString+0x6a>
 800ddc6:	e000      	b.n	800ddca <USBD_GetString+0x9e>
    return;
 800ddc8:	bf00      	nop
  }
}
 800ddca:	3718      	adds	r7, #24
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}

0800ddd0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b085      	sub	sp, #20
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dde0:	e005      	b.n	800ddee <USBD_GetLen+0x1e>
  {
    len++;
 800dde2:	7bfb      	ldrb	r3, [r7, #15]
 800dde4:	3301      	adds	r3, #1
 800dde6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	3301      	adds	r3, #1
 800ddec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	781b      	ldrb	r3, [r3, #0]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d1f5      	bne.n	800dde2 <USBD_GetLen+0x12>
  }

  return len;
 800ddf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3714      	adds	r7, #20
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de02:	4770      	bx	lr

0800de04 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b084      	sub	sp, #16
 800de08:	af00      	add	r7, sp, #0
 800de0a:	60f8      	str	r0, [r7, #12]
 800de0c:	60b9      	str	r1, [r7, #8]
 800de0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	2202      	movs	r2, #2
 800de14:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	687a      	ldr	r2, [r7, #4]
 800de1c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	687a      	ldr	r2, [r7, #4]
 800de22:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	68ba      	ldr	r2, [r7, #8]
 800de28:	2100      	movs	r1, #0
 800de2a:	68f8      	ldr	r0, [r7, #12]
 800de2c:	f000 fd7b 	bl	800e926 <USBD_LL_Transmit>

  return USBD_OK;
 800de30:	2300      	movs	r3, #0
}
 800de32:	4618      	mov	r0, r3
 800de34:	3710      	adds	r7, #16
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}

0800de3a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800de3a:	b580      	push	{r7, lr}
 800de3c:	b084      	sub	sp, #16
 800de3e:	af00      	add	r7, sp, #0
 800de40:	60f8      	str	r0, [r7, #12]
 800de42:	60b9      	str	r1, [r7, #8]
 800de44:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	68ba      	ldr	r2, [r7, #8]
 800de4a:	2100      	movs	r1, #0
 800de4c:	68f8      	ldr	r0, [r7, #12]
 800de4e:	f000 fd6a 	bl	800e926 <USBD_LL_Transmit>

  return USBD_OK;
 800de52:	2300      	movs	r3, #0
}
 800de54:	4618      	mov	r0, r3
 800de56:	3710      	adds	r7, #16
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}

0800de5c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b084      	sub	sp, #16
 800de60:	af00      	add	r7, sp, #0
 800de62:	60f8      	str	r0, [r7, #12]
 800de64:	60b9      	str	r1, [r7, #8]
 800de66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	2203      	movs	r2, #3
 800de6c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	687a      	ldr	r2, [r7, #4]
 800de74:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	687a      	ldr	r2, [r7, #4]
 800de7c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	68ba      	ldr	r2, [r7, #8]
 800de84:	2100      	movs	r1, #0
 800de86:	68f8      	ldr	r0, [r7, #12]
 800de88:	f000 fd6e 	bl	800e968 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800de8c:	2300      	movs	r3, #0
}
 800de8e:	4618      	mov	r0, r3
 800de90:	3710      	adds	r7, #16
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}

0800de96 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800de96:	b580      	push	{r7, lr}
 800de98:	b084      	sub	sp, #16
 800de9a:	af00      	add	r7, sp, #0
 800de9c:	60f8      	str	r0, [r7, #12]
 800de9e:	60b9      	str	r1, [r7, #8]
 800dea0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	68ba      	ldr	r2, [r7, #8]
 800dea6:	2100      	movs	r1, #0
 800dea8:	68f8      	ldr	r0, [r7, #12]
 800deaa:	f000 fd5d 	bl	800e968 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800deae:	2300      	movs	r3, #0
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3710      	adds	r7, #16
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}

0800deb8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b082      	sub	sp, #8
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2204      	movs	r2, #4
 800dec4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dec8:	2300      	movs	r3, #0
 800deca:	2200      	movs	r2, #0
 800decc:	2100      	movs	r1, #0
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f000 fd29 	bl	800e926 <USBD_LL_Transmit>

  return USBD_OK;
 800ded4:	2300      	movs	r3, #0
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3708      	adds	r7, #8
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}

0800dede <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dede:	b580      	push	{r7, lr}
 800dee0:	b082      	sub	sp, #8
 800dee2:	af00      	add	r7, sp, #0
 800dee4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	2205      	movs	r2, #5
 800deea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800deee:	2300      	movs	r3, #0
 800def0:	2200      	movs	r2, #0
 800def2:	2100      	movs	r1, #0
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f000 fd37 	bl	800e968 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800defa:	2300      	movs	r3, #0
}
 800defc:	4618      	mov	r0, r3
 800defe:	3708      	adds	r7, #8
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}

0800df04 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800df04:	b480      	push	{r7}
 800df06:	b087      	sub	sp, #28
 800df08:	af00      	add	r7, sp, #0
 800df0a:	60f8      	str	r0, [r7, #12]
 800df0c:	60b9      	str	r1, [r7, #8]
 800df0e:	4613      	mov	r3, r2
 800df10:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800df12:	2301      	movs	r3, #1
 800df14:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800df16:	2300      	movs	r3, #0
 800df18:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800df1a:	4b1f      	ldr	r3, [pc, #124]	@ (800df98 <FATFS_LinkDriverEx+0x94>)
 800df1c:	7a5b      	ldrb	r3, [r3, #9]
 800df1e:	b2db      	uxtb	r3, r3
 800df20:	2b00      	cmp	r3, #0
 800df22:	d131      	bne.n	800df88 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800df24:	4b1c      	ldr	r3, [pc, #112]	@ (800df98 <FATFS_LinkDriverEx+0x94>)
 800df26:	7a5b      	ldrb	r3, [r3, #9]
 800df28:	b2db      	uxtb	r3, r3
 800df2a:	461a      	mov	r2, r3
 800df2c:	4b1a      	ldr	r3, [pc, #104]	@ (800df98 <FATFS_LinkDriverEx+0x94>)
 800df2e:	2100      	movs	r1, #0
 800df30:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800df32:	4b19      	ldr	r3, [pc, #100]	@ (800df98 <FATFS_LinkDriverEx+0x94>)
 800df34:	7a5b      	ldrb	r3, [r3, #9]
 800df36:	b2db      	uxtb	r3, r3
 800df38:	4a17      	ldr	r2, [pc, #92]	@ (800df98 <FATFS_LinkDriverEx+0x94>)
 800df3a:	009b      	lsls	r3, r3, #2
 800df3c:	4413      	add	r3, r2
 800df3e:	68fa      	ldr	r2, [r7, #12]
 800df40:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800df42:	4b15      	ldr	r3, [pc, #84]	@ (800df98 <FATFS_LinkDriverEx+0x94>)
 800df44:	7a5b      	ldrb	r3, [r3, #9]
 800df46:	b2db      	uxtb	r3, r3
 800df48:	461a      	mov	r2, r3
 800df4a:	4b13      	ldr	r3, [pc, #76]	@ (800df98 <FATFS_LinkDriverEx+0x94>)
 800df4c:	4413      	add	r3, r2
 800df4e:	79fa      	ldrb	r2, [r7, #7]
 800df50:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800df52:	4b11      	ldr	r3, [pc, #68]	@ (800df98 <FATFS_LinkDriverEx+0x94>)
 800df54:	7a5b      	ldrb	r3, [r3, #9]
 800df56:	b2db      	uxtb	r3, r3
 800df58:	1c5a      	adds	r2, r3, #1
 800df5a:	b2d1      	uxtb	r1, r2
 800df5c:	4a0e      	ldr	r2, [pc, #56]	@ (800df98 <FATFS_LinkDriverEx+0x94>)
 800df5e:	7251      	strb	r1, [r2, #9]
 800df60:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800df62:	7dbb      	ldrb	r3, [r7, #22]
 800df64:	3330      	adds	r3, #48	@ 0x30
 800df66:	b2da      	uxtb	r2, r3
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	3301      	adds	r3, #1
 800df70:	223a      	movs	r2, #58	@ 0x3a
 800df72:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	3302      	adds	r3, #2
 800df78:	222f      	movs	r2, #47	@ 0x2f
 800df7a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	3303      	adds	r3, #3
 800df80:	2200      	movs	r2, #0
 800df82:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800df84:	2300      	movs	r3, #0
 800df86:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800df88:	7dfb      	ldrb	r3, [r7, #23]
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	371c      	adds	r7, #28
 800df8e:	46bd      	mov	sp, r7
 800df90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df94:	4770      	bx	lr
 800df96:	bf00      	nop
 800df98:	20000b7c 	.word	0x20000b7c

0800df9c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b082      	sub	sp, #8
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
 800dfa4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	6839      	ldr	r1, [r7, #0]
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f7ff ffaa 	bl	800df04 <FATFS_LinkDriverEx>
 800dfb0:	4603      	mov	r3, r0
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3708      	adds	r7, #8
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}
	...

0800dfbc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	4912      	ldr	r1, [pc, #72]	@ (800e00c <MX_USB_DEVICE_Init+0x50>)
 800dfc4:	4812      	ldr	r0, [pc, #72]	@ (800e010 <MX_USB_DEVICE_Init+0x54>)
 800dfc6:	f7fe fc71 	bl	800c8ac <USBD_Init>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d001      	beq.n	800dfd4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800dfd0:	f7f3 fef8 	bl	8001dc4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800dfd4:	490f      	ldr	r1, [pc, #60]	@ (800e014 <MX_USB_DEVICE_Init+0x58>)
 800dfd6:	480e      	ldr	r0, [pc, #56]	@ (800e010 <MX_USB_DEVICE_Init+0x54>)
 800dfd8:	f7fe fc98 	bl	800c90c <USBD_RegisterClass>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d001      	beq.n	800dfe6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800dfe2:	f7f3 feef 	bl	8001dc4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800dfe6:	490c      	ldr	r1, [pc, #48]	@ (800e018 <MX_USB_DEVICE_Init+0x5c>)
 800dfe8:	4809      	ldr	r0, [pc, #36]	@ (800e010 <MX_USB_DEVICE_Init+0x54>)
 800dfea:	f7fe fb8f 	bl	800c70c <USBD_CDC_RegisterInterface>
 800dfee:	4603      	mov	r3, r0
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d001      	beq.n	800dff8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800dff4:	f7f3 fee6 	bl	8001dc4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800dff8:	4805      	ldr	r0, [pc, #20]	@ (800e010 <MX_USB_DEVICE_Init+0x54>)
 800dffa:	f7fe fcbd 	bl	800c978 <USBD_Start>
 800dffe:	4603      	mov	r3, r0
 800e000:	2b00      	cmp	r3, #0
 800e002:	d001      	beq.n	800e008 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e004:	f7f3 fede 	bl	8001dc4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e008:	bf00      	nop
 800e00a:	bd80      	pop	{r7, pc}
 800e00c:	200000ac 	.word	0x200000ac
 800e010:	20000b88 	.word	0x20000b88
 800e014:	20000018 	.word	0x20000018
 800e018:	20000098 	.word	0x20000098

0800e01c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e020:	2200      	movs	r2, #0
 800e022:	4905      	ldr	r1, [pc, #20]	@ (800e038 <CDC_Init_FS+0x1c>)
 800e024:	4805      	ldr	r0, [pc, #20]	@ (800e03c <CDC_Init_FS+0x20>)
 800e026:	f7fe fb8b 	bl	800c740 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e02a:	4905      	ldr	r1, [pc, #20]	@ (800e040 <CDC_Init_FS+0x24>)
 800e02c:	4803      	ldr	r0, [pc, #12]	@ (800e03c <CDC_Init_FS+0x20>)
 800e02e:	f7fe fba9 	bl	800c784 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e032:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e034:	4618      	mov	r0, r3
 800e036:	bd80      	pop	{r7, pc}
 800e038:	20001664 	.word	0x20001664
 800e03c:	20000b88 	.word	0x20000b88
 800e040:	20000e64 	.word	0x20000e64

0800e044 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e044:	b480      	push	{r7}
 800e046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e048:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e04a:	4618      	mov	r0, r3
 800e04c:	46bd      	mov	sp, r7
 800e04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e052:	4770      	bx	lr

0800e054 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e054:	b480      	push	{r7}
 800e056:	b083      	sub	sp, #12
 800e058:	af00      	add	r7, sp, #0
 800e05a:	4603      	mov	r3, r0
 800e05c:	6039      	str	r1, [r7, #0]
 800e05e:	71fb      	strb	r3, [r7, #7]
 800e060:	4613      	mov	r3, r2
 800e062:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e064:	79fb      	ldrb	r3, [r7, #7]
 800e066:	2b23      	cmp	r3, #35	@ 0x23
 800e068:	d84a      	bhi.n	800e100 <CDC_Control_FS+0xac>
 800e06a:	a201      	add	r2, pc, #4	@ (adr r2, 800e070 <CDC_Control_FS+0x1c>)
 800e06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e070:	0800e101 	.word	0x0800e101
 800e074:	0800e101 	.word	0x0800e101
 800e078:	0800e101 	.word	0x0800e101
 800e07c:	0800e101 	.word	0x0800e101
 800e080:	0800e101 	.word	0x0800e101
 800e084:	0800e101 	.word	0x0800e101
 800e088:	0800e101 	.word	0x0800e101
 800e08c:	0800e101 	.word	0x0800e101
 800e090:	0800e101 	.word	0x0800e101
 800e094:	0800e101 	.word	0x0800e101
 800e098:	0800e101 	.word	0x0800e101
 800e09c:	0800e101 	.word	0x0800e101
 800e0a0:	0800e101 	.word	0x0800e101
 800e0a4:	0800e101 	.word	0x0800e101
 800e0a8:	0800e101 	.word	0x0800e101
 800e0ac:	0800e101 	.word	0x0800e101
 800e0b0:	0800e101 	.word	0x0800e101
 800e0b4:	0800e101 	.word	0x0800e101
 800e0b8:	0800e101 	.word	0x0800e101
 800e0bc:	0800e101 	.word	0x0800e101
 800e0c0:	0800e101 	.word	0x0800e101
 800e0c4:	0800e101 	.word	0x0800e101
 800e0c8:	0800e101 	.word	0x0800e101
 800e0cc:	0800e101 	.word	0x0800e101
 800e0d0:	0800e101 	.word	0x0800e101
 800e0d4:	0800e101 	.word	0x0800e101
 800e0d8:	0800e101 	.word	0x0800e101
 800e0dc:	0800e101 	.word	0x0800e101
 800e0e0:	0800e101 	.word	0x0800e101
 800e0e4:	0800e101 	.word	0x0800e101
 800e0e8:	0800e101 	.word	0x0800e101
 800e0ec:	0800e101 	.word	0x0800e101
 800e0f0:	0800e101 	.word	0x0800e101
 800e0f4:	0800e101 	.word	0x0800e101
 800e0f8:	0800e101 	.word	0x0800e101
 800e0fc:	0800e101 	.word	0x0800e101
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e100:	bf00      	nop
  }

  return (USBD_OK);
 800e102:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e104:	4618      	mov	r0, r3
 800e106:	370c      	adds	r7, #12
 800e108:	46bd      	mov	sp, r7
 800e10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10e:	4770      	bx	lr

0800e110 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b082      	sub	sp, #8
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
 800e118:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e11a:	6879      	ldr	r1, [r7, #4]
 800e11c:	4805      	ldr	r0, [pc, #20]	@ (800e134 <CDC_Receive_FS+0x24>)
 800e11e:	f7fe fb31 	bl	800c784 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e122:	4804      	ldr	r0, [pc, #16]	@ (800e134 <CDC_Receive_FS+0x24>)
 800e124:	f7fe fb8c 	bl	800c840 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e128:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	3708      	adds	r7, #8
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}
 800e132:	bf00      	nop
 800e134:	20000b88 	.word	0x20000b88

0800e138 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b084      	sub	sp, #16
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
 800e140:	460b      	mov	r3, r1
 800e142:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e144:	2300      	movs	r3, #0
 800e146:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e148:	4b0d      	ldr	r3, [pc, #52]	@ (800e180 <CDC_Transmit_FS+0x48>)
 800e14a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e14e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e150:	68bb      	ldr	r3, [r7, #8]
 800e152:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e156:	2b00      	cmp	r3, #0
 800e158:	d001      	beq.n	800e15e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e15a:	2301      	movs	r3, #1
 800e15c:	e00b      	b.n	800e176 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e15e:	887b      	ldrh	r3, [r7, #2]
 800e160:	461a      	mov	r2, r3
 800e162:	6879      	ldr	r1, [r7, #4]
 800e164:	4806      	ldr	r0, [pc, #24]	@ (800e180 <CDC_Transmit_FS+0x48>)
 800e166:	f7fe faeb 	bl	800c740 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e16a:	4805      	ldr	r0, [pc, #20]	@ (800e180 <CDC_Transmit_FS+0x48>)
 800e16c:	f7fe fb28 	bl	800c7c0 <USBD_CDC_TransmitPacket>
 800e170:	4603      	mov	r3, r0
 800e172:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e174:	7bfb      	ldrb	r3, [r7, #15]
}
 800e176:	4618      	mov	r0, r3
 800e178:	3710      	adds	r7, #16
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}
 800e17e:	bf00      	nop
 800e180:	20000b88 	.word	0x20000b88

0800e184 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e184:	b480      	push	{r7}
 800e186:	b087      	sub	sp, #28
 800e188:	af00      	add	r7, sp, #0
 800e18a:	60f8      	str	r0, [r7, #12]
 800e18c:	60b9      	str	r1, [r7, #8]
 800e18e:	4613      	mov	r3, r2
 800e190:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e192:	2300      	movs	r3, #0
 800e194:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e196:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	371c      	adds	r7, #28
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr
	...

0800e1a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b083      	sub	sp, #12
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	6039      	str	r1, [r7, #0]
 800e1b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	2212      	movs	r2, #18
 800e1b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e1ba:	4b03      	ldr	r3, [pc, #12]	@ (800e1c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	370c      	adds	r7, #12
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c6:	4770      	bx	lr
 800e1c8:	200000cc 	.word	0x200000cc

0800e1cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1cc:	b480      	push	{r7}
 800e1ce:	b083      	sub	sp, #12
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	6039      	str	r1, [r7, #0]
 800e1d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	2204      	movs	r2, #4
 800e1dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e1de:	4b03      	ldr	r3, [pc, #12]	@ (800e1ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	370c      	adds	r7, #12
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ea:	4770      	bx	lr
 800e1ec:	200000ec 	.word	0x200000ec

0800e1f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b082      	sub	sp, #8
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	6039      	str	r1, [r7, #0]
 800e1fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e1fc:	79fb      	ldrb	r3, [r7, #7]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d105      	bne.n	800e20e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e202:	683a      	ldr	r2, [r7, #0]
 800e204:	4907      	ldr	r1, [pc, #28]	@ (800e224 <USBD_FS_ProductStrDescriptor+0x34>)
 800e206:	4808      	ldr	r0, [pc, #32]	@ (800e228 <USBD_FS_ProductStrDescriptor+0x38>)
 800e208:	f7ff fd90 	bl	800dd2c <USBD_GetString>
 800e20c:	e004      	b.n	800e218 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e20e:	683a      	ldr	r2, [r7, #0]
 800e210:	4904      	ldr	r1, [pc, #16]	@ (800e224 <USBD_FS_ProductStrDescriptor+0x34>)
 800e212:	4805      	ldr	r0, [pc, #20]	@ (800e228 <USBD_FS_ProductStrDescriptor+0x38>)
 800e214:	f7ff fd8a 	bl	800dd2c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e218:	4b02      	ldr	r3, [pc, #8]	@ (800e224 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e21a:	4618      	mov	r0, r3
 800e21c:	3708      	adds	r7, #8
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}
 800e222:	bf00      	nop
 800e224:	20001e64 	.word	0x20001e64
 800e228:	080117e4 	.word	0x080117e4

0800e22c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b082      	sub	sp, #8
 800e230:	af00      	add	r7, sp, #0
 800e232:	4603      	mov	r3, r0
 800e234:	6039      	str	r1, [r7, #0]
 800e236:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e238:	683a      	ldr	r2, [r7, #0]
 800e23a:	4904      	ldr	r1, [pc, #16]	@ (800e24c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e23c:	4804      	ldr	r0, [pc, #16]	@ (800e250 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e23e:	f7ff fd75 	bl	800dd2c <USBD_GetString>
  return USBD_StrDesc;
 800e242:	4b02      	ldr	r3, [pc, #8]	@ (800e24c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e244:	4618      	mov	r0, r3
 800e246:	3708      	adds	r7, #8
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd80      	pop	{r7, pc}
 800e24c:	20001e64 	.word	0x20001e64
 800e250:	080117fc 	.word	0x080117fc

0800e254 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b082      	sub	sp, #8
 800e258:	af00      	add	r7, sp, #0
 800e25a:	4603      	mov	r3, r0
 800e25c:	6039      	str	r1, [r7, #0]
 800e25e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	221a      	movs	r2, #26
 800e264:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e266:	f000 f855 	bl	800e314 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e26a:	4b02      	ldr	r3, [pc, #8]	@ (800e274 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e26c:	4618      	mov	r0, r3
 800e26e:	3708      	adds	r7, #8
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}
 800e274:	200000f0 	.word	0x200000f0

0800e278 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b082      	sub	sp, #8
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	4603      	mov	r3, r0
 800e280:	6039      	str	r1, [r7, #0]
 800e282:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e284:	79fb      	ldrb	r3, [r7, #7]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d105      	bne.n	800e296 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e28a:	683a      	ldr	r2, [r7, #0]
 800e28c:	4907      	ldr	r1, [pc, #28]	@ (800e2ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800e28e:	4808      	ldr	r0, [pc, #32]	@ (800e2b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e290:	f7ff fd4c 	bl	800dd2c <USBD_GetString>
 800e294:	e004      	b.n	800e2a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e296:	683a      	ldr	r2, [r7, #0]
 800e298:	4904      	ldr	r1, [pc, #16]	@ (800e2ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800e29a:	4805      	ldr	r0, [pc, #20]	@ (800e2b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e29c:	f7ff fd46 	bl	800dd2c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e2a0:	4b02      	ldr	r3, [pc, #8]	@ (800e2ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	3708      	adds	r7, #8
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}
 800e2aa:	bf00      	nop
 800e2ac:	20001e64 	.word	0x20001e64
 800e2b0:	08011810 	.word	0x08011810

0800e2b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b082      	sub	sp, #8
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	6039      	str	r1, [r7, #0]
 800e2be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e2c0:	79fb      	ldrb	r3, [r7, #7]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d105      	bne.n	800e2d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e2c6:	683a      	ldr	r2, [r7, #0]
 800e2c8:	4907      	ldr	r1, [pc, #28]	@ (800e2e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e2ca:	4808      	ldr	r0, [pc, #32]	@ (800e2ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e2cc:	f7ff fd2e 	bl	800dd2c <USBD_GetString>
 800e2d0:	e004      	b.n	800e2dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e2d2:	683a      	ldr	r2, [r7, #0]
 800e2d4:	4904      	ldr	r1, [pc, #16]	@ (800e2e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e2d6:	4805      	ldr	r0, [pc, #20]	@ (800e2ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e2d8:	f7ff fd28 	bl	800dd2c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e2dc:	4b02      	ldr	r3, [pc, #8]	@ (800e2e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e2de:	4618      	mov	r0, r3
 800e2e0:	3708      	adds	r7, #8
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
 800e2e6:	bf00      	nop
 800e2e8:	20001e64 	.word	0x20001e64
 800e2ec:	0801181c 	.word	0x0801181c

0800e2f0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e2f0:	b480      	push	{r7}
 800e2f2:	b083      	sub	sp, #12
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	6039      	str	r1, [r7, #0]
 800e2fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	220c      	movs	r2, #12
 800e300:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800e302:	4b03      	ldr	r3, [pc, #12]	@ (800e310 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800e304:	4618      	mov	r0, r3
 800e306:	370c      	adds	r7, #12
 800e308:	46bd      	mov	sp, r7
 800e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30e:	4770      	bx	lr
 800e310:	200000e0 	.word	0x200000e0

0800e314 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b084      	sub	sp, #16
 800e318:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e31a:	4b0f      	ldr	r3, [pc, #60]	@ (800e358 <Get_SerialNum+0x44>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e320:	4b0e      	ldr	r3, [pc, #56]	@ (800e35c <Get_SerialNum+0x48>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e326:	4b0e      	ldr	r3, [pc, #56]	@ (800e360 <Get_SerialNum+0x4c>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e32c:	68fa      	ldr	r2, [r7, #12]
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	4413      	add	r3, r2
 800e332:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d009      	beq.n	800e34e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e33a:	2208      	movs	r2, #8
 800e33c:	4909      	ldr	r1, [pc, #36]	@ (800e364 <Get_SerialNum+0x50>)
 800e33e:	68f8      	ldr	r0, [r7, #12]
 800e340:	f000 f814 	bl	800e36c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e344:	2204      	movs	r2, #4
 800e346:	4908      	ldr	r1, [pc, #32]	@ (800e368 <Get_SerialNum+0x54>)
 800e348:	68b8      	ldr	r0, [r7, #8]
 800e34a:	f000 f80f 	bl	800e36c <IntToUnicode>
  }
}
 800e34e:	bf00      	nop
 800e350:	3710      	adds	r7, #16
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}
 800e356:	bf00      	nop
 800e358:	1ff07a10 	.word	0x1ff07a10
 800e35c:	1ff07a14 	.word	0x1ff07a14
 800e360:	1ff07a18 	.word	0x1ff07a18
 800e364:	200000f2 	.word	0x200000f2
 800e368:	20000102 	.word	0x20000102

0800e36c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e36c:	b480      	push	{r7}
 800e36e:	b087      	sub	sp, #28
 800e370:	af00      	add	r7, sp, #0
 800e372:	60f8      	str	r0, [r7, #12]
 800e374:	60b9      	str	r1, [r7, #8]
 800e376:	4613      	mov	r3, r2
 800e378:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e37a:	2300      	movs	r3, #0
 800e37c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e37e:	2300      	movs	r3, #0
 800e380:	75fb      	strb	r3, [r7, #23]
 800e382:	e027      	b.n	800e3d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	0f1b      	lsrs	r3, r3, #28
 800e388:	2b09      	cmp	r3, #9
 800e38a:	d80b      	bhi.n	800e3a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	0f1b      	lsrs	r3, r3, #28
 800e390:	b2da      	uxtb	r2, r3
 800e392:	7dfb      	ldrb	r3, [r7, #23]
 800e394:	005b      	lsls	r3, r3, #1
 800e396:	4619      	mov	r1, r3
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	440b      	add	r3, r1
 800e39c:	3230      	adds	r2, #48	@ 0x30
 800e39e:	b2d2      	uxtb	r2, r2
 800e3a0:	701a      	strb	r2, [r3, #0]
 800e3a2:	e00a      	b.n	800e3ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	0f1b      	lsrs	r3, r3, #28
 800e3a8:	b2da      	uxtb	r2, r3
 800e3aa:	7dfb      	ldrb	r3, [r7, #23]
 800e3ac:	005b      	lsls	r3, r3, #1
 800e3ae:	4619      	mov	r1, r3
 800e3b0:	68bb      	ldr	r3, [r7, #8]
 800e3b2:	440b      	add	r3, r1
 800e3b4:	3237      	adds	r2, #55	@ 0x37
 800e3b6:	b2d2      	uxtb	r2, r2
 800e3b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	011b      	lsls	r3, r3, #4
 800e3be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e3c0:	7dfb      	ldrb	r3, [r7, #23]
 800e3c2:	005b      	lsls	r3, r3, #1
 800e3c4:	3301      	adds	r3, #1
 800e3c6:	68ba      	ldr	r2, [r7, #8]
 800e3c8:	4413      	add	r3, r2
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e3ce:	7dfb      	ldrb	r3, [r7, #23]
 800e3d0:	3301      	adds	r3, #1
 800e3d2:	75fb      	strb	r3, [r7, #23]
 800e3d4:	7dfa      	ldrb	r2, [r7, #23]
 800e3d6:	79fb      	ldrb	r3, [r7, #7]
 800e3d8:	429a      	cmp	r2, r3
 800e3da:	d3d3      	bcc.n	800e384 <IntToUnicode+0x18>
  }
}
 800e3dc:	bf00      	nop
 800e3de:	bf00      	nop
 800e3e0:	371c      	adds	r7, #28
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e8:	4770      	bx	lr
	...

0800e3ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b0aa      	sub	sp, #168	@ 0xa8
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e3f4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	601a      	str	r2, [r3, #0]
 800e3fc:	605a      	str	r2, [r3, #4]
 800e3fe:	609a      	str	r2, [r3, #8]
 800e400:	60da      	str	r2, [r3, #12]
 800e402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e404:	f107 0314 	add.w	r3, r7, #20
 800e408:	2280      	movs	r2, #128	@ 0x80
 800e40a:	2100      	movs	r1, #0
 800e40c:	4618      	mov	r0, r3
 800e40e:	f001 f9ae 	bl	800f76e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e41a:	d151      	bne.n	800e4c0 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800e41c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800e420:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800e422:	2300      	movs	r3, #0
 800e424:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e428:	f107 0314 	add.w	r3, r7, #20
 800e42c:	4618      	mov	r0, r3
 800e42e:	f7f7 fe81 	bl	8006134 <HAL_RCCEx_PeriphCLKConfig>
 800e432:	4603      	mov	r3, r0
 800e434:	2b00      	cmp	r3, #0
 800e436:	d001      	beq.n	800e43c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800e438:	f7f3 fcc4 	bl	8001dc4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e43c:	4b22      	ldr	r3, [pc, #136]	@ (800e4c8 <HAL_PCD_MspInit+0xdc>)
 800e43e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e440:	4a21      	ldr	r2, [pc, #132]	@ (800e4c8 <HAL_PCD_MspInit+0xdc>)
 800e442:	f043 0301 	orr.w	r3, r3, #1
 800e446:	6313      	str	r3, [r2, #48]	@ 0x30
 800e448:	4b1f      	ldr	r3, [pc, #124]	@ (800e4c8 <HAL_PCD_MspInit+0xdc>)
 800e44a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e44c:	f003 0301 	and.w	r3, r3, #1
 800e450:	613b      	str	r3, [r7, #16]
 800e452:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e454:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e458:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e45c:	2302      	movs	r3, #2
 800e45e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e462:	2300      	movs	r3, #0
 800e464:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e468:	2303      	movs	r3, #3
 800e46a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e46e:	230a      	movs	r3, #10
 800e470:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e474:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800e478:	4619      	mov	r1, r3
 800e47a:	4814      	ldr	r0, [pc, #80]	@ (800e4cc <HAL_PCD_MspInit+0xe0>)
 800e47c:	f7f5 fb8a 	bl	8003b94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e480:	4b11      	ldr	r3, [pc, #68]	@ (800e4c8 <HAL_PCD_MspInit+0xdc>)
 800e482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e484:	4a10      	ldr	r2, [pc, #64]	@ (800e4c8 <HAL_PCD_MspInit+0xdc>)
 800e486:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e48a:	6353      	str	r3, [r2, #52]	@ 0x34
 800e48c:	4b0e      	ldr	r3, [pc, #56]	@ (800e4c8 <HAL_PCD_MspInit+0xdc>)
 800e48e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e494:	60fb      	str	r3, [r7, #12]
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	4b0b      	ldr	r3, [pc, #44]	@ (800e4c8 <HAL_PCD_MspInit+0xdc>)
 800e49a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e49c:	4a0a      	ldr	r2, [pc, #40]	@ (800e4c8 <HAL_PCD_MspInit+0xdc>)
 800e49e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e4a2:	6453      	str	r3, [r2, #68]	@ 0x44
 800e4a4:	4b08      	ldr	r3, [pc, #32]	@ (800e4c8 <HAL_PCD_MspInit+0xdc>)
 800e4a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e4ac:	60bb      	str	r3, [r7, #8]
 800e4ae:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	2100      	movs	r1, #0
 800e4b4:	2043      	movs	r0, #67	@ 0x43
 800e4b6:	f7f4 ff46 	bl	8003346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e4ba:	2043      	movs	r0, #67	@ 0x43
 800e4bc:	f7f4 ff5f 	bl	800337e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e4c0:	bf00      	nop
 800e4c2:	37a8      	adds	r7, #168	@ 0xa8
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}
 800e4c8:	40023800 	.word	0x40023800
 800e4cc:	40020000 	.word	0x40020000

0800e4d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b082      	sub	sp, #8
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e4e4:	4619      	mov	r1, r3
 800e4e6:	4610      	mov	r0, r2
 800e4e8:	f7fe fa93 	bl	800ca12 <USBD_LL_SetupStage>
}
 800e4ec:	bf00      	nop
 800e4ee:	3708      	adds	r7, #8
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}

0800e4f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b082      	sub	sp, #8
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
 800e4fc:	460b      	mov	r3, r1
 800e4fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800e506:	78fa      	ldrb	r2, [r7, #3]
 800e508:	6879      	ldr	r1, [r7, #4]
 800e50a:	4613      	mov	r3, r2
 800e50c:	00db      	lsls	r3, r3, #3
 800e50e:	4413      	add	r3, r2
 800e510:	009b      	lsls	r3, r3, #2
 800e512:	440b      	add	r3, r1
 800e514:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e518:	681a      	ldr	r2, [r3, #0]
 800e51a:	78fb      	ldrb	r3, [r7, #3]
 800e51c:	4619      	mov	r1, r3
 800e51e:	f7fe facd 	bl	800cabc <USBD_LL_DataOutStage>
}
 800e522:	bf00      	nop
 800e524:	3708      	adds	r7, #8
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}

0800e52a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e52a:	b580      	push	{r7, lr}
 800e52c:	b082      	sub	sp, #8
 800e52e:	af00      	add	r7, sp, #0
 800e530:	6078      	str	r0, [r7, #4]
 800e532:	460b      	mov	r3, r1
 800e534:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800e53c:	78fa      	ldrb	r2, [r7, #3]
 800e53e:	6879      	ldr	r1, [r7, #4]
 800e540:	4613      	mov	r3, r2
 800e542:	00db      	lsls	r3, r3, #3
 800e544:	4413      	add	r3, r2
 800e546:	009b      	lsls	r3, r3, #2
 800e548:	440b      	add	r3, r1
 800e54a:	3320      	adds	r3, #32
 800e54c:	681a      	ldr	r2, [r3, #0]
 800e54e:	78fb      	ldrb	r3, [r7, #3]
 800e550:	4619      	mov	r1, r3
 800e552:	f7fe fb66 	bl	800cc22 <USBD_LL_DataInStage>
}
 800e556:	bf00      	nop
 800e558:	3708      	adds	r7, #8
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}

0800e55e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e55e:	b580      	push	{r7, lr}
 800e560:	b082      	sub	sp, #8
 800e562:	af00      	add	r7, sp, #0
 800e564:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e56c:	4618      	mov	r0, r3
 800e56e:	f7fe fca0 	bl	800ceb2 <USBD_LL_SOF>
}
 800e572:	bf00      	nop
 800e574:	3708      	adds	r7, #8
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}

0800e57a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e57a:	b580      	push	{r7, lr}
 800e57c:	b084      	sub	sp, #16
 800e57e:	af00      	add	r7, sp, #0
 800e580:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e582:	2301      	movs	r3, #1
 800e584:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	79db      	ldrb	r3, [r3, #7]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d102      	bne.n	800e594 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e58e:	2300      	movs	r3, #0
 800e590:	73fb      	strb	r3, [r7, #15]
 800e592:	e008      	b.n	800e5a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	79db      	ldrb	r3, [r3, #7]
 800e598:	2b02      	cmp	r3, #2
 800e59a:	d102      	bne.n	800e5a2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e59c:	2301      	movs	r3, #1
 800e59e:	73fb      	strb	r3, [r7, #15]
 800e5a0:	e001      	b.n	800e5a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e5a2:	f7f3 fc0f 	bl	8001dc4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e5ac:	7bfa      	ldrb	r2, [r7, #15]
 800e5ae:	4611      	mov	r1, r2
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f7fe fc3a 	bl	800ce2a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f7fe fbe2 	bl	800cd86 <USBD_LL_Reset>
}
 800e5c2:	bf00      	nop
 800e5c4:	3710      	adds	r7, #16
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}
	...

0800e5cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b082      	sub	sp, #8
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7fe fc35 	bl	800ce4a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	687a      	ldr	r2, [r7, #4]
 800e5ec:	6812      	ldr	r2, [r2, #0]
 800e5ee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e5f2:	f043 0301 	orr.w	r3, r3, #1
 800e5f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	7adb      	ldrb	r3, [r3, #11]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d005      	beq.n	800e60c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e600:	4b04      	ldr	r3, [pc, #16]	@ (800e614 <HAL_PCD_SuspendCallback+0x48>)
 800e602:	691b      	ldr	r3, [r3, #16]
 800e604:	4a03      	ldr	r2, [pc, #12]	@ (800e614 <HAL_PCD_SuspendCallback+0x48>)
 800e606:	f043 0306 	orr.w	r3, r3, #6
 800e60a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e60c:	bf00      	nop
 800e60e:	3708      	adds	r7, #8
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}
 800e614:	e000ed00 	.word	0xe000ed00

0800e618 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b082      	sub	sp, #8
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e626:	4618      	mov	r0, r3
 800e628:	f7fe fc2b 	bl	800ce82 <USBD_LL_Resume>
}
 800e62c:	bf00      	nop
 800e62e:	3708      	adds	r7, #8
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}

0800e634 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b082      	sub	sp, #8
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	460b      	mov	r3, r1
 800e63e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e646:	78fa      	ldrb	r2, [r7, #3]
 800e648:	4611      	mov	r1, r2
 800e64a:	4618      	mov	r0, r3
 800e64c:	f7fe fc83 	bl	800cf56 <USBD_LL_IsoOUTIncomplete>
}
 800e650:	bf00      	nop
 800e652:	3708      	adds	r7, #8
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}

0800e658 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b082      	sub	sp, #8
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
 800e660:	460b      	mov	r3, r1
 800e662:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e66a:	78fa      	ldrb	r2, [r7, #3]
 800e66c:	4611      	mov	r1, r2
 800e66e:	4618      	mov	r0, r3
 800e670:	f7fe fc3f 	bl	800cef2 <USBD_LL_IsoINIncomplete>
}
 800e674:	bf00      	nop
 800e676:	3708      	adds	r7, #8
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}

0800e67c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b082      	sub	sp, #8
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e68a:	4618      	mov	r0, r3
 800e68c:	f7fe fc95 	bl	800cfba <USBD_LL_DevConnected>
}
 800e690:	bf00      	nop
 800e692:	3708      	adds	r7, #8
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}

0800e698 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b082      	sub	sp, #8
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f7fe fc92 	bl	800cfd0 <USBD_LL_DevDisconnected>
}
 800e6ac:	bf00      	nop
 800e6ae:	3708      	adds	r7, #8
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	781b      	ldrb	r3, [r3, #0]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d13f      	bne.n	800e744 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e6c4:	4a22      	ldr	r2, [pc, #136]	@ (800e750 <USBD_LL_Init+0x9c>)
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	4a20      	ldr	r2, [pc, #128]	@ (800e750 <USBD_LL_Init+0x9c>)
 800e6d0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e6d4:	4b1e      	ldr	r3, [pc, #120]	@ (800e750 <USBD_LL_Init+0x9c>)
 800e6d6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800e6da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e6dc:	4b1c      	ldr	r3, [pc, #112]	@ (800e750 <USBD_LL_Init+0x9c>)
 800e6de:	2206      	movs	r2, #6
 800e6e0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e6e2:	4b1b      	ldr	r3, [pc, #108]	@ (800e750 <USBD_LL_Init+0x9c>)
 800e6e4:	2202      	movs	r2, #2
 800e6e6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e6e8:	4b19      	ldr	r3, [pc, #100]	@ (800e750 <USBD_LL_Init+0x9c>)
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e6ee:	4b18      	ldr	r3, [pc, #96]	@ (800e750 <USBD_LL_Init+0x9c>)
 800e6f0:	2202      	movs	r2, #2
 800e6f2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e6f4:	4b16      	ldr	r3, [pc, #88]	@ (800e750 <USBD_LL_Init+0x9c>)
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e6fa:	4b15      	ldr	r3, [pc, #84]	@ (800e750 <USBD_LL_Init+0x9c>)
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e700:	4b13      	ldr	r3, [pc, #76]	@ (800e750 <USBD_LL_Init+0x9c>)
 800e702:	2200      	movs	r2, #0
 800e704:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800e706:	4b12      	ldr	r3, [pc, #72]	@ (800e750 <USBD_LL_Init+0x9c>)
 800e708:	2200      	movs	r2, #0
 800e70a:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e70c:	4b10      	ldr	r3, [pc, #64]	@ (800e750 <USBD_LL_Init+0x9c>)
 800e70e:	2200      	movs	r2, #0
 800e710:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e712:	4b0f      	ldr	r3, [pc, #60]	@ (800e750 <USBD_LL_Init+0x9c>)
 800e714:	2200      	movs	r2, #0
 800e716:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e718:	480d      	ldr	r0, [pc, #52]	@ (800e750 <USBD_LL_Init+0x9c>)
 800e71a:	f7f5 fd3c 	bl	8004196 <HAL_PCD_Init>
 800e71e:	4603      	mov	r3, r0
 800e720:	2b00      	cmp	r3, #0
 800e722:	d001      	beq.n	800e728 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800e724:	f7f3 fb4e 	bl	8001dc4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e728:	2180      	movs	r1, #128	@ 0x80
 800e72a:	4809      	ldr	r0, [pc, #36]	@ (800e750 <USBD_LL_Init+0x9c>)
 800e72c:	f7f6 ff87 	bl	800563e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e730:	2240      	movs	r2, #64	@ 0x40
 800e732:	2100      	movs	r1, #0
 800e734:	4806      	ldr	r0, [pc, #24]	@ (800e750 <USBD_LL_Init+0x9c>)
 800e736:	f7f6 ff3b 	bl	80055b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e73a:	2280      	movs	r2, #128	@ 0x80
 800e73c:	2101      	movs	r1, #1
 800e73e:	4804      	ldr	r0, [pc, #16]	@ (800e750 <USBD_LL_Init+0x9c>)
 800e740:	f7f6 ff36 	bl	80055b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e744:	2300      	movs	r3, #0
}
 800e746:	4618      	mov	r0, r3
 800e748:	3708      	adds	r7, #8
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}
 800e74e:	bf00      	nop
 800e750:	20002064 	.word	0x20002064

0800e754 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b084      	sub	sp, #16
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e75c:	2300      	movs	r3, #0
 800e75e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e760:	2300      	movs	r3, #0
 800e762:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e76a:	4618      	mov	r0, r3
 800e76c:	f7f5 fe29 	bl	80043c2 <HAL_PCD_Start>
 800e770:	4603      	mov	r3, r0
 800e772:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e774:	7bfb      	ldrb	r3, [r7, #15]
 800e776:	4618      	mov	r0, r3
 800e778:	f000 f97e 	bl	800ea78 <USBD_Get_USB_Status>
 800e77c:	4603      	mov	r3, r0
 800e77e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e780:	7bbb      	ldrb	r3, [r7, #14]
}
 800e782:	4618      	mov	r0, r3
 800e784:	3710      	adds	r7, #16
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}

0800e78a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e78a:	b580      	push	{r7, lr}
 800e78c:	b084      	sub	sp, #16
 800e78e:	af00      	add	r7, sp, #0
 800e790:	6078      	str	r0, [r7, #4]
 800e792:	4608      	mov	r0, r1
 800e794:	4611      	mov	r1, r2
 800e796:	461a      	mov	r2, r3
 800e798:	4603      	mov	r3, r0
 800e79a:	70fb      	strb	r3, [r7, #3]
 800e79c:	460b      	mov	r3, r1
 800e79e:	70bb      	strb	r3, [r7, #2]
 800e7a0:	4613      	mov	r3, r2
 800e7a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e7b2:	78bb      	ldrb	r3, [r7, #2]
 800e7b4:	883a      	ldrh	r2, [r7, #0]
 800e7b6:	78f9      	ldrb	r1, [r7, #3]
 800e7b8:	f7f6 fb17 	bl	8004dea <HAL_PCD_EP_Open>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7c0:	7bfb      	ldrb	r3, [r7, #15]
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f000 f958 	bl	800ea78 <USBD_Get_USB_Status>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	3710      	adds	r7, #16
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd80      	pop	{r7, pc}

0800e7d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e7d6:	b580      	push	{r7, lr}
 800e7d8:	b084      	sub	sp, #16
 800e7da:	af00      	add	r7, sp, #0
 800e7dc:	6078      	str	r0, [r7, #4]
 800e7de:	460b      	mov	r3, r1
 800e7e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e7f0:	78fa      	ldrb	r2, [r7, #3]
 800e7f2:	4611      	mov	r1, r2
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f7f6 fb60 	bl	8004eba <HAL_PCD_EP_Close>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7fe:	7bfb      	ldrb	r3, [r7, #15]
 800e800:	4618      	mov	r0, r3
 800e802:	f000 f939 	bl	800ea78 <USBD_Get_USB_Status>
 800e806:	4603      	mov	r3, r0
 800e808:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e80a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	3710      	adds	r7, #16
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}

0800e814 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b084      	sub	sp, #16
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
 800e81c:	460b      	mov	r3, r1
 800e81e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e820:	2300      	movs	r3, #0
 800e822:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e824:	2300      	movs	r3, #0
 800e826:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e82e:	78fa      	ldrb	r2, [r7, #3]
 800e830:	4611      	mov	r1, r2
 800e832:	4618      	mov	r0, r3
 800e834:	f7f6 fc18 	bl	8005068 <HAL_PCD_EP_SetStall>
 800e838:	4603      	mov	r3, r0
 800e83a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e83c:	7bfb      	ldrb	r3, [r7, #15]
 800e83e:	4618      	mov	r0, r3
 800e840:	f000 f91a 	bl	800ea78 <USBD_Get_USB_Status>
 800e844:	4603      	mov	r3, r0
 800e846:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e848:	7bbb      	ldrb	r3, [r7, #14]
}
 800e84a:	4618      	mov	r0, r3
 800e84c:	3710      	adds	r7, #16
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}

0800e852 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e852:	b580      	push	{r7, lr}
 800e854:	b084      	sub	sp, #16
 800e856:	af00      	add	r7, sp, #0
 800e858:	6078      	str	r0, [r7, #4]
 800e85a:	460b      	mov	r3, r1
 800e85c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e85e:	2300      	movs	r3, #0
 800e860:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e862:	2300      	movs	r3, #0
 800e864:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e86c:	78fa      	ldrb	r2, [r7, #3]
 800e86e:	4611      	mov	r1, r2
 800e870:	4618      	mov	r0, r3
 800e872:	f7f6 fc5c 	bl	800512e <HAL_PCD_EP_ClrStall>
 800e876:	4603      	mov	r3, r0
 800e878:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e87a:	7bfb      	ldrb	r3, [r7, #15]
 800e87c:	4618      	mov	r0, r3
 800e87e:	f000 f8fb 	bl	800ea78 <USBD_Get_USB_Status>
 800e882:	4603      	mov	r3, r0
 800e884:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e886:	7bbb      	ldrb	r3, [r7, #14]
}
 800e888:	4618      	mov	r0, r3
 800e88a:	3710      	adds	r7, #16
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}

0800e890 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e890:	b480      	push	{r7}
 800e892:	b085      	sub	sp, #20
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
 800e898:	460b      	mov	r3, r1
 800e89a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e8a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e8a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	da0b      	bge.n	800e8c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e8ac:	78fb      	ldrb	r3, [r7, #3]
 800e8ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e8b2:	68f9      	ldr	r1, [r7, #12]
 800e8b4:	4613      	mov	r3, r2
 800e8b6:	00db      	lsls	r3, r3, #3
 800e8b8:	4413      	add	r3, r2
 800e8ba:	009b      	lsls	r3, r3, #2
 800e8bc:	440b      	add	r3, r1
 800e8be:	3316      	adds	r3, #22
 800e8c0:	781b      	ldrb	r3, [r3, #0]
 800e8c2:	e00b      	b.n	800e8dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e8c4:	78fb      	ldrb	r3, [r7, #3]
 800e8c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e8ca:	68f9      	ldr	r1, [r7, #12]
 800e8cc:	4613      	mov	r3, r2
 800e8ce:	00db      	lsls	r3, r3, #3
 800e8d0:	4413      	add	r3, r2
 800e8d2:	009b      	lsls	r3, r3, #2
 800e8d4:	440b      	add	r3, r1
 800e8d6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e8da:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3714      	adds	r7, #20
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e6:	4770      	bx	lr

0800e8e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b084      	sub	sp, #16
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
 800e8f0:	460b      	mov	r3, r1
 800e8f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e902:	78fa      	ldrb	r2, [r7, #3]
 800e904:	4611      	mov	r1, r2
 800e906:	4618      	mov	r0, r3
 800e908:	f7f6 fa4b 	bl	8004da2 <HAL_PCD_SetAddress>
 800e90c:	4603      	mov	r3, r0
 800e90e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e910:	7bfb      	ldrb	r3, [r7, #15]
 800e912:	4618      	mov	r0, r3
 800e914:	f000 f8b0 	bl	800ea78 <USBD_Get_USB_Status>
 800e918:	4603      	mov	r3, r0
 800e91a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e91c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3710      	adds	r7, #16
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}

0800e926 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e926:	b580      	push	{r7, lr}
 800e928:	b086      	sub	sp, #24
 800e92a:	af00      	add	r7, sp, #0
 800e92c:	60f8      	str	r0, [r7, #12]
 800e92e:	607a      	str	r2, [r7, #4]
 800e930:	603b      	str	r3, [r7, #0]
 800e932:	460b      	mov	r3, r1
 800e934:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e936:	2300      	movs	r3, #0
 800e938:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e93a:	2300      	movs	r3, #0
 800e93c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e944:	7af9      	ldrb	r1, [r7, #11]
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	687a      	ldr	r2, [r7, #4]
 800e94a:	f7f6 fb53 	bl	8004ff4 <HAL_PCD_EP_Transmit>
 800e94e:	4603      	mov	r3, r0
 800e950:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e952:	7dfb      	ldrb	r3, [r7, #23]
 800e954:	4618      	mov	r0, r3
 800e956:	f000 f88f 	bl	800ea78 <USBD_Get_USB_Status>
 800e95a:	4603      	mov	r3, r0
 800e95c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e95e:	7dbb      	ldrb	r3, [r7, #22]
}
 800e960:	4618      	mov	r0, r3
 800e962:	3718      	adds	r7, #24
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}

0800e968 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b086      	sub	sp, #24
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	60f8      	str	r0, [r7, #12]
 800e970:	607a      	str	r2, [r7, #4]
 800e972:	603b      	str	r3, [r7, #0]
 800e974:	460b      	mov	r3, r1
 800e976:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e978:	2300      	movs	r3, #0
 800e97a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e97c:	2300      	movs	r3, #0
 800e97e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e986:	7af9      	ldrb	r1, [r7, #11]
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	687a      	ldr	r2, [r7, #4]
 800e98c:	f7f6 fadf 	bl	8004f4e <HAL_PCD_EP_Receive>
 800e990:	4603      	mov	r3, r0
 800e992:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e994:	7dfb      	ldrb	r3, [r7, #23]
 800e996:	4618      	mov	r0, r3
 800e998:	f000 f86e 	bl	800ea78 <USBD_Get_USB_Status>
 800e99c:	4603      	mov	r3, r0
 800e99e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e9a0:	7dbb      	ldrb	r3, [r7, #22]
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	3718      	adds	r7, #24
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}

0800e9aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e9aa:	b580      	push	{r7, lr}
 800e9ac:	b082      	sub	sp, #8
 800e9ae:	af00      	add	r7, sp, #0
 800e9b0:	6078      	str	r0, [r7, #4]
 800e9b2:	460b      	mov	r3, r1
 800e9b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e9bc:	78fa      	ldrb	r2, [r7, #3]
 800e9be:	4611      	mov	r1, r2
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	f7f6 faff 	bl	8004fc4 <HAL_PCD_EP_GetRxCount>
 800e9c6:	4603      	mov	r3, r0
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	3708      	adds	r7, #8
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}

0800e9d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b082      	sub	sp, #8
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
 800e9d8:	460b      	mov	r3, r1
 800e9da:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e9dc:	78fb      	ldrb	r3, [r7, #3]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d002      	beq.n	800e9e8 <HAL_PCDEx_LPM_Callback+0x18>
 800e9e2:	2b01      	cmp	r3, #1
 800e9e4:	d01f      	beq.n	800ea26 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800e9e6:	e03b      	b.n	800ea60 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	7adb      	ldrb	r3, [r3, #11]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d007      	beq.n	800ea00 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e9f0:	f000 f83c 	bl	800ea6c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e9f4:	4b1c      	ldr	r3, [pc, #112]	@ (800ea68 <HAL_PCDEx_LPM_Callback+0x98>)
 800e9f6:	691b      	ldr	r3, [r3, #16]
 800e9f8:	4a1b      	ldr	r2, [pc, #108]	@ (800ea68 <HAL_PCDEx_LPM_Callback+0x98>)
 800e9fa:	f023 0306 	bic.w	r3, r3, #6
 800e9fe:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	687a      	ldr	r2, [r7, #4]
 800ea0c:	6812      	ldr	r2, [r2, #0]
 800ea0e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ea12:	f023 0301 	bic.w	r3, r3, #1
 800ea16:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7fe fa2f 	bl	800ce82 <USBD_LL_Resume>
    break;
 800ea24:	e01c      	b.n	800ea60 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	687a      	ldr	r2, [r7, #4]
 800ea32:	6812      	ldr	r2, [r2, #0]
 800ea34:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ea38:	f043 0301 	orr.w	r3, r3, #1
 800ea3c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800ea44:	4618      	mov	r0, r3
 800ea46:	f7fe fa00 	bl	800ce4a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	7adb      	ldrb	r3, [r3, #11]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d005      	beq.n	800ea5e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ea52:	4b05      	ldr	r3, [pc, #20]	@ (800ea68 <HAL_PCDEx_LPM_Callback+0x98>)
 800ea54:	691b      	ldr	r3, [r3, #16]
 800ea56:	4a04      	ldr	r2, [pc, #16]	@ (800ea68 <HAL_PCDEx_LPM_Callback+0x98>)
 800ea58:	f043 0306 	orr.w	r3, r3, #6
 800ea5c:	6113      	str	r3, [r2, #16]
    break;
 800ea5e:	bf00      	nop
}
 800ea60:	bf00      	nop
 800ea62:	3708      	adds	r7, #8
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}
 800ea68:	e000ed00 	.word	0xe000ed00

0800ea6c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ea70:	f7f2 fcb2 	bl	80013d8 <SystemClock_Config>
}
 800ea74:	bf00      	nop
 800ea76:	bd80      	pop	{r7, pc}

0800ea78 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ea78:	b480      	push	{r7}
 800ea7a:	b085      	sub	sp, #20
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	4603      	mov	r3, r0
 800ea80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea82:	2300      	movs	r3, #0
 800ea84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ea86:	79fb      	ldrb	r3, [r7, #7]
 800ea88:	2b03      	cmp	r3, #3
 800ea8a:	d817      	bhi.n	800eabc <USBD_Get_USB_Status+0x44>
 800ea8c:	a201      	add	r2, pc, #4	@ (adr r2, 800ea94 <USBD_Get_USB_Status+0x1c>)
 800ea8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea92:	bf00      	nop
 800ea94:	0800eaa5 	.word	0x0800eaa5
 800ea98:	0800eaab 	.word	0x0800eaab
 800ea9c:	0800eab1 	.word	0x0800eab1
 800eaa0:	0800eab7 	.word	0x0800eab7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	73fb      	strb	r3, [r7, #15]
    break;
 800eaa8:	e00b      	b.n	800eac2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eaaa:	2303      	movs	r3, #3
 800eaac:	73fb      	strb	r3, [r7, #15]
    break;
 800eaae:	e008      	b.n	800eac2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eab0:	2301      	movs	r3, #1
 800eab2:	73fb      	strb	r3, [r7, #15]
    break;
 800eab4:	e005      	b.n	800eac2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eab6:	2303      	movs	r3, #3
 800eab8:	73fb      	strb	r3, [r7, #15]
    break;
 800eaba:	e002      	b.n	800eac2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800eabc:	2303      	movs	r3, #3
 800eabe:	73fb      	strb	r3, [r7, #15]
    break;
 800eac0:	bf00      	nop
  }
  return usb_status;
 800eac2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	3714      	adds	r7, #20
 800eac8:	46bd      	mov	sp, r7
 800eaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eace:	4770      	bx	lr

0800ead0 <malloc>:
 800ead0:	4b02      	ldr	r3, [pc, #8]	@ (800eadc <malloc+0xc>)
 800ead2:	4601      	mov	r1, r0
 800ead4:	6818      	ldr	r0, [r3, #0]
 800ead6:	f000 b82d 	b.w	800eb34 <_malloc_r>
 800eada:	bf00      	nop
 800eadc:	20000118 	.word	0x20000118

0800eae0 <free>:
 800eae0:	4b02      	ldr	r3, [pc, #8]	@ (800eaec <free+0xc>)
 800eae2:	4601      	mov	r1, r0
 800eae4:	6818      	ldr	r0, [r3, #0]
 800eae6:	f001 bd2b 	b.w	8010540 <_free_r>
 800eaea:	bf00      	nop
 800eaec:	20000118 	.word	0x20000118

0800eaf0 <sbrk_aligned>:
 800eaf0:	b570      	push	{r4, r5, r6, lr}
 800eaf2:	4e0f      	ldr	r6, [pc, #60]	@ (800eb30 <sbrk_aligned+0x40>)
 800eaf4:	460c      	mov	r4, r1
 800eaf6:	6831      	ldr	r1, [r6, #0]
 800eaf8:	4605      	mov	r5, r0
 800eafa:	b911      	cbnz	r1, 800eb02 <sbrk_aligned+0x12>
 800eafc:	f000 fe78 	bl	800f7f0 <_sbrk_r>
 800eb00:	6030      	str	r0, [r6, #0]
 800eb02:	4621      	mov	r1, r4
 800eb04:	4628      	mov	r0, r5
 800eb06:	f000 fe73 	bl	800f7f0 <_sbrk_r>
 800eb0a:	1c43      	adds	r3, r0, #1
 800eb0c:	d103      	bne.n	800eb16 <sbrk_aligned+0x26>
 800eb0e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800eb12:	4620      	mov	r0, r4
 800eb14:	bd70      	pop	{r4, r5, r6, pc}
 800eb16:	1cc4      	adds	r4, r0, #3
 800eb18:	f024 0403 	bic.w	r4, r4, #3
 800eb1c:	42a0      	cmp	r0, r4
 800eb1e:	d0f8      	beq.n	800eb12 <sbrk_aligned+0x22>
 800eb20:	1a21      	subs	r1, r4, r0
 800eb22:	4628      	mov	r0, r5
 800eb24:	f000 fe64 	bl	800f7f0 <_sbrk_r>
 800eb28:	3001      	adds	r0, #1
 800eb2a:	d1f2      	bne.n	800eb12 <sbrk_aligned+0x22>
 800eb2c:	e7ef      	b.n	800eb0e <sbrk_aligned+0x1e>
 800eb2e:	bf00      	nop
 800eb30:	20002544 	.word	0x20002544

0800eb34 <_malloc_r>:
 800eb34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb38:	1ccd      	adds	r5, r1, #3
 800eb3a:	f025 0503 	bic.w	r5, r5, #3
 800eb3e:	3508      	adds	r5, #8
 800eb40:	2d0c      	cmp	r5, #12
 800eb42:	bf38      	it	cc
 800eb44:	250c      	movcc	r5, #12
 800eb46:	2d00      	cmp	r5, #0
 800eb48:	4606      	mov	r6, r0
 800eb4a:	db01      	blt.n	800eb50 <_malloc_r+0x1c>
 800eb4c:	42a9      	cmp	r1, r5
 800eb4e:	d904      	bls.n	800eb5a <_malloc_r+0x26>
 800eb50:	230c      	movs	r3, #12
 800eb52:	6033      	str	r3, [r6, #0]
 800eb54:	2000      	movs	r0, #0
 800eb56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ec30 <_malloc_r+0xfc>
 800eb5e:	f000 f869 	bl	800ec34 <__malloc_lock>
 800eb62:	f8d8 3000 	ldr.w	r3, [r8]
 800eb66:	461c      	mov	r4, r3
 800eb68:	bb44      	cbnz	r4, 800ebbc <_malloc_r+0x88>
 800eb6a:	4629      	mov	r1, r5
 800eb6c:	4630      	mov	r0, r6
 800eb6e:	f7ff ffbf 	bl	800eaf0 <sbrk_aligned>
 800eb72:	1c43      	adds	r3, r0, #1
 800eb74:	4604      	mov	r4, r0
 800eb76:	d158      	bne.n	800ec2a <_malloc_r+0xf6>
 800eb78:	f8d8 4000 	ldr.w	r4, [r8]
 800eb7c:	4627      	mov	r7, r4
 800eb7e:	2f00      	cmp	r7, #0
 800eb80:	d143      	bne.n	800ec0a <_malloc_r+0xd6>
 800eb82:	2c00      	cmp	r4, #0
 800eb84:	d04b      	beq.n	800ec1e <_malloc_r+0xea>
 800eb86:	6823      	ldr	r3, [r4, #0]
 800eb88:	4639      	mov	r1, r7
 800eb8a:	4630      	mov	r0, r6
 800eb8c:	eb04 0903 	add.w	r9, r4, r3
 800eb90:	f000 fe2e 	bl	800f7f0 <_sbrk_r>
 800eb94:	4581      	cmp	r9, r0
 800eb96:	d142      	bne.n	800ec1e <_malloc_r+0xea>
 800eb98:	6821      	ldr	r1, [r4, #0]
 800eb9a:	1a6d      	subs	r5, r5, r1
 800eb9c:	4629      	mov	r1, r5
 800eb9e:	4630      	mov	r0, r6
 800eba0:	f7ff ffa6 	bl	800eaf0 <sbrk_aligned>
 800eba4:	3001      	adds	r0, #1
 800eba6:	d03a      	beq.n	800ec1e <_malloc_r+0xea>
 800eba8:	6823      	ldr	r3, [r4, #0]
 800ebaa:	442b      	add	r3, r5
 800ebac:	6023      	str	r3, [r4, #0]
 800ebae:	f8d8 3000 	ldr.w	r3, [r8]
 800ebb2:	685a      	ldr	r2, [r3, #4]
 800ebb4:	bb62      	cbnz	r2, 800ec10 <_malloc_r+0xdc>
 800ebb6:	f8c8 7000 	str.w	r7, [r8]
 800ebba:	e00f      	b.n	800ebdc <_malloc_r+0xa8>
 800ebbc:	6822      	ldr	r2, [r4, #0]
 800ebbe:	1b52      	subs	r2, r2, r5
 800ebc0:	d420      	bmi.n	800ec04 <_malloc_r+0xd0>
 800ebc2:	2a0b      	cmp	r2, #11
 800ebc4:	d917      	bls.n	800ebf6 <_malloc_r+0xc2>
 800ebc6:	1961      	adds	r1, r4, r5
 800ebc8:	42a3      	cmp	r3, r4
 800ebca:	6025      	str	r5, [r4, #0]
 800ebcc:	bf18      	it	ne
 800ebce:	6059      	strne	r1, [r3, #4]
 800ebd0:	6863      	ldr	r3, [r4, #4]
 800ebd2:	bf08      	it	eq
 800ebd4:	f8c8 1000 	streq.w	r1, [r8]
 800ebd8:	5162      	str	r2, [r4, r5]
 800ebda:	604b      	str	r3, [r1, #4]
 800ebdc:	4630      	mov	r0, r6
 800ebde:	f000 f82f 	bl	800ec40 <__malloc_unlock>
 800ebe2:	f104 000b 	add.w	r0, r4, #11
 800ebe6:	1d23      	adds	r3, r4, #4
 800ebe8:	f020 0007 	bic.w	r0, r0, #7
 800ebec:	1ac2      	subs	r2, r0, r3
 800ebee:	bf1c      	itt	ne
 800ebf0:	1a1b      	subne	r3, r3, r0
 800ebf2:	50a3      	strne	r3, [r4, r2]
 800ebf4:	e7af      	b.n	800eb56 <_malloc_r+0x22>
 800ebf6:	6862      	ldr	r2, [r4, #4]
 800ebf8:	42a3      	cmp	r3, r4
 800ebfa:	bf0c      	ite	eq
 800ebfc:	f8c8 2000 	streq.w	r2, [r8]
 800ec00:	605a      	strne	r2, [r3, #4]
 800ec02:	e7eb      	b.n	800ebdc <_malloc_r+0xa8>
 800ec04:	4623      	mov	r3, r4
 800ec06:	6864      	ldr	r4, [r4, #4]
 800ec08:	e7ae      	b.n	800eb68 <_malloc_r+0x34>
 800ec0a:	463c      	mov	r4, r7
 800ec0c:	687f      	ldr	r7, [r7, #4]
 800ec0e:	e7b6      	b.n	800eb7e <_malloc_r+0x4a>
 800ec10:	461a      	mov	r2, r3
 800ec12:	685b      	ldr	r3, [r3, #4]
 800ec14:	42a3      	cmp	r3, r4
 800ec16:	d1fb      	bne.n	800ec10 <_malloc_r+0xdc>
 800ec18:	2300      	movs	r3, #0
 800ec1a:	6053      	str	r3, [r2, #4]
 800ec1c:	e7de      	b.n	800ebdc <_malloc_r+0xa8>
 800ec1e:	230c      	movs	r3, #12
 800ec20:	6033      	str	r3, [r6, #0]
 800ec22:	4630      	mov	r0, r6
 800ec24:	f000 f80c 	bl	800ec40 <__malloc_unlock>
 800ec28:	e794      	b.n	800eb54 <_malloc_r+0x20>
 800ec2a:	6005      	str	r5, [r0, #0]
 800ec2c:	e7d6      	b.n	800ebdc <_malloc_r+0xa8>
 800ec2e:	bf00      	nop
 800ec30:	20002548 	.word	0x20002548

0800ec34 <__malloc_lock>:
 800ec34:	4801      	ldr	r0, [pc, #4]	@ (800ec3c <__malloc_lock+0x8>)
 800ec36:	f000 be28 	b.w	800f88a <__retarget_lock_acquire_recursive>
 800ec3a:	bf00      	nop
 800ec3c:	2000268c 	.word	0x2000268c

0800ec40 <__malloc_unlock>:
 800ec40:	4801      	ldr	r0, [pc, #4]	@ (800ec48 <__malloc_unlock+0x8>)
 800ec42:	f000 be23 	b.w	800f88c <__retarget_lock_release_recursive>
 800ec46:	bf00      	nop
 800ec48:	2000268c 	.word	0x2000268c

0800ec4c <__cvt>:
 800ec4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec50:	ec57 6b10 	vmov	r6, r7, d0
 800ec54:	2f00      	cmp	r7, #0
 800ec56:	460c      	mov	r4, r1
 800ec58:	4619      	mov	r1, r3
 800ec5a:	463b      	mov	r3, r7
 800ec5c:	bfbb      	ittet	lt
 800ec5e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ec62:	461f      	movlt	r7, r3
 800ec64:	2300      	movge	r3, #0
 800ec66:	232d      	movlt	r3, #45	@ 0x2d
 800ec68:	700b      	strb	r3, [r1, #0]
 800ec6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ec6c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ec70:	4691      	mov	r9, r2
 800ec72:	f023 0820 	bic.w	r8, r3, #32
 800ec76:	bfbc      	itt	lt
 800ec78:	4632      	movlt	r2, r6
 800ec7a:	4616      	movlt	r6, r2
 800ec7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ec80:	d005      	beq.n	800ec8e <__cvt+0x42>
 800ec82:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ec86:	d100      	bne.n	800ec8a <__cvt+0x3e>
 800ec88:	3401      	adds	r4, #1
 800ec8a:	2102      	movs	r1, #2
 800ec8c:	e000      	b.n	800ec90 <__cvt+0x44>
 800ec8e:	2103      	movs	r1, #3
 800ec90:	ab03      	add	r3, sp, #12
 800ec92:	9301      	str	r3, [sp, #4]
 800ec94:	ab02      	add	r3, sp, #8
 800ec96:	9300      	str	r3, [sp, #0]
 800ec98:	ec47 6b10 	vmov	d0, r6, r7
 800ec9c:	4653      	mov	r3, sl
 800ec9e:	4622      	mov	r2, r4
 800eca0:	f000 fe7e 	bl	800f9a0 <_dtoa_r>
 800eca4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800eca8:	4605      	mov	r5, r0
 800ecaa:	d119      	bne.n	800ece0 <__cvt+0x94>
 800ecac:	f019 0f01 	tst.w	r9, #1
 800ecb0:	d00e      	beq.n	800ecd0 <__cvt+0x84>
 800ecb2:	eb00 0904 	add.w	r9, r0, r4
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	2300      	movs	r3, #0
 800ecba:	4630      	mov	r0, r6
 800ecbc:	4639      	mov	r1, r7
 800ecbe:	f7f1 ff2b 	bl	8000b18 <__aeabi_dcmpeq>
 800ecc2:	b108      	cbz	r0, 800ecc8 <__cvt+0x7c>
 800ecc4:	f8cd 900c 	str.w	r9, [sp, #12]
 800ecc8:	2230      	movs	r2, #48	@ 0x30
 800ecca:	9b03      	ldr	r3, [sp, #12]
 800eccc:	454b      	cmp	r3, r9
 800ecce:	d31e      	bcc.n	800ed0e <__cvt+0xc2>
 800ecd0:	9b03      	ldr	r3, [sp, #12]
 800ecd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ecd4:	1b5b      	subs	r3, r3, r5
 800ecd6:	4628      	mov	r0, r5
 800ecd8:	6013      	str	r3, [r2, #0]
 800ecda:	b004      	add	sp, #16
 800ecdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ece0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ece4:	eb00 0904 	add.w	r9, r0, r4
 800ece8:	d1e5      	bne.n	800ecb6 <__cvt+0x6a>
 800ecea:	7803      	ldrb	r3, [r0, #0]
 800ecec:	2b30      	cmp	r3, #48	@ 0x30
 800ecee:	d10a      	bne.n	800ed06 <__cvt+0xba>
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	4630      	mov	r0, r6
 800ecf6:	4639      	mov	r1, r7
 800ecf8:	f7f1 ff0e 	bl	8000b18 <__aeabi_dcmpeq>
 800ecfc:	b918      	cbnz	r0, 800ed06 <__cvt+0xba>
 800ecfe:	f1c4 0401 	rsb	r4, r4, #1
 800ed02:	f8ca 4000 	str.w	r4, [sl]
 800ed06:	f8da 3000 	ldr.w	r3, [sl]
 800ed0a:	4499      	add	r9, r3
 800ed0c:	e7d3      	b.n	800ecb6 <__cvt+0x6a>
 800ed0e:	1c59      	adds	r1, r3, #1
 800ed10:	9103      	str	r1, [sp, #12]
 800ed12:	701a      	strb	r2, [r3, #0]
 800ed14:	e7d9      	b.n	800ecca <__cvt+0x7e>

0800ed16 <__exponent>:
 800ed16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed18:	2900      	cmp	r1, #0
 800ed1a:	bfba      	itte	lt
 800ed1c:	4249      	neglt	r1, r1
 800ed1e:	232d      	movlt	r3, #45	@ 0x2d
 800ed20:	232b      	movge	r3, #43	@ 0x2b
 800ed22:	2909      	cmp	r1, #9
 800ed24:	7002      	strb	r2, [r0, #0]
 800ed26:	7043      	strb	r3, [r0, #1]
 800ed28:	dd29      	ble.n	800ed7e <__exponent+0x68>
 800ed2a:	f10d 0307 	add.w	r3, sp, #7
 800ed2e:	461d      	mov	r5, r3
 800ed30:	270a      	movs	r7, #10
 800ed32:	461a      	mov	r2, r3
 800ed34:	fbb1 f6f7 	udiv	r6, r1, r7
 800ed38:	fb07 1416 	mls	r4, r7, r6, r1
 800ed3c:	3430      	adds	r4, #48	@ 0x30
 800ed3e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ed42:	460c      	mov	r4, r1
 800ed44:	2c63      	cmp	r4, #99	@ 0x63
 800ed46:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ed4a:	4631      	mov	r1, r6
 800ed4c:	dcf1      	bgt.n	800ed32 <__exponent+0x1c>
 800ed4e:	3130      	adds	r1, #48	@ 0x30
 800ed50:	1e94      	subs	r4, r2, #2
 800ed52:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ed56:	1c41      	adds	r1, r0, #1
 800ed58:	4623      	mov	r3, r4
 800ed5a:	42ab      	cmp	r3, r5
 800ed5c:	d30a      	bcc.n	800ed74 <__exponent+0x5e>
 800ed5e:	f10d 0309 	add.w	r3, sp, #9
 800ed62:	1a9b      	subs	r3, r3, r2
 800ed64:	42ac      	cmp	r4, r5
 800ed66:	bf88      	it	hi
 800ed68:	2300      	movhi	r3, #0
 800ed6a:	3302      	adds	r3, #2
 800ed6c:	4403      	add	r3, r0
 800ed6e:	1a18      	subs	r0, r3, r0
 800ed70:	b003      	add	sp, #12
 800ed72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed74:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ed78:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ed7c:	e7ed      	b.n	800ed5a <__exponent+0x44>
 800ed7e:	2330      	movs	r3, #48	@ 0x30
 800ed80:	3130      	adds	r1, #48	@ 0x30
 800ed82:	7083      	strb	r3, [r0, #2]
 800ed84:	70c1      	strb	r1, [r0, #3]
 800ed86:	1d03      	adds	r3, r0, #4
 800ed88:	e7f1      	b.n	800ed6e <__exponent+0x58>
	...

0800ed8c <_printf_float>:
 800ed8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed90:	b08d      	sub	sp, #52	@ 0x34
 800ed92:	460c      	mov	r4, r1
 800ed94:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ed98:	4616      	mov	r6, r2
 800ed9a:	461f      	mov	r7, r3
 800ed9c:	4605      	mov	r5, r0
 800ed9e:	f000 fcef 	bl	800f780 <_localeconv_r>
 800eda2:	6803      	ldr	r3, [r0, #0]
 800eda4:	9304      	str	r3, [sp, #16]
 800eda6:	4618      	mov	r0, r3
 800eda8:	f7f1 fa8a 	bl	80002c0 <strlen>
 800edac:	2300      	movs	r3, #0
 800edae:	930a      	str	r3, [sp, #40]	@ 0x28
 800edb0:	f8d8 3000 	ldr.w	r3, [r8]
 800edb4:	9005      	str	r0, [sp, #20]
 800edb6:	3307      	adds	r3, #7
 800edb8:	f023 0307 	bic.w	r3, r3, #7
 800edbc:	f103 0208 	add.w	r2, r3, #8
 800edc0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800edc4:	f8d4 b000 	ldr.w	fp, [r4]
 800edc8:	f8c8 2000 	str.w	r2, [r8]
 800edcc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800edd0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800edd4:	9307      	str	r3, [sp, #28]
 800edd6:	f8cd 8018 	str.w	r8, [sp, #24]
 800edda:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800edde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ede2:	4b9c      	ldr	r3, [pc, #624]	@ (800f054 <_printf_float+0x2c8>)
 800ede4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ede8:	f7f1 fec8 	bl	8000b7c <__aeabi_dcmpun>
 800edec:	bb70      	cbnz	r0, 800ee4c <_printf_float+0xc0>
 800edee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800edf2:	4b98      	ldr	r3, [pc, #608]	@ (800f054 <_printf_float+0x2c8>)
 800edf4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800edf8:	f7f1 fea2 	bl	8000b40 <__aeabi_dcmple>
 800edfc:	bb30      	cbnz	r0, 800ee4c <_printf_float+0xc0>
 800edfe:	2200      	movs	r2, #0
 800ee00:	2300      	movs	r3, #0
 800ee02:	4640      	mov	r0, r8
 800ee04:	4649      	mov	r1, r9
 800ee06:	f7f1 fe91 	bl	8000b2c <__aeabi_dcmplt>
 800ee0a:	b110      	cbz	r0, 800ee12 <_printf_float+0x86>
 800ee0c:	232d      	movs	r3, #45	@ 0x2d
 800ee0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ee12:	4a91      	ldr	r2, [pc, #580]	@ (800f058 <_printf_float+0x2cc>)
 800ee14:	4b91      	ldr	r3, [pc, #580]	@ (800f05c <_printf_float+0x2d0>)
 800ee16:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ee1a:	bf8c      	ite	hi
 800ee1c:	4690      	movhi	r8, r2
 800ee1e:	4698      	movls	r8, r3
 800ee20:	2303      	movs	r3, #3
 800ee22:	6123      	str	r3, [r4, #16]
 800ee24:	f02b 0304 	bic.w	r3, fp, #4
 800ee28:	6023      	str	r3, [r4, #0]
 800ee2a:	f04f 0900 	mov.w	r9, #0
 800ee2e:	9700      	str	r7, [sp, #0]
 800ee30:	4633      	mov	r3, r6
 800ee32:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ee34:	4621      	mov	r1, r4
 800ee36:	4628      	mov	r0, r5
 800ee38:	f000 f9d2 	bl	800f1e0 <_printf_common>
 800ee3c:	3001      	adds	r0, #1
 800ee3e:	f040 808d 	bne.w	800ef5c <_printf_float+0x1d0>
 800ee42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ee46:	b00d      	add	sp, #52	@ 0x34
 800ee48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee4c:	4642      	mov	r2, r8
 800ee4e:	464b      	mov	r3, r9
 800ee50:	4640      	mov	r0, r8
 800ee52:	4649      	mov	r1, r9
 800ee54:	f7f1 fe92 	bl	8000b7c <__aeabi_dcmpun>
 800ee58:	b140      	cbz	r0, 800ee6c <_printf_float+0xe0>
 800ee5a:	464b      	mov	r3, r9
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	bfbc      	itt	lt
 800ee60:	232d      	movlt	r3, #45	@ 0x2d
 800ee62:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ee66:	4a7e      	ldr	r2, [pc, #504]	@ (800f060 <_printf_float+0x2d4>)
 800ee68:	4b7e      	ldr	r3, [pc, #504]	@ (800f064 <_printf_float+0x2d8>)
 800ee6a:	e7d4      	b.n	800ee16 <_printf_float+0x8a>
 800ee6c:	6863      	ldr	r3, [r4, #4]
 800ee6e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ee72:	9206      	str	r2, [sp, #24]
 800ee74:	1c5a      	adds	r2, r3, #1
 800ee76:	d13b      	bne.n	800eef0 <_printf_float+0x164>
 800ee78:	2306      	movs	r3, #6
 800ee7a:	6063      	str	r3, [r4, #4]
 800ee7c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ee80:	2300      	movs	r3, #0
 800ee82:	6022      	str	r2, [r4, #0]
 800ee84:	9303      	str	r3, [sp, #12]
 800ee86:	ab0a      	add	r3, sp, #40	@ 0x28
 800ee88:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ee8c:	ab09      	add	r3, sp, #36	@ 0x24
 800ee8e:	9300      	str	r3, [sp, #0]
 800ee90:	6861      	ldr	r1, [r4, #4]
 800ee92:	ec49 8b10 	vmov	d0, r8, r9
 800ee96:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ee9a:	4628      	mov	r0, r5
 800ee9c:	f7ff fed6 	bl	800ec4c <__cvt>
 800eea0:	9b06      	ldr	r3, [sp, #24]
 800eea2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eea4:	2b47      	cmp	r3, #71	@ 0x47
 800eea6:	4680      	mov	r8, r0
 800eea8:	d129      	bne.n	800eefe <_printf_float+0x172>
 800eeaa:	1cc8      	adds	r0, r1, #3
 800eeac:	db02      	blt.n	800eeb4 <_printf_float+0x128>
 800eeae:	6863      	ldr	r3, [r4, #4]
 800eeb0:	4299      	cmp	r1, r3
 800eeb2:	dd41      	ble.n	800ef38 <_printf_float+0x1ac>
 800eeb4:	f1aa 0a02 	sub.w	sl, sl, #2
 800eeb8:	fa5f fa8a 	uxtb.w	sl, sl
 800eebc:	3901      	subs	r1, #1
 800eebe:	4652      	mov	r2, sl
 800eec0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800eec4:	9109      	str	r1, [sp, #36]	@ 0x24
 800eec6:	f7ff ff26 	bl	800ed16 <__exponent>
 800eeca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eecc:	1813      	adds	r3, r2, r0
 800eece:	2a01      	cmp	r2, #1
 800eed0:	4681      	mov	r9, r0
 800eed2:	6123      	str	r3, [r4, #16]
 800eed4:	dc02      	bgt.n	800eedc <_printf_float+0x150>
 800eed6:	6822      	ldr	r2, [r4, #0]
 800eed8:	07d2      	lsls	r2, r2, #31
 800eeda:	d501      	bpl.n	800eee0 <_printf_float+0x154>
 800eedc:	3301      	adds	r3, #1
 800eede:	6123      	str	r3, [r4, #16]
 800eee0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d0a2      	beq.n	800ee2e <_printf_float+0xa2>
 800eee8:	232d      	movs	r3, #45	@ 0x2d
 800eeea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eeee:	e79e      	b.n	800ee2e <_printf_float+0xa2>
 800eef0:	9a06      	ldr	r2, [sp, #24]
 800eef2:	2a47      	cmp	r2, #71	@ 0x47
 800eef4:	d1c2      	bne.n	800ee7c <_printf_float+0xf0>
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d1c0      	bne.n	800ee7c <_printf_float+0xf0>
 800eefa:	2301      	movs	r3, #1
 800eefc:	e7bd      	b.n	800ee7a <_printf_float+0xee>
 800eefe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ef02:	d9db      	bls.n	800eebc <_printf_float+0x130>
 800ef04:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ef08:	d118      	bne.n	800ef3c <_printf_float+0x1b0>
 800ef0a:	2900      	cmp	r1, #0
 800ef0c:	6863      	ldr	r3, [r4, #4]
 800ef0e:	dd0b      	ble.n	800ef28 <_printf_float+0x19c>
 800ef10:	6121      	str	r1, [r4, #16]
 800ef12:	b913      	cbnz	r3, 800ef1a <_printf_float+0x18e>
 800ef14:	6822      	ldr	r2, [r4, #0]
 800ef16:	07d0      	lsls	r0, r2, #31
 800ef18:	d502      	bpl.n	800ef20 <_printf_float+0x194>
 800ef1a:	3301      	adds	r3, #1
 800ef1c:	440b      	add	r3, r1
 800ef1e:	6123      	str	r3, [r4, #16]
 800ef20:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ef22:	f04f 0900 	mov.w	r9, #0
 800ef26:	e7db      	b.n	800eee0 <_printf_float+0x154>
 800ef28:	b913      	cbnz	r3, 800ef30 <_printf_float+0x1a4>
 800ef2a:	6822      	ldr	r2, [r4, #0]
 800ef2c:	07d2      	lsls	r2, r2, #31
 800ef2e:	d501      	bpl.n	800ef34 <_printf_float+0x1a8>
 800ef30:	3302      	adds	r3, #2
 800ef32:	e7f4      	b.n	800ef1e <_printf_float+0x192>
 800ef34:	2301      	movs	r3, #1
 800ef36:	e7f2      	b.n	800ef1e <_printf_float+0x192>
 800ef38:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ef3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef3e:	4299      	cmp	r1, r3
 800ef40:	db05      	blt.n	800ef4e <_printf_float+0x1c2>
 800ef42:	6823      	ldr	r3, [r4, #0]
 800ef44:	6121      	str	r1, [r4, #16]
 800ef46:	07d8      	lsls	r0, r3, #31
 800ef48:	d5ea      	bpl.n	800ef20 <_printf_float+0x194>
 800ef4a:	1c4b      	adds	r3, r1, #1
 800ef4c:	e7e7      	b.n	800ef1e <_printf_float+0x192>
 800ef4e:	2900      	cmp	r1, #0
 800ef50:	bfd4      	ite	le
 800ef52:	f1c1 0202 	rsble	r2, r1, #2
 800ef56:	2201      	movgt	r2, #1
 800ef58:	4413      	add	r3, r2
 800ef5a:	e7e0      	b.n	800ef1e <_printf_float+0x192>
 800ef5c:	6823      	ldr	r3, [r4, #0]
 800ef5e:	055a      	lsls	r2, r3, #21
 800ef60:	d407      	bmi.n	800ef72 <_printf_float+0x1e6>
 800ef62:	6923      	ldr	r3, [r4, #16]
 800ef64:	4642      	mov	r2, r8
 800ef66:	4631      	mov	r1, r6
 800ef68:	4628      	mov	r0, r5
 800ef6a:	47b8      	blx	r7
 800ef6c:	3001      	adds	r0, #1
 800ef6e:	d12b      	bne.n	800efc8 <_printf_float+0x23c>
 800ef70:	e767      	b.n	800ee42 <_printf_float+0xb6>
 800ef72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ef76:	f240 80dd 	bls.w	800f134 <_printf_float+0x3a8>
 800ef7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ef7e:	2200      	movs	r2, #0
 800ef80:	2300      	movs	r3, #0
 800ef82:	f7f1 fdc9 	bl	8000b18 <__aeabi_dcmpeq>
 800ef86:	2800      	cmp	r0, #0
 800ef88:	d033      	beq.n	800eff2 <_printf_float+0x266>
 800ef8a:	4a37      	ldr	r2, [pc, #220]	@ (800f068 <_printf_float+0x2dc>)
 800ef8c:	2301      	movs	r3, #1
 800ef8e:	4631      	mov	r1, r6
 800ef90:	4628      	mov	r0, r5
 800ef92:	47b8      	blx	r7
 800ef94:	3001      	adds	r0, #1
 800ef96:	f43f af54 	beq.w	800ee42 <_printf_float+0xb6>
 800ef9a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ef9e:	4543      	cmp	r3, r8
 800efa0:	db02      	blt.n	800efa8 <_printf_float+0x21c>
 800efa2:	6823      	ldr	r3, [r4, #0]
 800efa4:	07d8      	lsls	r0, r3, #31
 800efa6:	d50f      	bpl.n	800efc8 <_printf_float+0x23c>
 800efa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800efac:	4631      	mov	r1, r6
 800efae:	4628      	mov	r0, r5
 800efb0:	47b8      	blx	r7
 800efb2:	3001      	adds	r0, #1
 800efb4:	f43f af45 	beq.w	800ee42 <_printf_float+0xb6>
 800efb8:	f04f 0900 	mov.w	r9, #0
 800efbc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800efc0:	f104 0a1a 	add.w	sl, r4, #26
 800efc4:	45c8      	cmp	r8, r9
 800efc6:	dc09      	bgt.n	800efdc <_printf_float+0x250>
 800efc8:	6823      	ldr	r3, [r4, #0]
 800efca:	079b      	lsls	r3, r3, #30
 800efcc:	f100 8103 	bmi.w	800f1d6 <_printf_float+0x44a>
 800efd0:	68e0      	ldr	r0, [r4, #12]
 800efd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800efd4:	4298      	cmp	r0, r3
 800efd6:	bfb8      	it	lt
 800efd8:	4618      	movlt	r0, r3
 800efda:	e734      	b.n	800ee46 <_printf_float+0xba>
 800efdc:	2301      	movs	r3, #1
 800efde:	4652      	mov	r2, sl
 800efe0:	4631      	mov	r1, r6
 800efe2:	4628      	mov	r0, r5
 800efe4:	47b8      	blx	r7
 800efe6:	3001      	adds	r0, #1
 800efe8:	f43f af2b 	beq.w	800ee42 <_printf_float+0xb6>
 800efec:	f109 0901 	add.w	r9, r9, #1
 800eff0:	e7e8      	b.n	800efc4 <_printf_float+0x238>
 800eff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	dc39      	bgt.n	800f06c <_printf_float+0x2e0>
 800eff8:	4a1b      	ldr	r2, [pc, #108]	@ (800f068 <_printf_float+0x2dc>)
 800effa:	2301      	movs	r3, #1
 800effc:	4631      	mov	r1, r6
 800effe:	4628      	mov	r0, r5
 800f000:	47b8      	blx	r7
 800f002:	3001      	adds	r0, #1
 800f004:	f43f af1d 	beq.w	800ee42 <_printf_float+0xb6>
 800f008:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f00c:	ea59 0303 	orrs.w	r3, r9, r3
 800f010:	d102      	bne.n	800f018 <_printf_float+0x28c>
 800f012:	6823      	ldr	r3, [r4, #0]
 800f014:	07d9      	lsls	r1, r3, #31
 800f016:	d5d7      	bpl.n	800efc8 <_printf_float+0x23c>
 800f018:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f01c:	4631      	mov	r1, r6
 800f01e:	4628      	mov	r0, r5
 800f020:	47b8      	blx	r7
 800f022:	3001      	adds	r0, #1
 800f024:	f43f af0d 	beq.w	800ee42 <_printf_float+0xb6>
 800f028:	f04f 0a00 	mov.w	sl, #0
 800f02c:	f104 0b1a 	add.w	fp, r4, #26
 800f030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f032:	425b      	negs	r3, r3
 800f034:	4553      	cmp	r3, sl
 800f036:	dc01      	bgt.n	800f03c <_printf_float+0x2b0>
 800f038:	464b      	mov	r3, r9
 800f03a:	e793      	b.n	800ef64 <_printf_float+0x1d8>
 800f03c:	2301      	movs	r3, #1
 800f03e:	465a      	mov	r2, fp
 800f040:	4631      	mov	r1, r6
 800f042:	4628      	mov	r0, r5
 800f044:	47b8      	blx	r7
 800f046:	3001      	adds	r0, #1
 800f048:	f43f aefb 	beq.w	800ee42 <_printf_float+0xb6>
 800f04c:	f10a 0a01 	add.w	sl, sl, #1
 800f050:	e7ee      	b.n	800f030 <_printf_float+0x2a4>
 800f052:	bf00      	nop
 800f054:	7fefffff 	.word	0x7fefffff
 800f058:	08011864 	.word	0x08011864
 800f05c:	08011860 	.word	0x08011860
 800f060:	0801186c 	.word	0x0801186c
 800f064:	08011868 	.word	0x08011868
 800f068:	08011870 	.word	0x08011870
 800f06c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f06e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f072:	4553      	cmp	r3, sl
 800f074:	bfa8      	it	ge
 800f076:	4653      	movge	r3, sl
 800f078:	2b00      	cmp	r3, #0
 800f07a:	4699      	mov	r9, r3
 800f07c:	dc36      	bgt.n	800f0ec <_printf_float+0x360>
 800f07e:	f04f 0b00 	mov.w	fp, #0
 800f082:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f086:	f104 021a 	add.w	r2, r4, #26
 800f08a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f08c:	9306      	str	r3, [sp, #24]
 800f08e:	eba3 0309 	sub.w	r3, r3, r9
 800f092:	455b      	cmp	r3, fp
 800f094:	dc31      	bgt.n	800f0fa <_printf_float+0x36e>
 800f096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f098:	459a      	cmp	sl, r3
 800f09a:	dc3a      	bgt.n	800f112 <_printf_float+0x386>
 800f09c:	6823      	ldr	r3, [r4, #0]
 800f09e:	07da      	lsls	r2, r3, #31
 800f0a0:	d437      	bmi.n	800f112 <_printf_float+0x386>
 800f0a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0a4:	ebaa 0903 	sub.w	r9, sl, r3
 800f0a8:	9b06      	ldr	r3, [sp, #24]
 800f0aa:	ebaa 0303 	sub.w	r3, sl, r3
 800f0ae:	4599      	cmp	r9, r3
 800f0b0:	bfa8      	it	ge
 800f0b2:	4699      	movge	r9, r3
 800f0b4:	f1b9 0f00 	cmp.w	r9, #0
 800f0b8:	dc33      	bgt.n	800f122 <_printf_float+0x396>
 800f0ba:	f04f 0800 	mov.w	r8, #0
 800f0be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f0c2:	f104 0b1a 	add.w	fp, r4, #26
 800f0c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0c8:	ebaa 0303 	sub.w	r3, sl, r3
 800f0cc:	eba3 0309 	sub.w	r3, r3, r9
 800f0d0:	4543      	cmp	r3, r8
 800f0d2:	f77f af79 	ble.w	800efc8 <_printf_float+0x23c>
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	465a      	mov	r2, fp
 800f0da:	4631      	mov	r1, r6
 800f0dc:	4628      	mov	r0, r5
 800f0de:	47b8      	blx	r7
 800f0e0:	3001      	adds	r0, #1
 800f0e2:	f43f aeae 	beq.w	800ee42 <_printf_float+0xb6>
 800f0e6:	f108 0801 	add.w	r8, r8, #1
 800f0ea:	e7ec      	b.n	800f0c6 <_printf_float+0x33a>
 800f0ec:	4642      	mov	r2, r8
 800f0ee:	4631      	mov	r1, r6
 800f0f0:	4628      	mov	r0, r5
 800f0f2:	47b8      	blx	r7
 800f0f4:	3001      	adds	r0, #1
 800f0f6:	d1c2      	bne.n	800f07e <_printf_float+0x2f2>
 800f0f8:	e6a3      	b.n	800ee42 <_printf_float+0xb6>
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	4631      	mov	r1, r6
 800f0fe:	4628      	mov	r0, r5
 800f100:	9206      	str	r2, [sp, #24]
 800f102:	47b8      	blx	r7
 800f104:	3001      	adds	r0, #1
 800f106:	f43f ae9c 	beq.w	800ee42 <_printf_float+0xb6>
 800f10a:	9a06      	ldr	r2, [sp, #24]
 800f10c:	f10b 0b01 	add.w	fp, fp, #1
 800f110:	e7bb      	b.n	800f08a <_printf_float+0x2fe>
 800f112:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f116:	4631      	mov	r1, r6
 800f118:	4628      	mov	r0, r5
 800f11a:	47b8      	blx	r7
 800f11c:	3001      	adds	r0, #1
 800f11e:	d1c0      	bne.n	800f0a2 <_printf_float+0x316>
 800f120:	e68f      	b.n	800ee42 <_printf_float+0xb6>
 800f122:	9a06      	ldr	r2, [sp, #24]
 800f124:	464b      	mov	r3, r9
 800f126:	4442      	add	r2, r8
 800f128:	4631      	mov	r1, r6
 800f12a:	4628      	mov	r0, r5
 800f12c:	47b8      	blx	r7
 800f12e:	3001      	adds	r0, #1
 800f130:	d1c3      	bne.n	800f0ba <_printf_float+0x32e>
 800f132:	e686      	b.n	800ee42 <_printf_float+0xb6>
 800f134:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f138:	f1ba 0f01 	cmp.w	sl, #1
 800f13c:	dc01      	bgt.n	800f142 <_printf_float+0x3b6>
 800f13e:	07db      	lsls	r3, r3, #31
 800f140:	d536      	bpl.n	800f1b0 <_printf_float+0x424>
 800f142:	2301      	movs	r3, #1
 800f144:	4642      	mov	r2, r8
 800f146:	4631      	mov	r1, r6
 800f148:	4628      	mov	r0, r5
 800f14a:	47b8      	blx	r7
 800f14c:	3001      	adds	r0, #1
 800f14e:	f43f ae78 	beq.w	800ee42 <_printf_float+0xb6>
 800f152:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f156:	4631      	mov	r1, r6
 800f158:	4628      	mov	r0, r5
 800f15a:	47b8      	blx	r7
 800f15c:	3001      	adds	r0, #1
 800f15e:	f43f ae70 	beq.w	800ee42 <_printf_float+0xb6>
 800f162:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f166:	2200      	movs	r2, #0
 800f168:	2300      	movs	r3, #0
 800f16a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800f16e:	f7f1 fcd3 	bl	8000b18 <__aeabi_dcmpeq>
 800f172:	b9c0      	cbnz	r0, 800f1a6 <_printf_float+0x41a>
 800f174:	4653      	mov	r3, sl
 800f176:	f108 0201 	add.w	r2, r8, #1
 800f17a:	4631      	mov	r1, r6
 800f17c:	4628      	mov	r0, r5
 800f17e:	47b8      	blx	r7
 800f180:	3001      	adds	r0, #1
 800f182:	d10c      	bne.n	800f19e <_printf_float+0x412>
 800f184:	e65d      	b.n	800ee42 <_printf_float+0xb6>
 800f186:	2301      	movs	r3, #1
 800f188:	465a      	mov	r2, fp
 800f18a:	4631      	mov	r1, r6
 800f18c:	4628      	mov	r0, r5
 800f18e:	47b8      	blx	r7
 800f190:	3001      	adds	r0, #1
 800f192:	f43f ae56 	beq.w	800ee42 <_printf_float+0xb6>
 800f196:	f108 0801 	add.w	r8, r8, #1
 800f19a:	45d0      	cmp	r8, sl
 800f19c:	dbf3      	blt.n	800f186 <_printf_float+0x3fa>
 800f19e:	464b      	mov	r3, r9
 800f1a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f1a4:	e6df      	b.n	800ef66 <_printf_float+0x1da>
 800f1a6:	f04f 0800 	mov.w	r8, #0
 800f1aa:	f104 0b1a 	add.w	fp, r4, #26
 800f1ae:	e7f4      	b.n	800f19a <_printf_float+0x40e>
 800f1b0:	2301      	movs	r3, #1
 800f1b2:	4642      	mov	r2, r8
 800f1b4:	e7e1      	b.n	800f17a <_printf_float+0x3ee>
 800f1b6:	2301      	movs	r3, #1
 800f1b8:	464a      	mov	r2, r9
 800f1ba:	4631      	mov	r1, r6
 800f1bc:	4628      	mov	r0, r5
 800f1be:	47b8      	blx	r7
 800f1c0:	3001      	adds	r0, #1
 800f1c2:	f43f ae3e 	beq.w	800ee42 <_printf_float+0xb6>
 800f1c6:	f108 0801 	add.w	r8, r8, #1
 800f1ca:	68e3      	ldr	r3, [r4, #12]
 800f1cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f1ce:	1a5b      	subs	r3, r3, r1
 800f1d0:	4543      	cmp	r3, r8
 800f1d2:	dcf0      	bgt.n	800f1b6 <_printf_float+0x42a>
 800f1d4:	e6fc      	b.n	800efd0 <_printf_float+0x244>
 800f1d6:	f04f 0800 	mov.w	r8, #0
 800f1da:	f104 0919 	add.w	r9, r4, #25
 800f1de:	e7f4      	b.n	800f1ca <_printf_float+0x43e>

0800f1e0 <_printf_common>:
 800f1e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1e4:	4616      	mov	r6, r2
 800f1e6:	4698      	mov	r8, r3
 800f1e8:	688a      	ldr	r2, [r1, #8]
 800f1ea:	690b      	ldr	r3, [r1, #16]
 800f1ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f1f0:	4293      	cmp	r3, r2
 800f1f2:	bfb8      	it	lt
 800f1f4:	4613      	movlt	r3, r2
 800f1f6:	6033      	str	r3, [r6, #0]
 800f1f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f1fc:	4607      	mov	r7, r0
 800f1fe:	460c      	mov	r4, r1
 800f200:	b10a      	cbz	r2, 800f206 <_printf_common+0x26>
 800f202:	3301      	adds	r3, #1
 800f204:	6033      	str	r3, [r6, #0]
 800f206:	6823      	ldr	r3, [r4, #0]
 800f208:	0699      	lsls	r1, r3, #26
 800f20a:	bf42      	ittt	mi
 800f20c:	6833      	ldrmi	r3, [r6, #0]
 800f20e:	3302      	addmi	r3, #2
 800f210:	6033      	strmi	r3, [r6, #0]
 800f212:	6825      	ldr	r5, [r4, #0]
 800f214:	f015 0506 	ands.w	r5, r5, #6
 800f218:	d106      	bne.n	800f228 <_printf_common+0x48>
 800f21a:	f104 0a19 	add.w	sl, r4, #25
 800f21e:	68e3      	ldr	r3, [r4, #12]
 800f220:	6832      	ldr	r2, [r6, #0]
 800f222:	1a9b      	subs	r3, r3, r2
 800f224:	42ab      	cmp	r3, r5
 800f226:	dc26      	bgt.n	800f276 <_printf_common+0x96>
 800f228:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f22c:	6822      	ldr	r2, [r4, #0]
 800f22e:	3b00      	subs	r3, #0
 800f230:	bf18      	it	ne
 800f232:	2301      	movne	r3, #1
 800f234:	0692      	lsls	r2, r2, #26
 800f236:	d42b      	bmi.n	800f290 <_printf_common+0xb0>
 800f238:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f23c:	4641      	mov	r1, r8
 800f23e:	4638      	mov	r0, r7
 800f240:	47c8      	blx	r9
 800f242:	3001      	adds	r0, #1
 800f244:	d01e      	beq.n	800f284 <_printf_common+0xa4>
 800f246:	6823      	ldr	r3, [r4, #0]
 800f248:	6922      	ldr	r2, [r4, #16]
 800f24a:	f003 0306 	and.w	r3, r3, #6
 800f24e:	2b04      	cmp	r3, #4
 800f250:	bf02      	ittt	eq
 800f252:	68e5      	ldreq	r5, [r4, #12]
 800f254:	6833      	ldreq	r3, [r6, #0]
 800f256:	1aed      	subeq	r5, r5, r3
 800f258:	68a3      	ldr	r3, [r4, #8]
 800f25a:	bf0c      	ite	eq
 800f25c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f260:	2500      	movne	r5, #0
 800f262:	4293      	cmp	r3, r2
 800f264:	bfc4      	itt	gt
 800f266:	1a9b      	subgt	r3, r3, r2
 800f268:	18ed      	addgt	r5, r5, r3
 800f26a:	2600      	movs	r6, #0
 800f26c:	341a      	adds	r4, #26
 800f26e:	42b5      	cmp	r5, r6
 800f270:	d11a      	bne.n	800f2a8 <_printf_common+0xc8>
 800f272:	2000      	movs	r0, #0
 800f274:	e008      	b.n	800f288 <_printf_common+0xa8>
 800f276:	2301      	movs	r3, #1
 800f278:	4652      	mov	r2, sl
 800f27a:	4641      	mov	r1, r8
 800f27c:	4638      	mov	r0, r7
 800f27e:	47c8      	blx	r9
 800f280:	3001      	adds	r0, #1
 800f282:	d103      	bne.n	800f28c <_printf_common+0xac>
 800f284:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f28c:	3501      	adds	r5, #1
 800f28e:	e7c6      	b.n	800f21e <_printf_common+0x3e>
 800f290:	18e1      	adds	r1, r4, r3
 800f292:	1c5a      	adds	r2, r3, #1
 800f294:	2030      	movs	r0, #48	@ 0x30
 800f296:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f29a:	4422      	add	r2, r4
 800f29c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f2a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f2a4:	3302      	adds	r3, #2
 800f2a6:	e7c7      	b.n	800f238 <_printf_common+0x58>
 800f2a8:	2301      	movs	r3, #1
 800f2aa:	4622      	mov	r2, r4
 800f2ac:	4641      	mov	r1, r8
 800f2ae:	4638      	mov	r0, r7
 800f2b0:	47c8      	blx	r9
 800f2b2:	3001      	adds	r0, #1
 800f2b4:	d0e6      	beq.n	800f284 <_printf_common+0xa4>
 800f2b6:	3601      	adds	r6, #1
 800f2b8:	e7d9      	b.n	800f26e <_printf_common+0x8e>
	...

0800f2bc <_printf_i>:
 800f2bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f2c0:	7e0f      	ldrb	r7, [r1, #24]
 800f2c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f2c4:	2f78      	cmp	r7, #120	@ 0x78
 800f2c6:	4691      	mov	r9, r2
 800f2c8:	4680      	mov	r8, r0
 800f2ca:	460c      	mov	r4, r1
 800f2cc:	469a      	mov	sl, r3
 800f2ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f2d2:	d807      	bhi.n	800f2e4 <_printf_i+0x28>
 800f2d4:	2f62      	cmp	r7, #98	@ 0x62
 800f2d6:	d80a      	bhi.n	800f2ee <_printf_i+0x32>
 800f2d8:	2f00      	cmp	r7, #0
 800f2da:	f000 80d1 	beq.w	800f480 <_printf_i+0x1c4>
 800f2de:	2f58      	cmp	r7, #88	@ 0x58
 800f2e0:	f000 80b8 	beq.w	800f454 <_printf_i+0x198>
 800f2e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f2e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f2ec:	e03a      	b.n	800f364 <_printf_i+0xa8>
 800f2ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f2f2:	2b15      	cmp	r3, #21
 800f2f4:	d8f6      	bhi.n	800f2e4 <_printf_i+0x28>
 800f2f6:	a101      	add	r1, pc, #4	@ (adr r1, 800f2fc <_printf_i+0x40>)
 800f2f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f2fc:	0800f355 	.word	0x0800f355
 800f300:	0800f369 	.word	0x0800f369
 800f304:	0800f2e5 	.word	0x0800f2e5
 800f308:	0800f2e5 	.word	0x0800f2e5
 800f30c:	0800f2e5 	.word	0x0800f2e5
 800f310:	0800f2e5 	.word	0x0800f2e5
 800f314:	0800f369 	.word	0x0800f369
 800f318:	0800f2e5 	.word	0x0800f2e5
 800f31c:	0800f2e5 	.word	0x0800f2e5
 800f320:	0800f2e5 	.word	0x0800f2e5
 800f324:	0800f2e5 	.word	0x0800f2e5
 800f328:	0800f467 	.word	0x0800f467
 800f32c:	0800f393 	.word	0x0800f393
 800f330:	0800f421 	.word	0x0800f421
 800f334:	0800f2e5 	.word	0x0800f2e5
 800f338:	0800f2e5 	.word	0x0800f2e5
 800f33c:	0800f489 	.word	0x0800f489
 800f340:	0800f2e5 	.word	0x0800f2e5
 800f344:	0800f393 	.word	0x0800f393
 800f348:	0800f2e5 	.word	0x0800f2e5
 800f34c:	0800f2e5 	.word	0x0800f2e5
 800f350:	0800f429 	.word	0x0800f429
 800f354:	6833      	ldr	r3, [r6, #0]
 800f356:	1d1a      	adds	r2, r3, #4
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	6032      	str	r2, [r6, #0]
 800f35c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f360:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f364:	2301      	movs	r3, #1
 800f366:	e09c      	b.n	800f4a2 <_printf_i+0x1e6>
 800f368:	6833      	ldr	r3, [r6, #0]
 800f36a:	6820      	ldr	r0, [r4, #0]
 800f36c:	1d19      	adds	r1, r3, #4
 800f36e:	6031      	str	r1, [r6, #0]
 800f370:	0606      	lsls	r6, r0, #24
 800f372:	d501      	bpl.n	800f378 <_printf_i+0xbc>
 800f374:	681d      	ldr	r5, [r3, #0]
 800f376:	e003      	b.n	800f380 <_printf_i+0xc4>
 800f378:	0645      	lsls	r5, r0, #25
 800f37a:	d5fb      	bpl.n	800f374 <_printf_i+0xb8>
 800f37c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f380:	2d00      	cmp	r5, #0
 800f382:	da03      	bge.n	800f38c <_printf_i+0xd0>
 800f384:	232d      	movs	r3, #45	@ 0x2d
 800f386:	426d      	negs	r5, r5
 800f388:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f38c:	4858      	ldr	r0, [pc, #352]	@ (800f4f0 <_printf_i+0x234>)
 800f38e:	230a      	movs	r3, #10
 800f390:	e011      	b.n	800f3b6 <_printf_i+0xfa>
 800f392:	6821      	ldr	r1, [r4, #0]
 800f394:	6833      	ldr	r3, [r6, #0]
 800f396:	0608      	lsls	r0, r1, #24
 800f398:	f853 5b04 	ldr.w	r5, [r3], #4
 800f39c:	d402      	bmi.n	800f3a4 <_printf_i+0xe8>
 800f39e:	0649      	lsls	r1, r1, #25
 800f3a0:	bf48      	it	mi
 800f3a2:	b2ad      	uxthmi	r5, r5
 800f3a4:	2f6f      	cmp	r7, #111	@ 0x6f
 800f3a6:	4852      	ldr	r0, [pc, #328]	@ (800f4f0 <_printf_i+0x234>)
 800f3a8:	6033      	str	r3, [r6, #0]
 800f3aa:	bf14      	ite	ne
 800f3ac:	230a      	movne	r3, #10
 800f3ae:	2308      	moveq	r3, #8
 800f3b0:	2100      	movs	r1, #0
 800f3b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f3b6:	6866      	ldr	r6, [r4, #4]
 800f3b8:	60a6      	str	r6, [r4, #8]
 800f3ba:	2e00      	cmp	r6, #0
 800f3bc:	db05      	blt.n	800f3ca <_printf_i+0x10e>
 800f3be:	6821      	ldr	r1, [r4, #0]
 800f3c0:	432e      	orrs	r6, r5
 800f3c2:	f021 0104 	bic.w	r1, r1, #4
 800f3c6:	6021      	str	r1, [r4, #0]
 800f3c8:	d04b      	beq.n	800f462 <_printf_i+0x1a6>
 800f3ca:	4616      	mov	r6, r2
 800f3cc:	fbb5 f1f3 	udiv	r1, r5, r3
 800f3d0:	fb03 5711 	mls	r7, r3, r1, r5
 800f3d4:	5dc7      	ldrb	r7, [r0, r7]
 800f3d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f3da:	462f      	mov	r7, r5
 800f3dc:	42bb      	cmp	r3, r7
 800f3de:	460d      	mov	r5, r1
 800f3e0:	d9f4      	bls.n	800f3cc <_printf_i+0x110>
 800f3e2:	2b08      	cmp	r3, #8
 800f3e4:	d10b      	bne.n	800f3fe <_printf_i+0x142>
 800f3e6:	6823      	ldr	r3, [r4, #0]
 800f3e8:	07df      	lsls	r7, r3, #31
 800f3ea:	d508      	bpl.n	800f3fe <_printf_i+0x142>
 800f3ec:	6923      	ldr	r3, [r4, #16]
 800f3ee:	6861      	ldr	r1, [r4, #4]
 800f3f0:	4299      	cmp	r1, r3
 800f3f2:	bfde      	ittt	le
 800f3f4:	2330      	movle	r3, #48	@ 0x30
 800f3f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f3fa:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800f3fe:	1b92      	subs	r2, r2, r6
 800f400:	6122      	str	r2, [r4, #16]
 800f402:	f8cd a000 	str.w	sl, [sp]
 800f406:	464b      	mov	r3, r9
 800f408:	aa03      	add	r2, sp, #12
 800f40a:	4621      	mov	r1, r4
 800f40c:	4640      	mov	r0, r8
 800f40e:	f7ff fee7 	bl	800f1e0 <_printf_common>
 800f412:	3001      	adds	r0, #1
 800f414:	d14a      	bne.n	800f4ac <_printf_i+0x1f0>
 800f416:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f41a:	b004      	add	sp, #16
 800f41c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f420:	6823      	ldr	r3, [r4, #0]
 800f422:	f043 0320 	orr.w	r3, r3, #32
 800f426:	6023      	str	r3, [r4, #0]
 800f428:	4832      	ldr	r0, [pc, #200]	@ (800f4f4 <_printf_i+0x238>)
 800f42a:	2778      	movs	r7, #120	@ 0x78
 800f42c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f430:	6823      	ldr	r3, [r4, #0]
 800f432:	6831      	ldr	r1, [r6, #0]
 800f434:	061f      	lsls	r7, r3, #24
 800f436:	f851 5b04 	ldr.w	r5, [r1], #4
 800f43a:	d402      	bmi.n	800f442 <_printf_i+0x186>
 800f43c:	065f      	lsls	r7, r3, #25
 800f43e:	bf48      	it	mi
 800f440:	b2ad      	uxthmi	r5, r5
 800f442:	6031      	str	r1, [r6, #0]
 800f444:	07d9      	lsls	r1, r3, #31
 800f446:	bf44      	itt	mi
 800f448:	f043 0320 	orrmi.w	r3, r3, #32
 800f44c:	6023      	strmi	r3, [r4, #0]
 800f44e:	b11d      	cbz	r5, 800f458 <_printf_i+0x19c>
 800f450:	2310      	movs	r3, #16
 800f452:	e7ad      	b.n	800f3b0 <_printf_i+0xf4>
 800f454:	4826      	ldr	r0, [pc, #152]	@ (800f4f0 <_printf_i+0x234>)
 800f456:	e7e9      	b.n	800f42c <_printf_i+0x170>
 800f458:	6823      	ldr	r3, [r4, #0]
 800f45a:	f023 0320 	bic.w	r3, r3, #32
 800f45e:	6023      	str	r3, [r4, #0]
 800f460:	e7f6      	b.n	800f450 <_printf_i+0x194>
 800f462:	4616      	mov	r6, r2
 800f464:	e7bd      	b.n	800f3e2 <_printf_i+0x126>
 800f466:	6833      	ldr	r3, [r6, #0]
 800f468:	6825      	ldr	r5, [r4, #0]
 800f46a:	6961      	ldr	r1, [r4, #20]
 800f46c:	1d18      	adds	r0, r3, #4
 800f46e:	6030      	str	r0, [r6, #0]
 800f470:	062e      	lsls	r6, r5, #24
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	d501      	bpl.n	800f47a <_printf_i+0x1be>
 800f476:	6019      	str	r1, [r3, #0]
 800f478:	e002      	b.n	800f480 <_printf_i+0x1c4>
 800f47a:	0668      	lsls	r0, r5, #25
 800f47c:	d5fb      	bpl.n	800f476 <_printf_i+0x1ba>
 800f47e:	8019      	strh	r1, [r3, #0]
 800f480:	2300      	movs	r3, #0
 800f482:	6123      	str	r3, [r4, #16]
 800f484:	4616      	mov	r6, r2
 800f486:	e7bc      	b.n	800f402 <_printf_i+0x146>
 800f488:	6833      	ldr	r3, [r6, #0]
 800f48a:	1d1a      	adds	r2, r3, #4
 800f48c:	6032      	str	r2, [r6, #0]
 800f48e:	681e      	ldr	r6, [r3, #0]
 800f490:	6862      	ldr	r2, [r4, #4]
 800f492:	2100      	movs	r1, #0
 800f494:	4630      	mov	r0, r6
 800f496:	f7f0 fec3 	bl	8000220 <memchr>
 800f49a:	b108      	cbz	r0, 800f4a0 <_printf_i+0x1e4>
 800f49c:	1b80      	subs	r0, r0, r6
 800f49e:	6060      	str	r0, [r4, #4]
 800f4a0:	6863      	ldr	r3, [r4, #4]
 800f4a2:	6123      	str	r3, [r4, #16]
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f4aa:	e7aa      	b.n	800f402 <_printf_i+0x146>
 800f4ac:	6923      	ldr	r3, [r4, #16]
 800f4ae:	4632      	mov	r2, r6
 800f4b0:	4649      	mov	r1, r9
 800f4b2:	4640      	mov	r0, r8
 800f4b4:	47d0      	blx	sl
 800f4b6:	3001      	adds	r0, #1
 800f4b8:	d0ad      	beq.n	800f416 <_printf_i+0x15a>
 800f4ba:	6823      	ldr	r3, [r4, #0]
 800f4bc:	079b      	lsls	r3, r3, #30
 800f4be:	d413      	bmi.n	800f4e8 <_printf_i+0x22c>
 800f4c0:	68e0      	ldr	r0, [r4, #12]
 800f4c2:	9b03      	ldr	r3, [sp, #12]
 800f4c4:	4298      	cmp	r0, r3
 800f4c6:	bfb8      	it	lt
 800f4c8:	4618      	movlt	r0, r3
 800f4ca:	e7a6      	b.n	800f41a <_printf_i+0x15e>
 800f4cc:	2301      	movs	r3, #1
 800f4ce:	4632      	mov	r2, r6
 800f4d0:	4649      	mov	r1, r9
 800f4d2:	4640      	mov	r0, r8
 800f4d4:	47d0      	blx	sl
 800f4d6:	3001      	adds	r0, #1
 800f4d8:	d09d      	beq.n	800f416 <_printf_i+0x15a>
 800f4da:	3501      	adds	r5, #1
 800f4dc:	68e3      	ldr	r3, [r4, #12]
 800f4de:	9903      	ldr	r1, [sp, #12]
 800f4e0:	1a5b      	subs	r3, r3, r1
 800f4e2:	42ab      	cmp	r3, r5
 800f4e4:	dcf2      	bgt.n	800f4cc <_printf_i+0x210>
 800f4e6:	e7eb      	b.n	800f4c0 <_printf_i+0x204>
 800f4e8:	2500      	movs	r5, #0
 800f4ea:	f104 0619 	add.w	r6, r4, #25
 800f4ee:	e7f5      	b.n	800f4dc <_printf_i+0x220>
 800f4f0:	08011872 	.word	0x08011872
 800f4f4:	08011883 	.word	0x08011883

0800f4f8 <std>:
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	b510      	push	{r4, lr}
 800f4fc:	4604      	mov	r4, r0
 800f4fe:	e9c0 3300 	strd	r3, r3, [r0]
 800f502:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f506:	6083      	str	r3, [r0, #8]
 800f508:	8181      	strh	r1, [r0, #12]
 800f50a:	6643      	str	r3, [r0, #100]	@ 0x64
 800f50c:	81c2      	strh	r2, [r0, #14]
 800f50e:	6183      	str	r3, [r0, #24]
 800f510:	4619      	mov	r1, r3
 800f512:	2208      	movs	r2, #8
 800f514:	305c      	adds	r0, #92	@ 0x5c
 800f516:	f000 f92a 	bl	800f76e <memset>
 800f51a:	4b0d      	ldr	r3, [pc, #52]	@ (800f550 <std+0x58>)
 800f51c:	6263      	str	r3, [r4, #36]	@ 0x24
 800f51e:	4b0d      	ldr	r3, [pc, #52]	@ (800f554 <std+0x5c>)
 800f520:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f522:	4b0d      	ldr	r3, [pc, #52]	@ (800f558 <std+0x60>)
 800f524:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f526:	4b0d      	ldr	r3, [pc, #52]	@ (800f55c <std+0x64>)
 800f528:	6323      	str	r3, [r4, #48]	@ 0x30
 800f52a:	4b0d      	ldr	r3, [pc, #52]	@ (800f560 <std+0x68>)
 800f52c:	6224      	str	r4, [r4, #32]
 800f52e:	429c      	cmp	r4, r3
 800f530:	d006      	beq.n	800f540 <std+0x48>
 800f532:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f536:	4294      	cmp	r4, r2
 800f538:	d002      	beq.n	800f540 <std+0x48>
 800f53a:	33d0      	adds	r3, #208	@ 0xd0
 800f53c:	429c      	cmp	r4, r3
 800f53e:	d105      	bne.n	800f54c <std+0x54>
 800f540:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f548:	f000 b99e 	b.w	800f888 <__retarget_lock_init_recursive>
 800f54c:	bd10      	pop	{r4, pc}
 800f54e:	bf00      	nop
 800f550:	0800f6e9 	.word	0x0800f6e9
 800f554:	0800f70b 	.word	0x0800f70b
 800f558:	0800f743 	.word	0x0800f743
 800f55c:	0800f767 	.word	0x0800f767
 800f560:	2000254c 	.word	0x2000254c

0800f564 <stdio_exit_handler>:
 800f564:	4a02      	ldr	r2, [pc, #8]	@ (800f570 <stdio_exit_handler+0xc>)
 800f566:	4903      	ldr	r1, [pc, #12]	@ (800f574 <stdio_exit_handler+0x10>)
 800f568:	4803      	ldr	r0, [pc, #12]	@ (800f578 <stdio_exit_handler+0x14>)
 800f56a:	f000 b869 	b.w	800f640 <_fwalk_sglue>
 800f56e:	bf00      	nop
 800f570:	2000010c 	.word	0x2000010c
 800f574:	08011081 	.word	0x08011081
 800f578:	2000011c 	.word	0x2000011c

0800f57c <cleanup_stdio>:
 800f57c:	6841      	ldr	r1, [r0, #4]
 800f57e:	4b0c      	ldr	r3, [pc, #48]	@ (800f5b0 <cleanup_stdio+0x34>)
 800f580:	4299      	cmp	r1, r3
 800f582:	b510      	push	{r4, lr}
 800f584:	4604      	mov	r4, r0
 800f586:	d001      	beq.n	800f58c <cleanup_stdio+0x10>
 800f588:	f001 fd7a 	bl	8011080 <_fflush_r>
 800f58c:	68a1      	ldr	r1, [r4, #8]
 800f58e:	4b09      	ldr	r3, [pc, #36]	@ (800f5b4 <cleanup_stdio+0x38>)
 800f590:	4299      	cmp	r1, r3
 800f592:	d002      	beq.n	800f59a <cleanup_stdio+0x1e>
 800f594:	4620      	mov	r0, r4
 800f596:	f001 fd73 	bl	8011080 <_fflush_r>
 800f59a:	68e1      	ldr	r1, [r4, #12]
 800f59c:	4b06      	ldr	r3, [pc, #24]	@ (800f5b8 <cleanup_stdio+0x3c>)
 800f59e:	4299      	cmp	r1, r3
 800f5a0:	d004      	beq.n	800f5ac <cleanup_stdio+0x30>
 800f5a2:	4620      	mov	r0, r4
 800f5a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5a8:	f001 bd6a 	b.w	8011080 <_fflush_r>
 800f5ac:	bd10      	pop	{r4, pc}
 800f5ae:	bf00      	nop
 800f5b0:	2000254c 	.word	0x2000254c
 800f5b4:	200025b4 	.word	0x200025b4
 800f5b8:	2000261c 	.word	0x2000261c

0800f5bc <global_stdio_init.part.0>:
 800f5bc:	b510      	push	{r4, lr}
 800f5be:	4b0b      	ldr	r3, [pc, #44]	@ (800f5ec <global_stdio_init.part.0+0x30>)
 800f5c0:	4c0b      	ldr	r4, [pc, #44]	@ (800f5f0 <global_stdio_init.part.0+0x34>)
 800f5c2:	4a0c      	ldr	r2, [pc, #48]	@ (800f5f4 <global_stdio_init.part.0+0x38>)
 800f5c4:	601a      	str	r2, [r3, #0]
 800f5c6:	4620      	mov	r0, r4
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	2104      	movs	r1, #4
 800f5cc:	f7ff ff94 	bl	800f4f8 <std>
 800f5d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f5d4:	2201      	movs	r2, #1
 800f5d6:	2109      	movs	r1, #9
 800f5d8:	f7ff ff8e 	bl	800f4f8 <std>
 800f5dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f5e0:	2202      	movs	r2, #2
 800f5e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5e6:	2112      	movs	r1, #18
 800f5e8:	f7ff bf86 	b.w	800f4f8 <std>
 800f5ec:	20002684 	.word	0x20002684
 800f5f0:	2000254c 	.word	0x2000254c
 800f5f4:	0800f565 	.word	0x0800f565

0800f5f8 <__sfp_lock_acquire>:
 800f5f8:	4801      	ldr	r0, [pc, #4]	@ (800f600 <__sfp_lock_acquire+0x8>)
 800f5fa:	f000 b946 	b.w	800f88a <__retarget_lock_acquire_recursive>
 800f5fe:	bf00      	nop
 800f600:	2000268d 	.word	0x2000268d

0800f604 <__sfp_lock_release>:
 800f604:	4801      	ldr	r0, [pc, #4]	@ (800f60c <__sfp_lock_release+0x8>)
 800f606:	f000 b941 	b.w	800f88c <__retarget_lock_release_recursive>
 800f60a:	bf00      	nop
 800f60c:	2000268d 	.word	0x2000268d

0800f610 <__sinit>:
 800f610:	b510      	push	{r4, lr}
 800f612:	4604      	mov	r4, r0
 800f614:	f7ff fff0 	bl	800f5f8 <__sfp_lock_acquire>
 800f618:	6a23      	ldr	r3, [r4, #32]
 800f61a:	b11b      	cbz	r3, 800f624 <__sinit+0x14>
 800f61c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f620:	f7ff bff0 	b.w	800f604 <__sfp_lock_release>
 800f624:	4b04      	ldr	r3, [pc, #16]	@ (800f638 <__sinit+0x28>)
 800f626:	6223      	str	r3, [r4, #32]
 800f628:	4b04      	ldr	r3, [pc, #16]	@ (800f63c <__sinit+0x2c>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d1f5      	bne.n	800f61c <__sinit+0xc>
 800f630:	f7ff ffc4 	bl	800f5bc <global_stdio_init.part.0>
 800f634:	e7f2      	b.n	800f61c <__sinit+0xc>
 800f636:	bf00      	nop
 800f638:	0800f57d 	.word	0x0800f57d
 800f63c:	20002684 	.word	0x20002684

0800f640 <_fwalk_sglue>:
 800f640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f644:	4607      	mov	r7, r0
 800f646:	4688      	mov	r8, r1
 800f648:	4614      	mov	r4, r2
 800f64a:	2600      	movs	r6, #0
 800f64c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f650:	f1b9 0901 	subs.w	r9, r9, #1
 800f654:	d505      	bpl.n	800f662 <_fwalk_sglue+0x22>
 800f656:	6824      	ldr	r4, [r4, #0]
 800f658:	2c00      	cmp	r4, #0
 800f65a:	d1f7      	bne.n	800f64c <_fwalk_sglue+0xc>
 800f65c:	4630      	mov	r0, r6
 800f65e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f662:	89ab      	ldrh	r3, [r5, #12]
 800f664:	2b01      	cmp	r3, #1
 800f666:	d907      	bls.n	800f678 <_fwalk_sglue+0x38>
 800f668:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f66c:	3301      	adds	r3, #1
 800f66e:	d003      	beq.n	800f678 <_fwalk_sglue+0x38>
 800f670:	4629      	mov	r1, r5
 800f672:	4638      	mov	r0, r7
 800f674:	47c0      	blx	r8
 800f676:	4306      	orrs	r6, r0
 800f678:	3568      	adds	r5, #104	@ 0x68
 800f67a:	e7e9      	b.n	800f650 <_fwalk_sglue+0x10>

0800f67c <sniprintf>:
 800f67c:	b40c      	push	{r2, r3}
 800f67e:	b530      	push	{r4, r5, lr}
 800f680:	4b18      	ldr	r3, [pc, #96]	@ (800f6e4 <sniprintf+0x68>)
 800f682:	1e0c      	subs	r4, r1, #0
 800f684:	681d      	ldr	r5, [r3, #0]
 800f686:	b09d      	sub	sp, #116	@ 0x74
 800f688:	da08      	bge.n	800f69c <sniprintf+0x20>
 800f68a:	238b      	movs	r3, #139	@ 0x8b
 800f68c:	602b      	str	r3, [r5, #0]
 800f68e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f692:	b01d      	add	sp, #116	@ 0x74
 800f694:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f698:	b002      	add	sp, #8
 800f69a:	4770      	bx	lr
 800f69c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f6a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f6a4:	f04f 0300 	mov.w	r3, #0
 800f6a8:	931b      	str	r3, [sp, #108]	@ 0x6c
 800f6aa:	bf14      	ite	ne
 800f6ac:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800f6b0:	4623      	moveq	r3, r4
 800f6b2:	9304      	str	r3, [sp, #16]
 800f6b4:	9307      	str	r3, [sp, #28]
 800f6b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f6ba:	9002      	str	r0, [sp, #8]
 800f6bc:	9006      	str	r0, [sp, #24]
 800f6be:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f6c2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f6c4:	ab21      	add	r3, sp, #132	@ 0x84
 800f6c6:	a902      	add	r1, sp, #8
 800f6c8:	4628      	mov	r0, r5
 800f6ca:	9301      	str	r3, [sp, #4]
 800f6cc:	f001 fb58 	bl	8010d80 <_svfiprintf_r>
 800f6d0:	1c43      	adds	r3, r0, #1
 800f6d2:	bfbc      	itt	lt
 800f6d4:	238b      	movlt	r3, #139	@ 0x8b
 800f6d6:	602b      	strlt	r3, [r5, #0]
 800f6d8:	2c00      	cmp	r4, #0
 800f6da:	d0da      	beq.n	800f692 <sniprintf+0x16>
 800f6dc:	9b02      	ldr	r3, [sp, #8]
 800f6de:	2200      	movs	r2, #0
 800f6e0:	701a      	strb	r2, [r3, #0]
 800f6e2:	e7d6      	b.n	800f692 <sniprintf+0x16>
 800f6e4:	20000118 	.word	0x20000118

0800f6e8 <__sread>:
 800f6e8:	b510      	push	{r4, lr}
 800f6ea:	460c      	mov	r4, r1
 800f6ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6f0:	f000 f86c 	bl	800f7cc <_read_r>
 800f6f4:	2800      	cmp	r0, #0
 800f6f6:	bfab      	itete	ge
 800f6f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f6fa:	89a3      	ldrhlt	r3, [r4, #12]
 800f6fc:	181b      	addge	r3, r3, r0
 800f6fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f702:	bfac      	ite	ge
 800f704:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f706:	81a3      	strhlt	r3, [r4, #12]
 800f708:	bd10      	pop	{r4, pc}

0800f70a <__swrite>:
 800f70a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f70e:	461f      	mov	r7, r3
 800f710:	898b      	ldrh	r3, [r1, #12]
 800f712:	05db      	lsls	r3, r3, #23
 800f714:	4605      	mov	r5, r0
 800f716:	460c      	mov	r4, r1
 800f718:	4616      	mov	r6, r2
 800f71a:	d505      	bpl.n	800f728 <__swrite+0x1e>
 800f71c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f720:	2302      	movs	r3, #2
 800f722:	2200      	movs	r2, #0
 800f724:	f000 f840 	bl	800f7a8 <_lseek_r>
 800f728:	89a3      	ldrh	r3, [r4, #12]
 800f72a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f72e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f732:	81a3      	strh	r3, [r4, #12]
 800f734:	4632      	mov	r2, r6
 800f736:	463b      	mov	r3, r7
 800f738:	4628      	mov	r0, r5
 800f73a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f73e:	f000 b867 	b.w	800f810 <_write_r>

0800f742 <__sseek>:
 800f742:	b510      	push	{r4, lr}
 800f744:	460c      	mov	r4, r1
 800f746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f74a:	f000 f82d 	bl	800f7a8 <_lseek_r>
 800f74e:	1c43      	adds	r3, r0, #1
 800f750:	89a3      	ldrh	r3, [r4, #12]
 800f752:	bf15      	itete	ne
 800f754:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f756:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f75a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f75e:	81a3      	strheq	r3, [r4, #12]
 800f760:	bf18      	it	ne
 800f762:	81a3      	strhne	r3, [r4, #12]
 800f764:	bd10      	pop	{r4, pc}

0800f766 <__sclose>:
 800f766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f76a:	f000 b80d 	b.w	800f788 <_close_r>

0800f76e <memset>:
 800f76e:	4402      	add	r2, r0
 800f770:	4603      	mov	r3, r0
 800f772:	4293      	cmp	r3, r2
 800f774:	d100      	bne.n	800f778 <memset+0xa>
 800f776:	4770      	bx	lr
 800f778:	f803 1b01 	strb.w	r1, [r3], #1
 800f77c:	e7f9      	b.n	800f772 <memset+0x4>
	...

0800f780 <_localeconv_r>:
 800f780:	4800      	ldr	r0, [pc, #0]	@ (800f784 <_localeconv_r+0x4>)
 800f782:	4770      	bx	lr
 800f784:	20000258 	.word	0x20000258

0800f788 <_close_r>:
 800f788:	b538      	push	{r3, r4, r5, lr}
 800f78a:	4d06      	ldr	r5, [pc, #24]	@ (800f7a4 <_close_r+0x1c>)
 800f78c:	2300      	movs	r3, #0
 800f78e:	4604      	mov	r4, r0
 800f790:	4608      	mov	r0, r1
 800f792:	602b      	str	r3, [r5, #0]
 800f794:	f7f3 f942 	bl	8002a1c <_close>
 800f798:	1c43      	adds	r3, r0, #1
 800f79a:	d102      	bne.n	800f7a2 <_close_r+0x1a>
 800f79c:	682b      	ldr	r3, [r5, #0]
 800f79e:	b103      	cbz	r3, 800f7a2 <_close_r+0x1a>
 800f7a0:	6023      	str	r3, [r4, #0]
 800f7a2:	bd38      	pop	{r3, r4, r5, pc}
 800f7a4:	20002688 	.word	0x20002688

0800f7a8 <_lseek_r>:
 800f7a8:	b538      	push	{r3, r4, r5, lr}
 800f7aa:	4d07      	ldr	r5, [pc, #28]	@ (800f7c8 <_lseek_r+0x20>)
 800f7ac:	4604      	mov	r4, r0
 800f7ae:	4608      	mov	r0, r1
 800f7b0:	4611      	mov	r1, r2
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	602a      	str	r2, [r5, #0]
 800f7b6:	461a      	mov	r2, r3
 800f7b8:	f7f3 f957 	bl	8002a6a <_lseek>
 800f7bc:	1c43      	adds	r3, r0, #1
 800f7be:	d102      	bne.n	800f7c6 <_lseek_r+0x1e>
 800f7c0:	682b      	ldr	r3, [r5, #0]
 800f7c2:	b103      	cbz	r3, 800f7c6 <_lseek_r+0x1e>
 800f7c4:	6023      	str	r3, [r4, #0]
 800f7c6:	bd38      	pop	{r3, r4, r5, pc}
 800f7c8:	20002688 	.word	0x20002688

0800f7cc <_read_r>:
 800f7cc:	b538      	push	{r3, r4, r5, lr}
 800f7ce:	4d07      	ldr	r5, [pc, #28]	@ (800f7ec <_read_r+0x20>)
 800f7d0:	4604      	mov	r4, r0
 800f7d2:	4608      	mov	r0, r1
 800f7d4:	4611      	mov	r1, r2
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	602a      	str	r2, [r5, #0]
 800f7da:	461a      	mov	r2, r3
 800f7dc:	f7f3 f8e5 	bl	80029aa <_read>
 800f7e0:	1c43      	adds	r3, r0, #1
 800f7e2:	d102      	bne.n	800f7ea <_read_r+0x1e>
 800f7e4:	682b      	ldr	r3, [r5, #0]
 800f7e6:	b103      	cbz	r3, 800f7ea <_read_r+0x1e>
 800f7e8:	6023      	str	r3, [r4, #0]
 800f7ea:	bd38      	pop	{r3, r4, r5, pc}
 800f7ec:	20002688 	.word	0x20002688

0800f7f0 <_sbrk_r>:
 800f7f0:	b538      	push	{r3, r4, r5, lr}
 800f7f2:	4d06      	ldr	r5, [pc, #24]	@ (800f80c <_sbrk_r+0x1c>)
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	4604      	mov	r4, r0
 800f7f8:	4608      	mov	r0, r1
 800f7fa:	602b      	str	r3, [r5, #0]
 800f7fc:	f7f3 f942 	bl	8002a84 <_sbrk>
 800f800:	1c43      	adds	r3, r0, #1
 800f802:	d102      	bne.n	800f80a <_sbrk_r+0x1a>
 800f804:	682b      	ldr	r3, [r5, #0]
 800f806:	b103      	cbz	r3, 800f80a <_sbrk_r+0x1a>
 800f808:	6023      	str	r3, [r4, #0]
 800f80a:	bd38      	pop	{r3, r4, r5, pc}
 800f80c:	20002688 	.word	0x20002688

0800f810 <_write_r>:
 800f810:	b538      	push	{r3, r4, r5, lr}
 800f812:	4d07      	ldr	r5, [pc, #28]	@ (800f830 <_write_r+0x20>)
 800f814:	4604      	mov	r4, r0
 800f816:	4608      	mov	r0, r1
 800f818:	4611      	mov	r1, r2
 800f81a:	2200      	movs	r2, #0
 800f81c:	602a      	str	r2, [r5, #0]
 800f81e:	461a      	mov	r2, r3
 800f820:	f7f3 f8e0 	bl	80029e4 <_write>
 800f824:	1c43      	adds	r3, r0, #1
 800f826:	d102      	bne.n	800f82e <_write_r+0x1e>
 800f828:	682b      	ldr	r3, [r5, #0]
 800f82a:	b103      	cbz	r3, 800f82e <_write_r+0x1e>
 800f82c:	6023      	str	r3, [r4, #0]
 800f82e:	bd38      	pop	{r3, r4, r5, pc}
 800f830:	20002688 	.word	0x20002688

0800f834 <__errno>:
 800f834:	4b01      	ldr	r3, [pc, #4]	@ (800f83c <__errno+0x8>)
 800f836:	6818      	ldr	r0, [r3, #0]
 800f838:	4770      	bx	lr
 800f83a:	bf00      	nop
 800f83c:	20000118 	.word	0x20000118

0800f840 <__libc_init_array>:
 800f840:	b570      	push	{r4, r5, r6, lr}
 800f842:	4d0d      	ldr	r5, [pc, #52]	@ (800f878 <__libc_init_array+0x38>)
 800f844:	4c0d      	ldr	r4, [pc, #52]	@ (800f87c <__libc_init_array+0x3c>)
 800f846:	1b64      	subs	r4, r4, r5
 800f848:	10a4      	asrs	r4, r4, #2
 800f84a:	2600      	movs	r6, #0
 800f84c:	42a6      	cmp	r6, r4
 800f84e:	d109      	bne.n	800f864 <__libc_init_array+0x24>
 800f850:	4d0b      	ldr	r5, [pc, #44]	@ (800f880 <__libc_init_array+0x40>)
 800f852:	4c0c      	ldr	r4, [pc, #48]	@ (800f884 <__libc_init_array+0x44>)
 800f854:	f001 ffa2 	bl	801179c <_init>
 800f858:	1b64      	subs	r4, r4, r5
 800f85a:	10a4      	asrs	r4, r4, #2
 800f85c:	2600      	movs	r6, #0
 800f85e:	42a6      	cmp	r6, r4
 800f860:	d105      	bne.n	800f86e <__libc_init_array+0x2e>
 800f862:	bd70      	pop	{r4, r5, r6, pc}
 800f864:	f855 3b04 	ldr.w	r3, [r5], #4
 800f868:	4798      	blx	r3
 800f86a:	3601      	adds	r6, #1
 800f86c:	e7ee      	b.n	800f84c <__libc_init_array+0xc>
 800f86e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f872:	4798      	blx	r3
 800f874:	3601      	adds	r6, #1
 800f876:	e7f2      	b.n	800f85e <__libc_init_array+0x1e>
 800f878:	08011bdc 	.word	0x08011bdc
 800f87c:	08011bdc 	.word	0x08011bdc
 800f880:	08011bdc 	.word	0x08011bdc
 800f884:	08011be0 	.word	0x08011be0

0800f888 <__retarget_lock_init_recursive>:
 800f888:	4770      	bx	lr

0800f88a <__retarget_lock_acquire_recursive>:
 800f88a:	4770      	bx	lr

0800f88c <__retarget_lock_release_recursive>:
 800f88c:	4770      	bx	lr

0800f88e <quorem>:
 800f88e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f892:	6903      	ldr	r3, [r0, #16]
 800f894:	690c      	ldr	r4, [r1, #16]
 800f896:	42a3      	cmp	r3, r4
 800f898:	4607      	mov	r7, r0
 800f89a:	db7e      	blt.n	800f99a <quorem+0x10c>
 800f89c:	3c01      	subs	r4, #1
 800f89e:	f101 0814 	add.w	r8, r1, #20
 800f8a2:	00a3      	lsls	r3, r4, #2
 800f8a4:	f100 0514 	add.w	r5, r0, #20
 800f8a8:	9300      	str	r3, [sp, #0]
 800f8aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f8ae:	9301      	str	r3, [sp, #4]
 800f8b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f8b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f8b8:	3301      	adds	r3, #1
 800f8ba:	429a      	cmp	r2, r3
 800f8bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f8c0:	fbb2 f6f3 	udiv	r6, r2, r3
 800f8c4:	d32e      	bcc.n	800f924 <quorem+0x96>
 800f8c6:	f04f 0a00 	mov.w	sl, #0
 800f8ca:	46c4      	mov	ip, r8
 800f8cc:	46ae      	mov	lr, r5
 800f8ce:	46d3      	mov	fp, sl
 800f8d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f8d4:	b298      	uxth	r0, r3
 800f8d6:	fb06 a000 	mla	r0, r6, r0, sl
 800f8da:	0c02      	lsrs	r2, r0, #16
 800f8dc:	0c1b      	lsrs	r3, r3, #16
 800f8de:	fb06 2303 	mla	r3, r6, r3, r2
 800f8e2:	f8de 2000 	ldr.w	r2, [lr]
 800f8e6:	b280      	uxth	r0, r0
 800f8e8:	b292      	uxth	r2, r2
 800f8ea:	1a12      	subs	r2, r2, r0
 800f8ec:	445a      	add	r2, fp
 800f8ee:	f8de 0000 	ldr.w	r0, [lr]
 800f8f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f8f6:	b29b      	uxth	r3, r3
 800f8f8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f8fc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f900:	b292      	uxth	r2, r2
 800f902:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f906:	45e1      	cmp	r9, ip
 800f908:	f84e 2b04 	str.w	r2, [lr], #4
 800f90c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f910:	d2de      	bcs.n	800f8d0 <quorem+0x42>
 800f912:	9b00      	ldr	r3, [sp, #0]
 800f914:	58eb      	ldr	r3, [r5, r3]
 800f916:	b92b      	cbnz	r3, 800f924 <quorem+0x96>
 800f918:	9b01      	ldr	r3, [sp, #4]
 800f91a:	3b04      	subs	r3, #4
 800f91c:	429d      	cmp	r5, r3
 800f91e:	461a      	mov	r2, r3
 800f920:	d32f      	bcc.n	800f982 <quorem+0xf4>
 800f922:	613c      	str	r4, [r7, #16]
 800f924:	4638      	mov	r0, r7
 800f926:	f001 f8c7 	bl	8010ab8 <__mcmp>
 800f92a:	2800      	cmp	r0, #0
 800f92c:	db25      	blt.n	800f97a <quorem+0xec>
 800f92e:	4629      	mov	r1, r5
 800f930:	2000      	movs	r0, #0
 800f932:	f858 2b04 	ldr.w	r2, [r8], #4
 800f936:	f8d1 c000 	ldr.w	ip, [r1]
 800f93a:	fa1f fe82 	uxth.w	lr, r2
 800f93e:	fa1f f38c 	uxth.w	r3, ip
 800f942:	eba3 030e 	sub.w	r3, r3, lr
 800f946:	4403      	add	r3, r0
 800f948:	0c12      	lsrs	r2, r2, #16
 800f94a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f94e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f952:	b29b      	uxth	r3, r3
 800f954:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f958:	45c1      	cmp	r9, r8
 800f95a:	f841 3b04 	str.w	r3, [r1], #4
 800f95e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f962:	d2e6      	bcs.n	800f932 <quorem+0xa4>
 800f964:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f968:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f96c:	b922      	cbnz	r2, 800f978 <quorem+0xea>
 800f96e:	3b04      	subs	r3, #4
 800f970:	429d      	cmp	r5, r3
 800f972:	461a      	mov	r2, r3
 800f974:	d30b      	bcc.n	800f98e <quorem+0x100>
 800f976:	613c      	str	r4, [r7, #16]
 800f978:	3601      	adds	r6, #1
 800f97a:	4630      	mov	r0, r6
 800f97c:	b003      	add	sp, #12
 800f97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f982:	6812      	ldr	r2, [r2, #0]
 800f984:	3b04      	subs	r3, #4
 800f986:	2a00      	cmp	r2, #0
 800f988:	d1cb      	bne.n	800f922 <quorem+0x94>
 800f98a:	3c01      	subs	r4, #1
 800f98c:	e7c6      	b.n	800f91c <quorem+0x8e>
 800f98e:	6812      	ldr	r2, [r2, #0]
 800f990:	3b04      	subs	r3, #4
 800f992:	2a00      	cmp	r2, #0
 800f994:	d1ef      	bne.n	800f976 <quorem+0xe8>
 800f996:	3c01      	subs	r4, #1
 800f998:	e7ea      	b.n	800f970 <quorem+0xe2>
 800f99a:	2000      	movs	r0, #0
 800f99c:	e7ee      	b.n	800f97c <quorem+0xee>
	...

0800f9a0 <_dtoa_r>:
 800f9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9a4:	69c7      	ldr	r7, [r0, #28]
 800f9a6:	b097      	sub	sp, #92	@ 0x5c
 800f9a8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800f9ac:	ec55 4b10 	vmov	r4, r5, d0
 800f9b0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800f9b2:	9107      	str	r1, [sp, #28]
 800f9b4:	4681      	mov	r9, r0
 800f9b6:	920c      	str	r2, [sp, #48]	@ 0x30
 800f9b8:	9311      	str	r3, [sp, #68]	@ 0x44
 800f9ba:	b97f      	cbnz	r7, 800f9dc <_dtoa_r+0x3c>
 800f9bc:	2010      	movs	r0, #16
 800f9be:	f7ff f887 	bl	800ead0 <malloc>
 800f9c2:	4602      	mov	r2, r0
 800f9c4:	f8c9 001c 	str.w	r0, [r9, #28]
 800f9c8:	b920      	cbnz	r0, 800f9d4 <_dtoa_r+0x34>
 800f9ca:	4ba9      	ldr	r3, [pc, #676]	@ (800fc70 <_dtoa_r+0x2d0>)
 800f9cc:	21ef      	movs	r1, #239	@ 0xef
 800f9ce:	48a9      	ldr	r0, [pc, #676]	@ (800fc74 <_dtoa_r+0x2d4>)
 800f9d0:	f001 fba6 	bl	8011120 <__assert_func>
 800f9d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f9d8:	6007      	str	r7, [r0, #0]
 800f9da:	60c7      	str	r7, [r0, #12]
 800f9dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f9e0:	6819      	ldr	r1, [r3, #0]
 800f9e2:	b159      	cbz	r1, 800f9fc <_dtoa_r+0x5c>
 800f9e4:	685a      	ldr	r2, [r3, #4]
 800f9e6:	604a      	str	r2, [r1, #4]
 800f9e8:	2301      	movs	r3, #1
 800f9ea:	4093      	lsls	r3, r2
 800f9ec:	608b      	str	r3, [r1, #8]
 800f9ee:	4648      	mov	r0, r9
 800f9f0:	f000 fe30 	bl	8010654 <_Bfree>
 800f9f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	601a      	str	r2, [r3, #0]
 800f9fc:	1e2b      	subs	r3, r5, #0
 800f9fe:	bfb9      	ittee	lt
 800fa00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fa04:	9305      	strlt	r3, [sp, #20]
 800fa06:	2300      	movge	r3, #0
 800fa08:	6033      	strge	r3, [r6, #0]
 800fa0a:	9f05      	ldr	r7, [sp, #20]
 800fa0c:	4b9a      	ldr	r3, [pc, #616]	@ (800fc78 <_dtoa_r+0x2d8>)
 800fa0e:	bfbc      	itt	lt
 800fa10:	2201      	movlt	r2, #1
 800fa12:	6032      	strlt	r2, [r6, #0]
 800fa14:	43bb      	bics	r3, r7
 800fa16:	d112      	bne.n	800fa3e <_dtoa_r+0x9e>
 800fa18:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800fa1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fa1e:	6013      	str	r3, [r2, #0]
 800fa20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fa24:	4323      	orrs	r3, r4
 800fa26:	f000 855a 	beq.w	80104de <_dtoa_r+0xb3e>
 800fa2a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fa2c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800fc8c <_dtoa_r+0x2ec>
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	f000 855c 	beq.w	80104ee <_dtoa_r+0xb4e>
 800fa36:	f10a 0303 	add.w	r3, sl, #3
 800fa3a:	f000 bd56 	b.w	80104ea <_dtoa_r+0xb4a>
 800fa3e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800fa42:	2200      	movs	r2, #0
 800fa44:	ec51 0b17 	vmov	r0, r1, d7
 800fa48:	2300      	movs	r3, #0
 800fa4a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800fa4e:	f7f1 f863 	bl	8000b18 <__aeabi_dcmpeq>
 800fa52:	4680      	mov	r8, r0
 800fa54:	b158      	cbz	r0, 800fa6e <_dtoa_r+0xce>
 800fa56:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800fa58:	2301      	movs	r3, #1
 800fa5a:	6013      	str	r3, [r2, #0]
 800fa5c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fa5e:	b113      	cbz	r3, 800fa66 <_dtoa_r+0xc6>
 800fa60:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800fa62:	4b86      	ldr	r3, [pc, #536]	@ (800fc7c <_dtoa_r+0x2dc>)
 800fa64:	6013      	str	r3, [r2, #0]
 800fa66:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800fc90 <_dtoa_r+0x2f0>
 800fa6a:	f000 bd40 	b.w	80104ee <_dtoa_r+0xb4e>
 800fa6e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800fa72:	aa14      	add	r2, sp, #80	@ 0x50
 800fa74:	a915      	add	r1, sp, #84	@ 0x54
 800fa76:	4648      	mov	r0, r9
 800fa78:	f001 f8ce 	bl	8010c18 <__d2b>
 800fa7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fa80:	9002      	str	r0, [sp, #8]
 800fa82:	2e00      	cmp	r6, #0
 800fa84:	d078      	beq.n	800fb78 <_dtoa_r+0x1d8>
 800fa86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fa88:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800fa8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fa94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fa98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fa9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800faa0:	4619      	mov	r1, r3
 800faa2:	2200      	movs	r2, #0
 800faa4:	4b76      	ldr	r3, [pc, #472]	@ (800fc80 <_dtoa_r+0x2e0>)
 800faa6:	f7f0 fc17 	bl	80002d8 <__aeabi_dsub>
 800faaa:	a36b      	add	r3, pc, #428	@ (adr r3, 800fc58 <_dtoa_r+0x2b8>)
 800faac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab0:	f7f0 fdca 	bl	8000648 <__aeabi_dmul>
 800fab4:	a36a      	add	r3, pc, #424	@ (adr r3, 800fc60 <_dtoa_r+0x2c0>)
 800fab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faba:	f7f0 fc0f 	bl	80002dc <__adddf3>
 800fabe:	4604      	mov	r4, r0
 800fac0:	4630      	mov	r0, r6
 800fac2:	460d      	mov	r5, r1
 800fac4:	f7f0 fd56 	bl	8000574 <__aeabi_i2d>
 800fac8:	a367      	add	r3, pc, #412	@ (adr r3, 800fc68 <_dtoa_r+0x2c8>)
 800faca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800face:	f7f0 fdbb 	bl	8000648 <__aeabi_dmul>
 800fad2:	4602      	mov	r2, r0
 800fad4:	460b      	mov	r3, r1
 800fad6:	4620      	mov	r0, r4
 800fad8:	4629      	mov	r1, r5
 800fada:	f7f0 fbff 	bl	80002dc <__adddf3>
 800fade:	4604      	mov	r4, r0
 800fae0:	460d      	mov	r5, r1
 800fae2:	f7f1 f861 	bl	8000ba8 <__aeabi_d2iz>
 800fae6:	2200      	movs	r2, #0
 800fae8:	4607      	mov	r7, r0
 800faea:	2300      	movs	r3, #0
 800faec:	4620      	mov	r0, r4
 800faee:	4629      	mov	r1, r5
 800faf0:	f7f1 f81c 	bl	8000b2c <__aeabi_dcmplt>
 800faf4:	b140      	cbz	r0, 800fb08 <_dtoa_r+0x168>
 800faf6:	4638      	mov	r0, r7
 800faf8:	f7f0 fd3c 	bl	8000574 <__aeabi_i2d>
 800fafc:	4622      	mov	r2, r4
 800fafe:	462b      	mov	r3, r5
 800fb00:	f7f1 f80a 	bl	8000b18 <__aeabi_dcmpeq>
 800fb04:	b900      	cbnz	r0, 800fb08 <_dtoa_r+0x168>
 800fb06:	3f01      	subs	r7, #1
 800fb08:	2f16      	cmp	r7, #22
 800fb0a:	d852      	bhi.n	800fbb2 <_dtoa_r+0x212>
 800fb0c:	4b5d      	ldr	r3, [pc, #372]	@ (800fc84 <_dtoa_r+0x2e4>)
 800fb0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fb1a:	f7f1 f807 	bl	8000b2c <__aeabi_dcmplt>
 800fb1e:	2800      	cmp	r0, #0
 800fb20:	d049      	beq.n	800fbb6 <_dtoa_r+0x216>
 800fb22:	3f01      	subs	r7, #1
 800fb24:	2300      	movs	r3, #0
 800fb26:	9310      	str	r3, [sp, #64]	@ 0x40
 800fb28:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fb2a:	1b9b      	subs	r3, r3, r6
 800fb2c:	1e5a      	subs	r2, r3, #1
 800fb2e:	bf45      	ittet	mi
 800fb30:	f1c3 0301 	rsbmi	r3, r3, #1
 800fb34:	9300      	strmi	r3, [sp, #0]
 800fb36:	2300      	movpl	r3, #0
 800fb38:	2300      	movmi	r3, #0
 800fb3a:	9206      	str	r2, [sp, #24]
 800fb3c:	bf54      	ite	pl
 800fb3e:	9300      	strpl	r3, [sp, #0]
 800fb40:	9306      	strmi	r3, [sp, #24]
 800fb42:	2f00      	cmp	r7, #0
 800fb44:	db39      	blt.n	800fbba <_dtoa_r+0x21a>
 800fb46:	9b06      	ldr	r3, [sp, #24]
 800fb48:	970d      	str	r7, [sp, #52]	@ 0x34
 800fb4a:	443b      	add	r3, r7
 800fb4c:	9306      	str	r3, [sp, #24]
 800fb4e:	2300      	movs	r3, #0
 800fb50:	9308      	str	r3, [sp, #32]
 800fb52:	9b07      	ldr	r3, [sp, #28]
 800fb54:	2b09      	cmp	r3, #9
 800fb56:	d863      	bhi.n	800fc20 <_dtoa_r+0x280>
 800fb58:	2b05      	cmp	r3, #5
 800fb5a:	bfc4      	itt	gt
 800fb5c:	3b04      	subgt	r3, #4
 800fb5e:	9307      	strgt	r3, [sp, #28]
 800fb60:	9b07      	ldr	r3, [sp, #28]
 800fb62:	f1a3 0302 	sub.w	r3, r3, #2
 800fb66:	bfcc      	ite	gt
 800fb68:	2400      	movgt	r4, #0
 800fb6a:	2401      	movle	r4, #1
 800fb6c:	2b03      	cmp	r3, #3
 800fb6e:	d863      	bhi.n	800fc38 <_dtoa_r+0x298>
 800fb70:	e8df f003 	tbb	[pc, r3]
 800fb74:	2b375452 	.word	0x2b375452
 800fb78:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800fb7c:	441e      	add	r6, r3
 800fb7e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fb82:	2b20      	cmp	r3, #32
 800fb84:	bfc1      	itttt	gt
 800fb86:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fb8a:	409f      	lslgt	r7, r3
 800fb8c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fb90:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fb94:	bfd6      	itet	le
 800fb96:	f1c3 0320 	rsble	r3, r3, #32
 800fb9a:	ea47 0003 	orrgt.w	r0, r7, r3
 800fb9e:	fa04 f003 	lslle.w	r0, r4, r3
 800fba2:	f7f0 fcd7 	bl	8000554 <__aeabi_ui2d>
 800fba6:	2201      	movs	r2, #1
 800fba8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800fbac:	3e01      	subs	r6, #1
 800fbae:	9212      	str	r2, [sp, #72]	@ 0x48
 800fbb0:	e776      	b.n	800faa0 <_dtoa_r+0x100>
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	e7b7      	b.n	800fb26 <_dtoa_r+0x186>
 800fbb6:	9010      	str	r0, [sp, #64]	@ 0x40
 800fbb8:	e7b6      	b.n	800fb28 <_dtoa_r+0x188>
 800fbba:	9b00      	ldr	r3, [sp, #0]
 800fbbc:	1bdb      	subs	r3, r3, r7
 800fbbe:	9300      	str	r3, [sp, #0]
 800fbc0:	427b      	negs	r3, r7
 800fbc2:	9308      	str	r3, [sp, #32]
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	930d      	str	r3, [sp, #52]	@ 0x34
 800fbc8:	e7c3      	b.n	800fb52 <_dtoa_r+0x1b2>
 800fbca:	2301      	movs	r3, #1
 800fbcc:	9309      	str	r3, [sp, #36]	@ 0x24
 800fbce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fbd0:	eb07 0b03 	add.w	fp, r7, r3
 800fbd4:	f10b 0301 	add.w	r3, fp, #1
 800fbd8:	2b01      	cmp	r3, #1
 800fbda:	9303      	str	r3, [sp, #12]
 800fbdc:	bfb8      	it	lt
 800fbde:	2301      	movlt	r3, #1
 800fbe0:	e006      	b.n	800fbf0 <_dtoa_r+0x250>
 800fbe2:	2301      	movs	r3, #1
 800fbe4:	9309      	str	r3, [sp, #36]	@ 0x24
 800fbe6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	dd28      	ble.n	800fc3e <_dtoa_r+0x29e>
 800fbec:	469b      	mov	fp, r3
 800fbee:	9303      	str	r3, [sp, #12]
 800fbf0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800fbf4:	2100      	movs	r1, #0
 800fbf6:	2204      	movs	r2, #4
 800fbf8:	f102 0514 	add.w	r5, r2, #20
 800fbfc:	429d      	cmp	r5, r3
 800fbfe:	d926      	bls.n	800fc4e <_dtoa_r+0x2ae>
 800fc00:	6041      	str	r1, [r0, #4]
 800fc02:	4648      	mov	r0, r9
 800fc04:	f000 fce6 	bl	80105d4 <_Balloc>
 800fc08:	4682      	mov	sl, r0
 800fc0a:	2800      	cmp	r0, #0
 800fc0c:	d142      	bne.n	800fc94 <_dtoa_r+0x2f4>
 800fc0e:	4b1e      	ldr	r3, [pc, #120]	@ (800fc88 <_dtoa_r+0x2e8>)
 800fc10:	4602      	mov	r2, r0
 800fc12:	f240 11af 	movw	r1, #431	@ 0x1af
 800fc16:	e6da      	b.n	800f9ce <_dtoa_r+0x2e>
 800fc18:	2300      	movs	r3, #0
 800fc1a:	e7e3      	b.n	800fbe4 <_dtoa_r+0x244>
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	e7d5      	b.n	800fbcc <_dtoa_r+0x22c>
 800fc20:	2401      	movs	r4, #1
 800fc22:	2300      	movs	r3, #0
 800fc24:	9307      	str	r3, [sp, #28]
 800fc26:	9409      	str	r4, [sp, #36]	@ 0x24
 800fc28:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	f8cd b00c 	str.w	fp, [sp, #12]
 800fc32:	2312      	movs	r3, #18
 800fc34:	920c      	str	r2, [sp, #48]	@ 0x30
 800fc36:	e7db      	b.n	800fbf0 <_dtoa_r+0x250>
 800fc38:	2301      	movs	r3, #1
 800fc3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc3c:	e7f4      	b.n	800fc28 <_dtoa_r+0x288>
 800fc3e:	f04f 0b01 	mov.w	fp, #1
 800fc42:	f8cd b00c 	str.w	fp, [sp, #12]
 800fc46:	465b      	mov	r3, fp
 800fc48:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800fc4c:	e7d0      	b.n	800fbf0 <_dtoa_r+0x250>
 800fc4e:	3101      	adds	r1, #1
 800fc50:	0052      	lsls	r2, r2, #1
 800fc52:	e7d1      	b.n	800fbf8 <_dtoa_r+0x258>
 800fc54:	f3af 8000 	nop.w
 800fc58:	636f4361 	.word	0x636f4361
 800fc5c:	3fd287a7 	.word	0x3fd287a7
 800fc60:	8b60c8b3 	.word	0x8b60c8b3
 800fc64:	3fc68a28 	.word	0x3fc68a28
 800fc68:	509f79fb 	.word	0x509f79fb
 800fc6c:	3fd34413 	.word	0x3fd34413
 800fc70:	080118a1 	.word	0x080118a1
 800fc74:	080118b8 	.word	0x080118b8
 800fc78:	7ff00000 	.word	0x7ff00000
 800fc7c:	08011871 	.word	0x08011871
 800fc80:	3ff80000 	.word	0x3ff80000
 800fc84:	08011a08 	.word	0x08011a08
 800fc88:	08011910 	.word	0x08011910
 800fc8c:	0801189d 	.word	0x0801189d
 800fc90:	08011870 	.word	0x08011870
 800fc94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fc98:	6018      	str	r0, [r3, #0]
 800fc9a:	9b03      	ldr	r3, [sp, #12]
 800fc9c:	2b0e      	cmp	r3, #14
 800fc9e:	f200 80a1 	bhi.w	800fde4 <_dtoa_r+0x444>
 800fca2:	2c00      	cmp	r4, #0
 800fca4:	f000 809e 	beq.w	800fde4 <_dtoa_r+0x444>
 800fca8:	2f00      	cmp	r7, #0
 800fcaa:	dd33      	ble.n	800fd14 <_dtoa_r+0x374>
 800fcac:	4b9c      	ldr	r3, [pc, #624]	@ (800ff20 <_dtoa_r+0x580>)
 800fcae:	f007 020f 	and.w	r2, r7, #15
 800fcb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fcb6:	ed93 7b00 	vldr	d7, [r3]
 800fcba:	05f8      	lsls	r0, r7, #23
 800fcbc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800fcc0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800fcc4:	d516      	bpl.n	800fcf4 <_dtoa_r+0x354>
 800fcc6:	4b97      	ldr	r3, [pc, #604]	@ (800ff24 <_dtoa_r+0x584>)
 800fcc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fccc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fcd0:	f7f0 fde4 	bl	800089c <__aeabi_ddiv>
 800fcd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fcd8:	f004 040f 	and.w	r4, r4, #15
 800fcdc:	2603      	movs	r6, #3
 800fcde:	4d91      	ldr	r5, [pc, #580]	@ (800ff24 <_dtoa_r+0x584>)
 800fce0:	b954      	cbnz	r4, 800fcf8 <_dtoa_r+0x358>
 800fce2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fce6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fcea:	f7f0 fdd7 	bl	800089c <__aeabi_ddiv>
 800fcee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fcf2:	e028      	b.n	800fd46 <_dtoa_r+0x3a6>
 800fcf4:	2602      	movs	r6, #2
 800fcf6:	e7f2      	b.n	800fcde <_dtoa_r+0x33e>
 800fcf8:	07e1      	lsls	r1, r4, #31
 800fcfa:	d508      	bpl.n	800fd0e <_dtoa_r+0x36e>
 800fcfc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fd00:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fd04:	f7f0 fca0 	bl	8000648 <__aeabi_dmul>
 800fd08:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fd0c:	3601      	adds	r6, #1
 800fd0e:	1064      	asrs	r4, r4, #1
 800fd10:	3508      	adds	r5, #8
 800fd12:	e7e5      	b.n	800fce0 <_dtoa_r+0x340>
 800fd14:	f000 80af 	beq.w	800fe76 <_dtoa_r+0x4d6>
 800fd18:	427c      	negs	r4, r7
 800fd1a:	4b81      	ldr	r3, [pc, #516]	@ (800ff20 <_dtoa_r+0x580>)
 800fd1c:	4d81      	ldr	r5, [pc, #516]	@ (800ff24 <_dtoa_r+0x584>)
 800fd1e:	f004 020f 	and.w	r2, r4, #15
 800fd22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fd2e:	f7f0 fc8b 	bl	8000648 <__aeabi_dmul>
 800fd32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fd36:	1124      	asrs	r4, r4, #4
 800fd38:	2300      	movs	r3, #0
 800fd3a:	2602      	movs	r6, #2
 800fd3c:	2c00      	cmp	r4, #0
 800fd3e:	f040 808f 	bne.w	800fe60 <_dtoa_r+0x4c0>
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d1d3      	bne.n	800fcee <_dtoa_r+0x34e>
 800fd46:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fd48:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	f000 8094 	beq.w	800fe7a <_dtoa_r+0x4da>
 800fd52:	4b75      	ldr	r3, [pc, #468]	@ (800ff28 <_dtoa_r+0x588>)
 800fd54:	2200      	movs	r2, #0
 800fd56:	4620      	mov	r0, r4
 800fd58:	4629      	mov	r1, r5
 800fd5a:	f7f0 fee7 	bl	8000b2c <__aeabi_dcmplt>
 800fd5e:	2800      	cmp	r0, #0
 800fd60:	f000 808b 	beq.w	800fe7a <_dtoa_r+0x4da>
 800fd64:	9b03      	ldr	r3, [sp, #12]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	f000 8087 	beq.w	800fe7a <_dtoa_r+0x4da>
 800fd6c:	f1bb 0f00 	cmp.w	fp, #0
 800fd70:	dd34      	ble.n	800fddc <_dtoa_r+0x43c>
 800fd72:	4620      	mov	r0, r4
 800fd74:	4b6d      	ldr	r3, [pc, #436]	@ (800ff2c <_dtoa_r+0x58c>)
 800fd76:	2200      	movs	r2, #0
 800fd78:	4629      	mov	r1, r5
 800fd7a:	f7f0 fc65 	bl	8000648 <__aeabi_dmul>
 800fd7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fd82:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800fd86:	3601      	adds	r6, #1
 800fd88:	465c      	mov	r4, fp
 800fd8a:	4630      	mov	r0, r6
 800fd8c:	f7f0 fbf2 	bl	8000574 <__aeabi_i2d>
 800fd90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fd94:	f7f0 fc58 	bl	8000648 <__aeabi_dmul>
 800fd98:	4b65      	ldr	r3, [pc, #404]	@ (800ff30 <_dtoa_r+0x590>)
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	f7f0 fa9e 	bl	80002dc <__adddf3>
 800fda0:	4605      	mov	r5, r0
 800fda2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800fda6:	2c00      	cmp	r4, #0
 800fda8:	d16a      	bne.n	800fe80 <_dtoa_r+0x4e0>
 800fdaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fdae:	4b61      	ldr	r3, [pc, #388]	@ (800ff34 <_dtoa_r+0x594>)
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	f7f0 fa91 	bl	80002d8 <__aeabi_dsub>
 800fdb6:	4602      	mov	r2, r0
 800fdb8:	460b      	mov	r3, r1
 800fdba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fdbe:	462a      	mov	r2, r5
 800fdc0:	4633      	mov	r3, r6
 800fdc2:	f7f0 fed1 	bl	8000b68 <__aeabi_dcmpgt>
 800fdc6:	2800      	cmp	r0, #0
 800fdc8:	f040 8298 	bne.w	80102fc <_dtoa_r+0x95c>
 800fdcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fdd0:	462a      	mov	r2, r5
 800fdd2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800fdd6:	f7f0 fea9 	bl	8000b2c <__aeabi_dcmplt>
 800fdda:	bb38      	cbnz	r0, 800fe2c <_dtoa_r+0x48c>
 800fddc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800fde0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800fde4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	f2c0 8157 	blt.w	801009a <_dtoa_r+0x6fa>
 800fdec:	2f0e      	cmp	r7, #14
 800fdee:	f300 8154 	bgt.w	801009a <_dtoa_r+0x6fa>
 800fdf2:	4b4b      	ldr	r3, [pc, #300]	@ (800ff20 <_dtoa_r+0x580>)
 800fdf4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fdf8:	ed93 7b00 	vldr	d7, [r3]
 800fdfc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	ed8d 7b00 	vstr	d7, [sp]
 800fe04:	f280 80e5 	bge.w	800ffd2 <_dtoa_r+0x632>
 800fe08:	9b03      	ldr	r3, [sp, #12]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	f300 80e1 	bgt.w	800ffd2 <_dtoa_r+0x632>
 800fe10:	d10c      	bne.n	800fe2c <_dtoa_r+0x48c>
 800fe12:	4b48      	ldr	r3, [pc, #288]	@ (800ff34 <_dtoa_r+0x594>)
 800fe14:	2200      	movs	r2, #0
 800fe16:	ec51 0b17 	vmov	r0, r1, d7
 800fe1a:	f7f0 fc15 	bl	8000648 <__aeabi_dmul>
 800fe1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fe22:	f7f0 fe97 	bl	8000b54 <__aeabi_dcmpge>
 800fe26:	2800      	cmp	r0, #0
 800fe28:	f000 8266 	beq.w	80102f8 <_dtoa_r+0x958>
 800fe2c:	2400      	movs	r4, #0
 800fe2e:	4625      	mov	r5, r4
 800fe30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fe32:	4656      	mov	r6, sl
 800fe34:	ea6f 0803 	mvn.w	r8, r3
 800fe38:	2700      	movs	r7, #0
 800fe3a:	4621      	mov	r1, r4
 800fe3c:	4648      	mov	r0, r9
 800fe3e:	f000 fc09 	bl	8010654 <_Bfree>
 800fe42:	2d00      	cmp	r5, #0
 800fe44:	f000 80bd 	beq.w	800ffc2 <_dtoa_r+0x622>
 800fe48:	b12f      	cbz	r7, 800fe56 <_dtoa_r+0x4b6>
 800fe4a:	42af      	cmp	r7, r5
 800fe4c:	d003      	beq.n	800fe56 <_dtoa_r+0x4b6>
 800fe4e:	4639      	mov	r1, r7
 800fe50:	4648      	mov	r0, r9
 800fe52:	f000 fbff 	bl	8010654 <_Bfree>
 800fe56:	4629      	mov	r1, r5
 800fe58:	4648      	mov	r0, r9
 800fe5a:	f000 fbfb 	bl	8010654 <_Bfree>
 800fe5e:	e0b0      	b.n	800ffc2 <_dtoa_r+0x622>
 800fe60:	07e2      	lsls	r2, r4, #31
 800fe62:	d505      	bpl.n	800fe70 <_dtoa_r+0x4d0>
 800fe64:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fe68:	f7f0 fbee 	bl	8000648 <__aeabi_dmul>
 800fe6c:	3601      	adds	r6, #1
 800fe6e:	2301      	movs	r3, #1
 800fe70:	1064      	asrs	r4, r4, #1
 800fe72:	3508      	adds	r5, #8
 800fe74:	e762      	b.n	800fd3c <_dtoa_r+0x39c>
 800fe76:	2602      	movs	r6, #2
 800fe78:	e765      	b.n	800fd46 <_dtoa_r+0x3a6>
 800fe7a:	9c03      	ldr	r4, [sp, #12]
 800fe7c:	46b8      	mov	r8, r7
 800fe7e:	e784      	b.n	800fd8a <_dtoa_r+0x3ea>
 800fe80:	4b27      	ldr	r3, [pc, #156]	@ (800ff20 <_dtoa_r+0x580>)
 800fe82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fe84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fe88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fe8c:	4454      	add	r4, sl
 800fe8e:	2900      	cmp	r1, #0
 800fe90:	d054      	beq.n	800ff3c <_dtoa_r+0x59c>
 800fe92:	4929      	ldr	r1, [pc, #164]	@ (800ff38 <_dtoa_r+0x598>)
 800fe94:	2000      	movs	r0, #0
 800fe96:	f7f0 fd01 	bl	800089c <__aeabi_ddiv>
 800fe9a:	4633      	mov	r3, r6
 800fe9c:	462a      	mov	r2, r5
 800fe9e:	f7f0 fa1b 	bl	80002d8 <__aeabi_dsub>
 800fea2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fea6:	4656      	mov	r6, sl
 800fea8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800feac:	f7f0 fe7c 	bl	8000ba8 <__aeabi_d2iz>
 800feb0:	4605      	mov	r5, r0
 800feb2:	f7f0 fb5f 	bl	8000574 <__aeabi_i2d>
 800feb6:	4602      	mov	r2, r0
 800feb8:	460b      	mov	r3, r1
 800feba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800febe:	f7f0 fa0b 	bl	80002d8 <__aeabi_dsub>
 800fec2:	3530      	adds	r5, #48	@ 0x30
 800fec4:	4602      	mov	r2, r0
 800fec6:	460b      	mov	r3, r1
 800fec8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fecc:	f806 5b01 	strb.w	r5, [r6], #1
 800fed0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fed4:	f7f0 fe2a 	bl	8000b2c <__aeabi_dcmplt>
 800fed8:	2800      	cmp	r0, #0
 800feda:	d172      	bne.n	800ffc2 <_dtoa_r+0x622>
 800fedc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fee0:	4911      	ldr	r1, [pc, #68]	@ (800ff28 <_dtoa_r+0x588>)
 800fee2:	2000      	movs	r0, #0
 800fee4:	f7f0 f9f8 	bl	80002d8 <__aeabi_dsub>
 800fee8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800feec:	f7f0 fe1e 	bl	8000b2c <__aeabi_dcmplt>
 800fef0:	2800      	cmp	r0, #0
 800fef2:	f040 80b4 	bne.w	801005e <_dtoa_r+0x6be>
 800fef6:	42a6      	cmp	r6, r4
 800fef8:	f43f af70 	beq.w	800fddc <_dtoa_r+0x43c>
 800fefc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ff00:	4b0a      	ldr	r3, [pc, #40]	@ (800ff2c <_dtoa_r+0x58c>)
 800ff02:	2200      	movs	r2, #0
 800ff04:	f7f0 fba0 	bl	8000648 <__aeabi_dmul>
 800ff08:	4b08      	ldr	r3, [pc, #32]	@ (800ff2c <_dtoa_r+0x58c>)
 800ff0a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ff0e:	2200      	movs	r2, #0
 800ff10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff14:	f7f0 fb98 	bl	8000648 <__aeabi_dmul>
 800ff18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ff1c:	e7c4      	b.n	800fea8 <_dtoa_r+0x508>
 800ff1e:	bf00      	nop
 800ff20:	08011a08 	.word	0x08011a08
 800ff24:	080119e0 	.word	0x080119e0
 800ff28:	3ff00000 	.word	0x3ff00000
 800ff2c:	40240000 	.word	0x40240000
 800ff30:	401c0000 	.word	0x401c0000
 800ff34:	40140000 	.word	0x40140000
 800ff38:	3fe00000 	.word	0x3fe00000
 800ff3c:	4631      	mov	r1, r6
 800ff3e:	4628      	mov	r0, r5
 800ff40:	f7f0 fb82 	bl	8000648 <__aeabi_dmul>
 800ff44:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ff48:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ff4a:	4656      	mov	r6, sl
 800ff4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff50:	f7f0 fe2a 	bl	8000ba8 <__aeabi_d2iz>
 800ff54:	4605      	mov	r5, r0
 800ff56:	f7f0 fb0d 	bl	8000574 <__aeabi_i2d>
 800ff5a:	4602      	mov	r2, r0
 800ff5c:	460b      	mov	r3, r1
 800ff5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff62:	f7f0 f9b9 	bl	80002d8 <__aeabi_dsub>
 800ff66:	3530      	adds	r5, #48	@ 0x30
 800ff68:	f806 5b01 	strb.w	r5, [r6], #1
 800ff6c:	4602      	mov	r2, r0
 800ff6e:	460b      	mov	r3, r1
 800ff70:	42a6      	cmp	r6, r4
 800ff72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ff76:	f04f 0200 	mov.w	r2, #0
 800ff7a:	d124      	bne.n	800ffc6 <_dtoa_r+0x626>
 800ff7c:	4baf      	ldr	r3, [pc, #700]	@ (801023c <_dtoa_r+0x89c>)
 800ff7e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ff82:	f7f0 f9ab 	bl	80002dc <__adddf3>
 800ff86:	4602      	mov	r2, r0
 800ff88:	460b      	mov	r3, r1
 800ff8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff8e:	f7f0 fdeb 	bl	8000b68 <__aeabi_dcmpgt>
 800ff92:	2800      	cmp	r0, #0
 800ff94:	d163      	bne.n	801005e <_dtoa_r+0x6be>
 800ff96:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ff9a:	49a8      	ldr	r1, [pc, #672]	@ (801023c <_dtoa_r+0x89c>)
 800ff9c:	2000      	movs	r0, #0
 800ff9e:	f7f0 f99b 	bl	80002d8 <__aeabi_dsub>
 800ffa2:	4602      	mov	r2, r0
 800ffa4:	460b      	mov	r3, r1
 800ffa6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ffaa:	f7f0 fdbf 	bl	8000b2c <__aeabi_dcmplt>
 800ffae:	2800      	cmp	r0, #0
 800ffb0:	f43f af14 	beq.w	800fddc <_dtoa_r+0x43c>
 800ffb4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ffb6:	1e73      	subs	r3, r6, #1
 800ffb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ffba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ffbe:	2b30      	cmp	r3, #48	@ 0x30
 800ffc0:	d0f8      	beq.n	800ffb4 <_dtoa_r+0x614>
 800ffc2:	4647      	mov	r7, r8
 800ffc4:	e03b      	b.n	801003e <_dtoa_r+0x69e>
 800ffc6:	4b9e      	ldr	r3, [pc, #632]	@ (8010240 <_dtoa_r+0x8a0>)
 800ffc8:	f7f0 fb3e 	bl	8000648 <__aeabi_dmul>
 800ffcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ffd0:	e7bc      	b.n	800ff4c <_dtoa_r+0x5ac>
 800ffd2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ffd6:	4656      	mov	r6, sl
 800ffd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ffdc:	4620      	mov	r0, r4
 800ffde:	4629      	mov	r1, r5
 800ffe0:	f7f0 fc5c 	bl	800089c <__aeabi_ddiv>
 800ffe4:	f7f0 fde0 	bl	8000ba8 <__aeabi_d2iz>
 800ffe8:	4680      	mov	r8, r0
 800ffea:	f7f0 fac3 	bl	8000574 <__aeabi_i2d>
 800ffee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fff2:	f7f0 fb29 	bl	8000648 <__aeabi_dmul>
 800fff6:	4602      	mov	r2, r0
 800fff8:	460b      	mov	r3, r1
 800fffa:	4620      	mov	r0, r4
 800fffc:	4629      	mov	r1, r5
 800fffe:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010002:	f7f0 f969 	bl	80002d8 <__aeabi_dsub>
 8010006:	f806 4b01 	strb.w	r4, [r6], #1
 801000a:	9d03      	ldr	r5, [sp, #12]
 801000c:	eba6 040a 	sub.w	r4, r6, sl
 8010010:	42a5      	cmp	r5, r4
 8010012:	4602      	mov	r2, r0
 8010014:	460b      	mov	r3, r1
 8010016:	d133      	bne.n	8010080 <_dtoa_r+0x6e0>
 8010018:	f7f0 f960 	bl	80002dc <__adddf3>
 801001c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010020:	4604      	mov	r4, r0
 8010022:	460d      	mov	r5, r1
 8010024:	f7f0 fda0 	bl	8000b68 <__aeabi_dcmpgt>
 8010028:	b9c0      	cbnz	r0, 801005c <_dtoa_r+0x6bc>
 801002a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801002e:	4620      	mov	r0, r4
 8010030:	4629      	mov	r1, r5
 8010032:	f7f0 fd71 	bl	8000b18 <__aeabi_dcmpeq>
 8010036:	b110      	cbz	r0, 801003e <_dtoa_r+0x69e>
 8010038:	f018 0f01 	tst.w	r8, #1
 801003c:	d10e      	bne.n	801005c <_dtoa_r+0x6bc>
 801003e:	9902      	ldr	r1, [sp, #8]
 8010040:	4648      	mov	r0, r9
 8010042:	f000 fb07 	bl	8010654 <_Bfree>
 8010046:	2300      	movs	r3, #0
 8010048:	7033      	strb	r3, [r6, #0]
 801004a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801004c:	3701      	adds	r7, #1
 801004e:	601f      	str	r7, [r3, #0]
 8010050:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010052:	2b00      	cmp	r3, #0
 8010054:	f000 824b 	beq.w	80104ee <_dtoa_r+0xb4e>
 8010058:	601e      	str	r6, [r3, #0]
 801005a:	e248      	b.n	80104ee <_dtoa_r+0xb4e>
 801005c:	46b8      	mov	r8, r7
 801005e:	4633      	mov	r3, r6
 8010060:	461e      	mov	r6, r3
 8010062:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010066:	2a39      	cmp	r2, #57	@ 0x39
 8010068:	d106      	bne.n	8010078 <_dtoa_r+0x6d8>
 801006a:	459a      	cmp	sl, r3
 801006c:	d1f8      	bne.n	8010060 <_dtoa_r+0x6c0>
 801006e:	2230      	movs	r2, #48	@ 0x30
 8010070:	f108 0801 	add.w	r8, r8, #1
 8010074:	f88a 2000 	strb.w	r2, [sl]
 8010078:	781a      	ldrb	r2, [r3, #0]
 801007a:	3201      	adds	r2, #1
 801007c:	701a      	strb	r2, [r3, #0]
 801007e:	e7a0      	b.n	800ffc2 <_dtoa_r+0x622>
 8010080:	4b6f      	ldr	r3, [pc, #444]	@ (8010240 <_dtoa_r+0x8a0>)
 8010082:	2200      	movs	r2, #0
 8010084:	f7f0 fae0 	bl	8000648 <__aeabi_dmul>
 8010088:	2200      	movs	r2, #0
 801008a:	2300      	movs	r3, #0
 801008c:	4604      	mov	r4, r0
 801008e:	460d      	mov	r5, r1
 8010090:	f7f0 fd42 	bl	8000b18 <__aeabi_dcmpeq>
 8010094:	2800      	cmp	r0, #0
 8010096:	d09f      	beq.n	800ffd8 <_dtoa_r+0x638>
 8010098:	e7d1      	b.n	801003e <_dtoa_r+0x69e>
 801009a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801009c:	2a00      	cmp	r2, #0
 801009e:	f000 80ea 	beq.w	8010276 <_dtoa_r+0x8d6>
 80100a2:	9a07      	ldr	r2, [sp, #28]
 80100a4:	2a01      	cmp	r2, #1
 80100a6:	f300 80cd 	bgt.w	8010244 <_dtoa_r+0x8a4>
 80100aa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80100ac:	2a00      	cmp	r2, #0
 80100ae:	f000 80c1 	beq.w	8010234 <_dtoa_r+0x894>
 80100b2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80100b6:	9c08      	ldr	r4, [sp, #32]
 80100b8:	9e00      	ldr	r6, [sp, #0]
 80100ba:	9a00      	ldr	r2, [sp, #0]
 80100bc:	441a      	add	r2, r3
 80100be:	9200      	str	r2, [sp, #0]
 80100c0:	9a06      	ldr	r2, [sp, #24]
 80100c2:	2101      	movs	r1, #1
 80100c4:	441a      	add	r2, r3
 80100c6:	4648      	mov	r0, r9
 80100c8:	9206      	str	r2, [sp, #24]
 80100ca:	f000 fb77 	bl	80107bc <__i2b>
 80100ce:	4605      	mov	r5, r0
 80100d0:	b166      	cbz	r6, 80100ec <_dtoa_r+0x74c>
 80100d2:	9b06      	ldr	r3, [sp, #24]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	dd09      	ble.n	80100ec <_dtoa_r+0x74c>
 80100d8:	42b3      	cmp	r3, r6
 80100da:	9a00      	ldr	r2, [sp, #0]
 80100dc:	bfa8      	it	ge
 80100de:	4633      	movge	r3, r6
 80100e0:	1ad2      	subs	r2, r2, r3
 80100e2:	9200      	str	r2, [sp, #0]
 80100e4:	9a06      	ldr	r2, [sp, #24]
 80100e6:	1af6      	subs	r6, r6, r3
 80100e8:	1ad3      	subs	r3, r2, r3
 80100ea:	9306      	str	r3, [sp, #24]
 80100ec:	9b08      	ldr	r3, [sp, #32]
 80100ee:	b30b      	cbz	r3, 8010134 <_dtoa_r+0x794>
 80100f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	f000 80c6 	beq.w	8010284 <_dtoa_r+0x8e4>
 80100f8:	2c00      	cmp	r4, #0
 80100fa:	f000 80c0 	beq.w	801027e <_dtoa_r+0x8de>
 80100fe:	4629      	mov	r1, r5
 8010100:	4622      	mov	r2, r4
 8010102:	4648      	mov	r0, r9
 8010104:	f000 fc12 	bl	801092c <__pow5mult>
 8010108:	9a02      	ldr	r2, [sp, #8]
 801010a:	4601      	mov	r1, r0
 801010c:	4605      	mov	r5, r0
 801010e:	4648      	mov	r0, r9
 8010110:	f000 fb6a 	bl	80107e8 <__multiply>
 8010114:	9902      	ldr	r1, [sp, #8]
 8010116:	4680      	mov	r8, r0
 8010118:	4648      	mov	r0, r9
 801011a:	f000 fa9b 	bl	8010654 <_Bfree>
 801011e:	9b08      	ldr	r3, [sp, #32]
 8010120:	1b1b      	subs	r3, r3, r4
 8010122:	9308      	str	r3, [sp, #32]
 8010124:	f000 80b1 	beq.w	801028a <_dtoa_r+0x8ea>
 8010128:	9a08      	ldr	r2, [sp, #32]
 801012a:	4641      	mov	r1, r8
 801012c:	4648      	mov	r0, r9
 801012e:	f000 fbfd 	bl	801092c <__pow5mult>
 8010132:	9002      	str	r0, [sp, #8]
 8010134:	2101      	movs	r1, #1
 8010136:	4648      	mov	r0, r9
 8010138:	f000 fb40 	bl	80107bc <__i2b>
 801013c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801013e:	4604      	mov	r4, r0
 8010140:	2b00      	cmp	r3, #0
 8010142:	f000 81d8 	beq.w	80104f6 <_dtoa_r+0xb56>
 8010146:	461a      	mov	r2, r3
 8010148:	4601      	mov	r1, r0
 801014a:	4648      	mov	r0, r9
 801014c:	f000 fbee 	bl	801092c <__pow5mult>
 8010150:	9b07      	ldr	r3, [sp, #28]
 8010152:	2b01      	cmp	r3, #1
 8010154:	4604      	mov	r4, r0
 8010156:	f300 809f 	bgt.w	8010298 <_dtoa_r+0x8f8>
 801015a:	9b04      	ldr	r3, [sp, #16]
 801015c:	2b00      	cmp	r3, #0
 801015e:	f040 8097 	bne.w	8010290 <_dtoa_r+0x8f0>
 8010162:	9b05      	ldr	r3, [sp, #20]
 8010164:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010168:	2b00      	cmp	r3, #0
 801016a:	f040 8093 	bne.w	8010294 <_dtoa_r+0x8f4>
 801016e:	9b05      	ldr	r3, [sp, #20]
 8010170:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010174:	0d1b      	lsrs	r3, r3, #20
 8010176:	051b      	lsls	r3, r3, #20
 8010178:	b133      	cbz	r3, 8010188 <_dtoa_r+0x7e8>
 801017a:	9b00      	ldr	r3, [sp, #0]
 801017c:	3301      	adds	r3, #1
 801017e:	9300      	str	r3, [sp, #0]
 8010180:	9b06      	ldr	r3, [sp, #24]
 8010182:	3301      	adds	r3, #1
 8010184:	9306      	str	r3, [sp, #24]
 8010186:	2301      	movs	r3, #1
 8010188:	9308      	str	r3, [sp, #32]
 801018a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801018c:	2b00      	cmp	r3, #0
 801018e:	f000 81b8 	beq.w	8010502 <_dtoa_r+0xb62>
 8010192:	6923      	ldr	r3, [r4, #16]
 8010194:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010198:	6918      	ldr	r0, [r3, #16]
 801019a:	f000 fac3 	bl	8010724 <__hi0bits>
 801019e:	f1c0 0020 	rsb	r0, r0, #32
 80101a2:	9b06      	ldr	r3, [sp, #24]
 80101a4:	4418      	add	r0, r3
 80101a6:	f010 001f 	ands.w	r0, r0, #31
 80101aa:	f000 8082 	beq.w	80102b2 <_dtoa_r+0x912>
 80101ae:	f1c0 0320 	rsb	r3, r0, #32
 80101b2:	2b04      	cmp	r3, #4
 80101b4:	dd73      	ble.n	801029e <_dtoa_r+0x8fe>
 80101b6:	9b00      	ldr	r3, [sp, #0]
 80101b8:	f1c0 001c 	rsb	r0, r0, #28
 80101bc:	4403      	add	r3, r0
 80101be:	9300      	str	r3, [sp, #0]
 80101c0:	9b06      	ldr	r3, [sp, #24]
 80101c2:	4403      	add	r3, r0
 80101c4:	4406      	add	r6, r0
 80101c6:	9306      	str	r3, [sp, #24]
 80101c8:	9b00      	ldr	r3, [sp, #0]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	dd05      	ble.n	80101da <_dtoa_r+0x83a>
 80101ce:	9902      	ldr	r1, [sp, #8]
 80101d0:	461a      	mov	r2, r3
 80101d2:	4648      	mov	r0, r9
 80101d4:	f000 fc04 	bl	80109e0 <__lshift>
 80101d8:	9002      	str	r0, [sp, #8]
 80101da:	9b06      	ldr	r3, [sp, #24]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	dd05      	ble.n	80101ec <_dtoa_r+0x84c>
 80101e0:	4621      	mov	r1, r4
 80101e2:	461a      	mov	r2, r3
 80101e4:	4648      	mov	r0, r9
 80101e6:	f000 fbfb 	bl	80109e0 <__lshift>
 80101ea:	4604      	mov	r4, r0
 80101ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d061      	beq.n	80102b6 <_dtoa_r+0x916>
 80101f2:	9802      	ldr	r0, [sp, #8]
 80101f4:	4621      	mov	r1, r4
 80101f6:	f000 fc5f 	bl	8010ab8 <__mcmp>
 80101fa:	2800      	cmp	r0, #0
 80101fc:	da5b      	bge.n	80102b6 <_dtoa_r+0x916>
 80101fe:	2300      	movs	r3, #0
 8010200:	9902      	ldr	r1, [sp, #8]
 8010202:	220a      	movs	r2, #10
 8010204:	4648      	mov	r0, r9
 8010206:	f000 fa47 	bl	8010698 <__multadd>
 801020a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801020c:	9002      	str	r0, [sp, #8]
 801020e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8010212:	2b00      	cmp	r3, #0
 8010214:	f000 8177 	beq.w	8010506 <_dtoa_r+0xb66>
 8010218:	4629      	mov	r1, r5
 801021a:	2300      	movs	r3, #0
 801021c:	220a      	movs	r2, #10
 801021e:	4648      	mov	r0, r9
 8010220:	f000 fa3a 	bl	8010698 <__multadd>
 8010224:	f1bb 0f00 	cmp.w	fp, #0
 8010228:	4605      	mov	r5, r0
 801022a:	dc6f      	bgt.n	801030c <_dtoa_r+0x96c>
 801022c:	9b07      	ldr	r3, [sp, #28]
 801022e:	2b02      	cmp	r3, #2
 8010230:	dc49      	bgt.n	80102c6 <_dtoa_r+0x926>
 8010232:	e06b      	b.n	801030c <_dtoa_r+0x96c>
 8010234:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010236:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801023a:	e73c      	b.n	80100b6 <_dtoa_r+0x716>
 801023c:	3fe00000 	.word	0x3fe00000
 8010240:	40240000 	.word	0x40240000
 8010244:	9b03      	ldr	r3, [sp, #12]
 8010246:	1e5c      	subs	r4, r3, #1
 8010248:	9b08      	ldr	r3, [sp, #32]
 801024a:	42a3      	cmp	r3, r4
 801024c:	db09      	blt.n	8010262 <_dtoa_r+0x8c2>
 801024e:	1b1c      	subs	r4, r3, r4
 8010250:	9b03      	ldr	r3, [sp, #12]
 8010252:	2b00      	cmp	r3, #0
 8010254:	f6bf af30 	bge.w	80100b8 <_dtoa_r+0x718>
 8010258:	9b00      	ldr	r3, [sp, #0]
 801025a:	9a03      	ldr	r2, [sp, #12]
 801025c:	1a9e      	subs	r6, r3, r2
 801025e:	2300      	movs	r3, #0
 8010260:	e72b      	b.n	80100ba <_dtoa_r+0x71a>
 8010262:	9b08      	ldr	r3, [sp, #32]
 8010264:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010266:	9408      	str	r4, [sp, #32]
 8010268:	1ae3      	subs	r3, r4, r3
 801026a:	441a      	add	r2, r3
 801026c:	9e00      	ldr	r6, [sp, #0]
 801026e:	9b03      	ldr	r3, [sp, #12]
 8010270:	920d      	str	r2, [sp, #52]	@ 0x34
 8010272:	2400      	movs	r4, #0
 8010274:	e721      	b.n	80100ba <_dtoa_r+0x71a>
 8010276:	9c08      	ldr	r4, [sp, #32]
 8010278:	9e00      	ldr	r6, [sp, #0]
 801027a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801027c:	e728      	b.n	80100d0 <_dtoa_r+0x730>
 801027e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010282:	e751      	b.n	8010128 <_dtoa_r+0x788>
 8010284:	9a08      	ldr	r2, [sp, #32]
 8010286:	9902      	ldr	r1, [sp, #8]
 8010288:	e750      	b.n	801012c <_dtoa_r+0x78c>
 801028a:	f8cd 8008 	str.w	r8, [sp, #8]
 801028e:	e751      	b.n	8010134 <_dtoa_r+0x794>
 8010290:	2300      	movs	r3, #0
 8010292:	e779      	b.n	8010188 <_dtoa_r+0x7e8>
 8010294:	9b04      	ldr	r3, [sp, #16]
 8010296:	e777      	b.n	8010188 <_dtoa_r+0x7e8>
 8010298:	2300      	movs	r3, #0
 801029a:	9308      	str	r3, [sp, #32]
 801029c:	e779      	b.n	8010192 <_dtoa_r+0x7f2>
 801029e:	d093      	beq.n	80101c8 <_dtoa_r+0x828>
 80102a0:	9a00      	ldr	r2, [sp, #0]
 80102a2:	331c      	adds	r3, #28
 80102a4:	441a      	add	r2, r3
 80102a6:	9200      	str	r2, [sp, #0]
 80102a8:	9a06      	ldr	r2, [sp, #24]
 80102aa:	441a      	add	r2, r3
 80102ac:	441e      	add	r6, r3
 80102ae:	9206      	str	r2, [sp, #24]
 80102b0:	e78a      	b.n	80101c8 <_dtoa_r+0x828>
 80102b2:	4603      	mov	r3, r0
 80102b4:	e7f4      	b.n	80102a0 <_dtoa_r+0x900>
 80102b6:	9b03      	ldr	r3, [sp, #12]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	46b8      	mov	r8, r7
 80102bc:	dc20      	bgt.n	8010300 <_dtoa_r+0x960>
 80102be:	469b      	mov	fp, r3
 80102c0:	9b07      	ldr	r3, [sp, #28]
 80102c2:	2b02      	cmp	r3, #2
 80102c4:	dd1e      	ble.n	8010304 <_dtoa_r+0x964>
 80102c6:	f1bb 0f00 	cmp.w	fp, #0
 80102ca:	f47f adb1 	bne.w	800fe30 <_dtoa_r+0x490>
 80102ce:	4621      	mov	r1, r4
 80102d0:	465b      	mov	r3, fp
 80102d2:	2205      	movs	r2, #5
 80102d4:	4648      	mov	r0, r9
 80102d6:	f000 f9df 	bl	8010698 <__multadd>
 80102da:	4601      	mov	r1, r0
 80102dc:	4604      	mov	r4, r0
 80102de:	9802      	ldr	r0, [sp, #8]
 80102e0:	f000 fbea 	bl	8010ab8 <__mcmp>
 80102e4:	2800      	cmp	r0, #0
 80102e6:	f77f ada3 	ble.w	800fe30 <_dtoa_r+0x490>
 80102ea:	4656      	mov	r6, sl
 80102ec:	2331      	movs	r3, #49	@ 0x31
 80102ee:	f806 3b01 	strb.w	r3, [r6], #1
 80102f2:	f108 0801 	add.w	r8, r8, #1
 80102f6:	e59f      	b.n	800fe38 <_dtoa_r+0x498>
 80102f8:	9c03      	ldr	r4, [sp, #12]
 80102fa:	46b8      	mov	r8, r7
 80102fc:	4625      	mov	r5, r4
 80102fe:	e7f4      	b.n	80102ea <_dtoa_r+0x94a>
 8010300:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8010304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010306:	2b00      	cmp	r3, #0
 8010308:	f000 8101 	beq.w	801050e <_dtoa_r+0xb6e>
 801030c:	2e00      	cmp	r6, #0
 801030e:	dd05      	ble.n	801031c <_dtoa_r+0x97c>
 8010310:	4629      	mov	r1, r5
 8010312:	4632      	mov	r2, r6
 8010314:	4648      	mov	r0, r9
 8010316:	f000 fb63 	bl	80109e0 <__lshift>
 801031a:	4605      	mov	r5, r0
 801031c:	9b08      	ldr	r3, [sp, #32]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d05c      	beq.n	80103dc <_dtoa_r+0xa3c>
 8010322:	6869      	ldr	r1, [r5, #4]
 8010324:	4648      	mov	r0, r9
 8010326:	f000 f955 	bl	80105d4 <_Balloc>
 801032a:	4606      	mov	r6, r0
 801032c:	b928      	cbnz	r0, 801033a <_dtoa_r+0x99a>
 801032e:	4b82      	ldr	r3, [pc, #520]	@ (8010538 <_dtoa_r+0xb98>)
 8010330:	4602      	mov	r2, r0
 8010332:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010336:	f7ff bb4a 	b.w	800f9ce <_dtoa_r+0x2e>
 801033a:	692a      	ldr	r2, [r5, #16]
 801033c:	3202      	adds	r2, #2
 801033e:	0092      	lsls	r2, r2, #2
 8010340:	f105 010c 	add.w	r1, r5, #12
 8010344:	300c      	adds	r0, #12
 8010346:	f000 fedd 	bl	8011104 <memcpy>
 801034a:	2201      	movs	r2, #1
 801034c:	4631      	mov	r1, r6
 801034e:	4648      	mov	r0, r9
 8010350:	f000 fb46 	bl	80109e0 <__lshift>
 8010354:	f10a 0301 	add.w	r3, sl, #1
 8010358:	9300      	str	r3, [sp, #0]
 801035a:	eb0a 030b 	add.w	r3, sl, fp
 801035e:	9308      	str	r3, [sp, #32]
 8010360:	9b04      	ldr	r3, [sp, #16]
 8010362:	f003 0301 	and.w	r3, r3, #1
 8010366:	462f      	mov	r7, r5
 8010368:	9306      	str	r3, [sp, #24]
 801036a:	4605      	mov	r5, r0
 801036c:	9b00      	ldr	r3, [sp, #0]
 801036e:	9802      	ldr	r0, [sp, #8]
 8010370:	4621      	mov	r1, r4
 8010372:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8010376:	f7ff fa8a 	bl	800f88e <quorem>
 801037a:	4603      	mov	r3, r0
 801037c:	3330      	adds	r3, #48	@ 0x30
 801037e:	9003      	str	r0, [sp, #12]
 8010380:	4639      	mov	r1, r7
 8010382:	9802      	ldr	r0, [sp, #8]
 8010384:	9309      	str	r3, [sp, #36]	@ 0x24
 8010386:	f000 fb97 	bl	8010ab8 <__mcmp>
 801038a:	462a      	mov	r2, r5
 801038c:	9004      	str	r0, [sp, #16]
 801038e:	4621      	mov	r1, r4
 8010390:	4648      	mov	r0, r9
 8010392:	f000 fbad 	bl	8010af0 <__mdiff>
 8010396:	68c2      	ldr	r2, [r0, #12]
 8010398:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801039a:	4606      	mov	r6, r0
 801039c:	bb02      	cbnz	r2, 80103e0 <_dtoa_r+0xa40>
 801039e:	4601      	mov	r1, r0
 80103a0:	9802      	ldr	r0, [sp, #8]
 80103a2:	f000 fb89 	bl	8010ab8 <__mcmp>
 80103a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103a8:	4602      	mov	r2, r0
 80103aa:	4631      	mov	r1, r6
 80103ac:	4648      	mov	r0, r9
 80103ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80103b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80103b2:	f000 f94f 	bl	8010654 <_Bfree>
 80103b6:	9b07      	ldr	r3, [sp, #28]
 80103b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80103ba:	9e00      	ldr	r6, [sp, #0]
 80103bc:	ea42 0103 	orr.w	r1, r2, r3
 80103c0:	9b06      	ldr	r3, [sp, #24]
 80103c2:	4319      	orrs	r1, r3
 80103c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103c6:	d10d      	bne.n	80103e4 <_dtoa_r+0xa44>
 80103c8:	2b39      	cmp	r3, #57	@ 0x39
 80103ca:	d027      	beq.n	801041c <_dtoa_r+0xa7c>
 80103cc:	9a04      	ldr	r2, [sp, #16]
 80103ce:	2a00      	cmp	r2, #0
 80103d0:	dd01      	ble.n	80103d6 <_dtoa_r+0xa36>
 80103d2:	9b03      	ldr	r3, [sp, #12]
 80103d4:	3331      	adds	r3, #49	@ 0x31
 80103d6:	f88b 3000 	strb.w	r3, [fp]
 80103da:	e52e      	b.n	800fe3a <_dtoa_r+0x49a>
 80103dc:	4628      	mov	r0, r5
 80103de:	e7b9      	b.n	8010354 <_dtoa_r+0x9b4>
 80103e0:	2201      	movs	r2, #1
 80103e2:	e7e2      	b.n	80103aa <_dtoa_r+0xa0a>
 80103e4:	9904      	ldr	r1, [sp, #16]
 80103e6:	2900      	cmp	r1, #0
 80103e8:	db04      	blt.n	80103f4 <_dtoa_r+0xa54>
 80103ea:	9807      	ldr	r0, [sp, #28]
 80103ec:	4301      	orrs	r1, r0
 80103ee:	9806      	ldr	r0, [sp, #24]
 80103f0:	4301      	orrs	r1, r0
 80103f2:	d120      	bne.n	8010436 <_dtoa_r+0xa96>
 80103f4:	2a00      	cmp	r2, #0
 80103f6:	ddee      	ble.n	80103d6 <_dtoa_r+0xa36>
 80103f8:	9902      	ldr	r1, [sp, #8]
 80103fa:	9300      	str	r3, [sp, #0]
 80103fc:	2201      	movs	r2, #1
 80103fe:	4648      	mov	r0, r9
 8010400:	f000 faee 	bl	80109e0 <__lshift>
 8010404:	4621      	mov	r1, r4
 8010406:	9002      	str	r0, [sp, #8]
 8010408:	f000 fb56 	bl	8010ab8 <__mcmp>
 801040c:	2800      	cmp	r0, #0
 801040e:	9b00      	ldr	r3, [sp, #0]
 8010410:	dc02      	bgt.n	8010418 <_dtoa_r+0xa78>
 8010412:	d1e0      	bne.n	80103d6 <_dtoa_r+0xa36>
 8010414:	07da      	lsls	r2, r3, #31
 8010416:	d5de      	bpl.n	80103d6 <_dtoa_r+0xa36>
 8010418:	2b39      	cmp	r3, #57	@ 0x39
 801041a:	d1da      	bne.n	80103d2 <_dtoa_r+0xa32>
 801041c:	2339      	movs	r3, #57	@ 0x39
 801041e:	f88b 3000 	strb.w	r3, [fp]
 8010422:	4633      	mov	r3, r6
 8010424:	461e      	mov	r6, r3
 8010426:	3b01      	subs	r3, #1
 8010428:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801042c:	2a39      	cmp	r2, #57	@ 0x39
 801042e:	d04e      	beq.n	80104ce <_dtoa_r+0xb2e>
 8010430:	3201      	adds	r2, #1
 8010432:	701a      	strb	r2, [r3, #0]
 8010434:	e501      	b.n	800fe3a <_dtoa_r+0x49a>
 8010436:	2a00      	cmp	r2, #0
 8010438:	dd03      	ble.n	8010442 <_dtoa_r+0xaa2>
 801043a:	2b39      	cmp	r3, #57	@ 0x39
 801043c:	d0ee      	beq.n	801041c <_dtoa_r+0xa7c>
 801043e:	3301      	adds	r3, #1
 8010440:	e7c9      	b.n	80103d6 <_dtoa_r+0xa36>
 8010442:	9a00      	ldr	r2, [sp, #0]
 8010444:	9908      	ldr	r1, [sp, #32]
 8010446:	f802 3c01 	strb.w	r3, [r2, #-1]
 801044a:	428a      	cmp	r2, r1
 801044c:	d028      	beq.n	80104a0 <_dtoa_r+0xb00>
 801044e:	9902      	ldr	r1, [sp, #8]
 8010450:	2300      	movs	r3, #0
 8010452:	220a      	movs	r2, #10
 8010454:	4648      	mov	r0, r9
 8010456:	f000 f91f 	bl	8010698 <__multadd>
 801045a:	42af      	cmp	r7, r5
 801045c:	9002      	str	r0, [sp, #8]
 801045e:	f04f 0300 	mov.w	r3, #0
 8010462:	f04f 020a 	mov.w	r2, #10
 8010466:	4639      	mov	r1, r7
 8010468:	4648      	mov	r0, r9
 801046a:	d107      	bne.n	801047c <_dtoa_r+0xadc>
 801046c:	f000 f914 	bl	8010698 <__multadd>
 8010470:	4607      	mov	r7, r0
 8010472:	4605      	mov	r5, r0
 8010474:	9b00      	ldr	r3, [sp, #0]
 8010476:	3301      	adds	r3, #1
 8010478:	9300      	str	r3, [sp, #0]
 801047a:	e777      	b.n	801036c <_dtoa_r+0x9cc>
 801047c:	f000 f90c 	bl	8010698 <__multadd>
 8010480:	4629      	mov	r1, r5
 8010482:	4607      	mov	r7, r0
 8010484:	2300      	movs	r3, #0
 8010486:	220a      	movs	r2, #10
 8010488:	4648      	mov	r0, r9
 801048a:	f000 f905 	bl	8010698 <__multadd>
 801048e:	4605      	mov	r5, r0
 8010490:	e7f0      	b.n	8010474 <_dtoa_r+0xad4>
 8010492:	f1bb 0f00 	cmp.w	fp, #0
 8010496:	bfcc      	ite	gt
 8010498:	465e      	movgt	r6, fp
 801049a:	2601      	movle	r6, #1
 801049c:	4456      	add	r6, sl
 801049e:	2700      	movs	r7, #0
 80104a0:	9902      	ldr	r1, [sp, #8]
 80104a2:	9300      	str	r3, [sp, #0]
 80104a4:	2201      	movs	r2, #1
 80104a6:	4648      	mov	r0, r9
 80104a8:	f000 fa9a 	bl	80109e0 <__lshift>
 80104ac:	4621      	mov	r1, r4
 80104ae:	9002      	str	r0, [sp, #8]
 80104b0:	f000 fb02 	bl	8010ab8 <__mcmp>
 80104b4:	2800      	cmp	r0, #0
 80104b6:	dcb4      	bgt.n	8010422 <_dtoa_r+0xa82>
 80104b8:	d102      	bne.n	80104c0 <_dtoa_r+0xb20>
 80104ba:	9b00      	ldr	r3, [sp, #0]
 80104bc:	07db      	lsls	r3, r3, #31
 80104be:	d4b0      	bmi.n	8010422 <_dtoa_r+0xa82>
 80104c0:	4633      	mov	r3, r6
 80104c2:	461e      	mov	r6, r3
 80104c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80104c8:	2a30      	cmp	r2, #48	@ 0x30
 80104ca:	d0fa      	beq.n	80104c2 <_dtoa_r+0xb22>
 80104cc:	e4b5      	b.n	800fe3a <_dtoa_r+0x49a>
 80104ce:	459a      	cmp	sl, r3
 80104d0:	d1a8      	bne.n	8010424 <_dtoa_r+0xa84>
 80104d2:	2331      	movs	r3, #49	@ 0x31
 80104d4:	f108 0801 	add.w	r8, r8, #1
 80104d8:	f88a 3000 	strb.w	r3, [sl]
 80104dc:	e4ad      	b.n	800fe3a <_dtoa_r+0x49a>
 80104de:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80104e0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801053c <_dtoa_r+0xb9c>
 80104e4:	b11b      	cbz	r3, 80104ee <_dtoa_r+0xb4e>
 80104e6:	f10a 0308 	add.w	r3, sl, #8
 80104ea:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80104ec:	6013      	str	r3, [r2, #0]
 80104ee:	4650      	mov	r0, sl
 80104f0:	b017      	add	sp, #92	@ 0x5c
 80104f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104f6:	9b07      	ldr	r3, [sp, #28]
 80104f8:	2b01      	cmp	r3, #1
 80104fa:	f77f ae2e 	ble.w	801015a <_dtoa_r+0x7ba>
 80104fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010500:	9308      	str	r3, [sp, #32]
 8010502:	2001      	movs	r0, #1
 8010504:	e64d      	b.n	80101a2 <_dtoa_r+0x802>
 8010506:	f1bb 0f00 	cmp.w	fp, #0
 801050a:	f77f aed9 	ble.w	80102c0 <_dtoa_r+0x920>
 801050e:	4656      	mov	r6, sl
 8010510:	9802      	ldr	r0, [sp, #8]
 8010512:	4621      	mov	r1, r4
 8010514:	f7ff f9bb 	bl	800f88e <quorem>
 8010518:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801051c:	f806 3b01 	strb.w	r3, [r6], #1
 8010520:	eba6 020a 	sub.w	r2, r6, sl
 8010524:	4593      	cmp	fp, r2
 8010526:	ddb4      	ble.n	8010492 <_dtoa_r+0xaf2>
 8010528:	9902      	ldr	r1, [sp, #8]
 801052a:	2300      	movs	r3, #0
 801052c:	220a      	movs	r2, #10
 801052e:	4648      	mov	r0, r9
 8010530:	f000 f8b2 	bl	8010698 <__multadd>
 8010534:	9002      	str	r0, [sp, #8]
 8010536:	e7eb      	b.n	8010510 <_dtoa_r+0xb70>
 8010538:	08011910 	.word	0x08011910
 801053c:	08011894 	.word	0x08011894

08010540 <_free_r>:
 8010540:	b538      	push	{r3, r4, r5, lr}
 8010542:	4605      	mov	r5, r0
 8010544:	2900      	cmp	r1, #0
 8010546:	d041      	beq.n	80105cc <_free_r+0x8c>
 8010548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801054c:	1f0c      	subs	r4, r1, #4
 801054e:	2b00      	cmp	r3, #0
 8010550:	bfb8      	it	lt
 8010552:	18e4      	addlt	r4, r4, r3
 8010554:	f7fe fb6e 	bl	800ec34 <__malloc_lock>
 8010558:	4a1d      	ldr	r2, [pc, #116]	@ (80105d0 <_free_r+0x90>)
 801055a:	6813      	ldr	r3, [r2, #0]
 801055c:	b933      	cbnz	r3, 801056c <_free_r+0x2c>
 801055e:	6063      	str	r3, [r4, #4]
 8010560:	6014      	str	r4, [r2, #0]
 8010562:	4628      	mov	r0, r5
 8010564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010568:	f7fe bb6a 	b.w	800ec40 <__malloc_unlock>
 801056c:	42a3      	cmp	r3, r4
 801056e:	d908      	bls.n	8010582 <_free_r+0x42>
 8010570:	6820      	ldr	r0, [r4, #0]
 8010572:	1821      	adds	r1, r4, r0
 8010574:	428b      	cmp	r3, r1
 8010576:	bf01      	itttt	eq
 8010578:	6819      	ldreq	r1, [r3, #0]
 801057a:	685b      	ldreq	r3, [r3, #4]
 801057c:	1809      	addeq	r1, r1, r0
 801057e:	6021      	streq	r1, [r4, #0]
 8010580:	e7ed      	b.n	801055e <_free_r+0x1e>
 8010582:	461a      	mov	r2, r3
 8010584:	685b      	ldr	r3, [r3, #4]
 8010586:	b10b      	cbz	r3, 801058c <_free_r+0x4c>
 8010588:	42a3      	cmp	r3, r4
 801058a:	d9fa      	bls.n	8010582 <_free_r+0x42>
 801058c:	6811      	ldr	r1, [r2, #0]
 801058e:	1850      	adds	r0, r2, r1
 8010590:	42a0      	cmp	r0, r4
 8010592:	d10b      	bne.n	80105ac <_free_r+0x6c>
 8010594:	6820      	ldr	r0, [r4, #0]
 8010596:	4401      	add	r1, r0
 8010598:	1850      	adds	r0, r2, r1
 801059a:	4283      	cmp	r3, r0
 801059c:	6011      	str	r1, [r2, #0]
 801059e:	d1e0      	bne.n	8010562 <_free_r+0x22>
 80105a0:	6818      	ldr	r0, [r3, #0]
 80105a2:	685b      	ldr	r3, [r3, #4]
 80105a4:	6053      	str	r3, [r2, #4]
 80105a6:	4408      	add	r0, r1
 80105a8:	6010      	str	r0, [r2, #0]
 80105aa:	e7da      	b.n	8010562 <_free_r+0x22>
 80105ac:	d902      	bls.n	80105b4 <_free_r+0x74>
 80105ae:	230c      	movs	r3, #12
 80105b0:	602b      	str	r3, [r5, #0]
 80105b2:	e7d6      	b.n	8010562 <_free_r+0x22>
 80105b4:	6820      	ldr	r0, [r4, #0]
 80105b6:	1821      	adds	r1, r4, r0
 80105b8:	428b      	cmp	r3, r1
 80105ba:	bf04      	itt	eq
 80105bc:	6819      	ldreq	r1, [r3, #0]
 80105be:	685b      	ldreq	r3, [r3, #4]
 80105c0:	6063      	str	r3, [r4, #4]
 80105c2:	bf04      	itt	eq
 80105c4:	1809      	addeq	r1, r1, r0
 80105c6:	6021      	streq	r1, [r4, #0]
 80105c8:	6054      	str	r4, [r2, #4]
 80105ca:	e7ca      	b.n	8010562 <_free_r+0x22>
 80105cc:	bd38      	pop	{r3, r4, r5, pc}
 80105ce:	bf00      	nop
 80105d0:	20002548 	.word	0x20002548

080105d4 <_Balloc>:
 80105d4:	b570      	push	{r4, r5, r6, lr}
 80105d6:	69c6      	ldr	r6, [r0, #28]
 80105d8:	4604      	mov	r4, r0
 80105da:	460d      	mov	r5, r1
 80105dc:	b976      	cbnz	r6, 80105fc <_Balloc+0x28>
 80105de:	2010      	movs	r0, #16
 80105e0:	f7fe fa76 	bl	800ead0 <malloc>
 80105e4:	4602      	mov	r2, r0
 80105e6:	61e0      	str	r0, [r4, #28]
 80105e8:	b920      	cbnz	r0, 80105f4 <_Balloc+0x20>
 80105ea:	4b18      	ldr	r3, [pc, #96]	@ (801064c <_Balloc+0x78>)
 80105ec:	4818      	ldr	r0, [pc, #96]	@ (8010650 <_Balloc+0x7c>)
 80105ee:	216b      	movs	r1, #107	@ 0x6b
 80105f0:	f000 fd96 	bl	8011120 <__assert_func>
 80105f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80105f8:	6006      	str	r6, [r0, #0]
 80105fa:	60c6      	str	r6, [r0, #12]
 80105fc:	69e6      	ldr	r6, [r4, #28]
 80105fe:	68f3      	ldr	r3, [r6, #12]
 8010600:	b183      	cbz	r3, 8010624 <_Balloc+0x50>
 8010602:	69e3      	ldr	r3, [r4, #28]
 8010604:	68db      	ldr	r3, [r3, #12]
 8010606:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801060a:	b9b8      	cbnz	r0, 801063c <_Balloc+0x68>
 801060c:	2101      	movs	r1, #1
 801060e:	fa01 f605 	lsl.w	r6, r1, r5
 8010612:	1d72      	adds	r2, r6, #5
 8010614:	0092      	lsls	r2, r2, #2
 8010616:	4620      	mov	r0, r4
 8010618:	f000 fda0 	bl	801115c <_calloc_r>
 801061c:	b160      	cbz	r0, 8010638 <_Balloc+0x64>
 801061e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010622:	e00e      	b.n	8010642 <_Balloc+0x6e>
 8010624:	2221      	movs	r2, #33	@ 0x21
 8010626:	2104      	movs	r1, #4
 8010628:	4620      	mov	r0, r4
 801062a:	f000 fd97 	bl	801115c <_calloc_r>
 801062e:	69e3      	ldr	r3, [r4, #28]
 8010630:	60f0      	str	r0, [r6, #12]
 8010632:	68db      	ldr	r3, [r3, #12]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d1e4      	bne.n	8010602 <_Balloc+0x2e>
 8010638:	2000      	movs	r0, #0
 801063a:	bd70      	pop	{r4, r5, r6, pc}
 801063c:	6802      	ldr	r2, [r0, #0]
 801063e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010642:	2300      	movs	r3, #0
 8010644:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010648:	e7f7      	b.n	801063a <_Balloc+0x66>
 801064a:	bf00      	nop
 801064c:	080118a1 	.word	0x080118a1
 8010650:	08011921 	.word	0x08011921

08010654 <_Bfree>:
 8010654:	b570      	push	{r4, r5, r6, lr}
 8010656:	69c6      	ldr	r6, [r0, #28]
 8010658:	4605      	mov	r5, r0
 801065a:	460c      	mov	r4, r1
 801065c:	b976      	cbnz	r6, 801067c <_Bfree+0x28>
 801065e:	2010      	movs	r0, #16
 8010660:	f7fe fa36 	bl	800ead0 <malloc>
 8010664:	4602      	mov	r2, r0
 8010666:	61e8      	str	r0, [r5, #28]
 8010668:	b920      	cbnz	r0, 8010674 <_Bfree+0x20>
 801066a:	4b09      	ldr	r3, [pc, #36]	@ (8010690 <_Bfree+0x3c>)
 801066c:	4809      	ldr	r0, [pc, #36]	@ (8010694 <_Bfree+0x40>)
 801066e:	218f      	movs	r1, #143	@ 0x8f
 8010670:	f000 fd56 	bl	8011120 <__assert_func>
 8010674:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010678:	6006      	str	r6, [r0, #0]
 801067a:	60c6      	str	r6, [r0, #12]
 801067c:	b13c      	cbz	r4, 801068e <_Bfree+0x3a>
 801067e:	69eb      	ldr	r3, [r5, #28]
 8010680:	6862      	ldr	r2, [r4, #4]
 8010682:	68db      	ldr	r3, [r3, #12]
 8010684:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010688:	6021      	str	r1, [r4, #0]
 801068a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801068e:	bd70      	pop	{r4, r5, r6, pc}
 8010690:	080118a1 	.word	0x080118a1
 8010694:	08011921 	.word	0x08011921

08010698 <__multadd>:
 8010698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801069c:	690d      	ldr	r5, [r1, #16]
 801069e:	4607      	mov	r7, r0
 80106a0:	460c      	mov	r4, r1
 80106a2:	461e      	mov	r6, r3
 80106a4:	f101 0c14 	add.w	ip, r1, #20
 80106a8:	2000      	movs	r0, #0
 80106aa:	f8dc 3000 	ldr.w	r3, [ip]
 80106ae:	b299      	uxth	r1, r3
 80106b0:	fb02 6101 	mla	r1, r2, r1, r6
 80106b4:	0c1e      	lsrs	r6, r3, #16
 80106b6:	0c0b      	lsrs	r3, r1, #16
 80106b8:	fb02 3306 	mla	r3, r2, r6, r3
 80106bc:	b289      	uxth	r1, r1
 80106be:	3001      	adds	r0, #1
 80106c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80106c4:	4285      	cmp	r5, r0
 80106c6:	f84c 1b04 	str.w	r1, [ip], #4
 80106ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80106ce:	dcec      	bgt.n	80106aa <__multadd+0x12>
 80106d0:	b30e      	cbz	r6, 8010716 <__multadd+0x7e>
 80106d2:	68a3      	ldr	r3, [r4, #8]
 80106d4:	42ab      	cmp	r3, r5
 80106d6:	dc19      	bgt.n	801070c <__multadd+0x74>
 80106d8:	6861      	ldr	r1, [r4, #4]
 80106da:	4638      	mov	r0, r7
 80106dc:	3101      	adds	r1, #1
 80106de:	f7ff ff79 	bl	80105d4 <_Balloc>
 80106e2:	4680      	mov	r8, r0
 80106e4:	b928      	cbnz	r0, 80106f2 <__multadd+0x5a>
 80106e6:	4602      	mov	r2, r0
 80106e8:	4b0c      	ldr	r3, [pc, #48]	@ (801071c <__multadd+0x84>)
 80106ea:	480d      	ldr	r0, [pc, #52]	@ (8010720 <__multadd+0x88>)
 80106ec:	21ba      	movs	r1, #186	@ 0xba
 80106ee:	f000 fd17 	bl	8011120 <__assert_func>
 80106f2:	6922      	ldr	r2, [r4, #16]
 80106f4:	3202      	adds	r2, #2
 80106f6:	f104 010c 	add.w	r1, r4, #12
 80106fa:	0092      	lsls	r2, r2, #2
 80106fc:	300c      	adds	r0, #12
 80106fe:	f000 fd01 	bl	8011104 <memcpy>
 8010702:	4621      	mov	r1, r4
 8010704:	4638      	mov	r0, r7
 8010706:	f7ff ffa5 	bl	8010654 <_Bfree>
 801070a:	4644      	mov	r4, r8
 801070c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010710:	3501      	adds	r5, #1
 8010712:	615e      	str	r6, [r3, #20]
 8010714:	6125      	str	r5, [r4, #16]
 8010716:	4620      	mov	r0, r4
 8010718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801071c:	08011910 	.word	0x08011910
 8010720:	08011921 	.word	0x08011921

08010724 <__hi0bits>:
 8010724:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010728:	4603      	mov	r3, r0
 801072a:	bf36      	itet	cc
 801072c:	0403      	lslcc	r3, r0, #16
 801072e:	2000      	movcs	r0, #0
 8010730:	2010      	movcc	r0, #16
 8010732:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010736:	bf3c      	itt	cc
 8010738:	021b      	lslcc	r3, r3, #8
 801073a:	3008      	addcc	r0, #8
 801073c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010740:	bf3c      	itt	cc
 8010742:	011b      	lslcc	r3, r3, #4
 8010744:	3004      	addcc	r0, #4
 8010746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801074a:	bf3c      	itt	cc
 801074c:	009b      	lslcc	r3, r3, #2
 801074e:	3002      	addcc	r0, #2
 8010750:	2b00      	cmp	r3, #0
 8010752:	db05      	blt.n	8010760 <__hi0bits+0x3c>
 8010754:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010758:	f100 0001 	add.w	r0, r0, #1
 801075c:	bf08      	it	eq
 801075e:	2020      	moveq	r0, #32
 8010760:	4770      	bx	lr

08010762 <__lo0bits>:
 8010762:	6803      	ldr	r3, [r0, #0]
 8010764:	4602      	mov	r2, r0
 8010766:	f013 0007 	ands.w	r0, r3, #7
 801076a:	d00b      	beq.n	8010784 <__lo0bits+0x22>
 801076c:	07d9      	lsls	r1, r3, #31
 801076e:	d421      	bmi.n	80107b4 <__lo0bits+0x52>
 8010770:	0798      	lsls	r0, r3, #30
 8010772:	bf49      	itett	mi
 8010774:	085b      	lsrmi	r3, r3, #1
 8010776:	089b      	lsrpl	r3, r3, #2
 8010778:	2001      	movmi	r0, #1
 801077a:	6013      	strmi	r3, [r2, #0]
 801077c:	bf5c      	itt	pl
 801077e:	6013      	strpl	r3, [r2, #0]
 8010780:	2002      	movpl	r0, #2
 8010782:	4770      	bx	lr
 8010784:	b299      	uxth	r1, r3
 8010786:	b909      	cbnz	r1, 801078c <__lo0bits+0x2a>
 8010788:	0c1b      	lsrs	r3, r3, #16
 801078a:	2010      	movs	r0, #16
 801078c:	b2d9      	uxtb	r1, r3
 801078e:	b909      	cbnz	r1, 8010794 <__lo0bits+0x32>
 8010790:	3008      	adds	r0, #8
 8010792:	0a1b      	lsrs	r3, r3, #8
 8010794:	0719      	lsls	r1, r3, #28
 8010796:	bf04      	itt	eq
 8010798:	091b      	lsreq	r3, r3, #4
 801079a:	3004      	addeq	r0, #4
 801079c:	0799      	lsls	r1, r3, #30
 801079e:	bf04      	itt	eq
 80107a0:	089b      	lsreq	r3, r3, #2
 80107a2:	3002      	addeq	r0, #2
 80107a4:	07d9      	lsls	r1, r3, #31
 80107a6:	d403      	bmi.n	80107b0 <__lo0bits+0x4e>
 80107a8:	085b      	lsrs	r3, r3, #1
 80107aa:	f100 0001 	add.w	r0, r0, #1
 80107ae:	d003      	beq.n	80107b8 <__lo0bits+0x56>
 80107b0:	6013      	str	r3, [r2, #0]
 80107b2:	4770      	bx	lr
 80107b4:	2000      	movs	r0, #0
 80107b6:	4770      	bx	lr
 80107b8:	2020      	movs	r0, #32
 80107ba:	4770      	bx	lr

080107bc <__i2b>:
 80107bc:	b510      	push	{r4, lr}
 80107be:	460c      	mov	r4, r1
 80107c0:	2101      	movs	r1, #1
 80107c2:	f7ff ff07 	bl	80105d4 <_Balloc>
 80107c6:	4602      	mov	r2, r0
 80107c8:	b928      	cbnz	r0, 80107d6 <__i2b+0x1a>
 80107ca:	4b05      	ldr	r3, [pc, #20]	@ (80107e0 <__i2b+0x24>)
 80107cc:	4805      	ldr	r0, [pc, #20]	@ (80107e4 <__i2b+0x28>)
 80107ce:	f240 1145 	movw	r1, #325	@ 0x145
 80107d2:	f000 fca5 	bl	8011120 <__assert_func>
 80107d6:	2301      	movs	r3, #1
 80107d8:	6144      	str	r4, [r0, #20]
 80107da:	6103      	str	r3, [r0, #16]
 80107dc:	bd10      	pop	{r4, pc}
 80107de:	bf00      	nop
 80107e0:	08011910 	.word	0x08011910
 80107e4:	08011921 	.word	0x08011921

080107e8 <__multiply>:
 80107e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107ec:	4617      	mov	r7, r2
 80107ee:	690a      	ldr	r2, [r1, #16]
 80107f0:	693b      	ldr	r3, [r7, #16]
 80107f2:	429a      	cmp	r2, r3
 80107f4:	bfa8      	it	ge
 80107f6:	463b      	movge	r3, r7
 80107f8:	4689      	mov	r9, r1
 80107fa:	bfa4      	itt	ge
 80107fc:	460f      	movge	r7, r1
 80107fe:	4699      	movge	r9, r3
 8010800:	693d      	ldr	r5, [r7, #16]
 8010802:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010806:	68bb      	ldr	r3, [r7, #8]
 8010808:	6879      	ldr	r1, [r7, #4]
 801080a:	eb05 060a 	add.w	r6, r5, sl
 801080e:	42b3      	cmp	r3, r6
 8010810:	b085      	sub	sp, #20
 8010812:	bfb8      	it	lt
 8010814:	3101      	addlt	r1, #1
 8010816:	f7ff fedd 	bl	80105d4 <_Balloc>
 801081a:	b930      	cbnz	r0, 801082a <__multiply+0x42>
 801081c:	4602      	mov	r2, r0
 801081e:	4b41      	ldr	r3, [pc, #260]	@ (8010924 <__multiply+0x13c>)
 8010820:	4841      	ldr	r0, [pc, #260]	@ (8010928 <__multiply+0x140>)
 8010822:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010826:	f000 fc7b 	bl	8011120 <__assert_func>
 801082a:	f100 0414 	add.w	r4, r0, #20
 801082e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8010832:	4623      	mov	r3, r4
 8010834:	2200      	movs	r2, #0
 8010836:	4573      	cmp	r3, lr
 8010838:	d320      	bcc.n	801087c <__multiply+0x94>
 801083a:	f107 0814 	add.w	r8, r7, #20
 801083e:	f109 0114 	add.w	r1, r9, #20
 8010842:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8010846:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801084a:	9302      	str	r3, [sp, #8]
 801084c:	1beb      	subs	r3, r5, r7
 801084e:	3b15      	subs	r3, #21
 8010850:	f023 0303 	bic.w	r3, r3, #3
 8010854:	3304      	adds	r3, #4
 8010856:	3715      	adds	r7, #21
 8010858:	42bd      	cmp	r5, r7
 801085a:	bf38      	it	cc
 801085c:	2304      	movcc	r3, #4
 801085e:	9301      	str	r3, [sp, #4]
 8010860:	9b02      	ldr	r3, [sp, #8]
 8010862:	9103      	str	r1, [sp, #12]
 8010864:	428b      	cmp	r3, r1
 8010866:	d80c      	bhi.n	8010882 <__multiply+0x9a>
 8010868:	2e00      	cmp	r6, #0
 801086a:	dd03      	ble.n	8010874 <__multiply+0x8c>
 801086c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010870:	2b00      	cmp	r3, #0
 8010872:	d055      	beq.n	8010920 <__multiply+0x138>
 8010874:	6106      	str	r6, [r0, #16]
 8010876:	b005      	add	sp, #20
 8010878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801087c:	f843 2b04 	str.w	r2, [r3], #4
 8010880:	e7d9      	b.n	8010836 <__multiply+0x4e>
 8010882:	f8b1 a000 	ldrh.w	sl, [r1]
 8010886:	f1ba 0f00 	cmp.w	sl, #0
 801088a:	d01f      	beq.n	80108cc <__multiply+0xe4>
 801088c:	46c4      	mov	ip, r8
 801088e:	46a1      	mov	r9, r4
 8010890:	2700      	movs	r7, #0
 8010892:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010896:	f8d9 3000 	ldr.w	r3, [r9]
 801089a:	fa1f fb82 	uxth.w	fp, r2
 801089e:	b29b      	uxth	r3, r3
 80108a0:	fb0a 330b 	mla	r3, sl, fp, r3
 80108a4:	443b      	add	r3, r7
 80108a6:	f8d9 7000 	ldr.w	r7, [r9]
 80108aa:	0c12      	lsrs	r2, r2, #16
 80108ac:	0c3f      	lsrs	r7, r7, #16
 80108ae:	fb0a 7202 	mla	r2, sl, r2, r7
 80108b2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80108b6:	b29b      	uxth	r3, r3
 80108b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80108bc:	4565      	cmp	r5, ip
 80108be:	f849 3b04 	str.w	r3, [r9], #4
 80108c2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80108c6:	d8e4      	bhi.n	8010892 <__multiply+0xaa>
 80108c8:	9b01      	ldr	r3, [sp, #4]
 80108ca:	50e7      	str	r7, [r4, r3]
 80108cc:	9b03      	ldr	r3, [sp, #12]
 80108ce:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80108d2:	3104      	adds	r1, #4
 80108d4:	f1b9 0f00 	cmp.w	r9, #0
 80108d8:	d020      	beq.n	801091c <__multiply+0x134>
 80108da:	6823      	ldr	r3, [r4, #0]
 80108dc:	4647      	mov	r7, r8
 80108de:	46a4      	mov	ip, r4
 80108e0:	f04f 0a00 	mov.w	sl, #0
 80108e4:	f8b7 b000 	ldrh.w	fp, [r7]
 80108e8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80108ec:	fb09 220b 	mla	r2, r9, fp, r2
 80108f0:	4452      	add	r2, sl
 80108f2:	b29b      	uxth	r3, r3
 80108f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80108f8:	f84c 3b04 	str.w	r3, [ip], #4
 80108fc:	f857 3b04 	ldr.w	r3, [r7], #4
 8010900:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010904:	f8bc 3000 	ldrh.w	r3, [ip]
 8010908:	fb09 330a 	mla	r3, r9, sl, r3
 801090c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8010910:	42bd      	cmp	r5, r7
 8010912:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010916:	d8e5      	bhi.n	80108e4 <__multiply+0xfc>
 8010918:	9a01      	ldr	r2, [sp, #4]
 801091a:	50a3      	str	r3, [r4, r2]
 801091c:	3404      	adds	r4, #4
 801091e:	e79f      	b.n	8010860 <__multiply+0x78>
 8010920:	3e01      	subs	r6, #1
 8010922:	e7a1      	b.n	8010868 <__multiply+0x80>
 8010924:	08011910 	.word	0x08011910
 8010928:	08011921 	.word	0x08011921

0801092c <__pow5mult>:
 801092c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010930:	4615      	mov	r5, r2
 8010932:	f012 0203 	ands.w	r2, r2, #3
 8010936:	4607      	mov	r7, r0
 8010938:	460e      	mov	r6, r1
 801093a:	d007      	beq.n	801094c <__pow5mult+0x20>
 801093c:	4c25      	ldr	r4, [pc, #148]	@ (80109d4 <__pow5mult+0xa8>)
 801093e:	3a01      	subs	r2, #1
 8010940:	2300      	movs	r3, #0
 8010942:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010946:	f7ff fea7 	bl	8010698 <__multadd>
 801094a:	4606      	mov	r6, r0
 801094c:	10ad      	asrs	r5, r5, #2
 801094e:	d03d      	beq.n	80109cc <__pow5mult+0xa0>
 8010950:	69fc      	ldr	r4, [r7, #28]
 8010952:	b97c      	cbnz	r4, 8010974 <__pow5mult+0x48>
 8010954:	2010      	movs	r0, #16
 8010956:	f7fe f8bb 	bl	800ead0 <malloc>
 801095a:	4602      	mov	r2, r0
 801095c:	61f8      	str	r0, [r7, #28]
 801095e:	b928      	cbnz	r0, 801096c <__pow5mult+0x40>
 8010960:	4b1d      	ldr	r3, [pc, #116]	@ (80109d8 <__pow5mult+0xac>)
 8010962:	481e      	ldr	r0, [pc, #120]	@ (80109dc <__pow5mult+0xb0>)
 8010964:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010968:	f000 fbda 	bl	8011120 <__assert_func>
 801096c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010970:	6004      	str	r4, [r0, #0]
 8010972:	60c4      	str	r4, [r0, #12]
 8010974:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010978:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801097c:	b94c      	cbnz	r4, 8010992 <__pow5mult+0x66>
 801097e:	f240 2171 	movw	r1, #625	@ 0x271
 8010982:	4638      	mov	r0, r7
 8010984:	f7ff ff1a 	bl	80107bc <__i2b>
 8010988:	2300      	movs	r3, #0
 801098a:	f8c8 0008 	str.w	r0, [r8, #8]
 801098e:	4604      	mov	r4, r0
 8010990:	6003      	str	r3, [r0, #0]
 8010992:	f04f 0900 	mov.w	r9, #0
 8010996:	07eb      	lsls	r3, r5, #31
 8010998:	d50a      	bpl.n	80109b0 <__pow5mult+0x84>
 801099a:	4631      	mov	r1, r6
 801099c:	4622      	mov	r2, r4
 801099e:	4638      	mov	r0, r7
 80109a0:	f7ff ff22 	bl	80107e8 <__multiply>
 80109a4:	4631      	mov	r1, r6
 80109a6:	4680      	mov	r8, r0
 80109a8:	4638      	mov	r0, r7
 80109aa:	f7ff fe53 	bl	8010654 <_Bfree>
 80109ae:	4646      	mov	r6, r8
 80109b0:	106d      	asrs	r5, r5, #1
 80109b2:	d00b      	beq.n	80109cc <__pow5mult+0xa0>
 80109b4:	6820      	ldr	r0, [r4, #0]
 80109b6:	b938      	cbnz	r0, 80109c8 <__pow5mult+0x9c>
 80109b8:	4622      	mov	r2, r4
 80109ba:	4621      	mov	r1, r4
 80109bc:	4638      	mov	r0, r7
 80109be:	f7ff ff13 	bl	80107e8 <__multiply>
 80109c2:	6020      	str	r0, [r4, #0]
 80109c4:	f8c0 9000 	str.w	r9, [r0]
 80109c8:	4604      	mov	r4, r0
 80109ca:	e7e4      	b.n	8010996 <__pow5mult+0x6a>
 80109cc:	4630      	mov	r0, r6
 80109ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109d2:	bf00      	nop
 80109d4:	080119d4 	.word	0x080119d4
 80109d8:	080118a1 	.word	0x080118a1
 80109dc:	08011921 	.word	0x08011921

080109e0 <__lshift>:
 80109e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109e4:	460c      	mov	r4, r1
 80109e6:	6849      	ldr	r1, [r1, #4]
 80109e8:	6923      	ldr	r3, [r4, #16]
 80109ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80109ee:	68a3      	ldr	r3, [r4, #8]
 80109f0:	4607      	mov	r7, r0
 80109f2:	4691      	mov	r9, r2
 80109f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80109f8:	f108 0601 	add.w	r6, r8, #1
 80109fc:	42b3      	cmp	r3, r6
 80109fe:	db0b      	blt.n	8010a18 <__lshift+0x38>
 8010a00:	4638      	mov	r0, r7
 8010a02:	f7ff fde7 	bl	80105d4 <_Balloc>
 8010a06:	4605      	mov	r5, r0
 8010a08:	b948      	cbnz	r0, 8010a1e <__lshift+0x3e>
 8010a0a:	4602      	mov	r2, r0
 8010a0c:	4b28      	ldr	r3, [pc, #160]	@ (8010ab0 <__lshift+0xd0>)
 8010a0e:	4829      	ldr	r0, [pc, #164]	@ (8010ab4 <__lshift+0xd4>)
 8010a10:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010a14:	f000 fb84 	bl	8011120 <__assert_func>
 8010a18:	3101      	adds	r1, #1
 8010a1a:	005b      	lsls	r3, r3, #1
 8010a1c:	e7ee      	b.n	80109fc <__lshift+0x1c>
 8010a1e:	2300      	movs	r3, #0
 8010a20:	f100 0114 	add.w	r1, r0, #20
 8010a24:	f100 0210 	add.w	r2, r0, #16
 8010a28:	4618      	mov	r0, r3
 8010a2a:	4553      	cmp	r3, sl
 8010a2c:	db33      	blt.n	8010a96 <__lshift+0xb6>
 8010a2e:	6920      	ldr	r0, [r4, #16]
 8010a30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010a34:	f104 0314 	add.w	r3, r4, #20
 8010a38:	f019 091f 	ands.w	r9, r9, #31
 8010a3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010a40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010a44:	d02b      	beq.n	8010a9e <__lshift+0xbe>
 8010a46:	f1c9 0e20 	rsb	lr, r9, #32
 8010a4a:	468a      	mov	sl, r1
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	6818      	ldr	r0, [r3, #0]
 8010a50:	fa00 f009 	lsl.w	r0, r0, r9
 8010a54:	4310      	orrs	r0, r2
 8010a56:	f84a 0b04 	str.w	r0, [sl], #4
 8010a5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a5e:	459c      	cmp	ip, r3
 8010a60:	fa22 f20e 	lsr.w	r2, r2, lr
 8010a64:	d8f3      	bhi.n	8010a4e <__lshift+0x6e>
 8010a66:	ebac 0304 	sub.w	r3, ip, r4
 8010a6a:	3b15      	subs	r3, #21
 8010a6c:	f023 0303 	bic.w	r3, r3, #3
 8010a70:	3304      	adds	r3, #4
 8010a72:	f104 0015 	add.w	r0, r4, #21
 8010a76:	4560      	cmp	r0, ip
 8010a78:	bf88      	it	hi
 8010a7a:	2304      	movhi	r3, #4
 8010a7c:	50ca      	str	r2, [r1, r3]
 8010a7e:	b10a      	cbz	r2, 8010a84 <__lshift+0xa4>
 8010a80:	f108 0602 	add.w	r6, r8, #2
 8010a84:	3e01      	subs	r6, #1
 8010a86:	4638      	mov	r0, r7
 8010a88:	612e      	str	r6, [r5, #16]
 8010a8a:	4621      	mov	r1, r4
 8010a8c:	f7ff fde2 	bl	8010654 <_Bfree>
 8010a90:	4628      	mov	r0, r5
 8010a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a96:	f842 0f04 	str.w	r0, [r2, #4]!
 8010a9a:	3301      	adds	r3, #1
 8010a9c:	e7c5      	b.n	8010a2a <__lshift+0x4a>
 8010a9e:	3904      	subs	r1, #4
 8010aa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8010aa4:	f841 2f04 	str.w	r2, [r1, #4]!
 8010aa8:	459c      	cmp	ip, r3
 8010aaa:	d8f9      	bhi.n	8010aa0 <__lshift+0xc0>
 8010aac:	e7ea      	b.n	8010a84 <__lshift+0xa4>
 8010aae:	bf00      	nop
 8010ab0:	08011910 	.word	0x08011910
 8010ab4:	08011921 	.word	0x08011921

08010ab8 <__mcmp>:
 8010ab8:	690a      	ldr	r2, [r1, #16]
 8010aba:	4603      	mov	r3, r0
 8010abc:	6900      	ldr	r0, [r0, #16]
 8010abe:	1a80      	subs	r0, r0, r2
 8010ac0:	b530      	push	{r4, r5, lr}
 8010ac2:	d10e      	bne.n	8010ae2 <__mcmp+0x2a>
 8010ac4:	3314      	adds	r3, #20
 8010ac6:	3114      	adds	r1, #20
 8010ac8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010acc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010ad0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010ad4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010ad8:	4295      	cmp	r5, r2
 8010ada:	d003      	beq.n	8010ae4 <__mcmp+0x2c>
 8010adc:	d205      	bcs.n	8010aea <__mcmp+0x32>
 8010ade:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010ae2:	bd30      	pop	{r4, r5, pc}
 8010ae4:	42a3      	cmp	r3, r4
 8010ae6:	d3f3      	bcc.n	8010ad0 <__mcmp+0x18>
 8010ae8:	e7fb      	b.n	8010ae2 <__mcmp+0x2a>
 8010aea:	2001      	movs	r0, #1
 8010aec:	e7f9      	b.n	8010ae2 <__mcmp+0x2a>
	...

08010af0 <__mdiff>:
 8010af0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010af4:	4689      	mov	r9, r1
 8010af6:	4606      	mov	r6, r0
 8010af8:	4611      	mov	r1, r2
 8010afa:	4648      	mov	r0, r9
 8010afc:	4614      	mov	r4, r2
 8010afe:	f7ff ffdb 	bl	8010ab8 <__mcmp>
 8010b02:	1e05      	subs	r5, r0, #0
 8010b04:	d112      	bne.n	8010b2c <__mdiff+0x3c>
 8010b06:	4629      	mov	r1, r5
 8010b08:	4630      	mov	r0, r6
 8010b0a:	f7ff fd63 	bl	80105d4 <_Balloc>
 8010b0e:	4602      	mov	r2, r0
 8010b10:	b928      	cbnz	r0, 8010b1e <__mdiff+0x2e>
 8010b12:	4b3f      	ldr	r3, [pc, #252]	@ (8010c10 <__mdiff+0x120>)
 8010b14:	f240 2137 	movw	r1, #567	@ 0x237
 8010b18:	483e      	ldr	r0, [pc, #248]	@ (8010c14 <__mdiff+0x124>)
 8010b1a:	f000 fb01 	bl	8011120 <__assert_func>
 8010b1e:	2301      	movs	r3, #1
 8010b20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010b24:	4610      	mov	r0, r2
 8010b26:	b003      	add	sp, #12
 8010b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b2c:	bfbc      	itt	lt
 8010b2e:	464b      	movlt	r3, r9
 8010b30:	46a1      	movlt	r9, r4
 8010b32:	4630      	mov	r0, r6
 8010b34:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010b38:	bfba      	itte	lt
 8010b3a:	461c      	movlt	r4, r3
 8010b3c:	2501      	movlt	r5, #1
 8010b3e:	2500      	movge	r5, #0
 8010b40:	f7ff fd48 	bl	80105d4 <_Balloc>
 8010b44:	4602      	mov	r2, r0
 8010b46:	b918      	cbnz	r0, 8010b50 <__mdiff+0x60>
 8010b48:	4b31      	ldr	r3, [pc, #196]	@ (8010c10 <__mdiff+0x120>)
 8010b4a:	f240 2145 	movw	r1, #581	@ 0x245
 8010b4e:	e7e3      	b.n	8010b18 <__mdiff+0x28>
 8010b50:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010b54:	6926      	ldr	r6, [r4, #16]
 8010b56:	60c5      	str	r5, [r0, #12]
 8010b58:	f109 0310 	add.w	r3, r9, #16
 8010b5c:	f109 0514 	add.w	r5, r9, #20
 8010b60:	f104 0e14 	add.w	lr, r4, #20
 8010b64:	f100 0b14 	add.w	fp, r0, #20
 8010b68:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010b6c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010b70:	9301      	str	r3, [sp, #4]
 8010b72:	46d9      	mov	r9, fp
 8010b74:	f04f 0c00 	mov.w	ip, #0
 8010b78:	9b01      	ldr	r3, [sp, #4]
 8010b7a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010b7e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010b82:	9301      	str	r3, [sp, #4]
 8010b84:	fa1f f38a 	uxth.w	r3, sl
 8010b88:	4619      	mov	r1, r3
 8010b8a:	b283      	uxth	r3, r0
 8010b8c:	1acb      	subs	r3, r1, r3
 8010b8e:	0c00      	lsrs	r0, r0, #16
 8010b90:	4463      	add	r3, ip
 8010b92:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010b96:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010b9a:	b29b      	uxth	r3, r3
 8010b9c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010ba0:	4576      	cmp	r6, lr
 8010ba2:	f849 3b04 	str.w	r3, [r9], #4
 8010ba6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010baa:	d8e5      	bhi.n	8010b78 <__mdiff+0x88>
 8010bac:	1b33      	subs	r3, r6, r4
 8010bae:	3b15      	subs	r3, #21
 8010bb0:	f023 0303 	bic.w	r3, r3, #3
 8010bb4:	3415      	adds	r4, #21
 8010bb6:	3304      	adds	r3, #4
 8010bb8:	42a6      	cmp	r6, r4
 8010bba:	bf38      	it	cc
 8010bbc:	2304      	movcc	r3, #4
 8010bbe:	441d      	add	r5, r3
 8010bc0:	445b      	add	r3, fp
 8010bc2:	461e      	mov	r6, r3
 8010bc4:	462c      	mov	r4, r5
 8010bc6:	4544      	cmp	r4, r8
 8010bc8:	d30e      	bcc.n	8010be8 <__mdiff+0xf8>
 8010bca:	f108 0103 	add.w	r1, r8, #3
 8010bce:	1b49      	subs	r1, r1, r5
 8010bd0:	f021 0103 	bic.w	r1, r1, #3
 8010bd4:	3d03      	subs	r5, #3
 8010bd6:	45a8      	cmp	r8, r5
 8010bd8:	bf38      	it	cc
 8010bda:	2100      	movcc	r1, #0
 8010bdc:	440b      	add	r3, r1
 8010bde:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010be2:	b191      	cbz	r1, 8010c0a <__mdiff+0x11a>
 8010be4:	6117      	str	r7, [r2, #16]
 8010be6:	e79d      	b.n	8010b24 <__mdiff+0x34>
 8010be8:	f854 1b04 	ldr.w	r1, [r4], #4
 8010bec:	46e6      	mov	lr, ip
 8010bee:	0c08      	lsrs	r0, r1, #16
 8010bf0:	fa1c fc81 	uxtah	ip, ip, r1
 8010bf4:	4471      	add	r1, lr
 8010bf6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010bfa:	b289      	uxth	r1, r1
 8010bfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010c00:	f846 1b04 	str.w	r1, [r6], #4
 8010c04:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010c08:	e7dd      	b.n	8010bc6 <__mdiff+0xd6>
 8010c0a:	3f01      	subs	r7, #1
 8010c0c:	e7e7      	b.n	8010bde <__mdiff+0xee>
 8010c0e:	bf00      	nop
 8010c10:	08011910 	.word	0x08011910
 8010c14:	08011921 	.word	0x08011921

08010c18 <__d2b>:
 8010c18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010c1c:	460f      	mov	r7, r1
 8010c1e:	2101      	movs	r1, #1
 8010c20:	ec59 8b10 	vmov	r8, r9, d0
 8010c24:	4616      	mov	r6, r2
 8010c26:	f7ff fcd5 	bl	80105d4 <_Balloc>
 8010c2a:	4604      	mov	r4, r0
 8010c2c:	b930      	cbnz	r0, 8010c3c <__d2b+0x24>
 8010c2e:	4602      	mov	r2, r0
 8010c30:	4b23      	ldr	r3, [pc, #140]	@ (8010cc0 <__d2b+0xa8>)
 8010c32:	4824      	ldr	r0, [pc, #144]	@ (8010cc4 <__d2b+0xac>)
 8010c34:	f240 310f 	movw	r1, #783	@ 0x30f
 8010c38:	f000 fa72 	bl	8011120 <__assert_func>
 8010c3c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010c40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010c44:	b10d      	cbz	r5, 8010c4a <__d2b+0x32>
 8010c46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010c4a:	9301      	str	r3, [sp, #4]
 8010c4c:	f1b8 0300 	subs.w	r3, r8, #0
 8010c50:	d023      	beq.n	8010c9a <__d2b+0x82>
 8010c52:	4668      	mov	r0, sp
 8010c54:	9300      	str	r3, [sp, #0]
 8010c56:	f7ff fd84 	bl	8010762 <__lo0bits>
 8010c5a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010c5e:	b1d0      	cbz	r0, 8010c96 <__d2b+0x7e>
 8010c60:	f1c0 0320 	rsb	r3, r0, #32
 8010c64:	fa02 f303 	lsl.w	r3, r2, r3
 8010c68:	430b      	orrs	r3, r1
 8010c6a:	40c2      	lsrs	r2, r0
 8010c6c:	6163      	str	r3, [r4, #20]
 8010c6e:	9201      	str	r2, [sp, #4]
 8010c70:	9b01      	ldr	r3, [sp, #4]
 8010c72:	61a3      	str	r3, [r4, #24]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	bf0c      	ite	eq
 8010c78:	2201      	moveq	r2, #1
 8010c7a:	2202      	movne	r2, #2
 8010c7c:	6122      	str	r2, [r4, #16]
 8010c7e:	b1a5      	cbz	r5, 8010caa <__d2b+0x92>
 8010c80:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010c84:	4405      	add	r5, r0
 8010c86:	603d      	str	r5, [r7, #0]
 8010c88:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010c8c:	6030      	str	r0, [r6, #0]
 8010c8e:	4620      	mov	r0, r4
 8010c90:	b003      	add	sp, #12
 8010c92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c96:	6161      	str	r1, [r4, #20]
 8010c98:	e7ea      	b.n	8010c70 <__d2b+0x58>
 8010c9a:	a801      	add	r0, sp, #4
 8010c9c:	f7ff fd61 	bl	8010762 <__lo0bits>
 8010ca0:	9b01      	ldr	r3, [sp, #4]
 8010ca2:	6163      	str	r3, [r4, #20]
 8010ca4:	3020      	adds	r0, #32
 8010ca6:	2201      	movs	r2, #1
 8010ca8:	e7e8      	b.n	8010c7c <__d2b+0x64>
 8010caa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010cae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010cb2:	6038      	str	r0, [r7, #0]
 8010cb4:	6918      	ldr	r0, [r3, #16]
 8010cb6:	f7ff fd35 	bl	8010724 <__hi0bits>
 8010cba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010cbe:	e7e5      	b.n	8010c8c <__d2b+0x74>
 8010cc0:	08011910 	.word	0x08011910
 8010cc4:	08011921 	.word	0x08011921

08010cc8 <__ssputs_r>:
 8010cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ccc:	688e      	ldr	r6, [r1, #8]
 8010cce:	461f      	mov	r7, r3
 8010cd0:	42be      	cmp	r6, r7
 8010cd2:	680b      	ldr	r3, [r1, #0]
 8010cd4:	4682      	mov	sl, r0
 8010cd6:	460c      	mov	r4, r1
 8010cd8:	4690      	mov	r8, r2
 8010cda:	d82d      	bhi.n	8010d38 <__ssputs_r+0x70>
 8010cdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010ce0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010ce4:	d026      	beq.n	8010d34 <__ssputs_r+0x6c>
 8010ce6:	6965      	ldr	r5, [r4, #20]
 8010ce8:	6909      	ldr	r1, [r1, #16]
 8010cea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010cee:	eba3 0901 	sub.w	r9, r3, r1
 8010cf2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010cf6:	1c7b      	adds	r3, r7, #1
 8010cf8:	444b      	add	r3, r9
 8010cfa:	106d      	asrs	r5, r5, #1
 8010cfc:	429d      	cmp	r5, r3
 8010cfe:	bf38      	it	cc
 8010d00:	461d      	movcc	r5, r3
 8010d02:	0553      	lsls	r3, r2, #21
 8010d04:	d527      	bpl.n	8010d56 <__ssputs_r+0x8e>
 8010d06:	4629      	mov	r1, r5
 8010d08:	f7fd ff14 	bl	800eb34 <_malloc_r>
 8010d0c:	4606      	mov	r6, r0
 8010d0e:	b360      	cbz	r0, 8010d6a <__ssputs_r+0xa2>
 8010d10:	6921      	ldr	r1, [r4, #16]
 8010d12:	464a      	mov	r2, r9
 8010d14:	f000 f9f6 	bl	8011104 <memcpy>
 8010d18:	89a3      	ldrh	r3, [r4, #12]
 8010d1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010d1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010d22:	81a3      	strh	r3, [r4, #12]
 8010d24:	6126      	str	r6, [r4, #16]
 8010d26:	6165      	str	r5, [r4, #20]
 8010d28:	444e      	add	r6, r9
 8010d2a:	eba5 0509 	sub.w	r5, r5, r9
 8010d2e:	6026      	str	r6, [r4, #0]
 8010d30:	60a5      	str	r5, [r4, #8]
 8010d32:	463e      	mov	r6, r7
 8010d34:	42be      	cmp	r6, r7
 8010d36:	d900      	bls.n	8010d3a <__ssputs_r+0x72>
 8010d38:	463e      	mov	r6, r7
 8010d3a:	6820      	ldr	r0, [r4, #0]
 8010d3c:	4632      	mov	r2, r6
 8010d3e:	4641      	mov	r1, r8
 8010d40:	f000 f9c6 	bl	80110d0 <memmove>
 8010d44:	68a3      	ldr	r3, [r4, #8]
 8010d46:	1b9b      	subs	r3, r3, r6
 8010d48:	60a3      	str	r3, [r4, #8]
 8010d4a:	6823      	ldr	r3, [r4, #0]
 8010d4c:	4433      	add	r3, r6
 8010d4e:	6023      	str	r3, [r4, #0]
 8010d50:	2000      	movs	r0, #0
 8010d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d56:	462a      	mov	r2, r5
 8010d58:	f000 fa26 	bl	80111a8 <_realloc_r>
 8010d5c:	4606      	mov	r6, r0
 8010d5e:	2800      	cmp	r0, #0
 8010d60:	d1e0      	bne.n	8010d24 <__ssputs_r+0x5c>
 8010d62:	6921      	ldr	r1, [r4, #16]
 8010d64:	4650      	mov	r0, sl
 8010d66:	f7ff fbeb 	bl	8010540 <_free_r>
 8010d6a:	230c      	movs	r3, #12
 8010d6c:	f8ca 3000 	str.w	r3, [sl]
 8010d70:	89a3      	ldrh	r3, [r4, #12]
 8010d72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d76:	81a3      	strh	r3, [r4, #12]
 8010d78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010d7c:	e7e9      	b.n	8010d52 <__ssputs_r+0x8a>
	...

08010d80 <_svfiprintf_r>:
 8010d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d84:	4698      	mov	r8, r3
 8010d86:	898b      	ldrh	r3, [r1, #12]
 8010d88:	061b      	lsls	r3, r3, #24
 8010d8a:	b09d      	sub	sp, #116	@ 0x74
 8010d8c:	4607      	mov	r7, r0
 8010d8e:	460d      	mov	r5, r1
 8010d90:	4614      	mov	r4, r2
 8010d92:	d510      	bpl.n	8010db6 <_svfiprintf_r+0x36>
 8010d94:	690b      	ldr	r3, [r1, #16]
 8010d96:	b973      	cbnz	r3, 8010db6 <_svfiprintf_r+0x36>
 8010d98:	2140      	movs	r1, #64	@ 0x40
 8010d9a:	f7fd fecb 	bl	800eb34 <_malloc_r>
 8010d9e:	6028      	str	r0, [r5, #0]
 8010da0:	6128      	str	r0, [r5, #16]
 8010da2:	b930      	cbnz	r0, 8010db2 <_svfiprintf_r+0x32>
 8010da4:	230c      	movs	r3, #12
 8010da6:	603b      	str	r3, [r7, #0]
 8010da8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010dac:	b01d      	add	sp, #116	@ 0x74
 8010dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010db2:	2340      	movs	r3, #64	@ 0x40
 8010db4:	616b      	str	r3, [r5, #20]
 8010db6:	2300      	movs	r3, #0
 8010db8:	9309      	str	r3, [sp, #36]	@ 0x24
 8010dba:	2320      	movs	r3, #32
 8010dbc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010dc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8010dc4:	2330      	movs	r3, #48	@ 0x30
 8010dc6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010f64 <_svfiprintf_r+0x1e4>
 8010dca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010dce:	f04f 0901 	mov.w	r9, #1
 8010dd2:	4623      	mov	r3, r4
 8010dd4:	469a      	mov	sl, r3
 8010dd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010dda:	b10a      	cbz	r2, 8010de0 <_svfiprintf_r+0x60>
 8010ddc:	2a25      	cmp	r2, #37	@ 0x25
 8010dde:	d1f9      	bne.n	8010dd4 <_svfiprintf_r+0x54>
 8010de0:	ebba 0b04 	subs.w	fp, sl, r4
 8010de4:	d00b      	beq.n	8010dfe <_svfiprintf_r+0x7e>
 8010de6:	465b      	mov	r3, fp
 8010de8:	4622      	mov	r2, r4
 8010dea:	4629      	mov	r1, r5
 8010dec:	4638      	mov	r0, r7
 8010dee:	f7ff ff6b 	bl	8010cc8 <__ssputs_r>
 8010df2:	3001      	adds	r0, #1
 8010df4:	f000 80a7 	beq.w	8010f46 <_svfiprintf_r+0x1c6>
 8010df8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010dfa:	445a      	add	r2, fp
 8010dfc:	9209      	str	r2, [sp, #36]	@ 0x24
 8010dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	f000 809f 	beq.w	8010f46 <_svfiprintf_r+0x1c6>
 8010e08:	2300      	movs	r3, #0
 8010e0a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010e0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e12:	f10a 0a01 	add.w	sl, sl, #1
 8010e16:	9304      	str	r3, [sp, #16]
 8010e18:	9307      	str	r3, [sp, #28]
 8010e1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010e1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8010e20:	4654      	mov	r4, sl
 8010e22:	2205      	movs	r2, #5
 8010e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e28:	484e      	ldr	r0, [pc, #312]	@ (8010f64 <_svfiprintf_r+0x1e4>)
 8010e2a:	f7ef f9f9 	bl	8000220 <memchr>
 8010e2e:	9a04      	ldr	r2, [sp, #16]
 8010e30:	b9d8      	cbnz	r0, 8010e6a <_svfiprintf_r+0xea>
 8010e32:	06d0      	lsls	r0, r2, #27
 8010e34:	bf44      	itt	mi
 8010e36:	2320      	movmi	r3, #32
 8010e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010e3c:	0711      	lsls	r1, r2, #28
 8010e3e:	bf44      	itt	mi
 8010e40:	232b      	movmi	r3, #43	@ 0x2b
 8010e42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010e46:	f89a 3000 	ldrb.w	r3, [sl]
 8010e4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e4c:	d015      	beq.n	8010e7a <_svfiprintf_r+0xfa>
 8010e4e:	9a07      	ldr	r2, [sp, #28]
 8010e50:	4654      	mov	r4, sl
 8010e52:	2000      	movs	r0, #0
 8010e54:	f04f 0c0a 	mov.w	ip, #10
 8010e58:	4621      	mov	r1, r4
 8010e5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e5e:	3b30      	subs	r3, #48	@ 0x30
 8010e60:	2b09      	cmp	r3, #9
 8010e62:	d94b      	bls.n	8010efc <_svfiprintf_r+0x17c>
 8010e64:	b1b0      	cbz	r0, 8010e94 <_svfiprintf_r+0x114>
 8010e66:	9207      	str	r2, [sp, #28]
 8010e68:	e014      	b.n	8010e94 <_svfiprintf_r+0x114>
 8010e6a:	eba0 0308 	sub.w	r3, r0, r8
 8010e6e:	fa09 f303 	lsl.w	r3, r9, r3
 8010e72:	4313      	orrs	r3, r2
 8010e74:	9304      	str	r3, [sp, #16]
 8010e76:	46a2      	mov	sl, r4
 8010e78:	e7d2      	b.n	8010e20 <_svfiprintf_r+0xa0>
 8010e7a:	9b03      	ldr	r3, [sp, #12]
 8010e7c:	1d19      	adds	r1, r3, #4
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	9103      	str	r1, [sp, #12]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	bfbb      	ittet	lt
 8010e86:	425b      	neglt	r3, r3
 8010e88:	f042 0202 	orrlt.w	r2, r2, #2
 8010e8c:	9307      	strge	r3, [sp, #28]
 8010e8e:	9307      	strlt	r3, [sp, #28]
 8010e90:	bfb8      	it	lt
 8010e92:	9204      	strlt	r2, [sp, #16]
 8010e94:	7823      	ldrb	r3, [r4, #0]
 8010e96:	2b2e      	cmp	r3, #46	@ 0x2e
 8010e98:	d10a      	bne.n	8010eb0 <_svfiprintf_r+0x130>
 8010e9a:	7863      	ldrb	r3, [r4, #1]
 8010e9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e9e:	d132      	bne.n	8010f06 <_svfiprintf_r+0x186>
 8010ea0:	9b03      	ldr	r3, [sp, #12]
 8010ea2:	1d1a      	adds	r2, r3, #4
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	9203      	str	r2, [sp, #12]
 8010ea8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010eac:	3402      	adds	r4, #2
 8010eae:	9305      	str	r3, [sp, #20]
 8010eb0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010f74 <_svfiprintf_r+0x1f4>
 8010eb4:	7821      	ldrb	r1, [r4, #0]
 8010eb6:	2203      	movs	r2, #3
 8010eb8:	4650      	mov	r0, sl
 8010eba:	f7ef f9b1 	bl	8000220 <memchr>
 8010ebe:	b138      	cbz	r0, 8010ed0 <_svfiprintf_r+0x150>
 8010ec0:	9b04      	ldr	r3, [sp, #16]
 8010ec2:	eba0 000a 	sub.w	r0, r0, sl
 8010ec6:	2240      	movs	r2, #64	@ 0x40
 8010ec8:	4082      	lsls	r2, r0
 8010eca:	4313      	orrs	r3, r2
 8010ecc:	3401      	adds	r4, #1
 8010ece:	9304      	str	r3, [sp, #16]
 8010ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ed4:	4824      	ldr	r0, [pc, #144]	@ (8010f68 <_svfiprintf_r+0x1e8>)
 8010ed6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010eda:	2206      	movs	r2, #6
 8010edc:	f7ef f9a0 	bl	8000220 <memchr>
 8010ee0:	2800      	cmp	r0, #0
 8010ee2:	d036      	beq.n	8010f52 <_svfiprintf_r+0x1d2>
 8010ee4:	4b21      	ldr	r3, [pc, #132]	@ (8010f6c <_svfiprintf_r+0x1ec>)
 8010ee6:	bb1b      	cbnz	r3, 8010f30 <_svfiprintf_r+0x1b0>
 8010ee8:	9b03      	ldr	r3, [sp, #12]
 8010eea:	3307      	adds	r3, #7
 8010eec:	f023 0307 	bic.w	r3, r3, #7
 8010ef0:	3308      	adds	r3, #8
 8010ef2:	9303      	str	r3, [sp, #12]
 8010ef4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ef6:	4433      	add	r3, r6
 8010ef8:	9309      	str	r3, [sp, #36]	@ 0x24
 8010efa:	e76a      	b.n	8010dd2 <_svfiprintf_r+0x52>
 8010efc:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f00:	460c      	mov	r4, r1
 8010f02:	2001      	movs	r0, #1
 8010f04:	e7a8      	b.n	8010e58 <_svfiprintf_r+0xd8>
 8010f06:	2300      	movs	r3, #0
 8010f08:	3401      	adds	r4, #1
 8010f0a:	9305      	str	r3, [sp, #20]
 8010f0c:	4619      	mov	r1, r3
 8010f0e:	f04f 0c0a 	mov.w	ip, #10
 8010f12:	4620      	mov	r0, r4
 8010f14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f18:	3a30      	subs	r2, #48	@ 0x30
 8010f1a:	2a09      	cmp	r2, #9
 8010f1c:	d903      	bls.n	8010f26 <_svfiprintf_r+0x1a6>
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d0c6      	beq.n	8010eb0 <_svfiprintf_r+0x130>
 8010f22:	9105      	str	r1, [sp, #20]
 8010f24:	e7c4      	b.n	8010eb0 <_svfiprintf_r+0x130>
 8010f26:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f2a:	4604      	mov	r4, r0
 8010f2c:	2301      	movs	r3, #1
 8010f2e:	e7f0      	b.n	8010f12 <_svfiprintf_r+0x192>
 8010f30:	ab03      	add	r3, sp, #12
 8010f32:	9300      	str	r3, [sp, #0]
 8010f34:	462a      	mov	r2, r5
 8010f36:	4b0e      	ldr	r3, [pc, #56]	@ (8010f70 <_svfiprintf_r+0x1f0>)
 8010f38:	a904      	add	r1, sp, #16
 8010f3a:	4638      	mov	r0, r7
 8010f3c:	f7fd ff26 	bl	800ed8c <_printf_float>
 8010f40:	1c42      	adds	r2, r0, #1
 8010f42:	4606      	mov	r6, r0
 8010f44:	d1d6      	bne.n	8010ef4 <_svfiprintf_r+0x174>
 8010f46:	89ab      	ldrh	r3, [r5, #12]
 8010f48:	065b      	lsls	r3, r3, #25
 8010f4a:	f53f af2d 	bmi.w	8010da8 <_svfiprintf_r+0x28>
 8010f4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010f50:	e72c      	b.n	8010dac <_svfiprintf_r+0x2c>
 8010f52:	ab03      	add	r3, sp, #12
 8010f54:	9300      	str	r3, [sp, #0]
 8010f56:	462a      	mov	r2, r5
 8010f58:	4b05      	ldr	r3, [pc, #20]	@ (8010f70 <_svfiprintf_r+0x1f0>)
 8010f5a:	a904      	add	r1, sp, #16
 8010f5c:	4638      	mov	r0, r7
 8010f5e:	f7fe f9ad 	bl	800f2bc <_printf_i>
 8010f62:	e7ed      	b.n	8010f40 <_svfiprintf_r+0x1c0>
 8010f64:	0801197a 	.word	0x0801197a
 8010f68:	08011984 	.word	0x08011984
 8010f6c:	0800ed8d 	.word	0x0800ed8d
 8010f70:	08010cc9 	.word	0x08010cc9
 8010f74:	08011980 	.word	0x08011980

08010f78 <__sflush_r>:
 8010f78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f80:	0716      	lsls	r6, r2, #28
 8010f82:	4605      	mov	r5, r0
 8010f84:	460c      	mov	r4, r1
 8010f86:	d454      	bmi.n	8011032 <__sflush_r+0xba>
 8010f88:	684b      	ldr	r3, [r1, #4]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	dc02      	bgt.n	8010f94 <__sflush_r+0x1c>
 8010f8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	dd48      	ble.n	8011026 <__sflush_r+0xae>
 8010f94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010f96:	2e00      	cmp	r6, #0
 8010f98:	d045      	beq.n	8011026 <__sflush_r+0xae>
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010fa0:	682f      	ldr	r7, [r5, #0]
 8010fa2:	6a21      	ldr	r1, [r4, #32]
 8010fa4:	602b      	str	r3, [r5, #0]
 8010fa6:	d030      	beq.n	801100a <__sflush_r+0x92>
 8010fa8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010faa:	89a3      	ldrh	r3, [r4, #12]
 8010fac:	0759      	lsls	r1, r3, #29
 8010fae:	d505      	bpl.n	8010fbc <__sflush_r+0x44>
 8010fb0:	6863      	ldr	r3, [r4, #4]
 8010fb2:	1ad2      	subs	r2, r2, r3
 8010fb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010fb6:	b10b      	cbz	r3, 8010fbc <__sflush_r+0x44>
 8010fb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010fba:	1ad2      	subs	r2, r2, r3
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010fc0:	6a21      	ldr	r1, [r4, #32]
 8010fc2:	4628      	mov	r0, r5
 8010fc4:	47b0      	blx	r6
 8010fc6:	1c43      	adds	r3, r0, #1
 8010fc8:	89a3      	ldrh	r3, [r4, #12]
 8010fca:	d106      	bne.n	8010fda <__sflush_r+0x62>
 8010fcc:	6829      	ldr	r1, [r5, #0]
 8010fce:	291d      	cmp	r1, #29
 8010fd0:	d82b      	bhi.n	801102a <__sflush_r+0xb2>
 8010fd2:	4a2a      	ldr	r2, [pc, #168]	@ (801107c <__sflush_r+0x104>)
 8010fd4:	40ca      	lsrs	r2, r1
 8010fd6:	07d6      	lsls	r6, r2, #31
 8010fd8:	d527      	bpl.n	801102a <__sflush_r+0xb2>
 8010fda:	2200      	movs	r2, #0
 8010fdc:	6062      	str	r2, [r4, #4]
 8010fde:	04d9      	lsls	r1, r3, #19
 8010fe0:	6922      	ldr	r2, [r4, #16]
 8010fe2:	6022      	str	r2, [r4, #0]
 8010fe4:	d504      	bpl.n	8010ff0 <__sflush_r+0x78>
 8010fe6:	1c42      	adds	r2, r0, #1
 8010fe8:	d101      	bne.n	8010fee <__sflush_r+0x76>
 8010fea:	682b      	ldr	r3, [r5, #0]
 8010fec:	b903      	cbnz	r3, 8010ff0 <__sflush_r+0x78>
 8010fee:	6560      	str	r0, [r4, #84]	@ 0x54
 8010ff0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010ff2:	602f      	str	r7, [r5, #0]
 8010ff4:	b1b9      	cbz	r1, 8011026 <__sflush_r+0xae>
 8010ff6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010ffa:	4299      	cmp	r1, r3
 8010ffc:	d002      	beq.n	8011004 <__sflush_r+0x8c>
 8010ffe:	4628      	mov	r0, r5
 8011000:	f7ff fa9e 	bl	8010540 <_free_r>
 8011004:	2300      	movs	r3, #0
 8011006:	6363      	str	r3, [r4, #52]	@ 0x34
 8011008:	e00d      	b.n	8011026 <__sflush_r+0xae>
 801100a:	2301      	movs	r3, #1
 801100c:	4628      	mov	r0, r5
 801100e:	47b0      	blx	r6
 8011010:	4602      	mov	r2, r0
 8011012:	1c50      	adds	r0, r2, #1
 8011014:	d1c9      	bne.n	8010faa <__sflush_r+0x32>
 8011016:	682b      	ldr	r3, [r5, #0]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d0c6      	beq.n	8010faa <__sflush_r+0x32>
 801101c:	2b1d      	cmp	r3, #29
 801101e:	d001      	beq.n	8011024 <__sflush_r+0xac>
 8011020:	2b16      	cmp	r3, #22
 8011022:	d11e      	bne.n	8011062 <__sflush_r+0xea>
 8011024:	602f      	str	r7, [r5, #0]
 8011026:	2000      	movs	r0, #0
 8011028:	e022      	b.n	8011070 <__sflush_r+0xf8>
 801102a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801102e:	b21b      	sxth	r3, r3
 8011030:	e01b      	b.n	801106a <__sflush_r+0xf2>
 8011032:	690f      	ldr	r7, [r1, #16]
 8011034:	2f00      	cmp	r7, #0
 8011036:	d0f6      	beq.n	8011026 <__sflush_r+0xae>
 8011038:	0793      	lsls	r3, r2, #30
 801103a:	680e      	ldr	r6, [r1, #0]
 801103c:	bf08      	it	eq
 801103e:	694b      	ldreq	r3, [r1, #20]
 8011040:	600f      	str	r7, [r1, #0]
 8011042:	bf18      	it	ne
 8011044:	2300      	movne	r3, #0
 8011046:	eba6 0807 	sub.w	r8, r6, r7
 801104a:	608b      	str	r3, [r1, #8]
 801104c:	f1b8 0f00 	cmp.w	r8, #0
 8011050:	dde9      	ble.n	8011026 <__sflush_r+0xae>
 8011052:	6a21      	ldr	r1, [r4, #32]
 8011054:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011056:	4643      	mov	r3, r8
 8011058:	463a      	mov	r2, r7
 801105a:	4628      	mov	r0, r5
 801105c:	47b0      	blx	r6
 801105e:	2800      	cmp	r0, #0
 8011060:	dc08      	bgt.n	8011074 <__sflush_r+0xfc>
 8011062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011066:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801106a:	81a3      	strh	r3, [r4, #12]
 801106c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011074:	4407      	add	r7, r0
 8011076:	eba8 0800 	sub.w	r8, r8, r0
 801107a:	e7e7      	b.n	801104c <__sflush_r+0xd4>
 801107c:	20400001 	.word	0x20400001

08011080 <_fflush_r>:
 8011080:	b538      	push	{r3, r4, r5, lr}
 8011082:	690b      	ldr	r3, [r1, #16]
 8011084:	4605      	mov	r5, r0
 8011086:	460c      	mov	r4, r1
 8011088:	b913      	cbnz	r3, 8011090 <_fflush_r+0x10>
 801108a:	2500      	movs	r5, #0
 801108c:	4628      	mov	r0, r5
 801108e:	bd38      	pop	{r3, r4, r5, pc}
 8011090:	b118      	cbz	r0, 801109a <_fflush_r+0x1a>
 8011092:	6a03      	ldr	r3, [r0, #32]
 8011094:	b90b      	cbnz	r3, 801109a <_fflush_r+0x1a>
 8011096:	f7fe fabb 	bl	800f610 <__sinit>
 801109a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d0f3      	beq.n	801108a <_fflush_r+0xa>
 80110a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80110a4:	07d0      	lsls	r0, r2, #31
 80110a6:	d404      	bmi.n	80110b2 <_fflush_r+0x32>
 80110a8:	0599      	lsls	r1, r3, #22
 80110aa:	d402      	bmi.n	80110b2 <_fflush_r+0x32>
 80110ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80110ae:	f7fe fbec 	bl	800f88a <__retarget_lock_acquire_recursive>
 80110b2:	4628      	mov	r0, r5
 80110b4:	4621      	mov	r1, r4
 80110b6:	f7ff ff5f 	bl	8010f78 <__sflush_r>
 80110ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80110bc:	07da      	lsls	r2, r3, #31
 80110be:	4605      	mov	r5, r0
 80110c0:	d4e4      	bmi.n	801108c <_fflush_r+0xc>
 80110c2:	89a3      	ldrh	r3, [r4, #12]
 80110c4:	059b      	lsls	r3, r3, #22
 80110c6:	d4e1      	bmi.n	801108c <_fflush_r+0xc>
 80110c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80110ca:	f7fe fbdf 	bl	800f88c <__retarget_lock_release_recursive>
 80110ce:	e7dd      	b.n	801108c <_fflush_r+0xc>

080110d0 <memmove>:
 80110d0:	4288      	cmp	r0, r1
 80110d2:	b510      	push	{r4, lr}
 80110d4:	eb01 0402 	add.w	r4, r1, r2
 80110d8:	d902      	bls.n	80110e0 <memmove+0x10>
 80110da:	4284      	cmp	r4, r0
 80110dc:	4623      	mov	r3, r4
 80110de:	d807      	bhi.n	80110f0 <memmove+0x20>
 80110e0:	1e43      	subs	r3, r0, #1
 80110e2:	42a1      	cmp	r1, r4
 80110e4:	d008      	beq.n	80110f8 <memmove+0x28>
 80110e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80110ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80110ee:	e7f8      	b.n	80110e2 <memmove+0x12>
 80110f0:	4402      	add	r2, r0
 80110f2:	4601      	mov	r1, r0
 80110f4:	428a      	cmp	r2, r1
 80110f6:	d100      	bne.n	80110fa <memmove+0x2a>
 80110f8:	bd10      	pop	{r4, pc}
 80110fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80110fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011102:	e7f7      	b.n	80110f4 <memmove+0x24>

08011104 <memcpy>:
 8011104:	440a      	add	r2, r1
 8011106:	4291      	cmp	r1, r2
 8011108:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801110c:	d100      	bne.n	8011110 <memcpy+0xc>
 801110e:	4770      	bx	lr
 8011110:	b510      	push	{r4, lr}
 8011112:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011116:	f803 4f01 	strb.w	r4, [r3, #1]!
 801111a:	4291      	cmp	r1, r2
 801111c:	d1f9      	bne.n	8011112 <memcpy+0xe>
 801111e:	bd10      	pop	{r4, pc}

08011120 <__assert_func>:
 8011120:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011122:	4614      	mov	r4, r2
 8011124:	461a      	mov	r2, r3
 8011126:	4b09      	ldr	r3, [pc, #36]	@ (801114c <__assert_func+0x2c>)
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	4605      	mov	r5, r0
 801112c:	68d8      	ldr	r0, [r3, #12]
 801112e:	b14c      	cbz	r4, 8011144 <__assert_func+0x24>
 8011130:	4b07      	ldr	r3, [pc, #28]	@ (8011150 <__assert_func+0x30>)
 8011132:	9100      	str	r1, [sp, #0]
 8011134:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011138:	4906      	ldr	r1, [pc, #24]	@ (8011154 <__assert_func+0x34>)
 801113a:	462b      	mov	r3, r5
 801113c:	f000 f870 	bl	8011220 <fiprintf>
 8011140:	f000 f880 	bl	8011244 <abort>
 8011144:	4b04      	ldr	r3, [pc, #16]	@ (8011158 <__assert_func+0x38>)
 8011146:	461c      	mov	r4, r3
 8011148:	e7f3      	b.n	8011132 <__assert_func+0x12>
 801114a:	bf00      	nop
 801114c:	20000118 	.word	0x20000118
 8011150:	08011995 	.word	0x08011995
 8011154:	080119a2 	.word	0x080119a2
 8011158:	080119d0 	.word	0x080119d0

0801115c <_calloc_r>:
 801115c:	b570      	push	{r4, r5, r6, lr}
 801115e:	fba1 5402 	umull	r5, r4, r1, r2
 8011162:	b934      	cbnz	r4, 8011172 <_calloc_r+0x16>
 8011164:	4629      	mov	r1, r5
 8011166:	f7fd fce5 	bl	800eb34 <_malloc_r>
 801116a:	4606      	mov	r6, r0
 801116c:	b928      	cbnz	r0, 801117a <_calloc_r+0x1e>
 801116e:	4630      	mov	r0, r6
 8011170:	bd70      	pop	{r4, r5, r6, pc}
 8011172:	220c      	movs	r2, #12
 8011174:	6002      	str	r2, [r0, #0]
 8011176:	2600      	movs	r6, #0
 8011178:	e7f9      	b.n	801116e <_calloc_r+0x12>
 801117a:	462a      	mov	r2, r5
 801117c:	4621      	mov	r1, r4
 801117e:	f7fe faf6 	bl	800f76e <memset>
 8011182:	e7f4      	b.n	801116e <_calloc_r+0x12>

08011184 <__ascii_mbtowc>:
 8011184:	b082      	sub	sp, #8
 8011186:	b901      	cbnz	r1, 801118a <__ascii_mbtowc+0x6>
 8011188:	a901      	add	r1, sp, #4
 801118a:	b142      	cbz	r2, 801119e <__ascii_mbtowc+0x1a>
 801118c:	b14b      	cbz	r3, 80111a2 <__ascii_mbtowc+0x1e>
 801118e:	7813      	ldrb	r3, [r2, #0]
 8011190:	600b      	str	r3, [r1, #0]
 8011192:	7812      	ldrb	r2, [r2, #0]
 8011194:	1e10      	subs	r0, r2, #0
 8011196:	bf18      	it	ne
 8011198:	2001      	movne	r0, #1
 801119a:	b002      	add	sp, #8
 801119c:	4770      	bx	lr
 801119e:	4610      	mov	r0, r2
 80111a0:	e7fb      	b.n	801119a <__ascii_mbtowc+0x16>
 80111a2:	f06f 0001 	mvn.w	r0, #1
 80111a6:	e7f8      	b.n	801119a <__ascii_mbtowc+0x16>

080111a8 <_realloc_r>:
 80111a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111ac:	4607      	mov	r7, r0
 80111ae:	4614      	mov	r4, r2
 80111b0:	460d      	mov	r5, r1
 80111b2:	b921      	cbnz	r1, 80111be <_realloc_r+0x16>
 80111b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80111b8:	4611      	mov	r1, r2
 80111ba:	f7fd bcbb 	b.w	800eb34 <_malloc_r>
 80111be:	b92a      	cbnz	r2, 80111cc <_realloc_r+0x24>
 80111c0:	f7ff f9be 	bl	8010540 <_free_r>
 80111c4:	4625      	mov	r5, r4
 80111c6:	4628      	mov	r0, r5
 80111c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111cc:	f000 f841 	bl	8011252 <_malloc_usable_size_r>
 80111d0:	4284      	cmp	r4, r0
 80111d2:	4606      	mov	r6, r0
 80111d4:	d802      	bhi.n	80111dc <_realloc_r+0x34>
 80111d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80111da:	d8f4      	bhi.n	80111c6 <_realloc_r+0x1e>
 80111dc:	4621      	mov	r1, r4
 80111de:	4638      	mov	r0, r7
 80111e0:	f7fd fca8 	bl	800eb34 <_malloc_r>
 80111e4:	4680      	mov	r8, r0
 80111e6:	b908      	cbnz	r0, 80111ec <_realloc_r+0x44>
 80111e8:	4645      	mov	r5, r8
 80111ea:	e7ec      	b.n	80111c6 <_realloc_r+0x1e>
 80111ec:	42b4      	cmp	r4, r6
 80111ee:	4622      	mov	r2, r4
 80111f0:	4629      	mov	r1, r5
 80111f2:	bf28      	it	cs
 80111f4:	4632      	movcs	r2, r6
 80111f6:	f7ff ff85 	bl	8011104 <memcpy>
 80111fa:	4629      	mov	r1, r5
 80111fc:	4638      	mov	r0, r7
 80111fe:	f7ff f99f 	bl	8010540 <_free_r>
 8011202:	e7f1      	b.n	80111e8 <_realloc_r+0x40>

08011204 <__ascii_wctomb>:
 8011204:	4603      	mov	r3, r0
 8011206:	4608      	mov	r0, r1
 8011208:	b141      	cbz	r1, 801121c <__ascii_wctomb+0x18>
 801120a:	2aff      	cmp	r2, #255	@ 0xff
 801120c:	d904      	bls.n	8011218 <__ascii_wctomb+0x14>
 801120e:	228a      	movs	r2, #138	@ 0x8a
 8011210:	601a      	str	r2, [r3, #0]
 8011212:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011216:	4770      	bx	lr
 8011218:	700a      	strb	r2, [r1, #0]
 801121a:	2001      	movs	r0, #1
 801121c:	4770      	bx	lr
	...

08011220 <fiprintf>:
 8011220:	b40e      	push	{r1, r2, r3}
 8011222:	b503      	push	{r0, r1, lr}
 8011224:	4601      	mov	r1, r0
 8011226:	ab03      	add	r3, sp, #12
 8011228:	4805      	ldr	r0, [pc, #20]	@ (8011240 <fiprintf+0x20>)
 801122a:	f853 2b04 	ldr.w	r2, [r3], #4
 801122e:	6800      	ldr	r0, [r0, #0]
 8011230:	9301      	str	r3, [sp, #4]
 8011232:	f000 f83f 	bl	80112b4 <_vfiprintf_r>
 8011236:	b002      	add	sp, #8
 8011238:	f85d eb04 	ldr.w	lr, [sp], #4
 801123c:	b003      	add	sp, #12
 801123e:	4770      	bx	lr
 8011240:	20000118 	.word	0x20000118

08011244 <abort>:
 8011244:	b508      	push	{r3, lr}
 8011246:	2006      	movs	r0, #6
 8011248:	f000 fa08 	bl	801165c <raise>
 801124c:	2001      	movs	r0, #1
 801124e:	f7f1 fba1 	bl	8002994 <_exit>

08011252 <_malloc_usable_size_r>:
 8011252:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011256:	1f18      	subs	r0, r3, #4
 8011258:	2b00      	cmp	r3, #0
 801125a:	bfbc      	itt	lt
 801125c:	580b      	ldrlt	r3, [r1, r0]
 801125e:	18c0      	addlt	r0, r0, r3
 8011260:	4770      	bx	lr

08011262 <__sfputc_r>:
 8011262:	6893      	ldr	r3, [r2, #8]
 8011264:	3b01      	subs	r3, #1
 8011266:	2b00      	cmp	r3, #0
 8011268:	b410      	push	{r4}
 801126a:	6093      	str	r3, [r2, #8]
 801126c:	da08      	bge.n	8011280 <__sfputc_r+0x1e>
 801126e:	6994      	ldr	r4, [r2, #24]
 8011270:	42a3      	cmp	r3, r4
 8011272:	db01      	blt.n	8011278 <__sfputc_r+0x16>
 8011274:	290a      	cmp	r1, #10
 8011276:	d103      	bne.n	8011280 <__sfputc_r+0x1e>
 8011278:	f85d 4b04 	ldr.w	r4, [sp], #4
 801127c:	f000 b932 	b.w	80114e4 <__swbuf_r>
 8011280:	6813      	ldr	r3, [r2, #0]
 8011282:	1c58      	adds	r0, r3, #1
 8011284:	6010      	str	r0, [r2, #0]
 8011286:	7019      	strb	r1, [r3, #0]
 8011288:	4608      	mov	r0, r1
 801128a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801128e:	4770      	bx	lr

08011290 <__sfputs_r>:
 8011290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011292:	4606      	mov	r6, r0
 8011294:	460f      	mov	r7, r1
 8011296:	4614      	mov	r4, r2
 8011298:	18d5      	adds	r5, r2, r3
 801129a:	42ac      	cmp	r4, r5
 801129c:	d101      	bne.n	80112a2 <__sfputs_r+0x12>
 801129e:	2000      	movs	r0, #0
 80112a0:	e007      	b.n	80112b2 <__sfputs_r+0x22>
 80112a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112a6:	463a      	mov	r2, r7
 80112a8:	4630      	mov	r0, r6
 80112aa:	f7ff ffda 	bl	8011262 <__sfputc_r>
 80112ae:	1c43      	adds	r3, r0, #1
 80112b0:	d1f3      	bne.n	801129a <__sfputs_r+0xa>
 80112b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080112b4 <_vfiprintf_r>:
 80112b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112b8:	460d      	mov	r5, r1
 80112ba:	b09d      	sub	sp, #116	@ 0x74
 80112bc:	4614      	mov	r4, r2
 80112be:	4698      	mov	r8, r3
 80112c0:	4606      	mov	r6, r0
 80112c2:	b118      	cbz	r0, 80112cc <_vfiprintf_r+0x18>
 80112c4:	6a03      	ldr	r3, [r0, #32]
 80112c6:	b90b      	cbnz	r3, 80112cc <_vfiprintf_r+0x18>
 80112c8:	f7fe f9a2 	bl	800f610 <__sinit>
 80112cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80112ce:	07d9      	lsls	r1, r3, #31
 80112d0:	d405      	bmi.n	80112de <_vfiprintf_r+0x2a>
 80112d2:	89ab      	ldrh	r3, [r5, #12]
 80112d4:	059a      	lsls	r2, r3, #22
 80112d6:	d402      	bmi.n	80112de <_vfiprintf_r+0x2a>
 80112d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80112da:	f7fe fad6 	bl	800f88a <__retarget_lock_acquire_recursive>
 80112de:	89ab      	ldrh	r3, [r5, #12]
 80112e0:	071b      	lsls	r3, r3, #28
 80112e2:	d501      	bpl.n	80112e8 <_vfiprintf_r+0x34>
 80112e4:	692b      	ldr	r3, [r5, #16]
 80112e6:	b99b      	cbnz	r3, 8011310 <_vfiprintf_r+0x5c>
 80112e8:	4629      	mov	r1, r5
 80112ea:	4630      	mov	r0, r6
 80112ec:	f000 f938 	bl	8011560 <__swsetup_r>
 80112f0:	b170      	cbz	r0, 8011310 <_vfiprintf_r+0x5c>
 80112f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80112f4:	07dc      	lsls	r4, r3, #31
 80112f6:	d504      	bpl.n	8011302 <_vfiprintf_r+0x4e>
 80112f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80112fc:	b01d      	add	sp, #116	@ 0x74
 80112fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011302:	89ab      	ldrh	r3, [r5, #12]
 8011304:	0598      	lsls	r0, r3, #22
 8011306:	d4f7      	bmi.n	80112f8 <_vfiprintf_r+0x44>
 8011308:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801130a:	f7fe fabf 	bl	800f88c <__retarget_lock_release_recursive>
 801130e:	e7f3      	b.n	80112f8 <_vfiprintf_r+0x44>
 8011310:	2300      	movs	r3, #0
 8011312:	9309      	str	r3, [sp, #36]	@ 0x24
 8011314:	2320      	movs	r3, #32
 8011316:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801131a:	f8cd 800c 	str.w	r8, [sp, #12]
 801131e:	2330      	movs	r3, #48	@ 0x30
 8011320:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80114d0 <_vfiprintf_r+0x21c>
 8011324:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011328:	f04f 0901 	mov.w	r9, #1
 801132c:	4623      	mov	r3, r4
 801132e:	469a      	mov	sl, r3
 8011330:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011334:	b10a      	cbz	r2, 801133a <_vfiprintf_r+0x86>
 8011336:	2a25      	cmp	r2, #37	@ 0x25
 8011338:	d1f9      	bne.n	801132e <_vfiprintf_r+0x7a>
 801133a:	ebba 0b04 	subs.w	fp, sl, r4
 801133e:	d00b      	beq.n	8011358 <_vfiprintf_r+0xa4>
 8011340:	465b      	mov	r3, fp
 8011342:	4622      	mov	r2, r4
 8011344:	4629      	mov	r1, r5
 8011346:	4630      	mov	r0, r6
 8011348:	f7ff ffa2 	bl	8011290 <__sfputs_r>
 801134c:	3001      	adds	r0, #1
 801134e:	f000 80a7 	beq.w	80114a0 <_vfiprintf_r+0x1ec>
 8011352:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011354:	445a      	add	r2, fp
 8011356:	9209      	str	r2, [sp, #36]	@ 0x24
 8011358:	f89a 3000 	ldrb.w	r3, [sl]
 801135c:	2b00      	cmp	r3, #0
 801135e:	f000 809f 	beq.w	80114a0 <_vfiprintf_r+0x1ec>
 8011362:	2300      	movs	r3, #0
 8011364:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011368:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801136c:	f10a 0a01 	add.w	sl, sl, #1
 8011370:	9304      	str	r3, [sp, #16]
 8011372:	9307      	str	r3, [sp, #28]
 8011374:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011378:	931a      	str	r3, [sp, #104]	@ 0x68
 801137a:	4654      	mov	r4, sl
 801137c:	2205      	movs	r2, #5
 801137e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011382:	4853      	ldr	r0, [pc, #332]	@ (80114d0 <_vfiprintf_r+0x21c>)
 8011384:	f7ee ff4c 	bl	8000220 <memchr>
 8011388:	9a04      	ldr	r2, [sp, #16]
 801138a:	b9d8      	cbnz	r0, 80113c4 <_vfiprintf_r+0x110>
 801138c:	06d1      	lsls	r1, r2, #27
 801138e:	bf44      	itt	mi
 8011390:	2320      	movmi	r3, #32
 8011392:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011396:	0713      	lsls	r3, r2, #28
 8011398:	bf44      	itt	mi
 801139a:	232b      	movmi	r3, #43	@ 0x2b
 801139c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80113a0:	f89a 3000 	ldrb.w	r3, [sl]
 80113a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80113a6:	d015      	beq.n	80113d4 <_vfiprintf_r+0x120>
 80113a8:	9a07      	ldr	r2, [sp, #28]
 80113aa:	4654      	mov	r4, sl
 80113ac:	2000      	movs	r0, #0
 80113ae:	f04f 0c0a 	mov.w	ip, #10
 80113b2:	4621      	mov	r1, r4
 80113b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80113b8:	3b30      	subs	r3, #48	@ 0x30
 80113ba:	2b09      	cmp	r3, #9
 80113bc:	d94b      	bls.n	8011456 <_vfiprintf_r+0x1a2>
 80113be:	b1b0      	cbz	r0, 80113ee <_vfiprintf_r+0x13a>
 80113c0:	9207      	str	r2, [sp, #28]
 80113c2:	e014      	b.n	80113ee <_vfiprintf_r+0x13a>
 80113c4:	eba0 0308 	sub.w	r3, r0, r8
 80113c8:	fa09 f303 	lsl.w	r3, r9, r3
 80113cc:	4313      	orrs	r3, r2
 80113ce:	9304      	str	r3, [sp, #16]
 80113d0:	46a2      	mov	sl, r4
 80113d2:	e7d2      	b.n	801137a <_vfiprintf_r+0xc6>
 80113d4:	9b03      	ldr	r3, [sp, #12]
 80113d6:	1d19      	adds	r1, r3, #4
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	9103      	str	r1, [sp, #12]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	bfbb      	ittet	lt
 80113e0:	425b      	neglt	r3, r3
 80113e2:	f042 0202 	orrlt.w	r2, r2, #2
 80113e6:	9307      	strge	r3, [sp, #28]
 80113e8:	9307      	strlt	r3, [sp, #28]
 80113ea:	bfb8      	it	lt
 80113ec:	9204      	strlt	r2, [sp, #16]
 80113ee:	7823      	ldrb	r3, [r4, #0]
 80113f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80113f2:	d10a      	bne.n	801140a <_vfiprintf_r+0x156>
 80113f4:	7863      	ldrb	r3, [r4, #1]
 80113f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80113f8:	d132      	bne.n	8011460 <_vfiprintf_r+0x1ac>
 80113fa:	9b03      	ldr	r3, [sp, #12]
 80113fc:	1d1a      	adds	r2, r3, #4
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	9203      	str	r2, [sp, #12]
 8011402:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011406:	3402      	adds	r4, #2
 8011408:	9305      	str	r3, [sp, #20]
 801140a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80114e0 <_vfiprintf_r+0x22c>
 801140e:	7821      	ldrb	r1, [r4, #0]
 8011410:	2203      	movs	r2, #3
 8011412:	4650      	mov	r0, sl
 8011414:	f7ee ff04 	bl	8000220 <memchr>
 8011418:	b138      	cbz	r0, 801142a <_vfiprintf_r+0x176>
 801141a:	9b04      	ldr	r3, [sp, #16]
 801141c:	eba0 000a 	sub.w	r0, r0, sl
 8011420:	2240      	movs	r2, #64	@ 0x40
 8011422:	4082      	lsls	r2, r0
 8011424:	4313      	orrs	r3, r2
 8011426:	3401      	adds	r4, #1
 8011428:	9304      	str	r3, [sp, #16]
 801142a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801142e:	4829      	ldr	r0, [pc, #164]	@ (80114d4 <_vfiprintf_r+0x220>)
 8011430:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011434:	2206      	movs	r2, #6
 8011436:	f7ee fef3 	bl	8000220 <memchr>
 801143a:	2800      	cmp	r0, #0
 801143c:	d03f      	beq.n	80114be <_vfiprintf_r+0x20a>
 801143e:	4b26      	ldr	r3, [pc, #152]	@ (80114d8 <_vfiprintf_r+0x224>)
 8011440:	bb1b      	cbnz	r3, 801148a <_vfiprintf_r+0x1d6>
 8011442:	9b03      	ldr	r3, [sp, #12]
 8011444:	3307      	adds	r3, #7
 8011446:	f023 0307 	bic.w	r3, r3, #7
 801144a:	3308      	adds	r3, #8
 801144c:	9303      	str	r3, [sp, #12]
 801144e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011450:	443b      	add	r3, r7
 8011452:	9309      	str	r3, [sp, #36]	@ 0x24
 8011454:	e76a      	b.n	801132c <_vfiprintf_r+0x78>
 8011456:	fb0c 3202 	mla	r2, ip, r2, r3
 801145a:	460c      	mov	r4, r1
 801145c:	2001      	movs	r0, #1
 801145e:	e7a8      	b.n	80113b2 <_vfiprintf_r+0xfe>
 8011460:	2300      	movs	r3, #0
 8011462:	3401      	adds	r4, #1
 8011464:	9305      	str	r3, [sp, #20]
 8011466:	4619      	mov	r1, r3
 8011468:	f04f 0c0a 	mov.w	ip, #10
 801146c:	4620      	mov	r0, r4
 801146e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011472:	3a30      	subs	r2, #48	@ 0x30
 8011474:	2a09      	cmp	r2, #9
 8011476:	d903      	bls.n	8011480 <_vfiprintf_r+0x1cc>
 8011478:	2b00      	cmp	r3, #0
 801147a:	d0c6      	beq.n	801140a <_vfiprintf_r+0x156>
 801147c:	9105      	str	r1, [sp, #20]
 801147e:	e7c4      	b.n	801140a <_vfiprintf_r+0x156>
 8011480:	fb0c 2101 	mla	r1, ip, r1, r2
 8011484:	4604      	mov	r4, r0
 8011486:	2301      	movs	r3, #1
 8011488:	e7f0      	b.n	801146c <_vfiprintf_r+0x1b8>
 801148a:	ab03      	add	r3, sp, #12
 801148c:	9300      	str	r3, [sp, #0]
 801148e:	462a      	mov	r2, r5
 8011490:	4b12      	ldr	r3, [pc, #72]	@ (80114dc <_vfiprintf_r+0x228>)
 8011492:	a904      	add	r1, sp, #16
 8011494:	4630      	mov	r0, r6
 8011496:	f7fd fc79 	bl	800ed8c <_printf_float>
 801149a:	4607      	mov	r7, r0
 801149c:	1c78      	adds	r0, r7, #1
 801149e:	d1d6      	bne.n	801144e <_vfiprintf_r+0x19a>
 80114a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80114a2:	07d9      	lsls	r1, r3, #31
 80114a4:	d405      	bmi.n	80114b2 <_vfiprintf_r+0x1fe>
 80114a6:	89ab      	ldrh	r3, [r5, #12]
 80114a8:	059a      	lsls	r2, r3, #22
 80114aa:	d402      	bmi.n	80114b2 <_vfiprintf_r+0x1fe>
 80114ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80114ae:	f7fe f9ed 	bl	800f88c <__retarget_lock_release_recursive>
 80114b2:	89ab      	ldrh	r3, [r5, #12]
 80114b4:	065b      	lsls	r3, r3, #25
 80114b6:	f53f af1f 	bmi.w	80112f8 <_vfiprintf_r+0x44>
 80114ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80114bc:	e71e      	b.n	80112fc <_vfiprintf_r+0x48>
 80114be:	ab03      	add	r3, sp, #12
 80114c0:	9300      	str	r3, [sp, #0]
 80114c2:	462a      	mov	r2, r5
 80114c4:	4b05      	ldr	r3, [pc, #20]	@ (80114dc <_vfiprintf_r+0x228>)
 80114c6:	a904      	add	r1, sp, #16
 80114c8:	4630      	mov	r0, r6
 80114ca:	f7fd fef7 	bl	800f2bc <_printf_i>
 80114ce:	e7e4      	b.n	801149a <_vfiprintf_r+0x1e6>
 80114d0:	0801197a 	.word	0x0801197a
 80114d4:	08011984 	.word	0x08011984
 80114d8:	0800ed8d 	.word	0x0800ed8d
 80114dc:	08011291 	.word	0x08011291
 80114e0:	08011980 	.word	0x08011980

080114e4 <__swbuf_r>:
 80114e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114e6:	460e      	mov	r6, r1
 80114e8:	4614      	mov	r4, r2
 80114ea:	4605      	mov	r5, r0
 80114ec:	b118      	cbz	r0, 80114f6 <__swbuf_r+0x12>
 80114ee:	6a03      	ldr	r3, [r0, #32]
 80114f0:	b90b      	cbnz	r3, 80114f6 <__swbuf_r+0x12>
 80114f2:	f7fe f88d 	bl	800f610 <__sinit>
 80114f6:	69a3      	ldr	r3, [r4, #24]
 80114f8:	60a3      	str	r3, [r4, #8]
 80114fa:	89a3      	ldrh	r3, [r4, #12]
 80114fc:	071a      	lsls	r2, r3, #28
 80114fe:	d501      	bpl.n	8011504 <__swbuf_r+0x20>
 8011500:	6923      	ldr	r3, [r4, #16]
 8011502:	b943      	cbnz	r3, 8011516 <__swbuf_r+0x32>
 8011504:	4621      	mov	r1, r4
 8011506:	4628      	mov	r0, r5
 8011508:	f000 f82a 	bl	8011560 <__swsetup_r>
 801150c:	b118      	cbz	r0, 8011516 <__swbuf_r+0x32>
 801150e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8011512:	4638      	mov	r0, r7
 8011514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011516:	6823      	ldr	r3, [r4, #0]
 8011518:	6922      	ldr	r2, [r4, #16]
 801151a:	1a98      	subs	r0, r3, r2
 801151c:	6963      	ldr	r3, [r4, #20]
 801151e:	b2f6      	uxtb	r6, r6
 8011520:	4283      	cmp	r3, r0
 8011522:	4637      	mov	r7, r6
 8011524:	dc05      	bgt.n	8011532 <__swbuf_r+0x4e>
 8011526:	4621      	mov	r1, r4
 8011528:	4628      	mov	r0, r5
 801152a:	f7ff fda9 	bl	8011080 <_fflush_r>
 801152e:	2800      	cmp	r0, #0
 8011530:	d1ed      	bne.n	801150e <__swbuf_r+0x2a>
 8011532:	68a3      	ldr	r3, [r4, #8]
 8011534:	3b01      	subs	r3, #1
 8011536:	60a3      	str	r3, [r4, #8]
 8011538:	6823      	ldr	r3, [r4, #0]
 801153a:	1c5a      	adds	r2, r3, #1
 801153c:	6022      	str	r2, [r4, #0]
 801153e:	701e      	strb	r6, [r3, #0]
 8011540:	6962      	ldr	r2, [r4, #20]
 8011542:	1c43      	adds	r3, r0, #1
 8011544:	429a      	cmp	r2, r3
 8011546:	d004      	beq.n	8011552 <__swbuf_r+0x6e>
 8011548:	89a3      	ldrh	r3, [r4, #12]
 801154a:	07db      	lsls	r3, r3, #31
 801154c:	d5e1      	bpl.n	8011512 <__swbuf_r+0x2e>
 801154e:	2e0a      	cmp	r6, #10
 8011550:	d1df      	bne.n	8011512 <__swbuf_r+0x2e>
 8011552:	4621      	mov	r1, r4
 8011554:	4628      	mov	r0, r5
 8011556:	f7ff fd93 	bl	8011080 <_fflush_r>
 801155a:	2800      	cmp	r0, #0
 801155c:	d0d9      	beq.n	8011512 <__swbuf_r+0x2e>
 801155e:	e7d6      	b.n	801150e <__swbuf_r+0x2a>

08011560 <__swsetup_r>:
 8011560:	b538      	push	{r3, r4, r5, lr}
 8011562:	4b29      	ldr	r3, [pc, #164]	@ (8011608 <__swsetup_r+0xa8>)
 8011564:	4605      	mov	r5, r0
 8011566:	6818      	ldr	r0, [r3, #0]
 8011568:	460c      	mov	r4, r1
 801156a:	b118      	cbz	r0, 8011574 <__swsetup_r+0x14>
 801156c:	6a03      	ldr	r3, [r0, #32]
 801156e:	b90b      	cbnz	r3, 8011574 <__swsetup_r+0x14>
 8011570:	f7fe f84e 	bl	800f610 <__sinit>
 8011574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011578:	0719      	lsls	r1, r3, #28
 801157a:	d422      	bmi.n	80115c2 <__swsetup_r+0x62>
 801157c:	06da      	lsls	r2, r3, #27
 801157e:	d407      	bmi.n	8011590 <__swsetup_r+0x30>
 8011580:	2209      	movs	r2, #9
 8011582:	602a      	str	r2, [r5, #0]
 8011584:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011588:	81a3      	strh	r3, [r4, #12]
 801158a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801158e:	e033      	b.n	80115f8 <__swsetup_r+0x98>
 8011590:	0758      	lsls	r0, r3, #29
 8011592:	d512      	bpl.n	80115ba <__swsetup_r+0x5a>
 8011594:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011596:	b141      	cbz	r1, 80115aa <__swsetup_r+0x4a>
 8011598:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801159c:	4299      	cmp	r1, r3
 801159e:	d002      	beq.n	80115a6 <__swsetup_r+0x46>
 80115a0:	4628      	mov	r0, r5
 80115a2:	f7fe ffcd 	bl	8010540 <_free_r>
 80115a6:	2300      	movs	r3, #0
 80115a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80115aa:	89a3      	ldrh	r3, [r4, #12]
 80115ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80115b0:	81a3      	strh	r3, [r4, #12]
 80115b2:	2300      	movs	r3, #0
 80115b4:	6063      	str	r3, [r4, #4]
 80115b6:	6923      	ldr	r3, [r4, #16]
 80115b8:	6023      	str	r3, [r4, #0]
 80115ba:	89a3      	ldrh	r3, [r4, #12]
 80115bc:	f043 0308 	orr.w	r3, r3, #8
 80115c0:	81a3      	strh	r3, [r4, #12]
 80115c2:	6923      	ldr	r3, [r4, #16]
 80115c4:	b94b      	cbnz	r3, 80115da <__swsetup_r+0x7a>
 80115c6:	89a3      	ldrh	r3, [r4, #12]
 80115c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80115cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80115d0:	d003      	beq.n	80115da <__swsetup_r+0x7a>
 80115d2:	4621      	mov	r1, r4
 80115d4:	4628      	mov	r0, r5
 80115d6:	f000 f883 	bl	80116e0 <__smakebuf_r>
 80115da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115de:	f013 0201 	ands.w	r2, r3, #1
 80115e2:	d00a      	beq.n	80115fa <__swsetup_r+0x9a>
 80115e4:	2200      	movs	r2, #0
 80115e6:	60a2      	str	r2, [r4, #8]
 80115e8:	6962      	ldr	r2, [r4, #20]
 80115ea:	4252      	negs	r2, r2
 80115ec:	61a2      	str	r2, [r4, #24]
 80115ee:	6922      	ldr	r2, [r4, #16]
 80115f0:	b942      	cbnz	r2, 8011604 <__swsetup_r+0xa4>
 80115f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80115f6:	d1c5      	bne.n	8011584 <__swsetup_r+0x24>
 80115f8:	bd38      	pop	{r3, r4, r5, pc}
 80115fa:	0799      	lsls	r1, r3, #30
 80115fc:	bf58      	it	pl
 80115fe:	6962      	ldrpl	r2, [r4, #20]
 8011600:	60a2      	str	r2, [r4, #8]
 8011602:	e7f4      	b.n	80115ee <__swsetup_r+0x8e>
 8011604:	2000      	movs	r0, #0
 8011606:	e7f7      	b.n	80115f8 <__swsetup_r+0x98>
 8011608:	20000118 	.word	0x20000118

0801160c <_raise_r>:
 801160c:	291f      	cmp	r1, #31
 801160e:	b538      	push	{r3, r4, r5, lr}
 8011610:	4605      	mov	r5, r0
 8011612:	460c      	mov	r4, r1
 8011614:	d904      	bls.n	8011620 <_raise_r+0x14>
 8011616:	2316      	movs	r3, #22
 8011618:	6003      	str	r3, [r0, #0]
 801161a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801161e:	bd38      	pop	{r3, r4, r5, pc}
 8011620:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011622:	b112      	cbz	r2, 801162a <_raise_r+0x1e>
 8011624:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011628:	b94b      	cbnz	r3, 801163e <_raise_r+0x32>
 801162a:	4628      	mov	r0, r5
 801162c:	f000 f830 	bl	8011690 <_getpid_r>
 8011630:	4622      	mov	r2, r4
 8011632:	4601      	mov	r1, r0
 8011634:	4628      	mov	r0, r5
 8011636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801163a:	f000 b817 	b.w	801166c <_kill_r>
 801163e:	2b01      	cmp	r3, #1
 8011640:	d00a      	beq.n	8011658 <_raise_r+0x4c>
 8011642:	1c59      	adds	r1, r3, #1
 8011644:	d103      	bne.n	801164e <_raise_r+0x42>
 8011646:	2316      	movs	r3, #22
 8011648:	6003      	str	r3, [r0, #0]
 801164a:	2001      	movs	r0, #1
 801164c:	e7e7      	b.n	801161e <_raise_r+0x12>
 801164e:	2100      	movs	r1, #0
 8011650:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011654:	4620      	mov	r0, r4
 8011656:	4798      	blx	r3
 8011658:	2000      	movs	r0, #0
 801165a:	e7e0      	b.n	801161e <_raise_r+0x12>

0801165c <raise>:
 801165c:	4b02      	ldr	r3, [pc, #8]	@ (8011668 <raise+0xc>)
 801165e:	4601      	mov	r1, r0
 8011660:	6818      	ldr	r0, [r3, #0]
 8011662:	f7ff bfd3 	b.w	801160c <_raise_r>
 8011666:	bf00      	nop
 8011668:	20000118 	.word	0x20000118

0801166c <_kill_r>:
 801166c:	b538      	push	{r3, r4, r5, lr}
 801166e:	4d07      	ldr	r5, [pc, #28]	@ (801168c <_kill_r+0x20>)
 8011670:	2300      	movs	r3, #0
 8011672:	4604      	mov	r4, r0
 8011674:	4608      	mov	r0, r1
 8011676:	4611      	mov	r1, r2
 8011678:	602b      	str	r3, [r5, #0]
 801167a:	f7f1 f97b 	bl	8002974 <_kill>
 801167e:	1c43      	adds	r3, r0, #1
 8011680:	d102      	bne.n	8011688 <_kill_r+0x1c>
 8011682:	682b      	ldr	r3, [r5, #0]
 8011684:	b103      	cbz	r3, 8011688 <_kill_r+0x1c>
 8011686:	6023      	str	r3, [r4, #0]
 8011688:	bd38      	pop	{r3, r4, r5, pc}
 801168a:	bf00      	nop
 801168c:	20002688 	.word	0x20002688

08011690 <_getpid_r>:
 8011690:	f7f1 b968 	b.w	8002964 <_getpid>

08011694 <__swhatbuf_r>:
 8011694:	b570      	push	{r4, r5, r6, lr}
 8011696:	460c      	mov	r4, r1
 8011698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801169c:	2900      	cmp	r1, #0
 801169e:	b096      	sub	sp, #88	@ 0x58
 80116a0:	4615      	mov	r5, r2
 80116a2:	461e      	mov	r6, r3
 80116a4:	da0d      	bge.n	80116c2 <__swhatbuf_r+0x2e>
 80116a6:	89a3      	ldrh	r3, [r4, #12]
 80116a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80116ac:	f04f 0100 	mov.w	r1, #0
 80116b0:	bf14      	ite	ne
 80116b2:	2340      	movne	r3, #64	@ 0x40
 80116b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80116b8:	2000      	movs	r0, #0
 80116ba:	6031      	str	r1, [r6, #0]
 80116bc:	602b      	str	r3, [r5, #0]
 80116be:	b016      	add	sp, #88	@ 0x58
 80116c0:	bd70      	pop	{r4, r5, r6, pc}
 80116c2:	466a      	mov	r2, sp
 80116c4:	f000 f848 	bl	8011758 <_fstat_r>
 80116c8:	2800      	cmp	r0, #0
 80116ca:	dbec      	blt.n	80116a6 <__swhatbuf_r+0x12>
 80116cc:	9901      	ldr	r1, [sp, #4]
 80116ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80116d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80116d6:	4259      	negs	r1, r3
 80116d8:	4159      	adcs	r1, r3
 80116da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80116de:	e7eb      	b.n	80116b8 <__swhatbuf_r+0x24>

080116e0 <__smakebuf_r>:
 80116e0:	898b      	ldrh	r3, [r1, #12]
 80116e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80116e4:	079d      	lsls	r5, r3, #30
 80116e6:	4606      	mov	r6, r0
 80116e8:	460c      	mov	r4, r1
 80116ea:	d507      	bpl.n	80116fc <__smakebuf_r+0x1c>
 80116ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80116f0:	6023      	str	r3, [r4, #0]
 80116f2:	6123      	str	r3, [r4, #16]
 80116f4:	2301      	movs	r3, #1
 80116f6:	6163      	str	r3, [r4, #20]
 80116f8:	b003      	add	sp, #12
 80116fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116fc:	ab01      	add	r3, sp, #4
 80116fe:	466a      	mov	r2, sp
 8011700:	f7ff ffc8 	bl	8011694 <__swhatbuf_r>
 8011704:	9f00      	ldr	r7, [sp, #0]
 8011706:	4605      	mov	r5, r0
 8011708:	4639      	mov	r1, r7
 801170a:	4630      	mov	r0, r6
 801170c:	f7fd fa12 	bl	800eb34 <_malloc_r>
 8011710:	b948      	cbnz	r0, 8011726 <__smakebuf_r+0x46>
 8011712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011716:	059a      	lsls	r2, r3, #22
 8011718:	d4ee      	bmi.n	80116f8 <__smakebuf_r+0x18>
 801171a:	f023 0303 	bic.w	r3, r3, #3
 801171e:	f043 0302 	orr.w	r3, r3, #2
 8011722:	81a3      	strh	r3, [r4, #12]
 8011724:	e7e2      	b.n	80116ec <__smakebuf_r+0xc>
 8011726:	89a3      	ldrh	r3, [r4, #12]
 8011728:	6020      	str	r0, [r4, #0]
 801172a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801172e:	81a3      	strh	r3, [r4, #12]
 8011730:	9b01      	ldr	r3, [sp, #4]
 8011732:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011736:	b15b      	cbz	r3, 8011750 <__smakebuf_r+0x70>
 8011738:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801173c:	4630      	mov	r0, r6
 801173e:	f000 f81d 	bl	801177c <_isatty_r>
 8011742:	b128      	cbz	r0, 8011750 <__smakebuf_r+0x70>
 8011744:	89a3      	ldrh	r3, [r4, #12]
 8011746:	f023 0303 	bic.w	r3, r3, #3
 801174a:	f043 0301 	orr.w	r3, r3, #1
 801174e:	81a3      	strh	r3, [r4, #12]
 8011750:	89a3      	ldrh	r3, [r4, #12]
 8011752:	431d      	orrs	r5, r3
 8011754:	81a5      	strh	r5, [r4, #12]
 8011756:	e7cf      	b.n	80116f8 <__smakebuf_r+0x18>

08011758 <_fstat_r>:
 8011758:	b538      	push	{r3, r4, r5, lr}
 801175a:	4d07      	ldr	r5, [pc, #28]	@ (8011778 <_fstat_r+0x20>)
 801175c:	2300      	movs	r3, #0
 801175e:	4604      	mov	r4, r0
 8011760:	4608      	mov	r0, r1
 8011762:	4611      	mov	r1, r2
 8011764:	602b      	str	r3, [r5, #0]
 8011766:	f7f1 f965 	bl	8002a34 <_fstat>
 801176a:	1c43      	adds	r3, r0, #1
 801176c:	d102      	bne.n	8011774 <_fstat_r+0x1c>
 801176e:	682b      	ldr	r3, [r5, #0]
 8011770:	b103      	cbz	r3, 8011774 <_fstat_r+0x1c>
 8011772:	6023      	str	r3, [r4, #0]
 8011774:	bd38      	pop	{r3, r4, r5, pc}
 8011776:	bf00      	nop
 8011778:	20002688 	.word	0x20002688

0801177c <_isatty_r>:
 801177c:	b538      	push	{r3, r4, r5, lr}
 801177e:	4d06      	ldr	r5, [pc, #24]	@ (8011798 <_isatty_r+0x1c>)
 8011780:	2300      	movs	r3, #0
 8011782:	4604      	mov	r4, r0
 8011784:	4608      	mov	r0, r1
 8011786:	602b      	str	r3, [r5, #0]
 8011788:	f7f1 f964 	bl	8002a54 <_isatty>
 801178c:	1c43      	adds	r3, r0, #1
 801178e:	d102      	bne.n	8011796 <_isatty_r+0x1a>
 8011790:	682b      	ldr	r3, [r5, #0]
 8011792:	b103      	cbz	r3, 8011796 <_isatty_r+0x1a>
 8011794:	6023      	str	r3, [r4, #0]
 8011796:	bd38      	pop	{r3, r4, r5, pc}
 8011798:	20002688 	.word	0x20002688

0801179c <_init>:
 801179c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801179e:	bf00      	nop
 80117a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80117a2:	bc08      	pop	{r3}
 80117a4:	469e      	mov	lr, r3
 80117a6:	4770      	bx	lr

080117a8 <_fini>:
 80117a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117aa:	bf00      	nop
 80117ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80117ae:	bc08      	pop	{r3}
 80117b0:	469e      	mov	lr, r3
 80117b2:	4770      	bx	lr
