
AlphaFlight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6ac  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800e88c  0800e88c  0000f88c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e948  0800e948  00010168  2**0
                  CONTENTS
  4 .ARM          00000008  0800e948  0800e948  0000f948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e950  0800e950  00010168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e950  0800e950  0000f950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e954  0800e954  0000f954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  0800e958  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002370  20000168  0800eac0  00010168  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200024d8  0800eac0  000104d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010168  2**0
                  CONTENTS, READONLY
 12 .debug_info   000256af  00000000  00000000  00010198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005439  00000000  00000000  00035847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002078  00000000  00000000  0003ac80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000190d  00000000  00000000  0003ccf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a5be  00000000  00000000  0003e605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a53b  00000000  00000000  00068bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f02f6  00000000  00000000  000930fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001833f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000903c  00000000  00000000  00183438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0018c474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000168 	.word	0x20000168
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e874 	.word	0x0800e874

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000016c 	.word	0x2000016c
 800021c:	0800e874 	.word	0x0800e874

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <CRSF_Init>:

CRSF_Data_t crsf_data = {0};  // Struct instance to hold CRSF channel data
static UART_HandleTypeDef *crsf_huart;  // Pointer to UART handler
static uint8_t crsf_rx_buffer[CRSF_BUFFER_SIZE];  // DMA buffer

void CRSF_Init(UART_HandleTypeDef *huart) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
    crsf_huart = huart;
 80005b8:	4a06      	ldr	r2, [pc, #24]	@ (80005d4 <CRSF_Init+0x24>)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_DMA(crsf_huart, crsf_rx_buffer, CRSF_BUFFER_SIZE);  // Start UART DMA
 80005be:	4b05      	ldr	r3, [pc, #20]	@ (80005d4 <CRSF_Init+0x24>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2240      	movs	r2, #64	@ 0x40
 80005c4:	4904      	ldr	r1, [pc, #16]	@ (80005d8 <CRSF_Init+0x28>)
 80005c6:	4618      	mov	r0, r3
 80005c8:	f007 fbba 	bl	8007d40 <HAL_UART_Receive_DMA>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200001a4 	.word	0x200001a4
 80005d8:	200001a8 	.word	0x200001a8

080005dc <CRSF_GetRxCount>:

// Get received byte count in DMA buffer
static uint16_t CRSF_GetRxCount() {
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
    return CRSF_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(crsf_huart->hdmarx);
 80005e0:	4b06      	ldr	r3, [pc, #24]	@ (80005fc <CRSF_GetRxCount+0x20>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80005f0:	b29b      	uxth	r3, r3
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	200001a4 	.word	0x200001a4

08000600 <CRSF_DecodeChannels>:

// Decode CRSF channel data
static void CRSF_DecodeChannels(uint8_t *data) {
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
    crsf_data.channels[0]  = (data[0] | data[1] << 8) & 0x07FF;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b21a      	sxth	r2, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	3301      	adds	r3, #1
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	021b      	lsls	r3, r3, #8
 8000616:	b21b      	sxth	r3, r3
 8000618:	4313      	orrs	r3, r2
 800061a:	b21b      	sxth	r3, r3
 800061c:	b29b      	uxth	r3, r3
 800061e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000622:	b29a      	uxth	r2, r3
 8000624:	4b75      	ldr	r3, [pc, #468]	@ (80007fc <CRSF_DecodeChannels+0x1fc>)
 8000626:	801a      	strh	r2, [r3, #0]
    crsf_data.channels[1]  = (data[1] >> 3 | data[2] << 5) & 0x07FF;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	3301      	adds	r3, #1
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	08db      	lsrs	r3, r3, #3
 8000630:	b2db      	uxtb	r3, r3
 8000632:	b21a      	sxth	r2, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	3302      	adds	r3, #2
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	015b      	lsls	r3, r3, #5
 800063c:	b21b      	sxth	r3, r3
 800063e:	4313      	orrs	r3, r2
 8000640:	b21b      	sxth	r3, r3
 8000642:	b29b      	uxth	r3, r3
 8000644:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000648:	b29a      	uxth	r2, r3
 800064a:	4b6c      	ldr	r3, [pc, #432]	@ (80007fc <CRSF_DecodeChannels+0x1fc>)
 800064c:	805a      	strh	r2, [r3, #2]
    crsf_data.channels[2]  = (data[2] >> 6 | data[3] << 2 | data[4] << 10) & 0x07FF;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	3302      	adds	r3, #2
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	099b      	lsrs	r3, r3, #6
 8000656:	b2db      	uxtb	r3, r3
 8000658:	b21a      	sxth	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	3303      	adds	r3, #3
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	b21b      	sxth	r3, r3
 8000664:	4313      	orrs	r3, r2
 8000666:	b21a      	sxth	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	3304      	adds	r3, #4
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	029b      	lsls	r3, r3, #10
 8000670:	b21b      	sxth	r3, r3
 8000672:	4313      	orrs	r3, r2
 8000674:	b21b      	sxth	r3, r3
 8000676:	b29b      	uxth	r3, r3
 8000678:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800067c:	b29a      	uxth	r2, r3
 800067e:	4b5f      	ldr	r3, [pc, #380]	@ (80007fc <CRSF_DecodeChannels+0x1fc>)
 8000680:	809a      	strh	r2, [r3, #4]
    crsf_data.channels[3]  = (data[4] >> 1 | data[5] << 7) & 0x07FF;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	3304      	adds	r3, #4
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	085b      	lsrs	r3, r3, #1
 800068a:	b2db      	uxtb	r3, r3
 800068c:	b21a      	sxth	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	3305      	adds	r3, #5
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	01db      	lsls	r3, r3, #7
 8000696:	b21b      	sxth	r3, r3
 8000698:	4313      	orrs	r3, r2
 800069a:	b21b      	sxth	r3, r3
 800069c:	b29b      	uxth	r3, r3
 800069e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	4b55      	ldr	r3, [pc, #340]	@ (80007fc <CRSF_DecodeChannels+0x1fc>)
 80006a6:	80da      	strh	r2, [r3, #6]
    crsf_data.channels[4]  = (data[5] >> 4 | data[6] << 4) & 0x07FF;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	3305      	adds	r3, #5
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	091b      	lsrs	r3, r3, #4
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	b21a      	sxth	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3306      	adds	r3, #6
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	011b      	lsls	r3, r3, #4
 80006bc:	b21b      	sxth	r3, r3
 80006be:	4313      	orrs	r3, r2
 80006c0:	b21b      	sxth	r3, r3
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	4b4c      	ldr	r3, [pc, #304]	@ (80007fc <CRSF_DecodeChannels+0x1fc>)
 80006cc:	811a      	strh	r2, [r3, #8]
    crsf_data.channels[5]  = (data[6] >> 7 | data[7] << 1 | data[8] << 9) & 0x07FF;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	3306      	adds	r3, #6
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	09db      	lsrs	r3, r3, #7
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	b21a      	sxth	r2, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	3307      	adds	r3, #7
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	b21b      	sxth	r3, r3
 80006e4:	4313      	orrs	r3, r2
 80006e6:	b21a      	sxth	r2, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	3308      	adds	r3, #8
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	025b      	lsls	r3, r3, #9
 80006f0:	b21b      	sxth	r3, r3
 80006f2:	4313      	orrs	r3, r2
 80006f4:	b21b      	sxth	r3, r3
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	4b3f      	ldr	r3, [pc, #252]	@ (80007fc <CRSF_DecodeChannels+0x1fc>)
 8000700:	815a      	strh	r2, [r3, #10]
    crsf_data.channels[6]  = (data[8] >> 2 | data[9] << 6) & 0x07FF;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	3308      	adds	r3, #8
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	089b      	lsrs	r3, r3, #2
 800070a:	b2db      	uxtb	r3, r3
 800070c:	b21a      	sxth	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	3309      	adds	r3, #9
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	019b      	lsls	r3, r3, #6
 8000716:	b21b      	sxth	r3, r3
 8000718:	4313      	orrs	r3, r2
 800071a:	b21b      	sxth	r3, r3
 800071c:	b29b      	uxth	r3, r3
 800071e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000722:	b29a      	uxth	r2, r3
 8000724:	4b35      	ldr	r3, [pc, #212]	@ (80007fc <CRSF_DecodeChannels+0x1fc>)
 8000726:	819a      	strh	r2, [r3, #12]
    crsf_data.channels[7]  = (data[9] >> 5 | data[10] << 3) & 0x07FF;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3309      	adds	r3, #9
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	095b      	lsrs	r3, r3, #5
 8000730:	b2db      	uxtb	r3, r3
 8000732:	b21a      	sxth	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	330a      	adds	r3, #10
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	00db      	lsls	r3, r3, #3
 800073c:	b21b      	sxth	r3, r3
 800073e:	4313      	orrs	r3, r2
 8000740:	b21b      	sxth	r3, r3
 8000742:	b29b      	uxth	r3, r3
 8000744:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000748:	b29a      	uxth	r2, r3
 800074a:	4b2c      	ldr	r3, [pc, #176]	@ (80007fc <CRSF_DecodeChannels+0x1fc>)
 800074c:	81da      	strh	r2, [r3, #14]
    crsf_data.channels[8]  = (data[11] | data[12] << 8) & 0x07FF;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	330b      	adds	r3, #11
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	b21a      	sxth	r2, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	330c      	adds	r3, #12
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	021b      	lsls	r3, r3, #8
 800075e:	b21b      	sxth	r3, r3
 8000760:	4313      	orrs	r3, r2
 8000762:	b21b      	sxth	r3, r3
 8000764:	b29b      	uxth	r3, r3
 8000766:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800076a:	b29a      	uxth	r2, r3
 800076c:	4b23      	ldr	r3, [pc, #140]	@ (80007fc <CRSF_DecodeChannels+0x1fc>)
 800076e:	821a      	strh	r2, [r3, #16]
    crsf_data.channels[9]  = (data[12] >> 3 | data[13] << 5) & 0x07FF;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	330c      	adds	r3, #12
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	08db      	lsrs	r3, r3, #3
 8000778:	b2db      	uxtb	r3, r3
 800077a:	b21a      	sxth	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	330d      	adds	r3, #13
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	015b      	lsls	r3, r3, #5
 8000784:	b21b      	sxth	r3, r3
 8000786:	4313      	orrs	r3, r2
 8000788:	b21b      	sxth	r3, r3
 800078a:	b29b      	uxth	r3, r3
 800078c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000790:	b29a      	uxth	r2, r3
 8000792:	4b1a      	ldr	r3, [pc, #104]	@ (80007fc <CRSF_DecodeChannels+0x1fc>)
 8000794:	825a      	strh	r2, [r3, #18]
    crsf_data.channels[10] = (data[13] >> 6 | data[14] << 2 | data[15] << 10) & 0x07FF;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	330d      	adds	r3, #13
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	099b      	lsrs	r3, r3, #6
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	b21a      	sxth	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	330e      	adds	r3, #14
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	b21b      	sxth	r3, r3
 80007ac:	4313      	orrs	r3, r2
 80007ae:	b21a      	sxth	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	330f      	adds	r3, #15
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	029b      	lsls	r3, r3, #10
 80007b8:	b21b      	sxth	r3, r3
 80007ba:	4313      	orrs	r3, r2
 80007bc:	b21b      	sxth	r3, r3
 80007be:	b29b      	uxth	r3, r3
 80007c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	4b0d      	ldr	r3, [pc, #52]	@ (80007fc <CRSF_DecodeChannels+0x1fc>)
 80007c8:	829a      	strh	r2, [r3, #20]
    crsf_data.channels[11] = (data[15] >> 1 | data[16] << 7) & 0x07FF;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	330f      	adds	r3, #15
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	b21a      	sxth	r2, r3
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	3310      	adds	r3, #16
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	01db      	lsls	r3, r3, #7
 80007de:	b21b      	sxth	r3, r3
 80007e0:	4313      	orrs	r3, r2
 80007e2:	b21b      	sxth	r3, r3
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80007ea:	b29a      	uxth	r2, r3
 80007ec:	4b03      	ldr	r3, [pc, #12]	@ (80007fc <CRSF_DecodeChannels+0x1fc>)
 80007ee:	82da      	strh	r2, [r3, #22]
}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	20000184 	.word	0x20000184

08000800 <CRSF_Process>:

// Process CRSF data in main loop
void CRSF_Process() {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
    uint16_t bytes_received = CRSF_GetRxCount();
 8000806:	f7ff fee9 	bl	80005dc <CRSF_GetRxCount>
 800080a:	4603      	mov	r3, r0
 800080c:	80bb      	strh	r3, [r7, #4]
    if (bytes_received < 3) return;  // Not enough data for a CRSF packet
 800080e:	88bb      	ldrh	r3, [r7, #4]
 8000810:	2b02      	cmp	r3, #2
 8000812:	d92b      	bls.n	800086c <CRSF_Process+0x6c>

    for (uint16_t i = 0; i < bytes_received - 2; i++) {
 8000814:	2300      	movs	r3, #0
 8000816:	80fb      	strh	r3, [r7, #6]
 8000818:	e022      	b.n	8000860 <CRSF_Process+0x60>
        if (crsf_rx_buffer[i] == 0xEA) {  // Start of an RC packet
 800081a:	88fb      	ldrh	r3, [r7, #6]
 800081c:	4a15      	ldr	r2, [pc, #84]	@ (8000874 <CRSF_Process+0x74>)
 800081e:	5cd3      	ldrb	r3, [r2, r3]
 8000820:	2bea      	cmp	r3, #234	@ 0xea
 8000822:	d11a      	bne.n	800085a <CRSF_Process+0x5a>
            uint8_t length = crsf_rx_buffer[i + 1];
 8000824:	88fb      	ldrh	r3, [r7, #6]
 8000826:	3301      	adds	r3, #1
 8000828:	4a12      	ldr	r2, [pc, #72]	@ (8000874 <CRSF_Process+0x74>)
 800082a:	5cd3      	ldrb	r3, [r2, r3]
 800082c:	70fb      	strb	r3, [r7, #3]
            if (length <= (bytes_received - i - 2)) {  // Check if full packet is available
 800082e:	88ba      	ldrh	r2, [r7, #4]
 8000830:	88fb      	ldrh	r3, [r7, #6]
 8000832:	1ad3      	subs	r3, r2, r3
 8000834:	1e5a      	subs	r2, r3, #1
 8000836:	78fb      	ldrb	r3, [r7, #3]
 8000838:	429a      	cmp	r2, r3
 800083a:	dd0e      	ble.n	800085a <CRSF_Process+0x5a>
                uint8_t type = crsf_rx_buffer[i + 2];
 800083c:	88fb      	ldrh	r3, [r7, #6]
 800083e:	3302      	adds	r3, #2
 8000840:	4a0c      	ldr	r2, [pc, #48]	@ (8000874 <CRSF_Process+0x74>)
 8000842:	5cd3      	ldrb	r3, [r2, r3]
 8000844:	70bb      	strb	r3, [r7, #2]
                if (type == 0x16) {  // RC Channel Data
 8000846:	78bb      	ldrb	r3, [r7, #2]
 8000848:	2b16      	cmp	r3, #22
 800084a:	d106      	bne.n	800085a <CRSF_Process+0x5a>
                    CRSF_DecodeChannels(&crsf_rx_buffer[i + 3]);  // Extract channel values
 800084c:	88fb      	ldrh	r3, [r7, #6]
 800084e:	3303      	adds	r3, #3
 8000850:	4a08      	ldr	r2, [pc, #32]	@ (8000874 <CRSF_Process+0x74>)
 8000852:	4413      	add	r3, r2
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff fed3 	bl	8000600 <CRSF_DecodeChannels>
    for (uint16_t i = 0; i < bytes_received - 2; i++) {
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	3301      	adds	r3, #1
 800085e:	80fb      	strh	r3, [r7, #6]
 8000860:	88fa      	ldrh	r2, [r7, #6]
 8000862:	88bb      	ldrh	r3, [r7, #4]
 8000864:	3b02      	subs	r3, #2
 8000866:	429a      	cmp	r2, r3
 8000868:	dbd7      	blt.n	800081a <CRSF_Process+0x1a>
 800086a:	e000      	b.n	800086e <CRSF_Process+0x6e>
    if (bytes_received < 3) return;  // Not enough data for a CRSF packet
 800086c:	bf00      	nop
                }
            }
        }
    }
}
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200001a8 	.word	0x200001a8

08000878 <CRSF_GetChannel>:

// Get channel value (scaled to PWM range)
uint16_t CRSF_GetChannel(uint8_t channel) {
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
    if (channel >= NUM_CHANNELS) return 1500;  // Return midpoint if out of range
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	2b0f      	cmp	r3, #15
 8000886:	d902      	bls.n	800088e <CRSF_GetChannel+0x16>
 8000888:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800088c:	e013      	b.n	80008b6 <CRSF_GetChannel+0x3e>
    return 988 + ((crsf_data.channels[channel] * 988) / 2047);  // Scale to 1000-2000µs
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	4a0c      	ldr	r2, [pc, #48]	@ (80008c4 <CRSF_GetChannel+0x4c>)
 8000892:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000896:	461a      	mov	r2, r3
 8000898:	f44f 7377 	mov.w	r3, #988	@ 0x3dc
 800089c:	fb02 f303 	mul.w	r3, r2, r3
 80008a0:	4a09      	ldr	r2, [pc, #36]	@ (80008c8 <CRSF_GetChannel+0x50>)
 80008a2:	fb82 1203 	smull	r1, r2, r2, r3
 80008a6:	441a      	add	r2, r3
 80008a8:	1292      	asrs	r2, r2, #10
 80008aa:	17db      	asrs	r3, r3, #31
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	f503 7377 	add.w	r3, r3, #988	@ 0x3dc
 80008b4:	b29b      	uxth	r3, r3
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	20000184 	.word	0x20000184
 80008c8:	80100201 	.word	0x80100201

080008cc <HAL_UART_RxCpltCallback>:

// Optional: Restart DMA when transmission is complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
    if (huart == crsf_huart) {
 80008d4:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <HAL_UART_RxCpltCallback+0x2c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	429a      	cmp	r2, r3
 80008dc:	d108      	bne.n	80008f0 <HAL_UART_RxCpltCallback+0x24>
        CRSF_Process();
 80008de:	f7ff ff8f 	bl	8000800 <CRSF_Process>
        HAL_UART_Receive_DMA(crsf_huart, crsf_rx_buffer, CRSF_BUFFER_SIZE);  // Restart DMA
 80008e2:	4b05      	ldr	r3, [pc, #20]	@ (80008f8 <HAL_UART_RxCpltCallback+0x2c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2240      	movs	r2, #64	@ 0x40
 80008e8:	4904      	ldr	r1, [pc, #16]	@ (80008fc <HAL_UART_RxCpltCallback+0x30>)
 80008ea:	4618      	mov	r0, r3
 80008ec:	f007 fa28 	bl	8007d40 <HAL_UART_Receive_DMA>
    }
}
 80008f0:	bf00      	nop
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200001a4 	.word	0x200001a4
 80008fc:	200001a8 	.word	0x200001a8

08000900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000906:	f000 fcbd 	bl	8001284 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800090a:	f001 fb84 	bl	8002016 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090e:	f000 f839 	bl	8000984 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000912:	f000 fbe5 	bl	80010e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000916:	f000 fb89 	bl	800102c <MX_DMA_Init>
  MX_USART1_UART_Init();
 800091a:	f000 fac7 	bl	8000eac <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800091e:	f000 faf5 	bl	8000f0c <MX_USART2_UART_Init>
  MX_SDMMC1_SD_Init();
 8000922:	f000 f92f 	bl	8000b84 <MX_SDMMC1_SD_Init>
  MX_USART6_UART_Init();
 8000926:	f000 fb51 	bl	8000fcc <MX_USART6_UART_Init>
  MX_SPI1_Init();
 800092a:	f000 f94d 	bl	8000bc8 <MX_SPI1_Init>
  MX_I2C1_Init();
 800092e:	f000 f8e9 	bl	8000b04 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000932:	f000 f987 	bl	8000c44 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000936:	f000 f9c3 	bl	8000cc0 <MX_TIM1_Init>
  MX_UART4_Init();
 800093a:	f000 fa87 	bl	8000e4c <MX_UART4_Init>
  MX_USART3_UART_Init();
 800093e:	f000 fb15 	bl	8000f6c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000942:	f000 f88d 	bl	8000a60 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000946:	f000 fa4b 	bl	8000de0 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 800094a:	f00c faef 	bl	800cf2c <MX_USB_DEVICE_Init>
  MX_FATFS_Init();
 800094e:	f00a f937 	bl	800abc0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  CRSF_Init(&huart1);
 8000952:	480a      	ldr	r0, [pc, #40]	@ (800097c <main+0x7c>)
 8000954:	f7ff fe2c 	bl	80005b0 <CRSF_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  CRSF_Process();
 8000958:	f7ff ff52 	bl	8000800 <CRSF_Process>
	  uint16_t ch0 = CRSF_GetChannel(0);
 800095c:	2000      	movs	r0, #0
 800095e:	f7ff ff8b 	bl	8000878 <CRSF_GetChannel>
 8000962:	4603      	mov	r3, r0
 8000964:	80fb      	strh	r3, [r7, #6]
	  printf("Ch 0: %d\n", ch0);
 8000966:	88fb      	ldrh	r3, [r7, #6]
 8000968:	4619      	mov	r1, r3
 800096a:	4805      	ldr	r0, [pc, #20]	@ (8000980 <main+0x80>)
 800096c:	f00d f9c2 	bl	800dcf4 <iprintf>
	  HAL_Delay(100);
 8000970:	2064      	movs	r0, #100	@ 0x64
 8000972:	f001 fbad 	bl	80020d0 <HAL_Delay>
  {
 8000976:	bf00      	nop
 8000978:	e7ee      	b.n	8000958 <main+0x58>
 800097a:	bf00      	nop
 800097c:	20000550 	.word	0x20000550
 8000980:	0800e88c 	.word	0x0800e88c

08000984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b094      	sub	sp, #80	@ 0x50
 8000988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098a:	f107 0320 	add.w	r3, r7, #32
 800098e:	2230      	movs	r2, #48	@ 0x30
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f00d fa03 	bl	800dd9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a8:	4b2b      	ldr	r3, [pc, #172]	@ (8000a58 <SystemClock_Config+0xd4>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ac:	4a2a      	ldr	r2, [pc, #168]	@ (8000a58 <SystemClock_Config+0xd4>)
 80009ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b4:	4b28      	ldr	r3, [pc, #160]	@ (8000a58 <SystemClock_Config+0xd4>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c0:	4b26      	ldr	r3, [pc, #152]	@ (8000a5c <SystemClock_Config+0xd8>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a25      	ldr	r2, [pc, #148]	@ (8000a5c <SystemClock_Config+0xd8>)
 80009c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009ca:	6013      	str	r3, [r2, #0]
 80009cc:	4b23      	ldr	r3, [pc, #140]	@ (8000a5c <SystemClock_Config+0xd8>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d8:	2301      	movs	r3, #1
 80009da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009dc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e2:	2302      	movs	r3, #2
 80009e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009ec:	2304      	movs	r3, #4
 80009ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80009f0:	23d8      	movs	r3, #216	@ 0xd8
 80009f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009f4:	2302      	movs	r3, #2
 80009f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80009f8:	2309      	movs	r3, #9
 80009fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fc:	f107 0320 	add.w	r3, r7, #32
 8000a00:	4618      	mov	r0, r3
 8000a02:	f004 f8f9 	bl	8004bf8 <HAL_RCC_OscConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a0c:	f000 fc66 	bl	80012dc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a10:	f004 f8a2 	bl	8004b58 <HAL_PWREx_EnableOverDrive>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a1a:	f000 fc5f 	bl	80012dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1e:	230f      	movs	r3, #15
 8000a20:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a22:	2302      	movs	r3, #2
 8000a24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a2a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a34:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a36:	f107 030c 	add.w	r3, r7, #12
 8000a3a:	2107      	movs	r1, #7
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f004 fb7f 	bl	8005140 <HAL_RCC_ClockConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000a48:	f000 fc48 	bl	80012dc <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000a4c:	f004 fc64 	bl	8005318 <HAL_RCC_EnableCSS>
}
 8000a50:	bf00      	nop
 8000a52:	3750      	adds	r7, #80	@ 0x50
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40007000 	.word	0x40007000

08000a60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a66:	463b      	mov	r3, r7
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a72:	4b21      	ldr	r3, [pc, #132]	@ (8000af8 <MX_ADC1_Init+0x98>)
 8000a74:	4a21      	ldr	r2, [pc, #132]	@ (8000afc <MX_ADC1_Init+0x9c>)
 8000a76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a78:	4b1f      	ldr	r3, [pc, #124]	@ (8000af8 <MX_ADC1_Init+0x98>)
 8000a7a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a80:	4b1d      	ldr	r3, [pc, #116]	@ (8000af8 <MX_ADC1_Init+0x98>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a86:	4b1c      	ldr	r3, [pc, #112]	@ (8000af8 <MX_ADC1_Init+0x98>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000af8 <MX_ADC1_Init+0x98>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a92:	4b19      	ldr	r3, [pc, #100]	@ (8000af8 <MX_ADC1_Init+0x98>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	@ (8000af8 <MX_ADC1_Init+0x98>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <MX_ADC1_Init+0x98>)
 8000aa2:	4a17      	ldr	r2, [pc, #92]	@ (8000b00 <MX_ADC1_Init+0xa0>)
 8000aa4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aa6:	4b14      	ldr	r3, [pc, #80]	@ (8000af8 <MX_ADC1_Init+0x98>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000aac:	4b12      	ldr	r3, [pc, #72]	@ (8000af8 <MX_ADC1_Init+0x98>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <MX_ADC1_Init+0x98>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aba:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <MX_ADC1_Init+0x98>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ac0:	480d      	ldr	r0, [pc, #52]	@ (8000af8 <MX_ADC1_Init+0x98>)
 8000ac2:	f001 fb29 	bl	8002118 <HAL_ADC_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000acc:	f000 fc06 	bl	80012dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000ad0:	230a      	movs	r3, #10
 8000ad2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000adc:	463b      	mov	r3, r7
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4805      	ldr	r0, [pc, #20]	@ (8000af8 <MX_ADC1_Init+0x98>)
 8000ae2:	f001 fb5d 	bl	80021a0 <HAL_ADC_ConfigChannel>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000aec:	f000 fbf6 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200001e8 	.word	0x200001e8
 8000afc:	40012000 	.word	0x40012000
 8000b00:	0f000001 	.word	0x0f000001

08000b04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	@ (8000b78 <MX_I2C1_Init+0x74>)
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b7c <MX_I2C1_Init+0x78>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b78 <MX_I2C1_Init+0x74>)
 8000b10:	4a1b      	ldr	r2, [pc, #108]	@ (8000b80 <MX_I2C1_Init+0x7c>)
 8000b12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b14:	4b18      	ldr	r3, [pc, #96]	@ (8000b78 <MX_I2C1_Init+0x74>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b1a:	4b17      	ldr	r3, [pc, #92]	@ (8000b78 <MX_I2C1_Init+0x74>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b20:	4b15      	ldr	r3, [pc, #84]	@ (8000b78 <MX_I2C1_Init+0x74>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b26:	4b14      	ldr	r3, [pc, #80]	@ (8000b78 <MX_I2C1_Init+0x74>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	@ (8000b78 <MX_I2C1_Init+0x74>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b32:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <MX_I2C1_Init+0x74>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	@ (8000b78 <MX_I2C1_Init+0x74>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b3e:	480e      	ldr	r0, [pc, #56]	@ (8000b78 <MX_I2C1_Init+0x74>)
 8000b40:	f002 fc4e 	bl	80033e0 <HAL_I2C_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b4a:	f000 fbc7 	bl	80012dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4809      	ldr	r0, [pc, #36]	@ (8000b78 <MX_I2C1_Init+0x74>)
 8000b52:	f002 fce1 	bl	8003518 <HAL_I2CEx_ConfigAnalogFilter>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b5c:	f000 fbbe 	bl	80012dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b60:	2100      	movs	r1, #0
 8000b62:	4805      	ldr	r0, [pc, #20]	@ (8000b78 <MX_I2C1_Init+0x74>)
 8000b64:	f002 fd23 	bl	80035ae <HAL_I2CEx_ConfigDigitalFilter>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b6e:	f000 fbb5 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000230 	.word	0x20000230
 8000b7c:	40005400 	.word	0x40005400
 8000b80:	20404768 	.word	0x20404768

08000b84 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000b88:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc0 <MX_SDMMC1_SD_Init+0x3c>)
 8000b8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000bc4 <MX_SDMMC1_SD_Init+0x40>)
 8000b8c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <MX_SDMMC1_SD_Init+0x3c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000b94:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc0 <MX_SDMMC1_SD_Init+0x3c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000b9a:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <MX_SDMMC1_SD_Init+0x3c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000ba0:	4b07      	ldr	r3, [pc, #28]	@ (8000bc0 <MX_SDMMC1_SD_Init+0x3c>)
 8000ba2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ba6:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ba8:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <MX_SDMMC1_SD_Init+0x3c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000bae:	4b04      	ldr	r3, [pc, #16]	@ (8000bc0 <MX_SDMMC1_SD_Init+0x3c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	20000284 	.word	0x20000284
 8000bc4:	40012c00 	.word	0x40012c00

08000bc8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c3c <MX_SPI1_Init+0x74>)
 8000bce:	4a1c      	ldr	r2, [pc, #112]	@ (8000c40 <MX_SPI1_Init+0x78>)
 8000bd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c3c <MX_SPI1_Init+0x74>)
 8000bd4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bda:	4b18      	ldr	r3, [pc, #96]	@ (8000c3c <MX_SPI1_Init+0x74>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000be0:	4b16      	ldr	r3, [pc, #88]	@ (8000c3c <MX_SPI1_Init+0x74>)
 8000be2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000be6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000be8:	4b14      	ldr	r3, [pc, #80]	@ (8000c3c <MX_SPI1_Init+0x74>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bee:	4b13      	ldr	r3, [pc, #76]	@ (8000c3c <MX_SPI1_Init+0x74>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	@ (8000c3c <MX_SPI1_Init+0x74>)
 8000bf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bfa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c3c <MX_SPI1_Init+0x74>)
 8000bfe:	2228      	movs	r2, #40	@ 0x28
 8000c00:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	@ (8000c3c <MX_SPI1_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <MX_SPI1_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c3c <MX_SPI1_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c14:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <MX_SPI1_Init+0x74>)
 8000c16:	2207      	movs	r2, #7
 8000c18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <MX_SPI1_Init+0x74>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <MX_SPI1_Init+0x74>)
 8000c22:	2208      	movs	r2, #8
 8000c24:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c26:	4805      	ldr	r0, [pc, #20]	@ (8000c3c <MX_SPI1_Init+0x74>)
 8000c28:	f006 f9b9 	bl	8006f9e <HAL_SPI_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c32:	f000 fb53 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000308 	.word	0x20000308
 8000c40:	40013000 	.word	0x40013000

08000c44 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c48:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb8 <MX_SPI2_Init+0x74>)
 8000c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cbc <MX_SPI2_Init+0x78>)
 8000c4c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb8 <MX_SPI2_Init+0x74>)
 8000c50:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c54:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c56:	4b18      	ldr	r3, [pc, #96]	@ (8000cb8 <MX_SPI2_Init+0x74>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c5c:	4b16      	ldr	r3, [pc, #88]	@ (8000cb8 <MX_SPI2_Init+0x74>)
 8000c5e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000c62:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c64:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <MX_SPI2_Init+0x74>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c6a:	4b13      	ldr	r3, [pc, #76]	@ (8000cb8 <MX_SPI2_Init+0x74>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c70:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <MX_SPI2_Init+0x74>)
 8000c72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c76:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <MX_SPI2_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <MX_SPI2_Init+0x74>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <MX_SPI2_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb8 <MX_SPI2_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000c90:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <MX_SPI2_Init+0x74>)
 8000c92:	2207      	movs	r2, #7
 8000c94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c96:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <MX_SPI2_Init+0x74>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <MX_SPI2_Init+0x74>)
 8000c9e:	2208      	movs	r2, #8
 8000ca0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ca2:	4805      	ldr	r0, [pc, #20]	@ (8000cb8 <MX_SPI2_Init+0x74>)
 8000ca4:	f006 f97b 	bl	8006f9e <HAL_SPI_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000cae:	f000 fb15 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	2000036c 	.word	0x2000036c
 8000cbc:	40003800 	.word	0x40003800

08000cc0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b096      	sub	sp, #88	@ 0x58
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cd2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	611a      	str	r2, [r3, #16]
 8000ce2:	615a      	str	r2, [r3, #20]
 8000ce4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	222c      	movs	r2, #44	@ 0x2c
 8000cea:	2100      	movs	r1, #0
 8000cec:	4618      	mov	r0, r3
 8000cee:	f00d f856 	bl	800dd9e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cf2:	4b39      	ldr	r3, [pc, #228]	@ (8000dd8 <MX_TIM1_Init+0x118>)
 8000cf4:	4a39      	ldr	r2, [pc, #228]	@ (8000ddc <MX_TIM1_Init+0x11c>)
 8000cf6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cf8:	4b37      	ldr	r3, [pc, #220]	@ (8000dd8 <MX_TIM1_Init+0x118>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfe:	4b36      	ldr	r3, [pc, #216]	@ (8000dd8 <MX_TIM1_Init+0x118>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d04:	4b34      	ldr	r3, [pc, #208]	@ (8000dd8 <MX_TIM1_Init+0x118>)
 8000d06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0c:	4b32      	ldr	r3, [pc, #200]	@ (8000dd8 <MX_TIM1_Init+0x118>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d12:	4b31      	ldr	r3, [pc, #196]	@ (8000dd8 <MX_TIM1_Init+0x118>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d18:	4b2f      	ldr	r3, [pc, #188]	@ (8000dd8 <MX_TIM1_Init+0x118>)
 8000d1a:	2280      	movs	r2, #128	@ 0x80
 8000d1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d1e:	482e      	ldr	r0, [pc, #184]	@ (8000dd8 <MX_TIM1_Init+0x118>)
 8000d20:	f006 fa3f 	bl	80071a2 <HAL_TIM_PWM_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000d2a:	f000 fad7 	bl	80012dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d32:	2300      	movs	r3, #0
 8000d34:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d3a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4825      	ldr	r0, [pc, #148]	@ (8000dd8 <MX_TIM1_Init+0x118>)
 8000d42:	f006 fea3 	bl	8007a8c <HAL_TIMEx_MasterConfigSynchronization>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d4c:	f000 fac6 	bl	80012dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d50:	2360      	movs	r3, #96	@ 0x60
 8000d52:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d64:	2300      	movs	r3, #0
 8000d66:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d6c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d70:	2200      	movs	r2, #0
 8000d72:	4619      	mov	r1, r3
 8000d74:	4818      	ldr	r0, [pc, #96]	@ (8000dd8 <MX_TIM1_Init+0x118>)
 8000d76:	f006 fa6b 	bl	8007250 <HAL_TIM_PWM_ConfigChannel>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000d80:	f000 faac 	bl	80012dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d9c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000da6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000daa:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	4619      	mov	r1, r3
 8000db8:	4807      	ldr	r0, [pc, #28]	@ (8000dd8 <MX_TIM1_Init+0x118>)
 8000dba:	f006 fef5 	bl	8007ba8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000dc4:	f000 fa8a 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000dc8:	4803      	ldr	r0, [pc, #12]	@ (8000dd8 <MX_TIM1_Init+0x118>)
 8000dca:	f000 fcdd 	bl	8001788 <HAL_TIM_MspPostInit>

}
 8000dce:	bf00      	nop
 8000dd0:	3758      	adds	r7, #88	@ 0x58
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200003d0 	.word	0x200003d0
 8000ddc:	40010000 	.word	0x40010000

08000de0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000df0:	4b14      	ldr	r3, [pc, #80]	@ (8000e44 <MX_TIM6_Init+0x64>)
 8000df2:	4a15      	ldr	r2, [pc, #84]	@ (8000e48 <MX_TIM6_Init+0x68>)
 8000df4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000df6:	4b13      	ldr	r3, [pc, #76]	@ (8000e44 <MX_TIM6_Init+0x64>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <MX_TIM6_Init+0x64>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000e02:	4b10      	ldr	r3, [pc, #64]	@ (8000e44 <MX_TIM6_Init+0x64>)
 8000e04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e08:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e44 <MX_TIM6_Init+0x64>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e10:	480c      	ldr	r0, [pc, #48]	@ (8000e44 <MX_TIM6_Init+0x64>)
 8000e12:	f006 f96f 	bl	80070f4 <HAL_TIM_Base_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000e1c:	f000 fa5e 	bl	80012dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e20:	2300      	movs	r3, #0
 8000e22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4805      	ldr	r0, [pc, #20]	@ (8000e44 <MX_TIM6_Init+0x64>)
 8000e2e:	f006 fe2d 	bl	8007a8c <HAL_TIMEx_MasterConfigSynchronization>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000e38:	f000 fa50 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e3c:	bf00      	nop
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	2000041c 	.word	0x2000041c
 8000e48:	40001000 	.word	0x40001000

08000e4c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000e50:	4b14      	ldr	r3, [pc, #80]	@ (8000ea4 <MX_UART4_Init+0x58>)
 8000e52:	4a15      	ldr	r2, [pc, #84]	@ (8000ea8 <MX_UART4_Init+0x5c>)
 8000e54:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000e56:	4b13      	ldr	r3, [pc, #76]	@ (8000ea4 <MX_UART4_Init+0x58>)
 8000e58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e5c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ea4 <MX_UART4_Init+0x58>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea4 <MX_UART4_Init+0x58>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea4 <MX_UART4_Init+0x58>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <MX_UART4_Init+0x58>)
 8000e72:	220c      	movs	r2, #12
 8000e74:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea4 <MX_UART4_Init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ea4 <MX_UART4_Init+0x58>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e82:	4b08      	ldr	r3, [pc, #32]	@ (8000ea4 <MX_UART4_Init+0x58>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e88:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <MX_UART4_Init+0x58>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000e8e:	4805      	ldr	r0, [pc, #20]	@ (8000ea4 <MX_UART4_Init+0x58>)
 8000e90:	f006 ff08 	bl	8007ca4 <HAL_UART_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000e9a:	f000 fa1f 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200004c8 	.word	0x200004c8
 8000ea8:	40004c00 	.word	0x40004c00

08000eac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	@ (8000f04 <MX_USART1_UART_Init+0x58>)
 8000eb2:	4a15      	ldr	r2, [pc, #84]	@ (8000f08 <MX_USART1_UART_Init+0x5c>)
 8000eb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000eb6:	4b13      	ldr	r3, [pc, #76]	@ (8000f04 <MX_USART1_UART_Init+0x58>)
 8000eb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ebc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	@ (8000f04 <MX_USART1_UART_Init+0x58>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <MX_USART1_UART_Init+0x58>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	@ (8000f04 <MX_USART1_UART_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <MX_USART1_UART_Init+0x58>)
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f04 <MX_USART1_UART_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000edc:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <MX_USART1_UART_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <MX_USART1_UART_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <MX_USART1_UART_Init+0x58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eee:	4805      	ldr	r0, [pc, #20]	@ (8000f04 <MX_USART1_UART_Init+0x58>)
 8000ef0:	f006 fed8 	bl	8007ca4 <HAL_UART_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000efa:	f000 f9ef 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000550 	.word	0x20000550
 8000f08:	40011000 	.word	0x40011000

08000f0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f10:	4b14      	ldr	r3, [pc, #80]	@ (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f12:	4a15      	ldr	r2, [pc, #84]	@ (8000f68 <MX_USART2_UART_Init+0x5c>)
 8000f14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f16:	4b13      	ldr	r3, [pc, #76]	@ (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	@ (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	@ (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f32:	220c      	movs	r2, #12
 8000f34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f36:	4b0b      	ldr	r3, [pc, #44]	@ (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	@ (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f42:	4b08      	ldr	r3, [pc, #32]	@ (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f48:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f4e:	4805      	ldr	r0, [pc, #20]	@ (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f50:	f006 fea8 	bl	8007ca4 <HAL_UART_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f5a:	f000 f9bf 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200005d8 	.word	0x200005d8
 8000f68:	40004400 	.word	0x40004400

08000f6c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f70:	4b14      	ldr	r3, [pc, #80]	@ (8000fc4 <MX_USART3_UART_Init+0x58>)
 8000f72:	4a15      	ldr	r2, [pc, #84]	@ (8000fc8 <MX_USART3_UART_Init+0x5c>)
 8000f74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f76:	4b13      	ldr	r3, [pc, #76]	@ (8000fc4 <MX_USART3_UART_Init+0x58>)
 8000f78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <MX_USART3_UART_Init+0x58>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <MX_USART3_UART_Init+0x58>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <MX_USART3_UART_Init+0x58>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <MX_USART3_UART_Init+0x58>)
 8000f92:	220c      	movs	r2, #12
 8000f94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f96:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc4 <MX_USART3_UART_Init+0x58>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f9c:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <MX_USART3_UART_Init+0x58>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fa2:	4b08      	ldr	r3, [pc, #32]	@ (8000fc4 <MX_USART3_UART_Init+0x58>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <MX_USART3_UART_Init+0x58>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fae:	4805      	ldr	r0, [pc, #20]	@ (8000fc4 <MX_USART3_UART_Init+0x58>)
 8000fb0:	f006 fe78 	bl	8007ca4 <HAL_UART_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000fba:	f000 f98f 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000660 	.word	0x20000660
 8000fc8:	40004800 	.word	0x40004800

08000fcc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000fd0:	4b14      	ldr	r3, [pc, #80]	@ (8001024 <MX_USART6_UART_Init+0x58>)
 8000fd2:	4a15      	ldr	r2, [pc, #84]	@ (8001028 <MX_USART6_UART_Init+0x5c>)
 8000fd4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000fd6:	4b13      	ldr	r3, [pc, #76]	@ (8001024 <MX_USART6_UART_Init+0x58>)
 8000fd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fdc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000fde:	4b11      	ldr	r3, [pc, #68]	@ (8001024 <MX_USART6_UART_Init+0x58>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <MX_USART6_UART_Init+0x58>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	@ (8001024 <MX_USART6_UART_Init+0x58>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <MX_USART6_UART_Init+0x58>)
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8001024 <MX_USART6_UART_Init+0x58>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ffc:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <MX_USART6_UART_Init+0x58>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001002:	4b08      	ldr	r3, [pc, #32]	@ (8001024 <MX_USART6_UART_Init+0x58>)
 8001004:	2200      	movs	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001008:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <MX_USART6_UART_Init+0x58>)
 800100a:	2200      	movs	r2, #0
 800100c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800100e:	4805      	ldr	r0, [pc, #20]	@ (8001024 <MX_USART6_UART_Init+0x58>)
 8001010:	f006 fe48 	bl	8007ca4 <HAL_UART_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800101a:	f000 f95f 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200006e8 	.word	0x200006e8
 8001028:	40011400 	.word	0x40011400

0800102c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001032:	4b2a      	ldr	r3, [pc, #168]	@ (80010dc <MX_DMA_Init+0xb0>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	4a29      	ldr	r2, [pc, #164]	@ (80010dc <MX_DMA_Init+0xb0>)
 8001038:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800103c:	6313      	str	r3, [r2, #48]	@ 0x30
 800103e:	4b27      	ldr	r3, [pc, #156]	@ (80010dc <MX_DMA_Init+0xb0>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800104a:	4b24      	ldr	r3, [pc, #144]	@ (80010dc <MX_DMA_Init+0xb0>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	4a23      	ldr	r2, [pc, #140]	@ (80010dc <MX_DMA_Init+0xb0>)
 8001050:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001054:	6313      	str	r3, [r2, #48]	@ 0x30
 8001056:	4b21      	ldr	r3, [pc, #132]	@ (80010dc <MX_DMA_Init+0xb0>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	200c      	movs	r0, #12
 8001068:	f001 fbc5 	bl	80027f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800106c:	200c      	movs	r0, #12
 800106e:	f001 fbde 	bl	800282e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	200d      	movs	r0, #13
 8001078:	f001 fbbd 	bl	80027f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800107c:	200d      	movs	r0, #13
 800107e:	f001 fbd6 	bl	800282e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	2010      	movs	r0, #16
 8001088:	f001 fbb5 	bl	80027f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800108c:	2010      	movs	r0, #16
 800108e:	f001 fbce 	bl	800282e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2100      	movs	r1, #0
 8001096:	2039      	movs	r0, #57	@ 0x39
 8001098:	f001 fbad 	bl	80027f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800109c:	2039      	movs	r0, #57	@ 0x39
 800109e:	f001 fbc6 	bl	800282e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2100      	movs	r1, #0
 80010a6:	203a      	movs	r0, #58	@ 0x3a
 80010a8:	f001 fba5 	bl	80027f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80010ac:	203a      	movs	r0, #58	@ 0x3a
 80010ae:	f001 fbbe 	bl	800282e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	203b      	movs	r0, #59	@ 0x3b
 80010b8:	f001 fb9d 	bl	80027f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80010bc:	203b      	movs	r0, #59	@ 0x3b
 80010be:	f001 fbb6 	bl	800282e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2100      	movs	r1, #0
 80010c6:	2046      	movs	r0, #70	@ 0x46
 80010c8:	f001 fb95 	bl	80027f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80010cc:	2046      	movs	r0, #70	@ 0x46
 80010ce:	f001 fbae 	bl	800282e <HAL_NVIC_EnableIRQ>

}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40023800 	.word	0x40023800

080010e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	@ 0x28
 80010e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001274 <MX_GPIO_Init+0x194>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	4a5e      	ldr	r2, [pc, #376]	@ (8001274 <MX_GPIO_Init+0x194>)
 80010fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001100:	6313      	str	r3, [r2, #48]	@ 0x30
 8001102:	4b5c      	ldr	r3, [pc, #368]	@ (8001274 <MX_GPIO_Init+0x194>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800110e:	4b59      	ldr	r3, [pc, #356]	@ (8001274 <MX_GPIO_Init+0x194>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	4a58      	ldr	r2, [pc, #352]	@ (8001274 <MX_GPIO_Init+0x194>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	6313      	str	r3, [r2, #48]	@ 0x30
 800111a:	4b56      	ldr	r3, [pc, #344]	@ (8001274 <MX_GPIO_Init+0x194>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	4b53      	ldr	r3, [pc, #332]	@ (8001274 <MX_GPIO_Init+0x194>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	4a52      	ldr	r2, [pc, #328]	@ (8001274 <MX_GPIO_Init+0x194>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	@ 0x30
 8001132:	4b50      	ldr	r3, [pc, #320]	@ (8001274 <MX_GPIO_Init+0x194>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	4b4d      	ldr	r3, [pc, #308]	@ (8001274 <MX_GPIO_Init+0x194>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	4a4c      	ldr	r2, [pc, #304]	@ (8001274 <MX_GPIO_Init+0x194>)
 8001144:	f043 0302 	orr.w	r3, r3, #2
 8001148:	6313      	str	r3, [r2, #48]	@ 0x30
 800114a:	4b4a      	ldr	r3, [pc, #296]	@ (8001274 <MX_GPIO_Init+0x194>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001156:	4b47      	ldr	r3, [pc, #284]	@ (8001274 <MX_GPIO_Init+0x194>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	4a46      	ldr	r2, [pc, #280]	@ (8001274 <MX_GPIO_Init+0x194>)
 800115c:	f043 0308 	orr.w	r3, r3, #8
 8001160:	6313      	str	r3, [r2, #48]	@ 0x30
 8001162:	4b44      	ldr	r3, [pc, #272]	@ (8001274 <MX_GPIO_Init+0x194>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	f003 0308 	and.w	r3, r3, #8
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_R_GPIO_Port, RGB_R_Pin, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	2108      	movs	r1, #8
 8001172:	4841      	ldr	r0, [pc, #260]	@ (8001278 <MX_GPIO_Init+0x198>)
 8001174:	f002 f91a 	bl	80033ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BARO_CS_GPIO_Port, BARO_CS_Pin, GPIO_PIN_SET);
 8001178:	2201      	movs	r2, #1
 800117a:	2110      	movs	r1, #16
 800117c:	483e      	ldr	r0, [pc, #248]	@ (8001278 <MX_GPIO_Init+0x198>)
 800117e:	f002 f915 	bl	80033ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GYRO_CS_Pin|ACCEL_CS_Pin|CS_EXT_3_Pin|CS_EXT_2_Pin
 8001182:	2201      	movs	r2, #1
 8001184:	213b      	movs	r1, #59	@ 0x3b
 8001186:	483d      	ldr	r0, [pc, #244]	@ (800127c <MX_GPIO_Init+0x19c>)
 8001188:	f002 f910 	bl	80033ac <HAL_GPIO_WritePin>
                          |CS_EXT_1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SERVO1_Pin|SERVO2_Pin|SERVO3_Pin|SERVO4_Pin
 800118c:	2200      	movs	r2, #0
 800118e:	f24d 3104 	movw	r1, #54020	@ 0xd304
 8001192:	483a      	ldr	r0, [pc, #232]	@ (800127c <MX_GPIO_Init+0x19c>)
 8001194:	f002 f90a 	bl	80033ac <HAL_GPIO_WritePin>
                          |RGB_B_Pin|RGB_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SERVO7_Pin|SEVO5_Pin|SERVO6_Pin, GPIO_PIN_RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800119e:	4838      	ldr	r0, [pc, #224]	@ (8001280 <MX_GPIO_Init+0x1a0>)
 80011a0:	f002 f904 	bl	80033ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RGB_R_Pin */
  GPIO_InitStruct.Pin = RGB_R_Pin;
 80011a4:	2308      	movs	r3, #8
 80011a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a8:	2301      	movs	r3, #1
 80011aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b0:	2300      	movs	r3, #0
 80011b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RGB_R_GPIO_Port, &GPIO_InitStruct);
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	4619      	mov	r1, r3
 80011ba:	482f      	ldr	r0, [pc, #188]	@ (8001278 <MX_GPIO_Init+0x198>)
 80011bc:	f001 ff42 	bl	8003044 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CD_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 80011c0:	2310      	movs	r3, #16
 80011c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	4619      	mov	r1, r3
 80011d2:	482b      	ldr	r0, [pc, #172]	@ (8001280 <MX_GPIO_Init+0x1a0>)
 80011d4:	f001 ff36 	bl	8003044 <HAL_GPIO_Init>

  /*Configure GPIO pin : BARO_CS_Pin */
  GPIO_InitStruct.Pin = BARO_CS_Pin;
 80011d8:	2310      	movs	r3, #16
 80011da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	2301      	movs	r3, #1
 80011de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BARO_CS_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4619      	mov	r1, r3
 80011ee:	4822      	ldr	r0, [pc, #136]	@ (8001278 <MX_GPIO_Init+0x198>)
 80011f0:	f001 ff28 	bl	8003044 <HAL_GPIO_Init>

  /*Configure GPIO pins : GYRO_CS_Pin ACCEL_CS_Pin CS_EXT_3_Pin CS_EXT_2_Pin
                           CS_EXT_1_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin|ACCEL_CS_Pin|CS_EXT_3_Pin|CS_EXT_2_Pin
 80011f4:	233b      	movs	r3, #59	@ 0x3b
 80011f6:	617b      	str	r3, [r7, #20]
                          |CS_EXT_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011fc:	2301      	movs	r3, #1
 80011fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4619      	mov	r1, r3
 800120a:	481c      	ldr	r0, [pc, #112]	@ (800127c <MX_GPIO_Init+0x19c>)
 800120c:	f001 ff1a 	bl	8003044 <HAL_GPIO_Init>

  /*Configure GPIO pins : SERVO1_Pin SERVO2_Pin SERVO3_Pin SERVO4_Pin */
  GPIO_InitStruct.Pin = SERVO1_Pin|SERVO2_Pin|SERVO3_Pin|SERVO4_Pin;
 8001210:	f24d 0304 	movw	r3, #53252	@ 0xd004
 8001214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001216:	2301      	movs	r3, #1
 8001218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121e:	2303      	movs	r3, #3
 8001220:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4619      	mov	r1, r3
 8001228:	4814      	ldr	r0, [pc, #80]	@ (800127c <MX_GPIO_Init+0x19c>)
 800122a:	f001 ff0b 	bl	8003044 <HAL_GPIO_Init>

  /*Configure GPIO pins : SERVO7_Pin SEVO5_Pin SERVO6_Pin */
  GPIO_InitStruct.Pin = SERVO7_Pin|SEVO5_Pin|SERVO6_Pin;
 800122e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001234:	2301      	movs	r3, #1
 8001236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4619      	mov	r1, r3
 8001246:	480e      	ldr	r0, [pc, #56]	@ (8001280 <MX_GPIO_Init+0x1a0>)
 8001248:	f001 fefc 	bl	8003044 <HAL_GPIO_Init>

  /*Configure GPIO pins : RGB_B_Pin RGB_G_Pin */
  GPIO_InitStruct.Pin = RGB_B_Pin|RGB_G_Pin;
 800124c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001252:	2301      	movs	r3, #1
 8001254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	4805      	ldr	r0, [pc, #20]	@ (800127c <MX_GPIO_Init+0x19c>)
 8001266:	f001 feed 	bl	8003044 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	@ 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800
 8001278:	40020800 	.word	0x40020800
 800127c:	40020400 	.word	0x40020400
 8001280:	40020000 	.word	0x40020000

08001284 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800128a:	463b      	mov	r3, r7
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001296:	f001 fae5 	bl	8002864 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800129a:	2301      	movs	r3, #1
 800129c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800129e:	2300      	movs	r3, #0
 80012a0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80012a6:	231f      	movs	r3, #31
 80012a8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80012aa:	2387      	movs	r3, #135	@ 0x87
 80012ac:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80012b2:	2300      	movs	r3, #0
 80012b4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80012b6:	2301      	movs	r3, #1
 80012b8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80012ba:	2301      	movs	r3, #1
 80012bc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80012c6:	463b      	mov	r3, r7
 80012c8:	4618      	mov	r0, r3
 80012ca:	f001 fb03 	bl	80028d4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80012ce:	2004      	movs	r0, #4
 80012d0:	f001 fae0 	bl	8002894 <HAL_MPU_Enable>

}
 80012d4:	bf00      	nop
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e0:	b672      	cpsid	i
}
 80012e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <Error_Handler+0x8>

080012e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	4b0f      	ldr	r3, [pc, #60]	@ (800132c <HAL_MspInit+0x44>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	4a0e      	ldr	r2, [pc, #56]	@ (800132c <HAL_MspInit+0x44>)
 80012f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012fa:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <HAL_MspInit+0x44>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	4b09      	ldr	r3, [pc, #36]	@ (800132c <HAL_MspInit+0x44>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130a:	4a08      	ldr	r2, [pc, #32]	@ (800132c <HAL_MspInit+0x44>)
 800130c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001310:	6453      	str	r3, [r2, #68]	@ 0x44
 8001312:	4b06      	ldr	r3, [pc, #24]	@ (800132c <HAL_MspInit+0x44>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001316:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800

08001330 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	@ 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a15      	ldr	r2, [pc, #84]	@ (80013a4 <HAL_ADC_MspInit+0x74>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d123      	bne.n	800139a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001352:	4b15      	ldr	r3, [pc, #84]	@ (80013a8 <HAL_ADC_MspInit+0x78>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001356:	4a14      	ldr	r2, [pc, #80]	@ (80013a8 <HAL_ADC_MspInit+0x78>)
 8001358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800135c:	6453      	str	r3, [r2, #68]	@ 0x44
 800135e:	4b12      	ldr	r3, [pc, #72]	@ (80013a8 <HAL_ADC_MspInit+0x78>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800136a:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <HAL_ADC_MspInit+0x78>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	4a0e      	ldr	r2, [pc, #56]	@ (80013a8 <HAL_ADC_MspInit+0x78>)
 8001370:	f043 0304 	orr.w	r3, r3, #4
 8001374:	6313      	str	r3, [r2, #48]	@ 0x30
 8001376:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <HAL_ADC_MspInit+0x78>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = VBAT_SENSE_Pin;
 8001382:	2301      	movs	r3, #1
 8001384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001386:	2303      	movs	r3, #3
 8001388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBAT_SENSE_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	4805      	ldr	r0, [pc, #20]	@ (80013ac <HAL_ADC_MspInit+0x7c>)
 8001396:	f001 fe55 	bl	8003044 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800139a:	bf00      	nop
 800139c:	3728      	adds	r7, #40	@ 0x28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40012000 	.word	0x40012000
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40020800 	.word	0x40020800

080013b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b0aa      	sub	sp, #168	@ 0xa8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2280      	movs	r2, #128	@ 0x80
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f00c fce4 	bl	800dd9e <memset>
  if(hi2c->Instance==I2C1)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a21      	ldr	r2, [pc, #132]	@ (8001460 <HAL_I2C_MspInit+0xb0>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d13b      	bne.n	8001458 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80013e4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013e6:	2300      	movs	r3, #0
 80013e8:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4618      	mov	r0, r3
 80013f0:	f004 f8f8 	bl	80055e4 <HAL_RCCEx_PeriphCLKConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80013fa:	f7ff ff6f 	bl	80012dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <HAL_I2C_MspInit+0xb4>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	4a18      	ldr	r2, [pc, #96]	@ (8001464 <HAL_I2C_MspInit+0xb4>)
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	6313      	str	r3, [r2, #48]	@ 0x30
 800140a:	4b16      	ldr	r3, [pc, #88]	@ (8001464 <HAL_I2C_MspInit+0xb4>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001416:	23c0      	movs	r3, #192	@ 0xc0
 8001418:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800141c:	2312      	movs	r3, #18
 800141e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001428:	2303      	movs	r3, #3
 800142a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800142e:	2304      	movs	r3, #4
 8001430:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001434:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001438:	4619      	mov	r1, r3
 800143a:	480b      	ldr	r0, [pc, #44]	@ (8001468 <HAL_I2C_MspInit+0xb8>)
 800143c:	f001 fe02 	bl	8003044 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001440:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <HAL_I2C_MspInit+0xb4>)
 8001442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001444:	4a07      	ldr	r2, [pc, #28]	@ (8001464 <HAL_I2C_MspInit+0xb4>)
 8001446:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800144a:	6413      	str	r3, [r2, #64]	@ 0x40
 800144c:	4b05      	ldr	r3, [pc, #20]	@ (8001464 <HAL_I2C_MspInit+0xb4>)
 800144e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001450:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001458:	bf00      	nop
 800145a:	37a8      	adds	r7, #168	@ 0xa8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40005400 	.word	0x40005400
 8001464:	40023800 	.word	0x40023800
 8001468:	40020400 	.word	0x40020400

0800146c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b0aa      	sub	sp, #168	@ 0xa8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	2280      	movs	r2, #128	@ 0x80
 800148a:	2100      	movs	r1, #0
 800148c:	4618      	mov	r0, r3
 800148e:	f00c fc86 	bl	800dd9e <memset>
  if(hsd->Instance==SDMMC1)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a34      	ldr	r2, [pc, #208]	@ (8001568 <HAL_SD_MspInit+0xfc>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d161      	bne.n	8001560 <HAL_SD_MspInit+0xf4>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 800149c:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 80014a0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	4618      	mov	r0, r3
 80014b4:	f004 f896 	bl	80055e4 <HAL_RCCEx_PeriphCLKConfig>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 80014be:	f7ff ff0d 	bl	80012dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80014c2:	4b2a      	ldr	r3, [pc, #168]	@ (800156c <HAL_SD_MspInit+0x100>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c6:	4a29      	ldr	r2, [pc, #164]	@ (800156c <HAL_SD_MspInit+0x100>)
 80014c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ce:	4b27      	ldr	r3, [pc, #156]	@ (800156c <HAL_SD_MspInit+0x100>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014da:	4b24      	ldr	r3, [pc, #144]	@ (800156c <HAL_SD_MspInit+0x100>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	4a23      	ldr	r2, [pc, #140]	@ (800156c <HAL_SD_MspInit+0x100>)
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e6:	4b21      	ldr	r3, [pc, #132]	@ (800156c <HAL_SD_MspInit+0x100>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f2:	4b1e      	ldr	r3, [pc, #120]	@ (800156c <HAL_SD_MspInit+0x100>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	4a1d      	ldr	r2, [pc, #116]	@ (800156c <HAL_SD_MspInit+0x100>)
 80014f8:	f043 0308 	orr.w	r3, r3, #8
 80014fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fe:	4b1b      	ldr	r3, [pc, #108]	@ (800156c <HAL_SD_MspInit+0x100>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800150a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800150e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151e:	2303      	movs	r3, #3
 8001520:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001524:	230c      	movs	r3, #12
 8001526:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800152a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800152e:	4619      	mov	r1, r3
 8001530:	480f      	ldr	r0, [pc, #60]	@ (8001570 <HAL_SD_MspInit+0x104>)
 8001532:	f001 fd87 	bl	8003044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001536:	2304      	movs	r3, #4
 8001538:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153c:	2302      	movs	r3, #2
 800153e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800154e:	230c      	movs	r3, #12
 8001550:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001554:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001558:	4619      	mov	r1, r3
 800155a:	4806      	ldr	r0, [pc, #24]	@ (8001574 <HAL_SD_MspInit+0x108>)
 800155c:	f001 fd72 	bl	8003044 <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8001560:	bf00      	nop
 8001562:	37a8      	adds	r7, #168	@ 0xa8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40012c00 	.word	0x40012c00
 800156c:	40023800 	.word	0x40023800
 8001570:	40020800 	.word	0x40020800
 8001574:	40020c00 	.word	0x40020c00

08001578 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08c      	sub	sp, #48	@ 0x30
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 031c 	add.w	r3, r7, #28
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a3c      	ldr	r2, [pc, #240]	@ (8001688 <HAL_SPI_MspInit+0x110>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d128      	bne.n	80015ec <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800159a:	4b3c      	ldr	r3, [pc, #240]	@ (800168c <HAL_SPI_MspInit+0x114>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159e:	4a3b      	ldr	r2, [pc, #236]	@ (800168c <HAL_SPI_MspInit+0x114>)
 80015a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015a6:	4b39      	ldr	r3, [pc, #228]	@ (800168c <HAL_SPI_MspInit+0x114>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015ae:	61bb      	str	r3, [r7, #24]
 80015b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	4b36      	ldr	r3, [pc, #216]	@ (800168c <HAL_SPI_MspInit+0x114>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	4a35      	ldr	r2, [pc, #212]	@ (800168c <HAL_SPI_MspInit+0x114>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015be:	4b33      	ldr	r3, [pc, #204]	@ (800168c <HAL_SPI_MspInit+0x114>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015ca:	23e0      	movs	r3, #224	@ 0xe0
 80015cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d6:	2303      	movs	r3, #3
 80015d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015da:	2305      	movs	r3, #5
 80015dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015de:	f107 031c 	add.w	r3, r7, #28
 80015e2:	4619      	mov	r1, r3
 80015e4:	482a      	ldr	r0, [pc, #168]	@ (8001690 <HAL_SPI_MspInit+0x118>)
 80015e6:	f001 fd2d 	bl	8003044 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80015ea:	e049      	b.n	8001680 <HAL_SPI_MspInit+0x108>
  else if(hspi->Instance==SPI2)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a28      	ldr	r2, [pc, #160]	@ (8001694 <HAL_SPI_MspInit+0x11c>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d144      	bne.n	8001680 <HAL_SPI_MspInit+0x108>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015f6:	4b25      	ldr	r3, [pc, #148]	@ (800168c <HAL_SPI_MspInit+0x114>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fa:	4a24      	ldr	r2, [pc, #144]	@ (800168c <HAL_SPI_MspInit+0x114>)
 80015fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001600:	6413      	str	r3, [r2, #64]	@ 0x40
 8001602:	4b22      	ldr	r3, [pc, #136]	@ (800168c <HAL_SPI_MspInit+0x114>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800160e:	4b1f      	ldr	r3, [pc, #124]	@ (800168c <HAL_SPI_MspInit+0x114>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	4a1e      	ldr	r2, [pc, #120]	@ (800168c <HAL_SPI_MspInit+0x114>)
 8001614:	f043 0304 	orr.w	r3, r3, #4
 8001618:	6313      	str	r3, [r2, #48]	@ 0x30
 800161a:	4b1c      	ldr	r3, [pc, #112]	@ (800168c <HAL_SPI_MspInit+0x114>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001626:	4b19      	ldr	r3, [pc, #100]	@ (800168c <HAL_SPI_MspInit+0x114>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	4a18      	ldr	r2, [pc, #96]	@ (800168c <HAL_SPI_MspInit+0x114>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	6313      	str	r3, [r2, #48]	@ 0x30
 8001632:	4b16      	ldr	r3, [pc, #88]	@ (800168c <HAL_SPI_MspInit+0x114>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800163e:	2306      	movs	r3, #6
 8001640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001642:	2302      	movs	r3, #2
 8001644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164a:	2303      	movs	r3, #3
 800164c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800164e:	2305      	movs	r3, #5
 8001650:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001652:	f107 031c 	add.w	r3, r7, #28
 8001656:	4619      	mov	r1, r3
 8001658:	480f      	ldr	r0, [pc, #60]	@ (8001698 <HAL_SPI_MspInit+0x120>)
 800165a:	f001 fcf3 	bl	8003044 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800165e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001664:	2302      	movs	r3, #2
 8001666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166c:	2303      	movs	r3, #3
 800166e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001670:	2305      	movs	r3, #5
 8001672:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001674:	f107 031c 	add.w	r3, r7, #28
 8001678:	4619      	mov	r1, r3
 800167a:	4808      	ldr	r0, [pc, #32]	@ (800169c <HAL_SPI_MspInit+0x124>)
 800167c:	f001 fce2 	bl	8003044 <HAL_GPIO_Init>
}
 8001680:	bf00      	nop
 8001682:	3730      	adds	r7, #48	@ 0x30
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40013000 	.word	0x40013000
 800168c:	40023800 	.word	0x40023800
 8001690:	40020000 	.word	0x40020000
 8001694:	40003800 	.word	0x40003800
 8001698:	40020800 	.word	0x40020800
 800169c:	40020400 	.word	0x40020400

080016a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a22      	ldr	r2, [pc, #136]	@ (8001738 <HAL_TIM_PWM_MspInit+0x98>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d13d      	bne.n	800172e <HAL_TIM_PWM_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016b2:	4b22      	ldr	r3, [pc, #136]	@ (800173c <HAL_TIM_PWM_MspInit+0x9c>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b6:	4a21      	ldr	r2, [pc, #132]	@ (800173c <HAL_TIM_PWM_MspInit+0x9c>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80016be:	4b1f      	ldr	r3, [pc, #124]	@ (800173c <HAL_TIM_PWM_MspInit+0x9c>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream3;
 80016ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001740 <HAL_TIM_PWM_MspInit+0xa0>)
 80016cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001744 <HAL_TIM_PWM_MspInit+0xa4>)
 80016ce:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001740 <HAL_TIM_PWM_MspInit+0xa0>)
 80016d2:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80016d6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016d8:	4b19      	ldr	r3, [pc, #100]	@ (8001740 <HAL_TIM_PWM_MspInit+0xa0>)
 80016da:	2240      	movs	r2, #64	@ 0x40
 80016dc:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016de:	4b18      	ldr	r3, [pc, #96]	@ (8001740 <HAL_TIM_PWM_MspInit+0xa0>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80016e4:	4b16      	ldr	r3, [pc, #88]	@ (8001740 <HAL_TIM_PWM_MspInit+0xa0>)
 80016e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016ea:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016ec:	4b14      	ldr	r3, [pc, #80]	@ (8001740 <HAL_TIM_PWM_MspInit+0xa0>)
 80016ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016f2:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016f4:	4b12      	ldr	r3, [pc, #72]	@ (8001740 <HAL_TIM_PWM_MspInit+0xa0>)
 80016f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016fa:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 80016fc:	4b10      	ldr	r3, [pc, #64]	@ (8001740 <HAL_TIM_PWM_MspInit+0xa0>)
 80016fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001702:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001704:	4b0e      	ldr	r3, [pc, #56]	@ (8001740 <HAL_TIM_PWM_MspInit+0xa0>)
 8001706:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800170a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800170c:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <HAL_TIM_PWM_MspInit+0xa0>)
 800170e:	2200      	movs	r2, #0
 8001710:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001712:	480b      	ldr	r0, [pc, #44]	@ (8001740 <HAL_TIM_PWM_MspInit+0xa0>)
 8001714:	f001 f91e 	bl	8002954 <HAL_DMA_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 800171e:	f7ff fddd 	bl	80012dc <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a06      	ldr	r2, [pc, #24]	@ (8001740 <HAL_TIM_PWM_MspInit+0xa0>)
 8001726:	625a      	str	r2, [r3, #36]	@ 0x24
 8001728:	4a05      	ldr	r2, [pc, #20]	@ (8001740 <HAL_TIM_PWM_MspInit+0xa0>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40010000 	.word	0x40010000
 800173c:	40023800 	.word	0x40023800
 8001740:	20000468 	.word	0x20000468
 8001744:	40026458 	.word	0x40026458

08001748 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0a      	ldr	r2, [pc, #40]	@ (8001780 <HAL_TIM_Base_MspInit+0x38>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d10b      	bne.n	8001772 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800175a:	4b0a      	ldr	r3, [pc, #40]	@ (8001784 <HAL_TIM_Base_MspInit+0x3c>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175e:	4a09      	ldr	r2, [pc, #36]	@ (8001784 <HAL_TIM_Base_MspInit+0x3c>)
 8001760:	f043 0310 	orr.w	r3, r3, #16
 8001764:	6413      	str	r3, [r2, #64]	@ 0x40
 8001766:	4b07      	ldr	r3, [pc, #28]	@ (8001784 <HAL_TIM_Base_MspInit+0x3c>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176a:	f003 0310 	and.w	r3, r3, #16
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001772:	bf00      	nop
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40001000 	.word	0x40001000
 8001784:	40023800 	.word	0x40023800

08001788 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 030c 	add.w	r3, r7, #12
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a11      	ldr	r2, [pc, #68]	@ (80017ec <HAL_TIM_MspPostInit+0x64>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d11c      	bne.n	80017e4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <HAL_TIM_MspPostInit+0x68>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	4a10      	ldr	r2, [pc, #64]	@ (80017f0 <HAL_TIM_MspPostInit+0x68>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b6:	4b0e      	ldr	r3, [pc, #56]	@ (80017f0 <HAL_TIM_MspPostInit+0x68>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DSHOT_PIN_Pin;
 80017c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d0:	2303      	movs	r3, #3
 80017d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017d4:	2301      	movs	r3, #1
 80017d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DSHOT_PIN_GPIO_Port, &GPIO_InitStruct);
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	4619      	mov	r1, r3
 80017de:	4805      	ldr	r0, [pc, #20]	@ (80017f4 <HAL_TIM_MspPostInit+0x6c>)
 80017e0:	f001 fc30 	bl	8003044 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017e4:	bf00      	nop
 80017e6:	3720      	adds	r7, #32
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40010000 	.word	0x40010000
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40020000 	.word	0x40020000

080017f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b0b2      	sub	sp, #200	@ 0xc8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001810:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001814:	2280      	movs	r2, #128	@ 0x80
 8001816:	2100      	movs	r1, #0
 8001818:	4618      	mov	r0, r3
 800181a:	f00c fac0 	bl	800dd9e <memset>
  if(huart->Instance==UART4)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a89      	ldr	r2, [pc, #548]	@ (8001a48 <HAL_UART_MspInit+0x250>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d16b      	bne.n	8001900 <HAL_UART_MspInit+0x108>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001828:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800182c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800182e:	2300      	movs	r3, #0
 8001830:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001832:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001836:	4618      	mov	r0, r3
 8001838:	f003 fed4 	bl	80055e4 <HAL_RCCEx_PeriphCLKConfig>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001842:	f7ff fd4b 	bl	80012dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001846:	4b81      	ldr	r3, [pc, #516]	@ (8001a4c <HAL_UART_MspInit+0x254>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184a:	4a80      	ldr	r2, [pc, #512]	@ (8001a4c <HAL_UART_MspInit+0x254>)
 800184c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001850:	6413      	str	r3, [r2, #64]	@ 0x40
 8001852:	4b7e      	ldr	r3, [pc, #504]	@ (8001a4c <HAL_UART_MspInit+0x254>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001856:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800185a:	633b      	str	r3, [r7, #48]	@ 0x30
 800185c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	4b7b      	ldr	r3, [pc, #492]	@ (8001a4c <HAL_UART_MspInit+0x254>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	4a7a      	ldr	r2, [pc, #488]	@ (8001a4c <HAL_UART_MspInit+0x254>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6313      	str	r3, [r2, #48]	@ 0x30
 800186a:	4b78      	ldr	r3, [pc, #480]	@ (8001a4c <HAL_UART_MspInit+0x254>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001876:	2303      	movs	r3, #3
 8001878:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001888:	2303      	movs	r3, #3
 800188a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800188e:	2308      	movs	r3, #8
 8001890:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001894:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001898:	4619      	mov	r1, r3
 800189a:	486d      	ldr	r0, [pc, #436]	@ (8001a50 <HAL_UART_MspInit+0x258>)
 800189c:	f001 fbd2 	bl	8003044 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80018a0:	4b6c      	ldr	r3, [pc, #432]	@ (8001a54 <HAL_UART_MspInit+0x25c>)
 80018a2:	4a6d      	ldr	r2, [pc, #436]	@ (8001a58 <HAL_UART_MspInit+0x260>)
 80018a4:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80018a6:	4b6b      	ldr	r3, [pc, #428]	@ (8001a54 <HAL_UART_MspInit+0x25c>)
 80018a8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80018ac:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018ae:	4b69      	ldr	r3, [pc, #420]	@ (8001a54 <HAL_UART_MspInit+0x25c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b4:	4b67      	ldr	r3, [pc, #412]	@ (8001a54 <HAL_UART_MspInit+0x25c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018ba:	4b66      	ldr	r3, [pc, #408]	@ (8001a54 <HAL_UART_MspInit+0x25c>)
 80018bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018c0:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018c2:	4b64      	ldr	r3, [pc, #400]	@ (8001a54 <HAL_UART_MspInit+0x25c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018c8:	4b62      	ldr	r3, [pc, #392]	@ (8001a54 <HAL_UART_MspInit+0x25c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80018ce:	4b61      	ldr	r3, [pc, #388]	@ (8001a54 <HAL_UART_MspInit+0x25c>)
 80018d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018d4:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018d6:	4b5f      	ldr	r3, [pc, #380]	@ (8001a54 <HAL_UART_MspInit+0x25c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018dc:	4b5d      	ldr	r3, [pc, #372]	@ (8001a54 <HAL_UART_MspInit+0x25c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80018e2:	485c      	ldr	r0, [pc, #368]	@ (8001a54 <HAL_UART_MspInit+0x25c>)
 80018e4:	f001 f836 	bl	8002954 <HAL_DMA_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 80018ee:	f7ff fcf5 	bl	80012dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a57      	ldr	r2, [pc, #348]	@ (8001a54 <HAL_UART_MspInit+0x25c>)
 80018f6:	675a      	str	r2, [r3, #116]	@ 0x74
 80018f8:	4a56      	ldr	r2, [pc, #344]	@ (8001a54 <HAL_UART_MspInit+0x25c>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80018fe:	e20a      	b.n	8001d16 <HAL_UART_MspInit+0x51e>
  else if(huart->Instance==USART1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a55      	ldr	r2, [pc, #340]	@ (8001a5c <HAL_UART_MspInit+0x264>)
 8001906:	4293      	cmp	r3, r2
 8001908:	f040 80b2 	bne.w	8001a70 <HAL_UART_MspInit+0x278>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800190c:	2340      	movs	r3, #64	@ 0x40
 800190e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001910:	2300      	movs	r3, #0
 8001912:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001914:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001918:	4618      	mov	r0, r3
 800191a:	f003 fe63 	bl	80055e4 <HAL_RCCEx_PeriphCLKConfig>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8001924:	f7ff fcda 	bl	80012dc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001928:	4b48      	ldr	r3, [pc, #288]	@ (8001a4c <HAL_UART_MspInit+0x254>)
 800192a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192c:	4a47      	ldr	r2, [pc, #284]	@ (8001a4c <HAL_UART_MspInit+0x254>)
 800192e:	f043 0310 	orr.w	r3, r3, #16
 8001932:	6453      	str	r3, [r2, #68]	@ 0x44
 8001934:	4b45      	ldr	r3, [pc, #276]	@ (8001a4c <HAL_UART_MspInit+0x254>)
 8001936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001938:	f003 0310 	and.w	r3, r3, #16
 800193c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800193e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001940:	4b42      	ldr	r3, [pc, #264]	@ (8001a4c <HAL_UART_MspInit+0x254>)
 8001942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001944:	4a41      	ldr	r2, [pc, #260]	@ (8001a4c <HAL_UART_MspInit+0x254>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	6313      	str	r3, [r2, #48]	@ 0x30
 800194c:	4b3f      	ldr	r3, [pc, #252]	@ (8001a4c <HAL_UART_MspInit+0x254>)
 800194e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	627b      	str	r3, [r7, #36]	@ 0x24
 8001956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001958:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800195c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196c:	2303      	movs	r3, #3
 800196e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001972:	2307      	movs	r3, #7
 8001974:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001978:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800197c:	4619      	mov	r1, r3
 800197e:	4834      	ldr	r0, [pc, #208]	@ (8001a50 <HAL_UART_MspInit+0x258>)
 8001980:	f001 fb60 	bl	8003044 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001984:	4b36      	ldr	r3, [pc, #216]	@ (8001a60 <HAL_UART_MspInit+0x268>)
 8001986:	4a37      	ldr	r2, [pc, #220]	@ (8001a64 <HAL_UART_MspInit+0x26c>)
 8001988:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800198a:	4b35      	ldr	r3, [pc, #212]	@ (8001a60 <HAL_UART_MspInit+0x268>)
 800198c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001990:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001992:	4b33      	ldr	r3, [pc, #204]	@ (8001a60 <HAL_UART_MspInit+0x268>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001998:	4b31      	ldr	r3, [pc, #196]	@ (8001a60 <HAL_UART_MspInit+0x268>)
 800199a:	2200      	movs	r2, #0
 800199c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800199e:	4b30      	ldr	r3, [pc, #192]	@ (8001a60 <HAL_UART_MspInit+0x268>)
 80019a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019a4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001a60 <HAL_UART_MspInit+0x268>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001a60 <HAL_UART_MspInit+0x268>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80019b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a60 <HAL_UART_MspInit+0x268>)
 80019b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019b8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80019ba:	4b29      	ldr	r3, [pc, #164]	@ (8001a60 <HAL_UART_MspInit+0x268>)
 80019bc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019c0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019c2:	4b27      	ldr	r3, [pc, #156]	@ (8001a60 <HAL_UART_MspInit+0x268>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80019c8:	4825      	ldr	r0, [pc, #148]	@ (8001a60 <HAL_UART_MspInit+0x268>)
 80019ca:	f000 ffc3 	bl	8002954 <HAL_DMA_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 80019d4:	f7ff fc82 	bl	80012dc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a21      	ldr	r2, [pc, #132]	@ (8001a60 <HAL_UART_MspInit+0x268>)
 80019dc:	675a      	str	r2, [r3, #116]	@ 0x74
 80019de:	4a20      	ldr	r2, [pc, #128]	@ (8001a60 <HAL_UART_MspInit+0x268>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80019e4:	4b20      	ldr	r3, [pc, #128]	@ (8001a68 <HAL_UART_MspInit+0x270>)
 80019e6:	4a21      	ldr	r2, [pc, #132]	@ (8001a6c <HAL_UART_MspInit+0x274>)
 80019e8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80019ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001a68 <HAL_UART_MspInit+0x270>)
 80019ec:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80019f0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a68 <HAL_UART_MspInit+0x270>)
 80019f4:	2240      	movs	r2, #64	@ 0x40
 80019f6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a68 <HAL_UART_MspInit+0x270>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001a68 <HAL_UART_MspInit+0x270>)
 8001a00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a04:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a06:	4b18      	ldr	r3, [pc, #96]	@ (8001a68 <HAL_UART_MspInit+0x270>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a0c:	4b16      	ldr	r3, [pc, #88]	@ (8001a68 <HAL_UART_MspInit+0x270>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8001a12:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <HAL_UART_MspInit+0x270>)
 8001a14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a18:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001a1a:	4b13      	ldr	r3, [pc, #76]	@ (8001a68 <HAL_UART_MspInit+0x270>)
 8001a1c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a20:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a22:	4b11      	ldr	r3, [pc, #68]	@ (8001a68 <HAL_UART_MspInit+0x270>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001a28:	480f      	ldr	r0, [pc, #60]	@ (8001a68 <HAL_UART_MspInit+0x270>)
 8001a2a:	f000 ff93 	bl	8002954 <HAL_DMA_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <HAL_UART_MspInit+0x240>
      Error_Handler();
 8001a34:	f7ff fc52 	bl	80012dc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a68 <HAL_UART_MspInit+0x270>)
 8001a3c:	671a      	str	r2, [r3, #112]	@ 0x70
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a68 <HAL_UART_MspInit+0x270>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001a44:	e167      	b.n	8001d16 <HAL_UART_MspInit+0x51e>
 8001a46:	bf00      	nop
 8001a48:	40004c00 	.word	0x40004c00
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40020000 	.word	0x40020000
 8001a54:	20000770 	.word	0x20000770
 8001a58:	40026040 	.word	0x40026040
 8001a5c:	40011000 	.word	0x40011000
 8001a60:	200007d0 	.word	0x200007d0
 8001a64:	40026440 	.word	0x40026440
 8001a68:	20000830 	.word	0x20000830
 8001a6c:	400264b8 	.word	0x400264b8
  else if(huart->Instance==USART2)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4aaa      	ldr	r2, [pc, #680]	@ (8001d20 <HAL_UART_MspInit+0x528>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d16a      	bne.n	8001b50 <HAL_UART_MspInit+0x358>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a7a:	2380      	movs	r3, #128	@ 0x80
 8001a7c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a82:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001a86:	4618      	mov	r0, r3
 8001a88:	f003 fdac 	bl	80055e4 <HAL_RCCEx_PeriphCLKConfig>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_UART_MspInit+0x29e>
      Error_Handler();
 8001a92:	f7ff fc23 	bl	80012dc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a96:	4ba3      	ldr	r3, [pc, #652]	@ (8001d24 <HAL_UART_MspInit+0x52c>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9a:	4aa2      	ldr	r2, [pc, #648]	@ (8001d24 <HAL_UART_MspInit+0x52c>)
 8001a9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa2:	4ba0      	ldr	r3, [pc, #640]	@ (8001d24 <HAL_UART_MspInit+0x52c>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aaa:	623b      	str	r3, [r7, #32]
 8001aac:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	4b9d      	ldr	r3, [pc, #628]	@ (8001d24 <HAL_UART_MspInit+0x52c>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	4a9c      	ldr	r2, [pc, #624]	@ (8001d24 <HAL_UART_MspInit+0x52c>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aba:	4b9a      	ldr	r3, [pc, #616]	@ (8001d24 <HAL_UART_MspInit+0x52c>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	61fb      	str	r3, [r7, #28]
 8001ac4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ac6:	230c      	movs	r3, #12
 8001ac8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ade:	2307      	movs	r3, #7
 8001ae0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae4:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001ae8:	4619      	mov	r1, r3
 8001aea:	488f      	ldr	r0, [pc, #572]	@ (8001d28 <HAL_UART_MspInit+0x530>)
 8001aec:	f001 faaa 	bl	8003044 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001af0:	4b8e      	ldr	r3, [pc, #568]	@ (8001d2c <HAL_UART_MspInit+0x534>)
 8001af2:	4a8f      	ldr	r2, [pc, #572]	@ (8001d30 <HAL_UART_MspInit+0x538>)
 8001af4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001af6:	4b8d      	ldr	r3, [pc, #564]	@ (8001d2c <HAL_UART_MspInit+0x534>)
 8001af8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001afc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001afe:	4b8b      	ldr	r3, [pc, #556]	@ (8001d2c <HAL_UART_MspInit+0x534>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b04:	4b89      	ldr	r3, [pc, #548]	@ (8001d2c <HAL_UART_MspInit+0x534>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b0a:	4b88      	ldr	r3, [pc, #544]	@ (8001d2c <HAL_UART_MspInit+0x534>)
 8001b0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b10:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b12:	4b86      	ldr	r3, [pc, #536]	@ (8001d2c <HAL_UART_MspInit+0x534>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b18:	4b84      	ldr	r3, [pc, #528]	@ (8001d2c <HAL_UART_MspInit+0x534>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001b1e:	4b83      	ldr	r3, [pc, #524]	@ (8001d2c <HAL_UART_MspInit+0x534>)
 8001b20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b24:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b26:	4b81      	ldr	r3, [pc, #516]	@ (8001d2c <HAL_UART_MspInit+0x534>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b2c:	4b7f      	ldr	r3, [pc, #508]	@ (8001d2c <HAL_UART_MspInit+0x534>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b32:	487e      	ldr	r0, [pc, #504]	@ (8001d2c <HAL_UART_MspInit+0x534>)
 8001b34:	f000 ff0e 	bl	8002954 <HAL_DMA_Init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_UART_MspInit+0x34a>
      Error_Handler();
 8001b3e:	f7ff fbcd 	bl	80012dc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a79      	ldr	r2, [pc, #484]	@ (8001d2c <HAL_UART_MspInit+0x534>)
 8001b46:	675a      	str	r2, [r3, #116]	@ 0x74
 8001b48:	4a78      	ldr	r2, [pc, #480]	@ (8001d2c <HAL_UART_MspInit+0x534>)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001b4e:	e0e2      	b.n	8001d16 <HAL_UART_MspInit+0x51e>
  else if(huart->Instance==USART3)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a77      	ldr	r2, [pc, #476]	@ (8001d34 <HAL_UART_MspInit+0x53c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d16c      	bne.n	8001c34 <HAL_UART_MspInit+0x43c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b5e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b60:	2300      	movs	r3, #0
 8001b62:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b64:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f003 fd3b 	bl	80055e4 <HAL_RCCEx_PeriphCLKConfig>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <HAL_UART_MspInit+0x380>
      Error_Handler();
 8001b74:	f7ff fbb2 	bl	80012dc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b78:	4b6a      	ldr	r3, [pc, #424]	@ (8001d24 <HAL_UART_MspInit+0x52c>)
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7c:	4a69      	ldr	r2, [pc, #420]	@ (8001d24 <HAL_UART_MspInit+0x52c>)
 8001b7e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b82:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b84:	4b67      	ldr	r3, [pc, #412]	@ (8001d24 <HAL_UART_MspInit+0x52c>)
 8001b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b8c:	61bb      	str	r3, [r7, #24]
 8001b8e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b90:	4b64      	ldr	r3, [pc, #400]	@ (8001d24 <HAL_UART_MspInit+0x52c>)
 8001b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b94:	4a63      	ldr	r2, [pc, #396]	@ (8001d24 <HAL_UART_MspInit+0x52c>)
 8001b96:	f043 0302 	orr.w	r3, r3, #2
 8001b9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b9c:	4b61      	ldr	r3, [pc, #388]	@ (8001d24 <HAL_UART_MspInit+0x52c>)
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ba8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001bac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bc2:	2307      	movs	r3, #7
 8001bc4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc8:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001bcc:	4619      	mov	r1, r3
 8001bce:	485a      	ldr	r0, [pc, #360]	@ (8001d38 <HAL_UART_MspInit+0x540>)
 8001bd0:	f001 fa38 	bl	8003044 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001bd4:	4b59      	ldr	r3, [pc, #356]	@ (8001d3c <HAL_UART_MspInit+0x544>)
 8001bd6:	4a5a      	ldr	r2, [pc, #360]	@ (8001d40 <HAL_UART_MspInit+0x548>)
 8001bd8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001bda:	4b58      	ldr	r3, [pc, #352]	@ (8001d3c <HAL_UART_MspInit+0x544>)
 8001bdc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001be0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001be2:	4b56      	ldr	r3, [pc, #344]	@ (8001d3c <HAL_UART_MspInit+0x544>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001be8:	4b54      	ldr	r3, [pc, #336]	@ (8001d3c <HAL_UART_MspInit+0x544>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bee:	4b53      	ldr	r3, [pc, #332]	@ (8001d3c <HAL_UART_MspInit+0x544>)
 8001bf0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bf4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bf6:	4b51      	ldr	r3, [pc, #324]	@ (8001d3c <HAL_UART_MspInit+0x544>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bfc:	4b4f      	ldr	r3, [pc, #316]	@ (8001d3c <HAL_UART_MspInit+0x544>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001c02:	4b4e      	ldr	r3, [pc, #312]	@ (8001d3c <HAL_UART_MspInit+0x544>)
 8001c04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c08:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c0a:	4b4c      	ldr	r3, [pc, #304]	@ (8001d3c <HAL_UART_MspInit+0x544>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c10:	4b4a      	ldr	r3, [pc, #296]	@ (8001d3c <HAL_UART_MspInit+0x544>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001c16:	4849      	ldr	r0, [pc, #292]	@ (8001d3c <HAL_UART_MspInit+0x544>)
 8001c18:	f000 fe9c 	bl	8002954 <HAL_DMA_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_UART_MspInit+0x42e>
      Error_Handler();
 8001c22:	f7ff fb5b 	bl	80012dc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a44      	ldr	r2, [pc, #272]	@ (8001d3c <HAL_UART_MspInit+0x544>)
 8001c2a:	675a      	str	r2, [r3, #116]	@ 0x74
 8001c2c:	4a43      	ldr	r2, [pc, #268]	@ (8001d3c <HAL_UART_MspInit+0x544>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001c32:	e070      	b.n	8001d16 <HAL_UART_MspInit+0x51e>
  else if(huart->Instance==USART6)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a42      	ldr	r2, [pc, #264]	@ (8001d44 <HAL_UART_MspInit+0x54c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d16b      	bne.n	8001d16 <HAL_UART_MspInit+0x51e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001c3e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c42:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001c44:	2300      	movs	r3, #0
 8001c46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c4a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f003 fcc8 	bl	80055e4 <HAL_RCCEx_PeriphCLKConfig>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_UART_MspInit+0x466>
      Error_Handler();
 8001c5a:	f7ff fb3f 	bl	80012dc <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001c5e:	4b31      	ldr	r3, [pc, #196]	@ (8001d24 <HAL_UART_MspInit+0x52c>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c62:	4a30      	ldr	r2, [pc, #192]	@ (8001d24 <HAL_UART_MspInit+0x52c>)
 8001c64:	f043 0320 	orr.w	r3, r3, #32
 8001c68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c6a:	4b2e      	ldr	r3, [pc, #184]	@ (8001d24 <HAL_UART_MspInit+0x52c>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6e:	f003 0320 	and.w	r3, r3, #32
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c76:	4b2b      	ldr	r3, [pc, #172]	@ (8001d24 <HAL_UART_MspInit+0x52c>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	4a2a      	ldr	r2, [pc, #168]	@ (8001d24 <HAL_UART_MspInit+0x52c>)
 8001c7c:	f043 0304 	orr.w	r3, r3, #4
 8001c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c82:	4b28      	ldr	r3, [pc, #160]	@ (8001d24 <HAL_UART_MspInit+0x52c>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c8e:	23c0      	movs	r3, #192	@ 0xc0
 8001c90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2302      	movs	r3, #2
 8001c96:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ca6:	2308      	movs	r3, #8
 8001ca8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cac:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4825      	ldr	r0, [pc, #148]	@ (8001d48 <HAL_UART_MspInit+0x550>)
 8001cb4:	f001 f9c6 	bl	8003044 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001cb8:	4b24      	ldr	r3, [pc, #144]	@ (8001d4c <HAL_UART_MspInit+0x554>)
 8001cba:	4a25      	ldr	r2, [pc, #148]	@ (8001d50 <HAL_UART_MspInit+0x558>)
 8001cbc:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001cbe:	4b23      	ldr	r3, [pc, #140]	@ (8001d4c <HAL_UART_MspInit+0x554>)
 8001cc0:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001cc4:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cc6:	4b21      	ldr	r3, [pc, #132]	@ (8001d4c <HAL_UART_MspInit+0x554>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8001d4c <HAL_UART_MspInit+0x554>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d4c <HAL_UART_MspInit+0x554>)
 8001cd4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cd8:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cda:	4b1c      	ldr	r3, [pc, #112]	@ (8001d4c <HAL_UART_MspInit+0x554>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d4c <HAL_UART_MspInit+0x554>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8001ce6:	4b19      	ldr	r3, [pc, #100]	@ (8001d4c <HAL_UART_MspInit+0x554>)
 8001ce8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cec:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cee:	4b17      	ldr	r3, [pc, #92]	@ (8001d4c <HAL_UART_MspInit+0x554>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cf4:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <HAL_UART_MspInit+0x554>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001cfa:	4814      	ldr	r0, [pc, #80]	@ (8001d4c <HAL_UART_MspInit+0x554>)
 8001cfc:	f000 fe2a 	bl	8002954 <HAL_DMA_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_UART_MspInit+0x512>
      Error_Handler();
 8001d06:	f7ff fae9 	bl	80012dc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a0f      	ldr	r2, [pc, #60]	@ (8001d4c <HAL_UART_MspInit+0x554>)
 8001d0e:	675a      	str	r2, [r3, #116]	@ 0x74
 8001d10:	4a0e      	ldr	r2, [pc, #56]	@ (8001d4c <HAL_UART_MspInit+0x554>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001d16:	bf00      	nop
 8001d18:	37c8      	adds	r7, #200	@ 0xc8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40004400 	.word	0x40004400
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40020000 	.word	0x40020000
 8001d2c:	20000890 	.word	0x20000890
 8001d30:	40026088 	.word	0x40026088
 8001d34:	40004800 	.word	0x40004800
 8001d38:	40020400 	.word	0x40020400
 8001d3c:	200008f0 	.word	0x200008f0
 8001d40:	40026028 	.word	0x40026028
 8001d44:	40011400 	.word	0x40011400
 8001d48:	40020800 	.word	0x40020800
 8001d4c:	20000950 	.word	0x20000950
 8001d50:	40026428 	.word	0x40026428

08001d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001d58:	f003 fc28 	bl	80055ac <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d5c:	bf00      	nop
 8001d5e:	e7fd      	b.n	8001d5c <NMI_Handler+0x8>

08001d60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d64:	bf00      	nop
 8001d66:	e7fd      	b.n	8001d64 <HardFault_Handler+0x4>

08001d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <MemManage_Handler+0x4>

08001d70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <BusFault_Handler+0x4>

08001d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <UsageFault_Handler+0x4>

08001d80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dae:	f000 f96f 	bl	8002090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001dbc:	4802      	ldr	r0, [pc, #8]	@ (8001dc8 <DMA1_Stream1_IRQHandler+0x10>)
 8001dbe:	f000 fed7 	bl	8002b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200008f0 	.word	0x200008f0

08001dcc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001dd0:	4802      	ldr	r0, [pc, #8]	@ (8001ddc <DMA1_Stream2_IRQHandler+0x10>)
 8001dd2:	f000 fecd 	bl	8002b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000770 	.word	0x20000770

08001de0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001de4:	4802      	ldr	r0, [pc, #8]	@ (8001df0 <DMA1_Stream5_IRQHandler+0x10>)
 8001de6:	f000 fec3 	bl	8002b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000890 	.word	0x20000890

08001df4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001df8:	4802      	ldr	r0, [pc, #8]	@ (8001e04 <DMA2_Stream1_IRQHandler+0x10>)
 8001dfa:	f000 feb9 	bl	8002b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000950 	.word	0x20000950

08001e08 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001e0c:	4802      	ldr	r0, [pc, #8]	@ (8001e18 <DMA2_Stream2_IRQHandler+0x10>)
 8001e0e:	f000 feaf 	bl	8002b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	200007d0 	.word	0x200007d0

08001e1c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001e20:	4802      	ldr	r0, [pc, #8]	@ (8001e2c <DMA2_Stream3_IRQHandler+0x10>)
 8001e22:	f000 fea5 	bl	8002b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000468 	.word	0x20000468

08001e30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001e34:	4802      	ldr	r0, [pc, #8]	@ (8001e40 <OTG_FS_IRQHandler+0x10>)
 8001e36:	f001 fd3e 	bl	80038b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20001eac 	.word	0x20001eac

08001e44 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001e48:	4802      	ldr	r0, [pc, #8]	@ (8001e54 <DMA2_Stream7_IRQHandler+0x10>)
 8001e4a:	f000 fe91 	bl	8002b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000830 	.word	0x20000830

08001e58 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	e00a      	b.n	8001e80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e6a:	f3af 8000 	nop.w
 8001e6e:	4601      	mov	r1, r0
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	60ba      	str	r2, [r7, #8]
 8001e76:	b2ca      	uxtb	r2, r1
 8001e78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	dbf0      	blt.n	8001e6a <_read+0x12>
  }

  return len;
 8001e88:	687b      	ldr	r3, [r7, #4]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b086      	sub	sp, #24
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	e009      	b.n	8001eb8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	1c5a      	adds	r2, r3, #1
 8001ea8:	60ba      	str	r2, [r7, #8]
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	dbf1      	blt.n	8001ea4 <_write+0x12>
  }
  return len;
 8001ec0:	687b      	ldr	r3, [r7, #4]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <_close>:

int _close(int file)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ed2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ef2:	605a      	str	r2, [r3, #4]
  return 0;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <_isatty>:

int _isatty(int file)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f0a:	2301      	movs	r3, #1
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f3c:	4a14      	ldr	r2, [pc, #80]	@ (8001f90 <_sbrk+0x5c>)
 8001f3e:	4b15      	ldr	r3, [pc, #84]	@ (8001f94 <_sbrk+0x60>)
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f48:	4b13      	ldr	r3, [pc, #76]	@ (8001f98 <_sbrk+0x64>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d102      	bne.n	8001f56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f50:	4b11      	ldr	r3, [pc, #68]	@ (8001f98 <_sbrk+0x64>)
 8001f52:	4a12      	ldr	r2, [pc, #72]	@ (8001f9c <_sbrk+0x68>)
 8001f54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f56:	4b10      	ldr	r3, [pc, #64]	@ (8001f98 <_sbrk+0x64>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d207      	bcs.n	8001f74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f64:	f00b ff7a 	bl	800de5c <__errno>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	220c      	movs	r2, #12
 8001f6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f72:	e009      	b.n	8001f88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f74:	4b08      	ldr	r3, [pc, #32]	@ (8001f98 <_sbrk+0x64>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f7a:	4b07      	ldr	r3, [pc, #28]	@ (8001f98 <_sbrk+0x64>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	4a05      	ldr	r2, [pc, #20]	@ (8001f98 <_sbrk+0x64>)
 8001f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f86:	68fb      	ldr	r3, [r7, #12]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20040000 	.word	0x20040000
 8001f94:	00000400 	.word	0x00000400
 8001f98:	200009b0 	.word	0x200009b0
 8001f9c:	200024d8 	.word	0x200024d8

08001fa0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fa4:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <SystemInit+0x20>)
 8001fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001faa:	4a05      	ldr	r2, [pc, #20]	@ (8001fc0 <SystemInit+0x20>)
 8001fac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ffc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 8001fc8:	f7ff ffea 	bl	8001fa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fcc:	480c      	ldr	r0, [pc, #48]	@ (8002000 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fce:	490d      	ldr	r1, [pc, #52]	@ (8002004 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8002008 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd4:	e002      	b.n	8001fdc <LoopCopyDataInit>

08001fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fda:	3304      	adds	r3, #4

08001fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe0:	d3f9      	bcc.n	8001fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800200c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fe4:	4c0a      	ldr	r4, [pc, #40]	@ (8002010 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe8:	e001      	b.n	8001fee <LoopFillZerobss>

08001fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fec:	3204      	adds	r2, #4

08001fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff0:	d3fb      	bcc.n	8001fea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ff2:	f00b ff39 	bl	800de68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ff6:	f7fe fc83 	bl	8000900 <main>
  bx  lr    
 8001ffa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ffc:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002004:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8002008:	0800e958 	.word	0x0800e958
  ldr r2, =_sbss
 800200c:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8002010:	200024d8 	.word	0x200024d8

08002014 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002014:	e7fe      	b.n	8002014 <ADC_IRQHandler>

08002016 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800201a:	2003      	movs	r0, #3
 800201c:	f000 fbe0 	bl	80027e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002020:	200f      	movs	r0, #15
 8002022:	f000 f805 	bl	8002030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002026:	f7ff f95f 	bl	80012e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	bd80      	pop	{r7, pc}

08002030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002038:	4b12      	ldr	r3, [pc, #72]	@ (8002084 <HAL_InitTick+0x54>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b12      	ldr	r3, [pc, #72]	@ (8002088 <HAL_InitTick+0x58>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	4619      	mov	r1, r3
 8002042:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002046:	fbb3 f3f1 	udiv	r3, r3, r1
 800204a:	fbb2 f3f3 	udiv	r3, r2, r3
 800204e:	4618      	mov	r0, r3
 8002050:	f000 fbfb 	bl	800284a <HAL_SYSTICK_Config>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e00e      	b.n	800207c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b0f      	cmp	r3, #15
 8002062:	d80a      	bhi.n	800207a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002064:	2200      	movs	r2, #0
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800206c:	f000 fbc3 	bl	80027f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002070:	4a06      	ldr	r2, [pc, #24]	@ (800208c <HAL_InitTick+0x5c>)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	e000      	b.n	800207c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20000000 	.word	0x20000000
 8002088:	20000008 	.word	0x20000008
 800208c:	20000004 	.word	0x20000004

08002090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002094:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <HAL_IncTick+0x20>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	461a      	mov	r2, r3
 800209a:	4b06      	ldr	r3, [pc, #24]	@ (80020b4 <HAL_IncTick+0x24>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4413      	add	r3, r2
 80020a0:	4a04      	ldr	r2, [pc, #16]	@ (80020b4 <HAL_IncTick+0x24>)
 80020a2:	6013      	str	r3, [r2, #0]
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	20000008 	.word	0x20000008
 80020b4:	200009b4 	.word	0x200009b4

080020b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return uwTick;
 80020bc:	4b03      	ldr	r3, [pc, #12]	@ (80020cc <HAL_GetTick+0x14>)
 80020be:	681b      	ldr	r3, [r3, #0]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	200009b4 	.word	0x200009b4

080020d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020d8:	f7ff ffee 	bl	80020b8 <HAL_GetTick>
 80020dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020e8:	d005      	beq.n	80020f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002114 <HAL_Delay+0x44>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4413      	add	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020f6:	bf00      	nop
 80020f8:	f7ff ffde 	bl	80020b8 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	429a      	cmp	r2, r3
 8002106:	d8f7      	bhi.n	80020f8 <HAL_Delay+0x28>
  {
  }
}
 8002108:	bf00      	nop
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000008 	.word	0x20000008

08002118 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e031      	b.n	8002192 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002132:	2b00      	cmp	r3, #0
 8002134:	d109      	bne.n	800214a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff f8fa 	bl	8001330 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	2b00      	cmp	r3, #0
 8002154:	d116      	bne.n	8002184 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800215a:	4b10      	ldr	r3, [pc, #64]	@ (800219c <HAL_ADC_Init+0x84>)
 800215c:	4013      	ands	r3, r2
 800215e:	f043 0202 	orr.w	r2, r3, #2
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f970 	bl	800244c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002176:	f023 0303 	bic.w	r3, r3, #3
 800217a:	f043 0201 	orr.w	r2, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	641a      	str	r2, [r3, #64]	@ 0x40
 8002182:	e001      	b.n	8002188 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002190:	7bfb      	ldrb	r3, [r7, #15]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	ffffeefd 	.word	0xffffeefd

080021a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x1c>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e136      	b.n	800242a <HAL_ADC_ConfigChannel+0x28a>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b09      	cmp	r3, #9
 80021ca:	d93a      	bls.n	8002242 <HAL_ADC_ConfigChannel+0xa2>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80021d4:	d035      	beq.n	8002242 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68d9      	ldr	r1, [r3, #12]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	461a      	mov	r2, r3
 80021e4:	4613      	mov	r3, r2
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	4413      	add	r3, r2
 80021ea:	3b1e      	subs	r3, #30
 80021ec:	2207      	movs	r2, #7
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43da      	mvns	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	400a      	ands	r2, r1
 80021fa:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a8d      	ldr	r2, [pc, #564]	@ (8002438 <HAL_ADC_ConfigChannel+0x298>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d10a      	bne.n	800221c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68d9      	ldr	r1, [r3, #12]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	061a      	lsls	r2, r3, #24
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800221a:	e035      	b.n	8002288 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68d9      	ldr	r1, [r3, #12]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	b29b      	uxth	r3, r3
 800222c:	4618      	mov	r0, r3
 800222e:	4603      	mov	r3, r0
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	4403      	add	r3, r0
 8002234:	3b1e      	subs	r3, #30
 8002236:	409a      	lsls	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002240:	e022      	b.n	8002288 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6919      	ldr	r1, [r3, #16]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	b29b      	uxth	r3, r3
 800224e:	461a      	mov	r2, r3
 8002250:	4613      	mov	r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	4413      	add	r3, r2
 8002256:	2207      	movs	r2, #7
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43da      	mvns	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	400a      	ands	r2, r1
 8002264:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6919      	ldr	r1, [r3, #16]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	b29b      	uxth	r3, r3
 8002276:	4618      	mov	r0, r3
 8002278:	4603      	mov	r3, r0
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	4403      	add	r3, r0
 800227e:	409a      	lsls	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b06      	cmp	r3, #6
 800228e:	d824      	bhi.n	80022da <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	3b05      	subs	r3, #5
 80022a2:	221f      	movs	r2, #31
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43da      	mvns	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	400a      	ands	r2, r1
 80022b0:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	b29b      	uxth	r3, r3
 80022be:	4618      	mov	r0, r3
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	3b05      	subs	r3, #5
 80022cc:	fa00 f203 	lsl.w	r2, r0, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	635a      	str	r2, [r3, #52]	@ 0x34
 80022d8:	e04c      	b.n	8002374 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b0c      	cmp	r3, #12
 80022e0:	d824      	bhi.n	800232c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	3b23      	subs	r3, #35	@ 0x23
 80022f4:	221f      	movs	r2, #31
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43da      	mvns	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	400a      	ands	r2, r1
 8002302:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	b29b      	uxth	r3, r3
 8002310:	4618      	mov	r0, r3
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	3b23      	subs	r3, #35	@ 0x23
 800231e:	fa00 f203 	lsl.w	r2, r0, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	631a      	str	r2, [r3, #48]	@ 0x30
 800232a:	e023      	b.n	8002374 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	3b41      	subs	r3, #65	@ 0x41
 800233e:	221f      	movs	r2, #31
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43da      	mvns	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	400a      	ands	r2, r1
 800234c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	b29b      	uxth	r3, r3
 800235a:	4618      	mov	r0, r3
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	3b41      	subs	r3, #65	@ 0x41
 8002368:	fa00 f203 	lsl.w	r2, r0, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a30      	ldr	r2, [pc, #192]	@ (800243c <HAL_ADC_ConfigChannel+0x29c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d10a      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x1f4>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002386:	d105      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002388:	4b2d      	ldr	r3, [pc, #180]	@ (8002440 <HAL_ADC_ConfigChannel+0x2a0>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	4a2c      	ldr	r2, [pc, #176]	@ (8002440 <HAL_ADC_ConfigChannel+0x2a0>)
 800238e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002392:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a28      	ldr	r2, [pc, #160]	@ (800243c <HAL_ADC_ConfigChannel+0x29c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d10f      	bne.n	80023be <HAL_ADC_ConfigChannel+0x21e>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b12      	cmp	r3, #18
 80023a4:	d10b      	bne.n	80023be <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80023a6:	4b26      	ldr	r3, [pc, #152]	@ (8002440 <HAL_ADC_ConfigChannel+0x2a0>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	4a25      	ldr	r2, [pc, #148]	@ (8002440 <HAL_ADC_ConfigChannel+0x2a0>)
 80023ac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80023b0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80023b2:	4b23      	ldr	r3, [pc, #140]	@ (8002440 <HAL_ADC_ConfigChannel+0x2a0>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	4a22      	ldr	r2, [pc, #136]	@ (8002440 <HAL_ADC_ConfigChannel+0x2a0>)
 80023b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023bc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a1e      	ldr	r2, [pc, #120]	@ (800243c <HAL_ADC_ConfigChannel+0x29c>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d12b      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x280>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a1a      	ldr	r2, [pc, #104]	@ (8002438 <HAL_ADC_ConfigChannel+0x298>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d003      	beq.n	80023da <HAL_ADC_ConfigChannel+0x23a>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2b11      	cmp	r3, #17
 80023d8:	d122      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80023da:	4b19      	ldr	r3, [pc, #100]	@ (8002440 <HAL_ADC_ConfigChannel+0x2a0>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	4a18      	ldr	r2, [pc, #96]	@ (8002440 <HAL_ADC_ConfigChannel+0x2a0>)
 80023e0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80023e4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80023e6:	4b16      	ldr	r3, [pc, #88]	@ (8002440 <HAL_ADC_ConfigChannel+0x2a0>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4a15      	ldr	r2, [pc, #84]	@ (8002440 <HAL_ADC_ConfigChannel+0x2a0>)
 80023ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80023f0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a10      	ldr	r2, [pc, #64]	@ (8002438 <HAL_ADC_ConfigChannel+0x298>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d111      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80023fc:	4b11      	ldr	r3, [pc, #68]	@ (8002444 <HAL_ADC_ConfigChannel+0x2a4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a11      	ldr	r2, [pc, #68]	@ (8002448 <HAL_ADC_ConfigChannel+0x2a8>)
 8002402:	fba2 2303 	umull	r2, r3, r2, r3
 8002406:	0c9a      	lsrs	r2, r3, #18
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002412:	e002      	b.n	800241a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	3b01      	subs	r3, #1
 8002418:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f9      	bne.n	8002414 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	10000012 	.word	0x10000012
 800243c:	40012000 	.word	0x40012000
 8002440:	40012300 	.word	0x40012300
 8002444:	20000000 	.word	0x20000000
 8002448:	431bde83 	.word	0x431bde83

0800244c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002454:	4b78      	ldr	r3, [pc, #480]	@ (8002638 <ADC_Init+0x1ec>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	4a77      	ldr	r2, [pc, #476]	@ (8002638 <ADC_Init+0x1ec>)
 800245a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800245e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002460:	4b75      	ldr	r3, [pc, #468]	@ (8002638 <ADC_Init+0x1ec>)
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	4973      	ldr	r1, [pc, #460]	@ (8002638 <ADC_Init+0x1ec>)
 800246a:	4313      	orrs	r3, r2
 800246c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800247c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6859      	ldr	r1, [r3, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	021a      	lsls	r2, r3, #8
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80024a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6859      	ldr	r1, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6899      	ldr	r1, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024da:	4a58      	ldr	r2, [pc, #352]	@ (800263c <ADC_Init+0x1f0>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d022      	beq.n	8002526 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6899      	ldr	r1, [r3, #8]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002510:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6899      	ldr	r1, [r3, #8]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	e00f      	b.n	8002546 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002534:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002544:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0202 	bic.w	r2, r2, #2
 8002554:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6899      	ldr	r1, [r3, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	005a      	lsls	r2, r3, #1
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d01b      	beq.n	80025ac <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002582:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002592:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6859      	ldr	r1, [r3, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259e:	3b01      	subs	r3, #1
 80025a0:	035a      	lsls	r2, r3, #13
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	e007      	b.n	80025bc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80025ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	051a      	lsls	r2, r3, #20
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80025f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6899      	ldr	r1, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80025fe:	025a      	lsls	r2, r3, #9
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002616:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6899      	ldr	r1, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	029a      	lsls	r2, r3, #10
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	609a      	str	r2, [r3, #8]
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	40012300 	.word	0x40012300
 800263c:	0f000001 	.word	0x0f000001

08002640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002650:	4b0b      	ldr	r3, [pc, #44]	@ (8002680 <__NVIC_SetPriorityGrouping+0x40>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800265c:	4013      	ands	r3, r2
 800265e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002668:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <__NVIC_SetPriorityGrouping+0x44>)
 800266a:	4313      	orrs	r3, r2
 800266c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800266e:	4a04      	ldr	r2, [pc, #16]	@ (8002680 <__NVIC_SetPriorityGrouping+0x40>)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	60d3      	str	r3, [r2, #12]
}
 8002674:	bf00      	nop
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000ed00 	.word	0xe000ed00
 8002684:	05fa0000 	.word	0x05fa0000

08002688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800268c:	4b04      	ldr	r3, [pc, #16]	@ (80026a0 <__NVIC_GetPriorityGrouping+0x18>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	0a1b      	lsrs	r3, r3, #8
 8002692:	f003 0307 	and.w	r3, r3, #7
}
 8002696:	4618      	mov	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	db0b      	blt.n	80026ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	f003 021f 	and.w	r2, r3, #31
 80026bc:	4907      	ldr	r1, [pc, #28]	@ (80026dc <__NVIC_EnableIRQ+0x38>)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	095b      	lsrs	r3, r3, #5
 80026c4:	2001      	movs	r0, #1
 80026c6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	e000e100 	.word	0xe000e100

080026e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	6039      	str	r1, [r7, #0]
 80026ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	db0a      	blt.n	800270a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	490c      	ldr	r1, [pc, #48]	@ (800272c <__NVIC_SetPriority+0x4c>)
 80026fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fe:	0112      	lsls	r2, r2, #4
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	440b      	add	r3, r1
 8002704:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002708:	e00a      	b.n	8002720 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	b2da      	uxtb	r2, r3
 800270e:	4908      	ldr	r1, [pc, #32]	@ (8002730 <__NVIC_SetPriority+0x50>)
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	3b04      	subs	r3, #4
 8002718:	0112      	lsls	r2, r2, #4
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	440b      	add	r3, r1
 800271e:	761a      	strb	r2, [r3, #24]
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	e000e100 	.word	0xe000e100
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002734:	b480      	push	{r7}
 8002736:	b089      	sub	sp, #36	@ 0x24
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f1c3 0307 	rsb	r3, r3, #7
 800274e:	2b04      	cmp	r3, #4
 8002750:	bf28      	it	cs
 8002752:	2304      	movcs	r3, #4
 8002754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3304      	adds	r3, #4
 800275a:	2b06      	cmp	r3, #6
 800275c:	d902      	bls.n	8002764 <NVIC_EncodePriority+0x30>
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3b03      	subs	r3, #3
 8002762:	e000      	b.n	8002766 <NVIC_EncodePriority+0x32>
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002768:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43da      	mvns	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	401a      	ands	r2, r3
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800277c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	fa01 f303 	lsl.w	r3, r1, r3
 8002786:	43d9      	mvns	r1, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800278c:	4313      	orrs	r3, r2
         );
}
 800278e:	4618      	mov	r0, r3
 8002790:	3724      	adds	r7, #36	@ 0x24
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
	...

0800279c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027ac:	d301      	bcc.n	80027b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ae:	2301      	movs	r3, #1
 80027b0:	e00f      	b.n	80027d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027b2:	4a0a      	ldr	r2, [pc, #40]	@ (80027dc <SysTick_Config+0x40>)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ba:	210f      	movs	r1, #15
 80027bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80027c0:	f7ff ff8e 	bl	80026e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027c4:	4b05      	ldr	r3, [pc, #20]	@ (80027dc <SysTick_Config+0x40>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ca:	4b04      	ldr	r3, [pc, #16]	@ (80027dc <SysTick_Config+0x40>)
 80027cc:	2207      	movs	r2, #7
 80027ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	e000e010 	.word	0xe000e010

080027e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f7ff ff29 	bl	8002640 <__NVIC_SetPriorityGrouping>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b086      	sub	sp, #24
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	4603      	mov	r3, r0
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	607a      	str	r2, [r7, #4]
 8002802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002808:	f7ff ff3e 	bl	8002688 <__NVIC_GetPriorityGrouping>
 800280c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	68b9      	ldr	r1, [r7, #8]
 8002812:	6978      	ldr	r0, [r7, #20]
 8002814:	f7ff ff8e 	bl	8002734 <NVIC_EncodePriority>
 8002818:	4602      	mov	r2, r0
 800281a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800281e:	4611      	mov	r1, r2
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff ff5d 	bl	80026e0 <__NVIC_SetPriority>
}
 8002826:	bf00      	nop
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0
 8002834:	4603      	mov	r3, r0
 8002836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff ff31 	bl	80026a4 <__NVIC_EnableIRQ>
}
 8002842:	bf00      	nop
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff ffa2 	bl	800279c <SysTick_Config>
 8002858:	4603      	mov	r3, r0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002868:	f3bf 8f5f 	dmb	sy
}
 800286c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800286e:	4b07      	ldr	r3, [pc, #28]	@ (800288c <HAL_MPU_Disable+0x28>)
 8002870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002872:	4a06      	ldr	r2, [pc, #24]	@ (800288c <HAL_MPU_Disable+0x28>)
 8002874:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002878:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800287a:	4b05      	ldr	r3, [pc, #20]	@ (8002890 <HAL_MPU_Disable+0x2c>)
 800287c:	2200      	movs	r2, #0
 800287e:	605a      	str	r2, [r3, #4]
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	e000ed00 	.word	0xe000ed00
 8002890:	e000ed90 	.word	0xe000ed90

08002894 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800289c:	4a0b      	ldr	r2, [pc, #44]	@ (80028cc <HAL_MPU_Enable+0x38>)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80028a6:	4b0a      	ldr	r3, [pc, #40]	@ (80028d0 <HAL_MPU_Enable+0x3c>)
 80028a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028aa:	4a09      	ldr	r2, [pc, #36]	@ (80028d0 <HAL_MPU_Enable+0x3c>)
 80028ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80028b2:	f3bf 8f4f 	dsb	sy
}
 80028b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80028b8:	f3bf 8f6f 	isb	sy
}
 80028bc:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	e000ed90 	.word	0xe000ed90
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	785a      	ldrb	r2, [r3, #1]
 80028e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002950 <HAL_MPU_ConfigRegion+0x7c>)
 80028e2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80028e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002950 <HAL_MPU_ConfigRegion+0x7c>)
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	4a19      	ldr	r2, [pc, #100]	@ (8002950 <HAL_MPU_ConfigRegion+0x7c>)
 80028ea:	f023 0301 	bic.w	r3, r3, #1
 80028ee:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80028f0:	4a17      	ldr	r2, [pc, #92]	@ (8002950 <HAL_MPU_ConfigRegion+0x7c>)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	7b1b      	ldrb	r3, [r3, #12]
 80028fc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	7adb      	ldrb	r3, [r3, #11]
 8002902:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002904:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	7a9b      	ldrb	r3, [r3, #10]
 800290a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800290c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	7b5b      	ldrb	r3, [r3, #13]
 8002912:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002914:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	7b9b      	ldrb	r3, [r3, #14]
 800291a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800291c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	7bdb      	ldrb	r3, [r3, #15]
 8002922:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002924:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	7a5b      	ldrb	r3, [r3, #9]
 800292a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800292c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	7a1b      	ldrb	r3, [r3, #8]
 8002932:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002934:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	7812      	ldrb	r2, [r2, #0]
 800293a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800293c:	4a04      	ldr	r2, [pc, #16]	@ (8002950 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800293e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002940:	6113      	str	r3, [r2, #16]
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	e000ed90 	.word	0xe000ed90

08002954 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800295c:	2300      	movs	r3, #0
 800295e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002960:	f7ff fbaa 	bl	80020b8 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e099      	b.n	8002aa4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2202      	movs	r2, #2
 8002974:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0201 	bic.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002990:	e00f      	b.n	80029b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002992:	f7ff fb91 	bl	80020b8 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b05      	cmp	r3, #5
 800299e:	d908      	bls.n	80029b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2220      	movs	r2, #32
 80029a4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2203      	movs	r2, #3
 80029aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e078      	b.n	8002aa4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1e8      	bne.n	8002992 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	4b38      	ldr	r3, [pc, #224]	@ (8002aac <HAL_DMA_Init+0x158>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d107      	bne.n	8002a1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a14:	4313      	orrs	r3, r2
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f023 0307 	bic.w	r3, r3, #7
 8002a32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d117      	bne.n	8002a76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00e      	beq.n	8002a76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 fa77 	bl	8002f4c <DMA_CheckFifoParam>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2240      	movs	r2, #64	@ 0x40
 8002a68:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002a72:	2301      	movs	r3, #1
 8002a74:	e016      	b.n	8002aa4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 fa2e 	bl	8002ee0 <DMA_CalcBaseAndBitshift>
 8002a84:	4603      	mov	r3, r0
 8002a86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a8c:	223f      	movs	r2, #63	@ 0x3f
 8002a8e:	409a      	lsls	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	e010803f 	.word	0xe010803f

08002ab0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
 8002abc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <HAL_DMA_Start_IT+0x26>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e048      	b.n	8002b68 <HAL_DMA_Start_IT+0xb8>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d137      	bne.n	8002b5a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2202      	movs	r2, #2
 8002aee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	68b9      	ldr	r1, [r7, #8]
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f9c0 	bl	8002e84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b08:	223f      	movs	r2, #63	@ 0x3f
 8002b0a:	409a      	lsls	r2, r3
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0216 	orr.w	r2, r2, #22
 8002b1e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695a      	ldr	r2, [r3, #20]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002b2e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d007      	beq.n	8002b48 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0208 	orr.w	r2, r2, #8
 8002b46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0201 	orr.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	e005      	b.n	8002b66 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b62:	2302      	movs	r3, #2
 8002b64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002b7c:	4b8e      	ldr	r3, [pc, #568]	@ (8002db8 <HAL_DMA_IRQHandler+0x248>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a8e      	ldr	r2, [pc, #568]	@ (8002dbc <HAL_DMA_IRQHandler+0x24c>)
 8002b82:	fba2 2303 	umull	r2, r3, r2, r3
 8002b86:	0a9b      	lsrs	r3, r3, #10
 8002b88:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b9a:	2208      	movs	r2, #8
 8002b9c:	409a      	lsls	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d01a      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d013      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0204 	bic.w	r2, r2, #4
 8002bc2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc8:	2208      	movs	r2, #8
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd4:	f043 0201 	orr.w	r2, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be0:	2201      	movs	r2, #1
 8002be2:	409a      	lsls	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4013      	ands	r3, r2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d012      	beq.n	8002c12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00b      	beq.n	8002c12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfe:	2201      	movs	r2, #1
 8002c00:	409a      	lsls	r2, r3
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0a:	f043 0202 	orr.w	r2, r3, #2
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c16:	2204      	movs	r2, #4
 8002c18:	409a      	lsls	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d012      	beq.n	8002c48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00b      	beq.n	8002c48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c34:	2204      	movs	r2, #4
 8002c36:	409a      	lsls	r2, r3
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c40:	f043 0204 	orr.w	r2, r3, #4
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4c:	2210      	movs	r2, #16
 8002c4e:	409a      	lsls	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d043      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d03c      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c6a:	2210      	movs	r2, #16
 8002c6c:	409a      	lsls	r2, r3
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d018      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d108      	bne.n	8002ca0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d024      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	4798      	blx	r3
 8002c9e:	e01f      	b.n	8002ce0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d01b      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	4798      	blx	r3
 8002cb0:	e016      	b.n	8002ce0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d107      	bne.n	8002cd0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0208 	bic.w	r2, r2, #8
 8002cce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	409a      	lsls	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 808f 	beq.w	8002e10 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0310 	and.w	r3, r3, #16
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 8087 	beq.w	8002e10 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d06:	2220      	movs	r2, #32
 8002d08:	409a      	lsls	r2, r3
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b05      	cmp	r3, #5
 8002d18:	d136      	bne.n	8002d88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0216 	bic.w	r2, r2, #22
 8002d28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695a      	ldr	r2, [r3, #20]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d103      	bne.n	8002d4a <HAL_DMA_IRQHandler+0x1da>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d007      	beq.n	8002d5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0208 	bic.w	r2, r2, #8
 8002d58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d5e:	223f      	movs	r2, #63	@ 0x3f
 8002d60:	409a      	lsls	r2, r3
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d07e      	beq.n	8002e7c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	4798      	blx	r3
        }
        return;
 8002d86:	e079      	b.n	8002e7c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d01d      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10d      	bne.n	8002dc0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d031      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	4798      	blx	r3
 8002db4:	e02c      	b.n	8002e10 <HAL_DMA_IRQHandler+0x2a0>
 8002db6:	bf00      	nop
 8002db8:	20000000 	.word	0x20000000
 8002dbc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d023      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	4798      	blx	r3
 8002dd0:	e01e      	b.n	8002e10 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10f      	bne.n	8002e00 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0210 	bic.w	r2, r2, #16
 8002dee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d032      	beq.n	8002e7e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d022      	beq.n	8002e6a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2205      	movs	r2, #5
 8002e28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0201 	bic.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d307      	bcc.n	8002e58 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f2      	bne.n	8002e3c <HAL_DMA_IRQHandler+0x2cc>
 8002e56:	e000      	b.n	8002e5a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e58:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d005      	beq.n	8002e7e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	4798      	blx	r3
 8002e7a:	e000      	b.n	8002e7e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e7c:	bf00      	nop
    }
  }
}
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
 8002e90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002ea0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	2b40      	cmp	r3, #64	@ 0x40
 8002eb0:	d108      	bne.n	8002ec4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ec2:	e007      	b.n	8002ed4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	60da      	str	r2, [r3, #12]
}
 8002ed4:	bf00      	nop
 8002ed6:	3714      	adds	r7, #20
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	3b10      	subs	r3, #16
 8002ef0:	4a13      	ldr	r2, [pc, #76]	@ (8002f40 <DMA_CalcBaseAndBitshift+0x60>)
 8002ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef6:	091b      	lsrs	r3, r3, #4
 8002ef8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002efa:	4a12      	ldr	r2, [pc, #72]	@ (8002f44 <DMA_CalcBaseAndBitshift+0x64>)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4413      	add	r3, r2
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	461a      	mov	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2b03      	cmp	r3, #3
 8002f0c:	d908      	bls.n	8002f20 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	4b0c      	ldr	r3, [pc, #48]	@ (8002f48 <DMA_CalcBaseAndBitshift+0x68>)
 8002f16:	4013      	ands	r3, r2
 8002f18:	1d1a      	adds	r2, r3, #4
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f1e:	e006      	b.n	8002f2e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	461a      	mov	r2, r3
 8002f26:	4b08      	ldr	r3, [pc, #32]	@ (8002f48 <DMA_CalcBaseAndBitshift+0x68>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	aaaaaaab 	.word	0xaaaaaaab
 8002f44:	0800e8f8 	.word	0x0800e8f8
 8002f48:	fffffc00 	.word	0xfffffc00

08002f4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f54:	2300      	movs	r3, #0
 8002f56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d11f      	bne.n	8002fa6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	2b03      	cmp	r3, #3
 8002f6a:	d856      	bhi.n	800301a <DMA_CheckFifoParam+0xce>
 8002f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f74 <DMA_CheckFifoParam+0x28>)
 8002f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f72:	bf00      	nop
 8002f74:	08002f85 	.word	0x08002f85
 8002f78:	08002f97 	.word	0x08002f97
 8002f7c:	08002f85 	.word	0x08002f85
 8002f80:	0800301b 	.word	0x0800301b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d046      	beq.n	800301e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f94:	e043      	b.n	800301e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f9e:	d140      	bne.n	8003022 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fa4:	e03d      	b.n	8003022 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fae:	d121      	bne.n	8002ff4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	d837      	bhi.n	8003026 <DMA_CheckFifoParam+0xda>
 8002fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8002fbc <DMA_CheckFifoParam+0x70>)
 8002fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fbc:	08002fcd 	.word	0x08002fcd
 8002fc0:	08002fd3 	.word	0x08002fd3
 8002fc4:	08002fcd 	.word	0x08002fcd
 8002fc8:	08002fe5 	.word	0x08002fe5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	73fb      	strb	r3, [r7, #15]
      break;
 8002fd0:	e030      	b.n	8003034 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d025      	beq.n	800302a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fe2:	e022      	b.n	800302a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002fec:	d11f      	bne.n	800302e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ff2:	e01c      	b.n	800302e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d903      	bls.n	8003002 <DMA_CheckFifoParam+0xb6>
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b03      	cmp	r3, #3
 8002ffe:	d003      	beq.n	8003008 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003000:	e018      	b.n	8003034 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	73fb      	strb	r3, [r7, #15]
      break;
 8003006:	e015      	b.n	8003034 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00e      	beq.n	8003032 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	73fb      	strb	r3, [r7, #15]
      break;
 8003018:	e00b      	b.n	8003032 <DMA_CheckFifoParam+0xe6>
      break;
 800301a:	bf00      	nop
 800301c:	e00a      	b.n	8003034 <DMA_CheckFifoParam+0xe8>
      break;
 800301e:	bf00      	nop
 8003020:	e008      	b.n	8003034 <DMA_CheckFifoParam+0xe8>
      break;
 8003022:	bf00      	nop
 8003024:	e006      	b.n	8003034 <DMA_CheckFifoParam+0xe8>
      break;
 8003026:	bf00      	nop
 8003028:	e004      	b.n	8003034 <DMA_CheckFifoParam+0xe8>
      break;
 800302a:	bf00      	nop
 800302c:	e002      	b.n	8003034 <DMA_CheckFifoParam+0xe8>
      break;   
 800302e:	bf00      	nop
 8003030:	e000      	b.n	8003034 <DMA_CheckFifoParam+0xe8>
      break;
 8003032:	bf00      	nop
    }
  } 
  
  return status; 
 8003034:	7bfb      	ldrb	r3, [r7, #15]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop

08003044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003044:	b480      	push	{r7}
 8003046:	b089      	sub	sp, #36	@ 0x24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800304e:	2300      	movs	r3, #0
 8003050:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003052:	2300      	movs	r3, #0
 8003054:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003056:	2300      	movs	r3, #0
 8003058:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800305a:	2300      	movs	r3, #0
 800305c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800305e:	2300      	movs	r3, #0
 8003060:	61fb      	str	r3, [r7, #28]
 8003062:	e169      	b.n	8003338 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003064:	2201      	movs	r2, #1
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	4013      	ands	r3, r2
 8003076:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	429a      	cmp	r2, r3
 800307e:	f040 8158 	bne.w	8003332 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	2b01      	cmp	r3, #1
 800308c:	d005      	beq.n	800309a <HAL_GPIO_Init+0x56>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d130      	bne.n	80030fc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	2203      	movs	r2, #3
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43db      	mvns	r3, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4013      	ands	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030d0:	2201      	movs	r2, #1
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	4013      	ands	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	091b      	lsrs	r3, r3, #4
 80030e6:	f003 0201 	and.w	r2, r3, #1
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	2b03      	cmp	r3, #3
 8003106:	d017      	beq.n	8003138 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	2203      	movs	r2, #3
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4013      	ands	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4313      	orrs	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 0303 	and.w	r3, r3, #3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d123      	bne.n	800318c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	08da      	lsrs	r2, r3, #3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3208      	adds	r2, #8
 800314c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	220f      	movs	r2, #15
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	691a      	ldr	r2, [r3, #16]
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	08da      	lsrs	r2, r3, #3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3208      	adds	r2, #8
 8003186:	69b9      	ldr	r1, [r7, #24]
 8003188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	2203      	movs	r2, #3
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	43db      	mvns	r3, r3
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4013      	ands	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 0203 	and.w	r2, r3, #3
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 80b2 	beq.w	8003332 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ce:	4b60      	ldr	r3, [pc, #384]	@ (8003350 <HAL_GPIO_Init+0x30c>)
 80031d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d2:	4a5f      	ldr	r2, [pc, #380]	@ (8003350 <HAL_GPIO_Init+0x30c>)
 80031d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80031da:	4b5d      	ldr	r3, [pc, #372]	@ (8003350 <HAL_GPIO_Init+0x30c>)
 80031dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80031e6:	4a5b      	ldr	r2, [pc, #364]	@ (8003354 <HAL_GPIO_Init+0x310>)
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	089b      	lsrs	r3, r3, #2
 80031ec:	3302      	adds	r3, #2
 80031ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	220f      	movs	r2, #15
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43db      	mvns	r3, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4013      	ands	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a52      	ldr	r2, [pc, #328]	@ (8003358 <HAL_GPIO_Init+0x314>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d02b      	beq.n	800326a <HAL_GPIO_Init+0x226>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a51      	ldr	r2, [pc, #324]	@ (800335c <HAL_GPIO_Init+0x318>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d025      	beq.n	8003266 <HAL_GPIO_Init+0x222>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a50      	ldr	r2, [pc, #320]	@ (8003360 <HAL_GPIO_Init+0x31c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d01f      	beq.n	8003262 <HAL_GPIO_Init+0x21e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a4f      	ldr	r2, [pc, #316]	@ (8003364 <HAL_GPIO_Init+0x320>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d019      	beq.n	800325e <HAL_GPIO_Init+0x21a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a4e      	ldr	r2, [pc, #312]	@ (8003368 <HAL_GPIO_Init+0x324>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d013      	beq.n	800325a <HAL_GPIO_Init+0x216>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a4d      	ldr	r2, [pc, #308]	@ (800336c <HAL_GPIO_Init+0x328>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d00d      	beq.n	8003256 <HAL_GPIO_Init+0x212>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a4c      	ldr	r2, [pc, #304]	@ (8003370 <HAL_GPIO_Init+0x32c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d007      	beq.n	8003252 <HAL_GPIO_Init+0x20e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a4b      	ldr	r2, [pc, #300]	@ (8003374 <HAL_GPIO_Init+0x330>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d101      	bne.n	800324e <HAL_GPIO_Init+0x20a>
 800324a:	2307      	movs	r3, #7
 800324c:	e00e      	b.n	800326c <HAL_GPIO_Init+0x228>
 800324e:	2308      	movs	r3, #8
 8003250:	e00c      	b.n	800326c <HAL_GPIO_Init+0x228>
 8003252:	2306      	movs	r3, #6
 8003254:	e00a      	b.n	800326c <HAL_GPIO_Init+0x228>
 8003256:	2305      	movs	r3, #5
 8003258:	e008      	b.n	800326c <HAL_GPIO_Init+0x228>
 800325a:	2304      	movs	r3, #4
 800325c:	e006      	b.n	800326c <HAL_GPIO_Init+0x228>
 800325e:	2303      	movs	r3, #3
 8003260:	e004      	b.n	800326c <HAL_GPIO_Init+0x228>
 8003262:	2302      	movs	r3, #2
 8003264:	e002      	b.n	800326c <HAL_GPIO_Init+0x228>
 8003266:	2301      	movs	r3, #1
 8003268:	e000      	b.n	800326c <HAL_GPIO_Init+0x228>
 800326a:	2300      	movs	r3, #0
 800326c:	69fa      	ldr	r2, [r7, #28]
 800326e:	f002 0203 	and.w	r2, r2, #3
 8003272:	0092      	lsls	r2, r2, #2
 8003274:	4093      	lsls	r3, r2
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4313      	orrs	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800327c:	4935      	ldr	r1, [pc, #212]	@ (8003354 <HAL_GPIO_Init+0x310>)
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	089b      	lsrs	r3, r3, #2
 8003282:	3302      	adds	r3, #2
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800328a:	4b3b      	ldr	r3, [pc, #236]	@ (8003378 <HAL_GPIO_Init+0x334>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	43db      	mvns	r3, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4013      	ands	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032ae:	4a32      	ldr	r2, [pc, #200]	@ (8003378 <HAL_GPIO_Init+0x334>)
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032b4:	4b30      	ldr	r3, [pc, #192]	@ (8003378 <HAL_GPIO_Init+0x334>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	43db      	mvns	r3, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4013      	ands	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032d8:	4a27      	ldr	r2, [pc, #156]	@ (8003378 <HAL_GPIO_Init+0x334>)
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032de:	4b26      	ldr	r3, [pc, #152]	@ (8003378 <HAL_GPIO_Init+0x334>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	43db      	mvns	r3, r3
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4013      	ands	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4313      	orrs	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003302:	4a1d      	ldr	r2, [pc, #116]	@ (8003378 <HAL_GPIO_Init+0x334>)
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003308:	4b1b      	ldr	r3, [pc, #108]	@ (8003378 <HAL_GPIO_Init+0x334>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	43db      	mvns	r3, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4013      	ands	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	4313      	orrs	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800332c:	4a12      	ldr	r2, [pc, #72]	@ (8003378 <HAL_GPIO_Init+0x334>)
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	3301      	adds	r3, #1
 8003336:	61fb      	str	r3, [r7, #28]
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	2b0f      	cmp	r3, #15
 800333c:	f67f ae92 	bls.w	8003064 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003340:	bf00      	nop
 8003342:	bf00      	nop
 8003344:	3724      	adds	r7, #36	@ 0x24
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40023800 	.word	0x40023800
 8003354:	40013800 	.word	0x40013800
 8003358:	40020000 	.word	0x40020000
 800335c:	40020400 	.word	0x40020400
 8003360:	40020800 	.word	0x40020800
 8003364:	40020c00 	.word	0x40020c00
 8003368:	40021000 	.word	0x40021000
 800336c:	40021400 	.word	0x40021400
 8003370:	40021800 	.word	0x40021800
 8003374:	40021c00 	.word	0x40021c00
 8003378:	40013c00 	.word	0x40013c00

0800337c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	460b      	mov	r3, r1
 8003386:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	887b      	ldrh	r3, [r7, #2]
 800338e:	4013      	ands	r3, r2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003394:	2301      	movs	r3, #1
 8003396:	73fb      	strb	r3, [r7, #15]
 8003398:	e001      	b.n	800339e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800339a:	2300      	movs	r3, #0
 800339c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800339e:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	807b      	strh	r3, [r7, #2]
 80033b8:	4613      	mov	r3, r2
 80033ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033bc:	787b      	ldrb	r3, [r7, #1]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033c2:	887a      	ldrh	r2, [r7, #2]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80033c8:	e003      	b.n	80033d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80033ca:	887b      	ldrh	r3, [r7, #2]
 80033cc:	041a      	lsls	r2, r3, #16
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	619a      	str	r2, [r3, #24]
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
	...

080033e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e08b      	b.n	800350a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d106      	bne.n	800340c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7fd ffd2 	bl	80013b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2224      	movs	r2, #36	@ 0x24
 8003410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0201 	bic.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003430:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003440:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d107      	bne.n	800345a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003456:	609a      	str	r2, [r3, #8]
 8003458:	e006      	b.n	8003468 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003466:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	2b02      	cmp	r3, #2
 800346e:	d108      	bne.n	8003482 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800347e:	605a      	str	r2, [r3, #4]
 8003480:	e007      	b.n	8003492 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003490:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6859      	ldr	r1, [r3, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	4b1d      	ldr	r3, [pc, #116]	@ (8003514 <HAL_I2C_Init+0x134>)
 800349e:	430b      	orrs	r3, r1
 80034a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691a      	ldr	r2, [r3, #16]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69d9      	ldr	r1, [r3, #28]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a1a      	ldr	r2, [r3, #32]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0201 	orr.w	r2, r2, #1
 80034ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	02008000 	.word	0x02008000

08003518 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b20      	cmp	r3, #32
 800352c:	d138      	bne.n	80035a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003538:	2302      	movs	r3, #2
 800353a:	e032      	b.n	80035a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2224      	movs	r2, #36	@ 0x24
 8003548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 0201 	bic.w	r2, r2, #1
 800355a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800356a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6819      	ldr	r1, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0201 	orr.w	r2, r2, #1
 800358a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800359c:	2300      	movs	r3, #0
 800359e:	e000      	b.n	80035a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035a0:	2302      	movs	r3, #2
  }
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b085      	sub	sp, #20
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
 80035b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b20      	cmp	r3, #32
 80035c2:	d139      	bne.n	8003638 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e033      	b.n	800363a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2224      	movs	r2, #36	@ 0x24
 80035de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0201 	bic.w	r2, r2, #1
 80035f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003600:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	021b      	lsls	r3, r3, #8
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4313      	orrs	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003634:	2300      	movs	r3, #0
 8003636:	e000      	b.n	800363a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003638:	2302      	movs	r3, #2
  }
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b086      	sub	sp, #24
 800364a:	af02      	add	r7, sp, #8
 800364c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e108      	b.n	800386a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d106      	bne.n	8003678 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f009 fe4c 	bl	800d310 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2203      	movs	r2, #3
 800367c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003686:	d102      	bne.n	800368e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f006 f853 	bl	800973e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6818      	ldr	r0, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	7c1a      	ldrb	r2, [r3, #16]
 80036a0:	f88d 2000 	strb.w	r2, [sp]
 80036a4:	3304      	adds	r3, #4
 80036a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036a8:	f005 ff0a 	bl	80094c0 <USB_CoreInit>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d005      	beq.n	80036be <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2202      	movs	r2, #2
 80036b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e0d5      	b.n	800386a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2100      	movs	r1, #0
 80036c4:	4618      	mov	r0, r3
 80036c6:	f006 f84b 	bl	8009760 <USB_SetCurrentMode>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2202      	movs	r2, #2
 80036d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e0c6      	b.n	800386a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036dc:	2300      	movs	r3, #0
 80036de:	73fb      	strb	r3, [r7, #15]
 80036e0:	e04a      	b.n	8003778 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036e2:	7bfa      	ldrb	r2, [r7, #15]
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	4613      	mov	r3, r2
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	4413      	add	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	440b      	add	r3, r1
 80036f0:	3315      	adds	r3, #21
 80036f2:	2201      	movs	r2, #1
 80036f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036f6:	7bfa      	ldrb	r2, [r7, #15]
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	3314      	adds	r3, #20
 8003706:	7bfa      	ldrb	r2, [r7, #15]
 8003708:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800370a:	7bfa      	ldrb	r2, [r7, #15]
 800370c:	7bfb      	ldrb	r3, [r7, #15]
 800370e:	b298      	uxth	r0, r3
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	4613      	mov	r3, r2
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	332e      	adds	r3, #46	@ 0x2e
 800371e:	4602      	mov	r2, r0
 8003720:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003722:	7bfa      	ldrb	r2, [r7, #15]
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	4613      	mov	r3, r2
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	4413      	add	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	440b      	add	r3, r1
 8003730:	3318      	adds	r3, #24
 8003732:	2200      	movs	r2, #0
 8003734:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003736:	7bfa      	ldrb	r2, [r7, #15]
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	4613      	mov	r3, r2
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	4413      	add	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	440b      	add	r3, r1
 8003744:	331c      	adds	r3, #28
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800374a:	7bfa      	ldrb	r2, [r7, #15]
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	4613      	mov	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	3320      	adds	r3, #32
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800375e:	7bfa      	ldrb	r2, [r7, #15]
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	4413      	add	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	3324      	adds	r3, #36	@ 0x24
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003772:	7bfb      	ldrb	r3, [r7, #15]
 8003774:	3301      	adds	r3, #1
 8003776:	73fb      	strb	r3, [r7, #15]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	791b      	ldrb	r3, [r3, #4]
 800377c:	7bfa      	ldrb	r2, [r7, #15]
 800377e:	429a      	cmp	r2, r3
 8003780:	d3af      	bcc.n	80036e2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003782:	2300      	movs	r3, #0
 8003784:	73fb      	strb	r3, [r7, #15]
 8003786:	e044      	b.n	8003812 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003788:	7bfa      	ldrb	r2, [r7, #15]
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	4613      	mov	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	4413      	add	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800379a:	2200      	movs	r2, #0
 800379c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800379e:	7bfa      	ldrb	r2, [r7, #15]
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	4413      	add	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	440b      	add	r3, r1
 80037ac:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80037b0:	7bfa      	ldrb	r2, [r7, #15]
 80037b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037b4:	7bfa      	ldrb	r2, [r7, #15]
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	4613      	mov	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80037c6:	2200      	movs	r2, #0
 80037c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037ca:	7bfa      	ldrb	r2, [r7, #15]
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	4413      	add	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037e0:	7bfa      	ldrb	r2, [r7, #15]
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4413      	add	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80037f2:	2200      	movs	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037f6:	7bfa      	ldrb	r2, [r7, #15]
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	4413      	add	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	3301      	adds	r3, #1
 8003810:	73fb      	strb	r3, [r7, #15]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	791b      	ldrb	r3, [r3, #4]
 8003816:	7bfa      	ldrb	r2, [r7, #15]
 8003818:	429a      	cmp	r2, r3
 800381a:	d3b5      	bcc.n	8003788 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	7c1a      	ldrb	r2, [r3, #16]
 8003824:	f88d 2000 	strb.w	r2, [sp]
 8003828:	3304      	adds	r3, #4
 800382a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800382c:	f005 ffe4 	bl	80097f8 <USB_DevInit>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d005      	beq.n	8003842 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2202      	movs	r2, #2
 800383a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e013      	b.n	800386a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	7b1b      	ldrb	r3, [r3, #12]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d102      	bne.n	800385e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f001 f959 	bl	8004b10 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f007 f835 	bl	800a8d2 <USB_DevDisconnect>

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_PCD_Start+0x16>
 8003884:	2302      	movs	r3, #2
 8003886:	e012      	b.n	80038ae <HAL_PCD_Start+0x3c>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f005 ff41 	bl	800971c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f006 fff6 	bl	800a890 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80038b6:	b590      	push	{r4, r7, lr}
 80038b8:	b08d      	sub	sp, #52	@ 0x34
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f007 f8b4 	bl	800aa3a <USB_GetMode>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f040 84b9 	bne.w	800424c <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f007 f818 	bl	800a914 <USB_ReadInterrupts>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 84af 	beq.w	800424a <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	0a1b      	lsrs	r3, r3, #8
 80038f6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f007 f805 	bl	800a914 <USB_ReadInterrupts>
 800390a:	4603      	mov	r3, r0
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b02      	cmp	r3, #2
 8003912:	d107      	bne.n	8003924 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695a      	ldr	r2, [r3, #20]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f002 0202 	and.w	r2, r2, #2
 8003922:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f006 fff3 	bl	800a914 <USB_ReadInterrupts>
 800392e:	4603      	mov	r3, r0
 8003930:	f003 0310 	and.w	r3, r3, #16
 8003934:	2b10      	cmp	r3, #16
 8003936:	d161      	bne.n	80039fc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0210 	bic.w	r2, r2, #16
 8003946:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	f003 020f 	and.w	r2, r3, #15
 8003954:	4613      	mov	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	4413      	add	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	4413      	add	r3, r2
 8003964:	3304      	adds	r3, #4
 8003966:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	0c5b      	lsrs	r3, r3, #17
 800396c:	f003 030f 	and.w	r3, r3, #15
 8003970:	2b02      	cmp	r3, #2
 8003972:	d124      	bne.n	80039be <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800397a:	4013      	ands	r3, r2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d035      	beq.n	80039ec <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	091b      	lsrs	r3, r3, #4
 8003988:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800398a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800398e:	b29b      	uxth	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	6a38      	ldr	r0, [r7, #32]
 8003994:	f006 fe2a 	bl	800a5ec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	68da      	ldr	r2, [r3, #12]
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	091b      	lsrs	r3, r3, #4
 80039a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039a4:	441a      	add	r2, r3
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	695a      	ldr	r2, [r3, #20]
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	091b      	lsrs	r3, r3, #4
 80039b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039b6:	441a      	add	r2, r3
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	615a      	str	r2, [r3, #20]
 80039bc:	e016      	b.n	80039ec <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	0c5b      	lsrs	r3, r3, #17
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	2b06      	cmp	r3, #6
 80039c8:	d110      	bne.n	80039ec <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80039d0:	2208      	movs	r2, #8
 80039d2:	4619      	mov	r1, r3
 80039d4:	6a38      	ldr	r0, [r7, #32]
 80039d6:	f006 fe09 	bl	800a5ec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	695a      	ldr	r2, [r3, #20]
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	091b      	lsrs	r3, r3, #4
 80039e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039e6:	441a      	add	r2, r3
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699a      	ldr	r2, [r3, #24]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0210 	orr.w	r2, r2, #16
 80039fa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f006 ff87 	bl	800a914 <USB_ReadInterrupts>
 8003a06:	4603      	mov	r3, r0
 8003a08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a0c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a10:	f040 80a7 	bne.w	8003b62 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f006 ff8c 	bl	800a93a <USB_ReadDevAllOutEpInterrupt>
 8003a22:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003a24:	e099      	b.n	8003b5a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 808e 	beq.w	8003b4e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f006 ffb0 	bl	800a9a2 <USB_ReadDevOutEPInterrupt>
 8003a42:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00c      	beq.n	8003a68 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003a60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 fece 	bl	8004804 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00c      	beq.n	8003a8c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a7e:	461a      	mov	r2, r3
 8003a80:	2308      	movs	r3, #8
 8003a82:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003a84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 ffa4 	bl	80049d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f003 0310 	and.w	r3, r3, #16
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d008      	beq.n	8003aa8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d030      	beq.n	8003b14 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aba:	2b80      	cmp	r3, #128	@ 0x80
 8003abc:	d109      	bne.n	8003ad2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	69fa      	ldr	r2, [r7, #28]
 8003ac8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003acc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ad0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	78db      	ldrb	r3, [r3, #3]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d108      	bne.n	8003b02 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	2200      	movs	r2, #0
 8003af4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	4619      	mov	r1, r3
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f009 fd2b 	bl	800d558 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b0e:	461a      	mov	r2, r3
 8003b10:	2302      	movs	r3, #2
 8003b12:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d008      	beq.n	8003b30 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b20:	015a      	lsls	r2, r3, #5
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	4413      	add	r3, r2
 8003b26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	2320      	movs	r3, #32
 8003b2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d009      	beq.n	8003b4e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b46:	461a      	mov	r2, r3
 8003b48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b4c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b50:	3301      	adds	r3, #1
 8003b52:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b56:	085b      	lsrs	r3, r3, #1
 8003b58:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f47f af62 	bne.w	8003a26 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f006 fed4 	bl	800a914 <USB_ReadInterrupts>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b76:	f040 80db 	bne.w	8003d30 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f006 fef5 	bl	800a96e <USB_ReadDevAllInEpInterrupt>
 8003b84:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003b8a:	e0cd      	b.n	8003d28 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 80c2 	beq.w	8003d1c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	4611      	mov	r1, r2
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f006 ff1b 	bl	800a9de <USB_ReadDevInEPInterrupt>
 8003ba8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d057      	beq.n	8003c64 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	2201      	movs	r2, #1
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	69f9      	ldr	r1, [r7, #28]
 8003bd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003be4:	461a      	mov	r2, r3
 8003be6:	2301      	movs	r3, #1
 8003be8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	799b      	ldrb	r3, [r3, #6]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d132      	bne.n	8003c58 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	440b      	add	r3, r1
 8003c00:	3320      	adds	r3, #32
 8003c02:	6819      	ldr	r1, [r3, #0]
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c08:	4613      	mov	r3, r2
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	4413      	add	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4403      	add	r3, r0
 8003c12:	331c      	adds	r3, #28
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4419      	add	r1, r3
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4403      	add	r3, r0
 8003c26:	3320      	adds	r3, #32
 8003c28:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d113      	bne.n	8003c58 <HAL_PCD_IRQHandler+0x3a2>
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c34:	4613      	mov	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4413      	add	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	3324      	adds	r3, #36	@ 0x24
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d108      	bne.n	8003c58 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6818      	ldr	r0, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c50:	461a      	mov	r2, r3
 8003c52:	2101      	movs	r1, #1
 8003c54:	f006 ff24 	bl	800aaa0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f009 fbf5 	bl	800d44e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d008      	beq.n	8003c80 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c70:	015a      	lsls	r2, r3, #5
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	4413      	add	r3, r2
 8003c76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	2308      	movs	r3, #8
 8003c7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f003 0310 	and.w	r3, r3, #16
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d008      	beq.n	8003c9c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c96:	461a      	mov	r2, r3
 8003c98:	2310      	movs	r3, #16
 8003c9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d008      	beq.n	8003cb8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca8:	015a      	lsls	r2, r3, #5
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	2340      	movs	r3, #64	@ 0x40
 8003cb6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d023      	beq.n	8003d0a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003cc2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cc4:	6a38      	ldr	r0, [r7, #32]
 8003cc6:	f005 ff07 	bl	8009ad8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003cca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ccc:	4613      	mov	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	3310      	adds	r3, #16
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	4413      	add	r3, r2
 8003cda:	3304      	adds	r3, #4
 8003cdc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	78db      	ldrb	r3, [r3, #3]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d108      	bne.n	8003cf8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f009 fc42 	bl	800d57c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d04:	461a      	mov	r2, r3
 8003d06:	2302      	movs	r3, #2
 8003d08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003d14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fce8 	bl	80046ec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1e:	3301      	adds	r3, #1
 8003d20:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d24:	085b      	lsrs	r3, r3, #1
 8003d26:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f47f af2e 	bne.w	8003b8c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f006 fded 	bl	800a914 <USB_ReadInterrupts>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d44:	d122      	bne.n	8003d8c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	69fa      	ldr	r2, [r7, #28]
 8003d50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d54:	f023 0301 	bic.w	r3, r3, #1
 8003d58:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d108      	bne.n	8003d76 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f009 fdc0 	bl	800d8f4 <HAL_PCDEx_LPM_Callback>
 8003d74:	e002      	b.n	8003d7c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f009 fbe0 	bl	800d53c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695a      	ldr	r2, [r3, #20]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003d8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f006 fdbf 	bl	800a914 <USB_ReadInterrupts>
 8003d96:	4603      	mov	r3, r0
 8003d98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003da0:	d112      	bne.n	8003dc8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d102      	bne.n	8003db8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f009 fb9c 	bl	800d4f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695a      	ldr	r2, [r3, #20]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003dc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f006 fda1 	bl	800a914 <USB_ReadInterrupts>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003dd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ddc:	d121      	bne.n	8003e22 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695a      	ldr	r2, [r3, #20]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003dec:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d111      	bne.n	8003e1c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e06:	089b      	lsrs	r3, r3, #2
 8003e08:	f003 020f 	and.w	r2, r3, #15
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003e12:	2101      	movs	r1, #1
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f009 fd6d 	bl	800d8f4 <HAL_PCDEx_LPM_Callback>
 8003e1a:	e002      	b.n	8003e22 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f009 fb67 	bl	800d4f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f006 fd74 	bl	800a914 <USB_ReadInterrupts>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e36:	f040 80b7 	bne.w	8003fa8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	69fa      	ldr	r2, [r7, #28]
 8003e44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e48:	f023 0301 	bic.w	r3, r3, #1
 8003e4c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2110      	movs	r1, #16
 8003e54:	4618      	mov	r0, r3
 8003e56:	f005 fe3f 	bl	8009ad8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e5e:	e046      	b.n	8003eee <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003e72:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e76:	015a      	lsls	r2, r3, #5
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e84:	0151      	lsls	r1, r2, #5
 8003e86:	69fa      	ldr	r2, [r7, #28]
 8003e88:	440a      	add	r2, r1
 8003e8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003e92:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003ea6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003eb8:	0151      	lsls	r1, r2, #5
 8003eba:	69fa      	ldr	r2, [r7, #28]
 8003ebc:	440a      	add	r2, r1
 8003ebe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ec2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ec6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ed8:	0151      	lsls	r1, r2, #5
 8003eda:	69fa      	ldr	r2, [r7, #28]
 8003edc:	440a      	add	r2, r1
 8003ede:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ee2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003ee6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eea:	3301      	adds	r3, #1
 8003eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	791b      	ldrb	r3, [r3, #4]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d3b2      	bcc.n	8003e60 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	69fa      	ldr	r2, [r7, #28]
 8003f04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f08:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003f0c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	7bdb      	ldrb	r3, [r3, #15]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d016      	beq.n	8003f44 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f20:	69fa      	ldr	r2, [r7, #28]
 8003f22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f26:	f043 030b 	orr.w	r3, r3, #11
 8003f2a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f36:	69fa      	ldr	r2, [r7, #28]
 8003f38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f3c:	f043 030b 	orr.w	r3, r3, #11
 8003f40:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f42:	e015      	b.n	8003f70 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f4a:	695a      	ldr	r2, [r3, #20]
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f52:	4619      	mov	r1, r3
 8003f54:	f242 032b 	movw	r3, #8235	@ 0x202b
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	69fa      	ldr	r2, [r7, #28]
 8003f66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f6a:	f043 030b 	orr.w	r3, r3, #11
 8003f6e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	69fa      	ldr	r2, [r7, #28]
 8003f7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f7e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003f82:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f92:	461a      	mov	r2, r3
 8003f94:	f006 fd84 	bl	800aaa0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695a      	ldr	r2, [r3, #20]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003fa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f006 fcb1 	bl	800a914 <USB_ReadInterrupts>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fbc:	d123      	bne.n	8004006 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f006 fd48 	bl	800aa58 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f005 fdfc 	bl	8009bca <USB_GetDevSpeed>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681c      	ldr	r4, [r3, #0]
 8003fde:	f001 fab1 	bl	8005544 <HAL_RCC_GetHCLKFreq>
 8003fe2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003fe8:	461a      	mov	r2, r3
 8003fea:	4620      	mov	r0, r4
 8003fec:	f005 faf4 	bl	80095d8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f009 fa54 	bl	800d49e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695a      	ldr	r2, [r3, #20]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004004:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f006 fc82 	bl	800a914 <USB_ReadInterrupts>
 8004010:	4603      	mov	r3, r0
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b08      	cmp	r3, #8
 8004018:	d10a      	bne.n	8004030 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f009 fa31 	bl	800d482 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695a      	ldr	r2, [r3, #20]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f002 0208 	and.w	r2, r2, #8
 800402e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4618      	mov	r0, r3
 8004036:	f006 fc6d 	bl	800a914 <USB_ReadInterrupts>
 800403a:	4603      	mov	r3, r0
 800403c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004040:	2b80      	cmp	r3, #128	@ 0x80
 8004042:	d123      	bne.n	800408c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004050:	2301      	movs	r3, #1
 8004052:	627b      	str	r3, [r7, #36]	@ 0x24
 8004054:	e014      	b.n	8004080 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800405a:	4613      	mov	r3, r2
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	4413      	add	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	440b      	add	r3, r1
 8004064:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d105      	bne.n	800407a <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800406e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004070:	b2db      	uxtb	r3, r3
 8004072:	4619      	mov	r1, r3
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 fb08 	bl	800468a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800407a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407c:	3301      	adds	r3, #1
 800407e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	791b      	ldrb	r3, [r3, #4]
 8004084:	461a      	mov	r2, r3
 8004086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004088:	4293      	cmp	r3, r2
 800408a:	d3e4      	bcc.n	8004056 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4618      	mov	r0, r3
 8004092:	f006 fc3f 	bl	800a914 <USB_ReadInterrupts>
 8004096:	4603      	mov	r3, r0
 8004098:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800409c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040a0:	d13c      	bne.n	800411c <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040a2:	2301      	movs	r3, #1
 80040a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80040a6:	e02b      	b.n	8004100 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80040a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040bc:	4613      	mov	r3, r2
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	4413      	add	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	440b      	add	r3, r1
 80040c6:	3318      	adds	r3, #24
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d115      	bne.n	80040fa <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80040ce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	da12      	bge.n	80040fa <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040d8:	4613      	mov	r3, r2
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	4413      	add	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	440b      	add	r3, r1
 80040e2:	3317      	adds	r3, #23
 80040e4:	2201      	movs	r2, #1
 80040e6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80040e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	4619      	mov	r1, r3
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 fac8 	bl	800468a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fc:	3301      	adds	r3, #1
 80040fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	791b      	ldrb	r3, [r3, #4]
 8004104:	461a      	mov	r2, r3
 8004106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004108:	4293      	cmp	r3, r2
 800410a:	d3cd      	bcc.n	80040a8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695a      	ldr	r2, [r3, #20]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800411a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4618      	mov	r0, r3
 8004122:	f006 fbf7 	bl	800a914 <USB_ReadInterrupts>
 8004126:	4603      	mov	r3, r0
 8004128:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800412c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004130:	d156      	bne.n	80041e0 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004132:	2301      	movs	r3, #1
 8004134:	627b      	str	r3, [r7, #36]	@ 0x24
 8004136:	e045      	b.n	80041c4 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	4413      	add	r3, r2
 8004140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800414c:	4613      	mov	r3, r2
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	4413      	add	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d12e      	bne.n	80041be <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004160:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004162:	2b00      	cmp	r3, #0
 8004164:	da2b      	bge.n	80041be <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004172:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004176:	429a      	cmp	r2, r3
 8004178:	d121      	bne.n	80041be <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800417e:	4613      	mov	r3, r2
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	4413      	add	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	440b      	add	r3, r1
 8004188:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800418c:	2201      	movs	r2, #1
 800418e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10a      	bne.n	80041be <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	69fa      	ldr	r2, [r7, #28]
 80041b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80041ba:	6053      	str	r3, [r2, #4]
            break;
 80041bc:	e008      	b.n	80041d0 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c0:	3301      	adds	r3, #1
 80041c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	791b      	ldrb	r3, [r3, #4]
 80041c8:	461a      	mov	r2, r3
 80041ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d3b3      	bcc.n	8004138 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695a      	ldr	r2, [r3, #20]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80041de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f006 fb95 	bl	800a914 <USB_ReadInterrupts>
 80041ea:	4603      	mov	r3, r0
 80041ec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80041f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041f4:	d10a      	bne.n	800420c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f009 f9d2 	bl	800d5a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	695a      	ldr	r2, [r3, #20]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800420a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4618      	mov	r0, r3
 8004212:	f006 fb7f 	bl	800a914 <USB_ReadInterrupts>
 8004216:	4603      	mov	r3, r0
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b04      	cmp	r3, #4
 800421e:	d115      	bne.n	800424c <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	f003 0304 	and.w	r3, r3, #4
 800422e:	2b00      	cmp	r3, #0
 8004230:	d002      	beq.n	8004238 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f009 f9c2 	bl	800d5bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6859      	ldr	r1, [r3, #4]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	430a      	orrs	r2, r1
 8004246:	605a      	str	r2, [r3, #4]
 8004248:	e000      	b.n	800424c <HAL_PCD_IRQHandler+0x996>
      return;
 800424a:	bf00      	nop
    }
  }
}
 800424c:	3734      	adds	r7, #52	@ 0x34
 800424e:	46bd      	mov	sp, r7
 8004250:	bd90      	pop	{r4, r7, pc}

08004252 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b082      	sub	sp, #8
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	460b      	mov	r3, r1
 800425c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004264:	2b01      	cmp	r3, #1
 8004266:	d101      	bne.n	800426c <HAL_PCD_SetAddress+0x1a>
 8004268:	2302      	movs	r3, #2
 800426a:	e012      	b.n	8004292 <HAL_PCD_SetAddress+0x40>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	78fa      	ldrb	r2, [r7, #3]
 8004278:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	78fa      	ldrb	r2, [r7, #3]
 8004280:	4611      	mov	r1, r2
 8004282:	4618      	mov	r0, r3
 8004284:	f006 fade 	bl	800a844 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b084      	sub	sp, #16
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
 80042a2:	4608      	mov	r0, r1
 80042a4:	4611      	mov	r1, r2
 80042a6:	461a      	mov	r2, r3
 80042a8:	4603      	mov	r3, r0
 80042aa:	70fb      	strb	r3, [r7, #3]
 80042ac:	460b      	mov	r3, r1
 80042ae:	803b      	strh	r3, [r7, #0]
 80042b0:	4613      	mov	r3, r2
 80042b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80042b4:	2300      	movs	r3, #0
 80042b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80042b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	da0f      	bge.n	80042e0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042c0:	78fb      	ldrb	r3, [r7, #3]
 80042c2:	f003 020f 	and.w	r2, r3, #15
 80042c6:	4613      	mov	r3, r2
 80042c8:	00db      	lsls	r3, r3, #3
 80042ca:	4413      	add	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	3310      	adds	r3, #16
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	4413      	add	r3, r2
 80042d4:	3304      	adds	r3, #4
 80042d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2201      	movs	r2, #1
 80042dc:	705a      	strb	r2, [r3, #1]
 80042de:	e00f      	b.n	8004300 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042e0:	78fb      	ldrb	r3, [r7, #3]
 80042e2:	f003 020f 	and.w	r2, r3, #15
 80042e6:	4613      	mov	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	4413      	add	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	4413      	add	r3, r2
 80042f6:	3304      	adds	r3, #4
 80042f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004300:	78fb      	ldrb	r3, [r7, #3]
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	b2da      	uxtb	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800430c:	883a      	ldrh	r2, [r7, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	78ba      	ldrb	r2, [r7, #2]
 8004316:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	785b      	ldrb	r3, [r3, #1]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d004      	beq.n	800432a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800432a:	78bb      	ldrb	r3, [r7, #2]
 800432c:	2b02      	cmp	r3, #2
 800432e:	d102      	bne.n	8004336 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800433c:	2b01      	cmp	r3, #1
 800433e:	d101      	bne.n	8004344 <HAL_PCD_EP_Open+0xaa>
 8004340:	2302      	movs	r3, #2
 8004342:	e00e      	b.n	8004362 <HAL_PCD_EP_Open+0xc8>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68f9      	ldr	r1, [r7, #12]
 8004352:	4618      	mov	r0, r3
 8004354:	f005 fc5e 	bl	8009c14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004360:	7afb      	ldrb	r3, [r7, #11]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b084      	sub	sp, #16
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	460b      	mov	r3, r1
 8004374:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004376:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800437a:	2b00      	cmp	r3, #0
 800437c:	da0f      	bge.n	800439e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800437e:	78fb      	ldrb	r3, [r7, #3]
 8004380:	f003 020f 	and.w	r2, r3, #15
 8004384:	4613      	mov	r3, r2
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	4413      	add	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	3310      	adds	r3, #16
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	4413      	add	r3, r2
 8004392:	3304      	adds	r3, #4
 8004394:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2201      	movs	r2, #1
 800439a:	705a      	strb	r2, [r3, #1]
 800439c:	e00f      	b.n	80043be <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800439e:	78fb      	ldrb	r3, [r7, #3]
 80043a0:	f003 020f 	and.w	r2, r3, #15
 80043a4:	4613      	mov	r3, r2
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	4413      	add	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	4413      	add	r3, r2
 80043b4:	3304      	adds	r3, #4
 80043b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80043be:	78fb      	ldrb	r3, [r7, #3]
 80043c0:	f003 030f 	and.w	r3, r3, #15
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d101      	bne.n	80043d8 <HAL_PCD_EP_Close+0x6e>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e00e      	b.n	80043f6 <HAL_PCD_EP_Close+0x8c>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68f9      	ldr	r1, [r7, #12]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f005 fc9c 	bl	8009d24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b086      	sub	sp, #24
 8004402:	af00      	add	r7, sp, #0
 8004404:	60f8      	str	r0, [r7, #12]
 8004406:	607a      	str	r2, [r7, #4]
 8004408:	603b      	str	r3, [r7, #0]
 800440a:	460b      	mov	r3, r1
 800440c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800440e:	7afb      	ldrb	r3, [r7, #11]
 8004410:	f003 020f 	and.w	r2, r3, #15
 8004414:	4613      	mov	r3, r2
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	4413      	add	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	4413      	add	r3, r2
 8004424:	3304      	adds	r3, #4
 8004426:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	2200      	movs	r2, #0
 8004438:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2200      	movs	r2, #0
 800443e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004440:	7afb      	ldrb	r3, [r7, #11]
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	b2da      	uxtb	r2, r3
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	799b      	ldrb	r3, [r3, #6]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d102      	bne.n	800445a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6818      	ldr	r0, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	799b      	ldrb	r3, [r3, #6]
 8004462:	461a      	mov	r2, r3
 8004464:	6979      	ldr	r1, [r7, #20]
 8004466:	f005 fd39 	bl	8009edc <USB_EPStartXfer>

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	460b      	mov	r3, r1
 800447e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004480:	78fb      	ldrb	r3, [r7, #3]
 8004482:	f003 020f 	and.w	r2, r3, #15
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	4613      	mov	r3, r2
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	4413      	add	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	440b      	add	r3, r1
 8004492:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004496:	681b      	ldr	r3, [r3, #0]
}
 8004498:	4618      	mov	r0, r3
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	607a      	str	r2, [r7, #4]
 80044ae:	603b      	str	r3, [r7, #0]
 80044b0:	460b      	mov	r3, r1
 80044b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044b4:	7afb      	ldrb	r3, [r7, #11]
 80044b6:	f003 020f 	and.w	r2, r3, #15
 80044ba:	4613      	mov	r3, r2
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	4413      	add	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	3310      	adds	r3, #16
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	4413      	add	r3, r2
 80044c8:	3304      	adds	r3, #4
 80044ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	2200      	movs	r2, #0
 80044dc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2201      	movs	r2, #1
 80044e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044e4:	7afb      	ldrb	r3, [r7, #11]
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	799b      	ldrb	r3, [r3, #6]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d102      	bne.n	80044fe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	799b      	ldrb	r3, [r3, #6]
 8004506:	461a      	mov	r2, r3
 8004508:	6979      	ldr	r1, [r7, #20]
 800450a:	f005 fce7 	bl	8009edc <USB_EPStartXfer>

  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	460b      	mov	r3, r1
 8004522:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004524:	78fb      	ldrb	r3, [r7, #3]
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	7912      	ldrb	r2, [r2, #4]
 800452e:	4293      	cmp	r3, r2
 8004530:	d901      	bls.n	8004536 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e04f      	b.n	80045d6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004536:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800453a:	2b00      	cmp	r3, #0
 800453c:	da0f      	bge.n	800455e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800453e:	78fb      	ldrb	r3, [r7, #3]
 8004540:	f003 020f 	and.w	r2, r3, #15
 8004544:	4613      	mov	r3, r2
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	4413      	add	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	3310      	adds	r3, #16
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	4413      	add	r3, r2
 8004552:	3304      	adds	r3, #4
 8004554:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2201      	movs	r2, #1
 800455a:	705a      	strb	r2, [r3, #1]
 800455c:	e00d      	b.n	800457a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800455e:	78fa      	ldrb	r2, [r7, #3]
 8004560:	4613      	mov	r3, r2
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	4413      	add	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	4413      	add	r3, r2
 8004570:	3304      	adds	r3, #4
 8004572:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2201      	movs	r2, #1
 800457e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	f003 030f 	and.w	r3, r3, #15
 8004586:	b2da      	uxtb	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004592:	2b01      	cmp	r3, #1
 8004594:	d101      	bne.n	800459a <HAL_PCD_EP_SetStall+0x82>
 8004596:	2302      	movs	r3, #2
 8004598:	e01d      	b.n	80045d6 <HAL_PCD_EP_SetStall+0xbe>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68f9      	ldr	r1, [r7, #12]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f006 f877 	bl	800a69c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80045ae:	78fb      	ldrb	r3, [r7, #3]
 80045b0:	f003 030f 	and.w	r3, r3, #15
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d109      	bne.n	80045cc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6818      	ldr	r0, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	7999      	ldrb	r1, [r3, #6]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80045c6:	461a      	mov	r2, r3
 80045c8:	f006 fa6a 	bl	800aaa0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b084      	sub	sp, #16
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
 80045e6:	460b      	mov	r3, r1
 80045e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80045ea:	78fb      	ldrb	r3, [r7, #3]
 80045ec:	f003 030f 	and.w	r3, r3, #15
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	7912      	ldrb	r2, [r2, #4]
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d901      	bls.n	80045fc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e042      	b.n	8004682 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004600:	2b00      	cmp	r3, #0
 8004602:	da0f      	bge.n	8004624 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	f003 020f 	and.w	r2, r3, #15
 800460a:	4613      	mov	r3, r2
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	4413      	add	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	3310      	adds	r3, #16
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	4413      	add	r3, r2
 8004618:	3304      	adds	r3, #4
 800461a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2201      	movs	r2, #1
 8004620:	705a      	strb	r2, [r3, #1]
 8004622:	e00f      	b.n	8004644 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004624:	78fb      	ldrb	r3, [r7, #3]
 8004626:	f003 020f 	and.w	r2, r3, #15
 800462a:	4613      	mov	r3, r2
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	4413      	add	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	4413      	add	r3, r2
 800463a:	3304      	adds	r3, #4
 800463c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800464a:	78fb      	ldrb	r3, [r7, #3]
 800464c:	f003 030f 	and.w	r3, r3, #15
 8004650:	b2da      	uxtb	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800465c:	2b01      	cmp	r3, #1
 800465e:	d101      	bne.n	8004664 <HAL_PCD_EP_ClrStall+0x86>
 8004660:	2302      	movs	r3, #2
 8004662:	e00e      	b.n	8004682 <HAL_PCD_EP_ClrStall+0xa4>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68f9      	ldr	r1, [r7, #12]
 8004672:	4618      	mov	r0, r3
 8004674:	f006 f880 	bl	800a778 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b084      	sub	sp, #16
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	460b      	mov	r3, r1
 8004694:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004696:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800469a:	2b00      	cmp	r3, #0
 800469c:	da0c      	bge.n	80046b8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800469e:	78fb      	ldrb	r3, [r7, #3]
 80046a0:	f003 020f 	and.w	r2, r3, #15
 80046a4:	4613      	mov	r3, r2
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	4413      	add	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	3310      	adds	r3, #16
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	4413      	add	r3, r2
 80046b2:	3304      	adds	r3, #4
 80046b4:	60fb      	str	r3, [r7, #12]
 80046b6:	e00c      	b.n	80046d2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046b8:	78fb      	ldrb	r3, [r7, #3]
 80046ba:	f003 020f 	and.w	r2, r3, #15
 80046be:	4613      	mov	r3, r2
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	4413      	add	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	4413      	add	r3, r2
 80046ce:	3304      	adds	r3, #4
 80046d0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68f9      	ldr	r1, [r7, #12]
 80046d8:	4618      	mov	r0, r3
 80046da:	f005 fe9f 	bl	800a41c <USB_EPStopXfer>
 80046de:	4603      	mov	r3, r0
 80046e0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80046e2:	7afb      	ldrb	r3, [r7, #11]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08a      	sub	sp, #40	@ 0x28
 80046f0:	af02      	add	r7, sp, #8
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	4613      	mov	r3, r2
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	4413      	add	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	3310      	adds	r3, #16
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	4413      	add	r3, r2
 8004710:	3304      	adds	r3, #4
 8004712:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	695a      	ldr	r2, [r3, #20]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	429a      	cmp	r2, r3
 800471e:	d901      	bls.n	8004724 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e06b      	b.n	80047fc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	691a      	ldr	r2, [r3, #16]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	69fa      	ldr	r2, [r7, #28]
 8004736:	429a      	cmp	r2, r3
 8004738:	d902      	bls.n	8004740 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	3303      	adds	r3, #3
 8004744:	089b      	lsrs	r3, r3, #2
 8004746:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004748:	e02a      	b.n	80047a0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	691a      	ldr	r2, [r3, #16]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	69fa      	ldr	r2, [r7, #28]
 800475c:	429a      	cmp	r2, r3
 800475e:	d902      	bls.n	8004766 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	3303      	adds	r3, #3
 800476a:	089b      	lsrs	r3, r3, #2
 800476c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	68d9      	ldr	r1, [r3, #12]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	b2da      	uxtb	r2, r3
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	4603      	mov	r3, r0
 8004782:	6978      	ldr	r0, [r7, #20]
 8004784:	f005 fef4 	bl	800a570 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	68da      	ldr	r2, [r3, #12]
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	441a      	add	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	695a      	ldr	r2, [r3, #20]
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	441a      	add	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d809      	bhi.n	80047ca <PCD_WriteEmptyTxFifo+0xde>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	695a      	ldr	r2, [r3, #20]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047be:	429a      	cmp	r2, r3
 80047c0:	d203      	bcs.n	80047ca <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1bf      	bne.n	800474a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	691a      	ldr	r2, [r3, #16]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d811      	bhi.n	80047fa <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	f003 030f 	and.w	r3, r3, #15
 80047dc:	2201      	movs	r2, #1
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	43db      	mvns	r3, r3
 80047f0:	6939      	ldr	r1, [r7, #16]
 80047f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047f6:	4013      	ands	r3, r2
 80047f8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3720      	adds	r7, #32
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b088      	sub	sp, #32
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	333c      	adds	r3, #60	@ 0x3c
 800481c:	3304      	adds	r3, #4
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	015a      	lsls	r2, r3, #5
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	4413      	add	r3, r2
 800482a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	799b      	ldrb	r3, [r3, #6]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d17b      	bne.n	8004932 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	2b00      	cmp	r3, #0
 8004842:	d015      	beq.n	8004870 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	4a61      	ldr	r2, [pc, #388]	@ (80049cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004848:	4293      	cmp	r3, r2
 800484a:	f240 80b9 	bls.w	80049c0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 80b3 	beq.w	80049c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	015a      	lsls	r2, r3, #5
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	4413      	add	r3, r2
 8004862:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004866:	461a      	mov	r2, r3
 8004868:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800486c:	6093      	str	r3, [r2, #8]
 800486e:	e0a7      	b.n	80049c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	f003 0320 	and.w	r3, r3, #32
 8004876:	2b00      	cmp	r3, #0
 8004878:	d009      	beq.n	800488e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	015a      	lsls	r2, r3, #5
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	4413      	add	r3, r2
 8004882:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004886:	461a      	mov	r2, r3
 8004888:	2320      	movs	r3, #32
 800488a:	6093      	str	r3, [r2, #8]
 800488c:	e098      	b.n	80049c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004894:	2b00      	cmp	r3, #0
 8004896:	f040 8093 	bne.w	80049c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	4a4b      	ldr	r2, [pc, #300]	@ (80049cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d90f      	bls.n	80048c2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00a      	beq.n	80048c2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048b8:	461a      	mov	r2, r3
 80048ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048be:	6093      	str	r3, [r2, #8]
 80048c0:	e07e      	b.n	80049c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	4613      	mov	r3, r2
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	4413      	add	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	4413      	add	r3, r2
 80048d4:	3304      	adds	r3, #4
 80048d6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a1a      	ldr	r2, [r3, #32]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	0159      	lsls	r1, r3, #5
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	440b      	add	r3, r1
 80048e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ee:	1ad2      	subs	r2, r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d114      	bne.n	8004924 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d109      	bne.n	8004916 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6818      	ldr	r0, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800490c:	461a      	mov	r2, r3
 800490e:	2101      	movs	r1, #1
 8004910:	f006 f8c6 	bl	800aaa0 <USB_EP0_OutStart>
 8004914:	e006      	b.n	8004924 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	441a      	add	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	b2db      	uxtb	r3, r3
 8004928:	4619      	mov	r1, r3
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f008 fd74 	bl	800d418 <HAL_PCD_DataOutStageCallback>
 8004930:	e046      	b.n	80049c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	4a26      	ldr	r2, [pc, #152]	@ (80049d0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d124      	bne.n	8004984 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00a      	beq.n	800495a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	4413      	add	r3, r2
 800494c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004950:	461a      	mov	r2, r3
 8004952:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004956:	6093      	str	r3, [r2, #8]
 8004958:	e032      	b.n	80049c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f003 0320 	and.w	r3, r3, #32
 8004960:	2b00      	cmp	r3, #0
 8004962:	d008      	beq.n	8004976 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	015a      	lsls	r2, r3, #5
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	4413      	add	r3, r2
 800496c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004970:	461a      	mov	r2, r3
 8004972:	2320      	movs	r3, #32
 8004974:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	b2db      	uxtb	r3, r3
 800497a:	4619      	mov	r1, r3
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f008 fd4b 	bl	800d418 <HAL_PCD_DataOutStageCallback>
 8004982:	e01d      	b.n	80049c0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d114      	bne.n	80049b4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800498a:	6879      	ldr	r1, [r7, #4]
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	4613      	mov	r3, r2
 8004990:	00db      	lsls	r3, r3, #3
 8004992:	4413      	add	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	440b      	add	r3, r1
 8004998:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d108      	bne.n	80049b4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6818      	ldr	r0, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80049ac:	461a      	mov	r2, r3
 80049ae:	2100      	movs	r1, #0
 80049b0:	f006 f876 	bl	800aaa0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	4619      	mov	r1, r3
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f008 fd2c 	bl	800d418 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3720      	adds	r7, #32
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	4f54300a 	.word	0x4f54300a
 80049d0:	4f54310a 	.word	0x4f54310a

080049d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	333c      	adds	r3, #60	@ 0x3c
 80049ec:	3304      	adds	r3, #4
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	015a      	lsls	r2, r3, #5
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	4a15      	ldr	r2, [pc, #84]	@ (8004a5c <PCD_EP_OutSetupPacket_int+0x88>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d90e      	bls.n	8004a28 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d009      	beq.n	8004a28 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a20:	461a      	mov	r2, r3
 8004a22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a26:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f008 fce3 	bl	800d3f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	4a0a      	ldr	r2, [pc, #40]	@ (8004a5c <PCD_EP_OutSetupPacket_int+0x88>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d90c      	bls.n	8004a50 <PCD_EP_OutSetupPacket_int+0x7c>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	799b      	ldrb	r3, [r3, #6]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d108      	bne.n	8004a50 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6818      	ldr	r0, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a48:	461a      	mov	r2, r3
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	f006 f828 	bl	800aaa0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3718      	adds	r7, #24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	4f54300a 	.word	0x4f54300a

08004a60 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	70fb      	strb	r3, [r7, #3]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a76:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004a78:	78fb      	ldrb	r3, [r7, #3]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d107      	bne.n	8004a8e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004a7e:	883b      	ldrh	r3, [r7, #0]
 8004a80:	0419      	lsls	r1, r3, #16
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a8c:	e028      	b.n	8004ae0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a94:	0c1b      	lsrs	r3, r3, #16
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	4413      	add	r3, r2
 8004a9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	73fb      	strb	r3, [r7, #15]
 8004aa0:	e00d      	b.n	8004abe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	7bfb      	ldrb	r3, [r7, #15]
 8004aa8:	3340      	adds	r3, #64	@ 0x40
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	0c1b      	lsrs	r3, r3, #16
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
 8004aba:	3301      	adds	r3, #1
 8004abc:	73fb      	strb	r3, [r7, #15]
 8004abe:	7bfa      	ldrb	r2, [r7, #15]
 8004ac0:	78fb      	ldrb	r3, [r7, #3]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d3ec      	bcc.n	8004aa2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004ac8:	883b      	ldrh	r3, [r7, #0]
 8004aca:	0418      	lsls	r0, r3, #16
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6819      	ldr	r1, [r3, #0]
 8004ad0:	78fb      	ldrb	r3, [r7, #3]
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	4302      	orrs	r2, r0
 8004ad8:	3340      	adds	r3, #64	@ 0x40
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	440b      	add	r3, r1
 8004ade:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
 8004af6:	460b      	mov	r3, r1
 8004af8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	887a      	ldrh	r2, [r7, #2]
 8004b00:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b3e:	4b05      	ldr	r3, [pc, #20]	@ (8004b54 <HAL_PCDEx_ActivateLPM+0x44>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	10000003 	.word	0x10000003

08004b58 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004b62:	4b23      	ldr	r3, [pc, #140]	@ (8004bf0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b66:	4a22      	ldr	r2, [pc, #136]	@ (8004bf0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b6e:	4b20      	ldr	r3, [pc, #128]	@ (8004bf0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b76:	603b      	str	r3, [r7, #0]
 8004b78:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8004bf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a1d      	ldr	r2, [pc, #116]	@ (8004bf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b84:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b86:	f7fd fa97 	bl	80020b8 <HAL_GetTick>
 8004b8a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004b8c:	e009      	b.n	8004ba2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004b8e:	f7fd fa93 	bl	80020b8 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004b9c:	d901      	bls.n	8004ba2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e022      	b.n	8004be8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ba2:	4b14      	ldr	r3, [pc, #80]	@ (8004bf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004baa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bae:	d1ee      	bne.n	8004b8e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004bb0:	4b10      	ldr	r3, [pc, #64]	@ (8004bf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a0f      	ldr	r2, [pc, #60]	@ (8004bf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bbc:	f7fd fa7c 	bl	80020b8 <HAL_GetTick>
 8004bc0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004bc2:	e009      	b.n	8004bd8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004bc4:	f7fd fa78 	bl	80020b8 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004bd2:	d901      	bls.n	8004bd8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e007      	b.n	8004be8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004bd8:	4b06      	ldr	r3, [pc, #24]	@ (8004bf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004be0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004be4:	d1ee      	bne.n	8004bc4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	40007000 	.word	0x40007000

08004bf8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004c00:	2300      	movs	r3, #0
 8004c02:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e291      	b.n	8005132 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 8087 	beq.w	8004d2a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c1c:	4b96      	ldr	r3, [pc, #600]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f003 030c 	and.w	r3, r3, #12
 8004c24:	2b04      	cmp	r3, #4
 8004c26:	d00c      	beq.n	8004c42 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c28:	4b93      	ldr	r3, [pc, #588]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f003 030c 	and.w	r3, r3, #12
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d112      	bne.n	8004c5a <HAL_RCC_OscConfig+0x62>
 8004c34:	4b90      	ldr	r3, [pc, #576]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c40:	d10b      	bne.n	8004c5a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c42:	4b8d      	ldr	r3, [pc, #564]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d06c      	beq.n	8004d28 <HAL_RCC_OscConfig+0x130>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d168      	bne.n	8004d28 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e26b      	b.n	8005132 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c62:	d106      	bne.n	8004c72 <HAL_RCC_OscConfig+0x7a>
 8004c64:	4b84      	ldr	r3, [pc, #528]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a83      	ldr	r2, [pc, #524]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004c6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c6e:	6013      	str	r3, [r2, #0]
 8004c70:	e02e      	b.n	8004cd0 <HAL_RCC_OscConfig+0xd8>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10c      	bne.n	8004c94 <HAL_RCC_OscConfig+0x9c>
 8004c7a:	4b7f      	ldr	r3, [pc, #508]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a7e      	ldr	r2, [pc, #504]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004c80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	4b7c      	ldr	r3, [pc, #496]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a7b      	ldr	r2, [pc, #492]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004c8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	e01d      	b.n	8004cd0 <HAL_RCC_OscConfig+0xd8>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c9c:	d10c      	bne.n	8004cb8 <HAL_RCC_OscConfig+0xc0>
 8004c9e:	4b76      	ldr	r3, [pc, #472]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a75      	ldr	r2, [pc, #468]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004ca4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	4b73      	ldr	r3, [pc, #460]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a72      	ldr	r2, [pc, #456]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004cb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	e00b      	b.n	8004cd0 <HAL_RCC_OscConfig+0xd8>
 8004cb8:	4b6f      	ldr	r3, [pc, #444]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a6e      	ldr	r2, [pc, #440]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004cbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cc2:	6013      	str	r3, [r2, #0]
 8004cc4:	4b6c      	ldr	r3, [pc, #432]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a6b      	ldr	r2, [pc, #428]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004cca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d013      	beq.n	8004d00 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd8:	f7fd f9ee 	bl	80020b8 <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ce0:	f7fd f9ea 	bl	80020b8 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b64      	cmp	r3, #100	@ 0x64
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e21f      	b.n	8005132 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cf2:	4b61      	ldr	r3, [pc, #388]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0f0      	beq.n	8004ce0 <HAL_RCC_OscConfig+0xe8>
 8004cfe:	e014      	b.n	8004d2a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d00:	f7fd f9da 	bl	80020b8 <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d08:	f7fd f9d6 	bl	80020b8 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b64      	cmp	r3, #100	@ 0x64
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e20b      	b.n	8005132 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d1a:	4b57      	ldr	r3, [pc, #348]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1f0      	bne.n	8004d08 <HAL_RCC_OscConfig+0x110>
 8004d26:	e000      	b.n	8004d2a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d069      	beq.n	8004e0a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d36:	4b50      	ldr	r3, [pc, #320]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f003 030c 	and.w	r3, r3, #12
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00b      	beq.n	8004d5a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d42:	4b4d      	ldr	r3, [pc, #308]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f003 030c 	and.w	r3, r3, #12
 8004d4a:	2b08      	cmp	r3, #8
 8004d4c:	d11c      	bne.n	8004d88 <HAL_RCC_OscConfig+0x190>
 8004d4e:	4b4a      	ldr	r3, [pc, #296]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d116      	bne.n	8004d88 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d5a:	4b47      	ldr	r3, [pc, #284]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d005      	beq.n	8004d72 <HAL_RCC_OscConfig+0x17a>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d001      	beq.n	8004d72 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e1df      	b.n	8005132 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d72:	4b41      	ldr	r3, [pc, #260]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	00db      	lsls	r3, r3, #3
 8004d80:	493d      	ldr	r1, [pc, #244]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d86:	e040      	b.n	8004e0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d023      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d90:	4b39      	ldr	r3, [pc, #228]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a38      	ldr	r2, [pc, #224]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004d96:	f043 0301 	orr.w	r3, r3, #1
 8004d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9c:	f7fd f98c 	bl	80020b8 <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004da4:	f7fd f988 	bl	80020b8 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e1bd      	b.n	8005132 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004db6:	4b30      	ldr	r3, [pc, #192]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0f0      	beq.n	8004da4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dc2:	4b2d      	ldr	r3, [pc, #180]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	4929      	ldr	r1, [pc, #164]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	600b      	str	r3, [r1, #0]
 8004dd6:	e018      	b.n	8004e0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dd8:	4b27      	ldr	r3, [pc, #156]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a26      	ldr	r2, [pc, #152]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004dde:	f023 0301 	bic.w	r3, r3, #1
 8004de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de4:	f7fd f968 	bl	80020b8 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dec:	f7fd f964 	bl	80020b8 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e199      	b.n	8005132 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1f0      	bne.n	8004dec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d038      	beq.n	8004e88 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d019      	beq.n	8004e52 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e1e:	4b16      	ldr	r3, [pc, #88]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004e20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e22:	4a15      	ldr	r2, [pc, #84]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004e24:	f043 0301 	orr.w	r3, r3, #1
 8004e28:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2a:	f7fd f945 	bl	80020b8 <HAL_GetTick>
 8004e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e30:	e008      	b.n	8004e44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e32:	f7fd f941 	bl	80020b8 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e176      	b.n	8005132 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e44:	4b0c      	ldr	r3, [pc, #48]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004e46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0f0      	beq.n	8004e32 <HAL_RCC_OscConfig+0x23a>
 8004e50:	e01a      	b.n	8004e88 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e52:	4b09      	ldr	r3, [pc, #36]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004e54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e56:	4a08      	ldr	r2, [pc, #32]	@ (8004e78 <HAL_RCC_OscConfig+0x280>)
 8004e58:	f023 0301 	bic.w	r3, r3, #1
 8004e5c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e5e:	f7fd f92b 	bl	80020b8 <HAL_GetTick>
 8004e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e64:	e00a      	b.n	8004e7c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e66:	f7fd f927 	bl	80020b8 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d903      	bls.n	8004e7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e15c      	b.n	8005132 <HAL_RCC_OscConfig+0x53a>
 8004e78:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e7c:	4b91      	ldr	r3, [pc, #580]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 8004e7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1ee      	bne.n	8004e66 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 80a4 	beq.w	8004fde <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e96:	4b8b      	ldr	r3, [pc, #556]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 8004e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10d      	bne.n	8004ebe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ea2:	4b88      	ldr	r3, [pc, #544]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea6:	4a87      	ldr	r2, [pc, #540]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 8004ea8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eac:	6413      	str	r3, [r2, #64]	@ 0x40
 8004eae:	4b85      	ldr	r3, [pc, #532]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eb6:	60bb      	str	r3, [r7, #8]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ebe:	4b82      	ldr	r3, [pc, #520]	@ (80050c8 <HAL_RCC_OscConfig+0x4d0>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d118      	bne.n	8004efc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004eca:	4b7f      	ldr	r3, [pc, #508]	@ (80050c8 <HAL_RCC_OscConfig+0x4d0>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a7e      	ldr	r2, [pc, #504]	@ (80050c8 <HAL_RCC_OscConfig+0x4d0>)
 8004ed0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ed4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ed6:	f7fd f8ef 	bl	80020b8 <HAL_GetTick>
 8004eda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004edc:	e008      	b.n	8004ef0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ede:	f7fd f8eb 	bl	80020b8 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b64      	cmp	r3, #100	@ 0x64
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e120      	b.n	8005132 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ef0:	4b75      	ldr	r3, [pc, #468]	@ (80050c8 <HAL_RCC_OscConfig+0x4d0>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0f0      	beq.n	8004ede <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d106      	bne.n	8004f12 <HAL_RCC_OscConfig+0x31a>
 8004f04:	4b6f      	ldr	r3, [pc, #444]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 8004f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f08:	4a6e      	ldr	r2, [pc, #440]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 8004f0a:	f043 0301 	orr.w	r3, r3, #1
 8004f0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f10:	e02d      	b.n	8004f6e <HAL_RCC_OscConfig+0x376>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10c      	bne.n	8004f34 <HAL_RCC_OscConfig+0x33c>
 8004f1a:	4b6a      	ldr	r3, [pc, #424]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 8004f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f1e:	4a69      	ldr	r2, [pc, #420]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 8004f20:	f023 0301 	bic.w	r3, r3, #1
 8004f24:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f26:	4b67      	ldr	r3, [pc, #412]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 8004f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f2a:	4a66      	ldr	r2, [pc, #408]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 8004f2c:	f023 0304 	bic.w	r3, r3, #4
 8004f30:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f32:	e01c      	b.n	8004f6e <HAL_RCC_OscConfig+0x376>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	2b05      	cmp	r3, #5
 8004f3a:	d10c      	bne.n	8004f56 <HAL_RCC_OscConfig+0x35e>
 8004f3c:	4b61      	ldr	r3, [pc, #388]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 8004f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f40:	4a60      	ldr	r2, [pc, #384]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 8004f42:	f043 0304 	orr.w	r3, r3, #4
 8004f46:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f48:	4b5e      	ldr	r3, [pc, #376]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 8004f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f4c:	4a5d      	ldr	r2, [pc, #372]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 8004f4e:	f043 0301 	orr.w	r3, r3, #1
 8004f52:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f54:	e00b      	b.n	8004f6e <HAL_RCC_OscConfig+0x376>
 8004f56:	4b5b      	ldr	r3, [pc, #364]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 8004f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f5a:	4a5a      	ldr	r2, [pc, #360]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 8004f5c:	f023 0301 	bic.w	r3, r3, #1
 8004f60:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f62:	4b58      	ldr	r3, [pc, #352]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 8004f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f66:	4a57      	ldr	r2, [pc, #348]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 8004f68:	f023 0304 	bic.w	r3, r3, #4
 8004f6c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d015      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f76:	f7fd f89f 	bl	80020b8 <HAL_GetTick>
 8004f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f7c:	e00a      	b.n	8004f94 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f7e:	f7fd f89b 	bl	80020b8 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e0ce      	b.n	8005132 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f94:	4b4b      	ldr	r3, [pc, #300]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 8004f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0ee      	beq.n	8004f7e <HAL_RCC_OscConfig+0x386>
 8004fa0:	e014      	b.n	8004fcc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa2:	f7fd f889 	bl	80020b8 <HAL_GetTick>
 8004fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fa8:	e00a      	b.n	8004fc0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004faa:	f7fd f885 	bl	80020b8 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e0b8      	b.n	8005132 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fc0:	4b40      	ldr	r3, [pc, #256]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 8004fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1ee      	bne.n	8004faa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fcc:	7dfb      	ldrb	r3, [r7, #23]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d105      	bne.n	8004fde <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fd2:	4b3c      	ldr	r3, [pc, #240]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd6:	4a3b      	ldr	r2, [pc, #236]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 8004fd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fdc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f000 80a4 	beq.w	8005130 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fe8:	4b36      	ldr	r3, [pc, #216]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f003 030c 	and.w	r3, r3, #12
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	d06b      	beq.n	80050cc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d149      	bne.n	8005090 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ffc:	4b31      	ldr	r3, [pc, #196]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a30      	ldr	r2, [pc, #192]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 8005002:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005008:	f7fd f856 	bl	80020b8 <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800500e:	e008      	b.n	8005022 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005010:	f7fd f852 	bl	80020b8 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e087      	b.n	8005132 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005022:	4b28      	ldr	r3, [pc, #160]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1f0      	bne.n	8005010 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	69da      	ldr	r2, [r3, #28]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800503c:	019b      	lsls	r3, r3, #6
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005044:	085b      	lsrs	r3, r3, #1
 8005046:	3b01      	subs	r3, #1
 8005048:	041b      	lsls	r3, r3, #16
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005050:	061b      	lsls	r3, r3, #24
 8005052:	4313      	orrs	r3, r2
 8005054:	4a1b      	ldr	r2, [pc, #108]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 8005056:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800505a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800505c:	4b19      	ldr	r3, [pc, #100]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a18      	ldr	r2, [pc, #96]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 8005062:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005068:	f7fd f826 	bl	80020b8 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005070:	f7fd f822 	bl	80020b8 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e057      	b.n	8005132 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005082:	4b10      	ldr	r3, [pc, #64]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0f0      	beq.n	8005070 <HAL_RCC_OscConfig+0x478>
 800508e:	e04f      	b.n	8005130 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005090:	4b0c      	ldr	r3, [pc, #48]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a0b      	ldr	r2, [pc, #44]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 8005096:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800509a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509c:	f7fd f80c 	bl	80020b8 <HAL_GetTick>
 80050a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050a2:	e008      	b.n	80050b6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a4:	f7fd f808 	bl	80020b8 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e03d      	b.n	8005132 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050b6:	4b03      	ldr	r3, [pc, #12]	@ (80050c4 <HAL_RCC_OscConfig+0x4cc>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1f0      	bne.n	80050a4 <HAL_RCC_OscConfig+0x4ac>
 80050c2:	e035      	b.n	8005130 <HAL_RCC_OscConfig+0x538>
 80050c4:	40023800 	.word	0x40023800
 80050c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80050cc:	4b1b      	ldr	r3, [pc, #108]	@ (800513c <HAL_RCC_OscConfig+0x544>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d028      	beq.n	800512c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d121      	bne.n	800512c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d11a      	bne.n	800512c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80050fc:	4013      	ands	r3, r2
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005102:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005104:	4293      	cmp	r3, r2
 8005106:	d111      	bne.n	800512c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005112:	085b      	lsrs	r3, r3, #1
 8005114:	3b01      	subs	r3, #1
 8005116:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005118:	429a      	cmp	r2, r3
 800511a:	d107      	bne.n	800512c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005126:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005128:	429a      	cmp	r2, r3
 800512a:	d001      	beq.n	8005130 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e000      	b.n	8005132 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3718      	adds	r7, #24
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	40023800 	.word	0x40023800

08005140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800514a:	2300      	movs	r3, #0
 800514c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e0d0      	b.n	80052fa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005158:	4b6a      	ldr	r3, [pc, #424]	@ (8005304 <HAL_RCC_ClockConfig+0x1c4>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 030f 	and.w	r3, r3, #15
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	429a      	cmp	r2, r3
 8005164:	d910      	bls.n	8005188 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005166:	4b67      	ldr	r3, [pc, #412]	@ (8005304 <HAL_RCC_ClockConfig+0x1c4>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f023 020f 	bic.w	r2, r3, #15
 800516e:	4965      	ldr	r1, [pc, #404]	@ (8005304 <HAL_RCC_ClockConfig+0x1c4>)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	4313      	orrs	r3, r2
 8005174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005176:	4b63      	ldr	r3, [pc, #396]	@ (8005304 <HAL_RCC_ClockConfig+0x1c4>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 030f 	and.w	r3, r3, #15
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	429a      	cmp	r2, r3
 8005182:	d001      	beq.n	8005188 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e0b8      	b.n	80052fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d020      	beq.n	80051d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0304 	and.w	r3, r3, #4
 800519c:	2b00      	cmp	r3, #0
 800519e:	d005      	beq.n	80051ac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051a0:	4b59      	ldr	r3, [pc, #356]	@ (8005308 <HAL_RCC_ClockConfig+0x1c8>)
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	4a58      	ldr	r2, [pc, #352]	@ (8005308 <HAL_RCC_ClockConfig+0x1c8>)
 80051a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80051aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0308 	and.w	r3, r3, #8
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d005      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051b8:	4b53      	ldr	r3, [pc, #332]	@ (8005308 <HAL_RCC_ClockConfig+0x1c8>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	4a52      	ldr	r2, [pc, #328]	@ (8005308 <HAL_RCC_ClockConfig+0x1c8>)
 80051be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80051c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051c4:	4b50      	ldr	r3, [pc, #320]	@ (8005308 <HAL_RCC_ClockConfig+0x1c8>)
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	494d      	ldr	r1, [pc, #308]	@ (8005308 <HAL_RCC_ClockConfig+0x1c8>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d040      	beq.n	8005264 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d107      	bne.n	80051fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ea:	4b47      	ldr	r3, [pc, #284]	@ (8005308 <HAL_RCC_ClockConfig+0x1c8>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d115      	bne.n	8005222 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e07f      	b.n	80052fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d107      	bne.n	8005212 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005202:	4b41      	ldr	r3, [pc, #260]	@ (8005308 <HAL_RCC_ClockConfig+0x1c8>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d109      	bne.n	8005222 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e073      	b.n	80052fa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005212:	4b3d      	ldr	r3, [pc, #244]	@ (8005308 <HAL_RCC_ClockConfig+0x1c8>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e06b      	b.n	80052fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005222:	4b39      	ldr	r3, [pc, #228]	@ (8005308 <HAL_RCC_ClockConfig+0x1c8>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f023 0203 	bic.w	r2, r3, #3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	4936      	ldr	r1, [pc, #216]	@ (8005308 <HAL_RCC_ClockConfig+0x1c8>)
 8005230:	4313      	orrs	r3, r2
 8005232:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005234:	f7fc ff40 	bl	80020b8 <HAL_GetTick>
 8005238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800523a:	e00a      	b.n	8005252 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800523c:	f7fc ff3c 	bl	80020b8 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800524a:	4293      	cmp	r3, r2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e053      	b.n	80052fa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005252:	4b2d      	ldr	r3, [pc, #180]	@ (8005308 <HAL_RCC_ClockConfig+0x1c8>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f003 020c 	and.w	r2, r3, #12
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	429a      	cmp	r2, r3
 8005262:	d1eb      	bne.n	800523c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005264:	4b27      	ldr	r3, [pc, #156]	@ (8005304 <HAL_RCC_ClockConfig+0x1c4>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 030f 	and.w	r3, r3, #15
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d210      	bcs.n	8005294 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005272:	4b24      	ldr	r3, [pc, #144]	@ (8005304 <HAL_RCC_ClockConfig+0x1c4>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f023 020f 	bic.w	r2, r3, #15
 800527a:	4922      	ldr	r1, [pc, #136]	@ (8005304 <HAL_RCC_ClockConfig+0x1c4>)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	4313      	orrs	r3, r2
 8005280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005282:	4b20      	ldr	r3, [pc, #128]	@ (8005304 <HAL_RCC_ClockConfig+0x1c4>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 030f 	and.w	r3, r3, #15
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	429a      	cmp	r2, r3
 800528e:	d001      	beq.n	8005294 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e032      	b.n	80052fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	2b00      	cmp	r3, #0
 800529e:	d008      	beq.n	80052b2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052a0:	4b19      	ldr	r3, [pc, #100]	@ (8005308 <HAL_RCC_ClockConfig+0x1c8>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	4916      	ldr	r1, [pc, #88]	@ (8005308 <HAL_RCC_ClockConfig+0x1c8>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d009      	beq.n	80052d2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052be:	4b12      	ldr	r3, [pc, #72]	@ (8005308 <HAL_RCC_ClockConfig+0x1c8>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	00db      	lsls	r3, r3, #3
 80052cc:	490e      	ldr	r1, [pc, #56]	@ (8005308 <HAL_RCC_ClockConfig+0x1c8>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80052d2:	f000 f831 	bl	8005338 <HAL_RCC_GetSysClockFreq>
 80052d6:	4602      	mov	r2, r0
 80052d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005308 <HAL_RCC_ClockConfig+0x1c8>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	091b      	lsrs	r3, r3, #4
 80052de:	f003 030f 	and.w	r3, r3, #15
 80052e2:	490a      	ldr	r1, [pc, #40]	@ (800530c <HAL_RCC_ClockConfig+0x1cc>)
 80052e4:	5ccb      	ldrb	r3, [r1, r3]
 80052e6:	fa22 f303 	lsr.w	r3, r2, r3
 80052ea:	4a09      	ldr	r2, [pc, #36]	@ (8005310 <HAL_RCC_ClockConfig+0x1d0>)
 80052ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80052ee:	4b09      	ldr	r3, [pc, #36]	@ (8005314 <HAL_RCC_ClockConfig+0x1d4>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fc fe9c 	bl	8002030 <HAL_InitTick>

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	40023c00 	.word	0x40023c00
 8005308:	40023800 	.word	0x40023800
 800530c:	0800e8e0 	.word	0x0800e8e0
 8005310:	20000000 	.word	0x20000000
 8005314:	20000004 	.word	0x20000004

08005318 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 800531c:	4b05      	ldr	r3, [pc, #20]	@ (8005334 <HAL_RCC_EnableCSS+0x1c>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a04      	ldr	r2, [pc, #16]	@ (8005334 <HAL_RCC_EnableCSS+0x1c>)
 8005322:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005326:	6013      	str	r3, [r2, #0]
}
 8005328:	bf00      	nop
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	40023800 	.word	0x40023800

08005338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800533c:	b094      	sub	sp, #80	@ 0x50
 800533e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005340:	2300      	movs	r3, #0
 8005342:	647b      	str	r3, [r7, #68]	@ 0x44
 8005344:	2300      	movs	r3, #0
 8005346:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005348:	2300      	movs	r3, #0
 800534a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800534c:	2300      	movs	r3, #0
 800534e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005350:	4b79      	ldr	r3, [pc, #484]	@ (8005538 <HAL_RCC_GetSysClockFreq+0x200>)
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f003 030c 	and.w	r3, r3, #12
 8005358:	2b08      	cmp	r3, #8
 800535a:	d00d      	beq.n	8005378 <HAL_RCC_GetSysClockFreq+0x40>
 800535c:	2b08      	cmp	r3, #8
 800535e:	f200 80e1 	bhi.w	8005524 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005362:	2b00      	cmp	r3, #0
 8005364:	d002      	beq.n	800536c <HAL_RCC_GetSysClockFreq+0x34>
 8005366:	2b04      	cmp	r3, #4
 8005368:	d003      	beq.n	8005372 <HAL_RCC_GetSysClockFreq+0x3a>
 800536a:	e0db      	b.n	8005524 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800536c:	4b73      	ldr	r3, [pc, #460]	@ (800553c <HAL_RCC_GetSysClockFreq+0x204>)
 800536e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005370:	e0db      	b.n	800552a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005372:	4b73      	ldr	r3, [pc, #460]	@ (8005540 <HAL_RCC_GetSysClockFreq+0x208>)
 8005374:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005376:	e0d8      	b.n	800552a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005378:	4b6f      	ldr	r3, [pc, #444]	@ (8005538 <HAL_RCC_GetSysClockFreq+0x200>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005380:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005382:	4b6d      	ldr	r3, [pc, #436]	@ (8005538 <HAL_RCC_GetSysClockFreq+0x200>)
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d063      	beq.n	8005456 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800538e:	4b6a      	ldr	r3, [pc, #424]	@ (8005538 <HAL_RCC_GetSysClockFreq+0x200>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	099b      	lsrs	r3, r3, #6
 8005394:	2200      	movs	r2, #0
 8005396:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005398:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800539a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800539c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80053a2:	2300      	movs	r3, #0
 80053a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80053a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80053aa:	4622      	mov	r2, r4
 80053ac:	462b      	mov	r3, r5
 80053ae:	f04f 0000 	mov.w	r0, #0
 80053b2:	f04f 0100 	mov.w	r1, #0
 80053b6:	0159      	lsls	r1, r3, #5
 80053b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053bc:	0150      	lsls	r0, r2, #5
 80053be:	4602      	mov	r2, r0
 80053c0:	460b      	mov	r3, r1
 80053c2:	4621      	mov	r1, r4
 80053c4:	1a51      	subs	r1, r2, r1
 80053c6:	6139      	str	r1, [r7, #16]
 80053c8:	4629      	mov	r1, r5
 80053ca:	eb63 0301 	sbc.w	r3, r3, r1
 80053ce:	617b      	str	r3, [r7, #20]
 80053d0:	f04f 0200 	mov.w	r2, #0
 80053d4:	f04f 0300 	mov.w	r3, #0
 80053d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053dc:	4659      	mov	r1, fp
 80053de:	018b      	lsls	r3, r1, #6
 80053e0:	4651      	mov	r1, sl
 80053e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053e6:	4651      	mov	r1, sl
 80053e8:	018a      	lsls	r2, r1, #6
 80053ea:	4651      	mov	r1, sl
 80053ec:	ebb2 0801 	subs.w	r8, r2, r1
 80053f0:	4659      	mov	r1, fp
 80053f2:	eb63 0901 	sbc.w	r9, r3, r1
 80053f6:	f04f 0200 	mov.w	r2, #0
 80053fa:	f04f 0300 	mov.w	r3, #0
 80053fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005402:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005406:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800540a:	4690      	mov	r8, r2
 800540c:	4699      	mov	r9, r3
 800540e:	4623      	mov	r3, r4
 8005410:	eb18 0303 	adds.w	r3, r8, r3
 8005414:	60bb      	str	r3, [r7, #8]
 8005416:	462b      	mov	r3, r5
 8005418:	eb49 0303 	adc.w	r3, r9, r3
 800541c:	60fb      	str	r3, [r7, #12]
 800541e:	f04f 0200 	mov.w	r2, #0
 8005422:	f04f 0300 	mov.w	r3, #0
 8005426:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800542a:	4629      	mov	r1, r5
 800542c:	024b      	lsls	r3, r1, #9
 800542e:	4621      	mov	r1, r4
 8005430:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005434:	4621      	mov	r1, r4
 8005436:	024a      	lsls	r2, r1, #9
 8005438:	4610      	mov	r0, r2
 800543a:	4619      	mov	r1, r3
 800543c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800543e:	2200      	movs	r2, #0
 8005440:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005442:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005444:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005448:	f7fa ff3a 	bl	80002c0 <__aeabi_uldivmod>
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	4613      	mov	r3, r2
 8005452:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005454:	e058      	b.n	8005508 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005456:	4b38      	ldr	r3, [pc, #224]	@ (8005538 <HAL_RCC_GetSysClockFreq+0x200>)
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	099b      	lsrs	r3, r3, #6
 800545c:	2200      	movs	r2, #0
 800545e:	4618      	mov	r0, r3
 8005460:	4611      	mov	r1, r2
 8005462:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005466:	623b      	str	r3, [r7, #32]
 8005468:	2300      	movs	r3, #0
 800546a:	627b      	str	r3, [r7, #36]	@ 0x24
 800546c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005470:	4642      	mov	r2, r8
 8005472:	464b      	mov	r3, r9
 8005474:	f04f 0000 	mov.w	r0, #0
 8005478:	f04f 0100 	mov.w	r1, #0
 800547c:	0159      	lsls	r1, r3, #5
 800547e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005482:	0150      	lsls	r0, r2, #5
 8005484:	4602      	mov	r2, r0
 8005486:	460b      	mov	r3, r1
 8005488:	4641      	mov	r1, r8
 800548a:	ebb2 0a01 	subs.w	sl, r2, r1
 800548e:	4649      	mov	r1, r9
 8005490:	eb63 0b01 	sbc.w	fp, r3, r1
 8005494:	f04f 0200 	mov.w	r2, #0
 8005498:	f04f 0300 	mov.w	r3, #0
 800549c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80054a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80054a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80054a8:	ebb2 040a 	subs.w	r4, r2, sl
 80054ac:	eb63 050b 	sbc.w	r5, r3, fp
 80054b0:	f04f 0200 	mov.w	r2, #0
 80054b4:	f04f 0300 	mov.w	r3, #0
 80054b8:	00eb      	lsls	r3, r5, #3
 80054ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054be:	00e2      	lsls	r2, r4, #3
 80054c0:	4614      	mov	r4, r2
 80054c2:	461d      	mov	r5, r3
 80054c4:	4643      	mov	r3, r8
 80054c6:	18e3      	adds	r3, r4, r3
 80054c8:	603b      	str	r3, [r7, #0]
 80054ca:	464b      	mov	r3, r9
 80054cc:	eb45 0303 	adc.w	r3, r5, r3
 80054d0:	607b      	str	r3, [r7, #4]
 80054d2:	f04f 0200 	mov.w	r2, #0
 80054d6:	f04f 0300 	mov.w	r3, #0
 80054da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054de:	4629      	mov	r1, r5
 80054e0:	028b      	lsls	r3, r1, #10
 80054e2:	4621      	mov	r1, r4
 80054e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054e8:	4621      	mov	r1, r4
 80054ea:	028a      	lsls	r2, r1, #10
 80054ec:	4610      	mov	r0, r2
 80054ee:	4619      	mov	r1, r3
 80054f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054f2:	2200      	movs	r2, #0
 80054f4:	61bb      	str	r3, [r7, #24]
 80054f6:	61fa      	str	r2, [r7, #28]
 80054f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054fc:	f7fa fee0 	bl	80002c0 <__aeabi_uldivmod>
 8005500:	4602      	mov	r2, r0
 8005502:	460b      	mov	r3, r1
 8005504:	4613      	mov	r3, r2
 8005506:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005508:	4b0b      	ldr	r3, [pc, #44]	@ (8005538 <HAL_RCC_GetSysClockFreq+0x200>)
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	0c1b      	lsrs	r3, r3, #16
 800550e:	f003 0303 	and.w	r3, r3, #3
 8005512:	3301      	adds	r3, #1
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005518:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800551a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800551c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005520:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005522:	e002      	b.n	800552a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005524:	4b05      	ldr	r3, [pc, #20]	@ (800553c <HAL_RCC_GetSysClockFreq+0x204>)
 8005526:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005528:	bf00      	nop
    }
  }
  return sysclockfreq;
 800552a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800552c:	4618      	mov	r0, r3
 800552e:	3750      	adds	r7, #80	@ 0x50
 8005530:	46bd      	mov	sp, r7
 8005532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005536:	bf00      	nop
 8005538:	40023800 	.word	0x40023800
 800553c:	00f42400 	.word	0x00f42400
 8005540:	007a1200 	.word	0x007a1200

08005544 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005548:	4b03      	ldr	r3, [pc, #12]	@ (8005558 <HAL_RCC_GetHCLKFreq+0x14>)
 800554a:	681b      	ldr	r3, [r3, #0]
}
 800554c:	4618      	mov	r0, r3
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	20000000 	.word	0x20000000

0800555c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005560:	f7ff fff0 	bl	8005544 <HAL_RCC_GetHCLKFreq>
 8005564:	4602      	mov	r2, r0
 8005566:	4b05      	ldr	r3, [pc, #20]	@ (800557c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	0a9b      	lsrs	r3, r3, #10
 800556c:	f003 0307 	and.w	r3, r3, #7
 8005570:	4903      	ldr	r1, [pc, #12]	@ (8005580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005572:	5ccb      	ldrb	r3, [r1, r3]
 8005574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005578:	4618      	mov	r0, r3
 800557a:	bd80      	pop	{r7, pc}
 800557c:	40023800 	.word	0x40023800
 8005580:	0800e8f0 	.word	0x0800e8f0

08005584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005588:	f7ff ffdc 	bl	8005544 <HAL_RCC_GetHCLKFreq>
 800558c:	4602      	mov	r2, r0
 800558e:	4b05      	ldr	r3, [pc, #20]	@ (80055a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	0b5b      	lsrs	r3, r3, #13
 8005594:	f003 0307 	and.w	r3, r3, #7
 8005598:	4903      	ldr	r1, [pc, #12]	@ (80055a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800559a:	5ccb      	ldrb	r3, [r1, r3]
 800559c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	40023800 	.word	0x40023800
 80055a8:	0800e8f0 	.word	0x0800e8f0

080055ac <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80055b0:	4b06      	ldr	r3, [pc, #24]	@ (80055cc <HAL_RCC_NMI_IRQHandler+0x20>)
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055b8:	2b80      	cmp	r3, #128	@ 0x80
 80055ba:	d104      	bne.n	80055c6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80055bc:	f000 f80a 	bl	80055d4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80055c0:	4b03      	ldr	r3, [pc, #12]	@ (80055d0 <HAL_RCC_NMI_IRQHandler+0x24>)
 80055c2:	2280      	movs	r2, #128	@ 0x80
 80055c4:	701a      	strb	r2, [r3, #0]
  }
}
 80055c6:	bf00      	nop
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	40023800 	.word	0x40023800
 80055d0:	4002380e 	.word	0x4002380e

080055d4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80055d4:	b480      	push	{r7}
 80055d6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80055d8:	bf00      	nop
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
	...

080055e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b088      	sub	sp, #32
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80055ec:	2300      	movs	r3, #0
 80055ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80055f0:	2300      	movs	r3, #0
 80055f2:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80055f4:	2300      	movs	r3, #0
 80055f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80055f8:	2300      	movs	r3, #0
 80055fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b00      	cmp	r3, #0
 8005606:	d012      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005608:	4b65      	ldr	r3, [pc, #404]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	4a64      	ldr	r2, [pc, #400]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800560e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005612:	6093      	str	r3, [r2, #8]
 8005614:	4b62      	ldr	r3, [pc, #392]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005616:	689a      	ldr	r2, [r3, #8]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561c:	4960      	ldr	r1, [pc, #384]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800561e:	4313      	orrs	r3, r2
 8005620:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800562a:	2301      	movs	r3, #1
 800562c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d017      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800563a:	4b59      	ldr	r3, [pc, #356]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800563c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005640:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005648:	4955      	ldr	r1, [pc, #340]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800564a:	4313      	orrs	r3, r2
 800564c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005654:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005658:	d101      	bne.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800565a:	2301      	movs	r3, #1
 800565c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8005666:	2301      	movs	r3, #1
 8005668:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d017      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005676:	4b4a      	ldr	r3, [pc, #296]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005678:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800567c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005684:	4946      	ldr	r1, [pc, #280]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005686:	4313      	orrs	r3, r2
 8005688:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005690:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005694:	d101      	bne.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8005696:	2301      	movs	r3, #1
 8005698:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80056a2:	2301      	movs	r3, #1
 80056a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0320 	and.w	r3, r3, #32
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f000 808b 	beq.w	80057ca <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056b4:	4b3a      	ldr	r3, [pc, #232]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b8:	4a39      	ldr	r2, [pc, #228]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056be:	6413      	str	r3, [r2, #64]	@ 0x40
 80056c0:	4b37      	ldr	r3, [pc, #220]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80056cc:	4b35      	ldr	r3, [pc, #212]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a34      	ldr	r2, [pc, #208]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80056d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056d8:	f7fc fcee 	bl	80020b8 <HAL_GetTick>
 80056dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80056de:	e008      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056e0:	f7fc fcea 	bl	80020b8 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b64      	cmp	r3, #100	@ 0x64
 80056ec:	d901      	bls.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e2bc      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80056f2:	4b2c      	ldr	r3, [pc, #176]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0f0      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056fe:	4b28      	ldr	r3, [pc, #160]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005706:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d035      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005712:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	429a      	cmp	r2, r3
 800571a:	d02e      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800571c:	4b20      	ldr	r3, [pc, #128]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800571e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005720:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005724:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005726:	4b1e      	ldr	r3, [pc, #120]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800572a:	4a1d      	ldr	r2, [pc, #116]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800572c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005730:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005732:	4b1b      	ldr	r3, [pc, #108]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005736:	4a1a      	ldr	r2, [pc, #104]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005738:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800573c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800573e:	4a18      	ldr	r2, [pc, #96]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005744:	4b16      	ldr	r3, [pc, #88]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b01      	cmp	r3, #1
 800574e:	d114      	bne.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005750:	f7fc fcb2 	bl	80020b8 <HAL_GetTick>
 8005754:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005756:	e00a      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005758:	f7fc fcae 	bl	80020b8 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005766:	4293      	cmp	r3, r2
 8005768:	d901      	bls.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e27e      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800576e:	4b0c      	ldr	r3, [pc, #48]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b00      	cmp	r3, #0
 8005778:	d0ee      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800577e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005782:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005786:	d111      	bne.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8005788:	4b05      	ldr	r3, [pc, #20]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8005794:	4b04      	ldr	r3, [pc, #16]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005796:	400b      	ands	r3, r1
 8005798:	4901      	ldr	r1, [pc, #4]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800579a:	4313      	orrs	r3, r2
 800579c:	608b      	str	r3, [r1, #8]
 800579e:	e00b      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80057a0:	40023800 	.word	0x40023800
 80057a4:	40007000 	.word	0x40007000
 80057a8:	0ffffcff 	.word	0x0ffffcff
 80057ac:	4ba4      	ldr	r3, [pc, #656]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	4aa3      	ldr	r2, [pc, #652]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80057b2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80057b6:	6093      	str	r3, [r2, #8]
 80057b8:	4ba1      	ldr	r3, [pc, #644]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80057ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057c4:	499e      	ldr	r1, [pc, #632]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0310 	and.w	r3, r3, #16
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d010      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057d6:	4b9a      	ldr	r3, [pc, #616]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80057d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057dc:	4a98      	ldr	r2, [pc, #608]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80057de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80057e6:	4b96      	ldr	r3, [pc, #600]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80057e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f0:	4993      	ldr	r1, [pc, #588]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00a      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005804:	4b8e      	ldr	r3, [pc, #568]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800580a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005812:	498b      	ldr	r1, [pc, #556]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005814:	4313      	orrs	r3, r2
 8005816:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00a      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005826:	4b86      	ldr	r3, [pc, #536]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800582c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005834:	4982      	ldr	r1, [pc, #520]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005836:	4313      	orrs	r3, r2
 8005838:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00a      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005848:	4b7d      	ldr	r3, [pc, #500]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800584a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800584e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005856:	497a      	ldr	r1, [pc, #488]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005858:	4313      	orrs	r3, r2
 800585a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00a      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800586a:	4b75      	ldr	r3, [pc, #468]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800586c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005870:	f023 0203 	bic.w	r2, r3, #3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005878:	4971      	ldr	r1, [pc, #452]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800587a:	4313      	orrs	r3, r2
 800587c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00a      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800588c:	4b6c      	ldr	r3, [pc, #432]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800588e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005892:	f023 020c 	bic.w	r2, r3, #12
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589a:	4969      	ldr	r1, [pc, #420]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800589c:	4313      	orrs	r3, r2
 800589e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00a      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058ae:	4b64      	ldr	r3, [pc, #400]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80058b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058bc:	4960      	ldr	r1, [pc, #384]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00a      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058d0:	4b5b      	ldr	r3, [pc, #364]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80058d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058de:	4958      	ldr	r1, [pc, #352]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00a      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058f2:	4b53      	ldr	r3, [pc, #332]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80058f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005900:	494f      	ldr	r1, [pc, #316]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005902:	4313      	orrs	r3, r2
 8005904:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00a      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005914:	4b4a      	ldr	r3, [pc, #296]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800591a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005922:	4947      	ldr	r1, [pc, #284]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005924:	4313      	orrs	r3, r2
 8005926:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00a      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005936:	4b42      	ldr	r3, [pc, #264]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800593c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005944:	493e      	ldr	r1, [pc, #248]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005946:	4313      	orrs	r3, r2
 8005948:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00a      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005958:	4b39      	ldr	r3, [pc, #228]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800595a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800595e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005966:	4936      	ldr	r1, [pc, #216]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005968:	4313      	orrs	r3, r2
 800596a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d011      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800597a:	4b31      	ldr	r3, [pc, #196]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800597c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005980:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005988:	492d      	ldr	r1, [pc, #180]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800598a:	4313      	orrs	r3, r2
 800598c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005994:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005998:	d101      	bne.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800599a:	2301      	movs	r3, #1
 800599c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00a      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059aa:	4b25      	ldr	r3, [pc, #148]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80059ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059b0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059b8:	4921      	ldr	r1, [pc, #132]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00a      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80059cc:	4b1c      	ldr	r3, [pc, #112]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80059ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059d2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80059da:	4919      	ldr	r1, [pc, #100]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80059ee:	4b14      	ldr	r3, [pc, #80]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80059f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059f4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059fc:	4910      	ldr	r1, [pc, #64]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d006      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f000 809d 	beq.w	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a18:	4b09      	ldr	r3, [pc, #36]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a08      	ldr	r2, [pc, #32]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005a22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a24:	f7fc fb48 	bl	80020b8 <HAL_GetTick>
 8005a28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a2a:	e00b      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a2c:	f7fc fb44 	bl	80020b8 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b64      	cmp	r3, #100	@ 0x64
 8005a38:	d904      	bls.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e116      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x688>
 8005a3e:	bf00      	nop
 8005a40:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a44:	4b8b      	ldr	r3, [pc, #556]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1ed      	bne.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d017      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d113      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005a64:	4b83      	ldr	r3, [pc, #524]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a6a:	0e1b      	lsrs	r3, r3, #24
 8005a6c:	f003 030f 	and.w	r3, r3, #15
 8005a70:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	019a      	lsls	r2, r3, #6
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	061b      	lsls	r3, r3, #24
 8005a7c:	431a      	orrs	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	071b      	lsls	r3, r3, #28
 8005a84:	497b      	ldr	r1, [pc, #492]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d004      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005aa0:	d00a      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d024      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ab2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ab6:	d11f      	bne.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005ab8:	4b6e      	ldr	r3, [pc, #440]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005abe:	0f1b      	lsrs	r3, r3, #28
 8005ac0:	f003 0307 	and.w	r3, r3, #7
 8005ac4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	019a      	lsls	r2, r3, #6
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	061b      	lsls	r3, r3, #24
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	071b      	lsls	r3, r3, #28
 8005ad8:	4966      	ldr	r1, [pc, #408]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005ae0:	4b64      	ldr	r3, [pc, #400]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ae6:	f023 021f 	bic.w	r2, r3, #31
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	3b01      	subs	r3, #1
 8005af0:	4960      	ldr	r1, [pc, #384]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00d      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	019a      	lsls	r2, r3, #6
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	061b      	lsls	r3, r3, #24
 8005b10:	431a      	orrs	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	071b      	lsls	r3, r3, #28
 8005b18:	4956      	ldr	r1, [pc, #344]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b20:	4b54      	ldr	r3, [pc, #336]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a53      	ldr	r2, [pc, #332]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005b26:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b2c:	f7fc fac4 	bl	80020b8 <HAL_GetTick>
 8005b30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b32:	e008      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b34:	f7fc fac0 	bl	80020b8 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	2b64      	cmp	r3, #100	@ 0x64
 8005b40:	d901      	bls.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e092      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b46:	4b4b      	ldr	r3, [pc, #300]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d0f0      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	f040 8088 	bne.w	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005b5a:	4b46      	ldr	r3, [pc, #280]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a45      	ldr	r2, [pc, #276]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005b60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b66:	f7fc faa7 	bl	80020b8 <HAL_GetTick>
 8005b6a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b6c:	e008      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b6e:	f7fc faa3 	bl	80020b8 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b64      	cmp	r3, #100	@ 0x64
 8005b7a:	d901      	bls.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e075      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b80:	4b3c      	ldr	r3, [pc, #240]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b8c:	d0ef      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d009      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d024      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d120      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005bb6:	4b2f      	ldr	r3, [pc, #188]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bbc:	0c1b      	lsrs	r3, r3, #16
 8005bbe:	f003 0303 	and.w	r3, r3, #3
 8005bc2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	019a      	lsls	r2, r3, #6
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	041b      	lsls	r3, r3, #16
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	061b      	lsls	r3, r3, #24
 8005bd6:	4927      	ldr	r1, [pc, #156]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005bde:	4b25      	ldr	r3, [pc, #148]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005be4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a1b      	ldr	r3, [r3, #32]
 8005bec:	3b01      	subs	r3, #1
 8005bee:	021b      	lsls	r3, r3, #8
 8005bf0:	4920      	ldr	r1, [pc, #128]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d018      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c0c:	d113      	bne.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c0e:	4b19      	ldr	r3, [pc, #100]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c14:	0e1b      	lsrs	r3, r3, #24
 8005c16:	f003 030f 	and.w	r3, r3, #15
 8005c1a:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	019a      	lsls	r2, r3, #6
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	041b      	lsls	r3, r3, #16
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	061b      	lsls	r3, r3, #24
 8005c2e:	4911      	ldr	r1, [pc, #68]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005c36:	4b0f      	ldr	r3, [pc, #60]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a0e      	ldr	r2, [pc, #56]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005c3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c42:	f7fc fa39 	bl	80020b8 <HAL_GetTick>
 8005c46:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c48:	e008      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c4a:	f7fc fa35 	bl	80020b8 <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	2b64      	cmp	r3, #100	@ 0x64
 8005c56:	d901      	bls.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e007      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c5c:	4b05      	ldr	r3, [pc, #20]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c68:	d1ef      	bne.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3720      	adds	r7, #32
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	40023800 	.word	0x40023800

08005c78 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e022      	b.n	8005cd0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d105      	bne.n	8005ca2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f7fb fbe5 	bl	800146c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2203      	movs	r2, #3
 8005ca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f814 	bl	8005cd8 <HAL_SD_InitCard>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e00a      	b.n	8005cd0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3708      	adds	r7, #8
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005cd8:	b5b0      	push	{r4, r5, r7, lr}
 8005cda:	b08e      	sub	sp, #56	@ 0x38
 8005cdc:	af04      	add	r7, sp, #16
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005cec:	2300      	movs	r3, #0
 8005cee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8005cf4:	2376      	movs	r3, #118	@ 0x76
 8005cf6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681d      	ldr	r5, [r3, #0]
 8005cfc:	466c      	mov	r4, sp
 8005cfe:	f107 0314 	add.w	r3, r7, #20
 8005d02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005d06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005d0a:	f107 0308 	add.w	r3, r7, #8
 8005d0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d10:	4628      	mov	r0, r5
 8005d12:	f002 fe5f 	bl	80089d4 <SDMMC_Init>
 8005d16:	4603      	mov	r3, r0
 8005d18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8005d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d001      	beq.n	8005d28 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e059      	b.n	8005ddc <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d36:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f002 fe93 	bl	8008a68 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d50:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8005d52:	2002      	movs	r0, #2
 8005d54:	f7fc f9bc 	bl	80020d0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 ff01 	bl	8006b60 <SD_PowerON>
 8005d5e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00b      	beq.n	8005d7e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	431a      	orrs	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e02e      	b.n	8005ddc <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 fe20 	bl	80069c4 <SD_InitCard>
 8005d84:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00b      	beq.n	8005da4 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e01b      	b.n	8005ddc <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005dac:	4618      	mov	r0, r3
 8005dae:	f002 feed 	bl	8008b8c <SDMMC_CmdBlockLength>
 8005db2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005db4:	6a3b      	ldr	r3, [r7, #32]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00f      	beq.n	8005dda <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a09      	ldr	r2, [pc, #36]	@ (8005de4 <HAL_SD_InitCard+0x10c>)
 8005dc0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	431a      	orrs	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e000      	b.n	8005ddc <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3728      	adds	r7, #40	@ 0x28
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bdb0      	pop	{r4, r5, r7, pc}
 8005de4:	004005ff 	.word	0x004005ff

08005de8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b092      	sub	sp, #72	@ 0x48
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
 8005df4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005df6:	f7fc f95f 	bl	80020b8 <HAL_GetTick>
 8005dfa:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d107      	bne.n	8005e1a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e0e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e1bd      	b.n	8006196 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	f040 81b0 	bne.w	8006188 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005e2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	441a      	add	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d907      	bls.n	8005e4c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e40:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e1a4      	b.n	8006196 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2203      	movs	r2, #3
 8005e50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d002      	beq.n	8005e6a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e66:	025b      	lsls	r3, r3, #9
 8005e68:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005e6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e6e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	025b      	lsls	r3, r3, #9
 8005e74:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005e76:	2390      	movs	r3, #144	@ 0x90
 8005e78:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8005e82:	2301      	movs	r3, #1
 8005e84:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f107 0214 	add.w	r2, r7, #20
 8005e8e:	4611      	mov	r1, r2
 8005e90:	4618      	mov	r0, r3
 8005e92:	f002 fe4f 	bl	8008b34 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d90a      	bls.n	8005eb2 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f002 feb3 	bl	8008c14 <SDMMC_CmdReadMultiBlock>
 8005eae:	6478      	str	r0, [r7, #68]	@ 0x44
 8005eb0:	e009      	b.n	8005ec6 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f002 fe86 	bl	8008bd0 <SDMMC_CmdReadSingleBlock>
 8005ec4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ec6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d012      	beq.n	8005ef2 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a7a      	ldr	r2, [pc, #488]	@ (80060bc <HAL_SD_ReadBlocks+0x2d4>)
 8005ed2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ed8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005eda:	431a      	orrs	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e151      	b.n	8006196 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005ef6:	e061      	b.n	8005fbc <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005efe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d03c      	beq.n	8005f80 <HAL_SD_ReadBlocks+0x198>
 8005f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d039      	beq.n	8005f80 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f10:	e033      	b.n	8005f7a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f002 fd88 	bl	8008a2c <SDMMC_ReadFIFO>
 8005f1c:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f24:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f28:	3301      	adds	r3, #1
 8005f2a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f34:	0a1b      	lsrs	r3, r3, #8
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f3a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f3e:	3301      	adds	r3, #1
 8005f40:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f44:	3b01      	subs	r3, #1
 8005f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f4a:	0c1b      	lsrs	r3, r3, #16
 8005f4c:	b2da      	uxtb	r2, r3
 8005f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f50:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f54:	3301      	adds	r3, #1
 8005f56:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005f58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f60:	0e1b      	lsrs	r3, r3, #24
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f66:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f70:	3b01      	subs	r3, #1
 8005f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8005f74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f76:	3301      	adds	r3, #1
 8005f78:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f7c:	2b07      	cmp	r3, #7
 8005f7e:	d9c8      	bls.n	8005f12 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005f80:	f7fc f89a 	bl	80020b8 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d902      	bls.n	8005f96 <HAL_SD_ReadBlocks+0x1ae>
 8005f90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d112      	bne.n	8005fbc <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a48      	ldr	r2, [pc, #288]	@ (80060bc <HAL_SD_ReadBlocks+0x2d4>)
 8005f9c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fa2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e0ec      	b.n	8006196 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fc2:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d096      	beq.n	8005ef8 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d022      	beq.n	800601e <HAL_SD_ReadBlocks+0x236>
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d91f      	bls.n	800601e <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fe2:	2b03      	cmp	r3, #3
 8005fe4:	d01b      	beq.n	800601e <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4618      	mov	r0, r3
 8005fec:	f002 fe78 	bl	8008ce0 <SDMMC_CmdStopTransfer>
 8005ff0:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005ff2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d012      	beq.n	800601e <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a2f      	ldr	r2, [pc, #188]	@ (80060bc <HAL_SD_ReadBlocks+0x2d4>)
 8005ffe:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006004:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006006:	431a      	orrs	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e0bb      	b.n	8006196 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006024:	f003 0308 	and.w	r3, r3, #8
 8006028:	2b00      	cmp	r3, #0
 800602a:	d012      	beq.n	8006052 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a22      	ldr	r2, [pc, #136]	@ (80060bc <HAL_SD_ReadBlocks+0x2d4>)
 8006032:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006038:	f043 0208 	orr.w	r2, r3, #8
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e0a1      	b.n	8006196 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006058:	f003 0302 	and.w	r3, r3, #2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d012      	beq.n	8006086 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a15      	ldr	r2, [pc, #84]	@ (80060bc <HAL_SD_ReadBlocks+0x2d4>)
 8006066:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800606c:	f043 0202 	orr.w	r2, r3, #2
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e087      	b.n	8006196 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800608c:	f003 0320 	and.w	r3, r3, #32
 8006090:	2b00      	cmp	r3, #0
 8006092:	d064      	beq.n	800615e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a08      	ldr	r2, [pc, #32]	@ (80060bc <HAL_SD_ReadBlocks+0x2d4>)
 800609a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a0:	f043 0220 	orr.w	r2, r3, #32
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e06d      	b.n	8006196 <HAL_SD_ReadBlocks+0x3ae>
 80060ba:	bf00      	nop
 80060bc:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f002 fcb1 	bl	8008a2c <SDMMC_ReadFIFO>
 80060ca:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80060cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ce:	b2da      	uxtb	r2, r3
 80060d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060d2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80060d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060d6:	3301      	adds	r3, #1
 80060d8:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80060da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060dc:	3b01      	subs	r3, #1
 80060de:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80060e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060e2:	0a1b      	lsrs	r3, r3, #8
 80060e4:	b2da      	uxtb	r2, r3
 80060e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060e8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80060ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ec:	3301      	adds	r3, #1
 80060ee:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80060f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060f2:	3b01      	subs	r3, #1
 80060f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80060f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f8:	0c1b      	lsrs	r3, r3, #16
 80060fa:	b2da      	uxtb	r2, r3
 80060fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060fe:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006102:	3301      	adds	r3, #1
 8006104:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006106:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006108:	3b01      	subs	r3, #1
 800610a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800610c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800610e:	0e1b      	lsrs	r3, r3, #24
 8006110:	b2da      	uxtb	r2, r3
 8006112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006114:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006118:	3301      	adds	r3, #1
 800611a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800611c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800611e:	3b01      	subs	r3, #1
 8006120:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006122:	f7fb ffc9 	bl	80020b8 <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800612e:	429a      	cmp	r2, r3
 8006130:	d902      	bls.n	8006138 <HAL_SD_ReadBlocks+0x350>
 8006132:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006134:	2b00      	cmp	r3, #0
 8006136:	d112      	bne.n	800615e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a18      	ldr	r2, [pc, #96]	@ (80061a0 <HAL_SD_ReadBlocks+0x3b8>)
 800613e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006144:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e01b      	b.n	8006196 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006164:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <HAL_SD_ReadBlocks+0x38a>
 800616c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1a6      	bne.n	80060c0 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f240 523a 	movw	r2, #1338	@ 0x53a
 800617a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8006184:	2300      	movs	r3, #0
 8006186:	e006      	b.n	8006196 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800618c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
  }
}
 8006196:	4618      	mov	r0, r3
 8006198:	3748      	adds	r7, #72	@ 0x48
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	004005ff 	.word	0x004005ff

080061a4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b092      	sub	sp, #72	@ 0x48
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
 80061b0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80061b2:	f7fb ff81 	bl	80020b8 <HAL_GetTick>
 80061b6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d107      	bne.n	80061d6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ca:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e165      	b.n	80064a2 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b01      	cmp	r3, #1
 80061e0:	f040 8158 	bne.w	8006494 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80061ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	441a      	add	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d907      	bls.n	8006208 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061fc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e14c      	b.n	80064a2 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2203      	movs	r2, #3
 800620c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2200      	movs	r2, #0
 8006216:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800621c:	2b01      	cmp	r3, #1
 800621e:	d002      	beq.n	8006226 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006222:	025b      	lsls	r3, r3, #9
 8006224:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006226:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800622a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	025b      	lsls	r3, r3, #9
 8006230:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006232:	2390      	movs	r3, #144	@ 0x90
 8006234:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006236:	2300      	movs	r3, #0
 8006238:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800623a:	2300      	movs	r3, #0
 800623c:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800623e:	2301      	movs	r3, #1
 8006240:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f107 0218 	add.w	r2, r7, #24
 800624a:	4611      	mov	r1, r2
 800624c:	4618      	mov	r0, r3
 800624e:	f002 fc71 	bl	8008b34 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d90a      	bls.n	800626e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2220      	movs	r2, #32
 800625c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006264:	4618      	mov	r0, r3
 8006266:	f002 fd19 	bl	8008c9c <SDMMC_CmdWriteMultiBlock>
 800626a:	6478      	str	r0, [r7, #68]	@ 0x44
 800626c:	e009      	b.n	8006282 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2210      	movs	r2, #16
 8006272:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800627a:	4618      	mov	r0, r3
 800627c:	f002 fcec 	bl	8008c58 <SDMMC_CmdWriteSingleBlock>
 8006280:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006282:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006284:	2b00      	cmp	r3, #0
 8006286:	d012      	beq.n	80062ae <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a87      	ldr	r2, [pc, #540]	@ (80064ac <HAL_SD_WriteBlocks+0x308>)
 800628e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006294:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006296:	431a      	orrs	r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e0f9      	b.n	80064a2 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80062b2:	e065      	b.n	8006380 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d040      	beq.n	8006344 <HAL_SD_WriteBlocks+0x1a0>
 80062c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d03d      	beq.n	8006344 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80062c8:	2300      	movs	r3, #0
 80062ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80062cc:	e037      	b.n	800633e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80062ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80062d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062d6:	3301      	adds	r3, #1
 80062d8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80062da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062dc:	3b01      	subs	r3, #1
 80062de:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80062e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	021a      	lsls	r2, r3, #8
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80062ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ee:	3301      	adds	r3, #1
 80062f0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80062f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062f4:	3b01      	subs	r3, #1
 80062f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80062f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	041a      	lsls	r2, r3, #16
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	4313      	orrs	r3, r2
 8006302:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006306:	3301      	adds	r3, #1
 8006308:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800630a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800630c:	3b01      	subs	r3, #1
 800630e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	061a      	lsls	r2, r3, #24
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	4313      	orrs	r3, r2
 800631a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800631c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800631e:	3301      	adds	r3, #1
 8006320:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006324:	3b01      	subs	r3, #1
 8006326:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f107 0214 	add.w	r2, r7, #20
 8006330:	4611      	mov	r1, r2
 8006332:	4618      	mov	r0, r3
 8006334:	f002 fb87 	bl	8008a46 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006338:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800633a:	3301      	adds	r3, #1
 800633c:	643b      	str	r3, [r7, #64]	@ 0x40
 800633e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006340:	2b07      	cmp	r3, #7
 8006342:	d9c4      	bls.n	80062ce <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006344:	f7fb feb8 	bl	80020b8 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006350:	429a      	cmp	r2, r3
 8006352:	d902      	bls.n	800635a <HAL_SD_WriteBlocks+0x1b6>
 8006354:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006356:	2b00      	cmp	r3, #0
 8006358:	d112      	bne.n	8006380 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a53      	ldr	r2, [pc, #332]	@ (80064ac <HAL_SD_WriteBlocks+0x308>)
 8006360:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006366:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006368:	431a      	orrs	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e090      	b.n	80064a2 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006386:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800638a:	2b00      	cmp	r3, #0
 800638c:	d092      	beq.n	80062b4 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006398:	2b00      	cmp	r3, #0
 800639a:	d022      	beq.n	80063e2 <HAL_SD_WriteBlocks+0x23e>
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d91f      	bls.n	80063e2 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	d01b      	beq.n	80063e2 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f002 fc96 	bl	8008ce0 <SDMMC_CmdStopTransfer>
 80063b4:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80063b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d012      	beq.n	80063e2 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a3a      	ldr	r2, [pc, #232]	@ (80064ac <HAL_SD_WriteBlocks+0x308>)
 80063c2:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063ca:	431a      	orrs	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e05f      	b.n	80064a2 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063e8:	f003 0308 	and.w	r3, r3, #8
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d012      	beq.n	8006416 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a2d      	ldr	r2, [pc, #180]	@ (80064ac <HAL_SD_WriteBlocks+0x308>)
 80063f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063fc:	f043 0208 	orr.w	r2, r3, #8
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e045      	b.n	80064a2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800641c:	f003 0302 	and.w	r3, r3, #2
 8006420:	2b00      	cmp	r3, #0
 8006422:	d012      	beq.n	800644a <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a20      	ldr	r2, [pc, #128]	@ (80064ac <HAL_SD_WriteBlocks+0x308>)
 800642a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006430:	f043 0202 	orr.w	r2, r3, #2
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e02b      	b.n	80064a2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006450:	f003 0310 	and.w	r3, r3, #16
 8006454:	2b00      	cmp	r3, #0
 8006456:	d012      	beq.n	800647e <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a13      	ldr	r2, [pc, #76]	@ (80064ac <HAL_SD_WriteBlocks+0x308>)
 800645e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006464:	f043 0210 	orr.w	r2, r3, #16
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e011      	b.n	80064a2 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006486:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8006490:	2300      	movs	r3, #0
 8006492:	e006      	b.n	80064a2 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006498:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
  }
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3748      	adds	r7, #72	@ 0x48
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	004005ff 	.word	0x004005ff

080064b0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064be:	0f9b      	lsrs	r3, r3, #30
 80064c0:	b2da      	uxtb	r2, r3
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064ca:	0e9b      	lsrs	r3, r3, #26
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	f003 030f 	and.w	r3, r3, #15
 80064d2:	b2da      	uxtb	r2, r3
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064dc:	0e1b      	lsrs	r3, r3, #24
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	f003 0303 	and.w	r3, r3, #3
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064ee:	0c1b      	lsrs	r3, r3, #16
 80064f0:	b2da      	uxtb	r2, r3
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064fa:	0a1b      	lsrs	r3, r3, #8
 80064fc:	b2da      	uxtb	r2, r3
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006506:	b2da      	uxtb	r2, r3
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006510:	0d1b      	lsrs	r3, r3, #20
 8006512:	b29a      	uxth	r2, r3
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800651c:	0c1b      	lsrs	r3, r3, #16
 800651e:	b2db      	uxtb	r3, r3
 8006520:	f003 030f 	and.w	r3, r3, #15
 8006524:	b2da      	uxtb	r2, r3
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800652e:	0bdb      	lsrs	r3, r3, #15
 8006530:	b2db      	uxtb	r3, r3
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	b2da      	uxtb	r2, r3
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006540:	0b9b      	lsrs	r3, r3, #14
 8006542:	b2db      	uxtb	r3, r3
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	b2da      	uxtb	r2, r3
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006552:	0b5b      	lsrs	r3, r3, #13
 8006554:	b2db      	uxtb	r3, r3
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	b2da      	uxtb	r2, r3
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006564:	0b1b      	lsrs	r3, r3, #12
 8006566:	b2db      	uxtb	r3, r3
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	b2da      	uxtb	r2, r3
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2200      	movs	r2, #0
 8006576:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800657c:	2b00      	cmp	r3, #0
 800657e:	d163      	bne.n	8006648 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006584:	009a      	lsls	r2, r3, #2
 8006586:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800658a:	4013      	ands	r3, r2
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8006590:	0f92      	lsrs	r2, r2, #30
 8006592:	431a      	orrs	r2, r3
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800659c:	0edb      	lsrs	r3, r3, #27
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	f003 0307 	and.w	r3, r3, #7
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065ae:	0e1b      	lsrs	r3, r3, #24
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	f003 0307 	and.w	r3, r3, #7
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065c0:	0d5b      	lsrs	r3, r3, #21
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	f003 0307 	and.w	r3, r3, #7
 80065c8:	b2da      	uxtb	r2, r3
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065d2:	0c9b      	lsrs	r3, r3, #18
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	f003 0307 	and.w	r3, r3, #7
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065e4:	0bdb      	lsrs	r3, r3, #15
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	f003 0307 	and.w	r3, r3, #7
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	1c5a      	adds	r2, r3, #1
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	7e1b      	ldrb	r3, [r3, #24]
 8006600:	b2db      	uxtb	r3, r3
 8006602:	f003 0307 	and.w	r3, r3, #7
 8006606:	3302      	adds	r3, #2
 8006608:	2201      	movs	r2, #1
 800660a:	fa02 f303 	lsl.w	r3, r2, r3
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006612:	fb03 f202 	mul.w	r2, r3, r2
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	7a1b      	ldrb	r3, [r3, #8]
 800661e:	b2db      	uxtb	r3, r3
 8006620:	f003 030f 	and.w	r3, r3, #15
 8006624:	2201      	movs	r2, #1
 8006626:	409a      	lsls	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8006634:	0a52      	lsrs	r2, r2, #9
 8006636:	fb03 f202 	mul.w	r2, r3, r2
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006644:	661a      	str	r2, [r3, #96]	@ 0x60
 8006646:	e031      	b.n	80066ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800664c:	2b01      	cmp	r3, #1
 800664e:	d11d      	bne.n	800668c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006654:	041b      	lsls	r3, r3, #16
 8006656:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800665e:	0c1b      	lsrs	r3, r3, #16
 8006660:	431a      	orrs	r2, r3
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	3301      	adds	r3, #1
 800666c:	029a      	lsls	r2, r3, #10
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006680:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	661a      	str	r2, [r3, #96]	@ 0x60
 800668a:	e00f      	b.n	80066ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a58      	ldr	r2, [pc, #352]	@ (80067f4 <HAL_SD_GetCardCSD+0x344>)
 8006692:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006698:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e09d      	b.n	80067e8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066b0:	0b9b      	lsrs	r3, r3, #14
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	b2da      	uxtb	r2, r3
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066c2:	09db      	lsrs	r3, r3, #7
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066da:	b2da      	uxtb	r2, r3
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066e4:	0fdb      	lsrs	r3, r3, #31
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066f0:	0f5b      	lsrs	r3, r3, #29
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	f003 0303 	and.w	r3, r3, #3
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006702:	0e9b      	lsrs	r3, r3, #26
 8006704:	b2db      	uxtb	r3, r3
 8006706:	f003 0307 	and.w	r3, r3, #7
 800670a:	b2da      	uxtb	r2, r3
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006714:	0d9b      	lsrs	r3, r3, #22
 8006716:	b2db      	uxtb	r3, r3
 8006718:	f003 030f 	and.w	r3, r3, #15
 800671c:	b2da      	uxtb	r2, r3
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006726:	0d5b      	lsrs	r3, r3, #21
 8006728:	b2db      	uxtb	r3, r3
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	b2da      	uxtb	r2, r3
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006742:	0c1b      	lsrs	r3, r3, #16
 8006744:	b2db      	uxtb	r3, r3
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	b2da      	uxtb	r2, r3
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006756:	0bdb      	lsrs	r3, r3, #15
 8006758:	b2db      	uxtb	r3, r3
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	b2da      	uxtb	r2, r3
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800676a:	0b9b      	lsrs	r3, r3, #14
 800676c:	b2db      	uxtb	r3, r3
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	b2da      	uxtb	r2, r3
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800677e:	0b5b      	lsrs	r3, r3, #13
 8006780:	b2db      	uxtb	r3, r3
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	b2da      	uxtb	r2, r3
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006792:	0b1b      	lsrs	r3, r3, #12
 8006794:	b2db      	uxtb	r3, r3
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	b2da      	uxtb	r2, r3
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067a6:	0a9b      	lsrs	r3, r3, #10
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	f003 0303 	and.w	r3, r3, #3
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067ba:	0a1b      	lsrs	r3, r3, #8
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	f003 0303 	and.w	r3, r3, #3
 80067c2:	b2da      	uxtb	r2, r3
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067ce:	085b      	lsrs	r3, r3, #1
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067d6:	b2da      	uxtb	r2, r3
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr
 80067f4:	004005ff 	.word	0x004005ff

080067f8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006850:	b5b0      	push	{r4, r5, r7, lr}
 8006852:	b08e      	sub	sp, #56	@ 0x38
 8006854:	af04      	add	r7, sp, #16
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800685a:	2300      	movs	r3, #0
 800685c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2203      	movs	r2, #3
 8006864:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800686c:	2b03      	cmp	r3, #3
 800686e:	d02e      	beq.n	80068ce <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006876:	d106      	bne.n	8006886 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800687c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	639a      	str	r2, [r3, #56]	@ 0x38
 8006884:	e029      	b.n	80068da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800688c:	d10a      	bne.n	80068a4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 fa1c 	bl	8006ccc <SD_WideBus_Enable>
 8006894:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800689a:	6a3b      	ldr	r3, [r7, #32]
 800689c:	431a      	orrs	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80068a2:	e01a      	b.n	80068da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d10a      	bne.n	80068c0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 fa59 	bl	8006d62 <SD_WideBus_Disable>
 80068b0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	431a      	orrs	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80068be:	e00c      	b.n	80068da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80068cc:	e005      	b.n	80068da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00b      	beq.n	80068fa <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a26      	ldr	r2, [pc, #152]	@ (8006980 <HAL_SD_ConfigWideBusOperation+0x130>)
 80068e8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80068f8:	e01f      	b.n	800693a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	695b      	ldr	r3, [r3, #20]
 8006914:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681d      	ldr	r5, [r3, #0]
 8006920:	466c      	mov	r4, sp
 8006922:	f107 0314 	add.w	r3, r7, #20
 8006926:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800692a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800692e:	f107 0308 	add.w	r3, r7, #8
 8006932:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006934:	4628      	mov	r0, r5
 8006936:	f002 f84d 	bl	80089d4 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006942:	4618      	mov	r0, r3
 8006944:	f002 f922 	bl	8008b8c <SDMMC_CmdBlockLength>
 8006948:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800694a:	6a3b      	ldr	r3, [r7, #32]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00c      	beq.n	800696a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a0a      	ldr	r2, [pc, #40]	@ (8006980 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006956:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800695c:	6a3b      	ldr	r3, [r7, #32]
 800695e:	431a      	orrs	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8006972:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006976:	4618      	mov	r0, r3
 8006978:	3728      	adds	r7, #40	@ 0x28
 800697a:	46bd      	mov	sp, r7
 800697c:	bdb0      	pop	{r4, r5, r7, pc}
 800697e:	bf00      	nop
 8006980:	004005ff 	.word	0x004005ff

08006984 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800698c:	2300      	movs	r3, #0
 800698e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006990:	f107 030c 	add.w	r3, r7, #12
 8006994:	4619      	mov	r1, r3
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f970 	bl	8006c7c <SD_SendStatus>
 800699c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d005      	beq.n	80069b0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	431a      	orrs	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	0a5b      	lsrs	r3, r3, #9
 80069b4:	f003 030f 	and.w	r3, r3, #15
 80069b8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80069ba:	693b      	ldr	r3, [r7, #16]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3718      	adds	r7, #24
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80069c4:	b5b0      	push	{r4, r5, r7, lr}
 80069c6:	b094      	sub	sp, #80	@ 0x50
 80069c8:	af04      	add	r7, sp, #16
 80069ca:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80069cc:	2301      	movs	r3, #1
 80069ce:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4618      	mov	r0, r3
 80069d6:	f002 f855 	bl	8008a84 <SDMMC_GetPowerState>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d102      	bne.n	80069e6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80069e0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80069e4:	e0b8      	b.n	8006b58 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ea:	2b03      	cmp	r3, #3
 80069ec:	d02f      	beq.n	8006a4e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f002 fa7f 	bl	8008ef6 <SDMMC_CmdSendCID>
 80069f8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80069fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d001      	beq.n	8006a04 <SD_InitCard+0x40>
    {
      return errorstate;
 8006a00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a02:	e0a9      	b.n	8006b58 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2100      	movs	r1, #0
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f002 f87f 	bl	8008b0e <SDMMC_GetResponse>
 8006a10:	4602      	mov	r2, r0
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2104      	movs	r1, #4
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f002 f876 	bl	8008b0e <SDMMC_GetResponse>
 8006a22:	4602      	mov	r2, r0
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2108      	movs	r1, #8
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f002 f86d 	bl	8008b0e <SDMMC_GetResponse>
 8006a34:	4602      	mov	r2, r0
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	210c      	movs	r1, #12
 8006a40:	4618      	mov	r0, r3
 8006a42:	f002 f864 	bl	8008b0e <SDMMC_GetResponse>
 8006a46:	4602      	mov	r2, r0
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a52:	2b03      	cmp	r3, #3
 8006a54:	d00d      	beq.n	8006a72 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f107 020e 	add.w	r2, r7, #14
 8006a5e:	4611      	mov	r1, r2
 8006a60:	4618      	mov	r0, r3
 8006a62:	f002 fa85 	bl	8008f70 <SDMMC_CmdSetRelAdd>
 8006a66:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d001      	beq.n	8006a72 <SD_InitCard+0xae>
    {
      return errorstate;
 8006a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a70:	e072      	b.n	8006b58 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a76:	2b03      	cmp	r3, #3
 8006a78:	d036      	beq.n	8006ae8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006a7a:	89fb      	ldrh	r3, [r7, #14]
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a8a:	041b      	lsls	r3, r3, #16
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	4610      	mov	r0, r2
 8006a90:	f002 fa4f 	bl	8008f32 <SDMMC_CmdSendCSD>
 8006a94:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d001      	beq.n	8006aa0 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006a9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a9e:	e05b      	b.n	8006b58 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f002 f831 	bl	8008b0e <SDMMC_GetResponse>
 8006aac:	4602      	mov	r2, r0
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2104      	movs	r1, #4
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f002 f828 	bl	8008b0e <SDMMC_GetResponse>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2108      	movs	r1, #8
 8006aca:	4618      	mov	r0, r3
 8006acc:	f002 f81f 	bl	8008b0e <SDMMC_GetResponse>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	210c      	movs	r1, #12
 8006adc:	4618      	mov	r0, r3
 8006ade:	f002 f816 	bl	8008b0e <SDMMC_GetResponse>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2104      	movs	r1, #4
 8006aee:	4618      	mov	r0, r3
 8006af0:	f002 f80d 	bl	8008b0e <SDMMC_GetResponse>
 8006af4:	4603      	mov	r3, r0
 8006af6:	0d1a      	lsrs	r2, r3, #20
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006afc:	f107 0310 	add.w	r3, r7, #16
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7ff fcd4 	bl	80064b0 <HAL_SD_GetCardCSD>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d002      	beq.n	8006b14 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b0e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006b12:	e021      	b.n	8006b58 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6819      	ldr	r1, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b1c:	041b      	lsls	r3, r3, #16
 8006b1e:	2200      	movs	r2, #0
 8006b20:	461c      	mov	r4, r3
 8006b22:	4615      	mov	r5, r2
 8006b24:	4622      	mov	r2, r4
 8006b26:	462b      	mov	r3, r5
 8006b28:	4608      	mov	r0, r1
 8006b2a:	f002 f8fb 	bl	8008d24 <SDMMC_CmdSelDesel>
 8006b2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <SD_InitCard+0x176>
  {
    return errorstate;
 8006b36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b38:	e00e      	b.n	8006b58 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681d      	ldr	r5, [r3, #0]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	466c      	mov	r4, sp
 8006b42:	f103 0210 	add.w	r2, r3, #16
 8006b46:	ca07      	ldmia	r2, {r0, r1, r2}
 8006b48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006b4c:	3304      	adds	r3, #4
 8006b4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b50:	4628      	mov	r0, r5
 8006b52:	f001 ff3f 	bl	80089d4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3740      	adds	r7, #64	@ 0x40
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bdb0      	pop	{r4, r5, r7, pc}

08006b60 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	617b      	str	r3, [r7, #20]
 8006b70:	2300      	movs	r3, #0
 8006b72:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f002 f8f6 	bl	8008d6a <SDMMC_CmdGoIdleState>
 8006b7e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <SD_PowerON+0x2a>
  {
    return errorstate;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	e072      	b.n	8006c70 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f002 f909 	bl	8008da6 <SDMMC_CmdOperCond>
 8006b94:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00d      	beq.n	8006bb8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f002 f8df 	bl	8008d6a <SDMMC_CmdGoIdleState>
 8006bac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d004      	beq.n	8006bbe <SD_PowerON+0x5e>
    {
      return errorstate;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	e05b      	b.n	8006c70 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d137      	bne.n	8006c36 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2100      	movs	r1, #0
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f002 f909 	bl	8008de4 <SDMMC_CmdAppCommand>
 8006bd2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d02d      	beq.n	8006c36 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006bda:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006bde:	e047      	b.n	8006c70 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2100      	movs	r1, #0
 8006be6:	4618      	mov	r0, r3
 8006be8:	f002 f8fc 	bl	8008de4 <SDMMC_CmdAppCommand>
 8006bec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <SD_PowerON+0x98>
    {
      return errorstate;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	e03b      	b.n	8006c70 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	491e      	ldr	r1, [pc, #120]	@ (8006c78 <SD_PowerON+0x118>)
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f002 f912 	bl	8008e28 <SDMMC_CmdAppOperCommand>
 8006c04:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d002      	beq.n	8006c12 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c0c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006c10:	e02e      	b.n	8006c70 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2100      	movs	r1, #0
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f001 ff78 	bl	8008b0e <SDMMC_GetResponse>
 8006c1e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	0fdb      	lsrs	r3, r3, #31
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d101      	bne.n	8006c2c <SD_PowerON+0xcc>
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e000      	b.n	8006c2e <SD_PowerON+0xce>
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	613b      	str	r3, [r7, #16]

    count++;
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	3301      	adds	r3, #1
 8006c34:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d802      	bhi.n	8006c46 <SD_PowerON+0xe6>
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d0cc      	beq.n	8006be0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d902      	bls.n	8006c56 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006c50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006c54:	e00c      	b.n	8006c70 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d003      	beq.n	8006c68 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	645a      	str	r2, [r3, #68]	@ 0x44
 8006c66:	e002      	b.n	8006c6e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3718      	adds	r7, #24
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	c1100000 	.word	0xc1100000

08006c7c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d102      	bne.n	8006c92 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006c8c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006c90:	e018      	b.n	8006cc4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c9a:	041b      	lsls	r3, r3, #16
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	4610      	mov	r0, r2
 8006ca0:	f002 f987 	bl	8008fb2 <SDMMC_CmdSendStatus>
 8006ca4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d001      	beq.n	8006cb0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	e009      	b.n	8006cc4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f001 ff29 	bl	8008b0e <SDMMC_GetResponse>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	60fb      	str	r3, [r7, #12]
 8006cd8:	2300      	movs	r3, #0
 8006cda:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f001 ff13 	bl	8008b0e <SDMMC_GetResponse>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cf2:	d102      	bne.n	8006cfa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006cf4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006cf8:	e02f      	b.n	8006d5a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006cfa:	f107 030c 	add.w	r3, r7, #12
 8006cfe:	4619      	mov	r1, r3
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 f879 	bl	8006df8 <SD_FindSCR>
 8006d06:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	e023      	b.n	8006d5a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d01c      	beq.n	8006d56 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d24:	041b      	lsls	r3, r3, #16
 8006d26:	4619      	mov	r1, r3
 8006d28:	4610      	mov	r0, r2
 8006d2a:	f002 f85b 	bl	8008de4 <SDMMC_CmdAppCommand>
 8006d2e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d001      	beq.n	8006d3a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	e00f      	b.n	8006d5a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2102      	movs	r1, #2
 8006d40:	4618      	mov	r0, r3
 8006d42:	f002 f895 	bl	8008e70 <SDMMC_CmdBusWidth>
 8006d46:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d001      	beq.n	8006d52 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	e003      	b.n	8006d5a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006d52:	2300      	movs	r3, #0
 8006d54:	e001      	b.n	8006d5a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006d56:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3718      	adds	r7, #24
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b086      	sub	sp, #24
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60fb      	str	r3, [r7, #12]
 8006d6e:	2300      	movs	r3, #0
 8006d70:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2100      	movs	r1, #0
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f001 fec8 	bl	8008b0e <SDMMC_GetResponse>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d88:	d102      	bne.n	8006d90 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006d8a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006d8e:	e02f      	b.n	8006df0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006d90:	f107 030c 	add.w	r3, r7, #12
 8006d94:	4619      	mov	r1, r3
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f82e 	bl	8006df8 <SD_FindSCR>
 8006d9c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d001      	beq.n	8006da8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	e023      	b.n	8006df0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d01c      	beq.n	8006dec <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dba:	041b      	lsls	r3, r3, #16
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	4610      	mov	r0, r2
 8006dc0:	f002 f810 	bl	8008de4 <SDMMC_CmdAppCommand>
 8006dc4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d001      	beq.n	8006dd0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	e00f      	b.n	8006df0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f002 f84a 	bl	8008e70 <SDMMC_CmdBusWidth>
 8006ddc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	e003      	b.n	8006df0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006de8:	2300      	movs	r3, #0
 8006dea:	e001      	b.n	8006df0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006dec:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3718      	adds	r7, #24
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006df8:	b590      	push	{r4, r7, lr}
 8006dfa:	b08f      	sub	sp, #60	@ 0x3c
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006e02:	f7fb f959 	bl	80020b8 <HAL_GetTick>
 8006e06:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	60bb      	str	r3, [r7, #8]
 8006e10:	2300      	movs	r3, #0
 8006e12:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2108      	movs	r1, #8
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f001 feb4 	bl	8008b8c <SDMMC_CmdBlockLength>
 8006e24:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d001      	beq.n	8006e30 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e2e:	e0b2      	b.n	8006f96 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e38:	041b      	lsls	r3, r3, #16
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	4610      	mov	r0, r2
 8006e3e:	f001 ffd1 	bl	8008de4 <SDMMC_CmdAppCommand>
 8006e42:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d001      	beq.n	8006e4e <SD_FindSCR+0x56>
  {
    return errorstate;
 8006e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e4c:	e0a3      	b.n	8006f96 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006e4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006e52:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006e54:	2308      	movs	r3, #8
 8006e56:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006e58:	2330      	movs	r3, #48	@ 0x30
 8006e5a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006e64:	2301      	movs	r3, #1
 8006e66:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f107 0210 	add.w	r2, r7, #16
 8006e70:	4611      	mov	r1, r2
 8006e72:	4618      	mov	r0, r3
 8006e74:	f001 fe5e 	bl	8008b34 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f002 f819 	bl	8008eb4 <SDMMC_CmdSendSCR>
 8006e82:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d02a      	beq.n	8006ee0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8006e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e8c:	e083      	b.n	8006f96 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00f      	beq.n	8006ebc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6819      	ldr	r1, [r3, #0]
 8006ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	f107 0208 	add.w	r2, r7, #8
 8006ea8:	18d4      	adds	r4, r2, r3
 8006eaa:	4608      	mov	r0, r1
 8006eac:	f001 fdbe 	bl	8008a2c <SDMMC_ReadFIFO>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	6023      	str	r3, [r4, #0]
      index++;
 8006eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eba:	e006      	b.n	8006eca <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ec2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d012      	beq.n	8006ef0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006eca:	f7fb f8f5 	bl	80020b8 <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ed8:	d102      	bne.n	8006ee0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006eda:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006ede:	e05a      	b.n	8006f96 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ee6:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d0cf      	beq.n	8006e8e <SD_FindSCR+0x96>
 8006eee:	e000      	b.n	8006ef2 <SD_FindSCR+0xfa>
      break;
 8006ef0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ef8:	f003 0308 	and.w	r3, r3, #8
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d005      	beq.n	8006f0c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2208      	movs	r2, #8
 8006f06:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006f08:	2308      	movs	r3, #8
 8006f0a:	e044      	b.n	8006f96 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f12:	f003 0302 	and.w	r3, r3, #2
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d005      	beq.n	8006f26 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2202      	movs	r2, #2
 8006f20:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006f22:	2302      	movs	r3, #2
 8006f24:	e037      	b.n	8006f96 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f2c:	f003 0320 	and.w	r3, r3, #32
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d005      	beq.n	8006f40 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2220      	movs	r2, #32
 8006f3a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006f3c:	2320      	movs	r3, #32
 8006f3e:	e02a      	b.n	8006f96 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006f48:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	061a      	lsls	r2, r3, #24
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	021b      	lsls	r3, r3, #8
 8006f52:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006f56:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	0a1b      	lsrs	r3, r3, #8
 8006f5c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006f60:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	0e1b      	lsrs	r3, r3, #24
 8006f66:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f6a:	601a      	str	r2, [r3, #0]
    scr++;
 8006f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f6e:	3304      	adds	r3, #4
 8006f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	061a      	lsls	r2, r3, #24
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	021b      	lsls	r3, r3, #8
 8006f7a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006f7e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	0a1b      	lsrs	r3, r3, #8
 8006f84:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006f88:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	0e1b      	lsrs	r3, r3, #24
 8006f8e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f92:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	373c      	adds	r7, #60	@ 0x3c
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd90      	pop	{r4, r7, pc}

08006f9e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b084      	sub	sp, #16
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d101      	bne.n	8006fb0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e09d      	b.n	80070ec <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d108      	bne.n	8006fca <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fc0:	d009      	beq.n	8006fd6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	61da      	str	r2, [r3, #28]
 8006fc8:	e005      	b.n	8006fd6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d106      	bne.n	8006ff6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f7fa fac1 	bl	8001578 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2202      	movs	r2, #2
 8006ffa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800700c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007016:	d902      	bls.n	800701e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007018:	2300      	movs	r3, #0
 800701a:	60fb      	str	r3, [r7, #12]
 800701c:	e002      	b.n	8007024 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800701e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007022:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800702c:	d007      	beq.n	800703e <HAL_SPI_Init+0xa0>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007036:	d002      	beq.n	800703e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800704e:	431a      	orrs	r2, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	f003 0302 	and.w	r3, r3, #2
 8007058:	431a      	orrs	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	431a      	orrs	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800706c:	431a      	orrs	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	69db      	ldr	r3, [r3, #28]
 8007072:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007076:	431a      	orrs	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a1b      	ldr	r3, [r3, #32]
 800707c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007080:	ea42 0103 	orr.w	r1, r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007088:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	430a      	orrs	r2, r1
 8007092:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	0c1b      	lsrs	r3, r3, #16
 800709a:	f003 0204 	and.w	r2, r3, #4
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a2:	f003 0310 	and.w	r3, r3, #16
 80070a6:	431a      	orrs	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070ac:	f003 0308 	and.w	r3, r3, #8
 80070b0:	431a      	orrs	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80070ba:	ea42 0103 	orr.w	r1, r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	430a      	orrs	r2, r1
 80070ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	69da      	ldr	r2, [r3, #28]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80070da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e049      	b.n	800719a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800710c:	b2db      	uxtb	r3, r3
 800710e:	2b00      	cmp	r3, #0
 8007110:	d106      	bne.n	8007120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f7fa fb14 	bl	8001748 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2202      	movs	r2, #2
 8007124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	3304      	adds	r3, #4
 8007130:	4619      	mov	r1, r3
 8007132:	4610      	mov	r0, r2
 8007134:	f000 f9a0 	bl	8007478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b082      	sub	sp, #8
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e049      	b.n	8007248 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d106      	bne.n	80071ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f7fa fa69 	bl	80016a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2202      	movs	r2, #2
 80071d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	3304      	adds	r3, #4
 80071de:	4619      	mov	r1, r3
 80071e0:	4610      	mov	r0, r2
 80071e2:	f000 f949 	bl	8007478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2201      	movs	r2, #1
 800721a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007266:	2b01      	cmp	r3, #1
 8007268:	d101      	bne.n	800726e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800726a:	2302      	movs	r3, #2
 800726c:	e0ff      	b.n	800746e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2b14      	cmp	r3, #20
 800727a:	f200 80f0 	bhi.w	800745e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800727e:	a201      	add	r2, pc, #4	@ (adr r2, 8007284 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007284:	080072d9 	.word	0x080072d9
 8007288:	0800745f 	.word	0x0800745f
 800728c:	0800745f 	.word	0x0800745f
 8007290:	0800745f 	.word	0x0800745f
 8007294:	08007319 	.word	0x08007319
 8007298:	0800745f 	.word	0x0800745f
 800729c:	0800745f 	.word	0x0800745f
 80072a0:	0800745f 	.word	0x0800745f
 80072a4:	0800735b 	.word	0x0800735b
 80072a8:	0800745f 	.word	0x0800745f
 80072ac:	0800745f 	.word	0x0800745f
 80072b0:	0800745f 	.word	0x0800745f
 80072b4:	0800739b 	.word	0x0800739b
 80072b8:	0800745f 	.word	0x0800745f
 80072bc:	0800745f 	.word	0x0800745f
 80072c0:	0800745f 	.word	0x0800745f
 80072c4:	080073dd 	.word	0x080073dd
 80072c8:	0800745f 	.word	0x0800745f
 80072cc:	0800745f 	.word	0x0800745f
 80072d0:	0800745f 	.word	0x0800745f
 80072d4:	0800741d 	.word	0x0800741d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68b9      	ldr	r1, [r7, #8]
 80072de:	4618      	mov	r0, r3
 80072e0:	f000 f976 	bl	80075d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	699a      	ldr	r2, [r3, #24]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f042 0208 	orr.w	r2, r2, #8
 80072f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	699a      	ldr	r2, [r3, #24]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f022 0204 	bic.w	r2, r2, #4
 8007302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	6999      	ldr	r1, [r3, #24]
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	691a      	ldr	r2, [r3, #16]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	430a      	orrs	r2, r1
 8007314:	619a      	str	r2, [r3, #24]
      break;
 8007316:	e0a5      	b.n	8007464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68b9      	ldr	r1, [r7, #8]
 800731e:	4618      	mov	r0, r3
 8007320:	f000 f9c8 	bl	80076b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	699a      	ldr	r2, [r3, #24]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	699a      	ldr	r2, [r3, #24]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	6999      	ldr	r1, [r3, #24]
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	021a      	lsls	r2, r3, #8
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	430a      	orrs	r2, r1
 8007356:	619a      	str	r2, [r3, #24]
      break;
 8007358:	e084      	b.n	8007464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68b9      	ldr	r1, [r7, #8]
 8007360:	4618      	mov	r0, r3
 8007362:	f000 fa1f 	bl	80077a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	69da      	ldr	r2, [r3, #28]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f042 0208 	orr.w	r2, r2, #8
 8007374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	69da      	ldr	r2, [r3, #28]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f022 0204 	bic.w	r2, r2, #4
 8007384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	69d9      	ldr	r1, [r3, #28]
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	691a      	ldr	r2, [r3, #16]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	430a      	orrs	r2, r1
 8007396:	61da      	str	r2, [r3, #28]
      break;
 8007398:	e064      	b.n	8007464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68b9      	ldr	r1, [r7, #8]
 80073a0:	4618      	mov	r0, r3
 80073a2:	f000 fa75 	bl	8007890 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	69da      	ldr	r2, [r3, #28]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80073b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	69da      	ldr	r2, [r3, #28]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	69d9      	ldr	r1, [r3, #28]
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	021a      	lsls	r2, r3, #8
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	430a      	orrs	r2, r1
 80073d8:	61da      	str	r2, [r3, #28]
      break;
 80073da:	e043      	b.n	8007464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68b9      	ldr	r1, [r7, #8]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 faac 	bl	8007940 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f042 0208 	orr.w	r2, r2, #8
 80073f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f022 0204 	bic.w	r2, r2, #4
 8007406:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	691a      	ldr	r2, [r3, #16]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	430a      	orrs	r2, r1
 8007418:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800741a:	e023      	b.n	8007464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68b9      	ldr	r1, [r7, #8]
 8007422:	4618      	mov	r0, r3
 8007424:	f000 fade 	bl	80079e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007436:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007446:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	021a      	lsls	r2, r3, #8
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	430a      	orrs	r2, r1
 800745a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800745c:	e002      	b.n	8007464 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	75fb      	strb	r3, [r7, #23]
      break;
 8007462:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800746c:	7dfb      	ldrb	r3, [r7, #23]
}
 800746e:	4618      	mov	r0, r3
 8007470:	3718      	adds	r7, #24
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop

08007478 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a46      	ldr	r2, [pc, #280]	@ (80075a4 <TIM_Base_SetConfig+0x12c>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d013      	beq.n	80074b8 <TIM_Base_SetConfig+0x40>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007496:	d00f      	beq.n	80074b8 <TIM_Base_SetConfig+0x40>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a43      	ldr	r2, [pc, #268]	@ (80075a8 <TIM_Base_SetConfig+0x130>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d00b      	beq.n	80074b8 <TIM_Base_SetConfig+0x40>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a42      	ldr	r2, [pc, #264]	@ (80075ac <TIM_Base_SetConfig+0x134>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d007      	beq.n	80074b8 <TIM_Base_SetConfig+0x40>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a41      	ldr	r2, [pc, #260]	@ (80075b0 <TIM_Base_SetConfig+0x138>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d003      	beq.n	80074b8 <TIM_Base_SetConfig+0x40>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a40      	ldr	r2, [pc, #256]	@ (80075b4 <TIM_Base_SetConfig+0x13c>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d108      	bne.n	80074ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a35      	ldr	r2, [pc, #212]	@ (80075a4 <TIM_Base_SetConfig+0x12c>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d02b      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074d8:	d027      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a32      	ldr	r2, [pc, #200]	@ (80075a8 <TIM_Base_SetConfig+0x130>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d023      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a31      	ldr	r2, [pc, #196]	@ (80075ac <TIM_Base_SetConfig+0x134>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d01f      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a30      	ldr	r2, [pc, #192]	@ (80075b0 <TIM_Base_SetConfig+0x138>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d01b      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a2f      	ldr	r2, [pc, #188]	@ (80075b4 <TIM_Base_SetConfig+0x13c>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d017      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a2e      	ldr	r2, [pc, #184]	@ (80075b8 <TIM_Base_SetConfig+0x140>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d013      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a2d      	ldr	r2, [pc, #180]	@ (80075bc <TIM_Base_SetConfig+0x144>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d00f      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a2c      	ldr	r2, [pc, #176]	@ (80075c0 <TIM_Base_SetConfig+0x148>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d00b      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a2b      	ldr	r2, [pc, #172]	@ (80075c4 <TIM_Base_SetConfig+0x14c>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d007      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a2a      	ldr	r2, [pc, #168]	@ (80075c8 <TIM_Base_SetConfig+0x150>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d003      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a29      	ldr	r2, [pc, #164]	@ (80075cc <TIM_Base_SetConfig+0x154>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d108      	bne.n	800753c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	4313      	orrs	r3, r2
 800753a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	4313      	orrs	r3, r2
 8007548:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	689a      	ldr	r2, [r3, #8]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a10      	ldr	r2, [pc, #64]	@ (80075a4 <TIM_Base_SetConfig+0x12c>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d003      	beq.n	8007570 <TIM_Base_SetConfig+0xf8>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a12      	ldr	r2, [pc, #72]	@ (80075b4 <TIM_Base_SetConfig+0x13c>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d103      	bne.n	8007578 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	691a      	ldr	r2, [r3, #16]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	f003 0301 	and.w	r3, r3, #1
 8007586:	2b01      	cmp	r3, #1
 8007588:	d105      	bne.n	8007596 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	f023 0201 	bic.w	r2, r3, #1
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	611a      	str	r2, [r3, #16]
  }
}
 8007596:	bf00      	nop
 8007598:	3714      	adds	r7, #20
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	40010000 	.word	0x40010000
 80075a8:	40000400 	.word	0x40000400
 80075ac:	40000800 	.word	0x40000800
 80075b0:	40000c00 	.word	0x40000c00
 80075b4:	40010400 	.word	0x40010400
 80075b8:	40014000 	.word	0x40014000
 80075bc:	40014400 	.word	0x40014400
 80075c0:	40014800 	.word	0x40014800
 80075c4:	40001800 	.word	0x40001800
 80075c8:	40001c00 	.word	0x40001c00
 80075cc:	40002000 	.word	0x40002000

080075d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b087      	sub	sp, #28
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a1b      	ldr	r3, [r3, #32]
 80075e4:	f023 0201 	bic.w	r2, r3, #1
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	699b      	ldr	r3, [r3, #24]
 80075f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	4b2b      	ldr	r3, [pc, #172]	@ (80076a8 <TIM_OC1_SetConfig+0xd8>)
 80075fc:	4013      	ands	r3, r2
 80075fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f023 0303 	bic.w	r3, r3, #3
 8007606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	4313      	orrs	r3, r2
 8007610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	f023 0302 	bic.w	r3, r3, #2
 8007618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	697a      	ldr	r2, [r7, #20]
 8007620:	4313      	orrs	r3, r2
 8007622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a21      	ldr	r2, [pc, #132]	@ (80076ac <TIM_OC1_SetConfig+0xdc>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d003      	beq.n	8007634 <TIM_OC1_SetConfig+0x64>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a20      	ldr	r2, [pc, #128]	@ (80076b0 <TIM_OC1_SetConfig+0xe0>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d10c      	bne.n	800764e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	f023 0308 	bic.w	r3, r3, #8
 800763a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	697a      	ldr	r2, [r7, #20]
 8007642:	4313      	orrs	r3, r2
 8007644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f023 0304 	bic.w	r3, r3, #4
 800764c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a16      	ldr	r2, [pc, #88]	@ (80076ac <TIM_OC1_SetConfig+0xdc>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d003      	beq.n	800765e <TIM_OC1_SetConfig+0x8e>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a15      	ldr	r2, [pc, #84]	@ (80076b0 <TIM_OC1_SetConfig+0xe0>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d111      	bne.n	8007682 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007664:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800766c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	695b      	ldr	r3, [r3, #20]
 8007672:	693a      	ldr	r2, [r7, #16]
 8007674:	4313      	orrs	r3, r2
 8007676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	693a      	ldr	r2, [r7, #16]
 800767e:	4313      	orrs	r3, r2
 8007680:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	685a      	ldr	r2, [r3, #4]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	621a      	str	r2, [r3, #32]
}
 800769c:	bf00      	nop
 800769e:	371c      	adds	r7, #28
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr
 80076a8:	fffeff8f 	.word	0xfffeff8f
 80076ac:	40010000 	.word	0x40010000
 80076b0:	40010400 	.word	0x40010400

080076b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b087      	sub	sp, #28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a1b      	ldr	r3, [r3, #32]
 80076c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a1b      	ldr	r3, [r3, #32]
 80076c8:	f023 0210 	bic.w	r2, r3, #16
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	4b2e      	ldr	r3, [pc, #184]	@ (8007798 <TIM_OC2_SetConfig+0xe4>)
 80076e0:	4013      	ands	r3, r2
 80076e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	021b      	lsls	r3, r3, #8
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	f023 0320 	bic.w	r3, r3, #32
 80076fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	011b      	lsls	r3, r3, #4
 8007706:	697a      	ldr	r2, [r7, #20]
 8007708:	4313      	orrs	r3, r2
 800770a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a23      	ldr	r2, [pc, #140]	@ (800779c <TIM_OC2_SetConfig+0xe8>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d003      	beq.n	800771c <TIM_OC2_SetConfig+0x68>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a22      	ldr	r2, [pc, #136]	@ (80077a0 <TIM_OC2_SetConfig+0xec>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d10d      	bne.n	8007738 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007722:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	011b      	lsls	r3, r3, #4
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	4313      	orrs	r3, r2
 800772e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007736:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a18      	ldr	r2, [pc, #96]	@ (800779c <TIM_OC2_SetConfig+0xe8>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d003      	beq.n	8007748 <TIM_OC2_SetConfig+0x94>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a17      	ldr	r2, [pc, #92]	@ (80077a0 <TIM_OC2_SetConfig+0xec>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d113      	bne.n	8007770 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800774e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007756:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	693a      	ldr	r2, [r7, #16]
 8007760:	4313      	orrs	r3, r2
 8007762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	699b      	ldr	r3, [r3, #24]
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	4313      	orrs	r3, r2
 800776e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	685a      	ldr	r2, [r3, #4]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	621a      	str	r2, [r3, #32]
}
 800778a:	bf00      	nop
 800778c:	371c      	adds	r7, #28
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	feff8fff 	.word	0xfeff8fff
 800779c:	40010000 	.word	0x40010000
 80077a0:	40010400 	.word	0x40010400

080077a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b087      	sub	sp, #28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a1b      	ldr	r3, [r3, #32]
 80077b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	69db      	ldr	r3, [r3, #28]
 80077ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	4b2d      	ldr	r3, [pc, #180]	@ (8007884 <TIM_OC3_SetConfig+0xe0>)
 80077d0:	4013      	ands	r3, r2
 80077d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f023 0303 	bic.w	r3, r3, #3
 80077da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80077ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	021b      	lsls	r3, r3, #8
 80077f4:	697a      	ldr	r2, [r7, #20]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a22      	ldr	r2, [pc, #136]	@ (8007888 <TIM_OC3_SetConfig+0xe4>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d003      	beq.n	800780a <TIM_OC3_SetConfig+0x66>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a21      	ldr	r2, [pc, #132]	@ (800788c <TIM_OC3_SetConfig+0xe8>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d10d      	bne.n	8007826 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007810:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	021b      	lsls	r3, r3, #8
 8007818:	697a      	ldr	r2, [r7, #20]
 800781a:	4313      	orrs	r3, r2
 800781c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a17      	ldr	r2, [pc, #92]	@ (8007888 <TIM_OC3_SetConfig+0xe4>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d003      	beq.n	8007836 <TIM_OC3_SetConfig+0x92>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a16      	ldr	r2, [pc, #88]	@ (800788c <TIM_OC3_SetConfig+0xe8>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d113      	bne.n	800785e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800783c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007844:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	011b      	lsls	r3, r3, #4
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	4313      	orrs	r3, r2
 8007850:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	699b      	ldr	r3, [r3, #24]
 8007856:	011b      	lsls	r3, r3, #4
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	4313      	orrs	r3, r2
 800785c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	693a      	ldr	r2, [r7, #16]
 8007862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	685a      	ldr	r2, [r3, #4]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	621a      	str	r2, [r3, #32]
}
 8007878:	bf00      	nop
 800787a:	371c      	adds	r7, #28
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	fffeff8f 	.word	0xfffeff8f
 8007888:	40010000 	.word	0x40010000
 800788c:	40010400 	.word	0x40010400

08007890 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007890:	b480      	push	{r7}
 8007892:	b087      	sub	sp, #28
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a1b      	ldr	r3, [r3, #32]
 80078a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	69db      	ldr	r3, [r3, #28]
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	4b1e      	ldr	r3, [pc, #120]	@ (8007934 <TIM_OC4_SetConfig+0xa4>)
 80078bc:	4013      	ands	r3, r2
 80078be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	021b      	lsls	r3, r3, #8
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80078da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	031b      	lsls	r3, r3, #12
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a13      	ldr	r2, [pc, #76]	@ (8007938 <TIM_OC4_SetConfig+0xa8>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d003      	beq.n	80078f8 <TIM_OC4_SetConfig+0x68>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a12      	ldr	r2, [pc, #72]	@ (800793c <TIM_OC4_SetConfig+0xac>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d109      	bne.n	800790c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	695b      	ldr	r3, [r3, #20]
 8007904:	019b      	lsls	r3, r3, #6
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	4313      	orrs	r3, r2
 800790a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	697a      	ldr	r2, [r7, #20]
 8007910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	685a      	ldr	r2, [r3, #4]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	693a      	ldr	r2, [r7, #16]
 8007924:	621a      	str	r2, [r3, #32]
}
 8007926:	bf00      	nop
 8007928:	371c      	adds	r7, #28
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	feff8fff 	.word	0xfeff8fff
 8007938:	40010000 	.word	0x40010000
 800793c:	40010400 	.word	0x40010400

08007940 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007940:	b480      	push	{r7}
 8007942:	b087      	sub	sp, #28
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a1b      	ldr	r3, [r3, #32]
 8007954:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	4b1b      	ldr	r3, [pc, #108]	@ (80079d8 <TIM_OC5_SetConfig+0x98>)
 800796c:	4013      	ands	r3, r2
 800796e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	4313      	orrs	r3, r2
 8007978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007980:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	041b      	lsls	r3, r3, #16
 8007988:	693a      	ldr	r2, [r7, #16]
 800798a:	4313      	orrs	r3, r2
 800798c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a12      	ldr	r2, [pc, #72]	@ (80079dc <TIM_OC5_SetConfig+0x9c>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d003      	beq.n	800799e <TIM_OC5_SetConfig+0x5e>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a11      	ldr	r2, [pc, #68]	@ (80079e0 <TIM_OC5_SetConfig+0xa0>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d109      	bne.n	80079b2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	695b      	ldr	r3, [r3, #20]
 80079aa:	021b      	lsls	r3, r3, #8
 80079ac:	697a      	ldr	r2, [r7, #20]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	697a      	ldr	r2, [r7, #20]
 80079b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	685a      	ldr	r2, [r3, #4]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	621a      	str	r2, [r3, #32]
}
 80079cc:	bf00      	nop
 80079ce:	371c      	adds	r7, #28
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr
 80079d8:	fffeff8f 	.word	0xfffeff8f
 80079dc:	40010000 	.word	0x40010000
 80079e0:	40010400 	.word	0x40010400

080079e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b087      	sub	sp, #28
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a1b      	ldr	r3, [r3, #32]
 80079f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6a1b      	ldr	r3, [r3, #32]
 80079f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8007a80 <TIM_OC6_SetConfig+0x9c>)
 8007a10:	4013      	ands	r3, r2
 8007a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	021b      	lsls	r3, r3, #8
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007a26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	051b      	lsls	r3, r3, #20
 8007a2e:	693a      	ldr	r2, [r7, #16]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a13      	ldr	r2, [pc, #76]	@ (8007a84 <TIM_OC6_SetConfig+0xa0>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d003      	beq.n	8007a44 <TIM_OC6_SetConfig+0x60>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a12      	ldr	r2, [pc, #72]	@ (8007a88 <TIM_OC6_SetConfig+0xa4>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d109      	bne.n	8007a58 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	695b      	ldr	r3, [r3, #20]
 8007a50:	029b      	lsls	r3, r3, #10
 8007a52:	697a      	ldr	r2, [r7, #20]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	697a      	ldr	r2, [r7, #20]
 8007a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	685a      	ldr	r2, [r3, #4]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	693a      	ldr	r2, [r7, #16]
 8007a70:	621a      	str	r2, [r3, #32]
}
 8007a72:	bf00      	nop
 8007a74:	371c      	adds	r7, #28
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	feff8fff 	.word	0xfeff8fff
 8007a84:	40010000 	.word	0x40010000
 8007a88:	40010400 	.word	0x40010400

08007a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d101      	bne.n	8007aa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007aa0:	2302      	movs	r3, #2
 8007aa2:	e06d      	b.n	8007b80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2202      	movs	r2, #2
 8007ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a30      	ldr	r2, [pc, #192]	@ (8007b8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d004      	beq.n	8007ad8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a2f      	ldr	r2, [pc, #188]	@ (8007b90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d108      	bne.n	8007aea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007ade:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007af0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a20      	ldr	r2, [pc, #128]	@ (8007b8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d022      	beq.n	8007b54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b16:	d01d      	beq.n	8007b54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8007b94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d018      	beq.n	8007b54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a1c      	ldr	r2, [pc, #112]	@ (8007b98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d013      	beq.n	8007b54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a1a      	ldr	r2, [pc, #104]	@ (8007b9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d00e      	beq.n	8007b54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a15      	ldr	r2, [pc, #84]	@ (8007b90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d009      	beq.n	8007b54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a16      	ldr	r2, [pc, #88]	@ (8007ba0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d004      	beq.n	8007b54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a15      	ldr	r2, [pc, #84]	@ (8007ba4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d10c      	bne.n	8007b6e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3714      	adds	r7, #20
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr
 8007b8c:	40010000 	.word	0x40010000
 8007b90:	40010400 	.word	0x40010400
 8007b94:	40000400 	.word	0x40000400
 8007b98:	40000800 	.word	0x40000800
 8007b9c:	40000c00 	.word	0x40000c00
 8007ba0:	40014000 	.word	0x40014000
 8007ba4:	40001800 	.word	0x40001800

08007ba8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d101      	bne.n	8007bc4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	e065      	b.n	8007c90 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	695b      	ldr	r3, [r3, #20]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	041b      	lsls	r3, r3, #16
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a16      	ldr	r2, [pc, #88]	@ (8007c9c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d004      	beq.n	8007c52 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a14      	ldr	r2, [pc, #80]	@ (8007ca0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d115      	bne.n	8007c7e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c5c:	051b      	lsls	r3, r3, #20
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	69db      	ldr	r3, [r3, #28]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	6a1b      	ldr	r3, [r3, #32]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3714      	adds	r7, #20
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr
 8007c9c:	40010000 	.word	0x40010000
 8007ca0:	40010400 	.word	0x40010400

08007ca4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d101      	bne.n	8007cb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e040      	b.n	8007d38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d106      	bne.n	8007ccc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f7f9 fd96 	bl	80017f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2224      	movs	r2, #36	@ 0x24
 8007cd0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f022 0201 	bic.w	r2, r2, #1
 8007ce0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d002      	beq.n	8007cf0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 faf0 	bl	80082d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f889 	bl	8007e08 <UART_SetConfig>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d101      	bne.n	8007d00 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e01b      	b.n	8007d38 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	685a      	ldr	r2, [r3, #4]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	689a      	ldr	r2, [r3, #8]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f042 0201 	orr.w	r2, r2, #1
 8007d2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fb6f 	bl	8008414 <UART_CheckIdleState>
 8007d36:	4603      	mov	r3, r0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3708      	adds	r7, #8
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b08a      	sub	sp, #40	@ 0x28
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d54:	2b20      	cmp	r3, #32
 8007d56:	d132      	bne.n	8007dbe <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d002      	beq.n	8007d64 <HAL_UART_Receive_DMA+0x24>
 8007d5e:	88fb      	ldrh	r3, [r7, #6]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d101      	bne.n	8007d68 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	e02b      	b.n	8007dc0 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d018      	beq.n	8007dae <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	e853 3f00 	ldrex	r3, [r3]
 8007d88:	613b      	str	r3, [r7, #16]
   return(result);
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007d90:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	461a      	mov	r2, r3
 8007d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9a:	623b      	str	r3, [r7, #32]
 8007d9c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9e:	69f9      	ldr	r1, [r7, #28]
 8007da0:	6a3a      	ldr	r2, [r7, #32]
 8007da2:	e841 2300 	strex	r3, r2, [r1]
 8007da6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d1e6      	bne.n	8007d7c <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007dae:	88fb      	ldrh	r3, [r7, #6]
 8007db0:	461a      	mov	r2, r3
 8007db2:	68b9      	ldr	r1, [r7, #8]
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f000 fbf1 	bl	800859c <UART_Start_Receive_DMA>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	e000      	b.n	8007dc0 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007dbe:	2302      	movs	r3, #2
  }
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3728      	adds	r7, #40	@ 0x28
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007dd0:	bf00      	nop
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	460b      	mov	r3, r1
 8007dfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007dfc:	bf00      	nop
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b088      	sub	sp, #32
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e10:	2300      	movs	r3, #0
 8007e12:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	689a      	ldr	r2, [r3, #8]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	431a      	orrs	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	695b      	ldr	r3, [r3, #20]
 8007e22:	431a      	orrs	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	69db      	ldr	r3, [r3, #28]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	4ba6      	ldr	r3, [pc, #664]	@ (80080cc <UART_SetConfig+0x2c4>)
 8007e34:	4013      	ands	r3, r2
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	6812      	ldr	r2, [r2, #0]
 8007e3a:	6979      	ldr	r1, [r7, #20]
 8007e3c:	430b      	orrs	r3, r1
 8007e3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	68da      	ldr	r2, [r3, #12]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	430a      	orrs	r2, r1
 8007e54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a1b      	ldr	r3, [r3, #32]
 8007e60:	697a      	ldr	r2, [r7, #20]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	697a      	ldr	r2, [r7, #20]
 8007e76:	430a      	orrs	r2, r1
 8007e78:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a94      	ldr	r2, [pc, #592]	@ (80080d0 <UART_SetConfig+0x2c8>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d120      	bne.n	8007ec6 <UART_SetConfig+0xbe>
 8007e84:	4b93      	ldr	r3, [pc, #588]	@ (80080d4 <UART_SetConfig+0x2cc>)
 8007e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e8a:	f003 0303 	and.w	r3, r3, #3
 8007e8e:	2b03      	cmp	r3, #3
 8007e90:	d816      	bhi.n	8007ec0 <UART_SetConfig+0xb8>
 8007e92:	a201      	add	r2, pc, #4	@ (adr r2, 8007e98 <UART_SetConfig+0x90>)
 8007e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e98:	08007ea9 	.word	0x08007ea9
 8007e9c:	08007eb5 	.word	0x08007eb5
 8007ea0:	08007eaf 	.word	0x08007eaf
 8007ea4:	08007ebb 	.word	0x08007ebb
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	77fb      	strb	r3, [r7, #31]
 8007eac:	e150      	b.n	8008150 <UART_SetConfig+0x348>
 8007eae:	2302      	movs	r3, #2
 8007eb0:	77fb      	strb	r3, [r7, #31]
 8007eb2:	e14d      	b.n	8008150 <UART_SetConfig+0x348>
 8007eb4:	2304      	movs	r3, #4
 8007eb6:	77fb      	strb	r3, [r7, #31]
 8007eb8:	e14a      	b.n	8008150 <UART_SetConfig+0x348>
 8007eba:	2308      	movs	r3, #8
 8007ebc:	77fb      	strb	r3, [r7, #31]
 8007ebe:	e147      	b.n	8008150 <UART_SetConfig+0x348>
 8007ec0:	2310      	movs	r3, #16
 8007ec2:	77fb      	strb	r3, [r7, #31]
 8007ec4:	e144      	b.n	8008150 <UART_SetConfig+0x348>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a83      	ldr	r2, [pc, #524]	@ (80080d8 <UART_SetConfig+0x2d0>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d132      	bne.n	8007f36 <UART_SetConfig+0x12e>
 8007ed0:	4b80      	ldr	r3, [pc, #512]	@ (80080d4 <UART_SetConfig+0x2cc>)
 8007ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ed6:	f003 030c 	and.w	r3, r3, #12
 8007eda:	2b0c      	cmp	r3, #12
 8007edc:	d828      	bhi.n	8007f30 <UART_SetConfig+0x128>
 8007ede:	a201      	add	r2, pc, #4	@ (adr r2, 8007ee4 <UART_SetConfig+0xdc>)
 8007ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee4:	08007f19 	.word	0x08007f19
 8007ee8:	08007f31 	.word	0x08007f31
 8007eec:	08007f31 	.word	0x08007f31
 8007ef0:	08007f31 	.word	0x08007f31
 8007ef4:	08007f25 	.word	0x08007f25
 8007ef8:	08007f31 	.word	0x08007f31
 8007efc:	08007f31 	.word	0x08007f31
 8007f00:	08007f31 	.word	0x08007f31
 8007f04:	08007f1f 	.word	0x08007f1f
 8007f08:	08007f31 	.word	0x08007f31
 8007f0c:	08007f31 	.word	0x08007f31
 8007f10:	08007f31 	.word	0x08007f31
 8007f14:	08007f2b 	.word	0x08007f2b
 8007f18:	2300      	movs	r3, #0
 8007f1a:	77fb      	strb	r3, [r7, #31]
 8007f1c:	e118      	b.n	8008150 <UART_SetConfig+0x348>
 8007f1e:	2302      	movs	r3, #2
 8007f20:	77fb      	strb	r3, [r7, #31]
 8007f22:	e115      	b.n	8008150 <UART_SetConfig+0x348>
 8007f24:	2304      	movs	r3, #4
 8007f26:	77fb      	strb	r3, [r7, #31]
 8007f28:	e112      	b.n	8008150 <UART_SetConfig+0x348>
 8007f2a:	2308      	movs	r3, #8
 8007f2c:	77fb      	strb	r3, [r7, #31]
 8007f2e:	e10f      	b.n	8008150 <UART_SetConfig+0x348>
 8007f30:	2310      	movs	r3, #16
 8007f32:	77fb      	strb	r3, [r7, #31]
 8007f34:	e10c      	b.n	8008150 <UART_SetConfig+0x348>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a68      	ldr	r2, [pc, #416]	@ (80080dc <UART_SetConfig+0x2d4>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d120      	bne.n	8007f82 <UART_SetConfig+0x17a>
 8007f40:	4b64      	ldr	r3, [pc, #400]	@ (80080d4 <UART_SetConfig+0x2cc>)
 8007f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f46:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007f4a:	2b30      	cmp	r3, #48	@ 0x30
 8007f4c:	d013      	beq.n	8007f76 <UART_SetConfig+0x16e>
 8007f4e:	2b30      	cmp	r3, #48	@ 0x30
 8007f50:	d814      	bhi.n	8007f7c <UART_SetConfig+0x174>
 8007f52:	2b20      	cmp	r3, #32
 8007f54:	d009      	beq.n	8007f6a <UART_SetConfig+0x162>
 8007f56:	2b20      	cmp	r3, #32
 8007f58:	d810      	bhi.n	8007f7c <UART_SetConfig+0x174>
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d002      	beq.n	8007f64 <UART_SetConfig+0x15c>
 8007f5e:	2b10      	cmp	r3, #16
 8007f60:	d006      	beq.n	8007f70 <UART_SetConfig+0x168>
 8007f62:	e00b      	b.n	8007f7c <UART_SetConfig+0x174>
 8007f64:	2300      	movs	r3, #0
 8007f66:	77fb      	strb	r3, [r7, #31]
 8007f68:	e0f2      	b.n	8008150 <UART_SetConfig+0x348>
 8007f6a:	2302      	movs	r3, #2
 8007f6c:	77fb      	strb	r3, [r7, #31]
 8007f6e:	e0ef      	b.n	8008150 <UART_SetConfig+0x348>
 8007f70:	2304      	movs	r3, #4
 8007f72:	77fb      	strb	r3, [r7, #31]
 8007f74:	e0ec      	b.n	8008150 <UART_SetConfig+0x348>
 8007f76:	2308      	movs	r3, #8
 8007f78:	77fb      	strb	r3, [r7, #31]
 8007f7a:	e0e9      	b.n	8008150 <UART_SetConfig+0x348>
 8007f7c:	2310      	movs	r3, #16
 8007f7e:	77fb      	strb	r3, [r7, #31]
 8007f80:	e0e6      	b.n	8008150 <UART_SetConfig+0x348>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a56      	ldr	r2, [pc, #344]	@ (80080e0 <UART_SetConfig+0x2d8>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d120      	bne.n	8007fce <UART_SetConfig+0x1c6>
 8007f8c:	4b51      	ldr	r3, [pc, #324]	@ (80080d4 <UART_SetConfig+0x2cc>)
 8007f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f92:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007f96:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f98:	d013      	beq.n	8007fc2 <UART_SetConfig+0x1ba>
 8007f9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f9c:	d814      	bhi.n	8007fc8 <UART_SetConfig+0x1c0>
 8007f9e:	2b80      	cmp	r3, #128	@ 0x80
 8007fa0:	d009      	beq.n	8007fb6 <UART_SetConfig+0x1ae>
 8007fa2:	2b80      	cmp	r3, #128	@ 0x80
 8007fa4:	d810      	bhi.n	8007fc8 <UART_SetConfig+0x1c0>
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d002      	beq.n	8007fb0 <UART_SetConfig+0x1a8>
 8007faa:	2b40      	cmp	r3, #64	@ 0x40
 8007fac:	d006      	beq.n	8007fbc <UART_SetConfig+0x1b4>
 8007fae:	e00b      	b.n	8007fc8 <UART_SetConfig+0x1c0>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	77fb      	strb	r3, [r7, #31]
 8007fb4:	e0cc      	b.n	8008150 <UART_SetConfig+0x348>
 8007fb6:	2302      	movs	r3, #2
 8007fb8:	77fb      	strb	r3, [r7, #31]
 8007fba:	e0c9      	b.n	8008150 <UART_SetConfig+0x348>
 8007fbc:	2304      	movs	r3, #4
 8007fbe:	77fb      	strb	r3, [r7, #31]
 8007fc0:	e0c6      	b.n	8008150 <UART_SetConfig+0x348>
 8007fc2:	2308      	movs	r3, #8
 8007fc4:	77fb      	strb	r3, [r7, #31]
 8007fc6:	e0c3      	b.n	8008150 <UART_SetConfig+0x348>
 8007fc8:	2310      	movs	r3, #16
 8007fca:	77fb      	strb	r3, [r7, #31]
 8007fcc:	e0c0      	b.n	8008150 <UART_SetConfig+0x348>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a44      	ldr	r2, [pc, #272]	@ (80080e4 <UART_SetConfig+0x2dc>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d125      	bne.n	8008024 <UART_SetConfig+0x21c>
 8007fd8:	4b3e      	ldr	r3, [pc, #248]	@ (80080d4 <UART_SetConfig+0x2cc>)
 8007fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fe2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fe6:	d017      	beq.n	8008018 <UART_SetConfig+0x210>
 8007fe8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fec:	d817      	bhi.n	800801e <UART_SetConfig+0x216>
 8007fee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ff2:	d00b      	beq.n	800800c <UART_SetConfig+0x204>
 8007ff4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ff8:	d811      	bhi.n	800801e <UART_SetConfig+0x216>
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d003      	beq.n	8008006 <UART_SetConfig+0x1fe>
 8007ffe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008002:	d006      	beq.n	8008012 <UART_SetConfig+0x20a>
 8008004:	e00b      	b.n	800801e <UART_SetConfig+0x216>
 8008006:	2300      	movs	r3, #0
 8008008:	77fb      	strb	r3, [r7, #31]
 800800a:	e0a1      	b.n	8008150 <UART_SetConfig+0x348>
 800800c:	2302      	movs	r3, #2
 800800e:	77fb      	strb	r3, [r7, #31]
 8008010:	e09e      	b.n	8008150 <UART_SetConfig+0x348>
 8008012:	2304      	movs	r3, #4
 8008014:	77fb      	strb	r3, [r7, #31]
 8008016:	e09b      	b.n	8008150 <UART_SetConfig+0x348>
 8008018:	2308      	movs	r3, #8
 800801a:	77fb      	strb	r3, [r7, #31]
 800801c:	e098      	b.n	8008150 <UART_SetConfig+0x348>
 800801e:	2310      	movs	r3, #16
 8008020:	77fb      	strb	r3, [r7, #31]
 8008022:	e095      	b.n	8008150 <UART_SetConfig+0x348>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a2f      	ldr	r2, [pc, #188]	@ (80080e8 <UART_SetConfig+0x2e0>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d125      	bne.n	800807a <UART_SetConfig+0x272>
 800802e:	4b29      	ldr	r3, [pc, #164]	@ (80080d4 <UART_SetConfig+0x2cc>)
 8008030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008034:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008038:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800803c:	d017      	beq.n	800806e <UART_SetConfig+0x266>
 800803e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008042:	d817      	bhi.n	8008074 <UART_SetConfig+0x26c>
 8008044:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008048:	d00b      	beq.n	8008062 <UART_SetConfig+0x25a>
 800804a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800804e:	d811      	bhi.n	8008074 <UART_SetConfig+0x26c>
 8008050:	2b00      	cmp	r3, #0
 8008052:	d003      	beq.n	800805c <UART_SetConfig+0x254>
 8008054:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008058:	d006      	beq.n	8008068 <UART_SetConfig+0x260>
 800805a:	e00b      	b.n	8008074 <UART_SetConfig+0x26c>
 800805c:	2301      	movs	r3, #1
 800805e:	77fb      	strb	r3, [r7, #31]
 8008060:	e076      	b.n	8008150 <UART_SetConfig+0x348>
 8008062:	2302      	movs	r3, #2
 8008064:	77fb      	strb	r3, [r7, #31]
 8008066:	e073      	b.n	8008150 <UART_SetConfig+0x348>
 8008068:	2304      	movs	r3, #4
 800806a:	77fb      	strb	r3, [r7, #31]
 800806c:	e070      	b.n	8008150 <UART_SetConfig+0x348>
 800806e:	2308      	movs	r3, #8
 8008070:	77fb      	strb	r3, [r7, #31]
 8008072:	e06d      	b.n	8008150 <UART_SetConfig+0x348>
 8008074:	2310      	movs	r3, #16
 8008076:	77fb      	strb	r3, [r7, #31]
 8008078:	e06a      	b.n	8008150 <UART_SetConfig+0x348>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a1b      	ldr	r2, [pc, #108]	@ (80080ec <UART_SetConfig+0x2e4>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d138      	bne.n	80080f6 <UART_SetConfig+0x2ee>
 8008084:	4b13      	ldr	r3, [pc, #76]	@ (80080d4 <UART_SetConfig+0x2cc>)
 8008086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800808a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800808e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008092:	d017      	beq.n	80080c4 <UART_SetConfig+0x2bc>
 8008094:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008098:	d82a      	bhi.n	80080f0 <UART_SetConfig+0x2e8>
 800809a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800809e:	d00b      	beq.n	80080b8 <UART_SetConfig+0x2b0>
 80080a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080a4:	d824      	bhi.n	80080f0 <UART_SetConfig+0x2e8>
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d003      	beq.n	80080b2 <UART_SetConfig+0x2aa>
 80080aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080ae:	d006      	beq.n	80080be <UART_SetConfig+0x2b6>
 80080b0:	e01e      	b.n	80080f0 <UART_SetConfig+0x2e8>
 80080b2:	2300      	movs	r3, #0
 80080b4:	77fb      	strb	r3, [r7, #31]
 80080b6:	e04b      	b.n	8008150 <UART_SetConfig+0x348>
 80080b8:	2302      	movs	r3, #2
 80080ba:	77fb      	strb	r3, [r7, #31]
 80080bc:	e048      	b.n	8008150 <UART_SetConfig+0x348>
 80080be:	2304      	movs	r3, #4
 80080c0:	77fb      	strb	r3, [r7, #31]
 80080c2:	e045      	b.n	8008150 <UART_SetConfig+0x348>
 80080c4:	2308      	movs	r3, #8
 80080c6:	77fb      	strb	r3, [r7, #31]
 80080c8:	e042      	b.n	8008150 <UART_SetConfig+0x348>
 80080ca:	bf00      	nop
 80080cc:	efff69f3 	.word	0xefff69f3
 80080d0:	40011000 	.word	0x40011000
 80080d4:	40023800 	.word	0x40023800
 80080d8:	40004400 	.word	0x40004400
 80080dc:	40004800 	.word	0x40004800
 80080e0:	40004c00 	.word	0x40004c00
 80080e4:	40005000 	.word	0x40005000
 80080e8:	40011400 	.word	0x40011400
 80080ec:	40007800 	.word	0x40007800
 80080f0:	2310      	movs	r3, #16
 80080f2:	77fb      	strb	r3, [r7, #31]
 80080f4:	e02c      	b.n	8008150 <UART_SetConfig+0x348>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a72      	ldr	r2, [pc, #456]	@ (80082c4 <UART_SetConfig+0x4bc>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d125      	bne.n	800814c <UART_SetConfig+0x344>
 8008100:	4b71      	ldr	r3, [pc, #452]	@ (80082c8 <UART_SetConfig+0x4c0>)
 8008102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008106:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800810a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800810e:	d017      	beq.n	8008140 <UART_SetConfig+0x338>
 8008110:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008114:	d817      	bhi.n	8008146 <UART_SetConfig+0x33e>
 8008116:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800811a:	d00b      	beq.n	8008134 <UART_SetConfig+0x32c>
 800811c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008120:	d811      	bhi.n	8008146 <UART_SetConfig+0x33e>
 8008122:	2b00      	cmp	r3, #0
 8008124:	d003      	beq.n	800812e <UART_SetConfig+0x326>
 8008126:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800812a:	d006      	beq.n	800813a <UART_SetConfig+0x332>
 800812c:	e00b      	b.n	8008146 <UART_SetConfig+0x33e>
 800812e:	2300      	movs	r3, #0
 8008130:	77fb      	strb	r3, [r7, #31]
 8008132:	e00d      	b.n	8008150 <UART_SetConfig+0x348>
 8008134:	2302      	movs	r3, #2
 8008136:	77fb      	strb	r3, [r7, #31]
 8008138:	e00a      	b.n	8008150 <UART_SetConfig+0x348>
 800813a:	2304      	movs	r3, #4
 800813c:	77fb      	strb	r3, [r7, #31]
 800813e:	e007      	b.n	8008150 <UART_SetConfig+0x348>
 8008140:	2308      	movs	r3, #8
 8008142:	77fb      	strb	r3, [r7, #31]
 8008144:	e004      	b.n	8008150 <UART_SetConfig+0x348>
 8008146:	2310      	movs	r3, #16
 8008148:	77fb      	strb	r3, [r7, #31]
 800814a:	e001      	b.n	8008150 <UART_SetConfig+0x348>
 800814c:	2310      	movs	r3, #16
 800814e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	69db      	ldr	r3, [r3, #28]
 8008154:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008158:	d15b      	bne.n	8008212 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800815a:	7ffb      	ldrb	r3, [r7, #31]
 800815c:	2b08      	cmp	r3, #8
 800815e:	d828      	bhi.n	80081b2 <UART_SetConfig+0x3aa>
 8008160:	a201      	add	r2, pc, #4	@ (adr r2, 8008168 <UART_SetConfig+0x360>)
 8008162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008166:	bf00      	nop
 8008168:	0800818d 	.word	0x0800818d
 800816c:	08008195 	.word	0x08008195
 8008170:	0800819d 	.word	0x0800819d
 8008174:	080081b3 	.word	0x080081b3
 8008178:	080081a3 	.word	0x080081a3
 800817c:	080081b3 	.word	0x080081b3
 8008180:	080081b3 	.word	0x080081b3
 8008184:	080081b3 	.word	0x080081b3
 8008188:	080081ab 	.word	0x080081ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800818c:	f7fd f9e6 	bl	800555c <HAL_RCC_GetPCLK1Freq>
 8008190:	61b8      	str	r0, [r7, #24]
        break;
 8008192:	e013      	b.n	80081bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008194:	f7fd f9f6 	bl	8005584 <HAL_RCC_GetPCLK2Freq>
 8008198:	61b8      	str	r0, [r7, #24]
        break;
 800819a:	e00f      	b.n	80081bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800819c:	4b4b      	ldr	r3, [pc, #300]	@ (80082cc <UART_SetConfig+0x4c4>)
 800819e:	61bb      	str	r3, [r7, #24]
        break;
 80081a0:	e00c      	b.n	80081bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081a2:	f7fd f8c9 	bl	8005338 <HAL_RCC_GetSysClockFreq>
 80081a6:	61b8      	str	r0, [r7, #24]
        break;
 80081a8:	e008      	b.n	80081bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081ae:	61bb      	str	r3, [r7, #24]
        break;
 80081b0:	e004      	b.n	80081bc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80081b2:	2300      	movs	r3, #0
 80081b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	77bb      	strb	r3, [r7, #30]
        break;
 80081ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d074      	beq.n	80082ac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	005a      	lsls	r2, r3, #1
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	085b      	lsrs	r3, r3, #1
 80081cc:	441a      	add	r2, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80081d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	2b0f      	cmp	r3, #15
 80081dc:	d916      	bls.n	800820c <UART_SetConfig+0x404>
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081e4:	d212      	bcs.n	800820c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	f023 030f 	bic.w	r3, r3, #15
 80081ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	085b      	lsrs	r3, r3, #1
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	f003 0307 	and.w	r3, r3, #7
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	89fb      	ldrh	r3, [r7, #14]
 80081fe:	4313      	orrs	r3, r2
 8008200:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	89fa      	ldrh	r2, [r7, #14]
 8008208:	60da      	str	r2, [r3, #12]
 800820a:	e04f      	b.n	80082ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	77bb      	strb	r3, [r7, #30]
 8008210:	e04c      	b.n	80082ac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008212:	7ffb      	ldrb	r3, [r7, #31]
 8008214:	2b08      	cmp	r3, #8
 8008216:	d828      	bhi.n	800826a <UART_SetConfig+0x462>
 8008218:	a201      	add	r2, pc, #4	@ (adr r2, 8008220 <UART_SetConfig+0x418>)
 800821a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821e:	bf00      	nop
 8008220:	08008245 	.word	0x08008245
 8008224:	0800824d 	.word	0x0800824d
 8008228:	08008255 	.word	0x08008255
 800822c:	0800826b 	.word	0x0800826b
 8008230:	0800825b 	.word	0x0800825b
 8008234:	0800826b 	.word	0x0800826b
 8008238:	0800826b 	.word	0x0800826b
 800823c:	0800826b 	.word	0x0800826b
 8008240:	08008263 	.word	0x08008263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008244:	f7fd f98a 	bl	800555c <HAL_RCC_GetPCLK1Freq>
 8008248:	61b8      	str	r0, [r7, #24]
        break;
 800824a:	e013      	b.n	8008274 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800824c:	f7fd f99a 	bl	8005584 <HAL_RCC_GetPCLK2Freq>
 8008250:	61b8      	str	r0, [r7, #24]
        break;
 8008252:	e00f      	b.n	8008274 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008254:	4b1d      	ldr	r3, [pc, #116]	@ (80082cc <UART_SetConfig+0x4c4>)
 8008256:	61bb      	str	r3, [r7, #24]
        break;
 8008258:	e00c      	b.n	8008274 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800825a:	f7fd f86d 	bl	8005338 <HAL_RCC_GetSysClockFreq>
 800825e:	61b8      	str	r0, [r7, #24]
        break;
 8008260:	e008      	b.n	8008274 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008262:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008266:	61bb      	str	r3, [r7, #24]
        break;
 8008268:	e004      	b.n	8008274 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800826a:	2300      	movs	r3, #0
 800826c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	77bb      	strb	r3, [r7, #30]
        break;
 8008272:	bf00      	nop
    }

    if (pclk != 0U)
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d018      	beq.n	80082ac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	085a      	lsrs	r2, r3, #1
 8008280:	69bb      	ldr	r3, [r7, #24]
 8008282:	441a      	add	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	fbb2 f3f3 	udiv	r3, r2, r3
 800828c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	2b0f      	cmp	r3, #15
 8008292:	d909      	bls.n	80082a8 <UART_SetConfig+0x4a0>
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800829a:	d205      	bcs.n	80082a8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	b29a      	uxth	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	60da      	str	r2, [r3, #12]
 80082a6:	e001      	b.n	80082ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80082b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3720      	adds	r7, #32
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	40007c00 	.word	0x40007c00
 80082c8:	40023800 	.word	0x40023800
 80082cc:	00f42400 	.word	0x00f42400

080082d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082dc:	f003 0308 	and.w	r3, r3, #8
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00a      	beq.n	80082fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	430a      	orrs	r2, r1
 80082f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082fe:	f003 0301 	and.w	r3, r3, #1
 8008302:	2b00      	cmp	r3, #0
 8008304:	d00a      	beq.n	800831c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	430a      	orrs	r2, r1
 800831a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008320:	f003 0302 	and.w	r3, r3, #2
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00a      	beq.n	800833e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	430a      	orrs	r2, r1
 800833c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008342:	f003 0304 	and.w	r3, r3, #4
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00a      	beq.n	8008360 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	430a      	orrs	r2, r1
 800835e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008364:	f003 0310 	and.w	r3, r3, #16
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00a      	beq.n	8008382 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	430a      	orrs	r2, r1
 8008380:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008386:	f003 0320 	and.w	r3, r3, #32
 800838a:	2b00      	cmp	r3, #0
 800838c:	d00a      	beq.n	80083a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	430a      	orrs	r2, r1
 80083a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d01a      	beq.n	80083e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	430a      	orrs	r2, r1
 80083c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083ce:	d10a      	bne.n	80083e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	430a      	orrs	r2, r1
 80083e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00a      	beq.n	8008408 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	430a      	orrs	r2, r1
 8008406:	605a      	str	r2, [r3, #4]
  }
}
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b08c      	sub	sp, #48	@ 0x30
 8008418:	af02      	add	r7, sp, #8
 800841a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008424:	f7f9 fe48 	bl	80020b8 <HAL_GetTick>
 8008428:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f003 0308 	and.w	r3, r3, #8
 8008434:	2b08      	cmp	r3, #8
 8008436:	d12e      	bne.n	8008496 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008438:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800843c:	9300      	str	r3, [sp, #0]
 800843e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008440:	2200      	movs	r2, #0
 8008442:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f83b 	bl	80084c2 <UART_WaitOnFlagUntilTimeout>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d021      	beq.n	8008496 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	e853 3f00 	ldrex	r3, [r3]
 800845e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008466:	623b      	str	r3, [r7, #32]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	461a      	mov	r2, r3
 800846e:	6a3b      	ldr	r3, [r7, #32]
 8008470:	61fb      	str	r3, [r7, #28]
 8008472:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008474:	69b9      	ldr	r1, [r7, #24]
 8008476:	69fa      	ldr	r2, [r7, #28]
 8008478:	e841 2300 	strex	r3, r2, [r1]
 800847c:	617b      	str	r3, [r7, #20]
   return(result);
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d1e6      	bne.n	8008452 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2220      	movs	r2, #32
 8008488:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008492:	2303      	movs	r3, #3
 8008494:	e011      	b.n	80084ba <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2220      	movs	r2, #32
 800849a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2220      	movs	r2, #32
 80084a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80084b8:	2300      	movs	r3, #0
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3728      	adds	r7, #40	@ 0x28
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}

080084c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b084      	sub	sp, #16
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	60f8      	str	r0, [r7, #12]
 80084ca:	60b9      	str	r1, [r7, #8]
 80084cc:	603b      	str	r3, [r7, #0]
 80084ce:	4613      	mov	r3, r2
 80084d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084d2:	e04f      	b.n	8008574 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80084da:	d04b      	beq.n	8008574 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084dc:	f7f9 fdec 	bl	80020b8 <HAL_GetTick>
 80084e0:	4602      	mov	r2, r0
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	1ad3      	subs	r3, r2, r3
 80084e6:	69ba      	ldr	r2, [r7, #24]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d302      	bcc.n	80084f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d101      	bne.n	80084f6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e04e      	b.n	8008594 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f003 0304 	and.w	r3, r3, #4
 8008500:	2b00      	cmp	r3, #0
 8008502:	d037      	beq.n	8008574 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	2b80      	cmp	r3, #128	@ 0x80
 8008508:	d034      	beq.n	8008574 <UART_WaitOnFlagUntilTimeout+0xb2>
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	2b40      	cmp	r3, #64	@ 0x40
 800850e:	d031      	beq.n	8008574 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	69db      	ldr	r3, [r3, #28]
 8008516:	f003 0308 	and.w	r3, r3, #8
 800851a:	2b08      	cmp	r3, #8
 800851c:	d110      	bne.n	8008540 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2208      	movs	r2, #8
 8008524:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f000 f8fe 	bl	8008728 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2208      	movs	r2, #8
 8008530:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	e029      	b.n	8008594 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	69db      	ldr	r3, [r3, #28]
 8008546:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800854a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800854e:	d111      	bne.n	8008574 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008558:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f000 f8e4 	bl	8008728 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2220      	movs	r2, #32
 8008564:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2200      	movs	r2, #0
 800856c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008570:	2303      	movs	r3, #3
 8008572:	e00f      	b.n	8008594 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	69da      	ldr	r2, [r3, #28]
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	4013      	ands	r3, r2
 800857e:	68ba      	ldr	r2, [r7, #8]
 8008580:	429a      	cmp	r2, r3
 8008582:	bf0c      	ite	eq
 8008584:	2301      	moveq	r3, #1
 8008586:	2300      	movne	r3, #0
 8008588:	b2db      	uxtb	r3, r3
 800858a:	461a      	mov	r2, r3
 800858c:	79fb      	ldrb	r3, [r7, #7]
 800858e:	429a      	cmp	r2, r3
 8008590:	d0a0      	beq.n	80084d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3710      	adds	r7, #16
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b096      	sub	sp, #88	@ 0x58
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	4613      	mov	r3, r2
 80085a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	68ba      	ldr	r2, [r7, #8]
 80085ae:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	88fa      	ldrh	r2, [r7, #6]
 80085b4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2222      	movs	r2, #34	@ 0x22
 80085c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d028      	beq.n	8008622 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085d4:	4a3e      	ldr	r2, [pc, #248]	@ (80086d0 <UART_Start_Receive_DMA+0x134>)
 80085d6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085dc:	4a3d      	ldr	r2, [pc, #244]	@ (80086d4 <UART_Start_Receive_DMA+0x138>)
 80085de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085e4:	4a3c      	ldr	r2, [pc, #240]	@ (80086d8 <UART_Start_Receive_DMA+0x13c>)
 80085e6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085ec:	2200      	movs	r2, #0
 80085ee:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	3324      	adds	r3, #36	@ 0x24
 80085fa:	4619      	mov	r1, r3
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008600:	461a      	mov	r2, r3
 8008602:	88fb      	ldrh	r3, [r7, #6]
 8008604:	f7fa fa54 	bl	8002ab0 <HAL_DMA_Start_IT>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d009      	beq.n	8008622 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2210      	movs	r2, #16
 8008612:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2220      	movs	r2, #32
 800861a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	e051      	b.n	80086c6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d018      	beq.n	800865c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008632:	e853 3f00 	ldrex	r3, [r3]
 8008636:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800863a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800863e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	461a      	mov	r2, r3
 8008646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008648:	64bb      	str	r3, [r7, #72]	@ 0x48
 800864a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800864e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008650:	e841 2300 	strex	r3, r2, [r1]
 8008654:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008656:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1e6      	bne.n	800862a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	3308      	adds	r3, #8
 8008662:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008666:	e853 3f00 	ldrex	r3, [r3]
 800866a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800866c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866e:	f043 0301 	orr.w	r3, r3, #1
 8008672:	653b      	str	r3, [r7, #80]	@ 0x50
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	3308      	adds	r3, #8
 800867a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800867c:	637a      	str	r2, [r7, #52]	@ 0x34
 800867e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008680:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008682:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008684:	e841 2300 	strex	r3, r2, [r1]
 8008688:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800868a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1e5      	bne.n	800865c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	3308      	adds	r3, #8
 8008696:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	e853 3f00 	ldrex	r3, [r3]
 800869e:	613b      	str	r3, [r7, #16]
   return(result);
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	3308      	adds	r3, #8
 80086ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80086b0:	623a      	str	r2, [r7, #32]
 80086b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b4:	69f9      	ldr	r1, [r7, #28]
 80086b6:	6a3a      	ldr	r2, [r7, #32]
 80086b8:	e841 2300 	strex	r3, r2, [r1]
 80086bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1e5      	bne.n	8008690 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3758      	adds	r7, #88	@ 0x58
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	080087f1 	.word	0x080087f1
 80086d4:	08008919 	.word	0x08008919
 80086d8:	08008957 	.word	0x08008957

080086dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80086dc:	b480      	push	{r7}
 80086de:	b089      	sub	sp, #36	@ 0x24
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	e853 3f00 	ldrex	r3, [r3]
 80086f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80086f8:	61fb      	str	r3, [r7, #28]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	461a      	mov	r2, r3
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	61bb      	str	r3, [r7, #24]
 8008704:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008706:	6979      	ldr	r1, [r7, #20]
 8008708:	69ba      	ldr	r2, [r7, #24]
 800870a:	e841 2300 	strex	r3, r2, [r1]
 800870e:	613b      	str	r3, [r7, #16]
   return(result);
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1e6      	bne.n	80086e4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2220      	movs	r2, #32
 800871a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800871c:	bf00      	nop
 800871e:	3724      	adds	r7, #36	@ 0x24
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008728:	b480      	push	{r7}
 800872a:	b095      	sub	sp, #84	@ 0x54
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008738:	e853 3f00 	ldrex	r3, [r3]
 800873c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800873e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008740:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008744:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	461a      	mov	r2, r3
 800874c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800874e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008750:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008752:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008754:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008756:	e841 2300 	strex	r3, r2, [r1]
 800875a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800875c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1e6      	bne.n	8008730 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	3308      	adds	r3, #8
 8008768:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876a:	6a3b      	ldr	r3, [r7, #32]
 800876c:	e853 3f00 	ldrex	r3, [r3]
 8008770:	61fb      	str	r3, [r7, #28]
   return(result);
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	f023 0301 	bic.w	r3, r3, #1
 8008778:	64bb      	str	r3, [r7, #72]	@ 0x48
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	3308      	adds	r3, #8
 8008780:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008782:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008784:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008786:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008788:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800878a:	e841 2300 	strex	r3, r2, [r1]
 800878e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008792:	2b00      	cmp	r3, #0
 8008794:	d1e5      	bne.n	8008762 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800879a:	2b01      	cmp	r3, #1
 800879c:	d118      	bne.n	80087d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	e853 3f00 	ldrex	r3, [r3]
 80087aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	f023 0310 	bic.w	r3, r3, #16
 80087b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	461a      	mov	r2, r3
 80087ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087bc:	61bb      	str	r3, [r7, #24]
 80087be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c0:	6979      	ldr	r1, [r7, #20]
 80087c2:	69ba      	ldr	r2, [r7, #24]
 80087c4:	e841 2300 	strex	r3, r2, [r1]
 80087c8:	613b      	str	r3, [r7, #16]
   return(result);
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1e6      	bne.n	800879e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2220      	movs	r2, #32
 80087d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80087e4:	bf00      	nop
 80087e6:	3754      	adds	r7, #84	@ 0x54
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b09c      	sub	sp, #112	@ 0x70
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087fc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	69db      	ldr	r3, [r3, #28]
 8008802:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008806:	d071      	beq.n	80088ec <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8008808:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800880a:	2200      	movs	r2, #0
 800880c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008810:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008816:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008818:	e853 3f00 	ldrex	r3, [r3]
 800881c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800881e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008820:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008824:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008826:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	461a      	mov	r2, r3
 800882c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800882e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008830:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008832:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008834:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008836:	e841 2300 	strex	r3, r2, [r1]
 800883a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800883c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1e6      	bne.n	8008810 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008842:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	3308      	adds	r3, #8
 8008848:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800884c:	e853 3f00 	ldrex	r3, [r3]
 8008850:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008854:	f023 0301 	bic.w	r3, r3, #1
 8008858:	667b      	str	r3, [r7, #100]	@ 0x64
 800885a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	3308      	adds	r3, #8
 8008860:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008862:	647a      	str	r2, [r7, #68]	@ 0x44
 8008864:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008866:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008868:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800886a:	e841 2300 	strex	r3, r2, [r1]
 800886e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1e5      	bne.n	8008842 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008876:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	3308      	adds	r3, #8
 800887c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008880:	e853 3f00 	ldrex	r3, [r3]
 8008884:	623b      	str	r3, [r7, #32]
   return(result);
 8008886:	6a3b      	ldr	r3, [r7, #32]
 8008888:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800888c:	663b      	str	r3, [r7, #96]	@ 0x60
 800888e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	3308      	adds	r3, #8
 8008894:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008896:	633a      	str	r2, [r7, #48]	@ 0x30
 8008898:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800889c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800889e:	e841 2300 	strex	r3, r2, [r1]
 80088a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80088a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d1e5      	bne.n	8008876 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80088aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80088ac:	2220      	movs	r2, #32
 80088ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80088b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d118      	bne.n	80088ec <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	e853 3f00 	ldrex	r3, [r3]
 80088c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f023 0310 	bic.w	r3, r3, #16
 80088ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80088d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	461a      	mov	r2, r3
 80088d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088d8:	61fb      	str	r3, [r7, #28]
 80088da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088dc:	69b9      	ldr	r1, [r7, #24]
 80088de:	69fa      	ldr	r2, [r7, #28]
 80088e0:	e841 2300 	strex	r3, r2, [r1]
 80088e4:	617b      	str	r3, [r7, #20]
   return(result);
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d1e6      	bne.n	80088ba <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80088ee:	2200      	movs	r2, #0
 80088f0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80088f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d107      	bne.n	800890a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80088fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008900:	4619      	mov	r1, r3
 8008902:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008904:	f7ff fa74 	bl	8007df0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008908:	e002      	b.n	8008910 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800890a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800890c:	f7f7 ffde 	bl	80008cc <HAL_UART_RxCpltCallback>
}
 8008910:	bf00      	nop
 8008912:	3770      	adds	r7, #112	@ 0x70
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008924:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2201      	movs	r2, #1
 800892a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008930:	2b01      	cmp	r3, #1
 8008932:	d109      	bne.n	8008948 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800893a:	085b      	lsrs	r3, r3, #1
 800893c:	b29b      	uxth	r3, r3
 800893e:	4619      	mov	r1, r3
 8008940:	68f8      	ldr	r0, [r7, #12]
 8008942:	f7ff fa55 	bl	8007df0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008946:	e002      	b.n	800894e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f7ff fa3d 	bl	8007dc8 <HAL_UART_RxHalfCpltCallback>
}
 800894e:	bf00      	nop
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b086      	sub	sp, #24
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008962:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008968:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008970:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800897c:	2b80      	cmp	r3, #128	@ 0x80
 800897e:	d109      	bne.n	8008994 <UART_DMAError+0x3e>
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	2b21      	cmp	r3, #33	@ 0x21
 8008984:	d106      	bne.n	8008994 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	2200      	movs	r2, #0
 800898a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800898e:	6978      	ldr	r0, [r7, #20]
 8008990:	f7ff fea4 	bl	80086dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800899e:	2b40      	cmp	r3, #64	@ 0x40
 80089a0:	d109      	bne.n	80089b6 <UART_DMAError+0x60>
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2b22      	cmp	r3, #34	@ 0x22
 80089a6:	d106      	bne.n	80089b6 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80089b0:	6978      	ldr	r0, [r7, #20]
 80089b2:	f7ff feb9 	bl	8008728 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089bc:	f043 0210 	orr.w	r2, r3, #16
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089c6:	6978      	ldr	r0, [r7, #20]
 80089c8:	f7ff fa08 	bl	8007ddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089cc:	bf00      	nop
 80089ce:	3718      	adds	r7, #24
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80089d4:	b084      	sub	sp, #16
 80089d6:	b480      	push	{r7}
 80089d8:	b085      	sub	sp, #20
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
 80089de:	f107 001c 	add.w	r0, r7, #28
 80089e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80089e6:	2300      	movs	r3, #0
 80089e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80089ea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80089ec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80089ee:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80089f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80089f2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80089f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80089f6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80089f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80089fa:	431a      	orrs	r2, r3
             Init.ClockDiv
 80089fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80089fe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	4313      	orrs	r3, r2
 8008a04:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	685a      	ldr	r2, [r3, #4]
 8008a0a:	4b07      	ldr	r3, [pc, #28]	@ (8008a28 <SDMMC_Init+0x54>)
 8008a0c:	4013      	ands	r3, r2
 8008a0e:	68fa      	ldr	r2, [r7, #12]
 8008a10:	431a      	orrs	r2, r3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3714      	adds	r7, #20
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	b004      	add	sp, #16
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	ffff8100 	.word	0xffff8100

08008a2c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	370c      	adds	r7, #12
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr

08008a46 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8008a46:	b480      	push	{r7}
 8008a48:	b083      	sub	sp, #12
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
 8008a4e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2203      	movs	r2, #3
 8008a74:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f003 0303 	and.w	r3, r3, #3
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008abe:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008ac4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008aca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	68da      	ldr	r2, [r3, #12]
 8008ad6:	4b06      	ldr	r3, [pc, #24]	@ (8008af0 <SDMMC_SendCommand+0x50>)
 8008ad8:	4013      	ands	r3, r2
 8008ada:	68fa      	ldr	r2, [r7, #12]
 8008adc:	431a      	orrs	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3714      	adds	r7, #20
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr
 8008af0:	fffff000 	.word	0xfffff000

08008af4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	691b      	ldr	r3, [r3, #16]
 8008b00:	b2db      	uxtb	r3, r3
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	370c      	adds	r7, #12
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr

08008b0e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008b0e:	b480      	push	{r7}
 8008b10:	b085      	sub	sp, #20
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
 8008b16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	3314      	adds	r3, #20
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	4413      	add	r3, r2
 8008b22:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
}  
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3714      	adds	r7, #20
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	685a      	ldr	r2, [r3, #4]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008b5a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008b60:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008b66:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b72:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	431a      	orrs	r2, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008b7e:	2300      	movs	r3, #0

}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3714      	adds	r7, #20
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b088      	sub	sp, #32
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008b9a:	2310      	movs	r3, #16
 8008b9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b9e:	2340      	movs	r3, #64	@ 0x40
 8008ba0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ba6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008baa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bac:	f107 0308 	add.w	r3, r7, #8
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f7ff ff74 	bl	8008aa0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008bb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bbc:	2110      	movs	r1, #16
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 fa1a 	bl	8008ff8 <SDMMC_GetCmdResp1>
 8008bc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bc6:	69fb      	ldr	r3, [r7, #28]
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3720      	adds	r7, #32
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b088      	sub	sp, #32
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008bde:	2311      	movs	r3, #17
 8008be0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008be2:	2340      	movs	r3, #64	@ 0x40
 8008be4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008be6:	2300      	movs	r3, #0
 8008be8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008bea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008bee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bf0:	f107 0308 	add.w	r3, r7, #8
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f7ff ff52 	bl	8008aa0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008bfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c00:	2111      	movs	r1, #17
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f9f8 	bl	8008ff8 <SDMMC_GetCmdResp1>
 8008c08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c0a:	69fb      	ldr	r3, [r7, #28]
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3720      	adds	r7, #32
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b088      	sub	sp, #32
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008c22:	2312      	movs	r3, #18
 8008c24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c26:	2340      	movs	r3, #64	@ 0x40
 8008c28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c34:	f107 0308 	add.w	r3, r7, #8
 8008c38:	4619      	mov	r1, r3
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f7ff ff30 	bl	8008aa0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008c40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c44:	2112      	movs	r1, #18
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 f9d6 	bl	8008ff8 <SDMMC_GetCmdResp1>
 8008c4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c4e:	69fb      	ldr	r3, [r7, #28]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3720      	adds	r7, #32
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b088      	sub	sp, #32
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008c66:	2318      	movs	r3, #24
 8008c68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c6a:	2340      	movs	r3, #64	@ 0x40
 8008c6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c78:	f107 0308 	add.w	r3, r7, #8
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f7ff ff0e 	bl	8008aa0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008c84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c88:	2118      	movs	r1, #24
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 f9b4 	bl	8008ff8 <SDMMC_GetCmdResp1>
 8008c90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c92:	69fb      	ldr	r3, [r7, #28]
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3720      	adds	r7, #32
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b088      	sub	sp, #32
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008caa:	2319      	movs	r3, #25
 8008cac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008cae:	2340      	movs	r3, #64	@ 0x40
 8008cb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008cb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008cba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008cbc:	f107 0308 	add.w	r3, r7, #8
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f7ff feec 	bl	8008aa0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ccc:	2119      	movs	r1, #25
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 f992 	bl	8008ff8 <SDMMC_GetCmdResp1>
 8008cd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cd6:	69fb      	ldr	r3, [r7, #28]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3720      	adds	r7, #32
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b088      	sub	sp, #32
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008cec:	230c      	movs	r3, #12
 8008cee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008cf0:	2340      	movs	r3, #64	@ 0x40
 8008cf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008cf8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008cfc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008cfe:	f107 0308 	add.w	r3, r7, #8
 8008d02:	4619      	mov	r1, r3
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f7ff fecb 	bl	8008aa0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008d0a:	4a05      	ldr	r2, [pc, #20]	@ (8008d20 <SDMMC_CmdStopTransfer+0x40>)
 8008d0c:	210c      	movs	r1, #12
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 f972 	bl	8008ff8 <SDMMC_GetCmdResp1>
 8008d14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d16:	69fb      	ldr	r3, [r7, #28]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3720      	adds	r7, #32
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	05f5e100 	.word	0x05f5e100

08008d24 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b08a      	sub	sp, #40	@ 0x28
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008d34:	2307      	movs	r3, #7
 8008d36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d38:	2340      	movs	r3, #64	@ 0x40
 8008d3a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d44:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d46:	f107 0310 	add.w	r3, r7, #16
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f7ff fea7 	bl	8008aa0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d56:	2107      	movs	r1, #7
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	f000 f94d 	bl	8008ff8 <SDMMC_GetCmdResp1>
 8008d5e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8008d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3728      	adds	r7, #40	@ 0x28
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b088      	sub	sp, #32
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008d72:	2300      	movs	r3, #0
 8008d74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008d76:	2300      	movs	r3, #0
 8008d78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d88:	f107 0308 	add.w	r3, r7, #8
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f7ff fe86 	bl	8008aa0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 fb67 	bl	8009468 <SDMMC_GetCmdError>
 8008d9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d9c:	69fb      	ldr	r3, [r7, #28]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3720      	adds	r7, #32
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b088      	sub	sp, #32
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008dae:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8008db2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008db4:	2308      	movs	r3, #8
 8008db6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008db8:	2340      	movs	r3, #64	@ 0x40
 8008dba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008dc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008dc6:	f107 0308 	add.w	r3, r7, #8
 8008dca:	4619      	mov	r1, r3
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f7ff fe67 	bl	8008aa0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 fafa 	bl	80093cc <SDMMC_GetCmdResp7>
 8008dd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dda:	69fb      	ldr	r3, [r7, #28]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3720      	adds	r7, #32
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b088      	sub	sp, #32
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008df2:	2337      	movs	r3, #55	@ 0x37
 8008df4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008df6:	2340      	movs	r3, #64	@ 0x40
 8008df8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e04:	f107 0308 	add.w	r3, r7, #8
 8008e08:	4619      	mov	r1, r3
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f7ff fe48 	bl	8008aa0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008e10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e14:	2137      	movs	r1, #55	@ 0x37
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f8ee 	bl	8008ff8 <SDMMC_GetCmdResp1>
 8008e1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e1e:	69fb      	ldr	r3, [r7, #28]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3720      	adds	r7, #32
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b088      	sub	sp, #32
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008e32:	683a      	ldr	r2, [r7, #0]
 8008e34:	4b0d      	ldr	r3, [pc, #52]	@ (8008e6c <SDMMC_CmdAppOperCommand+0x44>)
 8008e36:	4313      	orrs	r3, r2
 8008e38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008e3a:	2329      	movs	r3, #41	@ 0x29
 8008e3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e3e:	2340      	movs	r3, #64	@ 0x40
 8008e40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e42:	2300      	movs	r3, #0
 8008e44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e4c:	f107 0308 	add.w	r3, r7, #8
 8008e50:	4619      	mov	r1, r3
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f7ff fe24 	bl	8008aa0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 fa03 	bl	8009264 <SDMMC_GetCmdResp3>
 8008e5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e60:	69fb      	ldr	r3, [r7, #28]
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3720      	adds	r7, #32
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	80100000 	.word	0x80100000

08008e70 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b088      	sub	sp, #32
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008e7e:	2306      	movs	r3, #6
 8008e80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e82:	2340      	movs	r3, #64	@ 0x40
 8008e84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e86:	2300      	movs	r3, #0
 8008e88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e90:	f107 0308 	add.w	r3, r7, #8
 8008e94:	4619      	mov	r1, r3
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f7ff fe02 	bl	8008aa0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008e9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ea0:	2106      	movs	r1, #6
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 f8a8 	bl	8008ff8 <SDMMC_GetCmdResp1>
 8008ea8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008eaa:	69fb      	ldr	r3, [r7, #28]
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3720      	adds	r7, #32
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b088      	sub	sp, #32
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008ec0:	2333      	movs	r3, #51	@ 0x33
 8008ec2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ec4:	2340      	movs	r3, #64	@ 0x40
 8008ec6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ecc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ed0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ed2:	f107 0308 	add.w	r3, r7, #8
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f7ff fde1 	bl	8008aa0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008ede:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ee2:	2133      	movs	r1, #51	@ 0x33
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 f887 	bl	8008ff8 <SDMMC_GetCmdResp1>
 8008eea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008eec:	69fb      	ldr	r3, [r7, #28]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3720      	adds	r7, #32
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b088      	sub	sp, #32
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008efe:	2300      	movs	r3, #0
 8008f00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008f02:	2302      	movs	r3, #2
 8008f04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008f06:	23c0      	movs	r3, #192	@ 0xc0
 8008f08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f14:	f107 0308 	add.w	r3, r7, #8
 8008f18:	4619      	mov	r1, r3
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7ff fdc0 	bl	8008aa0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 f957 	bl	80091d4 <SDMMC_GetCmdResp2>
 8008f26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f28:	69fb      	ldr	r3, [r7, #28]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3720      	adds	r7, #32
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b088      	sub	sp, #32
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
 8008f3a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008f40:	2309      	movs	r3, #9
 8008f42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008f44:	23c0      	movs	r3, #192	@ 0xc0
 8008f46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f52:	f107 0308 	add.w	r3, r7, #8
 8008f56:	4619      	mov	r1, r3
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f7ff fda1 	bl	8008aa0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 f938 	bl	80091d4 <SDMMC_GetCmdResp2>
 8008f64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f66:	69fb      	ldr	r3, [r7, #28]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3720      	adds	r7, #32
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b088      	sub	sp, #32
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008f7e:	2303      	movs	r3, #3
 8008f80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f82:	2340      	movs	r3, #64	@ 0x40
 8008f84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f86:	2300      	movs	r3, #0
 8008f88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f90:	f107 0308 	add.w	r3, r7, #8
 8008f94:	4619      	mov	r1, r3
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f7ff fd82 	bl	8008aa0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008f9c:	683a      	ldr	r2, [r7, #0]
 8008f9e:	2103      	movs	r1, #3
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 f99d 	bl	80092e0 <SDMMC_GetCmdResp6>
 8008fa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fa8:	69fb      	ldr	r3, [r7, #28]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3720      	adds	r7, #32
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b088      	sub	sp, #32
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
 8008fba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008fc0:	230d      	movs	r3, #13
 8008fc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fc4:	2340      	movs	r3, #64	@ 0x40
 8008fc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008fd0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fd2:	f107 0308 	add.w	r3, r7, #8
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f7ff fd61 	bl	8008aa0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fe2:	210d      	movs	r1, #13
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f807 	bl	8008ff8 <SDMMC_GetCmdResp1>
 8008fea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fec:	69fb      	ldr	r3, [r7, #28]
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3720      	adds	r7, #32
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
	...

08008ff8 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b088      	sub	sp, #32
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	460b      	mov	r3, r1
 8009002:	607a      	str	r2, [r7, #4]
 8009004:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009006:	4b70      	ldr	r3, [pc, #448]	@ (80091c8 <SDMMC_GetCmdResp1+0x1d0>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a70      	ldr	r2, [pc, #448]	@ (80091cc <SDMMC_GetCmdResp1+0x1d4>)
 800900c:	fba2 2303 	umull	r2, r3, r2, r3
 8009010:	0a5a      	lsrs	r2, r3, #9
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	fb02 f303 	mul.w	r3, r2, r3
 8009018:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	1e5a      	subs	r2, r3, #1
 800901e:	61fa      	str	r2, [r7, #28]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d102      	bne.n	800902a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009024:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009028:	e0c9      	b.n	80091be <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800902e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009036:	2b00      	cmp	r3, #0
 8009038:	d0ef      	beq.n	800901a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009040:	2b00      	cmp	r3, #0
 8009042:	d1ea      	bne.n	800901a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009048:	f003 0304 	and.w	r3, r3, #4
 800904c:	2b00      	cmp	r3, #0
 800904e:	d004      	beq.n	800905a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2204      	movs	r2, #4
 8009054:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009056:	2304      	movs	r3, #4
 8009058:	e0b1      	b.n	80091be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800905e:	f003 0301 	and.w	r3, r3, #1
 8009062:	2b00      	cmp	r3, #0
 8009064:	d004      	beq.n	8009070 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2201      	movs	r2, #1
 800906a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800906c:	2301      	movs	r3, #1
 800906e:	e0a6      	b.n	80091be <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	22c5      	movs	r2, #197	@ 0xc5
 8009074:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009076:	68f8      	ldr	r0, [r7, #12]
 8009078:	f7ff fd3c 	bl	8008af4 <SDMMC_GetCommandResponse>
 800907c:	4603      	mov	r3, r0
 800907e:	461a      	mov	r2, r3
 8009080:	7afb      	ldrb	r3, [r7, #11]
 8009082:	4293      	cmp	r3, r2
 8009084:	d001      	beq.n	800908a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009086:	2301      	movs	r3, #1
 8009088:	e099      	b.n	80091be <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800908a:	2100      	movs	r1, #0
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f7ff fd3e 	bl	8008b0e <SDMMC_GetResponse>
 8009092:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009094:	697a      	ldr	r2, [r7, #20]
 8009096:	4b4e      	ldr	r3, [pc, #312]	@ (80091d0 <SDMMC_GetCmdResp1+0x1d8>)
 8009098:	4013      	ands	r3, r2
 800909a:	2b00      	cmp	r3, #0
 800909c:	d101      	bne.n	80090a2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800909e:	2300      	movs	r3, #0
 80090a0:	e08d      	b.n	80091be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	da02      	bge.n	80090ae <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80090a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80090ac:	e087      	b.n	80091be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d001      	beq.n	80090bc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80090b8:	2340      	movs	r3, #64	@ 0x40
 80090ba:	e080      	b.n	80091be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d001      	beq.n	80090ca <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80090c6:	2380      	movs	r3, #128	@ 0x80
 80090c8:	e079      	b.n	80091be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d002      	beq.n	80090da <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80090d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80090d8:	e071      	b.n	80091be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d002      	beq.n	80090ea <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80090e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80090e8:	e069      	b.n	80091be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d002      	beq.n	80090fa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80090f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090f8:	e061      	b.n	80091be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009100:	2b00      	cmp	r3, #0
 8009102:	d002      	beq.n	800910a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009104:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009108:	e059      	b.n	80091be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009110:	2b00      	cmp	r3, #0
 8009112:	d002      	beq.n	800911a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009114:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009118:	e051      	b.n	80091be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009120:	2b00      	cmp	r3, #0
 8009122:	d002      	beq.n	800912a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009124:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009128:	e049      	b.n	80091be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009130:	2b00      	cmp	r3, #0
 8009132:	d002      	beq.n	800913a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009134:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009138:	e041      	b.n	80091be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009140:	2b00      	cmp	r3, #0
 8009142:	d002      	beq.n	800914a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009144:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009148:	e039      	b.n	80091be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009150:	2b00      	cmp	r3, #0
 8009152:	d002      	beq.n	800915a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009154:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009158:	e031      	b.n	80091be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009160:	2b00      	cmp	r3, #0
 8009162:	d002      	beq.n	800916a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009164:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009168:	e029      	b.n	80091be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009170:	2b00      	cmp	r3, #0
 8009172:	d002      	beq.n	800917a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009174:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009178:	e021      	b.n	80091be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009180:	2b00      	cmp	r3, #0
 8009182:	d002      	beq.n	800918a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009184:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009188:	e019      	b.n	80091be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009190:	2b00      	cmp	r3, #0
 8009192:	d002      	beq.n	800919a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009194:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009198:	e011      	b.n	80091be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d002      	beq.n	80091aa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80091a4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80091a8:	e009      	b.n	80091be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	f003 0308 	and.w	r3, r3, #8
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d002      	beq.n	80091ba <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80091b4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80091b8:	e001      	b.n	80091be <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80091ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3720      	adds	r7, #32
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	20000000 	.word	0x20000000
 80091cc:	10624dd3 	.word	0x10624dd3
 80091d0:	fdffe008 	.word	0xfdffe008

080091d4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80091dc:	4b1f      	ldr	r3, [pc, #124]	@ (800925c <SDMMC_GetCmdResp2+0x88>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a1f      	ldr	r2, [pc, #124]	@ (8009260 <SDMMC_GetCmdResp2+0x8c>)
 80091e2:	fba2 2303 	umull	r2, r3, r2, r3
 80091e6:	0a5b      	lsrs	r3, r3, #9
 80091e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091ec:	fb02 f303 	mul.w	r3, r2, r3
 80091f0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	1e5a      	subs	r2, r3, #1
 80091f6:	60fa      	str	r2, [r7, #12]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d102      	bne.n	8009202 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80091fc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009200:	e026      	b.n	8009250 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009206:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800920e:	2b00      	cmp	r3, #0
 8009210:	d0ef      	beq.n	80091f2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009218:	2b00      	cmp	r3, #0
 800921a:	d1ea      	bne.n	80091f2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009220:	f003 0304 	and.w	r3, r3, #4
 8009224:	2b00      	cmp	r3, #0
 8009226:	d004      	beq.n	8009232 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2204      	movs	r2, #4
 800922c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800922e:	2304      	movs	r3, #4
 8009230:	e00e      	b.n	8009250 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009236:	f003 0301 	and.w	r3, r3, #1
 800923a:	2b00      	cmp	r3, #0
 800923c:	d004      	beq.n	8009248 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2201      	movs	r2, #1
 8009242:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009244:	2301      	movs	r3, #1
 8009246:	e003      	b.n	8009250 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	22c5      	movs	r2, #197	@ 0xc5
 800924c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800924e:	2300      	movs	r3, #0
}
 8009250:	4618      	mov	r0, r3
 8009252:	3714      	adds	r7, #20
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr
 800925c:	20000000 	.word	0x20000000
 8009260:	10624dd3 	.word	0x10624dd3

08009264 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009264:	b480      	push	{r7}
 8009266:	b085      	sub	sp, #20
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800926c:	4b1a      	ldr	r3, [pc, #104]	@ (80092d8 <SDMMC_GetCmdResp3+0x74>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a1a      	ldr	r2, [pc, #104]	@ (80092dc <SDMMC_GetCmdResp3+0x78>)
 8009272:	fba2 2303 	umull	r2, r3, r2, r3
 8009276:	0a5b      	lsrs	r3, r3, #9
 8009278:	f241 3288 	movw	r2, #5000	@ 0x1388
 800927c:	fb02 f303 	mul.w	r3, r2, r3
 8009280:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	1e5a      	subs	r2, r3, #1
 8009286:	60fa      	str	r2, [r7, #12]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d102      	bne.n	8009292 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800928c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009290:	e01b      	b.n	80092ca <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009296:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d0ef      	beq.n	8009282 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d1ea      	bne.n	8009282 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092b0:	f003 0304 	and.w	r3, r3, #4
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d004      	beq.n	80092c2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2204      	movs	r2, #4
 80092bc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80092be:	2304      	movs	r3, #4
 80092c0:	e003      	b.n	80092ca <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	22c5      	movs	r2, #197	@ 0xc5
 80092c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3714      	adds	r7, #20
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop
 80092d8:	20000000 	.word	0x20000000
 80092dc:	10624dd3 	.word	0x10624dd3

080092e0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b088      	sub	sp, #32
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	460b      	mov	r3, r1
 80092ea:	607a      	str	r2, [r7, #4]
 80092ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80092ee:	4b35      	ldr	r3, [pc, #212]	@ (80093c4 <SDMMC_GetCmdResp6+0xe4>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a35      	ldr	r2, [pc, #212]	@ (80093c8 <SDMMC_GetCmdResp6+0xe8>)
 80092f4:	fba2 2303 	umull	r2, r3, r2, r3
 80092f8:	0a5b      	lsrs	r3, r3, #9
 80092fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092fe:	fb02 f303 	mul.w	r3, r2, r3
 8009302:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	1e5a      	subs	r2, r3, #1
 8009308:	61fa      	str	r2, [r7, #28]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d102      	bne.n	8009314 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800930e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009312:	e052      	b.n	80093ba <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009318:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009320:	2b00      	cmp	r3, #0
 8009322:	d0ef      	beq.n	8009304 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009324:	69bb      	ldr	r3, [r7, #24]
 8009326:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800932a:	2b00      	cmp	r3, #0
 800932c:	d1ea      	bne.n	8009304 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009332:	f003 0304 	and.w	r3, r3, #4
 8009336:	2b00      	cmp	r3, #0
 8009338:	d004      	beq.n	8009344 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2204      	movs	r2, #4
 800933e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009340:	2304      	movs	r3, #4
 8009342:	e03a      	b.n	80093ba <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009348:	f003 0301 	and.w	r3, r3, #1
 800934c:	2b00      	cmp	r3, #0
 800934e:	d004      	beq.n	800935a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2201      	movs	r2, #1
 8009354:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009356:	2301      	movs	r3, #1
 8009358:	e02f      	b.n	80093ba <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800935a:	68f8      	ldr	r0, [r7, #12]
 800935c:	f7ff fbca 	bl	8008af4 <SDMMC_GetCommandResponse>
 8009360:	4603      	mov	r3, r0
 8009362:	461a      	mov	r2, r3
 8009364:	7afb      	ldrb	r3, [r7, #11]
 8009366:	4293      	cmp	r3, r2
 8009368:	d001      	beq.n	800936e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800936a:	2301      	movs	r3, #1
 800936c:	e025      	b.n	80093ba <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	22c5      	movs	r2, #197	@ 0xc5
 8009372:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009374:	2100      	movs	r1, #0
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f7ff fbc9 	bl	8008b0e <SDMMC_GetResponse>
 800937c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8009384:	2b00      	cmp	r3, #0
 8009386:	d106      	bne.n	8009396 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	0c1b      	lsrs	r3, r3, #16
 800938c:	b29a      	uxth	r2, r3
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009392:	2300      	movs	r3, #0
 8009394:	e011      	b.n	80093ba <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800939c:	2b00      	cmp	r3, #0
 800939e:	d002      	beq.n	80093a6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80093a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80093a4:	e009      	b.n	80093ba <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d002      	beq.n	80093b6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80093b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80093b4:	e001      	b.n	80093ba <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80093b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3720      	adds	r7, #32
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	20000000 	.word	0x20000000
 80093c8:	10624dd3 	.word	0x10624dd3

080093cc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80093d4:	4b22      	ldr	r3, [pc, #136]	@ (8009460 <SDMMC_GetCmdResp7+0x94>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a22      	ldr	r2, [pc, #136]	@ (8009464 <SDMMC_GetCmdResp7+0x98>)
 80093da:	fba2 2303 	umull	r2, r3, r2, r3
 80093de:	0a5b      	lsrs	r3, r3, #9
 80093e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093e4:	fb02 f303 	mul.w	r3, r2, r3
 80093e8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	1e5a      	subs	r2, r3, #1
 80093ee:	60fa      	str	r2, [r7, #12]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d102      	bne.n	80093fa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80093f4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80093f8:	e02c      	b.n	8009454 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093fe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009406:	2b00      	cmp	r3, #0
 8009408:	d0ef      	beq.n	80093ea <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1ea      	bne.n	80093ea <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009418:	f003 0304 	and.w	r3, r3, #4
 800941c:	2b00      	cmp	r3, #0
 800941e:	d004      	beq.n	800942a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2204      	movs	r2, #4
 8009424:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009426:	2304      	movs	r3, #4
 8009428:	e014      	b.n	8009454 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800942e:	f003 0301 	and.w	r3, r3, #1
 8009432:	2b00      	cmp	r3, #0
 8009434:	d004      	beq.n	8009440 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2201      	movs	r2, #1
 800943a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800943c:	2301      	movs	r3, #1
 800943e:	e009      	b.n	8009454 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009448:	2b00      	cmp	r3, #0
 800944a:	d002      	beq.n	8009452 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2240      	movs	r2, #64	@ 0x40
 8009450:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009452:	2300      	movs	r3, #0
  
}
 8009454:	4618      	mov	r0, r3
 8009456:	3714      	adds	r7, #20
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr
 8009460:	20000000 	.word	0x20000000
 8009464:	10624dd3 	.word	0x10624dd3

08009468 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009470:	4b11      	ldr	r3, [pc, #68]	@ (80094b8 <SDMMC_GetCmdError+0x50>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a11      	ldr	r2, [pc, #68]	@ (80094bc <SDMMC_GetCmdError+0x54>)
 8009476:	fba2 2303 	umull	r2, r3, r2, r3
 800947a:	0a5b      	lsrs	r3, r3, #9
 800947c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009480:	fb02 f303 	mul.w	r3, r2, r3
 8009484:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	1e5a      	subs	r2, r3, #1
 800948a:	60fa      	str	r2, [r7, #12]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d102      	bne.n	8009496 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009490:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009494:	e009      	b.n	80094aa <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800949a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d0f1      	beq.n	8009486 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	22c5      	movs	r2, #197	@ 0xc5
 80094a6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3714      	adds	r7, #20
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop
 80094b8:	20000000 	.word	0x20000000
 80094bc:	10624dd3 	.word	0x10624dd3

080094c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80094c0:	b084      	sub	sp, #16
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b084      	sub	sp, #16
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
 80094ca:	f107 001c 	add.w	r0, r7, #28
 80094ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094d2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d127      	bne.n	800952a <USB_CoreInit+0x6a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	68da      	ldr	r2, [r3, #12]
 80094ea:	4b3a      	ldr	r3, [pc, #232]	@ (80095d4 <USB_CoreInit+0x114>)
 80094ec:	4013      	ands	r3, r2
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	f043 0210 	orr.w	r2, r3, #16
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	68db      	ldr	r3, [r3, #12]
 8009502:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800950a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800950e:	2b01      	cmp	r3, #1
 8009510:	d105      	bne.n	800951e <USB_CoreInit+0x5e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f001 fb1c 	bl	800ab5c <USB_CoreReset>
 8009524:	4603      	mov	r3, r0
 8009526:	73fb      	strb	r3, [r7, #15]
 8009528:	e03c      	b.n	80095a4 <USB_CoreInit+0xe4>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800952a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800952e:	2b03      	cmp	r3, #3
 8009530:	d127      	bne.n	8009582 <USB_CoreInit+0xc2>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009536:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	68da      	ldr	r2, [r3, #12]
 8009542:	4b24      	ldr	r3, [pc, #144]	@ (80095d4 <USB_CoreInit+0x114>)
 8009544:	4013      	ands	r3, r2
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	68db      	ldr	r3, [r3, #12]
 800954e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	68db      	ldr	r3, [r3, #12]
 800955a:	f023 0210 	bic.w	r2, r3, #16
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 8009562:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009566:	2b01      	cmp	r3, #1
 8009568:	d105      	bne.n	8009576 <USB_CoreInit+0xb6>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f001 faf0 	bl	800ab5c <USB_CoreReset>
 800957c:	4603      	mov	r3, r0
 800957e:	73fb      	strb	r3, [r7, #15]
 8009580:	e010      	b.n	80095a4 <USB_CoreInit+0xe4>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f001 fae4 	bl	800ab5c <USB_CoreReset>
 8009594:	4603      	mov	r3, r0
 8009596:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800959c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80095a4:	7fbb      	ldrb	r3, [r7, #30]
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d10b      	bne.n	80095c2 <USB_CoreInit+0x102>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	f043 0206 	orr.w	r2, r3, #6
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	f043 0220 	orr.w	r2, r3, #32
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80095c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3710      	adds	r7, #16
 80095c8:	46bd      	mov	sp, r7
 80095ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80095ce:	b004      	add	sp, #16
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	ffbdffbf 	.word	0xffbdffbf

080095d8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80095d8:	b480      	push	{r7}
 80095da:	b087      	sub	sp, #28
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	4613      	mov	r3, r2
 80095e4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80095e6:	79fb      	ldrb	r3, [r7, #7]
 80095e8:	2b02      	cmp	r3, #2
 80095ea:	d165      	bne.n	80096b8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	4a41      	ldr	r2, [pc, #260]	@ (80096f4 <USB_SetTurnaroundTime+0x11c>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d906      	bls.n	8009602 <USB_SetTurnaroundTime+0x2a>
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	4a40      	ldr	r2, [pc, #256]	@ (80096f8 <USB_SetTurnaroundTime+0x120>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d202      	bcs.n	8009602 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80095fc:	230f      	movs	r3, #15
 80095fe:	617b      	str	r3, [r7, #20]
 8009600:	e062      	b.n	80096c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	4a3c      	ldr	r2, [pc, #240]	@ (80096f8 <USB_SetTurnaroundTime+0x120>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d306      	bcc.n	8009618 <USB_SetTurnaroundTime+0x40>
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	4a3b      	ldr	r2, [pc, #236]	@ (80096fc <USB_SetTurnaroundTime+0x124>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d202      	bcs.n	8009618 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009612:	230e      	movs	r3, #14
 8009614:	617b      	str	r3, [r7, #20]
 8009616:	e057      	b.n	80096c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	4a38      	ldr	r2, [pc, #224]	@ (80096fc <USB_SetTurnaroundTime+0x124>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d306      	bcc.n	800962e <USB_SetTurnaroundTime+0x56>
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	4a37      	ldr	r2, [pc, #220]	@ (8009700 <USB_SetTurnaroundTime+0x128>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d202      	bcs.n	800962e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009628:	230d      	movs	r3, #13
 800962a:	617b      	str	r3, [r7, #20]
 800962c:	e04c      	b.n	80096c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	4a33      	ldr	r2, [pc, #204]	@ (8009700 <USB_SetTurnaroundTime+0x128>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d306      	bcc.n	8009644 <USB_SetTurnaroundTime+0x6c>
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	4a32      	ldr	r2, [pc, #200]	@ (8009704 <USB_SetTurnaroundTime+0x12c>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d802      	bhi.n	8009644 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800963e:	230c      	movs	r3, #12
 8009640:	617b      	str	r3, [r7, #20]
 8009642:	e041      	b.n	80096c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	4a2f      	ldr	r2, [pc, #188]	@ (8009704 <USB_SetTurnaroundTime+0x12c>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d906      	bls.n	800965a <USB_SetTurnaroundTime+0x82>
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	4a2e      	ldr	r2, [pc, #184]	@ (8009708 <USB_SetTurnaroundTime+0x130>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d802      	bhi.n	800965a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009654:	230b      	movs	r3, #11
 8009656:	617b      	str	r3, [r7, #20]
 8009658:	e036      	b.n	80096c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	4a2a      	ldr	r2, [pc, #168]	@ (8009708 <USB_SetTurnaroundTime+0x130>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d906      	bls.n	8009670 <USB_SetTurnaroundTime+0x98>
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	4a29      	ldr	r2, [pc, #164]	@ (800970c <USB_SetTurnaroundTime+0x134>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d802      	bhi.n	8009670 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800966a:	230a      	movs	r3, #10
 800966c:	617b      	str	r3, [r7, #20]
 800966e:	e02b      	b.n	80096c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	4a26      	ldr	r2, [pc, #152]	@ (800970c <USB_SetTurnaroundTime+0x134>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d906      	bls.n	8009686 <USB_SetTurnaroundTime+0xae>
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	4a25      	ldr	r2, [pc, #148]	@ (8009710 <USB_SetTurnaroundTime+0x138>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d202      	bcs.n	8009686 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009680:	2309      	movs	r3, #9
 8009682:	617b      	str	r3, [r7, #20]
 8009684:	e020      	b.n	80096c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	4a21      	ldr	r2, [pc, #132]	@ (8009710 <USB_SetTurnaroundTime+0x138>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d306      	bcc.n	800969c <USB_SetTurnaroundTime+0xc4>
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	4a20      	ldr	r2, [pc, #128]	@ (8009714 <USB_SetTurnaroundTime+0x13c>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d802      	bhi.n	800969c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009696:	2308      	movs	r3, #8
 8009698:	617b      	str	r3, [r7, #20]
 800969a:	e015      	b.n	80096c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	4a1d      	ldr	r2, [pc, #116]	@ (8009714 <USB_SetTurnaroundTime+0x13c>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d906      	bls.n	80096b2 <USB_SetTurnaroundTime+0xda>
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	4a1c      	ldr	r2, [pc, #112]	@ (8009718 <USB_SetTurnaroundTime+0x140>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d202      	bcs.n	80096b2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80096ac:	2307      	movs	r3, #7
 80096ae:	617b      	str	r3, [r7, #20]
 80096b0:	e00a      	b.n	80096c8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80096b2:	2306      	movs	r3, #6
 80096b4:	617b      	str	r3, [r7, #20]
 80096b6:	e007      	b.n	80096c8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80096b8:	79fb      	ldrb	r3, [r7, #7]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d102      	bne.n	80096c4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80096be:	2309      	movs	r3, #9
 80096c0:	617b      	str	r3, [r7, #20]
 80096c2:	e001      	b.n	80096c8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80096c4:	2309      	movs	r3, #9
 80096c6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	68db      	ldr	r3, [r3, #12]
 80096cc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	68da      	ldr	r2, [r3, #12]
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	029b      	lsls	r3, r3, #10
 80096dc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80096e0:	431a      	orrs	r2, r3
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80096e6:	2300      	movs	r3, #0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	371c      	adds	r7, #28
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr
 80096f4:	00d8acbf 	.word	0x00d8acbf
 80096f8:	00e4e1c0 	.word	0x00e4e1c0
 80096fc:	00f42400 	.word	0x00f42400
 8009700:	01067380 	.word	0x01067380
 8009704:	011a499f 	.word	0x011a499f
 8009708:	01312cff 	.word	0x01312cff
 800970c:	014ca43f 	.word	0x014ca43f
 8009710:	016e3600 	.word	0x016e3600
 8009714:	01a6ab1f 	.word	0x01a6ab1f
 8009718:	01e84800 	.word	0x01e84800

0800971c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	f043 0201 	orr.w	r2, r3, #1
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009730:	2300      	movs	r3, #0
}
 8009732:	4618      	mov	r0, r3
 8009734:	370c      	adds	r7, #12
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr

0800973e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800973e:	b480      	push	{r7}
 8009740:	b083      	sub	sp, #12
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	689b      	ldr	r3, [r3, #8]
 800974a:	f023 0201 	bic.w	r2, r3, #1
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	460b      	mov	r3, r1
 800976a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800976c:	2300      	movs	r3, #0
 800976e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800977c:	78fb      	ldrb	r3, [r7, #3]
 800977e:	2b01      	cmp	r3, #1
 8009780:	d115      	bne.n	80097ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800978e:	200a      	movs	r0, #10
 8009790:	f7f8 fc9e 	bl	80020d0 <HAL_Delay>
      ms += 10U;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	330a      	adds	r3, #10
 8009798:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f001 f94d 	bl	800aa3a <USB_GetMode>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d01e      	beq.n	80097e4 <USB_SetCurrentMode+0x84>
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2bc7      	cmp	r3, #199	@ 0xc7
 80097aa:	d9f0      	bls.n	800978e <USB_SetCurrentMode+0x2e>
 80097ac:	e01a      	b.n	80097e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80097ae:	78fb      	ldrb	r3, [r7, #3]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d115      	bne.n	80097e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80097c0:	200a      	movs	r0, #10
 80097c2:	f7f8 fc85 	bl	80020d0 <HAL_Delay>
      ms += 10U;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	330a      	adds	r3, #10
 80097ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f001 f934 	bl	800aa3a <USB_GetMode>
 80097d2:	4603      	mov	r3, r0
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d005      	beq.n	80097e4 <USB_SetCurrentMode+0x84>
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2bc7      	cmp	r3, #199	@ 0xc7
 80097dc:	d9f0      	bls.n	80097c0 <USB_SetCurrentMode+0x60>
 80097de:	e001      	b.n	80097e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	e005      	b.n	80097f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2bc8      	cmp	r3, #200	@ 0xc8
 80097e8:	d101      	bne.n	80097ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	e000      	b.n	80097f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3710      	adds	r7, #16
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80097f8:	b084      	sub	sp, #16
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b086      	sub	sp, #24
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
 8009802:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009806:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800980a:	2300      	movs	r3, #0
 800980c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009812:	2300      	movs	r3, #0
 8009814:	613b      	str	r3, [r7, #16]
 8009816:	e009      	b.n	800982c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	3340      	adds	r3, #64	@ 0x40
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	4413      	add	r3, r2
 8009822:	2200      	movs	r2, #0
 8009824:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	3301      	adds	r3, #1
 800982a:	613b      	str	r3, [r7, #16]
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	2b0e      	cmp	r3, #14
 8009830:	d9f2      	bls.n	8009818 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009832:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009836:	2b00      	cmp	r3, #0
 8009838:	d11c      	bne.n	8009874 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	68fa      	ldr	r2, [r7, #12]
 8009844:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009848:	f043 0302 	orr.w	r3, r3, #2
 800984c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009852:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	601a      	str	r2, [r3, #0]
 8009872:	e005      	b.n	8009880 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009878:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009886:	461a      	mov	r2, r3
 8009888:	2300      	movs	r3, #0
 800988a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800988c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009890:	2b01      	cmp	r3, #1
 8009892:	d10d      	bne.n	80098b0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009894:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009898:	2b00      	cmp	r3, #0
 800989a:	d104      	bne.n	80098a6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800989c:	2100      	movs	r1, #0
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 f97a 	bl	8009b98 <USB_SetDevSpeed>
 80098a4:	e01a      	b.n	80098dc <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80098a6:	2101      	movs	r1, #1
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 f975 	bl	8009b98 <USB_SetDevSpeed>
 80098ae:	e015      	b.n	80098dc <USB_DevInit+0xe4>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80098b0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80098b4:	2b03      	cmp	r3, #3
 80098b6:	d10d      	bne.n	80098d4 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80098b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d104      	bne.n	80098ca <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80098c0:	2100      	movs	r1, #0
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 f968 	bl	8009b98 <USB_SetDevSpeed>
 80098c8:	e008      	b.n	80098dc <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80098ca:	2101      	movs	r1, #1
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 f963 	bl	8009b98 <USB_SetDevSpeed>
 80098d2:	e003      	b.n	80098dc <USB_DevInit+0xe4>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80098d4:	2103      	movs	r1, #3
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 f95e 	bl	8009b98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80098dc:	2110      	movs	r1, #16
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 f8fa 	bl	8009ad8 <USB_FlushTxFifo>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d001      	beq.n	80098ee <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 80098ea:	2301      	movs	r3, #1
 80098ec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 f924 	bl	8009b3c <USB_FlushRxFifo>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d001      	beq.n	80098fe <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009904:	461a      	mov	r2, r3
 8009906:	2300      	movs	r3, #0
 8009908:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009910:	461a      	mov	r2, r3
 8009912:	2300      	movs	r3, #0
 8009914:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800991c:	461a      	mov	r2, r3
 800991e:	2300      	movs	r3, #0
 8009920:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009922:	2300      	movs	r3, #0
 8009924:	613b      	str	r3, [r7, #16]
 8009926:	e043      	b.n	80099b0 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	015a      	lsls	r2, r3, #5
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	4413      	add	r3, r2
 8009930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800993a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800993e:	d118      	bne.n	8009972 <USB_DevInit+0x17a>
    {
      if (i == 0U)
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d10a      	bne.n	800995c <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	015a      	lsls	r2, r3, #5
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	4413      	add	r3, r2
 800994e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009952:	461a      	mov	r2, r3
 8009954:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009958:	6013      	str	r3, [r2, #0]
 800995a:	e013      	b.n	8009984 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	015a      	lsls	r2, r3, #5
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	4413      	add	r3, r2
 8009964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009968:	461a      	mov	r2, r3
 800996a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800996e:	6013      	str	r3, [r2, #0]
 8009970:	e008      	b.n	8009984 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	015a      	lsls	r2, r3, #5
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	4413      	add	r3, r2
 800997a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800997e:	461a      	mov	r2, r3
 8009980:	2300      	movs	r3, #0
 8009982:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	015a      	lsls	r2, r3, #5
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	4413      	add	r3, r2
 800998c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009990:	461a      	mov	r2, r3
 8009992:	2300      	movs	r3, #0
 8009994:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	015a      	lsls	r2, r3, #5
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	4413      	add	r3, r2
 800999e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099a2:	461a      	mov	r2, r3
 80099a4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80099a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	3301      	adds	r3, #1
 80099ae:	613b      	str	r3, [r7, #16]
 80099b0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80099b4:	461a      	mov	r2, r3
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d3b5      	bcc.n	8009928 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099bc:	2300      	movs	r3, #0
 80099be:	613b      	str	r3, [r7, #16]
 80099c0:	e043      	b.n	8009a4a <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	015a      	lsls	r2, r3, #5
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	4413      	add	r3, r2
 80099ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80099d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099d8:	d118      	bne.n	8009a0c <USB_DevInit+0x214>
    {
      if (i == 0U)
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d10a      	bne.n	80099f6 <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	015a      	lsls	r2, r3, #5
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	4413      	add	r3, r2
 80099e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099ec:	461a      	mov	r2, r3
 80099ee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80099f2:	6013      	str	r3, [r2, #0]
 80099f4:	e013      	b.n	8009a1e <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	015a      	lsls	r2, r3, #5
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	4413      	add	r3, r2
 80099fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a02:	461a      	mov	r2, r3
 8009a04:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009a08:	6013      	str	r3, [r2, #0]
 8009a0a:	e008      	b.n	8009a1e <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	015a      	lsls	r2, r3, #5
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	4413      	add	r3, r2
 8009a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a18:	461a      	mov	r2, r3
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	015a      	lsls	r2, r3, #5
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	4413      	add	r3, r2
 8009a26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	015a      	lsls	r2, r3, #5
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	4413      	add	r3, r2
 8009a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009a42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	3301      	adds	r3, #1
 8009a48:	613b      	str	r3, [r7, #16]
 8009a4a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009a4e:	461a      	mov	r2, r3
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d3b5      	bcc.n	80099c2 <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a5c:	691b      	ldr	r3, [r3, #16]
 8009a5e:	68fa      	ldr	r2, [r7, #12]
 8009a60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a68:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009a76:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009a78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d105      	bne.n	8009a8c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	699b      	ldr	r3, [r3, #24]
 8009a84:	f043 0210 	orr.w	r2, r3, #16
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	699a      	ldr	r2, [r3, #24]
 8009a90:	4b0f      	ldr	r3, [pc, #60]	@ (8009ad0 <USB_DevInit+0x2d8>)
 8009a92:	4313      	orrs	r3, r2
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009a98:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d005      	beq.n	8009aac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	699b      	ldr	r3, [r3, #24]
 8009aa4:	f043 0208 	orr.w	r2, r3, #8
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009aac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d105      	bne.n	8009ac0 <USB_DevInit+0x2c8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	699a      	ldr	r2, [r3, #24]
 8009ab8:	4b06      	ldr	r3, [pc, #24]	@ (8009ad4 <USB_DevInit+0x2dc>)
 8009aba:	4313      	orrs	r3, r2
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3718      	adds	r7, #24
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009acc:	b004      	add	sp, #16
 8009ace:	4770      	bx	lr
 8009ad0:	803c3800 	.word	0x803c3800
 8009ad4:	40000004 	.word	0x40000004

08009ad8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b085      	sub	sp, #20
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009af2:	d901      	bls.n	8009af8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009af4:	2303      	movs	r3, #3
 8009af6:	e01b      	b.n	8009b30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	691b      	ldr	r3, [r3, #16]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	daf2      	bge.n	8009ae6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009b00:	2300      	movs	r3, #0
 8009b02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	019b      	lsls	r3, r3, #6
 8009b08:	f043 0220 	orr.w	r2, r3, #32
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	3301      	adds	r3, #1
 8009b14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b1c:	d901      	bls.n	8009b22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009b1e:	2303      	movs	r3, #3
 8009b20:	e006      	b.n	8009b30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	691b      	ldr	r3, [r3, #16]
 8009b26:	f003 0320 	and.w	r3, r3, #32
 8009b2a:	2b20      	cmp	r3, #32
 8009b2c:	d0f0      	beq.n	8009b10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009b2e:	2300      	movs	r3, #0
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3714      	adds	r7, #20
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b085      	sub	sp, #20
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b44:	2300      	movs	r3, #0
 8009b46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b54:	d901      	bls.n	8009b5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009b56:	2303      	movs	r3, #3
 8009b58:	e018      	b.n	8009b8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	daf2      	bge.n	8009b48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009b62:	2300      	movs	r3, #0
 8009b64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2210      	movs	r2, #16
 8009b6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	3301      	adds	r3, #1
 8009b70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b78:	d901      	bls.n	8009b7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	e006      	b.n	8009b8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	691b      	ldr	r3, [r3, #16]
 8009b82:	f003 0310 	and.w	r3, r3, #16
 8009b86:	2b10      	cmp	r3, #16
 8009b88:	d0f0      	beq.n	8009b6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3714      	adds	r7, #20
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	78fb      	ldrb	r3, [r7, #3]
 8009bb2:	68f9      	ldr	r1, [r7, #12]
 8009bb4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009bbc:	2300      	movs	r3, #0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3714      	adds	r7, #20
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr

08009bca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009bca:	b480      	push	{r7}
 8009bcc:	b087      	sub	sp, #28
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	f003 0306 	and.w	r3, r3, #6
 8009be2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d102      	bne.n	8009bf0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009bea:	2300      	movs	r3, #0
 8009bec:	75fb      	strb	r3, [r7, #23]
 8009bee:	e00a      	b.n	8009c06 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2b02      	cmp	r3, #2
 8009bf4:	d002      	beq.n	8009bfc <USB_GetDevSpeed+0x32>
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2b06      	cmp	r3, #6
 8009bfa:	d102      	bne.n	8009c02 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009bfc:	2302      	movs	r3, #2
 8009bfe:	75fb      	strb	r3, [r7, #23]
 8009c00:	e001      	b.n	8009c06 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009c02:	230f      	movs	r3, #15
 8009c04:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	371c      	adds	r7, #28
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b085      	sub	sp, #20
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	785b      	ldrb	r3, [r3, #1]
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d139      	bne.n	8009ca4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c36:	69da      	ldr	r2, [r3, #28]
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	f003 030f 	and.w	r3, r3, #15
 8009c40:	2101      	movs	r1, #1
 8009c42:	fa01 f303 	lsl.w	r3, r1, r3
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	68f9      	ldr	r1, [r7, #12]
 8009c4a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	015a      	lsls	r2, r3, #5
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	4413      	add	r3, r2
 8009c5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d153      	bne.n	8009d10 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	015a      	lsls	r2, r3, #5
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	4413      	add	r3, r2
 8009c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	791b      	ldrb	r3, [r3, #4]
 8009c82:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c84:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	059b      	lsls	r3, r3, #22
 8009c8a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c8c:	431a      	orrs	r2, r3
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	0159      	lsls	r1, r3, #5
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	440b      	add	r3, r1
 8009c96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	4b20      	ldr	r3, [pc, #128]	@ (8009d20 <USB_ActivateEndpoint+0x10c>)
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	600b      	str	r3, [r1, #0]
 8009ca2:	e035      	b.n	8009d10 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009caa:	69da      	ldr	r2, [r3, #28]
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	f003 030f 	and.w	r3, r3, #15
 8009cb4:	2101      	movs	r1, #1
 8009cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8009cba:	041b      	lsls	r3, r3, #16
 8009cbc:	68f9      	ldr	r1, [r7, #12]
 8009cbe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	015a      	lsls	r2, r3, #5
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	4413      	add	r3, r2
 8009cce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d119      	bne.n	8009d10 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	015a      	lsls	r2, r3, #5
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	4413      	add	r3, r2
 8009ce4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	791b      	ldrb	r3, [r3, #4]
 8009cf6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009cf8:	430b      	orrs	r3, r1
 8009cfa:	431a      	orrs	r2, r3
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	0159      	lsls	r1, r3, #5
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	440b      	add	r3, r1
 8009d04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d08:	4619      	mov	r1, r3
 8009d0a:	4b05      	ldr	r3, [pc, #20]	@ (8009d20 <USB_ActivateEndpoint+0x10c>)
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3714      	adds	r7, #20
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr
 8009d1e:	bf00      	nop
 8009d20:	10008000 	.word	0x10008000

08009d24 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b085      	sub	sp, #20
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	785b      	ldrb	r3, [r3, #1]
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d161      	bne.n	8009e04 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	015a      	lsls	r2, r3, #5
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	4413      	add	r3, r2
 8009d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d56:	d11f      	bne.n	8009d98 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	015a      	lsls	r2, r3, #5
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	4413      	add	r3, r2
 8009d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	68ba      	ldr	r2, [r7, #8]
 8009d68:	0151      	lsls	r1, r2, #5
 8009d6a:	68fa      	ldr	r2, [r7, #12]
 8009d6c:	440a      	add	r2, r1
 8009d6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d72:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009d76:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	015a      	lsls	r2, r3, #5
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	4413      	add	r3, r2
 8009d80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	68ba      	ldr	r2, [r7, #8]
 8009d88:	0151      	lsls	r1, r2, #5
 8009d8a:	68fa      	ldr	r2, [r7, #12]
 8009d8c:	440a      	add	r2, r1
 8009d8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d92:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009d96:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	f003 030f 	and.w	r3, r3, #15
 8009da8:	2101      	movs	r1, #1
 8009daa:	fa01 f303 	lsl.w	r3, r1, r3
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	43db      	mvns	r3, r3
 8009db2:	68f9      	ldr	r1, [r7, #12]
 8009db4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009db8:	4013      	ands	r3, r2
 8009dba:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dc2:	69da      	ldr	r2, [r3, #28]
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	f003 030f 	and.w	r3, r3, #15
 8009dcc:	2101      	movs	r1, #1
 8009dce:	fa01 f303 	lsl.w	r3, r1, r3
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	43db      	mvns	r3, r3
 8009dd6:	68f9      	ldr	r1, [r7, #12]
 8009dd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ddc:	4013      	ands	r3, r2
 8009dde:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	015a      	lsls	r2, r3, #5
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	4413      	add	r3, r2
 8009de8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	0159      	lsls	r1, r3, #5
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	440b      	add	r3, r1
 8009df6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	4b35      	ldr	r3, [pc, #212]	@ (8009ed4 <USB_DeactivateEndpoint+0x1b0>)
 8009dfe:	4013      	ands	r3, r2
 8009e00:	600b      	str	r3, [r1, #0]
 8009e02:	e060      	b.n	8009ec6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	015a      	lsls	r2, r3, #5
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	4413      	add	r3, r2
 8009e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e1a:	d11f      	bne.n	8009e5c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	015a      	lsls	r2, r3, #5
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	4413      	add	r3, r2
 8009e24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	68ba      	ldr	r2, [r7, #8]
 8009e2c:	0151      	lsls	r1, r2, #5
 8009e2e:	68fa      	ldr	r2, [r7, #12]
 8009e30:	440a      	add	r2, r1
 8009e32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e36:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009e3a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	015a      	lsls	r2, r3, #5
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	4413      	add	r3, r2
 8009e44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	68ba      	ldr	r2, [r7, #8]
 8009e4c:	0151      	lsls	r1, r2, #5
 8009e4e:	68fa      	ldr	r2, [r7, #12]
 8009e50:	440a      	add	r2, r1
 8009e52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e56:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009e5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	f003 030f 	and.w	r3, r3, #15
 8009e6c:	2101      	movs	r1, #1
 8009e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e72:	041b      	lsls	r3, r3, #16
 8009e74:	43db      	mvns	r3, r3
 8009e76:	68f9      	ldr	r1, [r7, #12]
 8009e78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e7c:	4013      	ands	r3, r2
 8009e7e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e86:	69da      	ldr	r2, [r3, #28]
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	f003 030f 	and.w	r3, r3, #15
 8009e90:	2101      	movs	r1, #1
 8009e92:	fa01 f303 	lsl.w	r3, r1, r3
 8009e96:	041b      	lsls	r3, r3, #16
 8009e98:	43db      	mvns	r3, r3
 8009e9a:	68f9      	ldr	r1, [r7, #12]
 8009e9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ea0:	4013      	ands	r3, r2
 8009ea2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	015a      	lsls	r2, r3, #5
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	4413      	add	r3, r2
 8009eac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	0159      	lsls	r1, r3, #5
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	440b      	add	r3, r1
 8009eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	4b05      	ldr	r3, [pc, #20]	@ (8009ed8 <USB_DeactivateEndpoint+0x1b4>)
 8009ec2:	4013      	ands	r3, r2
 8009ec4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3714      	adds	r7, #20
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr
 8009ed4:	ec337800 	.word	0xec337800
 8009ed8:	eff37800 	.word	0xeff37800

08009edc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b08a      	sub	sp, #40	@ 0x28
 8009ee0:	af02      	add	r7, sp, #8
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	4613      	mov	r3, r2
 8009ee8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	785b      	ldrb	r3, [r3, #1]
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	f040 8181 	bne.w	800a200 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	691b      	ldr	r3, [r3, #16]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d132      	bne.n	8009f6c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	015a      	lsls	r2, r3, #5
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f12:	691a      	ldr	r2, [r3, #16]
 8009f14:	69bb      	ldr	r3, [r7, #24]
 8009f16:	0159      	lsls	r1, r3, #5
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	440b      	add	r3, r1
 8009f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f20:	4619      	mov	r1, r3
 8009f22:	4ba5      	ldr	r3, [pc, #660]	@ (800a1b8 <USB_EPStartXfer+0x2dc>)
 8009f24:	4013      	ands	r3, r2
 8009f26:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	015a      	lsls	r2, r3, #5
 8009f2c:	69fb      	ldr	r3, [r7, #28]
 8009f2e:	4413      	add	r3, r2
 8009f30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f34:	691b      	ldr	r3, [r3, #16]
 8009f36:	69ba      	ldr	r2, [r7, #24]
 8009f38:	0151      	lsls	r1, r2, #5
 8009f3a:	69fa      	ldr	r2, [r7, #28]
 8009f3c:	440a      	add	r2, r1
 8009f3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f42:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009f46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	015a      	lsls	r2, r3, #5
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	4413      	add	r3, r2
 8009f50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f54:	691a      	ldr	r2, [r3, #16]
 8009f56:	69bb      	ldr	r3, [r7, #24]
 8009f58:	0159      	lsls	r1, r3, #5
 8009f5a:	69fb      	ldr	r3, [r7, #28]
 8009f5c:	440b      	add	r3, r1
 8009f5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f62:	4619      	mov	r1, r3
 8009f64:	4b95      	ldr	r3, [pc, #596]	@ (800a1bc <USB_EPStartXfer+0x2e0>)
 8009f66:	4013      	ands	r3, r2
 8009f68:	610b      	str	r3, [r1, #16]
 8009f6a:	e092      	b.n	800a092 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009f6c:	69bb      	ldr	r3, [r7, #24]
 8009f6e:	015a      	lsls	r2, r3, #5
 8009f70:	69fb      	ldr	r3, [r7, #28]
 8009f72:	4413      	add	r3, r2
 8009f74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f78:	691a      	ldr	r2, [r3, #16]
 8009f7a:	69bb      	ldr	r3, [r7, #24]
 8009f7c:	0159      	lsls	r1, r3, #5
 8009f7e:	69fb      	ldr	r3, [r7, #28]
 8009f80:	440b      	add	r3, r1
 8009f82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f86:	4619      	mov	r1, r3
 8009f88:	4b8c      	ldr	r3, [pc, #560]	@ (800a1bc <USB_EPStartXfer+0x2e0>)
 8009f8a:	4013      	ands	r3, r2
 8009f8c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f8e:	69bb      	ldr	r3, [r7, #24]
 8009f90:	015a      	lsls	r2, r3, #5
 8009f92:	69fb      	ldr	r3, [r7, #28]
 8009f94:	4413      	add	r3, r2
 8009f96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f9a:	691a      	ldr	r2, [r3, #16]
 8009f9c:	69bb      	ldr	r3, [r7, #24]
 8009f9e:	0159      	lsls	r1, r3, #5
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	440b      	add	r3, r1
 8009fa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fa8:	4619      	mov	r1, r3
 8009faa:	4b83      	ldr	r3, [pc, #524]	@ (800a1b8 <USB_EPStartXfer+0x2dc>)
 8009fac:	4013      	ands	r3, r2
 8009fae:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8009fb0:	69bb      	ldr	r3, [r7, #24]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d11a      	bne.n	8009fec <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	691a      	ldr	r2, [r3, #16]
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d903      	bls.n	8009fca <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	689a      	ldr	r2, [r3, #8]
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009fca:	69bb      	ldr	r3, [r7, #24]
 8009fcc:	015a      	lsls	r2, r3, #5
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	4413      	add	r3, r2
 8009fd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fd6:	691b      	ldr	r3, [r3, #16]
 8009fd8:	69ba      	ldr	r2, [r7, #24]
 8009fda:	0151      	lsls	r1, r2, #5
 8009fdc:	69fa      	ldr	r2, [r7, #28]
 8009fde:	440a      	add	r2, r1
 8009fe0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fe4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009fe8:	6113      	str	r3, [r2, #16]
 8009fea:	e01b      	b.n	800a024 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	015a      	lsls	r2, r3, #5
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ff8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	6919      	ldr	r1, [r3, #16]
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	440b      	add	r3, r1
 800a004:	1e59      	subs	r1, r3, #1
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	689b      	ldr	r3, [r3, #8]
 800a00a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a00e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a010:	4b6b      	ldr	r3, [pc, #428]	@ (800a1c0 <USB_EPStartXfer+0x2e4>)
 800a012:	400b      	ands	r3, r1
 800a014:	69b9      	ldr	r1, [r7, #24]
 800a016:	0148      	lsls	r0, r1, #5
 800a018:	69f9      	ldr	r1, [r7, #28]
 800a01a:	4401      	add	r1, r0
 800a01c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a020:	4313      	orrs	r3, r2
 800a022:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	015a      	lsls	r2, r3, #5
 800a028:	69fb      	ldr	r3, [r7, #28]
 800a02a:	4413      	add	r3, r2
 800a02c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a030:	691a      	ldr	r2, [r3, #16]
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	691b      	ldr	r3, [r3, #16]
 800a036:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a03a:	69b9      	ldr	r1, [r7, #24]
 800a03c:	0148      	lsls	r0, r1, #5
 800a03e:	69f9      	ldr	r1, [r7, #28]
 800a040:	4401      	add	r1, r0
 800a042:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a046:	4313      	orrs	r3, r2
 800a048:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	791b      	ldrb	r3, [r3, #4]
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d11f      	bne.n	800a092 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	015a      	lsls	r2, r3, #5
 800a056:	69fb      	ldr	r3, [r7, #28]
 800a058:	4413      	add	r3, r2
 800a05a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a05e:	691b      	ldr	r3, [r3, #16]
 800a060:	69ba      	ldr	r2, [r7, #24]
 800a062:	0151      	lsls	r1, r2, #5
 800a064:	69fa      	ldr	r2, [r7, #28]
 800a066:	440a      	add	r2, r1
 800a068:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a06c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a070:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	015a      	lsls	r2, r3, #5
 800a076:	69fb      	ldr	r3, [r7, #28]
 800a078:	4413      	add	r3, r2
 800a07a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a07e:	691b      	ldr	r3, [r3, #16]
 800a080:	69ba      	ldr	r2, [r7, #24]
 800a082:	0151      	lsls	r1, r2, #5
 800a084:	69fa      	ldr	r2, [r7, #28]
 800a086:	440a      	add	r2, r1
 800a088:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a08c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a090:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a092:	79fb      	ldrb	r3, [r7, #7]
 800a094:	2b01      	cmp	r3, #1
 800a096:	d14b      	bne.n	800a130 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	69db      	ldr	r3, [r3, #28]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d009      	beq.n	800a0b4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	015a      	lsls	r2, r3, #5
 800a0a4:	69fb      	ldr	r3, [r7, #28]
 800a0a6:	4413      	add	r3, r2
 800a0a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	69db      	ldr	r3, [r3, #28]
 800a0b2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	791b      	ldrb	r3, [r3, #4]
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d128      	bne.n	800a10e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a0bc:	69fb      	ldr	r3, [r7, #28]
 800a0be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d110      	bne.n	800a0ee <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	015a      	lsls	r2, r3, #5
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	4413      	add	r3, r2
 800a0d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	69ba      	ldr	r2, [r7, #24]
 800a0dc:	0151      	lsls	r1, r2, #5
 800a0de:	69fa      	ldr	r2, [r7, #28]
 800a0e0:	440a      	add	r2, r1
 800a0e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a0ea:	6013      	str	r3, [r2, #0]
 800a0ec:	e00f      	b.n	800a10e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a0ee:	69bb      	ldr	r3, [r7, #24]
 800a0f0:	015a      	lsls	r2, r3, #5
 800a0f2:	69fb      	ldr	r3, [r7, #28]
 800a0f4:	4413      	add	r3, r2
 800a0f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	69ba      	ldr	r2, [r7, #24]
 800a0fe:	0151      	lsls	r1, r2, #5
 800a100:	69fa      	ldr	r2, [r7, #28]
 800a102:	440a      	add	r2, r1
 800a104:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a10c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	015a      	lsls	r2, r3, #5
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	4413      	add	r3, r2
 800a116:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	69ba      	ldr	r2, [r7, #24]
 800a11e:	0151      	lsls	r1, r2, #5
 800a120:	69fa      	ldr	r2, [r7, #28]
 800a122:	440a      	add	r2, r1
 800a124:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a128:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a12c:	6013      	str	r3, [r2, #0]
 800a12e:	e16a      	b.n	800a406 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	015a      	lsls	r2, r3, #5
 800a134:	69fb      	ldr	r3, [r7, #28]
 800a136:	4413      	add	r3, r2
 800a138:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	69ba      	ldr	r2, [r7, #24]
 800a140:	0151      	lsls	r1, r2, #5
 800a142:	69fa      	ldr	r2, [r7, #28]
 800a144:	440a      	add	r2, r1
 800a146:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a14a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a14e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	791b      	ldrb	r3, [r3, #4]
 800a154:	2b01      	cmp	r3, #1
 800a156:	d015      	beq.n	800a184 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	691b      	ldr	r3, [r3, #16]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	f000 8152 	beq.w	800a406 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a162:	69fb      	ldr	r3, [r7, #28]
 800a164:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a168:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	f003 030f 	and.w	r3, r3, #15
 800a172:	2101      	movs	r1, #1
 800a174:	fa01 f303 	lsl.w	r3, r1, r3
 800a178:	69f9      	ldr	r1, [r7, #28]
 800a17a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a17e:	4313      	orrs	r3, r2
 800a180:	634b      	str	r3, [r1, #52]	@ 0x34
 800a182:	e140      	b.n	800a406 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a190:	2b00      	cmp	r3, #0
 800a192:	d117      	bne.n	800a1c4 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a194:	69bb      	ldr	r3, [r7, #24]
 800a196:	015a      	lsls	r2, r3, #5
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	4413      	add	r3, r2
 800a19c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	69ba      	ldr	r2, [r7, #24]
 800a1a4:	0151      	lsls	r1, r2, #5
 800a1a6:	69fa      	ldr	r2, [r7, #28]
 800a1a8:	440a      	add	r2, r1
 800a1aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1ae:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a1b2:	6013      	str	r3, [r2, #0]
 800a1b4:	e016      	b.n	800a1e4 <USB_EPStartXfer+0x308>
 800a1b6:	bf00      	nop
 800a1b8:	e007ffff 	.word	0xe007ffff
 800a1bc:	fff80000 	.word	0xfff80000
 800a1c0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a1c4:	69bb      	ldr	r3, [r7, #24]
 800a1c6:	015a      	lsls	r2, r3, #5
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	69ba      	ldr	r2, [r7, #24]
 800a1d4:	0151      	lsls	r1, r2, #5
 800a1d6:	69fa      	ldr	r2, [r7, #28]
 800a1d8:	440a      	add	r2, r1
 800a1da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1e2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	68d9      	ldr	r1, [r3, #12]
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	781a      	ldrb	r2, [r3, #0]
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	691b      	ldr	r3, [r3, #16]
 800a1f0:	b298      	uxth	r0, r3
 800a1f2:	79fb      	ldrb	r3, [r7, #7]
 800a1f4:	9300      	str	r3, [sp, #0]
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f000 f9b9 	bl	800a570 <USB_WritePacket>
 800a1fe:	e102      	b.n	800a406 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	015a      	lsls	r2, r3, #5
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	4413      	add	r3, r2
 800a208:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a20c:	691a      	ldr	r2, [r3, #16]
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	0159      	lsls	r1, r3, #5
 800a212:	69fb      	ldr	r3, [r7, #28]
 800a214:	440b      	add	r3, r1
 800a216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a21a:	4619      	mov	r1, r3
 800a21c:	4b7c      	ldr	r3, [pc, #496]	@ (800a410 <USB_EPStartXfer+0x534>)
 800a21e:	4013      	ands	r3, r2
 800a220:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	015a      	lsls	r2, r3, #5
 800a226:	69fb      	ldr	r3, [r7, #28]
 800a228:	4413      	add	r3, r2
 800a22a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a22e:	691a      	ldr	r2, [r3, #16]
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	0159      	lsls	r1, r3, #5
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	440b      	add	r3, r1
 800a238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a23c:	4619      	mov	r1, r3
 800a23e:	4b75      	ldr	r3, [pc, #468]	@ (800a414 <USB_EPStartXfer+0x538>)
 800a240:	4013      	ands	r3, r2
 800a242:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800a244:	69bb      	ldr	r3, [r7, #24]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d12f      	bne.n	800a2aa <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	691b      	ldr	r3, [r3, #16]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d003      	beq.n	800a25a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	689a      	ldr	r2, [r3, #8]
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	689a      	ldr	r2, [r3, #8]
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	015a      	lsls	r2, r3, #5
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	4413      	add	r3, r2
 800a26a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a26e:	691a      	ldr	r2, [r3, #16]
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	6a1b      	ldr	r3, [r3, #32]
 800a274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a278:	69b9      	ldr	r1, [r7, #24]
 800a27a:	0148      	lsls	r0, r1, #5
 800a27c:	69f9      	ldr	r1, [r7, #28]
 800a27e:	4401      	add	r1, r0
 800a280:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a284:	4313      	orrs	r3, r2
 800a286:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	015a      	lsls	r2, r3, #5
 800a28c:	69fb      	ldr	r3, [r7, #28]
 800a28e:	4413      	add	r3, r2
 800a290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a294:	691b      	ldr	r3, [r3, #16]
 800a296:	69ba      	ldr	r2, [r7, #24]
 800a298:	0151      	lsls	r1, r2, #5
 800a29a:	69fa      	ldr	r2, [r7, #28]
 800a29c:	440a      	add	r2, r1
 800a29e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a2a6:	6113      	str	r3, [r2, #16]
 800a2a8:	e05f      	b.n	800a36a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	691b      	ldr	r3, [r3, #16]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d123      	bne.n	800a2fa <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a2b2:	69bb      	ldr	r3, [r7, #24]
 800a2b4:	015a      	lsls	r2, r3, #5
 800a2b6:	69fb      	ldr	r3, [r7, #28]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2be:	691a      	ldr	r2, [r3, #16]
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2c8:	69b9      	ldr	r1, [r7, #24]
 800a2ca:	0148      	lsls	r0, r1, #5
 800a2cc:	69f9      	ldr	r1, [r7, #28]
 800a2ce:	4401      	add	r1, r0
 800a2d0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	015a      	lsls	r2, r3, #5
 800a2dc:	69fb      	ldr	r3, [r7, #28]
 800a2de:	4413      	add	r3, r2
 800a2e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2e4:	691b      	ldr	r3, [r3, #16]
 800a2e6:	69ba      	ldr	r2, [r7, #24]
 800a2e8:	0151      	lsls	r1, r2, #5
 800a2ea:	69fa      	ldr	r2, [r7, #28]
 800a2ec:	440a      	add	r2, r1
 800a2ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a2f6:	6113      	str	r3, [r2, #16]
 800a2f8:	e037      	b.n	800a36a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	691a      	ldr	r2, [r3, #16]
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	4413      	add	r3, r2
 800a304:	1e5a      	subs	r2, r3, #1
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	689b      	ldr	r3, [r3, #8]
 800a30a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a30e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	689b      	ldr	r3, [r3, #8]
 800a314:	8afa      	ldrh	r2, [r7, #22]
 800a316:	fb03 f202 	mul.w	r2, r3, r2
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a31e:	69bb      	ldr	r3, [r7, #24]
 800a320:	015a      	lsls	r2, r3, #5
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	4413      	add	r3, r2
 800a326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a32a:	691a      	ldr	r2, [r3, #16]
 800a32c:	8afb      	ldrh	r3, [r7, #22]
 800a32e:	04d9      	lsls	r1, r3, #19
 800a330:	4b39      	ldr	r3, [pc, #228]	@ (800a418 <USB_EPStartXfer+0x53c>)
 800a332:	400b      	ands	r3, r1
 800a334:	69b9      	ldr	r1, [r7, #24]
 800a336:	0148      	lsls	r0, r1, #5
 800a338:	69f9      	ldr	r1, [r7, #28]
 800a33a:	4401      	add	r1, r0
 800a33c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a340:	4313      	orrs	r3, r2
 800a342:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a344:	69bb      	ldr	r3, [r7, #24]
 800a346:	015a      	lsls	r2, r3, #5
 800a348:	69fb      	ldr	r3, [r7, #28]
 800a34a:	4413      	add	r3, r2
 800a34c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a350:	691a      	ldr	r2, [r3, #16]
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	6a1b      	ldr	r3, [r3, #32]
 800a356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a35a:	69b9      	ldr	r1, [r7, #24]
 800a35c:	0148      	lsls	r0, r1, #5
 800a35e:	69f9      	ldr	r1, [r7, #28]
 800a360:	4401      	add	r1, r0
 800a362:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a366:	4313      	orrs	r3, r2
 800a368:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a36a:	79fb      	ldrb	r3, [r7, #7]
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d10d      	bne.n	800a38c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	68db      	ldr	r3, [r3, #12]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d009      	beq.n	800a38c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	68d9      	ldr	r1, [r3, #12]
 800a37c:	69bb      	ldr	r3, [r7, #24]
 800a37e:	015a      	lsls	r2, r3, #5
 800a380:	69fb      	ldr	r3, [r7, #28]
 800a382:	4413      	add	r3, r2
 800a384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a388:	460a      	mov	r2, r1
 800a38a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	791b      	ldrb	r3, [r3, #4]
 800a390:	2b01      	cmp	r3, #1
 800a392:	d128      	bne.n	800a3e6 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a39a:	689b      	ldr	r3, [r3, #8]
 800a39c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d110      	bne.n	800a3c6 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a3a4:	69bb      	ldr	r3, [r7, #24]
 800a3a6:	015a      	lsls	r2, r3, #5
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	4413      	add	r3, r2
 800a3ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	69ba      	ldr	r2, [r7, #24]
 800a3b4:	0151      	lsls	r1, r2, #5
 800a3b6:	69fa      	ldr	r2, [r7, #28]
 800a3b8:	440a      	add	r2, r1
 800a3ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3be:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a3c2:	6013      	str	r3, [r2, #0]
 800a3c4:	e00f      	b.n	800a3e6 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a3c6:	69bb      	ldr	r3, [r7, #24]
 800a3c8:	015a      	lsls	r2, r3, #5
 800a3ca:	69fb      	ldr	r3, [r7, #28]
 800a3cc:	4413      	add	r3, r2
 800a3ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	69ba      	ldr	r2, [r7, #24]
 800a3d6:	0151      	lsls	r1, r2, #5
 800a3d8:	69fa      	ldr	r2, [r7, #28]
 800a3da:	440a      	add	r2, r1
 800a3dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3e4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	015a      	lsls	r2, r3, #5
 800a3ea:	69fb      	ldr	r3, [r7, #28]
 800a3ec:	4413      	add	r3, r2
 800a3ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	69ba      	ldr	r2, [r7, #24]
 800a3f6:	0151      	lsls	r1, r2, #5
 800a3f8:	69fa      	ldr	r2, [r7, #28]
 800a3fa:	440a      	add	r2, r1
 800a3fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a400:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a404:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a406:	2300      	movs	r3, #0
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3720      	adds	r7, #32
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}
 800a410:	fff80000 	.word	0xfff80000
 800a414:	e007ffff 	.word	0xe007ffff
 800a418:	1ff80000 	.word	0x1ff80000

0800a41c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b087      	sub	sp, #28
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a426:	2300      	movs	r3, #0
 800a428:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a42a:	2300      	movs	r3, #0
 800a42c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	785b      	ldrb	r3, [r3, #1]
 800a436:	2b01      	cmp	r3, #1
 800a438:	d14a      	bne.n	800a4d0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	015a      	lsls	r2, r3, #5
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	4413      	add	r3, r2
 800a444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a44e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a452:	f040 8086 	bne.w	800a562 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	015a      	lsls	r2, r3, #5
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	4413      	add	r3, r2
 800a460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	683a      	ldr	r2, [r7, #0]
 800a468:	7812      	ldrb	r2, [r2, #0]
 800a46a:	0151      	lsls	r1, r2, #5
 800a46c:	693a      	ldr	r2, [r7, #16]
 800a46e:	440a      	add	r2, r1
 800a470:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a474:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a478:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	015a      	lsls	r2, r3, #5
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	4413      	add	r3, r2
 800a484:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	683a      	ldr	r2, [r7, #0]
 800a48c:	7812      	ldrb	r2, [r2, #0]
 800a48e:	0151      	lsls	r1, r2, #5
 800a490:	693a      	ldr	r2, [r7, #16]
 800a492:	440a      	add	r2, r1
 800a494:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a498:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a49c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d902      	bls.n	800a4b4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	75fb      	strb	r3, [r7, #23]
          break;
 800a4b2:	e056      	b.n	800a562 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	015a      	lsls	r2, r3, #5
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	4413      	add	r3, r2
 800a4be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4cc:	d0e7      	beq.n	800a49e <USB_EPStopXfer+0x82>
 800a4ce:	e048      	b.n	800a562 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	015a      	lsls	r2, r3, #5
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	4413      	add	r3, r2
 800a4da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4e8:	d13b      	bne.n	800a562 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	015a      	lsls	r2, r3, #5
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	683a      	ldr	r2, [r7, #0]
 800a4fc:	7812      	ldrb	r2, [r2, #0]
 800a4fe:	0151      	lsls	r1, r2, #5
 800a500:	693a      	ldr	r2, [r7, #16]
 800a502:	440a      	add	r2, r1
 800a504:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a508:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a50c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	015a      	lsls	r2, r3, #5
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	4413      	add	r3, r2
 800a518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	683a      	ldr	r2, [r7, #0]
 800a520:	7812      	ldrb	r2, [r2, #0]
 800a522:	0151      	lsls	r1, r2, #5
 800a524:	693a      	ldr	r2, [r7, #16]
 800a526:	440a      	add	r2, r1
 800a528:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a52c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a530:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	3301      	adds	r3, #1
 800a536:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a53e:	4293      	cmp	r3, r2
 800a540:	d902      	bls.n	800a548 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a542:	2301      	movs	r3, #1
 800a544:	75fb      	strb	r3, [r7, #23]
          break;
 800a546:	e00c      	b.n	800a562 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	015a      	lsls	r2, r3, #5
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	4413      	add	r3, r2
 800a552:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a55c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a560:	d0e7      	beq.n	800a532 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a562:	7dfb      	ldrb	r3, [r7, #23]
}
 800a564:	4618      	mov	r0, r3
 800a566:	371c      	adds	r7, #28
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a570:	b480      	push	{r7}
 800a572:	b089      	sub	sp, #36	@ 0x24
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	4611      	mov	r1, r2
 800a57c:	461a      	mov	r2, r3
 800a57e:	460b      	mov	r3, r1
 800a580:	71fb      	strb	r3, [r7, #7]
 800a582:	4613      	mov	r3, r2
 800a584:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a58e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a592:	2b00      	cmp	r3, #0
 800a594:	d123      	bne.n	800a5de <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a596:	88bb      	ldrh	r3, [r7, #4]
 800a598:	3303      	adds	r3, #3
 800a59a:	089b      	lsrs	r3, r3, #2
 800a59c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a59e:	2300      	movs	r3, #0
 800a5a0:	61bb      	str	r3, [r7, #24]
 800a5a2:	e018      	b.n	800a5d6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a5a4:	79fb      	ldrb	r3, [r7, #7]
 800a5a6:	031a      	lsls	r2, r3, #12
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	4413      	add	r3, r2
 800a5ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	69fb      	ldr	r3, [r7, #28]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a5b8:	69fb      	ldr	r3, [r7, #28]
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5c4:	69fb      	ldr	r3, [r7, #28]
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5ca:	69fb      	ldr	r3, [r7, #28]
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a5d0:	69bb      	ldr	r3, [r7, #24]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	61bb      	str	r3, [r7, #24]
 800a5d6:	69ba      	ldr	r2, [r7, #24]
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d3e2      	bcc.n	800a5a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a5de:	2300      	movs	r3, #0
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3724      	adds	r7, #36	@ 0x24
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b08b      	sub	sp, #44	@ 0x2c
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	60f8      	str	r0, [r7, #12]
 800a5f4:	60b9      	str	r1, [r7, #8]
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a602:	88fb      	ldrh	r3, [r7, #6]
 800a604:	089b      	lsrs	r3, r3, #2
 800a606:	b29b      	uxth	r3, r3
 800a608:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a60a:	88fb      	ldrh	r3, [r7, #6]
 800a60c:	f003 0303 	and.w	r3, r3, #3
 800a610:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a612:	2300      	movs	r3, #0
 800a614:	623b      	str	r3, [r7, #32]
 800a616:	e014      	b.n	800a642 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a618:	69bb      	ldr	r3, [r7, #24]
 800a61a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a622:	601a      	str	r2, [r3, #0]
    pDest++;
 800a624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a626:	3301      	adds	r3, #1
 800a628:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a62c:	3301      	adds	r3, #1
 800a62e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a632:	3301      	adds	r3, #1
 800a634:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a638:	3301      	adds	r3, #1
 800a63a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a63c:	6a3b      	ldr	r3, [r7, #32]
 800a63e:	3301      	adds	r3, #1
 800a640:	623b      	str	r3, [r7, #32]
 800a642:	6a3a      	ldr	r2, [r7, #32]
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	429a      	cmp	r2, r3
 800a648:	d3e6      	bcc.n	800a618 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a64a:	8bfb      	ldrh	r3, [r7, #30]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d01e      	beq.n	800a68e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a650:	2300      	movs	r3, #0
 800a652:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a65a:	461a      	mov	r2, r3
 800a65c:	f107 0310 	add.w	r3, r7, #16
 800a660:	6812      	ldr	r2, [r2, #0]
 800a662:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a664:	693a      	ldr	r2, [r7, #16]
 800a666:	6a3b      	ldr	r3, [r7, #32]
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	00db      	lsls	r3, r3, #3
 800a66c:	fa22 f303 	lsr.w	r3, r2, r3
 800a670:	b2da      	uxtb	r2, r3
 800a672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a674:	701a      	strb	r2, [r3, #0]
      i++;
 800a676:	6a3b      	ldr	r3, [r7, #32]
 800a678:	3301      	adds	r3, #1
 800a67a:	623b      	str	r3, [r7, #32]
      pDest++;
 800a67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a67e:	3301      	adds	r3, #1
 800a680:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a682:	8bfb      	ldrh	r3, [r7, #30]
 800a684:	3b01      	subs	r3, #1
 800a686:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a688:	8bfb      	ldrh	r3, [r7, #30]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d1ea      	bne.n	800a664 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a690:	4618      	mov	r0, r3
 800a692:	372c      	adds	r7, #44	@ 0x2c
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b085      	sub	sp, #20
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	785b      	ldrb	r3, [r3, #1]
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d12c      	bne.n	800a712 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	015a      	lsls	r2, r3, #5
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	4413      	add	r3, r2
 800a6c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	db12      	blt.n	800a6f0 <USB_EPSetStall+0x54>
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d00f      	beq.n	800a6f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	015a      	lsls	r2, r3, #5
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	4413      	add	r3, r2
 800a6d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	68ba      	ldr	r2, [r7, #8]
 800a6e0:	0151      	lsls	r1, r2, #5
 800a6e2:	68fa      	ldr	r2, [r7, #12]
 800a6e4:	440a      	add	r2, r1
 800a6e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a6ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	015a      	lsls	r2, r3, #5
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	4413      	add	r3, r2
 800a6f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	68ba      	ldr	r2, [r7, #8]
 800a700:	0151      	lsls	r1, r2, #5
 800a702:	68fa      	ldr	r2, [r7, #12]
 800a704:	440a      	add	r2, r1
 800a706:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a70a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a70e:	6013      	str	r3, [r2, #0]
 800a710:	e02b      	b.n	800a76a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	015a      	lsls	r2, r3, #5
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	4413      	add	r3, r2
 800a71a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2b00      	cmp	r3, #0
 800a722:	db12      	blt.n	800a74a <USB_EPSetStall+0xae>
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d00f      	beq.n	800a74a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	015a      	lsls	r2, r3, #5
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	4413      	add	r3, r2
 800a732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	68ba      	ldr	r2, [r7, #8]
 800a73a:	0151      	lsls	r1, r2, #5
 800a73c:	68fa      	ldr	r2, [r7, #12]
 800a73e:	440a      	add	r2, r1
 800a740:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a744:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a748:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	015a      	lsls	r2, r3, #5
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	4413      	add	r3, r2
 800a752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	68ba      	ldr	r2, [r7, #8]
 800a75a:	0151      	lsls	r1, r2, #5
 800a75c:	68fa      	ldr	r2, [r7, #12]
 800a75e:	440a      	add	r2, r1
 800a760:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a764:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a768:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a76a:	2300      	movs	r3, #0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3714      	adds	r7, #20
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr

0800a778 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a778:	b480      	push	{r7}
 800a77a:	b085      	sub	sp, #20
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	785b      	ldrb	r3, [r3, #1]
 800a790:	2b01      	cmp	r3, #1
 800a792:	d128      	bne.n	800a7e6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	015a      	lsls	r2, r3, #5
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	4413      	add	r3, r2
 800a79c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	68ba      	ldr	r2, [r7, #8]
 800a7a4:	0151      	lsls	r1, r2, #5
 800a7a6:	68fa      	ldr	r2, [r7, #12]
 800a7a8:	440a      	add	r2, r1
 800a7aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a7b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	791b      	ldrb	r3, [r3, #4]
 800a7b8:	2b03      	cmp	r3, #3
 800a7ba:	d003      	beq.n	800a7c4 <USB_EPClearStall+0x4c>
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	791b      	ldrb	r3, [r3, #4]
 800a7c0:	2b02      	cmp	r3, #2
 800a7c2:	d138      	bne.n	800a836 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	015a      	lsls	r2, r3, #5
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	68ba      	ldr	r2, [r7, #8]
 800a7d4:	0151      	lsls	r1, r2, #5
 800a7d6:	68fa      	ldr	r2, [r7, #12]
 800a7d8:	440a      	add	r2, r1
 800a7da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7e2:	6013      	str	r3, [r2, #0]
 800a7e4:	e027      	b.n	800a836 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	015a      	lsls	r2, r3, #5
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	4413      	add	r3, r2
 800a7ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	68ba      	ldr	r2, [r7, #8]
 800a7f6:	0151      	lsls	r1, r2, #5
 800a7f8:	68fa      	ldr	r2, [r7, #12]
 800a7fa:	440a      	add	r2, r1
 800a7fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a800:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a804:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	791b      	ldrb	r3, [r3, #4]
 800a80a:	2b03      	cmp	r3, #3
 800a80c:	d003      	beq.n	800a816 <USB_EPClearStall+0x9e>
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	791b      	ldrb	r3, [r3, #4]
 800a812:	2b02      	cmp	r3, #2
 800a814:	d10f      	bne.n	800a836 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	015a      	lsls	r2, r3, #5
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	4413      	add	r3, r2
 800a81e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	68ba      	ldr	r2, [r7, #8]
 800a826:	0151      	lsls	r1, r2, #5
 800a828:	68fa      	ldr	r2, [r7, #12]
 800a82a:	440a      	add	r2, r1
 800a82c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a834:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3714      	adds	r7, #20
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a844:	b480      	push	{r7}
 800a846:	b085      	sub	sp, #20
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	460b      	mov	r3, r1
 800a84e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	68fa      	ldr	r2, [r7, #12]
 800a85e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a862:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a866:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	78fb      	ldrb	r3, [r7, #3]
 800a872:	011b      	lsls	r3, r3, #4
 800a874:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a878:	68f9      	ldr	r1, [r7, #12]
 800a87a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a87e:	4313      	orrs	r3, r2
 800a880:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a882:	2300      	movs	r3, #0
}
 800a884:	4618      	mov	r0, r3
 800a886:	3714      	adds	r7, #20
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr

0800a890 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a890:	b480      	push	{r7}
 800a892:	b085      	sub	sp, #20
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	68fa      	ldr	r2, [r7, #12]
 800a8a6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a8aa:	f023 0303 	bic.w	r3, r3, #3
 800a8ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a8be:	f023 0302 	bic.w	r3, r3, #2
 800a8c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3714      	adds	r7, #20
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr

0800a8d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a8d2:	b480      	push	{r7}
 800a8d4:	b085      	sub	sp, #20
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a8ec:	f023 0303 	bic.w	r3, r3, #3
 800a8f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	68fa      	ldr	r2, [r7, #12]
 800a8fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a900:	f043 0302 	orr.w	r3, r3, #2
 800a904:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3714      	adds	r7, #20
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a914:	b480      	push	{r7}
 800a916:	b085      	sub	sp, #20
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	695b      	ldr	r3, [r3, #20]
 800a920:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	699b      	ldr	r3, [r3, #24]
 800a926:	68fa      	ldr	r2, [r7, #12]
 800a928:	4013      	ands	r3, r2
 800a92a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a92c:	68fb      	ldr	r3, [r7, #12]
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3714      	adds	r7, #20
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr

0800a93a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a93a:	b480      	push	{r7}
 800a93c:	b085      	sub	sp, #20
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a94c:	699b      	ldr	r3, [r3, #24]
 800a94e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a956:	69db      	ldr	r3, [r3, #28]
 800a958:	68ba      	ldr	r2, [r7, #8]
 800a95a:	4013      	ands	r3, r2
 800a95c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	0c1b      	lsrs	r3, r3, #16
}
 800a962:	4618      	mov	r0, r3
 800a964:	3714      	adds	r7, #20
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr

0800a96e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a96e:	b480      	push	{r7}
 800a970:	b085      	sub	sp, #20
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a980:	699b      	ldr	r3, [r3, #24]
 800a982:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a98a:	69db      	ldr	r3, [r3, #28]
 800a98c:	68ba      	ldr	r2, [r7, #8]
 800a98e:	4013      	ands	r3, r2
 800a990:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	b29b      	uxth	r3, r3
}
 800a996:	4618      	mov	r0, r3
 800a998:	3714      	adds	r7, #20
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr

0800a9a2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a9a2:	b480      	push	{r7}
 800a9a4:	b085      	sub	sp, #20
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a9b2:	78fb      	ldrb	r3, [r7, #3]
 800a9b4:	015a      	lsls	r2, r3, #5
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9c8:	695b      	ldr	r3, [r3, #20]
 800a9ca:	68ba      	ldr	r2, [r7, #8]
 800a9cc:	4013      	ands	r3, r2
 800a9ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a9d0:	68bb      	ldr	r3, [r7, #8]
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3714      	adds	r7, #20
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr

0800a9de <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a9de:	b480      	push	{r7}
 800a9e0:	b087      	sub	sp, #28
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9f4:	691b      	ldr	r3, [r3, #16]
 800a9f6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa00:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800aa02:	78fb      	ldrb	r3, [r7, #3]
 800aa04:	f003 030f 	and.w	r3, r3, #15
 800aa08:	68fa      	ldr	r2, [r7, #12]
 800aa0a:	fa22 f303 	lsr.w	r3, r2, r3
 800aa0e:	01db      	lsls	r3, r3, #7
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	693a      	ldr	r2, [r7, #16]
 800aa14:	4313      	orrs	r3, r2
 800aa16:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800aa18:	78fb      	ldrb	r3, [r7, #3]
 800aa1a:	015a      	lsls	r2, r3, #5
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	4413      	add	r3, r2
 800aa20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa24:	689b      	ldr	r3, [r3, #8]
 800aa26:	693a      	ldr	r2, [r7, #16]
 800aa28:	4013      	ands	r3, r2
 800aa2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aa2c:	68bb      	ldr	r3, [r7, #8]
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	371c      	adds	r7, #28
 800aa32:	46bd      	mov	sp, r7
 800aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa38:	4770      	bx	lr

0800aa3a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800aa3a:	b480      	push	{r7}
 800aa3c:	b083      	sub	sp, #12
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	695b      	ldr	r3, [r3, #20]
 800aa46:	f003 0301 	and.w	r3, r3, #1
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	370c      	adds	r7, #12
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr
	...

0800aa58 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b085      	sub	sp, #20
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa6a:	681a      	ldr	r2, [r3, #0]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa72:	4619      	mov	r1, r3
 800aa74:	4b09      	ldr	r3, [pc, #36]	@ (800aa9c <USB_ActivateSetup+0x44>)
 800aa76:	4013      	ands	r3, r2
 800aa78:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	68fa      	ldr	r2, [r7, #12]
 800aa84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa8e:	2300      	movs	r3, #0
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3714      	adds	r7, #20
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr
 800aa9c:	fffff800 	.word	0xfffff800

0800aaa0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b087      	sub	sp, #28
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	607a      	str	r2, [r7, #4]
 800aaac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	333c      	adds	r3, #60	@ 0x3c
 800aab6:	3304      	adds	r3, #4
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	4a26      	ldr	r2, [pc, #152]	@ (800ab58 <USB_EP0_OutStart+0xb8>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d90a      	bls.n	800aada <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aad0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aad4:	d101      	bne.n	800aada <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800aad6:	2300      	movs	r3, #0
 800aad8:	e037      	b.n	800ab4a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aae0:	461a      	mov	r2, r3
 800aae2:	2300      	movs	r3, #0
 800aae4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaec:	691b      	ldr	r3, [r3, #16]
 800aaee:	697a      	ldr	r2, [r7, #20]
 800aaf0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aaf4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aaf8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab00:	691b      	ldr	r3, [r3, #16]
 800ab02:	697a      	ldr	r2, [r7, #20]
 800ab04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab08:	f043 0318 	orr.w	r3, r3, #24
 800ab0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab14:	691b      	ldr	r3, [r3, #16]
 800ab16:	697a      	ldr	r2, [r7, #20]
 800ab18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab1c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ab20:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ab22:	7afb      	ldrb	r3, [r7, #11]
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d10f      	bne.n	800ab48 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab2e:	461a      	mov	r2, r3
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	697a      	ldr	r2, [r7, #20]
 800ab3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab42:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800ab46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab48:	2300      	movs	r3, #0
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	371c      	adds	r7, #28
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr
 800ab56:	bf00      	nop
 800ab58:	4f54300a 	.word	0x4f54300a

0800ab5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b085      	sub	sp, #20
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab64:	2300      	movs	r3, #0
 800ab66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab74:	d901      	bls.n	800ab7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ab76:	2303      	movs	r3, #3
 800ab78:	e01b      	b.n	800abb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	691b      	ldr	r3, [r3, #16]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	daf2      	bge.n	800ab68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ab82:	2300      	movs	r3, #0
 800ab84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	f043 0201 	orr.w	r2, r3, #1
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	3301      	adds	r3, #1
 800ab96:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab9e:	d901      	bls.n	800aba4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aba0:	2303      	movs	r3, #3
 800aba2:	e006      	b.n	800abb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	691b      	ldr	r3, [r3, #16]
 800aba8:	f003 0301 	and.w	r3, r3, #1
 800abac:	2b01      	cmp	r3, #1
 800abae:	d0f0      	beq.n	800ab92 <USB_CoreReset+0x36>

  return HAL_OK;
 800abb0:	2300      	movs	r3, #0
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3714      	adds	r7, #20
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr
	...

0800abc0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800abc4:	4904      	ldr	r1, [pc, #16]	@ (800abd8 <MX_FATFS_Init+0x18>)
 800abc6:	4805      	ldr	r0, [pc, #20]	@ (800abdc <MX_FATFS_Init+0x1c>)
 800abc8:	f002 f9a0 	bl	800cf0c <FATFS_LinkDriver>
 800abcc:	4603      	mov	r3, r0
 800abce:	461a      	mov	r2, r3
 800abd0:	4b03      	ldr	r3, [pc, #12]	@ (800abe0 <MX_FATFS_Init+0x20>)
 800abd2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800abd4:	bf00      	nop
 800abd6:	bd80      	pop	{r7, pc}
 800abd8:	200009bc 	.word	0x200009bc
 800abdc:	0800e900 	.word	0x0800e900
 800abe0:	200009b8 	.word	0x200009b8

0800abe4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800abea:	2300      	movs	r3, #0
 800abec:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800abee:	f000 f879 	bl	800ace4 <BSP_SD_IsDetected>
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d001      	beq.n	800abfc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800abf8:	2302      	movs	r3, #2
 800abfa:	e012      	b.n	800ac22 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800abfc:	480b      	ldr	r0, [pc, #44]	@ (800ac2c <BSP_SD_Init+0x48>)
 800abfe:	f7fb f83b 	bl	8005c78 <HAL_SD_Init>
 800ac02:	4603      	mov	r3, r0
 800ac04:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ac06:	79fb      	ldrb	r3, [r7, #7]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d109      	bne.n	800ac20 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ac0c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800ac10:	4806      	ldr	r0, [pc, #24]	@ (800ac2c <BSP_SD_Init+0x48>)
 800ac12:	f7fb fe1d 	bl	8006850 <HAL_SD_ConfigWideBusOperation>
 800ac16:	4603      	mov	r3, r0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d001      	beq.n	800ac20 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ac20:	79fb      	ldrb	r3, [r7, #7]
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3708      	adds	r7, #8
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	20000284 	.word	0x20000284

0800ac30 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b088      	sub	sp, #32
 800ac34:	af02      	add	r7, sp, #8
 800ac36:	60f8      	str	r0, [r7, #12]
 800ac38:	60b9      	str	r1, [r7, #8]
 800ac3a:	607a      	str	r2, [r7, #4]
 800ac3c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	9300      	str	r3, [sp, #0]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	68ba      	ldr	r2, [r7, #8]
 800ac4a:	68f9      	ldr	r1, [r7, #12]
 800ac4c:	4806      	ldr	r0, [pc, #24]	@ (800ac68 <BSP_SD_ReadBlocks+0x38>)
 800ac4e:	f7fb f8cb 	bl	8005de8 <HAL_SD_ReadBlocks>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d001      	beq.n	800ac5c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ac5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3718      	adds	r7, #24
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	20000284 	.word	0x20000284

0800ac6c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b088      	sub	sp, #32
 800ac70:	af02      	add	r7, sp, #8
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	60b9      	str	r1, [r7, #8]
 800ac76:	607a      	str	r2, [r7, #4]
 800ac78:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	9300      	str	r3, [sp, #0]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	68ba      	ldr	r2, [r7, #8]
 800ac86:	68f9      	ldr	r1, [r7, #12]
 800ac88:	4806      	ldr	r0, [pc, #24]	@ (800aca4 <BSP_SD_WriteBlocks+0x38>)
 800ac8a:	f7fb fa8b 	bl	80061a4 <HAL_SD_WriteBlocks>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d001      	beq.n	800ac98 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ac94:	2301      	movs	r3, #1
 800ac96:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ac98:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3718      	adds	r7, #24
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
 800aca2:	bf00      	nop
 800aca4:	20000284 	.word	0x20000284

0800aca8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800acac:	4805      	ldr	r0, [pc, #20]	@ (800acc4 <BSP_SD_GetCardState+0x1c>)
 800acae:	f7fb fe69 	bl	8006984 <HAL_SD_GetCardState>
 800acb2:	4603      	mov	r3, r0
 800acb4:	2b04      	cmp	r3, #4
 800acb6:	bf14      	ite	ne
 800acb8:	2301      	movne	r3, #1
 800acba:	2300      	moveq	r3, #0
 800acbc:	b2db      	uxtb	r3, r3
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	bd80      	pop	{r7, pc}
 800acc2:	bf00      	nop
 800acc4:	20000284 	.word	0x20000284

0800acc8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800acd0:	6879      	ldr	r1, [r7, #4]
 800acd2:	4803      	ldr	r0, [pc, #12]	@ (800ace0 <BSP_SD_GetCardInfo+0x18>)
 800acd4:	f7fb fd90 	bl	80067f8 <HAL_SD_GetCardInfo>
}
 800acd8:	bf00      	nop
 800acda:	3708      	adds	r7, #8
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}
 800ace0:	20000284 	.word	0x20000284

0800ace4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800acea:	2301      	movs	r3, #1
 800acec:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800acee:	f000 f80b 	bl	800ad08 <BSP_PlatformIsDetected>
 800acf2:	4603      	mov	r3, r0
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d101      	bne.n	800acfc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800acf8:	2300      	movs	r3, #0
 800acfa:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800acfc:	79fb      	ldrb	r3, [r7, #7]
 800acfe:	b2db      	uxtb	r3, r3
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3708      	adds	r7, #8
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ad12:	2110      	movs	r1, #16
 800ad14:	4806      	ldr	r0, [pc, #24]	@ (800ad30 <BSP_PlatformIsDetected+0x28>)
 800ad16:	f7f8 fb31 	bl	800337c <HAL_GPIO_ReadPin>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d001      	beq.n	800ad24 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800ad20:	2300      	movs	r3, #0
 800ad22:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ad24:	79fb      	ldrb	r3, [r7, #7]
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3708      	adds	r7, #8
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	40020000 	.word	0x40020000

0800ad34 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ad3e:	4b0b      	ldr	r3, [pc, #44]	@ (800ad6c <SD_CheckStatus+0x38>)
 800ad40:	2201      	movs	r2, #1
 800ad42:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ad44:	f7ff ffb0 	bl	800aca8 <BSP_SD_GetCardState>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d107      	bne.n	800ad5e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ad4e:	4b07      	ldr	r3, [pc, #28]	@ (800ad6c <SD_CheckStatus+0x38>)
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	f023 0301 	bic.w	r3, r3, #1
 800ad58:	b2da      	uxtb	r2, r3
 800ad5a:	4b04      	ldr	r3, [pc, #16]	@ (800ad6c <SD_CheckStatus+0x38>)
 800ad5c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ad5e:	4b03      	ldr	r3, [pc, #12]	@ (800ad6c <SD_CheckStatus+0x38>)
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	b2db      	uxtb	r3, r3
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3708      	adds	r7, #8
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}
 800ad6c:	20000009 	.word	0x20000009

0800ad70 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	4603      	mov	r3, r0
 800ad78:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800ad7a:	4b0b      	ldr	r3, [pc, #44]	@ (800ada8 <SD_initialize+0x38>)
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ad80:	f7ff ff30 	bl	800abe4 <BSP_SD_Init>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d107      	bne.n	800ad9a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800ad8a:	79fb      	ldrb	r3, [r7, #7]
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f7ff ffd1 	bl	800ad34 <SD_CheckStatus>
 800ad92:	4603      	mov	r3, r0
 800ad94:	461a      	mov	r2, r3
 800ad96:	4b04      	ldr	r3, [pc, #16]	@ (800ada8 <SD_initialize+0x38>)
 800ad98:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ad9a:	4b03      	ldr	r3, [pc, #12]	@ (800ada8 <SD_initialize+0x38>)
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	b2db      	uxtb	r3, r3
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3708      	adds	r7, #8
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}
 800ada8:	20000009 	.word	0x20000009

0800adac <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	4603      	mov	r3, r0
 800adb4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800adb6:	79fb      	ldrb	r3, [r7, #7]
 800adb8:	4618      	mov	r0, r3
 800adba:	f7ff ffbb 	bl	800ad34 <SD_CheckStatus>
 800adbe:	4603      	mov	r3, r0
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3708      	adds	r7, #8
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b086      	sub	sp, #24
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60b9      	str	r1, [r7, #8]
 800add0:	607a      	str	r2, [r7, #4]
 800add2:	603b      	str	r3, [r7, #0]
 800add4:	4603      	mov	r3, r0
 800add6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800add8:	2301      	movs	r3, #1
 800adda:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800addc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ade0:	683a      	ldr	r2, [r7, #0]
 800ade2:	6879      	ldr	r1, [r7, #4]
 800ade4:	68b8      	ldr	r0, [r7, #8]
 800ade6:	f7ff ff23 	bl	800ac30 <BSP_SD_ReadBlocks>
 800adea:	4603      	mov	r3, r0
 800adec:	2b00      	cmp	r3, #0
 800adee:	d107      	bne.n	800ae00 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800adf0:	bf00      	nop
 800adf2:	f7ff ff59 	bl	800aca8 <BSP_SD_GetCardState>
 800adf6:	4603      	mov	r3, r0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d1fa      	bne.n	800adf2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800adfc:	2300      	movs	r3, #0
 800adfe:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ae00:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3718      	adds	r7, #24
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b086      	sub	sp, #24
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	607a      	str	r2, [r7, #4]
 800ae14:	603b      	str	r3, [r7, #0]
 800ae16:	4603      	mov	r3, r0
 800ae18:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ae1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ae22:	683a      	ldr	r2, [r7, #0]
 800ae24:	6879      	ldr	r1, [r7, #4]
 800ae26:	68b8      	ldr	r0, [r7, #8]
 800ae28:	f7ff ff20 	bl	800ac6c <BSP_SD_WriteBlocks>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d107      	bne.n	800ae42 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800ae32:	bf00      	nop
 800ae34:	f7ff ff38 	bl	800aca8 <BSP_SD_GetCardState>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d1fa      	bne.n	800ae34 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ae42:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3718      	adds	r7, #24
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b08c      	sub	sp, #48	@ 0x30
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	4603      	mov	r3, r0
 800ae54:	603a      	str	r2, [r7, #0]
 800ae56:	71fb      	strb	r3, [r7, #7]
 800ae58:	460b      	mov	r3, r1
 800ae5a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ae62:	4b25      	ldr	r3, [pc, #148]	@ (800aef8 <SD_ioctl+0xac>)
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	f003 0301 	and.w	r3, r3, #1
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d001      	beq.n	800ae74 <SD_ioctl+0x28>
 800ae70:	2303      	movs	r3, #3
 800ae72:	e03c      	b.n	800aeee <SD_ioctl+0xa2>

  switch (cmd)
 800ae74:	79bb      	ldrb	r3, [r7, #6]
 800ae76:	2b03      	cmp	r3, #3
 800ae78:	d834      	bhi.n	800aee4 <SD_ioctl+0x98>
 800ae7a:	a201      	add	r2, pc, #4	@ (adr r2, 800ae80 <SD_ioctl+0x34>)
 800ae7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae80:	0800ae91 	.word	0x0800ae91
 800ae84:	0800ae99 	.word	0x0800ae99
 800ae88:	0800aeb1 	.word	0x0800aeb1
 800ae8c:	0800aecb 	.word	0x0800aecb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ae90:	2300      	movs	r3, #0
 800ae92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ae96:	e028      	b.n	800aeea <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ae98:	f107 030c 	add.w	r3, r7, #12
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f7ff ff13 	bl	800acc8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800aea2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800aeae:	e01c      	b.n	800aeea <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800aeb0:	f107 030c 	add.w	r3, r7, #12
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7ff ff07 	bl	800acc8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800aeba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aebc:	b29a      	uxth	r2, r3
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800aec2:	2300      	movs	r3, #0
 800aec4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800aec8:	e00f      	b.n	800aeea <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800aeca:	f107 030c 	add.w	r3, r7, #12
 800aece:	4618      	mov	r0, r3
 800aed0:	f7ff fefa 	bl	800acc8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800aed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aed6:	0a5a      	lsrs	r2, r3, #9
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800aedc:	2300      	movs	r3, #0
 800aede:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800aee2:	e002      	b.n	800aeea <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800aee4:	2304      	movs	r3, #4
 800aee6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800aeea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3730      	adds	r7, #48	@ 0x30
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	20000009 	.word	0x20000009

0800aefc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	460b      	mov	r3, r1
 800af06:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800af08:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800af0c:	f002 fd72 	bl	800d9f4 <malloc>
 800af10:	4603      	mov	r3, r0
 800af12:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d109      	bne.n	800af2e <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	32b0      	adds	r2, #176	@ 0xb0
 800af24:	2100      	movs	r1, #0
 800af26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800af2a:	2302      	movs	r3, #2
 800af2c:	e0d4      	b.n	800b0d8 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800af2e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800af32:	2100      	movs	r1, #0
 800af34:	68f8      	ldr	r0, [r7, #12]
 800af36:	f002 ff32 	bl	800dd9e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	32b0      	adds	r2, #176	@ 0xb0
 800af44:	68f9      	ldr	r1, [r7, #12]
 800af46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	32b0      	adds	r2, #176	@ 0xb0
 800af54:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	7c1b      	ldrb	r3, [r3, #16]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d138      	bne.n	800afd8 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800af66:	4b5e      	ldr	r3, [pc, #376]	@ (800b0e0 <USBD_CDC_Init+0x1e4>)
 800af68:	7819      	ldrb	r1, [r3, #0]
 800af6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af6e:	2202      	movs	r2, #2
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f002 fb9c 	bl	800d6ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800af76:	4b5a      	ldr	r3, [pc, #360]	@ (800b0e0 <USBD_CDC_Init+0x1e4>)
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	f003 020f 	and.w	r2, r3, #15
 800af7e:	6879      	ldr	r1, [r7, #4]
 800af80:	4613      	mov	r3, r2
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	4413      	add	r3, r2
 800af86:	009b      	lsls	r3, r3, #2
 800af88:	440b      	add	r3, r1
 800af8a:	3324      	adds	r3, #36	@ 0x24
 800af8c:	2201      	movs	r2, #1
 800af8e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800af90:	4b54      	ldr	r3, [pc, #336]	@ (800b0e4 <USBD_CDC_Init+0x1e8>)
 800af92:	7819      	ldrb	r1, [r3, #0]
 800af94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af98:	2202      	movs	r2, #2
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f002 fb87 	bl	800d6ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800afa0:	4b50      	ldr	r3, [pc, #320]	@ (800b0e4 <USBD_CDC_Init+0x1e8>)
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	f003 020f 	and.w	r2, r3, #15
 800afa8:	6879      	ldr	r1, [r7, #4]
 800afaa:	4613      	mov	r3, r2
 800afac:	009b      	lsls	r3, r3, #2
 800afae:	4413      	add	r3, r2
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	440b      	add	r3, r1
 800afb4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800afb8:	2201      	movs	r2, #1
 800afba:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800afbc:	4b4a      	ldr	r3, [pc, #296]	@ (800b0e8 <USBD_CDC_Init+0x1ec>)
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	f003 020f 	and.w	r2, r3, #15
 800afc4:	6879      	ldr	r1, [r7, #4]
 800afc6:	4613      	mov	r3, r2
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	4413      	add	r3, r2
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	440b      	add	r3, r1
 800afd0:	3326      	adds	r3, #38	@ 0x26
 800afd2:	2210      	movs	r2, #16
 800afd4:	801a      	strh	r2, [r3, #0]
 800afd6:	e035      	b.n	800b044 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800afd8:	4b41      	ldr	r3, [pc, #260]	@ (800b0e0 <USBD_CDC_Init+0x1e4>)
 800afda:	7819      	ldrb	r1, [r3, #0]
 800afdc:	2340      	movs	r3, #64	@ 0x40
 800afde:	2202      	movs	r2, #2
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f002 fb64 	bl	800d6ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800afe6:	4b3e      	ldr	r3, [pc, #248]	@ (800b0e0 <USBD_CDC_Init+0x1e4>)
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	f003 020f 	and.w	r2, r3, #15
 800afee:	6879      	ldr	r1, [r7, #4]
 800aff0:	4613      	mov	r3, r2
 800aff2:	009b      	lsls	r3, r3, #2
 800aff4:	4413      	add	r3, r2
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	440b      	add	r3, r1
 800affa:	3324      	adds	r3, #36	@ 0x24
 800affc:	2201      	movs	r2, #1
 800affe:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b000:	4b38      	ldr	r3, [pc, #224]	@ (800b0e4 <USBD_CDC_Init+0x1e8>)
 800b002:	7819      	ldrb	r1, [r3, #0]
 800b004:	2340      	movs	r3, #64	@ 0x40
 800b006:	2202      	movs	r2, #2
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f002 fb50 	bl	800d6ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b00e:	4b35      	ldr	r3, [pc, #212]	@ (800b0e4 <USBD_CDC_Init+0x1e8>)
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	f003 020f 	and.w	r2, r3, #15
 800b016:	6879      	ldr	r1, [r7, #4]
 800b018:	4613      	mov	r3, r2
 800b01a:	009b      	lsls	r3, r3, #2
 800b01c:	4413      	add	r3, r2
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	440b      	add	r3, r1
 800b022:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b026:	2201      	movs	r2, #1
 800b028:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b02a:	4b2f      	ldr	r3, [pc, #188]	@ (800b0e8 <USBD_CDC_Init+0x1ec>)
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	f003 020f 	and.w	r2, r3, #15
 800b032:	6879      	ldr	r1, [r7, #4]
 800b034:	4613      	mov	r3, r2
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	4413      	add	r3, r2
 800b03a:	009b      	lsls	r3, r3, #2
 800b03c:	440b      	add	r3, r1
 800b03e:	3326      	adds	r3, #38	@ 0x26
 800b040:	2210      	movs	r2, #16
 800b042:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b044:	4b28      	ldr	r3, [pc, #160]	@ (800b0e8 <USBD_CDC_Init+0x1ec>)
 800b046:	7819      	ldrb	r1, [r3, #0]
 800b048:	2308      	movs	r3, #8
 800b04a:	2203      	movs	r2, #3
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f002 fb2e 	bl	800d6ae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b052:	4b25      	ldr	r3, [pc, #148]	@ (800b0e8 <USBD_CDC_Init+0x1ec>)
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	f003 020f 	and.w	r2, r3, #15
 800b05a:	6879      	ldr	r1, [r7, #4]
 800b05c:	4613      	mov	r3, r2
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	4413      	add	r3, r2
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	440b      	add	r3, r1
 800b066:	3324      	adds	r3, #36	@ 0x24
 800b068:	2201      	movs	r2, #1
 800b06a:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	2200      	movs	r2, #0
 800b070:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b07a:	687a      	ldr	r2, [r7, #4]
 800b07c:	33b0      	adds	r3, #176	@ 0xb0
 800b07e:	009b      	lsls	r3, r3, #2
 800b080:	4413      	add	r3, r2
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2200      	movs	r2, #0
 800b08c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2200      	movs	r2, #0
 800b094:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d101      	bne.n	800b0a6 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800b0a2:	2302      	movs	r3, #2
 800b0a4:	e018      	b.n	800b0d8 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	7c1b      	ldrb	r3, [r3, #16]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d10a      	bne.n	800b0c4 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b0ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b0e4 <USBD_CDC_Init+0x1e8>)
 800b0b0:	7819      	ldrb	r1, [r3, #0]
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b0b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f002 fbe5 	bl	800d88c <USBD_LL_PrepareReceive>
 800b0c2:	e008      	b.n	800b0d6 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b0c4:	4b07      	ldr	r3, [pc, #28]	@ (800b0e4 <USBD_CDC_Init+0x1e8>)
 800b0c6:	7819      	ldrb	r1, [r3, #0]
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b0ce:	2340      	movs	r3, #64	@ 0x40
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f002 fbdb 	bl	800d88c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b0d6:	2300      	movs	r3, #0
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3710      	adds	r7, #16
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	20000093 	.word	0x20000093
 800b0e4:	20000094 	.word	0x20000094
 800b0e8:	20000095 	.word	0x20000095

0800b0ec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b082      	sub	sp, #8
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b0f8:	4b3a      	ldr	r3, [pc, #232]	@ (800b1e4 <USBD_CDC_DeInit+0xf8>)
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f002 fafb 	bl	800d6fa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b104:	4b37      	ldr	r3, [pc, #220]	@ (800b1e4 <USBD_CDC_DeInit+0xf8>)
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	f003 020f 	and.w	r2, r3, #15
 800b10c:	6879      	ldr	r1, [r7, #4]
 800b10e:	4613      	mov	r3, r2
 800b110:	009b      	lsls	r3, r3, #2
 800b112:	4413      	add	r3, r2
 800b114:	009b      	lsls	r3, r3, #2
 800b116:	440b      	add	r3, r1
 800b118:	3324      	adds	r3, #36	@ 0x24
 800b11a:	2200      	movs	r2, #0
 800b11c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b11e:	4b32      	ldr	r3, [pc, #200]	@ (800b1e8 <USBD_CDC_DeInit+0xfc>)
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	4619      	mov	r1, r3
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f002 fae8 	bl	800d6fa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b12a:	4b2f      	ldr	r3, [pc, #188]	@ (800b1e8 <USBD_CDC_DeInit+0xfc>)
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	f003 020f 	and.w	r2, r3, #15
 800b132:	6879      	ldr	r1, [r7, #4]
 800b134:	4613      	mov	r3, r2
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	4413      	add	r3, r2
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	440b      	add	r3, r1
 800b13e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b142:	2200      	movs	r2, #0
 800b144:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b146:	4b29      	ldr	r3, [pc, #164]	@ (800b1ec <USBD_CDC_DeInit+0x100>)
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	4619      	mov	r1, r3
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f002 fad4 	bl	800d6fa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b152:	4b26      	ldr	r3, [pc, #152]	@ (800b1ec <USBD_CDC_DeInit+0x100>)
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	f003 020f 	and.w	r2, r3, #15
 800b15a:	6879      	ldr	r1, [r7, #4]
 800b15c:	4613      	mov	r3, r2
 800b15e:	009b      	lsls	r3, r3, #2
 800b160:	4413      	add	r3, r2
 800b162:	009b      	lsls	r3, r3, #2
 800b164:	440b      	add	r3, r1
 800b166:	3324      	adds	r3, #36	@ 0x24
 800b168:	2200      	movs	r2, #0
 800b16a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b16c:	4b1f      	ldr	r3, [pc, #124]	@ (800b1ec <USBD_CDC_DeInit+0x100>)
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	f003 020f 	and.w	r2, r3, #15
 800b174:	6879      	ldr	r1, [r7, #4]
 800b176:	4613      	mov	r3, r2
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	4413      	add	r3, r2
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	440b      	add	r3, r1
 800b180:	3326      	adds	r3, #38	@ 0x26
 800b182:	2200      	movs	r2, #0
 800b184:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	32b0      	adds	r2, #176	@ 0xb0
 800b190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d01f      	beq.n	800b1d8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	33b0      	adds	r3, #176	@ 0xb0
 800b1a2:	009b      	lsls	r3, r3, #2
 800b1a4:	4413      	add	r3, r2
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	32b0      	adds	r2, #176	@ 0xb0
 800b1b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f002 fc22 	bl	800da04 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	32b0      	adds	r2, #176	@ 0xb0
 800b1ca:	2100      	movs	r1, #0
 800b1cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b1d8:	2300      	movs	r3, #0
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3708      	adds	r7, #8
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	20000093 	.word	0x20000093
 800b1e8:	20000094 	.word	0x20000094
 800b1ec:	20000095 	.word	0x20000095

0800b1f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b086      	sub	sp, #24
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	32b0      	adds	r2, #176	@ 0xb0
 800b204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b208:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b20a:	2300      	movs	r3, #0
 800b20c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b20e:	2300      	movs	r3, #0
 800b210:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b212:	2300      	movs	r3, #0
 800b214:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d101      	bne.n	800b220 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b21c:	2303      	movs	r3, #3
 800b21e:	e0bf      	b.n	800b3a0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d050      	beq.n	800b2ce <USBD_CDC_Setup+0xde>
 800b22c:	2b20      	cmp	r3, #32
 800b22e:	f040 80af 	bne.w	800b390 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	88db      	ldrh	r3, [r3, #6]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d03a      	beq.n	800b2b0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	b25b      	sxtb	r3, r3
 800b240:	2b00      	cmp	r3, #0
 800b242:	da1b      	bge.n	800b27c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b24a:	687a      	ldr	r2, [r7, #4]
 800b24c:	33b0      	adds	r3, #176	@ 0xb0
 800b24e:	009b      	lsls	r3, r3, #2
 800b250:	4413      	add	r3, r2
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	689b      	ldr	r3, [r3, #8]
 800b256:	683a      	ldr	r2, [r7, #0]
 800b258:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b25a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b25c:	683a      	ldr	r2, [r7, #0]
 800b25e:	88d2      	ldrh	r2, [r2, #6]
 800b260:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	88db      	ldrh	r3, [r3, #6]
 800b266:	2b07      	cmp	r3, #7
 800b268:	bf28      	it	cs
 800b26a:	2307      	movcs	r3, #7
 800b26c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	89fa      	ldrh	r2, [r7, #14]
 800b272:	4619      	mov	r1, r3
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f001 fd7d 	bl	800cd74 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b27a:	e090      	b.n	800b39e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	785a      	ldrb	r2, [r3, #1]
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	88db      	ldrh	r3, [r3, #6]
 800b28a:	2b3f      	cmp	r3, #63	@ 0x3f
 800b28c:	d803      	bhi.n	800b296 <USBD_CDC_Setup+0xa6>
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	88db      	ldrh	r3, [r3, #6]
 800b292:	b2da      	uxtb	r2, r3
 800b294:	e000      	b.n	800b298 <USBD_CDC_Setup+0xa8>
 800b296:	2240      	movs	r2, #64	@ 0x40
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b29e:	6939      	ldr	r1, [r7, #16]
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f001 fd8f 	bl	800cdcc <USBD_CtlPrepareRx>
      break;
 800b2ae:	e076      	b.n	800b39e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	33b0      	adds	r3, #176	@ 0xb0
 800b2ba:	009b      	lsls	r3, r3, #2
 800b2bc:	4413      	add	r3, r2
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	689b      	ldr	r3, [r3, #8]
 800b2c2:	683a      	ldr	r2, [r7, #0]
 800b2c4:	7850      	ldrb	r0, [r2, #1]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	6839      	ldr	r1, [r7, #0]
 800b2ca:	4798      	blx	r3
      break;
 800b2cc:	e067      	b.n	800b39e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	785b      	ldrb	r3, [r3, #1]
 800b2d2:	2b0b      	cmp	r3, #11
 800b2d4:	d851      	bhi.n	800b37a <USBD_CDC_Setup+0x18a>
 800b2d6:	a201      	add	r2, pc, #4	@ (adr r2, 800b2dc <USBD_CDC_Setup+0xec>)
 800b2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2dc:	0800b30d 	.word	0x0800b30d
 800b2e0:	0800b389 	.word	0x0800b389
 800b2e4:	0800b37b 	.word	0x0800b37b
 800b2e8:	0800b37b 	.word	0x0800b37b
 800b2ec:	0800b37b 	.word	0x0800b37b
 800b2f0:	0800b37b 	.word	0x0800b37b
 800b2f4:	0800b37b 	.word	0x0800b37b
 800b2f8:	0800b37b 	.word	0x0800b37b
 800b2fc:	0800b37b 	.word	0x0800b37b
 800b300:	0800b37b 	.word	0x0800b37b
 800b304:	0800b337 	.word	0x0800b337
 800b308:	0800b361 	.word	0x0800b361
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b312:	b2db      	uxtb	r3, r3
 800b314:	2b03      	cmp	r3, #3
 800b316:	d107      	bne.n	800b328 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b318:	f107 030a 	add.w	r3, r7, #10
 800b31c:	2202      	movs	r2, #2
 800b31e:	4619      	mov	r1, r3
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f001 fd27 	bl	800cd74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b326:	e032      	b.n	800b38e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b328:	6839      	ldr	r1, [r7, #0]
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f001 fca5 	bl	800cc7a <USBD_CtlError>
            ret = USBD_FAIL;
 800b330:	2303      	movs	r3, #3
 800b332:	75fb      	strb	r3, [r7, #23]
          break;
 800b334:	e02b      	b.n	800b38e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	2b03      	cmp	r3, #3
 800b340:	d107      	bne.n	800b352 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b342:	f107 030d 	add.w	r3, r7, #13
 800b346:	2201      	movs	r2, #1
 800b348:	4619      	mov	r1, r3
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f001 fd12 	bl	800cd74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b350:	e01d      	b.n	800b38e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b352:	6839      	ldr	r1, [r7, #0]
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f001 fc90 	bl	800cc7a <USBD_CtlError>
            ret = USBD_FAIL;
 800b35a:	2303      	movs	r3, #3
 800b35c:	75fb      	strb	r3, [r7, #23]
          break;
 800b35e:	e016      	b.n	800b38e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b366:	b2db      	uxtb	r3, r3
 800b368:	2b03      	cmp	r3, #3
 800b36a:	d00f      	beq.n	800b38c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b36c:	6839      	ldr	r1, [r7, #0]
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f001 fc83 	bl	800cc7a <USBD_CtlError>
            ret = USBD_FAIL;
 800b374:	2303      	movs	r3, #3
 800b376:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b378:	e008      	b.n	800b38c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b37a:	6839      	ldr	r1, [r7, #0]
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f001 fc7c 	bl	800cc7a <USBD_CtlError>
          ret = USBD_FAIL;
 800b382:	2303      	movs	r3, #3
 800b384:	75fb      	strb	r3, [r7, #23]
          break;
 800b386:	e002      	b.n	800b38e <USBD_CDC_Setup+0x19e>
          break;
 800b388:	bf00      	nop
 800b38a:	e008      	b.n	800b39e <USBD_CDC_Setup+0x1ae>
          break;
 800b38c:	bf00      	nop
      }
      break;
 800b38e:	e006      	b.n	800b39e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b390:	6839      	ldr	r1, [r7, #0]
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f001 fc71 	bl	800cc7a <USBD_CtlError>
      ret = USBD_FAIL;
 800b398:	2303      	movs	r3, #3
 800b39a:	75fb      	strb	r3, [r7, #23]
      break;
 800b39c:	bf00      	nop
  }

  return (uint8_t)ret;
 800b39e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3718      	adds	r7, #24
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b3ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	32b0      	adds	r2, #176	@ 0xb0
 800b3c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d101      	bne.n	800b3d2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b3ce:	2303      	movs	r3, #3
 800b3d0:	e065      	b.n	800b49e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	32b0      	adds	r2, #176	@ 0xb0
 800b3dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3e0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b3e2:	78fb      	ldrb	r3, [r7, #3]
 800b3e4:	f003 020f 	and.w	r2, r3, #15
 800b3e8:	6879      	ldr	r1, [r7, #4]
 800b3ea:	4613      	mov	r3, r2
 800b3ec:	009b      	lsls	r3, r3, #2
 800b3ee:	4413      	add	r3, r2
 800b3f0:	009b      	lsls	r3, r3, #2
 800b3f2:	440b      	add	r3, r1
 800b3f4:	3318      	adds	r3, #24
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d02f      	beq.n	800b45c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b3fc:	78fb      	ldrb	r3, [r7, #3]
 800b3fe:	f003 020f 	and.w	r2, r3, #15
 800b402:	6879      	ldr	r1, [r7, #4]
 800b404:	4613      	mov	r3, r2
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	4413      	add	r3, r2
 800b40a:	009b      	lsls	r3, r3, #2
 800b40c:	440b      	add	r3, r1
 800b40e:	3318      	adds	r3, #24
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	78fb      	ldrb	r3, [r7, #3]
 800b414:	f003 010f 	and.w	r1, r3, #15
 800b418:	68f8      	ldr	r0, [r7, #12]
 800b41a:	460b      	mov	r3, r1
 800b41c:	00db      	lsls	r3, r3, #3
 800b41e:	440b      	add	r3, r1
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	4403      	add	r3, r0
 800b424:	331c      	adds	r3, #28
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	fbb2 f1f3 	udiv	r1, r2, r3
 800b42c:	fb01 f303 	mul.w	r3, r1, r3
 800b430:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b432:	2b00      	cmp	r3, #0
 800b434:	d112      	bne.n	800b45c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b436:	78fb      	ldrb	r3, [r7, #3]
 800b438:	f003 020f 	and.w	r2, r3, #15
 800b43c:	6879      	ldr	r1, [r7, #4]
 800b43e:	4613      	mov	r3, r2
 800b440:	009b      	lsls	r3, r3, #2
 800b442:	4413      	add	r3, r2
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	440b      	add	r3, r1
 800b448:	3318      	adds	r3, #24
 800b44a:	2200      	movs	r2, #0
 800b44c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b44e:	78f9      	ldrb	r1, [r7, #3]
 800b450:	2300      	movs	r3, #0
 800b452:	2200      	movs	r2, #0
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f002 f9f8 	bl	800d84a <USBD_LL_Transmit>
 800b45a:	e01f      	b.n	800b49c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	2200      	movs	r2, #0
 800b460:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b46a:	687a      	ldr	r2, [r7, #4]
 800b46c:	33b0      	adds	r3, #176	@ 0xb0
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	4413      	add	r3, r2
 800b472:	685b      	ldr	r3, [r3, #4]
 800b474:	691b      	ldr	r3, [r3, #16]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d010      	beq.n	800b49c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	33b0      	adds	r3, #176	@ 0xb0
 800b484:	009b      	lsls	r3, r3, #2
 800b486:	4413      	add	r3, r2
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	691b      	ldr	r3, [r3, #16]
 800b48c:	68ba      	ldr	r2, [r7, #8]
 800b48e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b492:	68ba      	ldr	r2, [r7, #8]
 800b494:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b498:	78fa      	ldrb	r2, [r7, #3]
 800b49a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b49c:	2300      	movs	r3, #0
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3710      	adds	r7, #16
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}

0800b4a6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b4a6:	b580      	push	{r7, lr}
 800b4a8:	b084      	sub	sp, #16
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	32b0      	adds	r2, #176	@ 0xb0
 800b4bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4c0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	32b0      	adds	r2, #176	@ 0xb0
 800b4cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d101      	bne.n	800b4d8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b4d4:	2303      	movs	r3, #3
 800b4d6:	e01a      	b.n	800b50e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b4d8:	78fb      	ldrb	r3, [r7, #3]
 800b4da:	4619      	mov	r1, r3
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f002 f9f6 	bl	800d8ce <USBD_LL_GetRxDataSize>
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b4f0:	687a      	ldr	r2, [r7, #4]
 800b4f2:	33b0      	adds	r3, #176	@ 0xb0
 800b4f4:	009b      	lsls	r3, r3, #2
 800b4f6:	4413      	add	r3, r2
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	68db      	ldr	r3, [r3, #12]
 800b4fc:	68fa      	ldr	r2, [r7, #12]
 800b4fe:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b502:	68fa      	ldr	r2, [r7, #12]
 800b504:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b508:	4611      	mov	r1, r2
 800b50a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b50c:	2300      	movs	r3, #0
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3710      	adds	r7, #16
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}

0800b516 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b516:	b580      	push	{r7, lr}
 800b518:	b084      	sub	sp, #16
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	32b0      	adds	r2, #176	@ 0xb0
 800b528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b52c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d101      	bne.n	800b538 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b534:	2303      	movs	r3, #3
 800b536:	e024      	b.n	800b582 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b53e:	687a      	ldr	r2, [r7, #4]
 800b540:	33b0      	adds	r3, #176	@ 0xb0
 800b542:	009b      	lsls	r3, r3, #2
 800b544:	4413      	add	r3, r2
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d019      	beq.n	800b580 <USBD_CDC_EP0_RxReady+0x6a>
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b552:	2bff      	cmp	r3, #255	@ 0xff
 800b554:	d014      	beq.n	800b580 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b55c:	687a      	ldr	r2, [r7, #4]
 800b55e:	33b0      	adds	r3, #176	@ 0xb0
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	4413      	add	r3, r2
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	68fa      	ldr	r2, [r7, #12]
 800b56a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b56e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b570:	68fa      	ldr	r2, [r7, #12]
 800b572:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b576:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	22ff      	movs	r2, #255	@ 0xff
 800b57c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b580:	2300      	movs	r3, #0
}
 800b582:	4618      	mov	r0, r3
 800b584:	3710      	adds	r7, #16
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
	...

0800b58c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b086      	sub	sp, #24
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b594:	2182      	movs	r1, #130	@ 0x82
 800b596:	4818      	ldr	r0, [pc, #96]	@ (800b5f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b598:	f000 fd0f 	bl	800bfba <USBD_GetEpDesc>
 800b59c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b59e:	2101      	movs	r1, #1
 800b5a0:	4815      	ldr	r0, [pc, #84]	@ (800b5f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b5a2:	f000 fd0a 	bl	800bfba <USBD_GetEpDesc>
 800b5a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b5a8:	2181      	movs	r1, #129	@ 0x81
 800b5aa:	4813      	ldr	r0, [pc, #76]	@ (800b5f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b5ac:	f000 fd05 	bl	800bfba <USBD_GetEpDesc>
 800b5b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d002      	beq.n	800b5be <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	2210      	movs	r2, #16
 800b5bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d006      	beq.n	800b5d2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b5cc:	711a      	strb	r2, [r3, #4]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d006      	beq.n	800b5e6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b5e0:	711a      	strb	r2, [r3, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2243      	movs	r2, #67	@ 0x43
 800b5ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b5ec:	4b02      	ldr	r3, [pc, #8]	@ (800b5f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3718      	adds	r7, #24
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	20000050 	.word	0x20000050

0800b5fc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b086      	sub	sp, #24
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b604:	2182      	movs	r1, #130	@ 0x82
 800b606:	4818      	ldr	r0, [pc, #96]	@ (800b668 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b608:	f000 fcd7 	bl	800bfba <USBD_GetEpDesc>
 800b60c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b60e:	2101      	movs	r1, #1
 800b610:	4815      	ldr	r0, [pc, #84]	@ (800b668 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b612:	f000 fcd2 	bl	800bfba <USBD_GetEpDesc>
 800b616:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b618:	2181      	movs	r1, #129	@ 0x81
 800b61a:	4813      	ldr	r0, [pc, #76]	@ (800b668 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b61c:	f000 fccd 	bl	800bfba <USBD_GetEpDesc>
 800b620:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d002      	beq.n	800b62e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	2210      	movs	r2, #16
 800b62c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d006      	beq.n	800b642 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	2200      	movs	r2, #0
 800b638:	711a      	strb	r2, [r3, #4]
 800b63a:	2200      	movs	r2, #0
 800b63c:	f042 0202 	orr.w	r2, r2, #2
 800b640:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d006      	beq.n	800b656 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	2200      	movs	r2, #0
 800b64c:	711a      	strb	r2, [r3, #4]
 800b64e:	2200      	movs	r2, #0
 800b650:	f042 0202 	orr.w	r2, r2, #2
 800b654:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2243      	movs	r2, #67	@ 0x43
 800b65a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b65c:	4b02      	ldr	r3, [pc, #8]	@ (800b668 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3718      	adds	r7, #24
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	20000050 	.word	0x20000050

0800b66c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b086      	sub	sp, #24
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b674:	2182      	movs	r1, #130	@ 0x82
 800b676:	4818      	ldr	r0, [pc, #96]	@ (800b6d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b678:	f000 fc9f 	bl	800bfba <USBD_GetEpDesc>
 800b67c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b67e:	2101      	movs	r1, #1
 800b680:	4815      	ldr	r0, [pc, #84]	@ (800b6d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b682:	f000 fc9a 	bl	800bfba <USBD_GetEpDesc>
 800b686:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b688:	2181      	movs	r1, #129	@ 0x81
 800b68a:	4813      	ldr	r0, [pc, #76]	@ (800b6d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b68c:	f000 fc95 	bl	800bfba <USBD_GetEpDesc>
 800b690:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d002      	beq.n	800b69e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	2210      	movs	r2, #16
 800b69c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d006      	beq.n	800b6b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b6ac:	711a      	strb	r2, [r3, #4]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d006      	beq.n	800b6c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b6c0:	711a      	strb	r2, [r3, #4]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2243      	movs	r2, #67	@ 0x43
 800b6ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b6cc:	4b02      	ldr	r3, [pc, #8]	@ (800b6d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3718      	adds	r7, #24
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	bf00      	nop
 800b6d8:	20000050 	.word	0x20000050

0800b6dc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b083      	sub	sp, #12
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	220a      	movs	r2, #10
 800b6e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b6ea:	4b03      	ldr	r3, [pc, #12]	@ (800b6f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	370c      	adds	r7, #12
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr
 800b6f8:	2000000c 	.word	0x2000000c

0800b6fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d101      	bne.n	800b710 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b70c:	2303      	movs	r3, #3
 800b70e:	e009      	b.n	800b724 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b716:	687a      	ldr	r2, [r7, #4]
 800b718:	33b0      	adds	r3, #176	@ 0xb0
 800b71a:	009b      	lsls	r3, r3, #2
 800b71c:	4413      	add	r3, r2
 800b71e:	683a      	ldr	r2, [r7, #0]
 800b720:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b722:	2300      	movs	r3, #0
}
 800b724:	4618      	mov	r0, r3
 800b726:	370c      	adds	r7, #12
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr

0800b730 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b730:	b480      	push	{r7}
 800b732:	b087      	sub	sp, #28
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	60b9      	str	r1, [r7, #8]
 800b73a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	32b0      	adds	r2, #176	@ 0xb0
 800b746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b74a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d101      	bne.n	800b756 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b752:	2303      	movs	r3, #3
 800b754:	e008      	b.n	800b768 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	68ba      	ldr	r2, [r7, #8]
 800b75a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	687a      	ldr	r2, [r7, #4]
 800b762:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b766:	2300      	movs	r3, #0
}
 800b768:	4618      	mov	r0, r3
 800b76a:	371c      	adds	r7, #28
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr

0800b774 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b774:	b480      	push	{r7}
 800b776:	b085      	sub	sp, #20
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	32b0      	adds	r2, #176	@ 0xb0
 800b788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b78c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d101      	bne.n	800b798 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b794:	2303      	movs	r3, #3
 800b796:	e004      	b.n	800b7a2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	683a      	ldr	r2, [r7, #0]
 800b79c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b7a0:	2300      	movs	r3, #0
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3714      	adds	r7, #20
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ac:	4770      	bx	lr
	...

0800b7b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	32b0      	adds	r2, #176	@ 0xb0
 800b7c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7c6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	32b0      	adds	r2, #176	@ 0xb0
 800b7d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d101      	bne.n	800b7de <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b7da:	2303      	movs	r3, #3
 800b7dc:	e018      	b.n	800b810 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	7c1b      	ldrb	r3, [r3, #16]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d10a      	bne.n	800b7fc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b7e6:	4b0c      	ldr	r3, [pc, #48]	@ (800b818 <USBD_CDC_ReceivePacket+0x68>)
 800b7e8:	7819      	ldrb	r1, [r3, #0]
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b7f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f002 f849 	bl	800d88c <USBD_LL_PrepareReceive>
 800b7fa:	e008      	b.n	800b80e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b7fc:	4b06      	ldr	r3, [pc, #24]	@ (800b818 <USBD_CDC_ReceivePacket+0x68>)
 800b7fe:	7819      	ldrb	r1, [r3, #0]
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b806:	2340      	movs	r3, #64	@ 0x40
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f002 f83f 	bl	800d88c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b80e:	2300      	movs	r3, #0
}
 800b810:	4618      	mov	r0, r3
 800b812:	3710      	adds	r7, #16
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}
 800b818:	20000094 	.word	0x20000094

0800b81c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b086      	sub	sp, #24
 800b820:	af00      	add	r7, sp, #0
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	4613      	mov	r3, r2
 800b828:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d101      	bne.n	800b834 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b830:	2303      	movs	r3, #3
 800b832:	e01f      	b.n	800b874 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2200      	movs	r2, #0
 800b838:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2200      	movs	r2, #0
 800b840:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2200      	movs	r2, #0
 800b848:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d003      	beq.n	800b85a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	68ba      	ldr	r2, [r7, #8]
 800b856:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	2201      	movs	r2, #1
 800b85e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	79fa      	ldrb	r2, [r7, #7]
 800b866:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b868:	68f8      	ldr	r0, [r7, #12]
 800b86a:	f001 feb5 	bl	800d5d8 <USBD_LL_Init>
 800b86e:	4603      	mov	r3, r0
 800b870:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b872:	7dfb      	ldrb	r3, [r7, #23]
}
 800b874:	4618      	mov	r0, r3
 800b876:	3718      	adds	r7, #24
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b886:	2300      	movs	r3, #0
 800b888:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d101      	bne.n	800b894 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b890:	2303      	movs	r3, #3
 800b892:	e025      	b.n	800b8e0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	683a      	ldr	r2, [r7, #0]
 800b898:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	32ae      	adds	r2, #174	@ 0xae
 800b8a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d00f      	beq.n	800b8d0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	32ae      	adds	r2, #174	@ 0xae
 800b8ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8c0:	f107 020e 	add.w	r2, r7, #14
 800b8c4:	4610      	mov	r0, r2
 800b8c6:	4798      	blx	r3
 800b8c8:	4602      	mov	r2, r0
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b8d6:	1c5a      	adds	r2, r3, #1
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b8de:	2300      	movs	r3, #0
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3710      	adds	r7, #16
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b082      	sub	sp, #8
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f001 fec1 	bl	800d678 <USBD_LL_Start>
 800b8f6:	4603      	mov	r3, r0
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3708      	adds	r7, #8
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b900:	b480      	push	{r7}
 800b902:	b083      	sub	sp, #12
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b908:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	370c      	adds	r7, #12
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr

0800b916 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b916:	b580      	push	{r7, lr}
 800b918:	b084      	sub	sp, #16
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
 800b91e:	460b      	mov	r3, r1
 800b920:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b922:	2300      	movs	r3, #0
 800b924:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d009      	beq.n	800b944 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	78fa      	ldrb	r2, [r7, #3]
 800b93a:	4611      	mov	r1, r2
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	4798      	blx	r3
 800b940:	4603      	mov	r3, r0
 800b942:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b944:	7bfb      	ldrb	r3, [r7, #15]
}
 800b946:	4618      	mov	r0, r3
 800b948:	3710      	adds	r7, #16
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}

0800b94e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b94e:	b580      	push	{r7, lr}
 800b950:	b084      	sub	sp, #16
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
 800b956:	460b      	mov	r3, r1
 800b958:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b95a:	2300      	movs	r3, #0
 800b95c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	78fa      	ldrb	r2, [r7, #3]
 800b968:	4611      	mov	r1, r2
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	4798      	blx	r3
 800b96e:	4603      	mov	r3, r0
 800b970:	2b00      	cmp	r3, #0
 800b972:	d001      	beq.n	800b978 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b974:	2303      	movs	r3, #3
 800b976:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b978:	7bfb      	ldrb	r3, [r7, #15]
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3710      	adds	r7, #16
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}

0800b982 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b982:	b580      	push	{r7, lr}
 800b984:	b084      	sub	sp, #16
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
 800b98a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b992:	6839      	ldr	r1, [r7, #0]
 800b994:	4618      	mov	r0, r3
 800b996:	f001 f936 	bl	800cc06 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2201      	movs	r2, #1
 800b99e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b9b6:	f003 031f 	and.w	r3, r3, #31
 800b9ba:	2b02      	cmp	r3, #2
 800b9bc:	d01a      	beq.n	800b9f4 <USBD_LL_SetupStage+0x72>
 800b9be:	2b02      	cmp	r3, #2
 800b9c0:	d822      	bhi.n	800ba08 <USBD_LL_SetupStage+0x86>
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d002      	beq.n	800b9cc <USBD_LL_SetupStage+0x4a>
 800b9c6:	2b01      	cmp	r3, #1
 800b9c8:	d00a      	beq.n	800b9e0 <USBD_LL_SetupStage+0x5e>
 800b9ca:	e01d      	b.n	800ba08 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f000 fb63 	bl	800c0a0 <USBD_StdDevReq>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	73fb      	strb	r3, [r7, #15]
      break;
 800b9de:	e020      	b.n	800ba22 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b9e6:	4619      	mov	r1, r3
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f000 fbcb 	bl	800c184 <USBD_StdItfReq>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	73fb      	strb	r3, [r7, #15]
      break;
 800b9f2:	e016      	b.n	800ba22 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 fc2d 	bl	800c25c <USBD_StdEPReq>
 800ba02:	4603      	mov	r3, r0
 800ba04:	73fb      	strb	r3, [r7, #15]
      break;
 800ba06:	e00c      	b.n	800ba22 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ba0e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ba12:	b2db      	uxtb	r3, r3
 800ba14:	4619      	mov	r1, r3
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f001 fe8e 	bl	800d738 <USBD_LL_StallEP>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	73fb      	strb	r3, [r7, #15]
      break;
 800ba20:	bf00      	nop
  }

  return ret;
 800ba22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3710      	adds	r7, #16
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b086      	sub	sp, #24
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	60f8      	str	r0, [r7, #12]
 800ba34:	460b      	mov	r3, r1
 800ba36:	607a      	str	r2, [r7, #4]
 800ba38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ba3e:	7afb      	ldrb	r3, [r7, #11]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d16e      	bne.n	800bb22 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ba4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ba52:	2b03      	cmp	r3, #3
 800ba54:	f040 8098 	bne.w	800bb88 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	689a      	ldr	r2, [r3, #8]
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	68db      	ldr	r3, [r3, #12]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d913      	bls.n	800ba8c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	689a      	ldr	r2, [r3, #8]
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	68db      	ldr	r3, [r3, #12]
 800ba6c:	1ad2      	subs	r2, r2, r3
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	68da      	ldr	r2, [r3, #12]
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	689b      	ldr	r3, [r3, #8]
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	bf28      	it	cs
 800ba7e:	4613      	movcs	r3, r2
 800ba80:	461a      	mov	r2, r3
 800ba82:	6879      	ldr	r1, [r7, #4]
 800ba84:	68f8      	ldr	r0, [r7, #12]
 800ba86:	f001 f9be 	bl	800ce06 <USBD_CtlContinueRx>
 800ba8a:	e07d      	b.n	800bb88 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ba92:	f003 031f 	and.w	r3, r3, #31
 800ba96:	2b02      	cmp	r3, #2
 800ba98:	d014      	beq.n	800bac4 <USBD_LL_DataOutStage+0x98>
 800ba9a:	2b02      	cmp	r3, #2
 800ba9c:	d81d      	bhi.n	800bada <USBD_LL_DataOutStage+0xae>
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d002      	beq.n	800baa8 <USBD_LL_DataOutStage+0x7c>
 800baa2:	2b01      	cmp	r3, #1
 800baa4:	d003      	beq.n	800baae <USBD_LL_DataOutStage+0x82>
 800baa6:	e018      	b.n	800bada <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800baa8:	2300      	movs	r3, #0
 800baaa:	75bb      	strb	r3, [r7, #22]
            break;
 800baac:	e018      	b.n	800bae0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bab4:	b2db      	uxtb	r3, r3
 800bab6:	4619      	mov	r1, r3
 800bab8:	68f8      	ldr	r0, [r7, #12]
 800baba:	f000 fa64 	bl	800bf86 <USBD_CoreFindIF>
 800babe:	4603      	mov	r3, r0
 800bac0:	75bb      	strb	r3, [r7, #22]
            break;
 800bac2:	e00d      	b.n	800bae0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800baca:	b2db      	uxtb	r3, r3
 800bacc:	4619      	mov	r1, r3
 800bace:	68f8      	ldr	r0, [r7, #12]
 800bad0:	f000 fa66 	bl	800bfa0 <USBD_CoreFindEP>
 800bad4:	4603      	mov	r3, r0
 800bad6:	75bb      	strb	r3, [r7, #22]
            break;
 800bad8:	e002      	b.n	800bae0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bada:	2300      	movs	r3, #0
 800badc:	75bb      	strb	r3, [r7, #22]
            break;
 800bade:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bae0:	7dbb      	ldrb	r3, [r7, #22]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d119      	bne.n	800bb1a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800baec:	b2db      	uxtb	r3, r3
 800baee:	2b03      	cmp	r3, #3
 800baf0:	d113      	bne.n	800bb1a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800baf2:	7dba      	ldrb	r2, [r7, #22]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	32ae      	adds	r2, #174	@ 0xae
 800baf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bafc:	691b      	ldr	r3, [r3, #16]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d00b      	beq.n	800bb1a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bb02:	7dba      	ldrb	r2, [r7, #22]
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bb0a:	7dba      	ldrb	r2, [r7, #22]
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	32ae      	adds	r2, #174	@ 0xae
 800bb10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb14:	691b      	ldr	r3, [r3, #16]
 800bb16:	68f8      	ldr	r0, [r7, #12]
 800bb18:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bb1a:	68f8      	ldr	r0, [r7, #12]
 800bb1c:	f001 f984 	bl	800ce28 <USBD_CtlSendStatus>
 800bb20:	e032      	b.n	800bb88 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bb22:	7afb      	ldrb	r3, [r7, #11]
 800bb24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb28:	b2db      	uxtb	r3, r3
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	68f8      	ldr	r0, [r7, #12]
 800bb2e:	f000 fa37 	bl	800bfa0 <USBD_CoreFindEP>
 800bb32:	4603      	mov	r3, r0
 800bb34:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb36:	7dbb      	ldrb	r3, [r7, #22]
 800bb38:	2bff      	cmp	r3, #255	@ 0xff
 800bb3a:	d025      	beq.n	800bb88 <USBD_LL_DataOutStage+0x15c>
 800bb3c:	7dbb      	ldrb	r3, [r7, #22]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d122      	bne.n	800bb88 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb48:	b2db      	uxtb	r3, r3
 800bb4a:	2b03      	cmp	r3, #3
 800bb4c:	d117      	bne.n	800bb7e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bb4e:	7dba      	ldrb	r2, [r7, #22]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	32ae      	adds	r2, #174	@ 0xae
 800bb54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb58:	699b      	ldr	r3, [r3, #24]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d00f      	beq.n	800bb7e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bb5e:	7dba      	ldrb	r2, [r7, #22]
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bb66:	7dba      	ldrb	r2, [r7, #22]
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	32ae      	adds	r2, #174	@ 0xae
 800bb6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb70:	699b      	ldr	r3, [r3, #24]
 800bb72:	7afa      	ldrb	r2, [r7, #11]
 800bb74:	4611      	mov	r1, r2
 800bb76:	68f8      	ldr	r0, [r7, #12]
 800bb78:	4798      	blx	r3
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bb7e:	7dfb      	ldrb	r3, [r7, #23]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d001      	beq.n	800bb88 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bb84:	7dfb      	ldrb	r3, [r7, #23]
 800bb86:	e000      	b.n	800bb8a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bb88:	2300      	movs	r3, #0
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3718      	adds	r7, #24
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}

0800bb92 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bb92:	b580      	push	{r7, lr}
 800bb94:	b086      	sub	sp, #24
 800bb96:	af00      	add	r7, sp, #0
 800bb98:	60f8      	str	r0, [r7, #12]
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	607a      	str	r2, [r7, #4]
 800bb9e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bba0:	7afb      	ldrb	r3, [r7, #11]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d16f      	bne.n	800bc86 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	3314      	adds	r3, #20
 800bbaa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bbb2:	2b02      	cmp	r3, #2
 800bbb4:	d15a      	bne.n	800bc6c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	689a      	ldr	r2, [r3, #8]
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	68db      	ldr	r3, [r3, #12]
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d914      	bls.n	800bbec <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	689a      	ldr	r2, [r3, #8]
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	68db      	ldr	r3, [r3, #12]
 800bbca:	1ad2      	subs	r2, r2, r3
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	689b      	ldr	r3, [r3, #8]
 800bbd4:	461a      	mov	r2, r3
 800bbd6:	6879      	ldr	r1, [r7, #4]
 800bbd8:	68f8      	ldr	r0, [r7, #12]
 800bbda:	f001 f8e6 	bl	800cdaa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbde:	2300      	movs	r3, #0
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	2100      	movs	r1, #0
 800bbe4:	68f8      	ldr	r0, [r7, #12]
 800bbe6:	f001 fe51 	bl	800d88c <USBD_LL_PrepareReceive>
 800bbea:	e03f      	b.n	800bc6c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	68da      	ldr	r2, [r3, #12]
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	689b      	ldr	r3, [r3, #8]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d11c      	bne.n	800bc32 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	685a      	ldr	r2, [r3, #4]
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d316      	bcc.n	800bc32 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	685a      	ldr	r2, [r3, #4]
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d20f      	bcs.n	800bc32 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bc12:	2200      	movs	r2, #0
 800bc14:	2100      	movs	r1, #0
 800bc16:	68f8      	ldr	r0, [r7, #12]
 800bc18:	f001 f8c7 	bl	800cdaa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc24:	2300      	movs	r3, #0
 800bc26:	2200      	movs	r2, #0
 800bc28:	2100      	movs	r1, #0
 800bc2a:	68f8      	ldr	r0, [r7, #12]
 800bc2c:	f001 fe2e 	bl	800d88c <USBD_LL_PrepareReceive>
 800bc30:	e01c      	b.n	800bc6c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	2b03      	cmp	r3, #3
 800bc3c:	d10f      	bne.n	800bc5e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc44:	68db      	ldr	r3, [r3, #12]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d009      	beq.n	800bc5e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc58:	68db      	ldr	r3, [r3, #12]
 800bc5a:	68f8      	ldr	r0, [r7, #12]
 800bc5c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc5e:	2180      	movs	r1, #128	@ 0x80
 800bc60:	68f8      	ldr	r0, [r7, #12]
 800bc62:	f001 fd69 	bl	800d738 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bc66:	68f8      	ldr	r0, [r7, #12]
 800bc68:	f001 f8f1 	bl	800ce4e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d03a      	beq.n	800bcec <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bc76:	68f8      	ldr	r0, [r7, #12]
 800bc78:	f7ff fe42 	bl	800b900 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bc84:	e032      	b.n	800bcec <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bc86:	7afb      	ldrb	r3, [r7, #11]
 800bc88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	4619      	mov	r1, r3
 800bc90:	68f8      	ldr	r0, [r7, #12]
 800bc92:	f000 f985 	bl	800bfa0 <USBD_CoreFindEP>
 800bc96:	4603      	mov	r3, r0
 800bc98:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc9a:	7dfb      	ldrb	r3, [r7, #23]
 800bc9c:	2bff      	cmp	r3, #255	@ 0xff
 800bc9e:	d025      	beq.n	800bcec <USBD_LL_DataInStage+0x15a>
 800bca0:	7dfb      	ldrb	r3, [r7, #23]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d122      	bne.n	800bcec <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcac:	b2db      	uxtb	r3, r3
 800bcae:	2b03      	cmp	r3, #3
 800bcb0:	d11c      	bne.n	800bcec <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bcb2:	7dfa      	ldrb	r2, [r7, #23]
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	32ae      	adds	r2, #174	@ 0xae
 800bcb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcbc:	695b      	ldr	r3, [r3, #20]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d014      	beq.n	800bcec <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bcc2:	7dfa      	ldrb	r2, [r7, #23]
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bcca:	7dfa      	ldrb	r2, [r7, #23]
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	32ae      	adds	r2, #174	@ 0xae
 800bcd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcd4:	695b      	ldr	r3, [r3, #20]
 800bcd6:	7afa      	ldrb	r2, [r7, #11]
 800bcd8:	4611      	mov	r1, r2
 800bcda:	68f8      	ldr	r0, [r7, #12]
 800bcdc:	4798      	blx	r3
 800bcde:	4603      	mov	r3, r0
 800bce0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bce2:	7dbb      	ldrb	r3, [r7, #22]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d001      	beq.n	800bcec <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bce8:	7dbb      	ldrb	r3, [r7, #22]
 800bcea:	e000      	b.n	800bcee <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bcec:	2300      	movs	r3, #0
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3718      	adds	r7, #24
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}

0800bcf6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bcf6:	b580      	push	{r7, lr}
 800bcf8:	b084      	sub	sp, #16
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2201      	movs	r2, #1
 800bd06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2200      	movs	r2, #0
 800bd16:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2200      	movs	r2, #0
 800bd24:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d014      	beq.n	800bd5c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d00e      	beq.n	800bd5c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	687a      	ldr	r2, [r7, #4]
 800bd48:	6852      	ldr	r2, [r2, #4]
 800bd4a:	b2d2      	uxtb	r2, r2
 800bd4c:	4611      	mov	r1, r2
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	4798      	blx	r3
 800bd52:	4603      	mov	r3, r0
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d001      	beq.n	800bd5c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bd58:	2303      	movs	r3, #3
 800bd5a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd5c:	2340      	movs	r3, #64	@ 0x40
 800bd5e:	2200      	movs	r2, #0
 800bd60:	2100      	movs	r1, #0
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f001 fca3 	bl	800d6ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2240      	movs	r2, #64	@ 0x40
 800bd74:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd78:	2340      	movs	r3, #64	@ 0x40
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	2180      	movs	r1, #128	@ 0x80
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f001 fc95 	bl	800d6ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2201      	movs	r2, #1
 800bd88:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2240      	movs	r2, #64	@ 0x40
 800bd8e:	621a      	str	r2, [r3, #32]

  return ret;
 800bd90:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3710      	adds	r7, #16
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}

0800bd9a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bd9a:	b480      	push	{r7}
 800bd9c:	b083      	sub	sp, #12
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	6078      	str	r0, [r7, #4]
 800bda2:	460b      	mov	r3, r1
 800bda4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	78fa      	ldrb	r2, [r7, #3]
 800bdaa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bdac:	2300      	movs	r3, #0
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	370c      	adds	r7, #12
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb8:	4770      	bx	lr

0800bdba <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bdba:	b480      	push	{r7}
 800bdbc:	b083      	sub	sp, #12
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdc8:	b2db      	uxtb	r3, r3
 800bdca:	2b04      	cmp	r3, #4
 800bdcc:	d006      	beq.n	800bddc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdd4:	b2da      	uxtb	r2, r3
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2204      	movs	r2, #4
 800bde0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bde4:	2300      	movs	r3, #0
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	370c      	adds	r7, #12
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr

0800bdf2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bdf2:	b480      	push	{r7}
 800bdf4:	b083      	sub	sp, #12
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be00:	b2db      	uxtb	r3, r3
 800be02:	2b04      	cmp	r3, #4
 800be04:	d106      	bne.n	800be14 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800be0c:	b2da      	uxtb	r2, r3
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800be14:	2300      	movs	r3, #0
}
 800be16:	4618      	mov	r0, r3
 800be18:	370c      	adds	r7, #12
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr

0800be22 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800be22:	b580      	push	{r7, lr}
 800be24:	b082      	sub	sp, #8
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be30:	b2db      	uxtb	r3, r3
 800be32:	2b03      	cmp	r3, #3
 800be34:	d110      	bne.n	800be58 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d00b      	beq.n	800be58 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be46:	69db      	ldr	r3, [r3, #28]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d005      	beq.n	800be58 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be52:	69db      	ldr	r3, [r3, #28]
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800be58:	2300      	movs	r3, #0
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3708      	adds	r7, #8
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}

0800be62 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800be62:	b580      	push	{r7, lr}
 800be64:	b082      	sub	sp, #8
 800be66:	af00      	add	r7, sp, #0
 800be68:	6078      	str	r0, [r7, #4]
 800be6a:	460b      	mov	r3, r1
 800be6c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	32ae      	adds	r2, #174	@ 0xae
 800be78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d101      	bne.n	800be84 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800be80:	2303      	movs	r3, #3
 800be82:	e01c      	b.n	800bebe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be8a:	b2db      	uxtb	r3, r3
 800be8c:	2b03      	cmp	r3, #3
 800be8e:	d115      	bne.n	800bebc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	32ae      	adds	r2, #174	@ 0xae
 800be9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be9e:	6a1b      	ldr	r3, [r3, #32]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d00b      	beq.n	800bebc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	32ae      	adds	r2, #174	@ 0xae
 800beae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beb2:	6a1b      	ldr	r3, [r3, #32]
 800beb4:	78fa      	ldrb	r2, [r7, #3]
 800beb6:	4611      	mov	r1, r2
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bebc:	2300      	movs	r3, #0
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3708      	adds	r7, #8
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}

0800bec6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bec6:	b580      	push	{r7, lr}
 800bec8:	b082      	sub	sp, #8
 800beca:	af00      	add	r7, sp, #0
 800becc:	6078      	str	r0, [r7, #4]
 800bece:	460b      	mov	r3, r1
 800bed0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	32ae      	adds	r2, #174	@ 0xae
 800bedc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d101      	bne.n	800bee8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bee4:	2303      	movs	r3, #3
 800bee6:	e01c      	b.n	800bf22 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800beee:	b2db      	uxtb	r3, r3
 800bef0:	2b03      	cmp	r3, #3
 800bef2:	d115      	bne.n	800bf20 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	32ae      	adds	r2, #174	@ 0xae
 800befe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d00b      	beq.n	800bf20 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	32ae      	adds	r2, #174	@ 0xae
 800bf12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf18:	78fa      	ldrb	r2, [r7, #3]
 800bf1a:	4611      	mov	r1, r2
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bf20:	2300      	movs	r3, #0
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3708      	adds	r7, #8
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}

0800bf2a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bf2a:	b480      	push	{r7}
 800bf2c:	b083      	sub	sp, #12
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bf32:	2300      	movs	r3, #0
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	370c      	adds	r7, #12
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr

0800bf40 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2201      	movs	r2, #1
 800bf50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d00e      	beq.n	800bf7c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf64:	685b      	ldr	r3, [r3, #4]
 800bf66:	687a      	ldr	r2, [r7, #4]
 800bf68:	6852      	ldr	r2, [r2, #4]
 800bf6a:	b2d2      	uxtb	r2, r2
 800bf6c:	4611      	mov	r1, r2
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	4798      	blx	r3
 800bf72:	4603      	mov	r3, r0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d001      	beq.n	800bf7c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bf78:	2303      	movs	r3, #3
 800bf7a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bf7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3710      	adds	r7, #16
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}

0800bf86 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bf86:	b480      	push	{r7}
 800bf88:	b083      	sub	sp, #12
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	6078      	str	r0, [r7, #4]
 800bf8e:	460b      	mov	r3, r1
 800bf90:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bf92:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	370c      	adds	r7, #12
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr

0800bfa0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b083      	sub	sp, #12
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
 800bfa8:	460b      	mov	r3, r1
 800bfaa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bfac:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	370c      	adds	r7, #12
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr

0800bfba <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bfba:	b580      	push	{r7, lr}
 800bfbc:	b086      	sub	sp, #24
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]
 800bfc2:	460b      	mov	r3, r1
 800bfc4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	885b      	ldrh	r3, [r3, #2]
 800bfd6:	b29b      	uxth	r3, r3
 800bfd8:	68fa      	ldr	r2, [r7, #12]
 800bfda:	7812      	ldrb	r2, [r2, #0]
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d91f      	bls.n	800c020 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bfe6:	e013      	b.n	800c010 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bfe8:	f107 030a 	add.w	r3, r7, #10
 800bfec:	4619      	mov	r1, r3
 800bfee:	6978      	ldr	r0, [r7, #20]
 800bff0:	f000 f81b 	bl	800c02a <USBD_GetNextDesc>
 800bff4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	785b      	ldrb	r3, [r3, #1]
 800bffa:	2b05      	cmp	r3, #5
 800bffc:	d108      	bne.n	800c010 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	789b      	ldrb	r3, [r3, #2]
 800c006:	78fa      	ldrb	r2, [r7, #3]
 800c008:	429a      	cmp	r2, r3
 800c00a:	d008      	beq.n	800c01e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c00c:	2300      	movs	r3, #0
 800c00e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	885b      	ldrh	r3, [r3, #2]
 800c014:	b29a      	uxth	r2, r3
 800c016:	897b      	ldrh	r3, [r7, #10]
 800c018:	429a      	cmp	r2, r3
 800c01a:	d8e5      	bhi.n	800bfe8 <USBD_GetEpDesc+0x2e>
 800c01c:	e000      	b.n	800c020 <USBD_GetEpDesc+0x66>
          break;
 800c01e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c020:	693b      	ldr	r3, [r7, #16]
}
 800c022:	4618      	mov	r0, r3
 800c024:	3718      	adds	r7, #24
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}

0800c02a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c02a:	b480      	push	{r7}
 800c02c:	b085      	sub	sp, #20
 800c02e:	af00      	add	r7, sp, #0
 800c030:	6078      	str	r0, [r7, #4]
 800c032:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	881b      	ldrh	r3, [r3, #0]
 800c03c:	68fa      	ldr	r2, [r7, #12]
 800c03e:	7812      	ldrb	r2, [r2, #0]
 800c040:	4413      	add	r3, r2
 800c042:	b29a      	uxth	r2, r3
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	781b      	ldrb	r3, [r3, #0]
 800c04c:	461a      	mov	r2, r3
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	4413      	add	r3, r2
 800c052:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c054:	68fb      	ldr	r3, [r7, #12]
}
 800c056:	4618      	mov	r0, r3
 800c058:	3714      	adds	r7, #20
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr

0800c062 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c062:	b480      	push	{r7}
 800c064:	b087      	sub	sp, #28
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	3301      	adds	r3, #1
 800c078:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c080:	8a3b      	ldrh	r3, [r7, #16]
 800c082:	021b      	lsls	r3, r3, #8
 800c084:	b21a      	sxth	r2, r3
 800c086:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c08a:	4313      	orrs	r3, r2
 800c08c:	b21b      	sxth	r3, r3
 800c08e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c090:	89fb      	ldrh	r3, [r7, #14]
}
 800c092:	4618      	mov	r0, r3
 800c094:	371c      	adds	r7, #28
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr
	...

0800c0a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c0b6:	2b40      	cmp	r3, #64	@ 0x40
 800c0b8:	d005      	beq.n	800c0c6 <USBD_StdDevReq+0x26>
 800c0ba:	2b40      	cmp	r3, #64	@ 0x40
 800c0bc:	d857      	bhi.n	800c16e <USBD_StdDevReq+0xce>
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d00f      	beq.n	800c0e2 <USBD_StdDevReq+0x42>
 800c0c2:	2b20      	cmp	r3, #32
 800c0c4:	d153      	bne.n	800c16e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	32ae      	adds	r2, #174	@ 0xae
 800c0d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	6839      	ldr	r1, [r7, #0]
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	4798      	blx	r3
 800c0dc:	4603      	mov	r3, r0
 800c0de:	73fb      	strb	r3, [r7, #15]
      break;
 800c0e0:	e04a      	b.n	800c178 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	785b      	ldrb	r3, [r3, #1]
 800c0e6:	2b09      	cmp	r3, #9
 800c0e8:	d83b      	bhi.n	800c162 <USBD_StdDevReq+0xc2>
 800c0ea:	a201      	add	r2, pc, #4	@ (adr r2, 800c0f0 <USBD_StdDevReq+0x50>)
 800c0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0f0:	0800c145 	.word	0x0800c145
 800c0f4:	0800c159 	.word	0x0800c159
 800c0f8:	0800c163 	.word	0x0800c163
 800c0fc:	0800c14f 	.word	0x0800c14f
 800c100:	0800c163 	.word	0x0800c163
 800c104:	0800c123 	.word	0x0800c123
 800c108:	0800c119 	.word	0x0800c119
 800c10c:	0800c163 	.word	0x0800c163
 800c110:	0800c13b 	.word	0x0800c13b
 800c114:	0800c12d 	.word	0x0800c12d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c118:	6839      	ldr	r1, [r7, #0]
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f000 fa3c 	bl	800c598 <USBD_GetDescriptor>
          break;
 800c120:	e024      	b.n	800c16c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c122:	6839      	ldr	r1, [r7, #0]
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f000 fbcb 	bl	800c8c0 <USBD_SetAddress>
          break;
 800c12a:	e01f      	b.n	800c16c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c12c:	6839      	ldr	r1, [r7, #0]
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f000 fc0a 	bl	800c948 <USBD_SetConfig>
 800c134:	4603      	mov	r3, r0
 800c136:	73fb      	strb	r3, [r7, #15]
          break;
 800c138:	e018      	b.n	800c16c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c13a:	6839      	ldr	r1, [r7, #0]
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f000 fcad 	bl	800ca9c <USBD_GetConfig>
          break;
 800c142:	e013      	b.n	800c16c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c144:	6839      	ldr	r1, [r7, #0]
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f000 fcde 	bl	800cb08 <USBD_GetStatus>
          break;
 800c14c:	e00e      	b.n	800c16c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c14e:	6839      	ldr	r1, [r7, #0]
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f000 fd0d 	bl	800cb70 <USBD_SetFeature>
          break;
 800c156:	e009      	b.n	800c16c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c158:	6839      	ldr	r1, [r7, #0]
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f000 fd31 	bl	800cbc2 <USBD_ClrFeature>
          break;
 800c160:	e004      	b.n	800c16c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c162:	6839      	ldr	r1, [r7, #0]
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f000 fd88 	bl	800cc7a <USBD_CtlError>
          break;
 800c16a:	bf00      	nop
      }
      break;
 800c16c:	e004      	b.n	800c178 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c16e:	6839      	ldr	r1, [r7, #0]
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f000 fd82 	bl	800cc7a <USBD_CtlError>
      break;
 800c176:	bf00      	nop
  }

  return ret;
 800c178:	7bfb      	ldrb	r3, [r7, #15]
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3710      	adds	r7, #16
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}
 800c182:	bf00      	nop

0800c184 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b084      	sub	sp, #16
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c18e:	2300      	movs	r3, #0
 800c190:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	781b      	ldrb	r3, [r3, #0]
 800c196:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c19a:	2b40      	cmp	r3, #64	@ 0x40
 800c19c:	d005      	beq.n	800c1aa <USBD_StdItfReq+0x26>
 800c19e:	2b40      	cmp	r3, #64	@ 0x40
 800c1a0:	d852      	bhi.n	800c248 <USBD_StdItfReq+0xc4>
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d001      	beq.n	800c1aa <USBD_StdItfReq+0x26>
 800c1a6:	2b20      	cmp	r3, #32
 800c1a8:	d14e      	bne.n	800c248 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1b0:	b2db      	uxtb	r3, r3
 800c1b2:	3b01      	subs	r3, #1
 800c1b4:	2b02      	cmp	r3, #2
 800c1b6:	d840      	bhi.n	800c23a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	889b      	ldrh	r3, [r3, #4]
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d836      	bhi.n	800c230 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	889b      	ldrh	r3, [r3, #4]
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f7ff fedb 	bl	800bf86 <USBD_CoreFindIF>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c1d4:	7bbb      	ldrb	r3, [r7, #14]
 800c1d6:	2bff      	cmp	r3, #255	@ 0xff
 800c1d8:	d01d      	beq.n	800c216 <USBD_StdItfReq+0x92>
 800c1da:	7bbb      	ldrb	r3, [r7, #14]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d11a      	bne.n	800c216 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c1e0:	7bba      	ldrb	r2, [r7, #14]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	32ae      	adds	r2, #174	@ 0xae
 800c1e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1ea:	689b      	ldr	r3, [r3, #8]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d00f      	beq.n	800c210 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c1f0:	7bba      	ldrb	r2, [r7, #14]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c1f8:	7bba      	ldrb	r2, [r7, #14]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	32ae      	adds	r2, #174	@ 0xae
 800c1fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c202:	689b      	ldr	r3, [r3, #8]
 800c204:	6839      	ldr	r1, [r7, #0]
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	4798      	blx	r3
 800c20a:	4603      	mov	r3, r0
 800c20c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c20e:	e004      	b.n	800c21a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c210:	2303      	movs	r3, #3
 800c212:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c214:	e001      	b.n	800c21a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c216:	2303      	movs	r3, #3
 800c218:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	88db      	ldrh	r3, [r3, #6]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d110      	bne.n	800c244 <USBD_StdItfReq+0xc0>
 800c222:	7bfb      	ldrb	r3, [r7, #15]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d10d      	bne.n	800c244 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f000 fdfd 	bl	800ce28 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c22e:	e009      	b.n	800c244 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c230:	6839      	ldr	r1, [r7, #0]
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 fd21 	bl	800cc7a <USBD_CtlError>
          break;
 800c238:	e004      	b.n	800c244 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c23a:	6839      	ldr	r1, [r7, #0]
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 fd1c 	bl	800cc7a <USBD_CtlError>
          break;
 800c242:	e000      	b.n	800c246 <USBD_StdItfReq+0xc2>
          break;
 800c244:	bf00      	nop
      }
      break;
 800c246:	e004      	b.n	800c252 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c248:	6839      	ldr	r1, [r7, #0]
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f000 fd15 	bl	800cc7a <USBD_CtlError>
      break;
 800c250:	bf00      	nop
  }

  return ret;
 800c252:	7bfb      	ldrb	r3, [r7, #15]
}
 800c254:	4618      	mov	r0, r3
 800c256:	3710      	adds	r7, #16
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b084      	sub	sp, #16
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c266:	2300      	movs	r3, #0
 800c268:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	889b      	ldrh	r3, [r3, #4]
 800c26e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	781b      	ldrb	r3, [r3, #0]
 800c274:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c278:	2b40      	cmp	r3, #64	@ 0x40
 800c27a:	d007      	beq.n	800c28c <USBD_StdEPReq+0x30>
 800c27c:	2b40      	cmp	r3, #64	@ 0x40
 800c27e:	f200 817f 	bhi.w	800c580 <USBD_StdEPReq+0x324>
 800c282:	2b00      	cmp	r3, #0
 800c284:	d02a      	beq.n	800c2dc <USBD_StdEPReq+0x80>
 800c286:	2b20      	cmp	r3, #32
 800c288:	f040 817a 	bne.w	800c580 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c28c:	7bbb      	ldrb	r3, [r7, #14]
 800c28e:	4619      	mov	r1, r3
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f7ff fe85 	bl	800bfa0 <USBD_CoreFindEP>
 800c296:	4603      	mov	r3, r0
 800c298:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c29a:	7b7b      	ldrb	r3, [r7, #13]
 800c29c:	2bff      	cmp	r3, #255	@ 0xff
 800c29e:	f000 8174 	beq.w	800c58a <USBD_StdEPReq+0x32e>
 800c2a2:	7b7b      	ldrb	r3, [r7, #13]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	f040 8170 	bne.w	800c58a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c2aa:	7b7a      	ldrb	r2, [r7, #13]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c2b2:	7b7a      	ldrb	r2, [r7, #13]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	32ae      	adds	r2, #174	@ 0xae
 800c2b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2bc:	689b      	ldr	r3, [r3, #8]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	f000 8163 	beq.w	800c58a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c2c4:	7b7a      	ldrb	r2, [r7, #13]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	32ae      	adds	r2, #174	@ 0xae
 800c2ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2ce:	689b      	ldr	r3, [r3, #8]
 800c2d0:	6839      	ldr	r1, [r7, #0]
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	4798      	blx	r3
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c2da:	e156      	b.n	800c58a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	785b      	ldrb	r3, [r3, #1]
 800c2e0:	2b03      	cmp	r3, #3
 800c2e2:	d008      	beq.n	800c2f6 <USBD_StdEPReq+0x9a>
 800c2e4:	2b03      	cmp	r3, #3
 800c2e6:	f300 8145 	bgt.w	800c574 <USBD_StdEPReq+0x318>
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	f000 809b 	beq.w	800c426 <USBD_StdEPReq+0x1ca>
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	d03c      	beq.n	800c36e <USBD_StdEPReq+0x112>
 800c2f4:	e13e      	b.n	800c574 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2fc:	b2db      	uxtb	r3, r3
 800c2fe:	2b02      	cmp	r3, #2
 800c300:	d002      	beq.n	800c308 <USBD_StdEPReq+0xac>
 800c302:	2b03      	cmp	r3, #3
 800c304:	d016      	beq.n	800c334 <USBD_StdEPReq+0xd8>
 800c306:	e02c      	b.n	800c362 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c308:	7bbb      	ldrb	r3, [r7, #14]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d00d      	beq.n	800c32a <USBD_StdEPReq+0xce>
 800c30e:	7bbb      	ldrb	r3, [r7, #14]
 800c310:	2b80      	cmp	r3, #128	@ 0x80
 800c312:	d00a      	beq.n	800c32a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c314:	7bbb      	ldrb	r3, [r7, #14]
 800c316:	4619      	mov	r1, r3
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f001 fa0d 	bl	800d738 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c31e:	2180      	movs	r1, #128	@ 0x80
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f001 fa09 	bl	800d738 <USBD_LL_StallEP>
 800c326:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c328:	e020      	b.n	800c36c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c32a:	6839      	ldr	r1, [r7, #0]
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f000 fca4 	bl	800cc7a <USBD_CtlError>
              break;
 800c332:	e01b      	b.n	800c36c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	885b      	ldrh	r3, [r3, #2]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d10e      	bne.n	800c35a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c33c:	7bbb      	ldrb	r3, [r7, #14]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d00b      	beq.n	800c35a <USBD_StdEPReq+0xfe>
 800c342:	7bbb      	ldrb	r3, [r7, #14]
 800c344:	2b80      	cmp	r3, #128	@ 0x80
 800c346:	d008      	beq.n	800c35a <USBD_StdEPReq+0xfe>
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	88db      	ldrh	r3, [r3, #6]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d104      	bne.n	800c35a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c350:	7bbb      	ldrb	r3, [r7, #14]
 800c352:	4619      	mov	r1, r3
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f001 f9ef 	bl	800d738 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f000 fd64 	bl	800ce28 <USBD_CtlSendStatus>

              break;
 800c360:	e004      	b.n	800c36c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c362:	6839      	ldr	r1, [r7, #0]
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f000 fc88 	bl	800cc7a <USBD_CtlError>
              break;
 800c36a:	bf00      	nop
          }
          break;
 800c36c:	e107      	b.n	800c57e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c374:	b2db      	uxtb	r3, r3
 800c376:	2b02      	cmp	r3, #2
 800c378:	d002      	beq.n	800c380 <USBD_StdEPReq+0x124>
 800c37a:	2b03      	cmp	r3, #3
 800c37c:	d016      	beq.n	800c3ac <USBD_StdEPReq+0x150>
 800c37e:	e04b      	b.n	800c418 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c380:	7bbb      	ldrb	r3, [r7, #14]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d00d      	beq.n	800c3a2 <USBD_StdEPReq+0x146>
 800c386:	7bbb      	ldrb	r3, [r7, #14]
 800c388:	2b80      	cmp	r3, #128	@ 0x80
 800c38a:	d00a      	beq.n	800c3a2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c38c:	7bbb      	ldrb	r3, [r7, #14]
 800c38e:	4619      	mov	r1, r3
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f001 f9d1 	bl	800d738 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c396:	2180      	movs	r1, #128	@ 0x80
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f001 f9cd 	bl	800d738 <USBD_LL_StallEP>
 800c39e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c3a0:	e040      	b.n	800c424 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c3a2:	6839      	ldr	r1, [r7, #0]
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f000 fc68 	bl	800cc7a <USBD_CtlError>
              break;
 800c3aa:	e03b      	b.n	800c424 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	885b      	ldrh	r3, [r3, #2]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d136      	bne.n	800c422 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c3b4:	7bbb      	ldrb	r3, [r7, #14]
 800c3b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d004      	beq.n	800c3c8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c3be:	7bbb      	ldrb	r3, [r7, #14]
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f001 f9d7 	bl	800d776 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f000 fd2d 	bl	800ce28 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c3ce:	7bbb      	ldrb	r3, [r7, #14]
 800c3d0:	4619      	mov	r1, r3
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f7ff fde4 	bl	800bfa0 <USBD_CoreFindEP>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c3dc:	7b7b      	ldrb	r3, [r7, #13]
 800c3de:	2bff      	cmp	r3, #255	@ 0xff
 800c3e0:	d01f      	beq.n	800c422 <USBD_StdEPReq+0x1c6>
 800c3e2:	7b7b      	ldrb	r3, [r7, #13]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d11c      	bne.n	800c422 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c3e8:	7b7a      	ldrb	r2, [r7, #13]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c3f0:	7b7a      	ldrb	r2, [r7, #13]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	32ae      	adds	r2, #174	@ 0xae
 800c3f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3fa:	689b      	ldr	r3, [r3, #8]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d010      	beq.n	800c422 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c400:	7b7a      	ldrb	r2, [r7, #13]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	32ae      	adds	r2, #174	@ 0xae
 800c406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c40a:	689b      	ldr	r3, [r3, #8]
 800c40c:	6839      	ldr	r1, [r7, #0]
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	4798      	blx	r3
 800c412:	4603      	mov	r3, r0
 800c414:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c416:	e004      	b.n	800c422 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c418:	6839      	ldr	r1, [r7, #0]
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 fc2d 	bl	800cc7a <USBD_CtlError>
              break;
 800c420:	e000      	b.n	800c424 <USBD_StdEPReq+0x1c8>
              break;
 800c422:	bf00      	nop
          }
          break;
 800c424:	e0ab      	b.n	800c57e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c42c:	b2db      	uxtb	r3, r3
 800c42e:	2b02      	cmp	r3, #2
 800c430:	d002      	beq.n	800c438 <USBD_StdEPReq+0x1dc>
 800c432:	2b03      	cmp	r3, #3
 800c434:	d032      	beq.n	800c49c <USBD_StdEPReq+0x240>
 800c436:	e097      	b.n	800c568 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c438:	7bbb      	ldrb	r3, [r7, #14]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d007      	beq.n	800c44e <USBD_StdEPReq+0x1f2>
 800c43e:	7bbb      	ldrb	r3, [r7, #14]
 800c440:	2b80      	cmp	r3, #128	@ 0x80
 800c442:	d004      	beq.n	800c44e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c444:	6839      	ldr	r1, [r7, #0]
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f000 fc17 	bl	800cc7a <USBD_CtlError>
                break;
 800c44c:	e091      	b.n	800c572 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c44e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c452:	2b00      	cmp	r3, #0
 800c454:	da0b      	bge.n	800c46e <USBD_StdEPReq+0x212>
 800c456:	7bbb      	ldrb	r3, [r7, #14]
 800c458:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c45c:	4613      	mov	r3, r2
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	4413      	add	r3, r2
 800c462:	009b      	lsls	r3, r3, #2
 800c464:	3310      	adds	r3, #16
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	4413      	add	r3, r2
 800c46a:	3304      	adds	r3, #4
 800c46c:	e00b      	b.n	800c486 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c46e:	7bbb      	ldrb	r3, [r7, #14]
 800c470:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c474:	4613      	mov	r3, r2
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	4413      	add	r3, r2
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	4413      	add	r3, r2
 800c484:	3304      	adds	r3, #4
 800c486:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	2200      	movs	r2, #0
 800c48c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	2202      	movs	r2, #2
 800c492:	4619      	mov	r1, r3
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f000 fc6d 	bl	800cd74 <USBD_CtlSendData>
              break;
 800c49a:	e06a      	b.n	800c572 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c49c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	da11      	bge.n	800c4c8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c4a4:	7bbb      	ldrb	r3, [r7, #14]
 800c4a6:	f003 020f 	and.w	r2, r3, #15
 800c4aa:	6879      	ldr	r1, [r7, #4]
 800c4ac:	4613      	mov	r3, r2
 800c4ae:	009b      	lsls	r3, r3, #2
 800c4b0:	4413      	add	r3, r2
 800c4b2:	009b      	lsls	r3, r3, #2
 800c4b4:	440b      	add	r3, r1
 800c4b6:	3324      	adds	r3, #36	@ 0x24
 800c4b8:	881b      	ldrh	r3, [r3, #0]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d117      	bne.n	800c4ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c4be:	6839      	ldr	r1, [r7, #0]
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f000 fbda 	bl	800cc7a <USBD_CtlError>
                  break;
 800c4c6:	e054      	b.n	800c572 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c4c8:	7bbb      	ldrb	r3, [r7, #14]
 800c4ca:	f003 020f 	and.w	r2, r3, #15
 800c4ce:	6879      	ldr	r1, [r7, #4]
 800c4d0:	4613      	mov	r3, r2
 800c4d2:	009b      	lsls	r3, r3, #2
 800c4d4:	4413      	add	r3, r2
 800c4d6:	009b      	lsls	r3, r3, #2
 800c4d8:	440b      	add	r3, r1
 800c4da:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c4de:	881b      	ldrh	r3, [r3, #0]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d104      	bne.n	800c4ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c4e4:	6839      	ldr	r1, [r7, #0]
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f000 fbc7 	bl	800cc7a <USBD_CtlError>
                  break;
 800c4ec:	e041      	b.n	800c572 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c4ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	da0b      	bge.n	800c50e <USBD_StdEPReq+0x2b2>
 800c4f6:	7bbb      	ldrb	r3, [r7, #14]
 800c4f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c4fc:	4613      	mov	r3, r2
 800c4fe:	009b      	lsls	r3, r3, #2
 800c500:	4413      	add	r3, r2
 800c502:	009b      	lsls	r3, r3, #2
 800c504:	3310      	adds	r3, #16
 800c506:	687a      	ldr	r2, [r7, #4]
 800c508:	4413      	add	r3, r2
 800c50a:	3304      	adds	r3, #4
 800c50c:	e00b      	b.n	800c526 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c50e:	7bbb      	ldrb	r3, [r7, #14]
 800c510:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c514:	4613      	mov	r3, r2
 800c516:	009b      	lsls	r3, r3, #2
 800c518:	4413      	add	r3, r2
 800c51a:	009b      	lsls	r3, r3, #2
 800c51c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c520:	687a      	ldr	r2, [r7, #4]
 800c522:	4413      	add	r3, r2
 800c524:	3304      	adds	r3, #4
 800c526:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c528:	7bbb      	ldrb	r3, [r7, #14]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d002      	beq.n	800c534 <USBD_StdEPReq+0x2d8>
 800c52e:	7bbb      	ldrb	r3, [r7, #14]
 800c530:	2b80      	cmp	r3, #128	@ 0x80
 800c532:	d103      	bne.n	800c53c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	2200      	movs	r2, #0
 800c538:	601a      	str	r2, [r3, #0]
 800c53a:	e00e      	b.n	800c55a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c53c:	7bbb      	ldrb	r3, [r7, #14]
 800c53e:	4619      	mov	r1, r3
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f001 f937 	bl	800d7b4 <USBD_LL_IsStallEP>
 800c546:	4603      	mov	r3, r0
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d003      	beq.n	800c554 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	2201      	movs	r2, #1
 800c550:	601a      	str	r2, [r3, #0]
 800c552:	e002      	b.n	800c55a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	2200      	movs	r2, #0
 800c558:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	2202      	movs	r2, #2
 800c55e:	4619      	mov	r1, r3
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f000 fc07 	bl	800cd74 <USBD_CtlSendData>
              break;
 800c566:	e004      	b.n	800c572 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c568:	6839      	ldr	r1, [r7, #0]
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f000 fb85 	bl	800cc7a <USBD_CtlError>
              break;
 800c570:	bf00      	nop
          }
          break;
 800c572:	e004      	b.n	800c57e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c574:	6839      	ldr	r1, [r7, #0]
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f000 fb7f 	bl	800cc7a <USBD_CtlError>
          break;
 800c57c:	bf00      	nop
      }
      break;
 800c57e:	e005      	b.n	800c58c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c580:	6839      	ldr	r1, [r7, #0]
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f000 fb79 	bl	800cc7a <USBD_CtlError>
      break;
 800c588:	e000      	b.n	800c58c <USBD_StdEPReq+0x330>
      break;
 800c58a:	bf00      	nop
  }

  return ret;
 800c58c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3710      	adds	r7, #16
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
	...

0800c598 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b084      	sub	sp, #16
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	885b      	ldrh	r3, [r3, #2]
 800c5b2:	0a1b      	lsrs	r3, r3, #8
 800c5b4:	b29b      	uxth	r3, r3
 800c5b6:	3b01      	subs	r3, #1
 800c5b8:	2b0e      	cmp	r3, #14
 800c5ba:	f200 8152 	bhi.w	800c862 <USBD_GetDescriptor+0x2ca>
 800c5be:	a201      	add	r2, pc, #4	@ (adr r2, 800c5c4 <USBD_GetDescriptor+0x2c>)
 800c5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c4:	0800c635 	.word	0x0800c635
 800c5c8:	0800c64d 	.word	0x0800c64d
 800c5cc:	0800c68d 	.word	0x0800c68d
 800c5d0:	0800c863 	.word	0x0800c863
 800c5d4:	0800c863 	.word	0x0800c863
 800c5d8:	0800c803 	.word	0x0800c803
 800c5dc:	0800c82f 	.word	0x0800c82f
 800c5e0:	0800c863 	.word	0x0800c863
 800c5e4:	0800c863 	.word	0x0800c863
 800c5e8:	0800c863 	.word	0x0800c863
 800c5ec:	0800c863 	.word	0x0800c863
 800c5f0:	0800c863 	.word	0x0800c863
 800c5f4:	0800c863 	.word	0x0800c863
 800c5f8:	0800c863 	.word	0x0800c863
 800c5fc:	0800c601 	.word	0x0800c601
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c606:	69db      	ldr	r3, [r3, #28]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d00b      	beq.n	800c624 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c612:	69db      	ldr	r3, [r3, #28]
 800c614:	687a      	ldr	r2, [r7, #4]
 800c616:	7c12      	ldrb	r2, [r2, #16]
 800c618:	f107 0108 	add.w	r1, r7, #8
 800c61c:	4610      	mov	r0, r2
 800c61e:	4798      	blx	r3
 800c620:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c622:	e126      	b.n	800c872 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c624:	6839      	ldr	r1, [r7, #0]
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f000 fb27 	bl	800cc7a <USBD_CtlError>
        err++;
 800c62c:	7afb      	ldrb	r3, [r7, #11]
 800c62e:	3301      	adds	r3, #1
 800c630:	72fb      	strb	r3, [r7, #11]
      break;
 800c632:	e11e      	b.n	800c872 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	687a      	ldr	r2, [r7, #4]
 800c63e:	7c12      	ldrb	r2, [r2, #16]
 800c640:	f107 0108 	add.w	r1, r7, #8
 800c644:	4610      	mov	r0, r2
 800c646:	4798      	blx	r3
 800c648:	60f8      	str	r0, [r7, #12]
      break;
 800c64a:	e112      	b.n	800c872 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	7c1b      	ldrb	r3, [r3, #16]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d10d      	bne.n	800c670 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c65a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c65c:	f107 0208 	add.w	r2, r7, #8
 800c660:	4610      	mov	r0, r2
 800c662:	4798      	blx	r3
 800c664:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	3301      	adds	r3, #1
 800c66a:	2202      	movs	r2, #2
 800c66c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c66e:	e100      	b.n	800c872 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c678:	f107 0208 	add.w	r2, r7, #8
 800c67c:	4610      	mov	r0, r2
 800c67e:	4798      	blx	r3
 800c680:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	3301      	adds	r3, #1
 800c686:	2202      	movs	r2, #2
 800c688:	701a      	strb	r2, [r3, #0]
      break;
 800c68a:	e0f2      	b.n	800c872 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	885b      	ldrh	r3, [r3, #2]
 800c690:	b2db      	uxtb	r3, r3
 800c692:	2b05      	cmp	r3, #5
 800c694:	f200 80ac 	bhi.w	800c7f0 <USBD_GetDescriptor+0x258>
 800c698:	a201      	add	r2, pc, #4	@ (adr r2, 800c6a0 <USBD_GetDescriptor+0x108>)
 800c69a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c69e:	bf00      	nop
 800c6a0:	0800c6b9 	.word	0x0800c6b9
 800c6a4:	0800c6ed 	.word	0x0800c6ed
 800c6a8:	0800c721 	.word	0x0800c721
 800c6ac:	0800c755 	.word	0x0800c755
 800c6b0:	0800c789 	.word	0x0800c789
 800c6b4:	0800c7bd 	.word	0x0800c7bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6be:	685b      	ldr	r3, [r3, #4]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d00b      	beq.n	800c6dc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	687a      	ldr	r2, [r7, #4]
 800c6ce:	7c12      	ldrb	r2, [r2, #16]
 800c6d0:	f107 0108 	add.w	r1, r7, #8
 800c6d4:	4610      	mov	r0, r2
 800c6d6:	4798      	blx	r3
 800c6d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6da:	e091      	b.n	800c800 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c6dc:	6839      	ldr	r1, [r7, #0]
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f000 facb 	bl	800cc7a <USBD_CtlError>
            err++;
 800c6e4:	7afb      	ldrb	r3, [r7, #11]
 800c6e6:	3301      	adds	r3, #1
 800c6e8:	72fb      	strb	r3, [r7, #11]
          break;
 800c6ea:	e089      	b.n	800c800 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6f2:	689b      	ldr	r3, [r3, #8]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d00b      	beq.n	800c710 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6fe:	689b      	ldr	r3, [r3, #8]
 800c700:	687a      	ldr	r2, [r7, #4]
 800c702:	7c12      	ldrb	r2, [r2, #16]
 800c704:	f107 0108 	add.w	r1, r7, #8
 800c708:	4610      	mov	r0, r2
 800c70a:	4798      	blx	r3
 800c70c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c70e:	e077      	b.n	800c800 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c710:	6839      	ldr	r1, [r7, #0]
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f000 fab1 	bl	800cc7a <USBD_CtlError>
            err++;
 800c718:	7afb      	ldrb	r3, [r7, #11]
 800c71a:	3301      	adds	r3, #1
 800c71c:	72fb      	strb	r3, [r7, #11]
          break;
 800c71e:	e06f      	b.n	800c800 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c726:	68db      	ldr	r3, [r3, #12]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d00b      	beq.n	800c744 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c732:	68db      	ldr	r3, [r3, #12]
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	7c12      	ldrb	r2, [r2, #16]
 800c738:	f107 0108 	add.w	r1, r7, #8
 800c73c:	4610      	mov	r0, r2
 800c73e:	4798      	blx	r3
 800c740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c742:	e05d      	b.n	800c800 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c744:	6839      	ldr	r1, [r7, #0]
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 fa97 	bl	800cc7a <USBD_CtlError>
            err++;
 800c74c:	7afb      	ldrb	r3, [r7, #11]
 800c74e:	3301      	adds	r3, #1
 800c750:	72fb      	strb	r3, [r7, #11]
          break;
 800c752:	e055      	b.n	800c800 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c75a:	691b      	ldr	r3, [r3, #16]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d00b      	beq.n	800c778 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c766:	691b      	ldr	r3, [r3, #16]
 800c768:	687a      	ldr	r2, [r7, #4]
 800c76a:	7c12      	ldrb	r2, [r2, #16]
 800c76c:	f107 0108 	add.w	r1, r7, #8
 800c770:	4610      	mov	r0, r2
 800c772:	4798      	blx	r3
 800c774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c776:	e043      	b.n	800c800 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c778:	6839      	ldr	r1, [r7, #0]
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 fa7d 	bl	800cc7a <USBD_CtlError>
            err++;
 800c780:	7afb      	ldrb	r3, [r7, #11]
 800c782:	3301      	adds	r3, #1
 800c784:	72fb      	strb	r3, [r7, #11]
          break;
 800c786:	e03b      	b.n	800c800 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c78e:	695b      	ldr	r3, [r3, #20]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d00b      	beq.n	800c7ac <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c79a:	695b      	ldr	r3, [r3, #20]
 800c79c:	687a      	ldr	r2, [r7, #4]
 800c79e:	7c12      	ldrb	r2, [r2, #16]
 800c7a0:	f107 0108 	add.w	r1, r7, #8
 800c7a4:	4610      	mov	r0, r2
 800c7a6:	4798      	blx	r3
 800c7a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7aa:	e029      	b.n	800c800 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c7ac:	6839      	ldr	r1, [r7, #0]
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f000 fa63 	bl	800cc7a <USBD_CtlError>
            err++;
 800c7b4:	7afb      	ldrb	r3, [r7, #11]
 800c7b6:	3301      	adds	r3, #1
 800c7b8:	72fb      	strb	r3, [r7, #11]
          break;
 800c7ba:	e021      	b.n	800c800 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7c2:	699b      	ldr	r3, [r3, #24]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d00b      	beq.n	800c7e0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7ce:	699b      	ldr	r3, [r3, #24]
 800c7d0:	687a      	ldr	r2, [r7, #4]
 800c7d2:	7c12      	ldrb	r2, [r2, #16]
 800c7d4:	f107 0108 	add.w	r1, r7, #8
 800c7d8:	4610      	mov	r0, r2
 800c7da:	4798      	blx	r3
 800c7dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7de:	e00f      	b.n	800c800 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c7e0:	6839      	ldr	r1, [r7, #0]
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f000 fa49 	bl	800cc7a <USBD_CtlError>
            err++;
 800c7e8:	7afb      	ldrb	r3, [r7, #11]
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	72fb      	strb	r3, [r7, #11]
          break;
 800c7ee:	e007      	b.n	800c800 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c7f0:	6839      	ldr	r1, [r7, #0]
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f000 fa41 	bl	800cc7a <USBD_CtlError>
          err++;
 800c7f8:	7afb      	ldrb	r3, [r7, #11]
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c7fe:	bf00      	nop
      }
      break;
 800c800:	e037      	b.n	800c872 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	7c1b      	ldrb	r3, [r3, #16]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d109      	bne.n	800c81e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c812:	f107 0208 	add.w	r2, r7, #8
 800c816:	4610      	mov	r0, r2
 800c818:	4798      	blx	r3
 800c81a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c81c:	e029      	b.n	800c872 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c81e:	6839      	ldr	r1, [r7, #0]
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f000 fa2a 	bl	800cc7a <USBD_CtlError>
        err++;
 800c826:	7afb      	ldrb	r3, [r7, #11]
 800c828:	3301      	adds	r3, #1
 800c82a:	72fb      	strb	r3, [r7, #11]
      break;
 800c82c:	e021      	b.n	800c872 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	7c1b      	ldrb	r3, [r3, #16]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d10d      	bne.n	800c852 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c83c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c83e:	f107 0208 	add.w	r2, r7, #8
 800c842:	4610      	mov	r0, r2
 800c844:	4798      	blx	r3
 800c846:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	3301      	adds	r3, #1
 800c84c:	2207      	movs	r2, #7
 800c84e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c850:	e00f      	b.n	800c872 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c852:	6839      	ldr	r1, [r7, #0]
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 fa10 	bl	800cc7a <USBD_CtlError>
        err++;
 800c85a:	7afb      	ldrb	r3, [r7, #11]
 800c85c:	3301      	adds	r3, #1
 800c85e:	72fb      	strb	r3, [r7, #11]
      break;
 800c860:	e007      	b.n	800c872 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c862:	6839      	ldr	r1, [r7, #0]
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f000 fa08 	bl	800cc7a <USBD_CtlError>
      err++;
 800c86a:	7afb      	ldrb	r3, [r7, #11]
 800c86c:	3301      	adds	r3, #1
 800c86e:	72fb      	strb	r3, [r7, #11]
      break;
 800c870:	bf00      	nop
  }

  if (err != 0U)
 800c872:	7afb      	ldrb	r3, [r7, #11]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d11e      	bne.n	800c8b6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	88db      	ldrh	r3, [r3, #6]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d016      	beq.n	800c8ae <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c880:	893b      	ldrh	r3, [r7, #8]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d00e      	beq.n	800c8a4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	88da      	ldrh	r2, [r3, #6]
 800c88a:	893b      	ldrh	r3, [r7, #8]
 800c88c:	4293      	cmp	r3, r2
 800c88e:	bf28      	it	cs
 800c890:	4613      	movcs	r3, r2
 800c892:	b29b      	uxth	r3, r3
 800c894:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c896:	893b      	ldrh	r3, [r7, #8]
 800c898:	461a      	mov	r2, r3
 800c89a:	68f9      	ldr	r1, [r7, #12]
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f000 fa69 	bl	800cd74 <USBD_CtlSendData>
 800c8a2:	e009      	b.n	800c8b8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c8a4:	6839      	ldr	r1, [r7, #0]
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f000 f9e7 	bl	800cc7a <USBD_CtlError>
 800c8ac:	e004      	b.n	800c8b8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 faba 	bl	800ce28 <USBD_CtlSendStatus>
 800c8b4:	e000      	b.n	800c8b8 <USBD_GetDescriptor+0x320>
    return;
 800c8b6:	bf00      	nop
  }
}
 800c8b8:	3710      	adds	r7, #16
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
 800c8be:	bf00      	nop

0800c8c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b084      	sub	sp, #16
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
 800c8c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	889b      	ldrh	r3, [r3, #4]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d131      	bne.n	800c936 <USBD_SetAddress+0x76>
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	88db      	ldrh	r3, [r3, #6]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d12d      	bne.n	800c936 <USBD_SetAddress+0x76>
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	885b      	ldrh	r3, [r3, #2]
 800c8de:	2b7f      	cmp	r3, #127	@ 0x7f
 800c8e0:	d829      	bhi.n	800c936 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	885b      	ldrh	r3, [r3, #2]
 800c8e6:	b2db      	uxtb	r3, r3
 800c8e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c8ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8f4:	b2db      	uxtb	r3, r3
 800c8f6:	2b03      	cmp	r3, #3
 800c8f8:	d104      	bne.n	800c904 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c8fa:	6839      	ldr	r1, [r7, #0]
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 f9bc 	bl	800cc7a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c902:	e01d      	b.n	800c940 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	7bfa      	ldrb	r2, [r7, #15]
 800c908:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c90c:	7bfb      	ldrb	r3, [r7, #15]
 800c90e:	4619      	mov	r1, r3
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f000 ff7b 	bl	800d80c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f000 fa86 	bl	800ce28 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c91c:	7bfb      	ldrb	r3, [r7, #15]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d004      	beq.n	800c92c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2202      	movs	r2, #2
 800c926:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c92a:	e009      	b.n	800c940 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2201      	movs	r2, #1
 800c930:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c934:	e004      	b.n	800c940 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c936:	6839      	ldr	r1, [r7, #0]
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f000 f99e 	bl	800cc7a <USBD_CtlError>
  }
}
 800c93e:	bf00      	nop
 800c940:	bf00      	nop
 800c942:	3710      	adds	r7, #16
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}

0800c948 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b084      	sub	sp, #16
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c952:	2300      	movs	r3, #0
 800c954:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	885b      	ldrh	r3, [r3, #2]
 800c95a:	b2da      	uxtb	r2, r3
 800c95c:	4b4e      	ldr	r3, [pc, #312]	@ (800ca98 <USBD_SetConfig+0x150>)
 800c95e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c960:	4b4d      	ldr	r3, [pc, #308]	@ (800ca98 <USBD_SetConfig+0x150>)
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	2b01      	cmp	r3, #1
 800c966:	d905      	bls.n	800c974 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c968:	6839      	ldr	r1, [r7, #0]
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f000 f985 	bl	800cc7a <USBD_CtlError>
    return USBD_FAIL;
 800c970:	2303      	movs	r3, #3
 800c972:	e08c      	b.n	800ca8e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	2b02      	cmp	r3, #2
 800c97e:	d002      	beq.n	800c986 <USBD_SetConfig+0x3e>
 800c980:	2b03      	cmp	r3, #3
 800c982:	d029      	beq.n	800c9d8 <USBD_SetConfig+0x90>
 800c984:	e075      	b.n	800ca72 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c986:	4b44      	ldr	r3, [pc, #272]	@ (800ca98 <USBD_SetConfig+0x150>)
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d020      	beq.n	800c9d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c98e:	4b42      	ldr	r3, [pc, #264]	@ (800ca98 <USBD_SetConfig+0x150>)
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	461a      	mov	r2, r3
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c998:	4b3f      	ldr	r3, [pc, #252]	@ (800ca98 <USBD_SetConfig+0x150>)
 800c99a:	781b      	ldrb	r3, [r3, #0]
 800c99c:	4619      	mov	r1, r3
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f7fe ffb9 	bl	800b916 <USBD_SetClassConfig>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c9a8:	7bfb      	ldrb	r3, [r7, #15]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d008      	beq.n	800c9c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c9ae:	6839      	ldr	r1, [r7, #0]
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f000 f962 	bl	800cc7a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2202      	movs	r2, #2
 800c9ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c9be:	e065      	b.n	800ca8c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f000 fa31 	bl	800ce28 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2203      	movs	r2, #3
 800c9ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c9ce:	e05d      	b.n	800ca8c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f000 fa29 	bl	800ce28 <USBD_CtlSendStatus>
      break;
 800c9d6:	e059      	b.n	800ca8c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c9d8:	4b2f      	ldr	r3, [pc, #188]	@ (800ca98 <USBD_SetConfig+0x150>)
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d112      	bne.n	800ca06 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2202      	movs	r2, #2
 800c9e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c9e8:	4b2b      	ldr	r3, [pc, #172]	@ (800ca98 <USBD_SetConfig+0x150>)
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c9f2:	4b29      	ldr	r3, [pc, #164]	@ (800ca98 <USBD_SetConfig+0x150>)
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f7fe ffa8 	bl	800b94e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f000 fa12 	bl	800ce28 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ca04:	e042      	b.n	800ca8c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ca06:	4b24      	ldr	r3, [pc, #144]	@ (800ca98 <USBD_SetConfig+0x150>)
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	685b      	ldr	r3, [r3, #4]
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d02a      	beq.n	800ca6a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	685b      	ldr	r3, [r3, #4]
 800ca18:	b2db      	uxtb	r3, r3
 800ca1a:	4619      	mov	r1, r3
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f7fe ff96 	bl	800b94e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ca22:	4b1d      	ldr	r3, [pc, #116]	@ (800ca98 <USBD_SetConfig+0x150>)
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	461a      	mov	r2, r3
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ca2c:	4b1a      	ldr	r3, [pc, #104]	@ (800ca98 <USBD_SetConfig+0x150>)
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	4619      	mov	r1, r3
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f7fe ff6f 	bl	800b916 <USBD_SetClassConfig>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ca3c:	7bfb      	ldrb	r3, [r7, #15]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d00f      	beq.n	800ca62 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ca42:	6839      	ldr	r1, [r7, #0]
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f000 f918 	bl	800cc7a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	685b      	ldr	r3, [r3, #4]
 800ca4e:	b2db      	uxtb	r3, r3
 800ca50:	4619      	mov	r1, r3
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f7fe ff7b 	bl	800b94e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2202      	movs	r2, #2
 800ca5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ca60:	e014      	b.n	800ca8c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f000 f9e0 	bl	800ce28 <USBD_CtlSendStatus>
      break;
 800ca68:	e010      	b.n	800ca8c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f000 f9dc 	bl	800ce28 <USBD_CtlSendStatus>
      break;
 800ca70:	e00c      	b.n	800ca8c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ca72:	6839      	ldr	r1, [r7, #0]
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f000 f900 	bl	800cc7a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ca7a:	4b07      	ldr	r3, [pc, #28]	@ (800ca98 <USBD_SetConfig+0x150>)
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	4619      	mov	r1, r3
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f7fe ff64 	bl	800b94e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ca86:	2303      	movs	r3, #3
 800ca88:	73fb      	strb	r3, [r7, #15]
      break;
 800ca8a:	bf00      	nop
  }

  return ret;
 800ca8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	3710      	adds	r7, #16
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}
 800ca96:	bf00      	nop
 800ca98:	200009c0 	.word	0x200009c0

0800ca9c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b082      	sub	sp, #8
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	88db      	ldrh	r3, [r3, #6]
 800caaa:	2b01      	cmp	r3, #1
 800caac:	d004      	beq.n	800cab8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800caae:	6839      	ldr	r1, [r7, #0]
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f000 f8e2 	bl	800cc7a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cab6:	e023      	b.n	800cb00 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cabe:	b2db      	uxtb	r3, r3
 800cac0:	2b02      	cmp	r3, #2
 800cac2:	dc02      	bgt.n	800caca <USBD_GetConfig+0x2e>
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	dc03      	bgt.n	800cad0 <USBD_GetConfig+0x34>
 800cac8:	e015      	b.n	800caf6 <USBD_GetConfig+0x5a>
 800caca:	2b03      	cmp	r3, #3
 800cacc:	d00b      	beq.n	800cae6 <USBD_GetConfig+0x4a>
 800cace:	e012      	b.n	800caf6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2200      	movs	r2, #0
 800cad4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	3308      	adds	r3, #8
 800cada:	2201      	movs	r2, #1
 800cadc:	4619      	mov	r1, r3
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f000 f948 	bl	800cd74 <USBD_CtlSendData>
        break;
 800cae4:	e00c      	b.n	800cb00 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	3304      	adds	r3, #4
 800caea:	2201      	movs	r2, #1
 800caec:	4619      	mov	r1, r3
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f000 f940 	bl	800cd74 <USBD_CtlSendData>
        break;
 800caf4:	e004      	b.n	800cb00 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800caf6:	6839      	ldr	r1, [r7, #0]
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f000 f8be 	bl	800cc7a <USBD_CtlError>
        break;
 800cafe:	bf00      	nop
}
 800cb00:	bf00      	nop
 800cb02:	3708      	adds	r7, #8
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b082      	sub	sp, #8
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	3b01      	subs	r3, #1
 800cb1c:	2b02      	cmp	r3, #2
 800cb1e:	d81e      	bhi.n	800cb5e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	88db      	ldrh	r3, [r3, #6]
 800cb24:	2b02      	cmp	r3, #2
 800cb26:	d004      	beq.n	800cb32 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cb28:	6839      	ldr	r1, [r7, #0]
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 f8a5 	bl	800cc7a <USBD_CtlError>
        break;
 800cb30:	e01a      	b.n	800cb68 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2201      	movs	r2, #1
 800cb36:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d005      	beq.n	800cb4e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	68db      	ldr	r3, [r3, #12]
 800cb46:	f043 0202 	orr.w	r2, r3, #2
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	330c      	adds	r3, #12
 800cb52:	2202      	movs	r2, #2
 800cb54:	4619      	mov	r1, r3
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f000 f90c 	bl	800cd74 <USBD_CtlSendData>
      break;
 800cb5c:	e004      	b.n	800cb68 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cb5e:	6839      	ldr	r1, [r7, #0]
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f000 f88a 	bl	800cc7a <USBD_CtlError>
      break;
 800cb66:	bf00      	nop
  }
}
 800cb68:	bf00      	nop
 800cb6a:	3708      	adds	r7, #8
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	885b      	ldrh	r3, [r3, #2]
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d107      	bne.n	800cb92 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2201      	movs	r2, #1
 800cb86:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f000 f94c 	bl	800ce28 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cb90:	e013      	b.n	800cbba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	885b      	ldrh	r3, [r3, #2]
 800cb96:	2b02      	cmp	r3, #2
 800cb98:	d10b      	bne.n	800cbb2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	889b      	ldrh	r3, [r3, #4]
 800cb9e:	0a1b      	lsrs	r3, r3, #8
 800cba0:	b29b      	uxth	r3, r3
 800cba2:	b2da      	uxtb	r2, r3
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f000 f93c 	bl	800ce28 <USBD_CtlSendStatus>
}
 800cbb0:	e003      	b.n	800cbba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cbb2:	6839      	ldr	r1, [r7, #0]
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f000 f860 	bl	800cc7a <USBD_CtlError>
}
 800cbba:	bf00      	nop
 800cbbc:	3708      	adds	r7, #8
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}

0800cbc2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbc2:	b580      	push	{r7, lr}
 800cbc4:	b082      	sub	sp, #8
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	6078      	str	r0, [r7, #4]
 800cbca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbd2:	b2db      	uxtb	r3, r3
 800cbd4:	3b01      	subs	r3, #1
 800cbd6:	2b02      	cmp	r3, #2
 800cbd8:	d80b      	bhi.n	800cbf2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	885b      	ldrh	r3, [r3, #2]
 800cbde:	2b01      	cmp	r3, #1
 800cbe0:	d10c      	bne.n	800cbfc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f000 f91c 	bl	800ce28 <USBD_CtlSendStatus>
      }
      break;
 800cbf0:	e004      	b.n	800cbfc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cbf2:	6839      	ldr	r1, [r7, #0]
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f000 f840 	bl	800cc7a <USBD_CtlError>
      break;
 800cbfa:	e000      	b.n	800cbfe <USBD_ClrFeature+0x3c>
      break;
 800cbfc:	bf00      	nop
  }
}
 800cbfe:	bf00      	nop
 800cc00:	3708      	adds	r7, #8
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}

0800cc06 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cc06:	b580      	push	{r7, lr}
 800cc08:	b084      	sub	sp, #16
 800cc0a:	af00      	add	r7, sp, #0
 800cc0c:	6078      	str	r0, [r7, #4]
 800cc0e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	781a      	ldrb	r2, [r3, #0]
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	3301      	adds	r3, #1
 800cc20:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	781a      	ldrb	r2, [r3, #0]
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cc30:	68f8      	ldr	r0, [r7, #12]
 800cc32:	f7ff fa16 	bl	800c062 <SWAPBYTE>
 800cc36:	4603      	mov	r3, r0
 800cc38:	461a      	mov	r2, r3
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	3301      	adds	r3, #1
 800cc42:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	3301      	adds	r3, #1
 800cc48:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cc4a:	68f8      	ldr	r0, [r7, #12]
 800cc4c:	f7ff fa09 	bl	800c062 <SWAPBYTE>
 800cc50:	4603      	mov	r3, r0
 800cc52:	461a      	mov	r2, r3
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	3301      	adds	r3, #1
 800cc5c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	3301      	adds	r3, #1
 800cc62:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cc64:	68f8      	ldr	r0, [r7, #12]
 800cc66:	f7ff f9fc 	bl	800c062 <SWAPBYTE>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	461a      	mov	r2, r3
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	80da      	strh	r2, [r3, #6]
}
 800cc72:	bf00      	nop
 800cc74:	3710      	adds	r7, #16
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}

0800cc7a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc7a:	b580      	push	{r7, lr}
 800cc7c:	b082      	sub	sp, #8
 800cc7e:	af00      	add	r7, sp, #0
 800cc80:	6078      	str	r0, [r7, #4]
 800cc82:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc84:	2180      	movs	r1, #128	@ 0x80
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f000 fd56 	bl	800d738 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cc8c:	2100      	movs	r1, #0
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f000 fd52 	bl	800d738 <USBD_LL_StallEP>
}
 800cc94:	bf00      	nop
 800cc96:	3708      	adds	r7, #8
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}

0800cc9c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b086      	sub	sp, #24
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	60f8      	str	r0, [r7, #12]
 800cca4:	60b9      	str	r1, [r7, #8]
 800cca6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d042      	beq.n	800cd38 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ccb6:	6938      	ldr	r0, [r7, #16]
 800ccb8:	f000 f842 	bl	800cd40 <USBD_GetLen>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	005b      	lsls	r3, r3, #1
 800ccc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ccc6:	d808      	bhi.n	800ccda <USBD_GetString+0x3e>
 800ccc8:	6938      	ldr	r0, [r7, #16]
 800ccca:	f000 f839 	bl	800cd40 <USBD_GetLen>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	3301      	adds	r3, #1
 800ccd2:	b29b      	uxth	r3, r3
 800ccd4:	005b      	lsls	r3, r3, #1
 800ccd6:	b29a      	uxth	r2, r3
 800ccd8:	e001      	b.n	800ccde <USBD_GetString+0x42>
 800ccda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cce2:	7dfb      	ldrb	r3, [r7, #23]
 800cce4:	68ba      	ldr	r2, [r7, #8]
 800cce6:	4413      	add	r3, r2
 800cce8:	687a      	ldr	r2, [r7, #4]
 800ccea:	7812      	ldrb	r2, [r2, #0]
 800ccec:	701a      	strb	r2, [r3, #0]
  idx++;
 800ccee:	7dfb      	ldrb	r3, [r7, #23]
 800ccf0:	3301      	adds	r3, #1
 800ccf2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ccf4:	7dfb      	ldrb	r3, [r7, #23]
 800ccf6:	68ba      	ldr	r2, [r7, #8]
 800ccf8:	4413      	add	r3, r2
 800ccfa:	2203      	movs	r2, #3
 800ccfc:	701a      	strb	r2, [r3, #0]
  idx++;
 800ccfe:	7dfb      	ldrb	r3, [r7, #23]
 800cd00:	3301      	adds	r3, #1
 800cd02:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cd04:	e013      	b.n	800cd2e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800cd06:	7dfb      	ldrb	r3, [r7, #23]
 800cd08:	68ba      	ldr	r2, [r7, #8]
 800cd0a:	4413      	add	r3, r2
 800cd0c:	693a      	ldr	r2, [r7, #16]
 800cd0e:	7812      	ldrb	r2, [r2, #0]
 800cd10:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	3301      	adds	r3, #1
 800cd16:	613b      	str	r3, [r7, #16]
    idx++;
 800cd18:	7dfb      	ldrb	r3, [r7, #23]
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cd1e:	7dfb      	ldrb	r3, [r7, #23]
 800cd20:	68ba      	ldr	r2, [r7, #8]
 800cd22:	4413      	add	r3, r2
 800cd24:	2200      	movs	r2, #0
 800cd26:	701a      	strb	r2, [r3, #0]
    idx++;
 800cd28:	7dfb      	ldrb	r3, [r7, #23]
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d1e7      	bne.n	800cd06 <USBD_GetString+0x6a>
 800cd36:	e000      	b.n	800cd3a <USBD_GetString+0x9e>
    return;
 800cd38:	bf00      	nop
  }
}
 800cd3a:	3718      	adds	r7, #24
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cd40:	b480      	push	{r7}
 800cd42:	b085      	sub	sp, #20
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cd50:	e005      	b.n	800cd5e <USBD_GetLen+0x1e>
  {
    len++;
 800cd52:	7bfb      	ldrb	r3, [r7, #15]
 800cd54:	3301      	adds	r3, #1
 800cd56:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	3301      	adds	r3, #1
 800cd5c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d1f5      	bne.n	800cd52 <USBD_GetLen+0x12>
  }

  return len;
 800cd66:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3714      	adds	r7, #20
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd72:	4770      	bx	lr

0800cd74 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b084      	sub	sp, #16
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	60f8      	str	r0, [r7, #12]
 800cd7c:	60b9      	str	r1, [r7, #8]
 800cd7e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	2202      	movs	r2, #2
 800cd84:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	687a      	ldr	r2, [r7, #4]
 800cd8c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	687a      	ldr	r2, [r7, #4]
 800cd92:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	68ba      	ldr	r2, [r7, #8]
 800cd98:	2100      	movs	r1, #0
 800cd9a:	68f8      	ldr	r0, [r7, #12]
 800cd9c:	f000 fd55 	bl	800d84a <USBD_LL_Transmit>

  return USBD_OK;
 800cda0:	2300      	movs	r3, #0
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3710      	adds	r7, #16
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}

0800cdaa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cdaa:	b580      	push	{r7, lr}
 800cdac:	b084      	sub	sp, #16
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	60f8      	str	r0, [r7, #12]
 800cdb2:	60b9      	str	r1, [r7, #8]
 800cdb4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	68ba      	ldr	r2, [r7, #8]
 800cdba:	2100      	movs	r1, #0
 800cdbc:	68f8      	ldr	r0, [r7, #12]
 800cdbe:	f000 fd44 	bl	800d84a <USBD_LL_Transmit>

  return USBD_OK;
 800cdc2:	2300      	movs	r3, #0
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3710      	adds	r7, #16
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}

0800cdcc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	60b9      	str	r1, [r7, #8]
 800cdd6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	2203      	movs	r2, #3
 800cddc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	687a      	ldr	r2, [r7, #4]
 800cde4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	687a      	ldr	r2, [r7, #4]
 800cdec:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	68ba      	ldr	r2, [r7, #8]
 800cdf4:	2100      	movs	r1, #0
 800cdf6:	68f8      	ldr	r0, [r7, #12]
 800cdf8:	f000 fd48 	bl	800d88c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cdfc:	2300      	movs	r3, #0
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3710      	adds	r7, #16
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}

0800ce06 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ce06:	b580      	push	{r7, lr}
 800ce08:	b084      	sub	sp, #16
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	60f8      	str	r0, [r7, #12]
 800ce0e:	60b9      	str	r1, [r7, #8]
 800ce10:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	68ba      	ldr	r2, [r7, #8]
 800ce16:	2100      	movs	r1, #0
 800ce18:	68f8      	ldr	r0, [r7, #12]
 800ce1a:	f000 fd37 	bl	800d88c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce1e:	2300      	movs	r3, #0
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3710      	adds	r7, #16
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}

0800ce28 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b082      	sub	sp, #8
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2204      	movs	r2, #4
 800ce34:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ce38:	2300      	movs	r3, #0
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	2100      	movs	r1, #0
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f000 fd03 	bl	800d84a <USBD_LL_Transmit>

  return USBD_OK;
 800ce44:	2300      	movs	r3, #0
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3708      	adds	r7, #8
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}

0800ce4e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ce4e:	b580      	push	{r7, lr}
 800ce50:	b082      	sub	sp, #8
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2205      	movs	r2, #5
 800ce5a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ce5e:	2300      	movs	r3, #0
 800ce60:	2200      	movs	r2, #0
 800ce62:	2100      	movs	r1, #0
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f000 fd11 	bl	800d88c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce6a:	2300      	movs	r3, #0
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3708      	adds	r7, #8
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}

0800ce74 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ce74:	b480      	push	{r7}
 800ce76:	b087      	sub	sp, #28
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	60b9      	str	r1, [r7, #8]
 800ce7e:	4613      	mov	r3, r2
 800ce80:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ce82:	2301      	movs	r3, #1
 800ce84:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ce86:	2300      	movs	r3, #0
 800ce88:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ce8a:	4b1f      	ldr	r3, [pc, #124]	@ (800cf08 <FATFS_LinkDriverEx+0x94>)
 800ce8c:	7a5b      	ldrb	r3, [r3, #9]
 800ce8e:	b2db      	uxtb	r3, r3
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d131      	bne.n	800cef8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ce94:	4b1c      	ldr	r3, [pc, #112]	@ (800cf08 <FATFS_LinkDriverEx+0x94>)
 800ce96:	7a5b      	ldrb	r3, [r3, #9]
 800ce98:	b2db      	uxtb	r3, r3
 800ce9a:	461a      	mov	r2, r3
 800ce9c:	4b1a      	ldr	r3, [pc, #104]	@ (800cf08 <FATFS_LinkDriverEx+0x94>)
 800ce9e:	2100      	movs	r1, #0
 800cea0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cea2:	4b19      	ldr	r3, [pc, #100]	@ (800cf08 <FATFS_LinkDriverEx+0x94>)
 800cea4:	7a5b      	ldrb	r3, [r3, #9]
 800cea6:	b2db      	uxtb	r3, r3
 800cea8:	4a17      	ldr	r2, [pc, #92]	@ (800cf08 <FATFS_LinkDriverEx+0x94>)
 800ceaa:	009b      	lsls	r3, r3, #2
 800ceac:	4413      	add	r3, r2
 800ceae:	68fa      	ldr	r2, [r7, #12]
 800ceb0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ceb2:	4b15      	ldr	r3, [pc, #84]	@ (800cf08 <FATFS_LinkDriverEx+0x94>)
 800ceb4:	7a5b      	ldrb	r3, [r3, #9]
 800ceb6:	b2db      	uxtb	r3, r3
 800ceb8:	461a      	mov	r2, r3
 800ceba:	4b13      	ldr	r3, [pc, #76]	@ (800cf08 <FATFS_LinkDriverEx+0x94>)
 800cebc:	4413      	add	r3, r2
 800cebe:	79fa      	ldrb	r2, [r7, #7]
 800cec0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cec2:	4b11      	ldr	r3, [pc, #68]	@ (800cf08 <FATFS_LinkDriverEx+0x94>)
 800cec4:	7a5b      	ldrb	r3, [r3, #9]
 800cec6:	b2db      	uxtb	r3, r3
 800cec8:	1c5a      	adds	r2, r3, #1
 800ceca:	b2d1      	uxtb	r1, r2
 800cecc:	4a0e      	ldr	r2, [pc, #56]	@ (800cf08 <FATFS_LinkDriverEx+0x94>)
 800cece:	7251      	strb	r1, [r2, #9]
 800ced0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ced2:	7dbb      	ldrb	r3, [r7, #22]
 800ced4:	3330      	adds	r3, #48	@ 0x30
 800ced6:	b2da      	uxtb	r2, r3
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	3301      	adds	r3, #1
 800cee0:	223a      	movs	r2, #58	@ 0x3a
 800cee2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	3302      	adds	r3, #2
 800cee8:	222f      	movs	r2, #47	@ 0x2f
 800ceea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	3303      	adds	r3, #3
 800cef0:	2200      	movs	r2, #0
 800cef2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cef4:	2300      	movs	r3, #0
 800cef6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cef8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	371c      	adds	r7, #28
 800cefe:	46bd      	mov	sp, r7
 800cf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf04:	4770      	bx	lr
 800cf06:	bf00      	nop
 800cf08:	200009c4 	.word	0x200009c4

0800cf0c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b082      	sub	sp, #8
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
 800cf14:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cf16:	2200      	movs	r2, #0
 800cf18:	6839      	ldr	r1, [r7, #0]
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f7ff ffaa 	bl	800ce74 <FATFS_LinkDriverEx>
 800cf20:	4603      	mov	r3, r0
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3708      	adds	r7, #8
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
	...

0800cf2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cf30:	2200      	movs	r2, #0
 800cf32:	4912      	ldr	r1, [pc, #72]	@ (800cf7c <MX_USB_DEVICE_Init+0x50>)
 800cf34:	4812      	ldr	r0, [pc, #72]	@ (800cf80 <MX_USB_DEVICE_Init+0x54>)
 800cf36:	f7fe fc71 	bl	800b81c <USBD_Init>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d001      	beq.n	800cf44 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cf40:	f7f4 f9cc 	bl	80012dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cf44:	490f      	ldr	r1, [pc, #60]	@ (800cf84 <MX_USB_DEVICE_Init+0x58>)
 800cf46:	480e      	ldr	r0, [pc, #56]	@ (800cf80 <MX_USB_DEVICE_Init+0x54>)
 800cf48:	f7fe fc98 	bl	800b87c <USBD_RegisterClass>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d001      	beq.n	800cf56 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cf52:	f7f4 f9c3 	bl	80012dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cf56:	490c      	ldr	r1, [pc, #48]	@ (800cf88 <MX_USB_DEVICE_Init+0x5c>)
 800cf58:	4809      	ldr	r0, [pc, #36]	@ (800cf80 <MX_USB_DEVICE_Init+0x54>)
 800cf5a:	f7fe fbcf 	bl	800b6fc <USBD_CDC_RegisterInterface>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d001      	beq.n	800cf68 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cf64:	f7f4 f9ba 	bl	80012dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cf68:	4805      	ldr	r0, [pc, #20]	@ (800cf80 <MX_USB_DEVICE_Init+0x54>)
 800cf6a:	f7fe fcbd 	bl	800b8e8 <USBD_Start>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d001      	beq.n	800cf78 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cf74:	f7f4 f9b2 	bl	80012dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cf78:	bf00      	nop
 800cf7a:	bd80      	pop	{r7, pc}
 800cf7c:	200000ac 	.word	0x200000ac
 800cf80:	200009d0 	.word	0x200009d0
 800cf84:	20000018 	.word	0x20000018
 800cf88:	20000098 	.word	0x20000098

0800cf8c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cf90:	2200      	movs	r2, #0
 800cf92:	4905      	ldr	r1, [pc, #20]	@ (800cfa8 <CDC_Init_FS+0x1c>)
 800cf94:	4805      	ldr	r0, [pc, #20]	@ (800cfac <CDC_Init_FS+0x20>)
 800cf96:	f7fe fbcb 	bl	800b730 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cf9a:	4905      	ldr	r1, [pc, #20]	@ (800cfb0 <CDC_Init_FS+0x24>)
 800cf9c:	4803      	ldr	r0, [pc, #12]	@ (800cfac <CDC_Init_FS+0x20>)
 800cf9e:	f7fe fbe9 	bl	800b774 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cfa2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	bd80      	pop	{r7, pc}
 800cfa8:	200014ac 	.word	0x200014ac
 800cfac:	200009d0 	.word	0x200009d0
 800cfb0:	20000cac 	.word	0x20000cac

0800cfb4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cfb8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr

0800cfc4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b083      	sub	sp, #12
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	4603      	mov	r3, r0
 800cfcc:	6039      	str	r1, [r7, #0]
 800cfce:	71fb      	strb	r3, [r7, #7]
 800cfd0:	4613      	mov	r3, r2
 800cfd2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cfd4:	79fb      	ldrb	r3, [r7, #7]
 800cfd6:	2b23      	cmp	r3, #35	@ 0x23
 800cfd8:	d84a      	bhi.n	800d070 <CDC_Control_FS+0xac>
 800cfda:	a201      	add	r2, pc, #4	@ (adr r2, 800cfe0 <CDC_Control_FS+0x1c>)
 800cfdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfe0:	0800d071 	.word	0x0800d071
 800cfe4:	0800d071 	.word	0x0800d071
 800cfe8:	0800d071 	.word	0x0800d071
 800cfec:	0800d071 	.word	0x0800d071
 800cff0:	0800d071 	.word	0x0800d071
 800cff4:	0800d071 	.word	0x0800d071
 800cff8:	0800d071 	.word	0x0800d071
 800cffc:	0800d071 	.word	0x0800d071
 800d000:	0800d071 	.word	0x0800d071
 800d004:	0800d071 	.word	0x0800d071
 800d008:	0800d071 	.word	0x0800d071
 800d00c:	0800d071 	.word	0x0800d071
 800d010:	0800d071 	.word	0x0800d071
 800d014:	0800d071 	.word	0x0800d071
 800d018:	0800d071 	.word	0x0800d071
 800d01c:	0800d071 	.word	0x0800d071
 800d020:	0800d071 	.word	0x0800d071
 800d024:	0800d071 	.word	0x0800d071
 800d028:	0800d071 	.word	0x0800d071
 800d02c:	0800d071 	.word	0x0800d071
 800d030:	0800d071 	.word	0x0800d071
 800d034:	0800d071 	.word	0x0800d071
 800d038:	0800d071 	.word	0x0800d071
 800d03c:	0800d071 	.word	0x0800d071
 800d040:	0800d071 	.word	0x0800d071
 800d044:	0800d071 	.word	0x0800d071
 800d048:	0800d071 	.word	0x0800d071
 800d04c:	0800d071 	.word	0x0800d071
 800d050:	0800d071 	.word	0x0800d071
 800d054:	0800d071 	.word	0x0800d071
 800d058:	0800d071 	.word	0x0800d071
 800d05c:	0800d071 	.word	0x0800d071
 800d060:	0800d071 	.word	0x0800d071
 800d064:	0800d071 	.word	0x0800d071
 800d068:	0800d071 	.word	0x0800d071
 800d06c:	0800d071 	.word	0x0800d071
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d070:	bf00      	nop
  }

  return (USBD_OK);
 800d072:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d074:	4618      	mov	r0, r3
 800d076:	370c      	adds	r7, #12
 800d078:	46bd      	mov	sp, r7
 800d07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07e:	4770      	bx	lr

0800d080 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b082      	sub	sp, #8
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d08a:	6879      	ldr	r1, [r7, #4]
 800d08c:	4805      	ldr	r0, [pc, #20]	@ (800d0a4 <CDC_Receive_FS+0x24>)
 800d08e:	f7fe fb71 	bl	800b774 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d092:	4804      	ldr	r0, [pc, #16]	@ (800d0a4 <CDC_Receive_FS+0x24>)
 800d094:	f7fe fb8c 	bl	800b7b0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d098:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3708      	adds	r7, #8
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}
 800d0a2:	bf00      	nop
 800d0a4:	200009d0 	.word	0x200009d0

0800d0a8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	b087      	sub	sp, #28
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	60f8      	str	r0, [r7, #12]
 800d0b0:	60b9      	str	r1, [r7, #8]
 800d0b2:	4613      	mov	r3, r2
 800d0b4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d0ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	371c      	adds	r7, #28
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c8:	4770      	bx	lr
	...

0800d0cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b083      	sub	sp, #12
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	6039      	str	r1, [r7, #0]
 800d0d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	2212      	movs	r2, #18
 800d0dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d0de:	4b03      	ldr	r3, [pc, #12]	@ (800d0ec <USBD_FS_DeviceDescriptor+0x20>)
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	370c      	adds	r7, #12
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ea:	4770      	bx	lr
 800d0ec:	200000cc 	.word	0x200000cc

0800d0f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0f0:	b480      	push	{r7}
 800d0f2:	b083      	sub	sp, #12
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	6039      	str	r1, [r7, #0]
 800d0fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	2204      	movs	r2, #4
 800d100:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d102:	4b03      	ldr	r3, [pc, #12]	@ (800d110 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d104:	4618      	mov	r0, r3
 800d106:	370c      	adds	r7, #12
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr
 800d110:	200000ec 	.word	0x200000ec

0800d114 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b082      	sub	sp, #8
 800d118:	af00      	add	r7, sp, #0
 800d11a:	4603      	mov	r3, r0
 800d11c:	6039      	str	r1, [r7, #0]
 800d11e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d120:	79fb      	ldrb	r3, [r7, #7]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d105      	bne.n	800d132 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d126:	683a      	ldr	r2, [r7, #0]
 800d128:	4907      	ldr	r1, [pc, #28]	@ (800d148 <USBD_FS_ProductStrDescriptor+0x34>)
 800d12a:	4808      	ldr	r0, [pc, #32]	@ (800d14c <USBD_FS_ProductStrDescriptor+0x38>)
 800d12c:	f7ff fdb6 	bl	800cc9c <USBD_GetString>
 800d130:	e004      	b.n	800d13c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d132:	683a      	ldr	r2, [r7, #0]
 800d134:	4904      	ldr	r1, [pc, #16]	@ (800d148 <USBD_FS_ProductStrDescriptor+0x34>)
 800d136:	4805      	ldr	r0, [pc, #20]	@ (800d14c <USBD_FS_ProductStrDescriptor+0x38>)
 800d138:	f7ff fdb0 	bl	800cc9c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d13c:	4b02      	ldr	r3, [pc, #8]	@ (800d148 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3708      	adds	r7, #8
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}
 800d146:	bf00      	nop
 800d148:	20001cac 	.word	0x20001cac
 800d14c:	0800e898 	.word	0x0800e898

0800d150 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b082      	sub	sp, #8
 800d154:	af00      	add	r7, sp, #0
 800d156:	4603      	mov	r3, r0
 800d158:	6039      	str	r1, [r7, #0]
 800d15a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d15c:	683a      	ldr	r2, [r7, #0]
 800d15e:	4904      	ldr	r1, [pc, #16]	@ (800d170 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d160:	4804      	ldr	r0, [pc, #16]	@ (800d174 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d162:	f7ff fd9b 	bl	800cc9c <USBD_GetString>
  return USBD_StrDesc;
 800d166:	4b02      	ldr	r3, [pc, #8]	@ (800d170 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3708      	adds	r7, #8
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}
 800d170:	20001cac 	.word	0x20001cac
 800d174:	0800e8b0 	.word	0x0800e8b0

0800d178 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b082      	sub	sp, #8
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	4603      	mov	r3, r0
 800d180:	6039      	str	r1, [r7, #0]
 800d182:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	221a      	movs	r2, #26
 800d188:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d18a:	f000 f855 	bl	800d238 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d18e:	4b02      	ldr	r3, [pc, #8]	@ (800d198 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d190:	4618      	mov	r0, r3
 800d192:	3708      	adds	r7, #8
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}
 800d198:	200000f0 	.word	0x200000f0

0800d19c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b082      	sub	sp, #8
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	6039      	str	r1, [r7, #0]
 800d1a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d1a8:	79fb      	ldrb	r3, [r7, #7]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d105      	bne.n	800d1ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d1ae:	683a      	ldr	r2, [r7, #0]
 800d1b0:	4907      	ldr	r1, [pc, #28]	@ (800d1d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d1b2:	4808      	ldr	r0, [pc, #32]	@ (800d1d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d1b4:	f7ff fd72 	bl	800cc9c <USBD_GetString>
 800d1b8:	e004      	b.n	800d1c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d1ba:	683a      	ldr	r2, [r7, #0]
 800d1bc:	4904      	ldr	r1, [pc, #16]	@ (800d1d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d1be:	4805      	ldr	r0, [pc, #20]	@ (800d1d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d1c0:	f7ff fd6c 	bl	800cc9c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d1c4:	4b02      	ldr	r3, [pc, #8]	@ (800d1d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3708      	adds	r7, #8
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
 800d1ce:	bf00      	nop
 800d1d0:	20001cac 	.word	0x20001cac
 800d1d4:	0800e8c4 	.word	0x0800e8c4

0800d1d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b082      	sub	sp, #8
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	4603      	mov	r3, r0
 800d1e0:	6039      	str	r1, [r7, #0]
 800d1e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d1e4:	79fb      	ldrb	r3, [r7, #7]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d105      	bne.n	800d1f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d1ea:	683a      	ldr	r2, [r7, #0]
 800d1ec:	4907      	ldr	r1, [pc, #28]	@ (800d20c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d1ee:	4808      	ldr	r0, [pc, #32]	@ (800d210 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d1f0:	f7ff fd54 	bl	800cc9c <USBD_GetString>
 800d1f4:	e004      	b.n	800d200 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d1f6:	683a      	ldr	r2, [r7, #0]
 800d1f8:	4904      	ldr	r1, [pc, #16]	@ (800d20c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d1fa:	4805      	ldr	r0, [pc, #20]	@ (800d210 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d1fc:	f7ff fd4e 	bl	800cc9c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d200:	4b02      	ldr	r3, [pc, #8]	@ (800d20c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d202:	4618      	mov	r0, r3
 800d204:	3708      	adds	r7, #8
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}
 800d20a:	bf00      	nop
 800d20c:	20001cac 	.word	0x20001cac
 800d210:	0800e8d0 	.word	0x0800e8d0

0800d214 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d214:	b480      	push	{r7}
 800d216:	b083      	sub	sp, #12
 800d218:	af00      	add	r7, sp, #0
 800d21a:	4603      	mov	r3, r0
 800d21c:	6039      	str	r1, [r7, #0]
 800d21e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	220c      	movs	r2, #12
 800d224:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d226:	4b03      	ldr	r3, [pc, #12]	@ (800d234 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d228:	4618      	mov	r0, r3
 800d22a:	370c      	adds	r7, #12
 800d22c:	46bd      	mov	sp, r7
 800d22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d232:	4770      	bx	lr
 800d234:	200000e0 	.word	0x200000e0

0800d238 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b084      	sub	sp, #16
 800d23c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d23e:	4b0f      	ldr	r3, [pc, #60]	@ (800d27c <Get_SerialNum+0x44>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d244:	4b0e      	ldr	r3, [pc, #56]	@ (800d280 <Get_SerialNum+0x48>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d24a:	4b0e      	ldr	r3, [pc, #56]	@ (800d284 <Get_SerialNum+0x4c>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d250:	68fa      	ldr	r2, [r7, #12]
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	4413      	add	r3, r2
 800d256:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d009      	beq.n	800d272 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d25e:	2208      	movs	r2, #8
 800d260:	4909      	ldr	r1, [pc, #36]	@ (800d288 <Get_SerialNum+0x50>)
 800d262:	68f8      	ldr	r0, [r7, #12]
 800d264:	f000 f814 	bl	800d290 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d268:	2204      	movs	r2, #4
 800d26a:	4908      	ldr	r1, [pc, #32]	@ (800d28c <Get_SerialNum+0x54>)
 800d26c:	68b8      	ldr	r0, [r7, #8]
 800d26e:	f000 f80f 	bl	800d290 <IntToUnicode>
  }
}
 800d272:	bf00      	nop
 800d274:	3710      	adds	r7, #16
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
 800d27a:	bf00      	nop
 800d27c:	1ff07a10 	.word	0x1ff07a10
 800d280:	1ff07a14 	.word	0x1ff07a14
 800d284:	1ff07a18 	.word	0x1ff07a18
 800d288:	200000f2 	.word	0x200000f2
 800d28c:	20000102 	.word	0x20000102

0800d290 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d290:	b480      	push	{r7}
 800d292:	b087      	sub	sp, #28
 800d294:	af00      	add	r7, sp, #0
 800d296:	60f8      	str	r0, [r7, #12]
 800d298:	60b9      	str	r1, [r7, #8]
 800d29a:	4613      	mov	r3, r2
 800d29c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	75fb      	strb	r3, [r7, #23]
 800d2a6:	e027      	b.n	800d2f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	0f1b      	lsrs	r3, r3, #28
 800d2ac:	2b09      	cmp	r3, #9
 800d2ae:	d80b      	bhi.n	800d2c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	0f1b      	lsrs	r3, r3, #28
 800d2b4:	b2da      	uxtb	r2, r3
 800d2b6:	7dfb      	ldrb	r3, [r7, #23]
 800d2b8:	005b      	lsls	r3, r3, #1
 800d2ba:	4619      	mov	r1, r3
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	440b      	add	r3, r1
 800d2c0:	3230      	adds	r2, #48	@ 0x30
 800d2c2:	b2d2      	uxtb	r2, r2
 800d2c4:	701a      	strb	r2, [r3, #0]
 800d2c6:	e00a      	b.n	800d2de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	0f1b      	lsrs	r3, r3, #28
 800d2cc:	b2da      	uxtb	r2, r3
 800d2ce:	7dfb      	ldrb	r3, [r7, #23]
 800d2d0:	005b      	lsls	r3, r3, #1
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	440b      	add	r3, r1
 800d2d8:	3237      	adds	r2, #55	@ 0x37
 800d2da:	b2d2      	uxtb	r2, r2
 800d2dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	011b      	lsls	r3, r3, #4
 800d2e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d2e4:	7dfb      	ldrb	r3, [r7, #23]
 800d2e6:	005b      	lsls	r3, r3, #1
 800d2e8:	3301      	adds	r3, #1
 800d2ea:	68ba      	ldr	r2, [r7, #8]
 800d2ec:	4413      	add	r3, r2
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d2f2:	7dfb      	ldrb	r3, [r7, #23]
 800d2f4:	3301      	adds	r3, #1
 800d2f6:	75fb      	strb	r3, [r7, #23]
 800d2f8:	7dfa      	ldrb	r2, [r7, #23]
 800d2fa:	79fb      	ldrb	r3, [r7, #7]
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d3d3      	bcc.n	800d2a8 <IntToUnicode+0x18>
  }
}
 800d300:	bf00      	nop
 800d302:	bf00      	nop
 800d304:	371c      	adds	r7, #28
 800d306:	46bd      	mov	sp, r7
 800d308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30c:	4770      	bx	lr
	...

0800d310 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b0aa      	sub	sp, #168	@ 0xa8
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d318:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800d31c:	2200      	movs	r2, #0
 800d31e:	601a      	str	r2, [r3, #0]
 800d320:	605a      	str	r2, [r3, #4]
 800d322:	609a      	str	r2, [r3, #8]
 800d324:	60da      	str	r2, [r3, #12]
 800d326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d328:	f107 0314 	add.w	r3, r7, #20
 800d32c:	2280      	movs	r2, #128	@ 0x80
 800d32e:	2100      	movs	r1, #0
 800d330:	4618      	mov	r0, r3
 800d332:	f000 fd34 	bl	800dd9e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d33e:	d151      	bne.n	800d3e4 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800d340:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d344:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800d346:	2300      	movs	r3, #0
 800d348:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d34c:	f107 0314 	add.w	r3, r7, #20
 800d350:	4618      	mov	r0, r3
 800d352:	f7f8 f947 	bl	80055e4 <HAL_RCCEx_PeriphCLKConfig>
 800d356:	4603      	mov	r3, r0
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d001      	beq.n	800d360 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800d35c:	f7f3 ffbe 	bl	80012dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d360:	4b22      	ldr	r3, [pc, #136]	@ (800d3ec <HAL_PCD_MspInit+0xdc>)
 800d362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d364:	4a21      	ldr	r2, [pc, #132]	@ (800d3ec <HAL_PCD_MspInit+0xdc>)
 800d366:	f043 0301 	orr.w	r3, r3, #1
 800d36a:	6313      	str	r3, [r2, #48]	@ 0x30
 800d36c:	4b1f      	ldr	r3, [pc, #124]	@ (800d3ec <HAL_PCD_MspInit+0xdc>)
 800d36e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d370:	f003 0301 	and.w	r3, r3, #1
 800d374:	613b      	str	r3, [r7, #16]
 800d376:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d378:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d37c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d380:	2302      	movs	r3, #2
 800d382:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d386:	2300      	movs	r3, #0
 800d388:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d38c:	2303      	movs	r3, #3
 800d38e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d392:	230a      	movs	r3, #10
 800d394:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d398:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800d39c:	4619      	mov	r1, r3
 800d39e:	4814      	ldr	r0, [pc, #80]	@ (800d3f0 <HAL_PCD_MspInit+0xe0>)
 800d3a0:	f7f5 fe50 	bl	8003044 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d3a4:	4b11      	ldr	r3, [pc, #68]	@ (800d3ec <HAL_PCD_MspInit+0xdc>)
 800d3a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3a8:	4a10      	ldr	r2, [pc, #64]	@ (800d3ec <HAL_PCD_MspInit+0xdc>)
 800d3aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3ae:	6353      	str	r3, [r2, #52]	@ 0x34
 800d3b0:	4b0e      	ldr	r3, [pc, #56]	@ (800d3ec <HAL_PCD_MspInit+0xdc>)
 800d3b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3b8:	60fb      	str	r3, [r7, #12]
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	4b0b      	ldr	r3, [pc, #44]	@ (800d3ec <HAL_PCD_MspInit+0xdc>)
 800d3be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3c0:	4a0a      	ldr	r2, [pc, #40]	@ (800d3ec <HAL_PCD_MspInit+0xdc>)
 800d3c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d3c6:	6453      	str	r3, [r2, #68]	@ 0x44
 800d3c8:	4b08      	ldr	r3, [pc, #32]	@ (800d3ec <HAL_PCD_MspInit+0xdc>)
 800d3ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d3d0:	60bb      	str	r3, [r7, #8]
 800d3d2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	2100      	movs	r1, #0
 800d3d8:	2043      	movs	r0, #67	@ 0x43
 800d3da:	f7f5 fa0c 	bl	80027f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d3de:	2043      	movs	r0, #67	@ 0x43
 800d3e0:	f7f5 fa25 	bl	800282e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d3e4:	bf00      	nop
 800d3e6:	37a8      	adds	r7, #168	@ 0xa8
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}
 800d3ec:	40023800 	.word	0x40023800
 800d3f0:	40020000 	.word	0x40020000

0800d3f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b082      	sub	sp, #8
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d408:	4619      	mov	r1, r3
 800d40a:	4610      	mov	r0, r2
 800d40c:	f7fe fab9 	bl	800b982 <USBD_LL_SetupStage>
}
 800d410:	bf00      	nop
 800d412:	3708      	adds	r7, #8
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}

0800d418 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b082      	sub	sp, #8
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
 800d420:	460b      	mov	r3, r1
 800d422:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800d42a:	78fa      	ldrb	r2, [r7, #3]
 800d42c:	6879      	ldr	r1, [r7, #4]
 800d42e:	4613      	mov	r3, r2
 800d430:	00db      	lsls	r3, r3, #3
 800d432:	4413      	add	r3, r2
 800d434:	009b      	lsls	r3, r3, #2
 800d436:	440b      	add	r3, r1
 800d438:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d43c:	681a      	ldr	r2, [r3, #0]
 800d43e:	78fb      	ldrb	r3, [r7, #3]
 800d440:	4619      	mov	r1, r3
 800d442:	f7fe faf3 	bl	800ba2c <USBD_LL_DataOutStage>
}
 800d446:	bf00      	nop
 800d448:	3708      	adds	r7, #8
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}

0800d44e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d44e:	b580      	push	{r7, lr}
 800d450:	b082      	sub	sp, #8
 800d452:	af00      	add	r7, sp, #0
 800d454:	6078      	str	r0, [r7, #4]
 800d456:	460b      	mov	r3, r1
 800d458:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800d460:	78fa      	ldrb	r2, [r7, #3]
 800d462:	6879      	ldr	r1, [r7, #4]
 800d464:	4613      	mov	r3, r2
 800d466:	00db      	lsls	r3, r3, #3
 800d468:	4413      	add	r3, r2
 800d46a:	009b      	lsls	r3, r3, #2
 800d46c:	440b      	add	r3, r1
 800d46e:	3320      	adds	r3, #32
 800d470:	681a      	ldr	r2, [r3, #0]
 800d472:	78fb      	ldrb	r3, [r7, #3]
 800d474:	4619      	mov	r1, r3
 800d476:	f7fe fb8c 	bl	800bb92 <USBD_LL_DataInStage>
}
 800d47a:	bf00      	nop
 800d47c:	3708      	adds	r7, #8
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}

0800d482 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d482:	b580      	push	{r7, lr}
 800d484:	b082      	sub	sp, #8
 800d486:	af00      	add	r7, sp, #0
 800d488:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d490:	4618      	mov	r0, r3
 800d492:	f7fe fcc6 	bl	800be22 <USBD_LL_SOF>
}
 800d496:	bf00      	nop
 800d498:	3708      	adds	r7, #8
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}

0800d49e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d49e:	b580      	push	{r7, lr}
 800d4a0:	b084      	sub	sp, #16
 800d4a2:	af00      	add	r7, sp, #0
 800d4a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	79db      	ldrb	r3, [r3, #7]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d102      	bne.n	800d4b8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	73fb      	strb	r3, [r7, #15]
 800d4b6:	e008      	b.n	800d4ca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	79db      	ldrb	r3, [r3, #7]
 800d4bc:	2b02      	cmp	r3, #2
 800d4be:	d102      	bne.n	800d4c6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	73fb      	strb	r3, [r7, #15]
 800d4c4:	e001      	b.n	800d4ca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d4c6:	f7f3 ff09 	bl	80012dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d4d0:	7bfa      	ldrb	r2, [r7, #15]
 800d4d2:	4611      	mov	r1, r2
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f7fe fc60 	bl	800bd9a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f7fe fc08 	bl	800bcf6 <USBD_LL_Reset>
}
 800d4e6:	bf00      	nop
 800d4e8:	3710      	adds	r7, #16
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}
	...

0800d4f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b082      	sub	sp, #8
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7fe fc5b 	bl	800bdba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	687a      	ldr	r2, [r7, #4]
 800d510:	6812      	ldr	r2, [r2, #0]
 800d512:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d516:	f043 0301 	orr.w	r3, r3, #1
 800d51a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	7adb      	ldrb	r3, [r3, #11]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d005      	beq.n	800d530 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d524:	4b04      	ldr	r3, [pc, #16]	@ (800d538 <HAL_PCD_SuspendCallback+0x48>)
 800d526:	691b      	ldr	r3, [r3, #16]
 800d528:	4a03      	ldr	r2, [pc, #12]	@ (800d538 <HAL_PCD_SuspendCallback+0x48>)
 800d52a:	f043 0306 	orr.w	r3, r3, #6
 800d52e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d530:	bf00      	nop
 800d532:	3708      	adds	r7, #8
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}
 800d538:	e000ed00 	.word	0xe000ed00

0800d53c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b082      	sub	sp, #8
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d54a:	4618      	mov	r0, r3
 800d54c:	f7fe fc51 	bl	800bdf2 <USBD_LL_Resume>
}
 800d550:	bf00      	nop
 800d552:	3708      	adds	r7, #8
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}

0800d558 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b082      	sub	sp, #8
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
 800d560:	460b      	mov	r3, r1
 800d562:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d56a:	78fa      	ldrb	r2, [r7, #3]
 800d56c:	4611      	mov	r1, r2
 800d56e:	4618      	mov	r0, r3
 800d570:	f7fe fca9 	bl	800bec6 <USBD_LL_IsoOUTIncomplete>
}
 800d574:	bf00      	nop
 800d576:	3708      	adds	r7, #8
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b082      	sub	sp, #8
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	460b      	mov	r3, r1
 800d586:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d58e:	78fa      	ldrb	r2, [r7, #3]
 800d590:	4611      	mov	r1, r2
 800d592:	4618      	mov	r0, r3
 800d594:	f7fe fc65 	bl	800be62 <USBD_LL_IsoINIncomplete>
}
 800d598:	bf00      	nop
 800d59a:	3708      	adds	r7, #8
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}

0800d5a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b082      	sub	sp, #8
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7fe fcbb 	bl	800bf2a <USBD_LL_DevConnected>
}
 800d5b4:	bf00      	nop
 800d5b6:	3708      	adds	r7, #8
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}

0800d5bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b082      	sub	sp, #8
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f7fe fcb8 	bl	800bf40 <USBD_LL_DevDisconnected>
}
 800d5d0:	bf00      	nop
 800d5d2:	3708      	adds	r7, #8
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}

0800d5d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b082      	sub	sp, #8
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	781b      	ldrb	r3, [r3, #0]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d13f      	bne.n	800d668 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d5e8:	4a22      	ldr	r2, [pc, #136]	@ (800d674 <USBD_LL_Init+0x9c>)
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	4a20      	ldr	r2, [pc, #128]	@ (800d674 <USBD_LL_Init+0x9c>)
 800d5f4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d5f8:	4b1e      	ldr	r3, [pc, #120]	@ (800d674 <USBD_LL_Init+0x9c>)
 800d5fa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d5fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d600:	4b1c      	ldr	r3, [pc, #112]	@ (800d674 <USBD_LL_Init+0x9c>)
 800d602:	2206      	movs	r2, #6
 800d604:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d606:	4b1b      	ldr	r3, [pc, #108]	@ (800d674 <USBD_LL_Init+0x9c>)
 800d608:	2202      	movs	r2, #2
 800d60a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d60c:	4b19      	ldr	r3, [pc, #100]	@ (800d674 <USBD_LL_Init+0x9c>)
 800d60e:	2200      	movs	r2, #0
 800d610:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d612:	4b18      	ldr	r3, [pc, #96]	@ (800d674 <USBD_LL_Init+0x9c>)
 800d614:	2202      	movs	r2, #2
 800d616:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d618:	4b16      	ldr	r3, [pc, #88]	@ (800d674 <USBD_LL_Init+0x9c>)
 800d61a:	2200      	movs	r2, #0
 800d61c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d61e:	4b15      	ldr	r3, [pc, #84]	@ (800d674 <USBD_LL_Init+0x9c>)
 800d620:	2200      	movs	r2, #0
 800d622:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d624:	4b13      	ldr	r3, [pc, #76]	@ (800d674 <USBD_LL_Init+0x9c>)
 800d626:	2200      	movs	r2, #0
 800d628:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800d62a:	4b12      	ldr	r3, [pc, #72]	@ (800d674 <USBD_LL_Init+0x9c>)
 800d62c:	2200      	movs	r2, #0
 800d62e:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d630:	4b10      	ldr	r3, [pc, #64]	@ (800d674 <USBD_LL_Init+0x9c>)
 800d632:	2200      	movs	r2, #0
 800d634:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d636:	4b0f      	ldr	r3, [pc, #60]	@ (800d674 <USBD_LL_Init+0x9c>)
 800d638:	2200      	movs	r2, #0
 800d63a:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d63c:	480d      	ldr	r0, [pc, #52]	@ (800d674 <USBD_LL_Init+0x9c>)
 800d63e:	f7f6 f802 	bl	8003646 <HAL_PCD_Init>
 800d642:	4603      	mov	r3, r0
 800d644:	2b00      	cmp	r3, #0
 800d646:	d001      	beq.n	800d64c <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800d648:	f7f3 fe48 	bl	80012dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d64c:	2180      	movs	r1, #128	@ 0x80
 800d64e:	4809      	ldr	r0, [pc, #36]	@ (800d674 <USBD_LL_Init+0x9c>)
 800d650:	f7f7 fa4d 	bl	8004aee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d654:	2240      	movs	r2, #64	@ 0x40
 800d656:	2100      	movs	r1, #0
 800d658:	4806      	ldr	r0, [pc, #24]	@ (800d674 <USBD_LL_Init+0x9c>)
 800d65a:	f7f7 fa01 	bl	8004a60 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d65e:	2280      	movs	r2, #128	@ 0x80
 800d660:	2101      	movs	r1, #1
 800d662:	4804      	ldr	r0, [pc, #16]	@ (800d674 <USBD_LL_Init+0x9c>)
 800d664:	f7f7 f9fc 	bl	8004a60 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d668:	2300      	movs	r3, #0
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3708      	adds	r7, #8
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	20001eac 	.word	0x20001eac

0800d678 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b084      	sub	sp, #16
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d680:	2300      	movs	r3, #0
 800d682:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d684:	2300      	movs	r3, #0
 800d686:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d68e:	4618      	mov	r0, r3
 800d690:	f7f6 f8ef 	bl	8003872 <HAL_PCD_Start>
 800d694:	4603      	mov	r3, r0
 800d696:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d698:	7bfb      	ldrb	r3, [r7, #15]
 800d69a:	4618      	mov	r0, r3
 800d69c:	f000 f97e 	bl	800d99c <USBD_Get_USB_Status>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3710      	adds	r7, #16
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}

0800d6ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d6ae:	b580      	push	{r7, lr}
 800d6b0:	b084      	sub	sp, #16
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	6078      	str	r0, [r7, #4]
 800d6b6:	4608      	mov	r0, r1
 800d6b8:	4611      	mov	r1, r2
 800d6ba:	461a      	mov	r2, r3
 800d6bc:	4603      	mov	r3, r0
 800d6be:	70fb      	strb	r3, [r7, #3]
 800d6c0:	460b      	mov	r3, r1
 800d6c2:	70bb      	strb	r3, [r7, #2]
 800d6c4:	4613      	mov	r3, r2
 800d6c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d6d6:	78bb      	ldrb	r3, [r7, #2]
 800d6d8:	883a      	ldrh	r2, [r7, #0]
 800d6da:	78f9      	ldrb	r1, [r7, #3]
 800d6dc:	f7f6 fddd 	bl	800429a <HAL_PCD_EP_Open>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d6e4:	7bfb      	ldrb	r3, [r7, #15]
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f000 f958 	bl	800d99c <USBD_Get_USB_Status>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3710      	adds	r7, #16
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}

0800d6fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6fa:	b580      	push	{r7, lr}
 800d6fc:	b084      	sub	sp, #16
 800d6fe:	af00      	add	r7, sp, #0
 800d700:	6078      	str	r0, [r7, #4]
 800d702:	460b      	mov	r3, r1
 800d704:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d706:	2300      	movs	r3, #0
 800d708:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d70a:	2300      	movs	r3, #0
 800d70c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d714:	78fa      	ldrb	r2, [r7, #3]
 800d716:	4611      	mov	r1, r2
 800d718:	4618      	mov	r0, r3
 800d71a:	f7f6 fe26 	bl	800436a <HAL_PCD_EP_Close>
 800d71e:	4603      	mov	r3, r0
 800d720:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d722:	7bfb      	ldrb	r3, [r7, #15]
 800d724:	4618      	mov	r0, r3
 800d726:	f000 f939 	bl	800d99c <USBD_Get_USB_Status>
 800d72a:	4603      	mov	r3, r0
 800d72c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d72e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d730:	4618      	mov	r0, r3
 800d732:	3710      	adds	r7, #16
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}

0800d738 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b084      	sub	sp, #16
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
 800d740:	460b      	mov	r3, r1
 800d742:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d744:	2300      	movs	r3, #0
 800d746:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d748:	2300      	movs	r3, #0
 800d74a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d752:	78fa      	ldrb	r2, [r7, #3]
 800d754:	4611      	mov	r1, r2
 800d756:	4618      	mov	r0, r3
 800d758:	f7f6 fede 	bl	8004518 <HAL_PCD_EP_SetStall>
 800d75c:	4603      	mov	r3, r0
 800d75e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d760:	7bfb      	ldrb	r3, [r7, #15]
 800d762:	4618      	mov	r0, r3
 800d764:	f000 f91a 	bl	800d99c <USBD_Get_USB_Status>
 800d768:	4603      	mov	r3, r0
 800d76a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d76c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3710      	adds	r7, #16
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}

0800d776 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d776:	b580      	push	{r7, lr}
 800d778:	b084      	sub	sp, #16
 800d77a:	af00      	add	r7, sp, #0
 800d77c:	6078      	str	r0, [r7, #4]
 800d77e:	460b      	mov	r3, r1
 800d780:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d782:	2300      	movs	r3, #0
 800d784:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d786:	2300      	movs	r3, #0
 800d788:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d790:	78fa      	ldrb	r2, [r7, #3]
 800d792:	4611      	mov	r1, r2
 800d794:	4618      	mov	r0, r3
 800d796:	f7f6 ff22 	bl	80045de <HAL_PCD_EP_ClrStall>
 800d79a:	4603      	mov	r3, r0
 800d79c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d79e:	7bfb      	ldrb	r3, [r7, #15]
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f000 f8fb 	bl	800d99c <USBD_Get_USB_Status>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3710      	adds	r7, #16
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d7b4:	b480      	push	{r7}
 800d7b6:	b085      	sub	sp, #20
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
 800d7bc:	460b      	mov	r3, r1
 800d7be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d7c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d7c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	da0b      	bge.n	800d7e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d7d0:	78fb      	ldrb	r3, [r7, #3]
 800d7d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d7d6:	68f9      	ldr	r1, [r7, #12]
 800d7d8:	4613      	mov	r3, r2
 800d7da:	00db      	lsls	r3, r3, #3
 800d7dc:	4413      	add	r3, r2
 800d7de:	009b      	lsls	r3, r3, #2
 800d7e0:	440b      	add	r3, r1
 800d7e2:	3316      	adds	r3, #22
 800d7e4:	781b      	ldrb	r3, [r3, #0]
 800d7e6:	e00b      	b.n	800d800 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d7e8:	78fb      	ldrb	r3, [r7, #3]
 800d7ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d7ee:	68f9      	ldr	r1, [r7, #12]
 800d7f0:	4613      	mov	r3, r2
 800d7f2:	00db      	lsls	r3, r3, #3
 800d7f4:	4413      	add	r3, r2
 800d7f6:	009b      	lsls	r3, r3, #2
 800d7f8:	440b      	add	r3, r1
 800d7fa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d7fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d800:	4618      	mov	r0, r3
 800d802:	3714      	adds	r7, #20
 800d804:	46bd      	mov	sp, r7
 800d806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80a:	4770      	bx	lr

0800d80c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b084      	sub	sp, #16
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
 800d814:	460b      	mov	r3, r1
 800d816:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d818:	2300      	movs	r3, #0
 800d81a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d81c:	2300      	movs	r3, #0
 800d81e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d826:	78fa      	ldrb	r2, [r7, #3]
 800d828:	4611      	mov	r1, r2
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7f6 fd11 	bl	8004252 <HAL_PCD_SetAddress>
 800d830:	4603      	mov	r3, r0
 800d832:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d834:	7bfb      	ldrb	r3, [r7, #15]
 800d836:	4618      	mov	r0, r3
 800d838:	f000 f8b0 	bl	800d99c <USBD_Get_USB_Status>
 800d83c:	4603      	mov	r3, r0
 800d83e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d840:	7bbb      	ldrb	r3, [r7, #14]
}
 800d842:	4618      	mov	r0, r3
 800d844:	3710      	adds	r7, #16
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}

0800d84a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d84a:	b580      	push	{r7, lr}
 800d84c:	b086      	sub	sp, #24
 800d84e:	af00      	add	r7, sp, #0
 800d850:	60f8      	str	r0, [r7, #12]
 800d852:	607a      	str	r2, [r7, #4]
 800d854:	603b      	str	r3, [r7, #0]
 800d856:	460b      	mov	r3, r1
 800d858:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d85a:	2300      	movs	r3, #0
 800d85c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d85e:	2300      	movs	r3, #0
 800d860:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d868:	7af9      	ldrb	r1, [r7, #11]
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	687a      	ldr	r2, [r7, #4]
 800d86e:	f7f6 fe19 	bl	80044a4 <HAL_PCD_EP_Transmit>
 800d872:	4603      	mov	r3, r0
 800d874:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d876:	7dfb      	ldrb	r3, [r7, #23]
 800d878:	4618      	mov	r0, r3
 800d87a:	f000 f88f 	bl	800d99c <USBD_Get_USB_Status>
 800d87e:	4603      	mov	r3, r0
 800d880:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d882:	7dbb      	ldrb	r3, [r7, #22]
}
 800d884:	4618      	mov	r0, r3
 800d886:	3718      	adds	r7, #24
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b086      	sub	sp, #24
 800d890:	af00      	add	r7, sp, #0
 800d892:	60f8      	str	r0, [r7, #12]
 800d894:	607a      	str	r2, [r7, #4]
 800d896:	603b      	str	r3, [r7, #0]
 800d898:	460b      	mov	r3, r1
 800d89a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d89c:	2300      	movs	r3, #0
 800d89e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d8aa:	7af9      	ldrb	r1, [r7, #11]
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	687a      	ldr	r2, [r7, #4]
 800d8b0:	f7f6 fda5 	bl	80043fe <HAL_PCD_EP_Receive>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8b8:	7dfb      	ldrb	r3, [r7, #23]
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f000 f86e 	bl	800d99c <USBD_Get_USB_Status>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d8c4:	7dbb      	ldrb	r3, [r7, #22]
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	3718      	adds	r7, #24
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}

0800d8ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8ce:	b580      	push	{r7, lr}
 800d8d0:	b082      	sub	sp, #8
 800d8d2:	af00      	add	r7, sp, #0
 800d8d4:	6078      	str	r0, [r7, #4]
 800d8d6:	460b      	mov	r3, r1
 800d8d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d8e0:	78fa      	ldrb	r2, [r7, #3]
 800d8e2:	4611      	mov	r1, r2
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f7f6 fdc5 	bl	8004474 <HAL_PCD_EP_GetRxCount>
 800d8ea:	4603      	mov	r3, r0
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	3708      	adds	r7, #8
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}

0800d8f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b082      	sub	sp, #8
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
 800d8fc:	460b      	mov	r3, r1
 800d8fe:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d900:	78fb      	ldrb	r3, [r7, #3]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d002      	beq.n	800d90c <HAL_PCDEx_LPM_Callback+0x18>
 800d906:	2b01      	cmp	r3, #1
 800d908:	d01f      	beq.n	800d94a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d90a:	e03b      	b.n	800d984 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	7adb      	ldrb	r3, [r3, #11]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d007      	beq.n	800d924 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d914:	f000 f83c 	bl	800d990 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d918:	4b1c      	ldr	r3, [pc, #112]	@ (800d98c <HAL_PCDEx_LPM_Callback+0x98>)
 800d91a:	691b      	ldr	r3, [r3, #16]
 800d91c:	4a1b      	ldr	r2, [pc, #108]	@ (800d98c <HAL_PCDEx_LPM_Callback+0x98>)
 800d91e:	f023 0306 	bic.w	r3, r3, #6
 800d922:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	687a      	ldr	r2, [r7, #4]
 800d930:	6812      	ldr	r2, [r2, #0]
 800d932:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d936:	f023 0301 	bic.w	r3, r3, #1
 800d93a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d942:	4618      	mov	r0, r3
 800d944:	f7fe fa55 	bl	800bdf2 <USBD_LL_Resume>
    break;
 800d948:	e01c      	b.n	800d984 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	687a      	ldr	r2, [r7, #4]
 800d956:	6812      	ldr	r2, [r2, #0]
 800d958:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d95c:	f043 0301 	orr.w	r3, r3, #1
 800d960:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d968:	4618      	mov	r0, r3
 800d96a:	f7fe fa26 	bl	800bdba <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	7adb      	ldrb	r3, [r3, #11]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d005      	beq.n	800d982 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d976:	4b05      	ldr	r3, [pc, #20]	@ (800d98c <HAL_PCDEx_LPM_Callback+0x98>)
 800d978:	691b      	ldr	r3, [r3, #16]
 800d97a:	4a04      	ldr	r2, [pc, #16]	@ (800d98c <HAL_PCDEx_LPM_Callback+0x98>)
 800d97c:	f043 0306 	orr.w	r3, r3, #6
 800d980:	6113      	str	r3, [r2, #16]
    break;
 800d982:	bf00      	nop
}
 800d984:	bf00      	nop
 800d986:	3708      	adds	r7, #8
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}
 800d98c:	e000ed00 	.word	0xe000ed00

0800d990 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d994:	f7f2 fff6 	bl	8000984 <SystemClock_Config>
}
 800d998:	bf00      	nop
 800d99a:	bd80      	pop	{r7, pc}

0800d99c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d99c:	b480      	push	{r7}
 800d99e:	b085      	sub	sp, #20
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d9aa:	79fb      	ldrb	r3, [r7, #7]
 800d9ac:	2b03      	cmp	r3, #3
 800d9ae:	d817      	bhi.n	800d9e0 <USBD_Get_USB_Status+0x44>
 800d9b0:	a201      	add	r2, pc, #4	@ (adr r2, 800d9b8 <USBD_Get_USB_Status+0x1c>)
 800d9b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9b6:	bf00      	nop
 800d9b8:	0800d9c9 	.word	0x0800d9c9
 800d9bc:	0800d9cf 	.word	0x0800d9cf
 800d9c0:	0800d9d5 	.word	0x0800d9d5
 800d9c4:	0800d9db 	.word	0x0800d9db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	73fb      	strb	r3, [r7, #15]
    break;
 800d9cc:	e00b      	b.n	800d9e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d9ce:	2303      	movs	r3, #3
 800d9d0:	73fb      	strb	r3, [r7, #15]
    break;
 800d9d2:	e008      	b.n	800d9e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	73fb      	strb	r3, [r7, #15]
    break;
 800d9d8:	e005      	b.n	800d9e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d9da:	2303      	movs	r3, #3
 800d9dc:	73fb      	strb	r3, [r7, #15]
    break;
 800d9de:	e002      	b.n	800d9e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d9e0:	2303      	movs	r3, #3
 800d9e2:	73fb      	strb	r3, [r7, #15]
    break;
 800d9e4:	bf00      	nop
  }
  return usb_status;
 800d9e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3714      	adds	r7, #20
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f2:	4770      	bx	lr

0800d9f4 <malloc>:
 800d9f4:	4b02      	ldr	r3, [pc, #8]	@ (800da00 <malloc+0xc>)
 800d9f6:	4601      	mov	r1, r0
 800d9f8:	6818      	ldr	r0, [r3, #0]
 800d9fa:	f000 b82d 	b.w	800da58 <_malloc_r>
 800d9fe:	bf00      	nop
 800da00:	20000118 	.word	0x20000118

0800da04 <free>:
 800da04:	4b02      	ldr	r3, [pc, #8]	@ (800da10 <free+0xc>)
 800da06:	4601      	mov	r1, r0
 800da08:	6818      	ldr	r0, [r3, #0]
 800da0a:	f000 ba55 	b.w	800deb8 <_free_r>
 800da0e:	bf00      	nop
 800da10:	20000118 	.word	0x20000118

0800da14 <sbrk_aligned>:
 800da14:	b570      	push	{r4, r5, r6, lr}
 800da16:	4e0f      	ldr	r6, [pc, #60]	@ (800da54 <sbrk_aligned+0x40>)
 800da18:	460c      	mov	r4, r1
 800da1a:	6831      	ldr	r1, [r6, #0]
 800da1c:	4605      	mov	r5, r0
 800da1e:	b911      	cbnz	r1, 800da26 <sbrk_aligned+0x12>
 800da20:	f000 f9fa 	bl	800de18 <_sbrk_r>
 800da24:	6030      	str	r0, [r6, #0]
 800da26:	4621      	mov	r1, r4
 800da28:	4628      	mov	r0, r5
 800da2a:	f000 f9f5 	bl	800de18 <_sbrk_r>
 800da2e:	1c43      	adds	r3, r0, #1
 800da30:	d103      	bne.n	800da3a <sbrk_aligned+0x26>
 800da32:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800da36:	4620      	mov	r0, r4
 800da38:	bd70      	pop	{r4, r5, r6, pc}
 800da3a:	1cc4      	adds	r4, r0, #3
 800da3c:	f024 0403 	bic.w	r4, r4, #3
 800da40:	42a0      	cmp	r0, r4
 800da42:	d0f8      	beq.n	800da36 <sbrk_aligned+0x22>
 800da44:	1a21      	subs	r1, r4, r0
 800da46:	4628      	mov	r0, r5
 800da48:	f000 f9e6 	bl	800de18 <_sbrk_r>
 800da4c:	3001      	adds	r0, #1
 800da4e:	d1f2      	bne.n	800da36 <sbrk_aligned+0x22>
 800da50:	e7ef      	b.n	800da32 <sbrk_aligned+0x1e>
 800da52:	bf00      	nop
 800da54:	2000238c 	.word	0x2000238c

0800da58 <_malloc_r>:
 800da58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da5c:	1ccd      	adds	r5, r1, #3
 800da5e:	f025 0503 	bic.w	r5, r5, #3
 800da62:	3508      	adds	r5, #8
 800da64:	2d0c      	cmp	r5, #12
 800da66:	bf38      	it	cc
 800da68:	250c      	movcc	r5, #12
 800da6a:	2d00      	cmp	r5, #0
 800da6c:	4606      	mov	r6, r0
 800da6e:	db01      	blt.n	800da74 <_malloc_r+0x1c>
 800da70:	42a9      	cmp	r1, r5
 800da72:	d904      	bls.n	800da7e <_malloc_r+0x26>
 800da74:	230c      	movs	r3, #12
 800da76:	6033      	str	r3, [r6, #0]
 800da78:	2000      	movs	r0, #0
 800da7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800db54 <_malloc_r+0xfc>
 800da82:	f000 f869 	bl	800db58 <__malloc_lock>
 800da86:	f8d8 3000 	ldr.w	r3, [r8]
 800da8a:	461c      	mov	r4, r3
 800da8c:	bb44      	cbnz	r4, 800dae0 <_malloc_r+0x88>
 800da8e:	4629      	mov	r1, r5
 800da90:	4630      	mov	r0, r6
 800da92:	f7ff ffbf 	bl	800da14 <sbrk_aligned>
 800da96:	1c43      	adds	r3, r0, #1
 800da98:	4604      	mov	r4, r0
 800da9a:	d158      	bne.n	800db4e <_malloc_r+0xf6>
 800da9c:	f8d8 4000 	ldr.w	r4, [r8]
 800daa0:	4627      	mov	r7, r4
 800daa2:	2f00      	cmp	r7, #0
 800daa4:	d143      	bne.n	800db2e <_malloc_r+0xd6>
 800daa6:	2c00      	cmp	r4, #0
 800daa8:	d04b      	beq.n	800db42 <_malloc_r+0xea>
 800daaa:	6823      	ldr	r3, [r4, #0]
 800daac:	4639      	mov	r1, r7
 800daae:	4630      	mov	r0, r6
 800dab0:	eb04 0903 	add.w	r9, r4, r3
 800dab4:	f000 f9b0 	bl	800de18 <_sbrk_r>
 800dab8:	4581      	cmp	r9, r0
 800daba:	d142      	bne.n	800db42 <_malloc_r+0xea>
 800dabc:	6821      	ldr	r1, [r4, #0]
 800dabe:	1a6d      	subs	r5, r5, r1
 800dac0:	4629      	mov	r1, r5
 800dac2:	4630      	mov	r0, r6
 800dac4:	f7ff ffa6 	bl	800da14 <sbrk_aligned>
 800dac8:	3001      	adds	r0, #1
 800daca:	d03a      	beq.n	800db42 <_malloc_r+0xea>
 800dacc:	6823      	ldr	r3, [r4, #0]
 800dace:	442b      	add	r3, r5
 800dad0:	6023      	str	r3, [r4, #0]
 800dad2:	f8d8 3000 	ldr.w	r3, [r8]
 800dad6:	685a      	ldr	r2, [r3, #4]
 800dad8:	bb62      	cbnz	r2, 800db34 <_malloc_r+0xdc>
 800dada:	f8c8 7000 	str.w	r7, [r8]
 800dade:	e00f      	b.n	800db00 <_malloc_r+0xa8>
 800dae0:	6822      	ldr	r2, [r4, #0]
 800dae2:	1b52      	subs	r2, r2, r5
 800dae4:	d420      	bmi.n	800db28 <_malloc_r+0xd0>
 800dae6:	2a0b      	cmp	r2, #11
 800dae8:	d917      	bls.n	800db1a <_malloc_r+0xc2>
 800daea:	1961      	adds	r1, r4, r5
 800daec:	42a3      	cmp	r3, r4
 800daee:	6025      	str	r5, [r4, #0]
 800daf0:	bf18      	it	ne
 800daf2:	6059      	strne	r1, [r3, #4]
 800daf4:	6863      	ldr	r3, [r4, #4]
 800daf6:	bf08      	it	eq
 800daf8:	f8c8 1000 	streq.w	r1, [r8]
 800dafc:	5162      	str	r2, [r4, r5]
 800dafe:	604b      	str	r3, [r1, #4]
 800db00:	4630      	mov	r0, r6
 800db02:	f000 f82f 	bl	800db64 <__malloc_unlock>
 800db06:	f104 000b 	add.w	r0, r4, #11
 800db0a:	1d23      	adds	r3, r4, #4
 800db0c:	f020 0007 	bic.w	r0, r0, #7
 800db10:	1ac2      	subs	r2, r0, r3
 800db12:	bf1c      	itt	ne
 800db14:	1a1b      	subne	r3, r3, r0
 800db16:	50a3      	strne	r3, [r4, r2]
 800db18:	e7af      	b.n	800da7a <_malloc_r+0x22>
 800db1a:	6862      	ldr	r2, [r4, #4]
 800db1c:	42a3      	cmp	r3, r4
 800db1e:	bf0c      	ite	eq
 800db20:	f8c8 2000 	streq.w	r2, [r8]
 800db24:	605a      	strne	r2, [r3, #4]
 800db26:	e7eb      	b.n	800db00 <_malloc_r+0xa8>
 800db28:	4623      	mov	r3, r4
 800db2a:	6864      	ldr	r4, [r4, #4]
 800db2c:	e7ae      	b.n	800da8c <_malloc_r+0x34>
 800db2e:	463c      	mov	r4, r7
 800db30:	687f      	ldr	r7, [r7, #4]
 800db32:	e7b6      	b.n	800daa2 <_malloc_r+0x4a>
 800db34:	461a      	mov	r2, r3
 800db36:	685b      	ldr	r3, [r3, #4]
 800db38:	42a3      	cmp	r3, r4
 800db3a:	d1fb      	bne.n	800db34 <_malloc_r+0xdc>
 800db3c:	2300      	movs	r3, #0
 800db3e:	6053      	str	r3, [r2, #4]
 800db40:	e7de      	b.n	800db00 <_malloc_r+0xa8>
 800db42:	230c      	movs	r3, #12
 800db44:	6033      	str	r3, [r6, #0]
 800db46:	4630      	mov	r0, r6
 800db48:	f000 f80c 	bl	800db64 <__malloc_unlock>
 800db4c:	e794      	b.n	800da78 <_malloc_r+0x20>
 800db4e:	6005      	str	r5, [r0, #0]
 800db50:	e7d6      	b.n	800db00 <_malloc_r+0xa8>
 800db52:	bf00      	nop
 800db54:	20002390 	.word	0x20002390

0800db58 <__malloc_lock>:
 800db58:	4801      	ldr	r0, [pc, #4]	@ (800db60 <__malloc_lock+0x8>)
 800db5a:	f000 b9aa 	b.w	800deb2 <__retarget_lock_acquire_recursive>
 800db5e:	bf00      	nop
 800db60:	200024d4 	.word	0x200024d4

0800db64 <__malloc_unlock>:
 800db64:	4801      	ldr	r0, [pc, #4]	@ (800db6c <__malloc_unlock+0x8>)
 800db66:	f000 b9a5 	b.w	800deb4 <__retarget_lock_release_recursive>
 800db6a:	bf00      	nop
 800db6c:	200024d4 	.word	0x200024d4

0800db70 <std>:
 800db70:	2300      	movs	r3, #0
 800db72:	b510      	push	{r4, lr}
 800db74:	4604      	mov	r4, r0
 800db76:	e9c0 3300 	strd	r3, r3, [r0]
 800db7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800db7e:	6083      	str	r3, [r0, #8]
 800db80:	8181      	strh	r1, [r0, #12]
 800db82:	6643      	str	r3, [r0, #100]	@ 0x64
 800db84:	81c2      	strh	r2, [r0, #14]
 800db86:	6183      	str	r3, [r0, #24]
 800db88:	4619      	mov	r1, r3
 800db8a:	2208      	movs	r2, #8
 800db8c:	305c      	adds	r0, #92	@ 0x5c
 800db8e:	f000 f906 	bl	800dd9e <memset>
 800db92:	4b0d      	ldr	r3, [pc, #52]	@ (800dbc8 <std+0x58>)
 800db94:	6263      	str	r3, [r4, #36]	@ 0x24
 800db96:	4b0d      	ldr	r3, [pc, #52]	@ (800dbcc <std+0x5c>)
 800db98:	62a3      	str	r3, [r4, #40]	@ 0x28
 800db9a:	4b0d      	ldr	r3, [pc, #52]	@ (800dbd0 <std+0x60>)
 800db9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800db9e:	4b0d      	ldr	r3, [pc, #52]	@ (800dbd4 <std+0x64>)
 800dba0:	6323      	str	r3, [r4, #48]	@ 0x30
 800dba2:	4b0d      	ldr	r3, [pc, #52]	@ (800dbd8 <std+0x68>)
 800dba4:	6224      	str	r4, [r4, #32]
 800dba6:	429c      	cmp	r4, r3
 800dba8:	d006      	beq.n	800dbb8 <std+0x48>
 800dbaa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dbae:	4294      	cmp	r4, r2
 800dbb0:	d002      	beq.n	800dbb8 <std+0x48>
 800dbb2:	33d0      	adds	r3, #208	@ 0xd0
 800dbb4:	429c      	cmp	r4, r3
 800dbb6:	d105      	bne.n	800dbc4 <std+0x54>
 800dbb8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dbbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbc0:	f000 b976 	b.w	800deb0 <__retarget_lock_init_recursive>
 800dbc4:	bd10      	pop	{r4, pc}
 800dbc6:	bf00      	nop
 800dbc8:	0800dd19 	.word	0x0800dd19
 800dbcc:	0800dd3b 	.word	0x0800dd3b
 800dbd0:	0800dd73 	.word	0x0800dd73
 800dbd4:	0800dd97 	.word	0x0800dd97
 800dbd8:	20002394 	.word	0x20002394

0800dbdc <stdio_exit_handler>:
 800dbdc:	4a02      	ldr	r2, [pc, #8]	@ (800dbe8 <stdio_exit_handler+0xc>)
 800dbde:	4903      	ldr	r1, [pc, #12]	@ (800dbec <stdio_exit_handler+0x10>)
 800dbe0:	4803      	ldr	r0, [pc, #12]	@ (800dbf0 <stdio_exit_handler+0x14>)
 800dbe2:	f000 b869 	b.w	800dcb8 <_fwalk_sglue>
 800dbe6:	bf00      	nop
 800dbe8:	2000010c 	.word	0x2000010c
 800dbec:	0800e5f5 	.word	0x0800e5f5
 800dbf0:	2000011c 	.word	0x2000011c

0800dbf4 <cleanup_stdio>:
 800dbf4:	6841      	ldr	r1, [r0, #4]
 800dbf6:	4b0c      	ldr	r3, [pc, #48]	@ (800dc28 <cleanup_stdio+0x34>)
 800dbf8:	4299      	cmp	r1, r3
 800dbfa:	b510      	push	{r4, lr}
 800dbfc:	4604      	mov	r4, r0
 800dbfe:	d001      	beq.n	800dc04 <cleanup_stdio+0x10>
 800dc00:	f000 fcf8 	bl	800e5f4 <_fflush_r>
 800dc04:	68a1      	ldr	r1, [r4, #8]
 800dc06:	4b09      	ldr	r3, [pc, #36]	@ (800dc2c <cleanup_stdio+0x38>)
 800dc08:	4299      	cmp	r1, r3
 800dc0a:	d002      	beq.n	800dc12 <cleanup_stdio+0x1e>
 800dc0c:	4620      	mov	r0, r4
 800dc0e:	f000 fcf1 	bl	800e5f4 <_fflush_r>
 800dc12:	68e1      	ldr	r1, [r4, #12]
 800dc14:	4b06      	ldr	r3, [pc, #24]	@ (800dc30 <cleanup_stdio+0x3c>)
 800dc16:	4299      	cmp	r1, r3
 800dc18:	d004      	beq.n	800dc24 <cleanup_stdio+0x30>
 800dc1a:	4620      	mov	r0, r4
 800dc1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc20:	f000 bce8 	b.w	800e5f4 <_fflush_r>
 800dc24:	bd10      	pop	{r4, pc}
 800dc26:	bf00      	nop
 800dc28:	20002394 	.word	0x20002394
 800dc2c:	200023fc 	.word	0x200023fc
 800dc30:	20002464 	.word	0x20002464

0800dc34 <global_stdio_init.part.0>:
 800dc34:	b510      	push	{r4, lr}
 800dc36:	4b0b      	ldr	r3, [pc, #44]	@ (800dc64 <global_stdio_init.part.0+0x30>)
 800dc38:	4c0b      	ldr	r4, [pc, #44]	@ (800dc68 <global_stdio_init.part.0+0x34>)
 800dc3a:	4a0c      	ldr	r2, [pc, #48]	@ (800dc6c <global_stdio_init.part.0+0x38>)
 800dc3c:	601a      	str	r2, [r3, #0]
 800dc3e:	4620      	mov	r0, r4
 800dc40:	2200      	movs	r2, #0
 800dc42:	2104      	movs	r1, #4
 800dc44:	f7ff ff94 	bl	800db70 <std>
 800dc48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dc4c:	2201      	movs	r2, #1
 800dc4e:	2109      	movs	r1, #9
 800dc50:	f7ff ff8e 	bl	800db70 <std>
 800dc54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dc58:	2202      	movs	r2, #2
 800dc5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc5e:	2112      	movs	r1, #18
 800dc60:	f7ff bf86 	b.w	800db70 <std>
 800dc64:	200024cc 	.word	0x200024cc
 800dc68:	20002394 	.word	0x20002394
 800dc6c:	0800dbdd 	.word	0x0800dbdd

0800dc70 <__sfp_lock_acquire>:
 800dc70:	4801      	ldr	r0, [pc, #4]	@ (800dc78 <__sfp_lock_acquire+0x8>)
 800dc72:	f000 b91e 	b.w	800deb2 <__retarget_lock_acquire_recursive>
 800dc76:	bf00      	nop
 800dc78:	200024d5 	.word	0x200024d5

0800dc7c <__sfp_lock_release>:
 800dc7c:	4801      	ldr	r0, [pc, #4]	@ (800dc84 <__sfp_lock_release+0x8>)
 800dc7e:	f000 b919 	b.w	800deb4 <__retarget_lock_release_recursive>
 800dc82:	bf00      	nop
 800dc84:	200024d5 	.word	0x200024d5

0800dc88 <__sinit>:
 800dc88:	b510      	push	{r4, lr}
 800dc8a:	4604      	mov	r4, r0
 800dc8c:	f7ff fff0 	bl	800dc70 <__sfp_lock_acquire>
 800dc90:	6a23      	ldr	r3, [r4, #32]
 800dc92:	b11b      	cbz	r3, 800dc9c <__sinit+0x14>
 800dc94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc98:	f7ff bff0 	b.w	800dc7c <__sfp_lock_release>
 800dc9c:	4b04      	ldr	r3, [pc, #16]	@ (800dcb0 <__sinit+0x28>)
 800dc9e:	6223      	str	r3, [r4, #32]
 800dca0:	4b04      	ldr	r3, [pc, #16]	@ (800dcb4 <__sinit+0x2c>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d1f5      	bne.n	800dc94 <__sinit+0xc>
 800dca8:	f7ff ffc4 	bl	800dc34 <global_stdio_init.part.0>
 800dcac:	e7f2      	b.n	800dc94 <__sinit+0xc>
 800dcae:	bf00      	nop
 800dcb0:	0800dbf5 	.word	0x0800dbf5
 800dcb4:	200024cc 	.word	0x200024cc

0800dcb8 <_fwalk_sglue>:
 800dcb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcbc:	4607      	mov	r7, r0
 800dcbe:	4688      	mov	r8, r1
 800dcc0:	4614      	mov	r4, r2
 800dcc2:	2600      	movs	r6, #0
 800dcc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dcc8:	f1b9 0901 	subs.w	r9, r9, #1
 800dccc:	d505      	bpl.n	800dcda <_fwalk_sglue+0x22>
 800dcce:	6824      	ldr	r4, [r4, #0]
 800dcd0:	2c00      	cmp	r4, #0
 800dcd2:	d1f7      	bne.n	800dcc4 <_fwalk_sglue+0xc>
 800dcd4:	4630      	mov	r0, r6
 800dcd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcda:	89ab      	ldrh	r3, [r5, #12]
 800dcdc:	2b01      	cmp	r3, #1
 800dcde:	d907      	bls.n	800dcf0 <_fwalk_sglue+0x38>
 800dce0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dce4:	3301      	adds	r3, #1
 800dce6:	d003      	beq.n	800dcf0 <_fwalk_sglue+0x38>
 800dce8:	4629      	mov	r1, r5
 800dcea:	4638      	mov	r0, r7
 800dcec:	47c0      	blx	r8
 800dcee:	4306      	orrs	r6, r0
 800dcf0:	3568      	adds	r5, #104	@ 0x68
 800dcf2:	e7e9      	b.n	800dcc8 <_fwalk_sglue+0x10>

0800dcf4 <iprintf>:
 800dcf4:	b40f      	push	{r0, r1, r2, r3}
 800dcf6:	b507      	push	{r0, r1, r2, lr}
 800dcf8:	4906      	ldr	r1, [pc, #24]	@ (800dd14 <iprintf+0x20>)
 800dcfa:	ab04      	add	r3, sp, #16
 800dcfc:	6808      	ldr	r0, [r1, #0]
 800dcfe:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd02:	6881      	ldr	r1, [r0, #8]
 800dd04:	9301      	str	r3, [sp, #4]
 800dd06:	f000 f94b 	bl	800dfa0 <_vfiprintf_r>
 800dd0a:	b003      	add	sp, #12
 800dd0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd10:	b004      	add	sp, #16
 800dd12:	4770      	bx	lr
 800dd14:	20000118 	.word	0x20000118

0800dd18 <__sread>:
 800dd18:	b510      	push	{r4, lr}
 800dd1a:	460c      	mov	r4, r1
 800dd1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd20:	f000 f868 	bl	800ddf4 <_read_r>
 800dd24:	2800      	cmp	r0, #0
 800dd26:	bfab      	itete	ge
 800dd28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dd2a:	89a3      	ldrhlt	r3, [r4, #12]
 800dd2c:	181b      	addge	r3, r3, r0
 800dd2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dd32:	bfac      	ite	ge
 800dd34:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dd36:	81a3      	strhlt	r3, [r4, #12]
 800dd38:	bd10      	pop	{r4, pc}

0800dd3a <__swrite>:
 800dd3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd3e:	461f      	mov	r7, r3
 800dd40:	898b      	ldrh	r3, [r1, #12]
 800dd42:	05db      	lsls	r3, r3, #23
 800dd44:	4605      	mov	r5, r0
 800dd46:	460c      	mov	r4, r1
 800dd48:	4616      	mov	r6, r2
 800dd4a:	d505      	bpl.n	800dd58 <__swrite+0x1e>
 800dd4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd50:	2302      	movs	r3, #2
 800dd52:	2200      	movs	r2, #0
 800dd54:	f000 f83c 	bl	800ddd0 <_lseek_r>
 800dd58:	89a3      	ldrh	r3, [r4, #12]
 800dd5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dd62:	81a3      	strh	r3, [r4, #12]
 800dd64:	4632      	mov	r2, r6
 800dd66:	463b      	mov	r3, r7
 800dd68:	4628      	mov	r0, r5
 800dd6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd6e:	f000 b863 	b.w	800de38 <_write_r>

0800dd72 <__sseek>:
 800dd72:	b510      	push	{r4, lr}
 800dd74:	460c      	mov	r4, r1
 800dd76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd7a:	f000 f829 	bl	800ddd0 <_lseek_r>
 800dd7e:	1c43      	adds	r3, r0, #1
 800dd80:	89a3      	ldrh	r3, [r4, #12]
 800dd82:	bf15      	itete	ne
 800dd84:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dd86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dd8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dd8e:	81a3      	strheq	r3, [r4, #12]
 800dd90:	bf18      	it	ne
 800dd92:	81a3      	strhne	r3, [r4, #12]
 800dd94:	bd10      	pop	{r4, pc}

0800dd96 <__sclose>:
 800dd96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd9a:	f000 b809 	b.w	800ddb0 <_close_r>

0800dd9e <memset>:
 800dd9e:	4402      	add	r2, r0
 800dda0:	4603      	mov	r3, r0
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d100      	bne.n	800dda8 <memset+0xa>
 800dda6:	4770      	bx	lr
 800dda8:	f803 1b01 	strb.w	r1, [r3], #1
 800ddac:	e7f9      	b.n	800dda2 <memset+0x4>
	...

0800ddb0 <_close_r>:
 800ddb0:	b538      	push	{r3, r4, r5, lr}
 800ddb2:	4d06      	ldr	r5, [pc, #24]	@ (800ddcc <_close_r+0x1c>)
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	4604      	mov	r4, r0
 800ddb8:	4608      	mov	r0, r1
 800ddba:	602b      	str	r3, [r5, #0]
 800ddbc:	f7f4 f885 	bl	8001eca <_close>
 800ddc0:	1c43      	adds	r3, r0, #1
 800ddc2:	d102      	bne.n	800ddca <_close_r+0x1a>
 800ddc4:	682b      	ldr	r3, [r5, #0]
 800ddc6:	b103      	cbz	r3, 800ddca <_close_r+0x1a>
 800ddc8:	6023      	str	r3, [r4, #0]
 800ddca:	bd38      	pop	{r3, r4, r5, pc}
 800ddcc:	200024d0 	.word	0x200024d0

0800ddd0 <_lseek_r>:
 800ddd0:	b538      	push	{r3, r4, r5, lr}
 800ddd2:	4d07      	ldr	r5, [pc, #28]	@ (800ddf0 <_lseek_r+0x20>)
 800ddd4:	4604      	mov	r4, r0
 800ddd6:	4608      	mov	r0, r1
 800ddd8:	4611      	mov	r1, r2
 800ddda:	2200      	movs	r2, #0
 800dddc:	602a      	str	r2, [r5, #0]
 800ddde:	461a      	mov	r2, r3
 800dde0:	f7f4 f89a 	bl	8001f18 <_lseek>
 800dde4:	1c43      	adds	r3, r0, #1
 800dde6:	d102      	bne.n	800ddee <_lseek_r+0x1e>
 800dde8:	682b      	ldr	r3, [r5, #0]
 800ddea:	b103      	cbz	r3, 800ddee <_lseek_r+0x1e>
 800ddec:	6023      	str	r3, [r4, #0]
 800ddee:	bd38      	pop	{r3, r4, r5, pc}
 800ddf0:	200024d0 	.word	0x200024d0

0800ddf4 <_read_r>:
 800ddf4:	b538      	push	{r3, r4, r5, lr}
 800ddf6:	4d07      	ldr	r5, [pc, #28]	@ (800de14 <_read_r+0x20>)
 800ddf8:	4604      	mov	r4, r0
 800ddfa:	4608      	mov	r0, r1
 800ddfc:	4611      	mov	r1, r2
 800ddfe:	2200      	movs	r2, #0
 800de00:	602a      	str	r2, [r5, #0]
 800de02:	461a      	mov	r2, r3
 800de04:	f7f4 f828 	bl	8001e58 <_read>
 800de08:	1c43      	adds	r3, r0, #1
 800de0a:	d102      	bne.n	800de12 <_read_r+0x1e>
 800de0c:	682b      	ldr	r3, [r5, #0]
 800de0e:	b103      	cbz	r3, 800de12 <_read_r+0x1e>
 800de10:	6023      	str	r3, [r4, #0]
 800de12:	bd38      	pop	{r3, r4, r5, pc}
 800de14:	200024d0 	.word	0x200024d0

0800de18 <_sbrk_r>:
 800de18:	b538      	push	{r3, r4, r5, lr}
 800de1a:	4d06      	ldr	r5, [pc, #24]	@ (800de34 <_sbrk_r+0x1c>)
 800de1c:	2300      	movs	r3, #0
 800de1e:	4604      	mov	r4, r0
 800de20:	4608      	mov	r0, r1
 800de22:	602b      	str	r3, [r5, #0]
 800de24:	f7f4 f886 	bl	8001f34 <_sbrk>
 800de28:	1c43      	adds	r3, r0, #1
 800de2a:	d102      	bne.n	800de32 <_sbrk_r+0x1a>
 800de2c:	682b      	ldr	r3, [r5, #0]
 800de2e:	b103      	cbz	r3, 800de32 <_sbrk_r+0x1a>
 800de30:	6023      	str	r3, [r4, #0]
 800de32:	bd38      	pop	{r3, r4, r5, pc}
 800de34:	200024d0 	.word	0x200024d0

0800de38 <_write_r>:
 800de38:	b538      	push	{r3, r4, r5, lr}
 800de3a:	4d07      	ldr	r5, [pc, #28]	@ (800de58 <_write_r+0x20>)
 800de3c:	4604      	mov	r4, r0
 800de3e:	4608      	mov	r0, r1
 800de40:	4611      	mov	r1, r2
 800de42:	2200      	movs	r2, #0
 800de44:	602a      	str	r2, [r5, #0]
 800de46:	461a      	mov	r2, r3
 800de48:	f7f4 f823 	bl	8001e92 <_write>
 800de4c:	1c43      	adds	r3, r0, #1
 800de4e:	d102      	bne.n	800de56 <_write_r+0x1e>
 800de50:	682b      	ldr	r3, [r5, #0]
 800de52:	b103      	cbz	r3, 800de56 <_write_r+0x1e>
 800de54:	6023      	str	r3, [r4, #0]
 800de56:	bd38      	pop	{r3, r4, r5, pc}
 800de58:	200024d0 	.word	0x200024d0

0800de5c <__errno>:
 800de5c:	4b01      	ldr	r3, [pc, #4]	@ (800de64 <__errno+0x8>)
 800de5e:	6818      	ldr	r0, [r3, #0]
 800de60:	4770      	bx	lr
 800de62:	bf00      	nop
 800de64:	20000118 	.word	0x20000118

0800de68 <__libc_init_array>:
 800de68:	b570      	push	{r4, r5, r6, lr}
 800de6a:	4d0d      	ldr	r5, [pc, #52]	@ (800dea0 <__libc_init_array+0x38>)
 800de6c:	4c0d      	ldr	r4, [pc, #52]	@ (800dea4 <__libc_init_array+0x3c>)
 800de6e:	1b64      	subs	r4, r4, r5
 800de70:	10a4      	asrs	r4, r4, #2
 800de72:	2600      	movs	r6, #0
 800de74:	42a6      	cmp	r6, r4
 800de76:	d109      	bne.n	800de8c <__libc_init_array+0x24>
 800de78:	4d0b      	ldr	r5, [pc, #44]	@ (800dea8 <__libc_init_array+0x40>)
 800de7a:	4c0c      	ldr	r4, [pc, #48]	@ (800deac <__libc_init_array+0x44>)
 800de7c:	f000 fcfa 	bl	800e874 <_init>
 800de80:	1b64      	subs	r4, r4, r5
 800de82:	10a4      	asrs	r4, r4, #2
 800de84:	2600      	movs	r6, #0
 800de86:	42a6      	cmp	r6, r4
 800de88:	d105      	bne.n	800de96 <__libc_init_array+0x2e>
 800de8a:	bd70      	pop	{r4, r5, r6, pc}
 800de8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800de90:	4798      	blx	r3
 800de92:	3601      	adds	r6, #1
 800de94:	e7ee      	b.n	800de74 <__libc_init_array+0xc>
 800de96:	f855 3b04 	ldr.w	r3, [r5], #4
 800de9a:	4798      	blx	r3
 800de9c:	3601      	adds	r6, #1
 800de9e:	e7f2      	b.n	800de86 <__libc_init_array+0x1e>
 800dea0:	0800e950 	.word	0x0800e950
 800dea4:	0800e950 	.word	0x0800e950
 800dea8:	0800e950 	.word	0x0800e950
 800deac:	0800e954 	.word	0x0800e954

0800deb0 <__retarget_lock_init_recursive>:
 800deb0:	4770      	bx	lr

0800deb2 <__retarget_lock_acquire_recursive>:
 800deb2:	4770      	bx	lr

0800deb4 <__retarget_lock_release_recursive>:
 800deb4:	4770      	bx	lr
	...

0800deb8 <_free_r>:
 800deb8:	b538      	push	{r3, r4, r5, lr}
 800deba:	4605      	mov	r5, r0
 800debc:	2900      	cmp	r1, #0
 800debe:	d041      	beq.n	800df44 <_free_r+0x8c>
 800dec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dec4:	1f0c      	subs	r4, r1, #4
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	bfb8      	it	lt
 800deca:	18e4      	addlt	r4, r4, r3
 800decc:	f7ff fe44 	bl	800db58 <__malloc_lock>
 800ded0:	4a1d      	ldr	r2, [pc, #116]	@ (800df48 <_free_r+0x90>)
 800ded2:	6813      	ldr	r3, [r2, #0]
 800ded4:	b933      	cbnz	r3, 800dee4 <_free_r+0x2c>
 800ded6:	6063      	str	r3, [r4, #4]
 800ded8:	6014      	str	r4, [r2, #0]
 800deda:	4628      	mov	r0, r5
 800dedc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dee0:	f7ff be40 	b.w	800db64 <__malloc_unlock>
 800dee4:	42a3      	cmp	r3, r4
 800dee6:	d908      	bls.n	800defa <_free_r+0x42>
 800dee8:	6820      	ldr	r0, [r4, #0]
 800deea:	1821      	adds	r1, r4, r0
 800deec:	428b      	cmp	r3, r1
 800deee:	bf01      	itttt	eq
 800def0:	6819      	ldreq	r1, [r3, #0]
 800def2:	685b      	ldreq	r3, [r3, #4]
 800def4:	1809      	addeq	r1, r1, r0
 800def6:	6021      	streq	r1, [r4, #0]
 800def8:	e7ed      	b.n	800ded6 <_free_r+0x1e>
 800defa:	461a      	mov	r2, r3
 800defc:	685b      	ldr	r3, [r3, #4]
 800defe:	b10b      	cbz	r3, 800df04 <_free_r+0x4c>
 800df00:	42a3      	cmp	r3, r4
 800df02:	d9fa      	bls.n	800defa <_free_r+0x42>
 800df04:	6811      	ldr	r1, [r2, #0]
 800df06:	1850      	adds	r0, r2, r1
 800df08:	42a0      	cmp	r0, r4
 800df0a:	d10b      	bne.n	800df24 <_free_r+0x6c>
 800df0c:	6820      	ldr	r0, [r4, #0]
 800df0e:	4401      	add	r1, r0
 800df10:	1850      	adds	r0, r2, r1
 800df12:	4283      	cmp	r3, r0
 800df14:	6011      	str	r1, [r2, #0]
 800df16:	d1e0      	bne.n	800deda <_free_r+0x22>
 800df18:	6818      	ldr	r0, [r3, #0]
 800df1a:	685b      	ldr	r3, [r3, #4]
 800df1c:	6053      	str	r3, [r2, #4]
 800df1e:	4408      	add	r0, r1
 800df20:	6010      	str	r0, [r2, #0]
 800df22:	e7da      	b.n	800deda <_free_r+0x22>
 800df24:	d902      	bls.n	800df2c <_free_r+0x74>
 800df26:	230c      	movs	r3, #12
 800df28:	602b      	str	r3, [r5, #0]
 800df2a:	e7d6      	b.n	800deda <_free_r+0x22>
 800df2c:	6820      	ldr	r0, [r4, #0]
 800df2e:	1821      	adds	r1, r4, r0
 800df30:	428b      	cmp	r3, r1
 800df32:	bf04      	itt	eq
 800df34:	6819      	ldreq	r1, [r3, #0]
 800df36:	685b      	ldreq	r3, [r3, #4]
 800df38:	6063      	str	r3, [r4, #4]
 800df3a:	bf04      	itt	eq
 800df3c:	1809      	addeq	r1, r1, r0
 800df3e:	6021      	streq	r1, [r4, #0]
 800df40:	6054      	str	r4, [r2, #4]
 800df42:	e7ca      	b.n	800deda <_free_r+0x22>
 800df44:	bd38      	pop	{r3, r4, r5, pc}
 800df46:	bf00      	nop
 800df48:	20002390 	.word	0x20002390

0800df4c <__sfputc_r>:
 800df4c:	6893      	ldr	r3, [r2, #8]
 800df4e:	3b01      	subs	r3, #1
 800df50:	2b00      	cmp	r3, #0
 800df52:	b410      	push	{r4}
 800df54:	6093      	str	r3, [r2, #8]
 800df56:	da08      	bge.n	800df6a <__sfputc_r+0x1e>
 800df58:	6994      	ldr	r4, [r2, #24]
 800df5a:	42a3      	cmp	r3, r4
 800df5c:	db01      	blt.n	800df62 <__sfputc_r+0x16>
 800df5e:	290a      	cmp	r1, #10
 800df60:	d103      	bne.n	800df6a <__sfputc_r+0x1e>
 800df62:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df66:	f000 bb6d 	b.w	800e644 <__swbuf_r>
 800df6a:	6813      	ldr	r3, [r2, #0]
 800df6c:	1c58      	adds	r0, r3, #1
 800df6e:	6010      	str	r0, [r2, #0]
 800df70:	7019      	strb	r1, [r3, #0]
 800df72:	4608      	mov	r0, r1
 800df74:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df78:	4770      	bx	lr

0800df7a <__sfputs_r>:
 800df7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df7c:	4606      	mov	r6, r0
 800df7e:	460f      	mov	r7, r1
 800df80:	4614      	mov	r4, r2
 800df82:	18d5      	adds	r5, r2, r3
 800df84:	42ac      	cmp	r4, r5
 800df86:	d101      	bne.n	800df8c <__sfputs_r+0x12>
 800df88:	2000      	movs	r0, #0
 800df8a:	e007      	b.n	800df9c <__sfputs_r+0x22>
 800df8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df90:	463a      	mov	r2, r7
 800df92:	4630      	mov	r0, r6
 800df94:	f7ff ffda 	bl	800df4c <__sfputc_r>
 800df98:	1c43      	adds	r3, r0, #1
 800df9a:	d1f3      	bne.n	800df84 <__sfputs_r+0xa>
 800df9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dfa0 <_vfiprintf_r>:
 800dfa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfa4:	460d      	mov	r5, r1
 800dfa6:	b09d      	sub	sp, #116	@ 0x74
 800dfa8:	4614      	mov	r4, r2
 800dfaa:	4698      	mov	r8, r3
 800dfac:	4606      	mov	r6, r0
 800dfae:	b118      	cbz	r0, 800dfb8 <_vfiprintf_r+0x18>
 800dfb0:	6a03      	ldr	r3, [r0, #32]
 800dfb2:	b90b      	cbnz	r3, 800dfb8 <_vfiprintf_r+0x18>
 800dfb4:	f7ff fe68 	bl	800dc88 <__sinit>
 800dfb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dfba:	07d9      	lsls	r1, r3, #31
 800dfbc:	d405      	bmi.n	800dfca <_vfiprintf_r+0x2a>
 800dfbe:	89ab      	ldrh	r3, [r5, #12]
 800dfc0:	059a      	lsls	r2, r3, #22
 800dfc2:	d402      	bmi.n	800dfca <_vfiprintf_r+0x2a>
 800dfc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dfc6:	f7ff ff74 	bl	800deb2 <__retarget_lock_acquire_recursive>
 800dfca:	89ab      	ldrh	r3, [r5, #12]
 800dfcc:	071b      	lsls	r3, r3, #28
 800dfce:	d501      	bpl.n	800dfd4 <_vfiprintf_r+0x34>
 800dfd0:	692b      	ldr	r3, [r5, #16]
 800dfd2:	b99b      	cbnz	r3, 800dffc <_vfiprintf_r+0x5c>
 800dfd4:	4629      	mov	r1, r5
 800dfd6:	4630      	mov	r0, r6
 800dfd8:	f000 fb72 	bl	800e6c0 <__swsetup_r>
 800dfdc:	b170      	cbz	r0, 800dffc <_vfiprintf_r+0x5c>
 800dfde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dfe0:	07dc      	lsls	r4, r3, #31
 800dfe2:	d504      	bpl.n	800dfee <_vfiprintf_r+0x4e>
 800dfe4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dfe8:	b01d      	add	sp, #116	@ 0x74
 800dfea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfee:	89ab      	ldrh	r3, [r5, #12]
 800dff0:	0598      	lsls	r0, r3, #22
 800dff2:	d4f7      	bmi.n	800dfe4 <_vfiprintf_r+0x44>
 800dff4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dff6:	f7ff ff5d 	bl	800deb4 <__retarget_lock_release_recursive>
 800dffa:	e7f3      	b.n	800dfe4 <_vfiprintf_r+0x44>
 800dffc:	2300      	movs	r3, #0
 800dffe:	9309      	str	r3, [sp, #36]	@ 0x24
 800e000:	2320      	movs	r3, #32
 800e002:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e006:	f8cd 800c 	str.w	r8, [sp, #12]
 800e00a:	2330      	movs	r3, #48	@ 0x30
 800e00c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e1bc <_vfiprintf_r+0x21c>
 800e010:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e014:	f04f 0901 	mov.w	r9, #1
 800e018:	4623      	mov	r3, r4
 800e01a:	469a      	mov	sl, r3
 800e01c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e020:	b10a      	cbz	r2, 800e026 <_vfiprintf_r+0x86>
 800e022:	2a25      	cmp	r2, #37	@ 0x25
 800e024:	d1f9      	bne.n	800e01a <_vfiprintf_r+0x7a>
 800e026:	ebba 0b04 	subs.w	fp, sl, r4
 800e02a:	d00b      	beq.n	800e044 <_vfiprintf_r+0xa4>
 800e02c:	465b      	mov	r3, fp
 800e02e:	4622      	mov	r2, r4
 800e030:	4629      	mov	r1, r5
 800e032:	4630      	mov	r0, r6
 800e034:	f7ff ffa1 	bl	800df7a <__sfputs_r>
 800e038:	3001      	adds	r0, #1
 800e03a:	f000 80a7 	beq.w	800e18c <_vfiprintf_r+0x1ec>
 800e03e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e040:	445a      	add	r2, fp
 800e042:	9209      	str	r2, [sp, #36]	@ 0x24
 800e044:	f89a 3000 	ldrb.w	r3, [sl]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	f000 809f 	beq.w	800e18c <_vfiprintf_r+0x1ec>
 800e04e:	2300      	movs	r3, #0
 800e050:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e054:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e058:	f10a 0a01 	add.w	sl, sl, #1
 800e05c:	9304      	str	r3, [sp, #16]
 800e05e:	9307      	str	r3, [sp, #28]
 800e060:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e064:	931a      	str	r3, [sp, #104]	@ 0x68
 800e066:	4654      	mov	r4, sl
 800e068:	2205      	movs	r2, #5
 800e06a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e06e:	4853      	ldr	r0, [pc, #332]	@ (800e1bc <_vfiprintf_r+0x21c>)
 800e070:	f7f2 f8d6 	bl	8000220 <memchr>
 800e074:	9a04      	ldr	r2, [sp, #16]
 800e076:	b9d8      	cbnz	r0, 800e0b0 <_vfiprintf_r+0x110>
 800e078:	06d1      	lsls	r1, r2, #27
 800e07a:	bf44      	itt	mi
 800e07c:	2320      	movmi	r3, #32
 800e07e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e082:	0713      	lsls	r3, r2, #28
 800e084:	bf44      	itt	mi
 800e086:	232b      	movmi	r3, #43	@ 0x2b
 800e088:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e08c:	f89a 3000 	ldrb.w	r3, [sl]
 800e090:	2b2a      	cmp	r3, #42	@ 0x2a
 800e092:	d015      	beq.n	800e0c0 <_vfiprintf_r+0x120>
 800e094:	9a07      	ldr	r2, [sp, #28]
 800e096:	4654      	mov	r4, sl
 800e098:	2000      	movs	r0, #0
 800e09a:	f04f 0c0a 	mov.w	ip, #10
 800e09e:	4621      	mov	r1, r4
 800e0a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0a4:	3b30      	subs	r3, #48	@ 0x30
 800e0a6:	2b09      	cmp	r3, #9
 800e0a8:	d94b      	bls.n	800e142 <_vfiprintf_r+0x1a2>
 800e0aa:	b1b0      	cbz	r0, 800e0da <_vfiprintf_r+0x13a>
 800e0ac:	9207      	str	r2, [sp, #28]
 800e0ae:	e014      	b.n	800e0da <_vfiprintf_r+0x13a>
 800e0b0:	eba0 0308 	sub.w	r3, r0, r8
 800e0b4:	fa09 f303 	lsl.w	r3, r9, r3
 800e0b8:	4313      	orrs	r3, r2
 800e0ba:	9304      	str	r3, [sp, #16]
 800e0bc:	46a2      	mov	sl, r4
 800e0be:	e7d2      	b.n	800e066 <_vfiprintf_r+0xc6>
 800e0c0:	9b03      	ldr	r3, [sp, #12]
 800e0c2:	1d19      	adds	r1, r3, #4
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	9103      	str	r1, [sp, #12]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	bfbb      	ittet	lt
 800e0cc:	425b      	neglt	r3, r3
 800e0ce:	f042 0202 	orrlt.w	r2, r2, #2
 800e0d2:	9307      	strge	r3, [sp, #28]
 800e0d4:	9307      	strlt	r3, [sp, #28]
 800e0d6:	bfb8      	it	lt
 800e0d8:	9204      	strlt	r2, [sp, #16]
 800e0da:	7823      	ldrb	r3, [r4, #0]
 800e0dc:	2b2e      	cmp	r3, #46	@ 0x2e
 800e0de:	d10a      	bne.n	800e0f6 <_vfiprintf_r+0x156>
 800e0e0:	7863      	ldrb	r3, [r4, #1]
 800e0e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0e4:	d132      	bne.n	800e14c <_vfiprintf_r+0x1ac>
 800e0e6:	9b03      	ldr	r3, [sp, #12]
 800e0e8:	1d1a      	adds	r2, r3, #4
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	9203      	str	r2, [sp, #12]
 800e0ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e0f2:	3402      	adds	r4, #2
 800e0f4:	9305      	str	r3, [sp, #20]
 800e0f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e1cc <_vfiprintf_r+0x22c>
 800e0fa:	7821      	ldrb	r1, [r4, #0]
 800e0fc:	2203      	movs	r2, #3
 800e0fe:	4650      	mov	r0, sl
 800e100:	f7f2 f88e 	bl	8000220 <memchr>
 800e104:	b138      	cbz	r0, 800e116 <_vfiprintf_r+0x176>
 800e106:	9b04      	ldr	r3, [sp, #16]
 800e108:	eba0 000a 	sub.w	r0, r0, sl
 800e10c:	2240      	movs	r2, #64	@ 0x40
 800e10e:	4082      	lsls	r2, r0
 800e110:	4313      	orrs	r3, r2
 800e112:	3401      	adds	r4, #1
 800e114:	9304      	str	r3, [sp, #16]
 800e116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e11a:	4829      	ldr	r0, [pc, #164]	@ (800e1c0 <_vfiprintf_r+0x220>)
 800e11c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e120:	2206      	movs	r2, #6
 800e122:	f7f2 f87d 	bl	8000220 <memchr>
 800e126:	2800      	cmp	r0, #0
 800e128:	d03f      	beq.n	800e1aa <_vfiprintf_r+0x20a>
 800e12a:	4b26      	ldr	r3, [pc, #152]	@ (800e1c4 <_vfiprintf_r+0x224>)
 800e12c:	bb1b      	cbnz	r3, 800e176 <_vfiprintf_r+0x1d6>
 800e12e:	9b03      	ldr	r3, [sp, #12]
 800e130:	3307      	adds	r3, #7
 800e132:	f023 0307 	bic.w	r3, r3, #7
 800e136:	3308      	adds	r3, #8
 800e138:	9303      	str	r3, [sp, #12]
 800e13a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e13c:	443b      	add	r3, r7
 800e13e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e140:	e76a      	b.n	800e018 <_vfiprintf_r+0x78>
 800e142:	fb0c 3202 	mla	r2, ip, r2, r3
 800e146:	460c      	mov	r4, r1
 800e148:	2001      	movs	r0, #1
 800e14a:	e7a8      	b.n	800e09e <_vfiprintf_r+0xfe>
 800e14c:	2300      	movs	r3, #0
 800e14e:	3401      	adds	r4, #1
 800e150:	9305      	str	r3, [sp, #20]
 800e152:	4619      	mov	r1, r3
 800e154:	f04f 0c0a 	mov.w	ip, #10
 800e158:	4620      	mov	r0, r4
 800e15a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e15e:	3a30      	subs	r2, #48	@ 0x30
 800e160:	2a09      	cmp	r2, #9
 800e162:	d903      	bls.n	800e16c <_vfiprintf_r+0x1cc>
 800e164:	2b00      	cmp	r3, #0
 800e166:	d0c6      	beq.n	800e0f6 <_vfiprintf_r+0x156>
 800e168:	9105      	str	r1, [sp, #20]
 800e16a:	e7c4      	b.n	800e0f6 <_vfiprintf_r+0x156>
 800e16c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e170:	4604      	mov	r4, r0
 800e172:	2301      	movs	r3, #1
 800e174:	e7f0      	b.n	800e158 <_vfiprintf_r+0x1b8>
 800e176:	ab03      	add	r3, sp, #12
 800e178:	9300      	str	r3, [sp, #0]
 800e17a:	462a      	mov	r2, r5
 800e17c:	4b12      	ldr	r3, [pc, #72]	@ (800e1c8 <_vfiprintf_r+0x228>)
 800e17e:	a904      	add	r1, sp, #16
 800e180:	4630      	mov	r0, r6
 800e182:	f3af 8000 	nop.w
 800e186:	4607      	mov	r7, r0
 800e188:	1c78      	adds	r0, r7, #1
 800e18a:	d1d6      	bne.n	800e13a <_vfiprintf_r+0x19a>
 800e18c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e18e:	07d9      	lsls	r1, r3, #31
 800e190:	d405      	bmi.n	800e19e <_vfiprintf_r+0x1fe>
 800e192:	89ab      	ldrh	r3, [r5, #12]
 800e194:	059a      	lsls	r2, r3, #22
 800e196:	d402      	bmi.n	800e19e <_vfiprintf_r+0x1fe>
 800e198:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e19a:	f7ff fe8b 	bl	800deb4 <__retarget_lock_release_recursive>
 800e19e:	89ab      	ldrh	r3, [r5, #12]
 800e1a0:	065b      	lsls	r3, r3, #25
 800e1a2:	f53f af1f 	bmi.w	800dfe4 <_vfiprintf_r+0x44>
 800e1a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e1a8:	e71e      	b.n	800dfe8 <_vfiprintf_r+0x48>
 800e1aa:	ab03      	add	r3, sp, #12
 800e1ac:	9300      	str	r3, [sp, #0]
 800e1ae:	462a      	mov	r2, r5
 800e1b0:	4b05      	ldr	r3, [pc, #20]	@ (800e1c8 <_vfiprintf_r+0x228>)
 800e1b2:	a904      	add	r1, sp, #16
 800e1b4:	4630      	mov	r0, r6
 800e1b6:	f000 f879 	bl	800e2ac <_printf_i>
 800e1ba:	e7e4      	b.n	800e186 <_vfiprintf_r+0x1e6>
 800e1bc:	0800e914 	.word	0x0800e914
 800e1c0:	0800e91e 	.word	0x0800e91e
 800e1c4:	00000000 	.word	0x00000000
 800e1c8:	0800df7b 	.word	0x0800df7b
 800e1cc:	0800e91a 	.word	0x0800e91a

0800e1d0 <_printf_common>:
 800e1d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1d4:	4616      	mov	r6, r2
 800e1d6:	4698      	mov	r8, r3
 800e1d8:	688a      	ldr	r2, [r1, #8]
 800e1da:	690b      	ldr	r3, [r1, #16]
 800e1dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e1e0:	4293      	cmp	r3, r2
 800e1e2:	bfb8      	it	lt
 800e1e4:	4613      	movlt	r3, r2
 800e1e6:	6033      	str	r3, [r6, #0]
 800e1e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e1ec:	4607      	mov	r7, r0
 800e1ee:	460c      	mov	r4, r1
 800e1f0:	b10a      	cbz	r2, 800e1f6 <_printf_common+0x26>
 800e1f2:	3301      	adds	r3, #1
 800e1f4:	6033      	str	r3, [r6, #0]
 800e1f6:	6823      	ldr	r3, [r4, #0]
 800e1f8:	0699      	lsls	r1, r3, #26
 800e1fa:	bf42      	ittt	mi
 800e1fc:	6833      	ldrmi	r3, [r6, #0]
 800e1fe:	3302      	addmi	r3, #2
 800e200:	6033      	strmi	r3, [r6, #0]
 800e202:	6825      	ldr	r5, [r4, #0]
 800e204:	f015 0506 	ands.w	r5, r5, #6
 800e208:	d106      	bne.n	800e218 <_printf_common+0x48>
 800e20a:	f104 0a19 	add.w	sl, r4, #25
 800e20e:	68e3      	ldr	r3, [r4, #12]
 800e210:	6832      	ldr	r2, [r6, #0]
 800e212:	1a9b      	subs	r3, r3, r2
 800e214:	42ab      	cmp	r3, r5
 800e216:	dc26      	bgt.n	800e266 <_printf_common+0x96>
 800e218:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e21c:	6822      	ldr	r2, [r4, #0]
 800e21e:	3b00      	subs	r3, #0
 800e220:	bf18      	it	ne
 800e222:	2301      	movne	r3, #1
 800e224:	0692      	lsls	r2, r2, #26
 800e226:	d42b      	bmi.n	800e280 <_printf_common+0xb0>
 800e228:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e22c:	4641      	mov	r1, r8
 800e22e:	4638      	mov	r0, r7
 800e230:	47c8      	blx	r9
 800e232:	3001      	adds	r0, #1
 800e234:	d01e      	beq.n	800e274 <_printf_common+0xa4>
 800e236:	6823      	ldr	r3, [r4, #0]
 800e238:	6922      	ldr	r2, [r4, #16]
 800e23a:	f003 0306 	and.w	r3, r3, #6
 800e23e:	2b04      	cmp	r3, #4
 800e240:	bf02      	ittt	eq
 800e242:	68e5      	ldreq	r5, [r4, #12]
 800e244:	6833      	ldreq	r3, [r6, #0]
 800e246:	1aed      	subeq	r5, r5, r3
 800e248:	68a3      	ldr	r3, [r4, #8]
 800e24a:	bf0c      	ite	eq
 800e24c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e250:	2500      	movne	r5, #0
 800e252:	4293      	cmp	r3, r2
 800e254:	bfc4      	itt	gt
 800e256:	1a9b      	subgt	r3, r3, r2
 800e258:	18ed      	addgt	r5, r5, r3
 800e25a:	2600      	movs	r6, #0
 800e25c:	341a      	adds	r4, #26
 800e25e:	42b5      	cmp	r5, r6
 800e260:	d11a      	bne.n	800e298 <_printf_common+0xc8>
 800e262:	2000      	movs	r0, #0
 800e264:	e008      	b.n	800e278 <_printf_common+0xa8>
 800e266:	2301      	movs	r3, #1
 800e268:	4652      	mov	r2, sl
 800e26a:	4641      	mov	r1, r8
 800e26c:	4638      	mov	r0, r7
 800e26e:	47c8      	blx	r9
 800e270:	3001      	adds	r0, #1
 800e272:	d103      	bne.n	800e27c <_printf_common+0xac>
 800e274:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e27c:	3501      	adds	r5, #1
 800e27e:	e7c6      	b.n	800e20e <_printf_common+0x3e>
 800e280:	18e1      	adds	r1, r4, r3
 800e282:	1c5a      	adds	r2, r3, #1
 800e284:	2030      	movs	r0, #48	@ 0x30
 800e286:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e28a:	4422      	add	r2, r4
 800e28c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e290:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e294:	3302      	adds	r3, #2
 800e296:	e7c7      	b.n	800e228 <_printf_common+0x58>
 800e298:	2301      	movs	r3, #1
 800e29a:	4622      	mov	r2, r4
 800e29c:	4641      	mov	r1, r8
 800e29e:	4638      	mov	r0, r7
 800e2a0:	47c8      	blx	r9
 800e2a2:	3001      	adds	r0, #1
 800e2a4:	d0e6      	beq.n	800e274 <_printf_common+0xa4>
 800e2a6:	3601      	adds	r6, #1
 800e2a8:	e7d9      	b.n	800e25e <_printf_common+0x8e>
	...

0800e2ac <_printf_i>:
 800e2ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e2b0:	7e0f      	ldrb	r7, [r1, #24]
 800e2b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e2b4:	2f78      	cmp	r7, #120	@ 0x78
 800e2b6:	4691      	mov	r9, r2
 800e2b8:	4680      	mov	r8, r0
 800e2ba:	460c      	mov	r4, r1
 800e2bc:	469a      	mov	sl, r3
 800e2be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e2c2:	d807      	bhi.n	800e2d4 <_printf_i+0x28>
 800e2c4:	2f62      	cmp	r7, #98	@ 0x62
 800e2c6:	d80a      	bhi.n	800e2de <_printf_i+0x32>
 800e2c8:	2f00      	cmp	r7, #0
 800e2ca:	f000 80d2 	beq.w	800e472 <_printf_i+0x1c6>
 800e2ce:	2f58      	cmp	r7, #88	@ 0x58
 800e2d0:	f000 80b9 	beq.w	800e446 <_printf_i+0x19a>
 800e2d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e2d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e2dc:	e03a      	b.n	800e354 <_printf_i+0xa8>
 800e2de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e2e2:	2b15      	cmp	r3, #21
 800e2e4:	d8f6      	bhi.n	800e2d4 <_printf_i+0x28>
 800e2e6:	a101      	add	r1, pc, #4	@ (adr r1, 800e2ec <_printf_i+0x40>)
 800e2e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e2ec:	0800e345 	.word	0x0800e345
 800e2f0:	0800e359 	.word	0x0800e359
 800e2f4:	0800e2d5 	.word	0x0800e2d5
 800e2f8:	0800e2d5 	.word	0x0800e2d5
 800e2fc:	0800e2d5 	.word	0x0800e2d5
 800e300:	0800e2d5 	.word	0x0800e2d5
 800e304:	0800e359 	.word	0x0800e359
 800e308:	0800e2d5 	.word	0x0800e2d5
 800e30c:	0800e2d5 	.word	0x0800e2d5
 800e310:	0800e2d5 	.word	0x0800e2d5
 800e314:	0800e2d5 	.word	0x0800e2d5
 800e318:	0800e459 	.word	0x0800e459
 800e31c:	0800e383 	.word	0x0800e383
 800e320:	0800e413 	.word	0x0800e413
 800e324:	0800e2d5 	.word	0x0800e2d5
 800e328:	0800e2d5 	.word	0x0800e2d5
 800e32c:	0800e47b 	.word	0x0800e47b
 800e330:	0800e2d5 	.word	0x0800e2d5
 800e334:	0800e383 	.word	0x0800e383
 800e338:	0800e2d5 	.word	0x0800e2d5
 800e33c:	0800e2d5 	.word	0x0800e2d5
 800e340:	0800e41b 	.word	0x0800e41b
 800e344:	6833      	ldr	r3, [r6, #0]
 800e346:	1d1a      	adds	r2, r3, #4
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	6032      	str	r2, [r6, #0]
 800e34c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e350:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e354:	2301      	movs	r3, #1
 800e356:	e09d      	b.n	800e494 <_printf_i+0x1e8>
 800e358:	6833      	ldr	r3, [r6, #0]
 800e35a:	6820      	ldr	r0, [r4, #0]
 800e35c:	1d19      	adds	r1, r3, #4
 800e35e:	6031      	str	r1, [r6, #0]
 800e360:	0606      	lsls	r6, r0, #24
 800e362:	d501      	bpl.n	800e368 <_printf_i+0xbc>
 800e364:	681d      	ldr	r5, [r3, #0]
 800e366:	e003      	b.n	800e370 <_printf_i+0xc4>
 800e368:	0645      	lsls	r5, r0, #25
 800e36a:	d5fb      	bpl.n	800e364 <_printf_i+0xb8>
 800e36c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e370:	2d00      	cmp	r5, #0
 800e372:	da03      	bge.n	800e37c <_printf_i+0xd0>
 800e374:	232d      	movs	r3, #45	@ 0x2d
 800e376:	426d      	negs	r5, r5
 800e378:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e37c:	4859      	ldr	r0, [pc, #356]	@ (800e4e4 <_printf_i+0x238>)
 800e37e:	230a      	movs	r3, #10
 800e380:	e011      	b.n	800e3a6 <_printf_i+0xfa>
 800e382:	6821      	ldr	r1, [r4, #0]
 800e384:	6833      	ldr	r3, [r6, #0]
 800e386:	0608      	lsls	r0, r1, #24
 800e388:	f853 5b04 	ldr.w	r5, [r3], #4
 800e38c:	d402      	bmi.n	800e394 <_printf_i+0xe8>
 800e38e:	0649      	lsls	r1, r1, #25
 800e390:	bf48      	it	mi
 800e392:	b2ad      	uxthmi	r5, r5
 800e394:	2f6f      	cmp	r7, #111	@ 0x6f
 800e396:	4853      	ldr	r0, [pc, #332]	@ (800e4e4 <_printf_i+0x238>)
 800e398:	6033      	str	r3, [r6, #0]
 800e39a:	bf14      	ite	ne
 800e39c:	230a      	movne	r3, #10
 800e39e:	2308      	moveq	r3, #8
 800e3a0:	2100      	movs	r1, #0
 800e3a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e3a6:	6866      	ldr	r6, [r4, #4]
 800e3a8:	60a6      	str	r6, [r4, #8]
 800e3aa:	2e00      	cmp	r6, #0
 800e3ac:	bfa2      	ittt	ge
 800e3ae:	6821      	ldrge	r1, [r4, #0]
 800e3b0:	f021 0104 	bicge.w	r1, r1, #4
 800e3b4:	6021      	strge	r1, [r4, #0]
 800e3b6:	b90d      	cbnz	r5, 800e3bc <_printf_i+0x110>
 800e3b8:	2e00      	cmp	r6, #0
 800e3ba:	d04b      	beq.n	800e454 <_printf_i+0x1a8>
 800e3bc:	4616      	mov	r6, r2
 800e3be:	fbb5 f1f3 	udiv	r1, r5, r3
 800e3c2:	fb03 5711 	mls	r7, r3, r1, r5
 800e3c6:	5dc7      	ldrb	r7, [r0, r7]
 800e3c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e3cc:	462f      	mov	r7, r5
 800e3ce:	42bb      	cmp	r3, r7
 800e3d0:	460d      	mov	r5, r1
 800e3d2:	d9f4      	bls.n	800e3be <_printf_i+0x112>
 800e3d4:	2b08      	cmp	r3, #8
 800e3d6:	d10b      	bne.n	800e3f0 <_printf_i+0x144>
 800e3d8:	6823      	ldr	r3, [r4, #0]
 800e3da:	07df      	lsls	r7, r3, #31
 800e3dc:	d508      	bpl.n	800e3f0 <_printf_i+0x144>
 800e3de:	6923      	ldr	r3, [r4, #16]
 800e3e0:	6861      	ldr	r1, [r4, #4]
 800e3e2:	4299      	cmp	r1, r3
 800e3e4:	bfde      	ittt	le
 800e3e6:	2330      	movle	r3, #48	@ 0x30
 800e3e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e3ec:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e3f0:	1b92      	subs	r2, r2, r6
 800e3f2:	6122      	str	r2, [r4, #16]
 800e3f4:	f8cd a000 	str.w	sl, [sp]
 800e3f8:	464b      	mov	r3, r9
 800e3fa:	aa03      	add	r2, sp, #12
 800e3fc:	4621      	mov	r1, r4
 800e3fe:	4640      	mov	r0, r8
 800e400:	f7ff fee6 	bl	800e1d0 <_printf_common>
 800e404:	3001      	adds	r0, #1
 800e406:	d14a      	bne.n	800e49e <_printf_i+0x1f2>
 800e408:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e40c:	b004      	add	sp, #16
 800e40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e412:	6823      	ldr	r3, [r4, #0]
 800e414:	f043 0320 	orr.w	r3, r3, #32
 800e418:	6023      	str	r3, [r4, #0]
 800e41a:	4833      	ldr	r0, [pc, #204]	@ (800e4e8 <_printf_i+0x23c>)
 800e41c:	2778      	movs	r7, #120	@ 0x78
 800e41e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e422:	6823      	ldr	r3, [r4, #0]
 800e424:	6831      	ldr	r1, [r6, #0]
 800e426:	061f      	lsls	r7, r3, #24
 800e428:	f851 5b04 	ldr.w	r5, [r1], #4
 800e42c:	d402      	bmi.n	800e434 <_printf_i+0x188>
 800e42e:	065f      	lsls	r7, r3, #25
 800e430:	bf48      	it	mi
 800e432:	b2ad      	uxthmi	r5, r5
 800e434:	6031      	str	r1, [r6, #0]
 800e436:	07d9      	lsls	r1, r3, #31
 800e438:	bf44      	itt	mi
 800e43a:	f043 0320 	orrmi.w	r3, r3, #32
 800e43e:	6023      	strmi	r3, [r4, #0]
 800e440:	b11d      	cbz	r5, 800e44a <_printf_i+0x19e>
 800e442:	2310      	movs	r3, #16
 800e444:	e7ac      	b.n	800e3a0 <_printf_i+0xf4>
 800e446:	4827      	ldr	r0, [pc, #156]	@ (800e4e4 <_printf_i+0x238>)
 800e448:	e7e9      	b.n	800e41e <_printf_i+0x172>
 800e44a:	6823      	ldr	r3, [r4, #0]
 800e44c:	f023 0320 	bic.w	r3, r3, #32
 800e450:	6023      	str	r3, [r4, #0]
 800e452:	e7f6      	b.n	800e442 <_printf_i+0x196>
 800e454:	4616      	mov	r6, r2
 800e456:	e7bd      	b.n	800e3d4 <_printf_i+0x128>
 800e458:	6833      	ldr	r3, [r6, #0]
 800e45a:	6825      	ldr	r5, [r4, #0]
 800e45c:	6961      	ldr	r1, [r4, #20]
 800e45e:	1d18      	adds	r0, r3, #4
 800e460:	6030      	str	r0, [r6, #0]
 800e462:	062e      	lsls	r6, r5, #24
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	d501      	bpl.n	800e46c <_printf_i+0x1c0>
 800e468:	6019      	str	r1, [r3, #0]
 800e46a:	e002      	b.n	800e472 <_printf_i+0x1c6>
 800e46c:	0668      	lsls	r0, r5, #25
 800e46e:	d5fb      	bpl.n	800e468 <_printf_i+0x1bc>
 800e470:	8019      	strh	r1, [r3, #0]
 800e472:	2300      	movs	r3, #0
 800e474:	6123      	str	r3, [r4, #16]
 800e476:	4616      	mov	r6, r2
 800e478:	e7bc      	b.n	800e3f4 <_printf_i+0x148>
 800e47a:	6833      	ldr	r3, [r6, #0]
 800e47c:	1d1a      	adds	r2, r3, #4
 800e47e:	6032      	str	r2, [r6, #0]
 800e480:	681e      	ldr	r6, [r3, #0]
 800e482:	6862      	ldr	r2, [r4, #4]
 800e484:	2100      	movs	r1, #0
 800e486:	4630      	mov	r0, r6
 800e488:	f7f1 feca 	bl	8000220 <memchr>
 800e48c:	b108      	cbz	r0, 800e492 <_printf_i+0x1e6>
 800e48e:	1b80      	subs	r0, r0, r6
 800e490:	6060      	str	r0, [r4, #4]
 800e492:	6863      	ldr	r3, [r4, #4]
 800e494:	6123      	str	r3, [r4, #16]
 800e496:	2300      	movs	r3, #0
 800e498:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e49c:	e7aa      	b.n	800e3f4 <_printf_i+0x148>
 800e49e:	6923      	ldr	r3, [r4, #16]
 800e4a0:	4632      	mov	r2, r6
 800e4a2:	4649      	mov	r1, r9
 800e4a4:	4640      	mov	r0, r8
 800e4a6:	47d0      	blx	sl
 800e4a8:	3001      	adds	r0, #1
 800e4aa:	d0ad      	beq.n	800e408 <_printf_i+0x15c>
 800e4ac:	6823      	ldr	r3, [r4, #0]
 800e4ae:	079b      	lsls	r3, r3, #30
 800e4b0:	d413      	bmi.n	800e4da <_printf_i+0x22e>
 800e4b2:	68e0      	ldr	r0, [r4, #12]
 800e4b4:	9b03      	ldr	r3, [sp, #12]
 800e4b6:	4298      	cmp	r0, r3
 800e4b8:	bfb8      	it	lt
 800e4ba:	4618      	movlt	r0, r3
 800e4bc:	e7a6      	b.n	800e40c <_printf_i+0x160>
 800e4be:	2301      	movs	r3, #1
 800e4c0:	4632      	mov	r2, r6
 800e4c2:	4649      	mov	r1, r9
 800e4c4:	4640      	mov	r0, r8
 800e4c6:	47d0      	blx	sl
 800e4c8:	3001      	adds	r0, #1
 800e4ca:	d09d      	beq.n	800e408 <_printf_i+0x15c>
 800e4cc:	3501      	adds	r5, #1
 800e4ce:	68e3      	ldr	r3, [r4, #12]
 800e4d0:	9903      	ldr	r1, [sp, #12]
 800e4d2:	1a5b      	subs	r3, r3, r1
 800e4d4:	42ab      	cmp	r3, r5
 800e4d6:	dcf2      	bgt.n	800e4be <_printf_i+0x212>
 800e4d8:	e7eb      	b.n	800e4b2 <_printf_i+0x206>
 800e4da:	2500      	movs	r5, #0
 800e4dc:	f104 0619 	add.w	r6, r4, #25
 800e4e0:	e7f5      	b.n	800e4ce <_printf_i+0x222>
 800e4e2:	bf00      	nop
 800e4e4:	0800e925 	.word	0x0800e925
 800e4e8:	0800e936 	.word	0x0800e936

0800e4ec <__sflush_r>:
 800e4ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4f4:	0716      	lsls	r6, r2, #28
 800e4f6:	4605      	mov	r5, r0
 800e4f8:	460c      	mov	r4, r1
 800e4fa:	d454      	bmi.n	800e5a6 <__sflush_r+0xba>
 800e4fc:	684b      	ldr	r3, [r1, #4]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	dc02      	bgt.n	800e508 <__sflush_r+0x1c>
 800e502:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e504:	2b00      	cmp	r3, #0
 800e506:	dd48      	ble.n	800e59a <__sflush_r+0xae>
 800e508:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e50a:	2e00      	cmp	r6, #0
 800e50c:	d045      	beq.n	800e59a <__sflush_r+0xae>
 800e50e:	2300      	movs	r3, #0
 800e510:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e514:	682f      	ldr	r7, [r5, #0]
 800e516:	6a21      	ldr	r1, [r4, #32]
 800e518:	602b      	str	r3, [r5, #0]
 800e51a:	d030      	beq.n	800e57e <__sflush_r+0x92>
 800e51c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e51e:	89a3      	ldrh	r3, [r4, #12]
 800e520:	0759      	lsls	r1, r3, #29
 800e522:	d505      	bpl.n	800e530 <__sflush_r+0x44>
 800e524:	6863      	ldr	r3, [r4, #4]
 800e526:	1ad2      	subs	r2, r2, r3
 800e528:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e52a:	b10b      	cbz	r3, 800e530 <__sflush_r+0x44>
 800e52c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e52e:	1ad2      	subs	r2, r2, r3
 800e530:	2300      	movs	r3, #0
 800e532:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e534:	6a21      	ldr	r1, [r4, #32]
 800e536:	4628      	mov	r0, r5
 800e538:	47b0      	blx	r6
 800e53a:	1c43      	adds	r3, r0, #1
 800e53c:	89a3      	ldrh	r3, [r4, #12]
 800e53e:	d106      	bne.n	800e54e <__sflush_r+0x62>
 800e540:	6829      	ldr	r1, [r5, #0]
 800e542:	291d      	cmp	r1, #29
 800e544:	d82b      	bhi.n	800e59e <__sflush_r+0xb2>
 800e546:	4a2a      	ldr	r2, [pc, #168]	@ (800e5f0 <__sflush_r+0x104>)
 800e548:	410a      	asrs	r2, r1
 800e54a:	07d6      	lsls	r6, r2, #31
 800e54c:	d427      	bmi.n	800e59e <__sflush_r+0xb2>
 800e54e:	2200      	movs	r2, #0
 800e550:	6062      	str	r2, [r4, #4]
 800e552:	04d9      	lsls	r1, r3, #19
 800e554:	6922      	ldr	r2, [r4, #16]
 800e556:	6022      	str	r2, [r4, #0]
 800e558:	d504      	bpl.n	800e564 <__sflush_r+0x78>
 800e55a:	1c42      	adds	r2, r0, #1
 800e55c:	d101      	bne.n	800e562 <__sflush_r+0x76>
 800e55e:	682b      	ldr	r3, [r5, #0]
 800e560:	b903      	cbnz	r3, 800e564 <__sflush_r+0x78>
 800e562:	6560      	str	r0, [r4, #84]	@ 0x54
 800e564:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e566:	602f      	str	r7, [r5, #0]
 800e568:	b1b9      	cbz	r1, 800e59a <__sflush_r+0xae>
 800e56a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e56e:	4299      	cmp	r1, r3
 800e570:	d002      	beq.n	800e578 <__sflush_r+0x8c>
 800e572:	4628      	mov	r0, r5
 800e574:	f7ff fca0 	bl	800deb8 <_free_r>
 800e578:	2300      	movs	r3, #0
 800e57a:	6363      	str	r3, [r4, #52]	@ 0x34
 800e57c:	e00d      	b.n	800e59a <__sflush_r+0xae>
 800e57e:	2301      	movs	r3, #1
 800e580:	4628      	mov	r0, r5
 800e582:	47b0      	blx	r6
 800e584:	4602      	mov	r2, r0
 800e586:	1c50      	adds	r0, r2, #1
 800e588:	d1c9      	bne.n	800e51e <__sflush_r+0x32>
 800e58a:	682b      	ldr	r3, [r5, #0]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d0c6      	beq.n	800e51e <__sflush_r+0x32>
 800e590:	2b1d      	cmp	r3, #29
 800e592:	d001      	beq.n	800e598 <__sflush_r+0xac>
 800e594:	2b16      	cmp	r3, #22
 800e596:	d11e      	bne.n	800e5d6 <__sflush_r+0xea>
 800e598:	602f      	str	r7, [r5, #0]
 800e59a:	2000      	movs	r0, #0
 800e59c:	e022      	b.n	800e5e4 <__sflush_r+0xf8>
 800e59e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5a2:	b21b      	sxth	r3, r3
 800e5a4:	e01b      	b.n	800e5de <__sflush_r+0xf2>
 800e5a6:	690f      	ldr	r7, [r1, #16]
 800e5a8:	2f00      	cmp	r7, #0
 800e5aa:	d0f6      	beq.n	800e59a <__sflush_r+0xae>
 800e5ac:	0793      	lsls	r3, r2, #30
 800e5ae:	680e      	ldr	r6, [r1, #0]
 800e5b0:	bf08      	it	eq
 800e5b2:	694b      	ldreq	r3, [r1, #20]
 800e5b4:	600f      	str	r7, [r1, #0]
 800e5b6:	bf18      	it	ne
 800e5b8:	2300      	movne	r3, #0
 800e5ba:	eba6 0807 	sub.w	r8, r6, r7
 800e5be:	608b      	str	r3, [r1, #8]
 800e5c0:	f1b8 0f00 	cmp.w	r8, #0
 800e5c4:	dde9      	ble.n	800e59a <__sflush_r+0xae>
 800e5c6:	6a21      	ldr	r1, [r4, #32]
 800e5c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e5ca:	4643      	mov	r3, r8
 800e5cc:	463a      	mov	r2, r7
 800e5ce:	4628      	mov	r0, r5
 800e5d0:	47b0      	blx	r6
 800e5d2:	2800      	cmp	r0, #0
 800e5d4:	dc08      	bgt.n	800e5e8 <__sflush_r+0xfc>
 800e5d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5de:	81a3      	strh	r3, [r4, #12]
 800e5e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5e8:	4407      	add	r7, r0
 800e5ea:	eba8 0800 	sub.w	r8, r8, r0
 800e5ee:	e7e7      	b.n	800e5c0 <__sflush_r+0xd4>
 800e5f0:	dfbffffe 	.word	0xdfbffffe

0800e5f4 <_fflush_r>:
 800e5f4:	b538      	push	{r3, r4, r5, lr}
 800e5f6:	690b      	ldr	r3, [r1, #16]
 800e5f8:	4605      	mov	r5, r0
 800e5fa:	460c      	mov	r4, r1
 800e5fc:	b913      	cbnz	r3, 800e604 <_fflush_r+0x10>
 800e5fe:	2500      	movs	r5, #0
 800e600:	4628      	mov	r0, r5
 800e602:	bd38      	pop	{r3, r4, r5, pc}
 800e604:	b118      	cbz	r0, 800e60e <_fflush_r+0x1a>
 800e606:	6a03      	ldr	r3, [r0, #32]
 800e608:	b90b      	cbnz	r3, 800e60e <_fflush_r+0x1a>
 800e60a:	f7ff fb3d 	bl	800dc88 <__sinit>
 800e60e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d0f3      	beq.n	800e5fe <_fflush_r+0xa>
 800e616:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e618:	07d0      	lsls	r0, r2, #31
 800e61a:	d404      	bmi.n	800e626 <_fflush_r+0x32>
 800e61c:	0599      	lsls	r1, r3, #22
 800e61e:	d402      	bmi.n	800e626 <_fflush_r+0x32>
 800e620:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e622:	f7ff fc46 	bl	800deb2 <__retarget_lock_acquire_recursive>
 800e626:	4628      	mov	r0, r5
 800e628:	4621      	mov	r1, r4
 800e62a:	f7ff ff5f 	bl	800e4ec <__sflush_r>
 800e62e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e630:	07da      	lsls	r2, r3, #31
 800e632:	4605      	mov	r5, r0
 800e634:	d4e4      	bmi.n	800e600 <_fflush_r+0xc>
 800e636:	89a3      	ldrh	r3, [r4, #12]
 800e638:	059b      	lsls	r3, r3, #22
 800e63a:	d4e1      	bmi.n	800e600 <_fflush_r+0xc>
 800e63c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e63e:	f7ff fc39 	bl	800deb4 <__retarget_lock_release_recursive>
 800e642:	e7dd      	b.n	800e600 <_fflush_r+0xc>

0800e644 <__swbuf_r>:
 800e644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e646:	460e      	mov	r6, r1
 800e648:	4614      	mov	r4, r2
 800e64a:	4605      	mov	r5, r0
 800e64c:	b118      	cbz	r0, 800e656 <__swbuf_r+0x12>
 800e64e:	6a03      	ldr	r3, [r0, #32]
 800e650:	b90b      	cbnz	r3, 800e656 <__swbuf_r+0x12>
 800e652:	f7ff fb19 	bl	800dc88 <__sinit>
 800e656:	69a3      	ldr	r3, [r4, #24]
 800e658:	60a3      	str	r3, [r4, #8]
 800e65a:	89a3      	ldrh	r3, [r4, #12]
 800e65c:	071a      	lsls	r2, r3, #28
 800e65e:	d501      	bpl.n	800e664 <__swbuf_r+0x20>
 800e660:	6923      	ldr	r3, [r4, #16]
 800e662:	b943      	cbnz	r3, 800e676 <__swbuf_r+0x32>
 800e664:	4621      	mov	r1, r4
 800e666:	4628      	mov	r0, r5
 800e668:	f000 f82a 	bl	800e6c0 <__swsetup_r>
 800e66c:	b118      	cbz	r0, 800e676 <__swbuf_r+0x32>
 800e66e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800e672:	4638      	mov	r0, r7
 800e674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e676:	6823      	ldr	r3, [r4, #0]
 800e678:	6922      	ldr	r2, [r4, #16]
 800e67a:	1a98      	subs	r0, r3, r2
 800e67c:	6963      	ldr	r3, [r4, #20]
 800e67e:	b2f6      	uxtb	r6, r6
 800e680:	4283      	cmp	r3, r0
 800e682:	4637      	mov	r7, r6
 800e684:	dc05      	bgt.n	800e692 <__swbuf_r+0x4e>
 800e686:	4621      	mov	r1, r4
 800e688:	4628      	mov	r0, r5
 800e68a:	f7ff ffb3 	bl	800e5f4 <_fflush_r>
 800e68e:	2800      	cmp	r0, #0
 800e690:	d1ed      	bne.n	800e66e <__swbuf_r+0x2a>
 800e692:	68a3      	ldr	r3, [r4, #8]
 800e694:	3b01      	subs	r3, #1
 800e696:	60a3      	str	r3, [r4, #8]
 800e698:	6823      	ldr	r3, [r4, #0]
 800e69a:	1c5a      	adds	r2, r3, #1
 800e69c:	6022      	str	r2, [r4, #0]
 800e69e:	701e      	strb	r6, [r3, #0]
 800e6a0:	6962      	ldr	r2, [r4, #20]
 800e6a2:	1c43      	adds	r3, r0, #1
 800e6a4:	429a      	cmp	r2, r3
 800e6a6:	d004      	beq.n	800e6b2 <__swbuf_r+0x6e>
 800e6a8:	89a3      	ldrh	r3, [r4, #12]
 800e6aa:	07db      	lsls	r3, r3, #31
 800e6ac:	d5e1      	bpl.n	800e672 <__swbuf_r+0x2e>
 800e6ae:	2e0a      	cmp	r6, #10
 800e6b0:	d1df      	bne.n	800e672 <__swbuf_r+0x2e>
 800e6b2:	4621      	mov	r1, r4
 800e6b4:	4628      	mov	r0, r5
 800e6b6:	f7ff ff9d 	bl	800e5f4 <_fflush_r>
 800e6ba:	2800      	cmp	r0, #0
 800e6bc:	d0d9      	beq.n	800e672 <__swbuf_r+0x2e>
 800e6be:	e7d6      	b.n	800e66e <__swbuf_r+0x2a>

0800e6c0 <__swsetup_r>:
 800e6c0:	b538      	push	{r3, r4, r5, lr}
 800e6c2:	4b29      	ldr	r3, [pc, #164]	@ (800e768 <__swsetup_r+0xa8>)
 800e6c4:	4605      	mov	r5, r0
 800e6c6:	6818      	ldr	r0, [r3, #0]
 800e6c8:	460c      	mov	r4, r1
 800e6ca:	b118      	cbz	r0, 800e6d4 <__swsetup_r+0x14>
 800e6cc:	6a03      	ldr	r3, [r0, #32]
 800e6ce:	b90b      	cbnz	r3, 800e6d4 <__swsetup_r+0x14>
 800e6d0:	f7ff fada 	bl	800dc88 <__sinit>
 800e6d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6d8:	0719      	lsls	r1, r3, #28
 800e6da:	d422      	bmi.n	800e722 <__swsetup_r+0x62>
 800e6dc:	06da      	lsls	r2, r3, #27
 800e6de:	d407      	bmi.n	800e6f0 <__swsetup_r+0x30>
 800e6e0:	2209      	movs	r2, #9
 800e6e2:	602a      	str	r2, [r5, #0]
 800e6e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6e8:	81a3      	strh	r3, [r4, #12]
 800e6ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e6ee:	e033      	b.n	800e758 <__swsetup_r+0x98>
 800e6f0:	0758      	lsls	r0, r3, #29
 800e6f2:	d512      	bpl.n	800e71a <__swsetup_r+0x5a>
 800e6f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e6f6:	b141      	cbz	r1, 800e70a <__swsetup_r+0x4a>
 800e6f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e6fc:	4299      	cmp	r1, r3
 800e6fe:	d002      	beq.n	800e706 <__swsetup_r+0x46>
 800e700:	4628      	mov	r0, r5
 800e702:	f7ff fbd9 	bl	800deb8 <_free_r>
 800e706:	2300      	movs	r3, #0
 800e708:	6363      	str	r3, [r4, #52]	@ 0x34
 800e70a:	89a3      	ldrh	r3, [r4, #12]
 800e70c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e710:	81a3      	strh	r3, [r4, #12]
 800e712:	2300      	movs	r3, #0
 800e714:	6063      	str	r3, [r4, #4]
 800e716:	6923      	ldr	r3, [r4, #16]
 800e718:	6023      	str	r3, [r4, #0]
 800e71a:	89a3      	ldrh	r3, [r4, #12]
 800e71c:	f043 0308 	orr.w	r3, r3, #8
 800e720:	81a3      	strh	r3, [r4, #12]
 800e722:	6923      	ldr	r3, [r4, #16]
 800e724:	b94b      	cbnz	r3, 800e73a <__swsetup_r+0x7a>
 800e726:	89a3      	ldrh	r3, [r4, #12]
 800e728:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e72c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e730:	d003      	beq.n	800e73a <__swsetup_r+0x7a>
 800e732:	4621      	mov	r1, r4
 800e734:	4628      	mov	r0, r5
 800e736:	f000 f83f 	bl	800e7b8 <__smakebuf_r>
 800e73a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e73e:	f013 0201 	ands.w	r2, r3, #1
 800e742:	d00a      	beq.n	800e75a <__swsetup_r+0x9a>
 800e744:	2200      	movs	r2, #0
 800e746:	60a2      	str	r2, [r4, #8]
 800e748:	6962      	ldr	r2, [r4, #20]
 800e74a:	4252      	negs	r2, r2
 800e74c:	61a2      	str	r2, [r4, #24]
 800e74e:	6922      	ldr	r2, [r4, #16]
 800e750:	b942      	cbnz	r2, 800e764 <__swsetup_r+0xa4>
 800e752:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e756:	d1c5      	bne.n	800e6e4 <__swsetup_r+0x24>
 800e758:	bd38      	pop	{r3, r4, r5, pc}
 800e75a:	0799      	lsls	r1, r3, #30
 800e75c:	bf58      	it	pl
 800e75e:	6962      	ldrpl	r2, [r4, #20]
 800e760:	60a2      	str	r2, [r4, #8]
 800e762:	e7f4      	b.n	800e74e <__swsetup_r+0x8e>
 800e764:	2000      	movs	r0, #0
 800e766:	e7f7      	b.n	800e758 <__swsetup_r+0x98>
 800e768:	20000118 	.word	0x20000118

0800e76c <__swhatbuf_r>:
 800e76c:	b570      	push	{r4, r5, r6, lr}
 800e76e:	460c      	mov	r4, r1
 800e770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e774:	2900      	cmp	r1, #0
 800e776:	b096      	sub	sp, #88	@ 0x58
 800e778:	4615      	mov	r5, r2
 800e77a:	461e      	mov	r6, r3
 800e77c:	da0d      	bge.n	800e79a <__swhatbuf_r+0x2e>
 800e77e:	89a3      	ldrh	r3, [r4, #12]
 800e780:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e784:	f04f 0100 	mov.w	r1, #0
 800e788:	bf14      	ite	ne
 800e78a:	2340      	movne	r3, #64	@ 0x40
 800e78c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e790:	2000      	movs	r0, #0
 800e792:	6031      	str	r1, [r6, #0]
 800e794:	602b      	str	r3, [r5, #0]
 800e796:	b016      	add	sp, #88	@ 0x58
 800e798:	bd70      	pop	{r4, r5, r6, pc}
 800e79a:	466a      	mov	r2, sp
 800e79c:	f000 f848 	bl	800e830 <_fstat_r>
 800e7a0:	2800      	cmp	r0, #0
 800e7a2:	dbec      	blt.n	800e77e <__swhatbuf_r+0x12>
 800e7a4:	9901      	ldr	r1, [sp, #4]
 800e7a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e7aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e7ae:	4259      	negs	r1, r3
 800e7b0:	4159      	adcs	r1, r3
 800e7b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e7b6:	e7eb      	b.n	800e790 <__swhatbuf_r+0x24>

0800e7b8 <__smakebuf_r>:
 800e7b8:	898b      	ldrh	r3, [r1, #12]
 800e7ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7bc:	079d      	lsls	r5, r3, #30
 800e7be:	4606      	mov	r6, r0
 800e7c0:	460c      	mov	r4, r1
 800e7c2:	d507      	bpl.n	800e7d4 <__smakebuf_r+0x1c>
 800e7c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e7c8:	6023      	str	r3, [r4, #0]
 800e7ca:	6123      	str	r3, [r4, #16]
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	6163      	str	r3, [r4, #20]
 800e7d0:	b003      	add	sp, #12
 800e7d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7d4:	ab01      	add	r3, sp, #4
 800e7d6:	466a      	mov	r2, sp
 800e7d8:	f7ff ffc8 	bl	800e76c <__swhatbuf_r>
 800e7dc:	9f00      	ldr	r7, [sp, #0]
 800e7de:	4605      	mov	r5, r0
 800e7e0:	4639      	mov	r1, r7
 800e7e2:	4630      	mov	r0, r6
 800e7e4:	f7ff f938 	bl	800da58 <_malloc_r>
 800e7e8:	b948      	cbnz	r0, 800e7fe <__smakebuf_r+0x46>
 800e7ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7ee:	059a      	lsls	r2, r3, #22
 800e7f0:	d4ee      	bmi.n	800e7d0 <__smakebuf_r+0x18>
 800e7f2:	f023 0303 	bic.w	r3, r3, #3
 800e7f6:	f043 0302 	orr.w	r3, r3, #2
 800e7fa:	81a3      	strh	r3, [r4, #12]
 800e7fc:	e7e2      	b.n	800e7c4 <__smakebuf_r+0xc>
 800e7fe:	89a3      	ldrh	r3, [r4, #12]
 800e800:	6020      	str	r0, [r4, #0]
 800e802:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e806:	81a3      	strh	r3, [r4, #12]
 800e808:	9b01      	ldr	r3, [sp, #4]
 800e80a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e80e:	b15b      	cbz	r3, 800e828 <__smakebuf_r+0x70>
 800e810:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e814:	4630      	mov	r0, r6
 800e816:	f000 f81d 	bl	800e854 <_isatty_r>
 800e81a:	b128      	cbz	r0, 800e828 <__smakebuf_r+0x70>
 800e81c:	89a3      	ldrh	r3, [r4, #12]
 800e81e:	f023 0303 	bic.w	r3, r3, #3
 800e822:	f043 0301 	orr.w	r3, r3, #1
 800e826:	81a3      	strh	r3, [r4, #12]
 800e828:	89a3      	ldrh	r3, [r4, #12]
 800e82a:	431d      	orrs	r5, r3
 800e82c:	81a5      	strh	r5, [r4, #12]
 800e82e:	e7cf      	b.n	800e7d0 <__smakebuf_r+0x18>

0800e830 <_fstat_r>:
 800e830:	b538      	push	{r3, r4, r5, lr}
 800e832:	4d07      	ldr	r5, [pc, #28]	@ (800e850 <_fstat_r+0x20>)
 800e834:	2300      	movs	r3, #0
 800e836:	4604      	mov	r4, r0
 800e838:	4608      	mov	r0, r1
 800e83a:	4611      	mov	r1, r2
 800e83c:	602b      	str	r3, [r5, #0]
 800e83e:	f7f3 fb50 	bl	8001ee2 <_fstat>
 800e842:	1c43      	adds	r3, r0, #1
 800e844:	d102      	bne.n	800e84c <_fstat_r+0x1c>
 800e846:	682b      	ldr	r3, [r5, #0]
 800e848:	b103      	cbz	r3, 800e84c <_fstat_r+0x1c>
 800e84a:	6023      	str	r3, [r4, #0]
 800e84c:	bd38      	pop	{r3, r4, r5, pc}
 800e84e:	bf00      	nop
 800e850:	200024d0 	.word	0x200024d0

0800e854 <_isatty_r>:
 800e854:	b538      	push	{r3, r4, r5, lr}
 800e856:	4d06      	ldr	r5, [pc, #24]	@ (800e870 <_isatty_r+0x1c>)
 800e858:	2300      	movs	r3, #0
 800e85a:	4604      	mov	r4, r0
 800e85c:	4608      	mov	r0, r1
 800e85e:	602b      	str	r3, [r5, #0]
 800e860:	f7f3 fb4f 	bl	8001f02 <_isatty>
 800e864:	1c43      	adds	r3, r0, #1
 800e866:	d102      	bne.n	800e86e <_isatty_r+0x1a>
 800e868:	682b      	ldr	r3, [r5, #0]
 800e86a:	b103      	cbz	r3, 800e86e <_isatty_r+0x1a>
 800e86c:	6023      	str	r3, [r4, #0]
 800e86e:	bd38      	pop	{r3, r4, r5, pc}
 800e870:	200024d0 	.word	0x200024d0

0800e874 <_init>:
 800e874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e876:	bf00      	nop
 800e878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e87a:	bc08      	pop	{r3}
 800e87c:	469e      	mov	lr, r3
 800e87e:	4770      	bx	lr

0800e880 <_fini>:
 800e880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e882:	bf00      	nop
 800e884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e886:	bc08      	pop	{r3}
 800e888:	469e      	mov	lr, r3
 800e88a:	4770      	bx	lr
