
AlphaFlight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dca0  080001e0  080001e0  000011e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800de80  0800de80  0000ee80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800defc  0800defc  0000f15c  2**0
                  CONTENTS
  4 .ARM          00000008  0800defc  0800defc  0000eefc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df04  0800df04  0000f15c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df04  0800df04  0000ef04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800df08  0800df08  0000ef08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000015c  20000000  0800df0c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023b8  2000015c  0800e068  0000f15c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002514  0800e068  0000f514  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f15c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002507d  00000000  00000000  0000f18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000526d  00000000  00000000  00034209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fd8  00000000  00000000  00039478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000189b  00000000  00000000  0003b450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000299c3  00000000  00000000  0003cceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029e54  00000000  00000000  000666ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee7cc  00000000  00000000  00090502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017ecce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008958  00000000  00000000  0017ed14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0018766c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000015c 	.word	0x2000015c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800de68 	.word	0x0800de68

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000160 	.word	0x20000160
 800021c:	0800de68 	.word	0x0800de68

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <CRSF_Init>:

CRSF_Data_t crsf_data = {0};  // Struct instance to hold CRSF channel data
static UART_HandleTypeDef *crsf_huart;  // Pointer to UART handler
static uint8_t crsf_rx_buffer[CRSF_BUFFER_SIZE];  // DMA buffer

void CRSF_Init(UART_HandleTypeDef *huart) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
    crsf_huart = huart;
 8000518:	4a06      	ldr	r2, [pc, #24]	@ (8000534 <CRSF_Init+0x24>)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_DMA(crsf_huart, crsf_rx_buffer, CRSF_BUFFER_SIZE);  // Start UART DMA
 800051e:	4b05      	ldr	r3, [pc, #20]	@ (8000534 <CRSF_Init+0x24>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2240      	movs	r2, #64	@ 0x40
 8000524:	4904      	ldr	r1, [pc, #16]	@ (8000538 <CRSF_Init+0x28>)
 8000526:	4618      	mov	r0, r3
 8000528:	f007 fcf8 	bl	8007f1c <HAL_UART_Receive_DMA>
}
 800052c:	bf00      	nop
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000198 	.word	0x20000198
 8000538:	2000019c 	.word	0x2000019c

0800053c <CRSF_GetRxCount>:

// Get received byte count in DMA buffer
static uint16_t CRSF_GetRxCount() {
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
    return CRSF_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(crsf_huart->hdmarx);
 8000540:	4b06      	ldr	r3, [pc, #24]	@ (800055c <CRSF_GetRxCount+0x20>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	b29b      	uxth	r3, r3
 800054c:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000550:	b29b      	uxth	r3, r3
}
 8000552:	4618      	mov	r0, r3
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	20000198 	.word	0x20000198

08000560 <CRSF_DecodeChannels>:

// Decode CRSF channel data
static void CRSF_DecodeChannels(uint8_t *data) {
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
    crsf_data.channels[0]  = (data[0] | data[1] << 8) & 0x07FF;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	b21a      	sxth	r2, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	3301      	adds	r3, #1
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	021b      	lsls	r3, r3, #8
 8000576:	b21b      	sxth	r3, r3
 8000578:	4313      	orrs	r3, r2
 800057a:	b21b      	sxth	r3, r3
 800057c:	b29b      	uxth	r3, r3
 800057e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000582:	b29a      	uxth	r2, r3
 8000584:	4b75      	ldr	r3, [pc, #468]	@ (800075c <CRSF_DecodeChannels+0x1fc>)
 8000586:	801a      	strh	r2, [r3, #0]
    crsf_data.channels[1]  = (data[1] >> 3 | data[2] << 5) & 0x07FF;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	3301      	adds	r3, #1
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	08db      	lsrs	r3, r3, #3
 8000590:	b2db      	uxtb	r3, r3
 8000592:	b21a      	sxth	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	3302      	adds	r3, #2
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	015b      	lsls	r3, r3, #5
 800059c:	b21b      	sxth	r3, r3
 800059e:	4313      	orrs	r3, r2
 80005a0:	b21b      	sxth	r3, r3
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	4b6c      	ldr	r3, [pc, #432]	@ (800075c <CRSF_DecodeChannels+0x1fc>)
 80005ac:	805a      	strh	r2, [r3, #2]
    crsf_data.channels[2]  = (data[2] >> 6 | data[3] << 2 | data[4] << 10) & 0x07FF;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	3302      	adds	r3, #2
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	099b      	lsrs	r3, r3, #6
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	b21a      	sxth	r2, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	3303      	adds	r3, #3
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	b21b      	sxth	r3, r3
 80005c4:	4313      	orrs	r3, r2
 80005c6:	b21a      	sxth	r2, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	3304      	adds	r3, #4
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	029b      	lsls	r3, r3, #10
 80005d0:	b21b      	sxth	r3, r3
 80005d2:	4313      	orrs	r3, r2
 80005d4:	b21b      	sxth	r3, r3
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80005dc:	b29a      	uxth	r2, r3
 80005de:	4b5f      	ldr	r3, [pc, #380]	@ (800075c <CRSF_DecodeChannels+0x1fc>)
 80005e0:	809a      	strh	r2, [r3, #4]
    crsf_data.channels[3]  = (data[4] >> 1 | data[5] << 7) & 0x07FF;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	3304      	adds	r3, #4
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	085b      	lsrs	r3, r3, #1
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	b21a      	sxth	r2, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	3305      	adds	r3, #5
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	01db      	lsls	r3, r3, #7
 80005f6:	b21b      	sxth	r3, r3
 80005f8:	4313      	orrs	r3, r2
 80005fa:	b21b      	sxth	r3, r3
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000602:	b29a      	uxth	r2, r3
 8000604:	4b55      	ldr	r3, [pc, #340]	@ (800075c <CRSF_DecodeChannels+0x1fc>)
 8000606:	80da      	strh	r2, [r3, #6]
    crsf_data.channels[4]  = (data[5] >> 4 | data[6] << 4) & 0x07FF;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3305      	adds	r3, #5
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	091b      	lsrs	r3, r3, #4
 8000610:	b2db      	uxtb	r3, r3
 8000612:	b21a      	sxth	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	3306      	adds	r3, #6
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	011b      	lsls	r3, r3, #4
 800061c:	b21b      	sxth	r3, r3
 800061e:	4313      	orrs	r3, r2
 8000620:	b21b      	sxth	r3, r3
 8000622:	b29b      	uxth	r3, r3
 8000624:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000628:	b29a      	uxth	r2, r3
 800062a:	4b4c      	ldr	r3, [pc, #304]	@ (800075c <CRSF_DecodeChannels+0x1fc>)
 800062c:	811a      	strh	r2, [r3, #8]
    crsf_data.channels[5]  = (data[6] >> 7 | data[7] << 1 | data[8] << 9) & 0x07FF;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3306      	adds	r3, #6
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	09db      	lsrs	r3, r3, #7
 8000636:	b2db      	uxtb	r3, r3
 8000638:	b21a      	sxth	r2, r3
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	3307      	adds	r3, #7
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	b21b      	sxth	r3, r3
 8000644:	4313      	orrs	r3, r2
 8000646:	b21a      	sxth	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	3308      	adds	r3, #8
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	025b      	lsls	r3, r3, #9
 8000650:	b21b      	sxth	r3, r3
 8000652:	4313      	orrs	r3, r2
 8000654:	b21b      	sxth	r3, r3
 8000656:	b29b      	uxth	r3, r3
 8000658:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800065c:	b29a      	uxth	r2, r3
 800065e:	4b3f      	ldr	r3, [pc, #252]	@ (800075c <CRSF_DecodeChannels+0x1fc>)
 8000660:	815a      	strh	r2, [r3, #10]
    crsf_data.channels[6]  = (data[8] >> 2 | data[9] << 6) & 0x07FF;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	3308      	adds	r3, #8
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	089b      	lsrs	r3, r3, #2
 800066a:	b2db      	uxtb	r3, r3
 800066c:	b21a      	sxth	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	3309      	adds	r3, #9
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	019b      	lsls	r3, r3, #6
 8000676:	b21b      	sxth	r3, r3
 8000678:	4313      	orrs	r3, r2
 800067a:	b21b      	sxth	r3, r3
 800067c:	b29b      	uxth	r3, r3
 800067e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000682:	b29a      	uxth	r2, r3
 8000684:	4b35      	ldr	r3, [pc, #212]	@ (800075c <CRSF_DecodeChannels+0x1fc>)
 8000686:	819a      	strh	r2, [r3, #12]
    crsf_data.channels[7]  = (data[9] >> 5 | data[10] << 3) & 0x07FF;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	3309      	adds	r3, #9
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	095b      	lsrs	r3, r3, #5
 8000690:	b2db      	uxtb	r3, r3
 8000692:	b21a      	sxth	r2, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	330a      	adds	r3, #10
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	00db      	lsls	r3, r3, #3
 800069c:	b21b      	sxth	r3, r3
 800069e:	4313      	orrs	r3, r2
 80006a0:	b21b      	sxth	r3, r3
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80006a8:	b29a      	uxth	r2, r3
 80006aa:	4b2c      	ldr	r3, [pc, #176]	@ (800075c <CRSF_DecodeChannels+0x1fc>)
 80006ac:	81da      	strh	r2, [r3, #14]
    crsf_data.channels[8]  = (data[11] | data[12] << 8) & 0x07FF;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	330b      	adds	r3, #11
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	b21a      	sxth	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	330c      	adds	r3, #12
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	021b      	lsls	r3, r3, #8
 80006be:	b21b      	sxth	r3, r3
 80006c0:	4313      	orrs	r3, r2
 80006c2:	b21b      	sxth	r3, r3
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	4b23      	ldr	r3, [pc, #140]	@ (800075c <CRSF_DecodeChannels+0x1fc>)
 80006ce:	821a      	strh	r2, [r3, #16]
    crsf_data.channels[9]  = (data[12] >> 3 | data[13] << 5) & 0x07FF;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	330c      	adds	r3, #12
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	08db      	lsrs	r3, r3, #3
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	b21a      	sxth	r2, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	330d      	adds	r3, #13
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	015b      	lsls	r3, r3, #5
 80006e4:	b21b      	sxth	r3, r3
 80006e6:	4313      	orrs	r3, r2
 80006e8:	b21b      	sxth	r3, r3
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <CRSF_DecodeChannels+0x1fc>)
 80006f4:	825a      	strh	r2, [r3, #18]
    crsf_data.channels[10] = (data[13] >> 6 | data[14] << 2 | data[15] << 10) & 0x07FF;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	330d      	adds	r3, #13
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	099b      	lsrs	r3, r3, #6
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	b21a      	sxth	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	330e      	adds	r3, #14
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	b21b      	sxth	r3, r3
 800070c:	4313      	orrs	r3, r2
 800070e:	b21a      	sxth	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	330f      	adds	r3, #15
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	029b      	lsls	r3, r3, #10
 8000718:	b21b      	sxth	r3, r3
 800071a:	4313      	orrs	r3, r2
 800071c:	b21b      	sxth	r3, r3
 800071e:	b29b      	uxth	r3, r3
 8000720:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000724:	b29a      	uxth	r2, r3
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <CRSF_DecodeChannels+0x1fc>)
 8000728:	829a      	strh	r2, [r3, #20]
    crsf_data.channels[11] = (data[15] >> 1 | data[16] << 7) & 0x07FF;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	330f      	adds	r3, #15
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	085b      	lsrs	r3, r3, #1
 8000732:	b2db      	uxtb	r3, r3
 8000734:	b21a      	sxth	r2, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	3310      	adds	r3, #16
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	01db      	lsls	r3, r3, #7
 800073e:	b21b      	sxth	r3, r3
 8000740:	4313      	orrs	r3, r2
 8000742:	b21b      	sxth	r3, r3
 8000744:	b29b      	uxth	r3, r3
 8000746:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800074a:	b29a      	uxth	r2, r3
 800074c:	4b03      	ldr	r3, [pc, #12]	@ (800075c <CRSF_DecodeChannels+0x1fc>)
 800074e:	82da      	strh	r2, [r3, #22]
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	20000178 	.word	0x20000178

08000760 <CRSF_Process>:

// Process CRSF data in main loop
void CRSF_Process() {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
    uint16_t bytes_received = CRSF_GetRxCount();
 8000766:	f7ff fee9 	bl	800053c <CRSF_GetRxCount>
 800076a:	4603      	mov	r3, r0
 800076c:	80bb      	strh	r3, [r7, #4]
    if (bytes_received < 3) return;  // Not enough data for a CRSF packet
 800076e:	88bb      	ldrh	r3, [r7, #4]
 8000770:	2b02      	cmp	r3, #2
 8000772:	d92b      	bls.n	80007cc <CRSF_Process+0x6c>

    for (uint16_t i = 0; i < bytes_received - 2; i++) {
 8000774:	2300      	movs	r3, #0
 8000776:	80fb      	strh	r3, [r7, #6]
 8000778:	e022      	b.n	80007c0 <CRSF_Process+0x60>
        if (crsf_rx_buffer[i] == 0xEA) {  // Start of an RC packet
 800077a:	88fb      	ldrh	r3, [r7, #6]
 800077c:	4a15      	ldr	r2, [pc, #84]	@ (80007d4 <CRSF_Process+0x74>)
 800077e:	5cd3      	ldrb	r3, [r2, r3]
 8000780:	2bea      	cmp	r3, #234	@ 0xea
 8000782:	d11a      	bne.n	80007ba <CRSF_Process+0x5a>
            uint8_t length = crsf_rx_buffer[i + 1];
 8000784:	88fb      	ldrh	r3, [r7, #6]
 8000786:	3301      	adds	r3, #1
 8000788:	4a12      	ldr	r2, [pc, #72]	@ (80007d4 <CRSF_Process+0x74>)
 800078a:	5cd3      	ldrb	r3, [r2, r3]
 800078c:	70fb      	strb	r3, [r7, #3]
            if (length <= (bytes_received - i - 2)) {  // Check if full packet is available
 800078e:	88ba      	ldrh	r2, [r7, #4]
 8000790:	88fb      	ldrh	r3, [r7, #6]
 8000792:	1ad3      	subs	r3, r2, r3
 8000794:	1e5a      	subs	r2, r3, #1
 8000796:	78fb      	ldrb	r3, [r7, #3]
 8000798:	429a      	cmp	r2, r3
 800079a:	dd0e      	ble.n	80007ba <CRSF_Process+0x5a>
                uint8_t type = crsf_rx_buffer[i + 2];
 800079c:	88fb      	ldrh	r3, [r7, #6]
 800079e:	3302      	adds	r3, #2
 80007a0:	4a0c      	ldr	r2, [pc, #48]	@ (80007d4 <CRSF_Process+0x74>)
 80007a2:	5cd3      	ldrb	r3, [r2, r3]
 80007a4:	70bb      	strb	r3, [r7, #2]
                if (type == 0x16) {  // RC Channel Data
 80007a6:	78bb      	ldrb	r3, [r7, #2]
 80007a8:	2b16      	cmp	r3, #22
 80007aa:	d106      	bne.n	80007ba <CRSF_Process+0x5a>
                    CRSF_DecodeChannels(&crsf_rx_buffer[i + 3]);  // Extract channel values
 80007ac:	88fb      	ldrh	r3, [r7, #6]
 80007ae:	3303      	adds	r3, #3
 80007b0:	4a08      	ldr	r2, [pc, #32]	@ (80007d4 <CRSF_Process+0x74>)
 80007b2:	4413      	add	r3, r2
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff fed3 	bl	8000560 <CRSF_DecodeChannels>
    for (uint16_t i = 0; i < bytes_received - 2; i++) {
 80007ba:	88fb      	ldrh	r3, [r7, #6]
 80007bc:	3301      	adds	r3, #1
 80007be:	80fb      	strh	r3, [r7, #6]
 80007c0:	88fa      	ldrh	r2, [r7, #6]
 80007c2:	88bb      	ldrh	r3, [r7, #4]
 80007c4:	3b02      	subs	r3, #2
 80007c6:	429a      	cmp	r2, r3
 80007c8:	dbd7      	blt.n	800077a <CRSF_Process+0x1a>
 80007ca:	e000      	b.n	80007ce <CRSF_Process+0x6e>
    if (bytes_received < 3) return;  // Not enough data for a CRSF packet
 80007cc:	bf00      	nop
                }
            }
        }
    }
}
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	2000019c 	.word	0x2000019c

080007d8 <HAL_UART_RxCpltCallback>:
    if (channel >= NUM_CHANNELS) return 1500;  // Return midpoint if out of range
    return 988 + ((crsf_data.channels[channel] * 988) / 2047);  // Scale to 1000-2000µs
}

// Optional: Restart DMA when transmission is complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
    if (huart == crsf_huart) {
 80007e0:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <HAL_UART_RxCpltCallback+0x2c>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	687a      	ldr	r2, [r7, #4]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d108      	bne.n	80007fc <HAL_UART_RxCpltCallback+0x24>
        CRSF_Process();
 80007ea:	f7ff ffb9 	bl	8000760 <CRSF_Process>
        HAL_UART_Receive_DMA(crsf_huart, crsf_rx_buffer, CRSF_BUFFER_SIZE);  // Restart DMA
 80007ee:	4b05      	ldr	r3, [pc, #20]	@ (8000804 <HAL_UART_RxCpltCallback+0x2c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2240      	movs	r2, #64	@ 0x40
 80007f4:	4904      	ldr	r1, [pc, #16]	@ (8000808 <HAL_UART_RxCpltCallback+0x30>)
 80007f6:	4618      	mov	r0, r3
 80007f8:	f007 fb90 	bl	8007f1c <HAL_UART_Receive_DMA>
    }
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000198 	.word	0x20000198
 8000808:	2000019c 	.word	0x2000019c

0800080c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000810:	f000 fd1e 	bl	8001250 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000814:	f001 fb89 	bl	8001f2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000818:	f000 f84c 	bl	80008b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081c:	f000 fc46 	bl	80010ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000820:	f000 fbea 	bl	8000ff8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000824:	f000 fb28 	bl	8000e78 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000828:	f000 fb56 	bl	8000ed8 <MX_USART2_UART_Init>
  MX_SDMMC1_SD_Init();
 800082c:	f000 f942 	bl	8000ab4 <MX_SDMMC1_SD_Init>
  MX_USART6_UART_Init();
 8000830:	f000 fbb2 	bl	8000f98 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 8000834:	f000 f960 	bl	8000af8 <MX_SPI1_Init>
  MX_I2C1_Init();
 8000838:	f000 f8fc 	bl	8000a34 <MX_I2C1_Init>
  MX_SPI2_Init();
 800083c:	f000 f99a 	bl	8000b74 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000840:	f000 f9d6 	bl	8000bf0 <MX_TIM1_Init>
  MX_UART4_Init();
 8000844:	f000 fae8 	bl	8000e18 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8000848:	f000 fb76 	bl	8000f38 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800084c:	f000 f8a0 	bl	8000990 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000850:	f000 faac 	bl	8000dac <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 8000854:	f00c fc58 	bl	800d108 <MX_USB_DEVICE_Init>
  MX_FATFS_Init();
 8000858:	f00a faa0 	bl	800ad9c <MX_FATFS_Init>
  MX_TIM2_Init();
 800085c:	f000 fa58 	bl	8000d10 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  CRSF_Init(&huart1);
 8000860:	4812      	ldr	r0, [pc, #72]	@ (80008ac <main+0xa0>)
 8000862:	f7ff fe55 	bl	8000510 <CRSF_Init>
	printf("Read at: %ld\n", __HAL_TIM_GET_COUNTER(&htim2));
	char message[64];
	snprintf(message, sizeof(message), "Hello, World!");
	CDC_Transmit_FS((uint8_t *)message, strlen(message));
	HAL_Delay(100);*/
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000866:	2201      	movs	r2, #1
 8000868:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800086c:	4810      	ldr	r0, [pc, #64]	@ (80008b0 <main+0xa4>)
 800086e:	f002 fd27 	bl	80032c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000878:	480d      	ldr	r0, [pc, #52]	@ (80008b0 <main+0xa4>)
 800087a:	f002 fd21 	bl	80032c0 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800087e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000882:	f001 fbaf 	bl	8001fe4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800088c:	4808      	ldr	r0, [pc, #32]	@ (80008b0 <main+0xa4>)
 800088e:	f002 fd17 	bl	80032c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000892:	2201      	movs	r2, #1
 8000894:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000898:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <main+0xa4>)
 800089a:	f002 fd11 	bl	80032c0 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800089e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008a2:	f001 fb9f 	bl	8001fe4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80008a6:	bf00      	nop
 80008a8:	e7dd      	b.n	8000866 <main+0x5a>
 80008aa:	bf00      	nop
 80008ac:	20000590 	.word	0x20000590
 80008b0:	40020400 	.word	0x40020400

080008b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b094      	sub	sp, #80	@ 0x50
 80008b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ba:	f107 0320 	add.w	r3, r7, #32
 80008be:	2230      	movs	r2, #48	@ 0x30
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f00d fa42 	bl	800dd4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000988 <SystemClock_Config+0xd4>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008dc:	4a2a      	ldr	r2, [pc, #168]	@ (8000988 <SystemClock_Config+0xd4>)
 80008de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80008e4:	4b28      	ldr	r3, [pc, #160]	@ (8000988 <SystemClock_Config+0xd4>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f0:	4b26      	ldr	r3, [pc, #152]	@ (800098c <SystemClock_Config+0xd8>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a25      	ldr	r2, [pc, #148]	@ (800098c <SystemClock_Config+0xd8>)
 80008f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008fa:	6013      	str	r3, [r2, #0]
 80008fc:	4b23      	ldr	r3, [pc, #140]	@ (800098c <SystemClock_Config+0xd8>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000908:	2301      	movs	r3, #1
 800090a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800090c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000912:	2302      	movs	r3, #2
 8000914:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000916:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800091a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800091c:	2304      	movs	r3, #4
 800091e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000920:	23d8      	movs	r3, #216	@ 0xd8
 8000922:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000924:	2302      	movs	r3, #2
 8000926:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000928:	2309      	movs	r3, #9
 800092a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092c:	f107 0320 	add.w	r3, r7, #32
 8000930:	4618      	mov	r0, r3
 8000932:	f004 f8eb 	bl	8004b0c <HAL_RCC_OscConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800093c:	f000 fcb4 	bl	80012a8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000940:	f004 f894 	bl	8004a6c <HAL_PWREx_EnableOverDrive>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800094a:	f000 fcad 	bl	80012a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094e:	230f      	movs	r3, #15
 8000950:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000952:	2302      	movs	r3, #2
 8000954:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800095a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800095e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000960:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000964:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	2107      	movs	r1, #7
 800096c:	4618      	mov	r0, r3
 800096e:	f004 fb71 	bl	8005054 <HAL_RCC_ClockConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000978:	f000 fc96 	bl	80012a8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800097c:	f004 fc56 	bl	800522c <HAL_RCC_EnableCSS>
}
 8000980:	bf00      	nop
 8000982:	3750      	adds	r7, #80	@ 0x50
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40023800 	.word	0x40023800
 800098c:	40007000 	.word	0x40007000

08000990 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000996:	463b      	mov	r3, r7
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009a2:	4b21      	ldr	r3, [pc, #132]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009a4:	4a21      	ldr	r2, [pc, #132]	@ (8000a2c <MX_ADC1_Init+0x9c>)
 80009a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80009ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009c2:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009ca:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009d0:	4b15      	ldr	r3, [pc, #84]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009d2:	4a17      	ldr	r2, [pc, #92]	@ (8000a30 <MX_ADC1_Init+0xa0>)
 80009d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009d6:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009d8:	2200      	movs	r2, #0
 80009da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009dc:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009de:	2201      	movs	r2, #1
 80009e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009e2:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009f0:	480d      	ldr	r0, [pc, #52]	@ (8000a28 <MX_ADC1_Init+0x98>)
 80009f2:	f001 fb1b 	bl	800202c <HAL_ADC_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80009fc:	f000 fc54 	bl	80012a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a00:	230a      	movs	r3, #10
 8000a02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a04:	2301      	movs	r3, #1
 8000a06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	@ (8000a28 <MX_ADC1_Init+0x98>)
 8000a12:	f001 fb4f 	bl	80020b4 <HAL_ADC_ConfigChannel>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a1c:	f000 fc44 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	200001dc 	.word	0x200001dc
 8000a2c:	40012000 	.word	0x40012000
 8000a30:	0f000001 	.word	0x0f000001

08000a34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a38:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000aac <MX_I2C1_Init+0x78>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a40:	4a1b      	ldr	r2, [pc, #108]	@ (8000ab0 <MX_I2C1_Init+0x7c>)
 8000a42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a44:	4b18      	ldr	r3, [pc, #96]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a4a:	4b17      	ldr	r3, [pc, #92]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a50:	4b15      	ldr	r3, [pc, #84]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a56:	4b14      	ldr	r3, [pc, #80]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a62:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a6e:	480e      	ldr	r0, [pc, #56]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a70:	f002 fc40 	bl	80032f4 <HAL_I2C_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a7a:	f000 fc15 	bl	80012a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4809      	ldr	r0, [pc, #36]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a82:	f002 fcd3 	bl	800342c <HAL_I2CEx_ConfigAnalogFilter>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a8c:	f000 fc0c 	bl	80012a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a90:	2100      	movs	r1, #0
 8000a92:	4805      	ldr	r0, [pc, #20]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a94:	f002 fd15 	bl	80034c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a9e:	f000 fc03 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000224 	.word	0x20000224
 8000aac:	40005400 	.word	0x40005400
 8000ab0:	20404768 	.word	0x20404768

08000ab4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8000af0 <MX_SDMMC1_SD_Init+0x3c>)
 8000aba:	4a0e      	ldr	r2, [pc, #56]	@ (8000af4 <MX_SDMMC1_SD_Init+0x40>)
 8000abc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000abe:	4b0c      	ldr	r3, [pc, #48]	@ (8000af0 <MX_SDMMC1_SD_Init+0x3c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8000af0 <MX_SDMMC1_SD_Init+0x3c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000aca:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <MX_SDMMC1_SD_Init+0x3c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000ad0:	4b07      	ldr	r3, [pc, #28]	@ (8000af0 <MX_SDMMC1_SD_Init+0x3c>)
 8000ad2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ad6:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ad8:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <MX_SDMMC1_SD_Init+0x3c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000ade:	4b04      	ldr	r3, [pc, #16]	@ (8000af0 <MX_SDMMC1_SD_Init+0x3c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000278 	.word	0x20000278
 8000af4:	40012c00 	.word	0x40012c00

08000af8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <MX_SPI1_Init+0x74>)
 8000afe:	4a1c      	ldr	r2, [pc, #112]	@ (8000b70 <MX_SPI1_Init+0x78>)
 8000b00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <MX_SPI1_Init+0x74>)
 8000b04:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b0a:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <MX_SPI1_Init+0x74>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b10:	4b16      	ldr	r3, [pc, #88]	@ (8000b6c <MX_SPI1_Init+0x74>)
 8000b12:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000b16:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b18:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <MX_SPI1_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <MX_SPI1_Init+0x74>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b24:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <MX_SPI1_Init+0x74>)
 8000b26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b2a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <MX_SPI1_Init+0x74>)
 8000b2e:	2228      	movs	r2, #40	@ 0x28
 8000b30:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	@ (8000b6c <MX_SPI1_Init+0x74>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <MX_SPI1_Init+0x74>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <MX_SPI1_Init+0x74>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b44:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <MX_SPI1_Init+0x74>)
 8000b46:	2207      	movs	r2, #7
 8000b48:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b4a:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <MX_SPI1_Init+0x74>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b50:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <MX_SPI1_Init+0x74>)
 8000b52:	2208      	movs	r2, #8
 8000b54:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b56:	4805      	ldr	r0, [pc, #20]	@ (8000b6c <MX_SPI1_Init+0x74>)
 8000b58:	f006 f9ab 	bl	8006eb2 <HAL_SPI_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b62:	f000 fba1 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200002fc 	.word	0x200002fc
 8000b70:	40013000 	.word	0x40013000

08000b74 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b78:	4b1b      	ldr	r3, [pc, #108]	@ (8000be8 <MX_SPI2_Init+0x74>)
 8000b7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000bec <MX_SPI2_Init+0x78>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000be8 <MX_SPI2_Init+0x74>)
 8000b80:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b84:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b86:	4b18      	ldr	r3, [pc, #96]	@ (8000be8 <MX_SPI2_Init+0x74>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b8c:	4b16      	ldr	r3, [pc, #88]	@ (8000be8 <MX_SPI2_Init+0x74>)
 8000b8e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000b92:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b94:	4b14      	ldr	r3, [pc, #80]	@ (8000be8 <MX_SPI2_Init+0x74>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b9a:	4b13      	ldr	r3, [pc, #76]	@ (8000be8 <MX_SPI2_Init+0x74>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <MX_SPI2_Init+0x74>)
 8000ba2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ba6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8000be8 <MX_SPI2_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <MX_SPI2_Init+0x74>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <MX_SPI2_Init+0x74>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <MX_SPI2_Init+0x74>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <MX_SPI2_Init+0x74>)
 8000bc2:	2207      	movs	r2, #7
 8000bc4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	@ (8000be8 <MX_SPI2_Init+0x74>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <MX_SPI2_Init+0x74>)
 8000bce:	2208      	movs	r2, #8
 8000bd0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bd2:	4805      	ldr	r0, [pc, #20]	@ (8000be8 <MX_SPI2_Init+0x74>)
 8000bd4:	f006 f96d 	bl	8006eb2 <HAL_SPI_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000bde:	f000 fb63 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000360 	.word	0x20000360
 8000bec:	40003800 	.word	0x40003800

08000bf0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b096      	sub	sp, #88	@ 0x58
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c02:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]
 8000c12:	615a      	str	r2, [r3, #20]
 8000c14:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	222c      	movs	r2, #44	@ 0x2c
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f00d f895 	bl	800dd4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c22:	4b39      	ldr	r3, [pc, #228]	@ (8000d08 <MX_TIM1_Init+0x118>)
 8000c24:	4a39      	ldr	r2, [pc, #228]	@ (8000d0c <MX_TIM1_Init+0x11c>)
 8000c26:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c28:	4b37      	ldr	r3, [pc, #220]	@ (8000d08 <MX_TIM1_Init+0x118>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2e:	4b36      	ldr	r3, [pc, #216]	@ (8000d08 <MX_TIM1_Init+0x118>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c34:	4b34      	ldr	r3, [pc, #208]	@ (8000d08 <MX_TIM1_Init+0x118>)
 8000c36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3c:	4b32      	ldr	r3, [pc, #200]	@ (8000d08 <MX_TIM1_Init+0x118>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c42:	4b31      	ldr	r3, [pc, #196]	@ (8000d08 <MX_TIM1_Init+0x118>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c48:	4b2f      	ldr	r3, [pc, #188]	@ (8000d08 <MX_TIM1_Init+0x118>)
 8000c4a:	2280      	movs	r2, #128	@ 0x80
 8000c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c4e:	482e      	ldr	r0, [pc, #184]	@ (8000d08 <MX_TIM1_Init+0x118>)
 8000c50:	f006 fa31 	bl	80070b6 <HAL_TIM_PWM_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000c5a:	f000 fb25 	bl	80012a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c62:	2300      	movs	r3, #0
 8000c64:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c6a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4825      	ldr	r0, [pc, #148]	@ (8000d08 <MX_TIM1_Init+0x118>)
 8000c72:	f006 fff9 	bl	8007c68 <HAL_TIMEx_MasterConfigSynchronization>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000c7c:	f000 fb14 	bl	80012a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c80:	2360      	movs	r3, #96	@ 0x60
 8000c82:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c94:	2300      	movs	r3, #0
 8000c96:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c9c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4818      	ldr	r0, [pc, #96]	@ (8000d08 <MX_TIM1_Init+0x118>)
 8000ca6:	f006 fa5d 	bl	8007164 <HAL_TIM_PWM_ConfigChannel>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000cb0:	f000 fafa 	bl	80012a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cc8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ccc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000cd6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000cda:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4807      	ldr	r0, [pc, #28]	@ (8000d08 <MX_TIM1_Init+0x118>)
 8000cea:	f007 f84b 	bl	8007d84 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000cf4:	f000 fad8 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cf8:	4803      	ldr	r0, [pc, #12]	@ (8000d08 <MX_TIM1_Init+0x118>)
 8000cfa:	f000 fd3d 	bl	8001778 <HAL_TIM_MspPostInit>

}
 8000cfe:	bf00      	nop
 8000d00:	3758      	adds	r7, #88	@ 0x58
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200003c4 	.word	0x200003c4
 8000d0c:	40010000 	.word	0x40010000

08000d10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d16:	f107 0310 	add.w	r3, r7, #16
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000da8 <MX_TIM2_Init+0x98>)
 8000d30:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d34:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8000d36:	4b1c      	ldr	r3, [pc, #112]	@ (8000da8 <MX_TIM2_Init+0x98>)
 8000d38:	226b      	movs	r2, #107	@ 0x6b
 8000d3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000da8 <MX_TIM2_Init+0x98>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d42:	4b19      	ldr	r3, [pc, #100]	@ (8000da8 <MX_TIM2_Init+0x98>)
 8000d44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4a:	4b17      	ldr	r3, [pc, #92]	@ (8000da8 <MX_TIM2_Init+0x98>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d50:	4b15      	ldr	r3, [pc, #84]	@ (8000da8 <MX_TIM2_Init+0x98>)
 8000d52:	2280      	movs	r2, #128	@ 0x80
 8000d54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d56:	4814      	ldr	r0, [pc, #80]	@ (8000da8 <MX_TIM2_Init+0x98>)
 8000d58:	f006 f956 	bl	8007008 <HAL_TIM_Base_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d62:	f000 faa1 	bl	80012a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	4619      	mov	r1, r3
 8000d72:	480d      	ldr	r0, [pc, #52]	@ (8000da8 <MX_TIM2_Init+0x98>)
 8000d74:	f006 fb0a 	bl	800738c <HAL_TIM_ConfigClockSource>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d7e:	f000 fa93 	bl	80012a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4806      	ldr	r0, [pc, #24]	@ (8000da8 <MX_TIM2_Init+0x98>)
 8000d90:	f006 ff6a 	bl	8007c68 <HAL_TIMEx_MasterConfigSynchronization>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d9a:	f000 fa85 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d9e:	bf00      	nop
 8000da0:	3720      	adds	r7, #32
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000410 	.word	0x20000410

08000dac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000dbc:	4b14      	ldr	r3, [pc, #80]	@ (8000e10 <MX_TIM6_Init+0x64>)
 8000dbe:	4a15      	ldr	r2, [pc, #84]	@ (8000e14 <MX_TIM6_Init+0x68>)
 8000dc0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000dc2:	4b13      	ldr	r3, [pc, #76]	@ (8000e10 <MX_TIM6_Init+0x64>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <MX_TIM6_Init+0x64>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000dce:	4b10      	ldr	r3, [pc, #64]	@ (8000e10 <MX_TIM6_Init+0x64>)
 8000dd0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dd4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e10 <MX_TIM6_Init+0x64>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ddc:	480c      	ldr	r0, [pc, #48]	@ (8000e10 <MX_TIM6_Init+0x64>)
 8000dde:	f006 f913 	bl	8007008 <HAL_TIM_Base_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000de8:	f000 fa5e 	bl	80012a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dec:	2300      	movs	r3, #0
 8000dee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	4619      	mov	r1, r3
 8000df8:	4805      	ldr	r0, [pc, #20]	@ (8000e10 <MX_TIM6_Init+0x64>)
 8000dfa:	f006 ff35 	bl	8007c68 <HAL_TIMEx_MasterConfigSynchronization>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000e04:	f000 fa50 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e08:	bf00      	nop
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	2000045c 	.word	0x2000045c
 8000e14:	40001000 	.word	0x40001000

08000e18 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000e1c:	4b14      	ldr	r3, [pc, #80]	@ (8000e70 <MX_UART4_Init+0x58>)
 8000e1e:	4a15      	ldr	r2, [pc, #84]	@ (8000e74 <MX_UART4_Init+0x5c>)
 8000e20:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000e22:	4b13      	ldr	r3, [pc, #76]	@ (8000e70 <MX_UART4_Init+0x58>)
 8000e24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e28:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2a:	4b11      	ldr	r3, [pc, #68]	@ (8000e70 <MX_UART4_Init+0x58>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	@ (8000e70 <MX_UART4_Init+0x58>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	@ (8000e70 <MX_UART4_Init+0x58>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <MX_UART4_Init+0x58>)
 8000e3e:	220c      	movs	r2, #12
 8000e40:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	@ (8000e70 <MX_UART4_Init+0x58>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e48:	4b09      	ldr	r3, [pc, #36]	@ (8000e70 <MX_UART4_Init+0x58>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e4e:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <MX_UART4_Init+0x58>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e54:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <MX_UART4_Init+0x58>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000e5a:	4805      	ldr	r0, [pc, #20]	@ (8000e70 <MX_UART4_Init+0x58>)
 8000e5c:	f007 f810 	bl	8007e80 <HAL_UART_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000e66:	f000 fa1f 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000508 	.word	0x20000508
 8000e74:	40004c00 	.word	0x40004c00

08000e78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e7c:	4b14      	ldr	r3, [pc, #80]	@ (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000e7e:	4a15      	ldr	r2, [pc, #84]	@ (8000ed4 <MX_USART1_UART_Init+0x5c>)
 8000e80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e82:	4b13      	ldr	r3, [pc, #76]	@ (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000e84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea8:	4b09      	ldr	r3, [pc, #36]	@ (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eae:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eba:	4805      	ldr	r0, [pc, #20]	@ (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000ebc:	f006 ffe0 	bl	8007e80 <HAL_UART_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ec6:	f000 f9ef 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000590 	.word	0x20000590
 8000ed4:	40011000 	.word	0x40011000

08000ed8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000edc:	4b14      	ldr	r3, [pc, #80]	@ (8000f30 <MX_USART2_UART_Init+0x58>)
 8000ede:	4a15      	ldr	r2, [pc, #84]	@ (8000f34 <MX_USART2_UART_Init+0x5c>)
 8000ee0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ee2:	4b13      	ldr	r3, [pc, #76]	@ (8000f30 <MX_USART2_UART_Init+0x58>)
 8000ee4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ee8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eea:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <MX_USART2_UART_Init+0x58>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f30 <MX_USART2_UART_Init+0x58>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f30 <MX_USART2_UART_Init+0x58>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000efc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f30 <MX_USART2_UART_Init+0x58>)
 8000efe:	220c      	movs	r2, #12
 8000f00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f02:	4b0b      	ldr	r3, [pc, #44]	@ (8000f30 <MX_USART2_UART_Init+0x58>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f08:	4b09      	ldr	r3, [pc, #36]	@ (8000f30 <MX_USART2_UART_Init+0x58>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f0e:	4b08      	ldr	r3, [pc, #32]	@ (8000f30 <MX_USART2_UART_Init+0x58>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <MX_USART2_UART_Init+0x58>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f1a:	4805      	ldr	r0, [pc, #20]	@ (8000f30 <MX_USART2_UART_Init+0x58>)
 8000f1c:	f006 ffb0 	bl	8007e80 <HAL_UART_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f26:	f000 f9bf 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000618 	.word	0x20000618
 8000f34:	40004400 	.word	0x40004400

08000f38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f3c:	4b14      	ldr	r3, [pc, #80]	@ (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f3e:	4a15      	ldr	r2, [pc, #84]	@ (8000f94 <MX_USART3_UART_Init+0x5c>)
 8000f40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f42:	4b13      	ldr	r3, [pc, #76]	@ (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	@ (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f5e:	220c      	movs	r2, #12
 8000f60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f62:	4b0b      	ldr	r3, [pc, #44]	@ (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f68:	4b09      	ldr	r3, [pc, #36]	@ (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f6e:	4b08      	ldr	r3, [pc, #32]	@ (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f7a:	4805      	ldr	r0, [pc, #20]	@ (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f7c:	f006 ff80 	bl	8007e80 <HAL_UART_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f86:	f000 f98f 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200006a0 	.word	0x200006a0
 8000f94:	40004800 	.word	0x40004800

08000f98 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f9c:	4b14      	ldr	r3, [pc, #80]	@ (8000ff0 <MX_USART6_UART_Init+0x58>)
 8000f9e:	4a15      	ldr	r2, [pc, #84]	@ (8000ff4 <MX_USART6_UART_Init+0x5c>)
 8000fa0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000fa2:	4b13      	ldr	r3, [pc, #76]	@ (8000ff0 <MX_USART6_UART_Init+0x58>)
 8000fa4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fa8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000faa:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <MX_USART6_UART_Init+0x58>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <MX_USART6_UART_Init+0x58>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff0 <MX_USART6_UART_Init+0x58>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff0 <MX_USART6_UART_Init+0x58>)
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <MX_USART6_UART_Init+0x58>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc8:	4b09      	ldr	r3, [pc, #36]	@ (8000ff0 <MX_USART6_UART_Init+0x58>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fce:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <MX_USART6_UART_Init+0x58>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <MX_USART6_UART_Init+0x58>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000fda:	4805      	ldr	r0, [pc, #20]	@ (8000ff0 <MX_USART6_UART_Init+0x58>)
 8000fdc:	f006 ff50 	bl	8007e80 <HAL_UART_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000fe6:	f000 f95f 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000728 	.word	0x20000728
 8000ff4:	40011400 	.word	0x40011400

08000ff8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ffe:	4b2a      	ldr	r3, [pc, #168]	@ (80010a8 <MX_DMA_Init+0xb0>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	4a29      	ldr	r2, [pc, #164]	@ (80010a8 <MX_DMA_Init+0xb0>)
 8001004:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001008:	6313      	str	r3, [r2, #48]	@ 0x30
 800100a:	4b27      	ldr	r3, [pc, #156]	@ (80010a8 <MX_DMA_Init+0xb0>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001016:	4b24      	ldr	r3, [pc, #144]	@ (80010a8 <MX_DMA_Init+0xb0>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	4a23      	ldr	r2, [pc, #140]	@ (80010a8 <MX_DMA_Init+0xb0>)
 800101c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001020:	6313      	str	r3, [r2, #48]	@ 0x30
 8001022:	4b21      	ldr	r3, [pc, #132]	@ (80010a8 <MX_DMA_Init+0xb0>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	200c      	movs	r0, #12
 8001034:	f001 fb69 	bl	800270a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001038:	200c      	movs	r0, #12
 800103a:	f001 fb82 	bl	8002742 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2100      	movs	r1, #0
 8001042:	200d      	movs	r0, #13
 8001044:	f001 fb61 	bl	800270a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001048:	200d      	movs	r0, #13
 800104a:	f001 fb7a 	bl	8002742 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2100      	movs	r1, #0
 8001052:	2010      	movs	r0, #16
 8001054:	f001 fb59 	bl	800270a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001058:	2010      	movs	r0, #16
 800105a:	f001 fb72 	bl	8002742 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	2039      	movs	r0, #57	@ 0x39
 8001064:	f001 fb51 	bl	800270a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001068:	2039      	movs	r0, #57	@ 0x39
 800106a:	f001 fb6a 	bl	8002742 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	203a      	movs	r0, #58	@ 0x3a
 8001074:	f001 fb49 	bl	800270a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001078:	203a      	movs	r0, #58	@ 0x3a
 800107a:	f001 fb62 	bl	8002742 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	203b      	movs	r0, #59	@ 0x3b
 8001084:	f001 fb41 	bl	800270a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001088:	203b      	movs	r0, #59	@ 0x3b
 800108a:	f001 fb5a 	bl	8002742 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	2046      	movs	r0, #70	@ 0x46
 8001094:	f001 fb39 	bl	800270a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001098:	2046      	movs	r0, #70	@ 0x46
 800109a:	f001 fb52 	bl	8002742 <HAL_NVIC_EnableIRQ>

}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	@ 0x28
 80010b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001240 <MX_GPIO_Init+0x194>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	4a5e      	ldr	r2, [pc, #376]	@ (8001240 <MX_GPIO_Init+0x194>)
 80010c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ce:	4b5c      	ldr	r3, [pc, #368]	@ (8001240 <MX_GPIO_Init+0x194>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	4b59      	ldr	r3, [pc, #356]	@ (8001240 <MX_GPIO_Init+0x194>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	4a58      	ldr	r2, [pc, #352]	@ (8001240 <MX_GPIO_Init+0x194>)
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e6:	4b56      	ldr	r3, [pc, #344]	@ (8001240 <MX_GPIO_Init+0x194>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	4b53      	ldr	r3, [pc, #332]	@ (8001240 <MX_GPIO_Init+0x194>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	4a52      	ldr	r2, [pc, #328]	@ (8001240 <MX_GPIO_Init+0x194>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fe:	4b50      	ldr	r3, [pc, #320]	@ (8001240 <MX_GPIO_Init+0x194>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110a:	4b4d      	ldr	r3, [pc, #308]	@ (8001240 <MX_GPIO_Init+0x194>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	4a4c      	ldr	r2, [pc, #304]	@ (8001240 <MX_GPIO_Init+0x194>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	6313      	str	r3, [r2, #48]	@ 0x30
 8001116:	4b4a      	ldr	r3, [pc, #296]	@ (8001240 <MX_GPIO_Init+0x194>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001122:	4b47      	ldr	r3, [pc, #284]	@ (8001240 <MX_GPIO_Init+0x194>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	4a46      	ldr	r2, [pc, #280]	@ (8001240 <MX_GPIO_Init+0x194>)
 8001128:	f043 0308 	orr.w	r3, r3, #8
 800112c:	6313      	str	r3, [r2, #48]	@ 0x30
 800112e:	4b44      	ldr	r3, [pc, #272]	@ (8001240 <MX_GPIO_Init+0x194>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	f003 0308 	and.w	r3, r3, #8
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_R_GPIO_Port, RGB_R_Pin, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	2108      	movs	r1, #8
 800113e:	4841      	ldr	r0, [pc, #260]	@ (8001244 <MX_GPIO_Init+0x198>)
 8001140:	f002 f8be 	bl	80032c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BARO_CS_GPIO_Port, BARO_CS_Pin, GPIO_PIN_SET);
 8001144:	2201      	movs	r2, #1
 8001146:	2110      	movs	r1, #16
 8001148:	483e      	ldr	r0, [pc, #248]	@ (8001244 <MX_GPIO_Init+0x198>)
 800114a:	f002 f8b9 	bl	80032c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GYRO_CS_Pin|ACCEL_CS_Pin|CS_EXT_3_Pin|CS_EXT_2_Pin
 800114e:	2201      	movs	r2, #1
 8001150:	213b      	movs	r1, #59	@ 0x3b
 8001152:	483d      	ldr	r0, [pc, #244]	@ (8001248 <MX_GPIO_Init+0x19c>)
 8001154:	f002 f8b4 	bl	80032c0 <HAL_GPIO_WritePin>
                          |CS_EXT_1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SERVO1_Pin|SERVO2_Pin|SERVO3_Pin|SERVO4_Pin
 8001158:	2200      	movs	r2, #0
 800115a:	f24d 3104 	movw	r1, #54020	@ 0xd304
 800115e:	483a      	ldr	r0, [pc, #232]	@ (8001248 <MX_GPIO_Init+0x19c>)
 8001160:	f002 f8ae 	bl	80032c0 <HAL_GPIO_WritePin>
                          |RGB_B_Pin|RGB_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SERVO7_Pin|SEVO5_Pin|SERVO6_Pin, GPIO_PIN_RESET);
 8001164:	2200      	movs	r2, #0
 8001166:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800116a:	4838      	ldr	r0, [pc, #224]	@ (800124c <MX_GPIO_Init+0x1a0>)
 800116c:	f002 f8a8 	bl	80032c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RGB_R_Pin */
  GPIO_InitStruct.Pin = RGB_R_Pin;
 8001170:	2308      	movs	r3, #8
 8001172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RGB_R_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4619      	mov	r1, r3
 8001186:	482f      	ldr	r0, [pc, #188]	@ (8001244 <MX_GPIO_Init+0x198>)
 8001188:	f001 fee6 	bl	8002f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CD_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 800118c:	2310      	movs	r3, #16
 800118e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001190:	2300      	movs	r3, #0
 8001192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001194:	2301      	movs	r3, #1
 8001196:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	4619      	mov	r1, r3
 800119e:	482b      	ldr	r0, [pc, #172]	@ (800124c <MX_GPIO_Init+0x1a0>)
 80011a0:	f001 feda 	bl	8002f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : BARO_CS_Pin */
  GPIO_InitStruct.Pin = BARO_CS_Pin;
 80011a4:	2310      	movs	r3, #16
 80011a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a8:	2301      	movs	r3, #1
 80011aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b0:	2300      	movs	r3, #0
 80011b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BARO_CS_GPIO_Port, &GPIO_InitStruct);
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	4619      	mov	r1, r3
 80011ba:	4822      	ldr	r0, [pc, #136]	@ (8001244 <MX_GPIO_Init+0x198>)
 80011bc:	f001 fecc 	bl	8002f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : GYRO_CS_Pin ACCEL_CS_Pin CS_EXT_3_Pin CS_EXT_2_Pin
                           CS_EXT_1_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin|ACCEL_CS_Pin|CS_EXT_3_Pin|CS_EXT_2_Pin
 80011c0:	233b      	movs	r3, #59	@ 0x3b
 80011c2:	617b      	str	r3, [r7, #20]
                          |CS_EXT_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c4:	2301      	movs	r3, #1
 80011c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2300      	movs	r3, #0
 80011ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	4619      	mov	r1, r3
 80011d6:	481c      	ldr	r0, [pc, #112]	@ (8001248 <MX_GPIO_Init+0x19c>)
 80011d8:	f001 febe 	bl	8002f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : SERVO1_Pin SERVO2_Pin SERVO3_Pin SERVO4_Pin */
  GPIO_InitStruct.Pin = SERVO1_Pin|SERVO2_Pin|SERVO3_Pin|SERVO4_Pin;
 80011dc:	f24d 0304 	movw	r3, #53252	@ 0xd004
 80011e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ea:	2303      	movs	r3, #3
 80011ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4814      	ldr	r0, [pc, #80]	@ (8001248 <MX_GPIO_Init+0x19c>)
 80011f6:	f001 feaf 	bl	8002f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : SERVO7_Pin SEVO5_Pin SERVO6_Pin */
  GPIO_InitStruct.Pin = SERVO7_Pin|SEVO5_Pin|SERVO6_Pin;
 80011fa:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80011fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001200:	2301      	movs	r3, #1
 8001202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001208:	2303      	movs	r3, #3
 800120a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	480e      	ldr	r0, [pc, #56]	@ (800124c <MX_GPIO_Init+0x1a0>)
 8001214:	f001 fea0 	bl	8002f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : RGB_B_Pin RGB_G_Pin */
  GPIO_InitStruct.Pin = RGB_B_Pin|RGB_G_Pin;
 8001218:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800121c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121e:	2301      	movs	r3, #1
 8001220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	4619      	mov	r1, r3
 8001230:	4805      	ldr	r0, [pc, #20]	@ (8001248 <MX_GPIO_Init+0x19c>)
 8001232:	f001 fe91 	bl	8002f58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001236:	bf00      	nop
 8001238:	3728      	adds	r7, #40	@ 0x28
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800
 8001244:	40020800 	.word	0x40020800
 8001248:	40020400 	.word	0x40020400
 800124c:	40020000 	.word	0x40020000

08001250 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001256:	463b      	mov	r3, r7
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001262:	f001 fa89 	bl	8002778 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001266:	2301      	movs	r3, #1
 8001268:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800126a:	2300      	movs	r3, #0
 800126c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001272:	231f      	movs	r3, #31
 8001274:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001276:	2387      	movs	r3, #135	@ 0x87
 8001278:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800127a:	2300      	movs	r3, #0
 800127c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800127e:	2300      	movs	r3, #0
 8001280:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001282:	2301      	movs	r3, #1
 8001284:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001286:	2301      	movs	r3, #1
 8001288:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001292:	463b      	mov	r3, r7
 8001294:	4618      	mov	r0, r3
 8001296:	f001 faa7 	bl	80027e8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800129a:	2004      	movs	r0, #4
 800129c:	f001 fa84 	bl	80027a8 <HAL_MPU_Enable>

}
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ac:	b672      	cpsid	i
}
 80012ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <Error_Handler+0x8>

080012b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80012ba:	4b0f      	ldr	r3, [pc, #60]	@ (80012f8 <HAL_MspInit+0x44>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012be:	4a0e      	ldr	r2, [pc, #56]	@ (80012f8 <HAL_MspInit+0x44>)
 80012c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012c6:	4b0c      	ldr	r3, [pc, #48]	@ (80012f8 <HAL_MspInit+0x44>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d2:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <HAL_MspInit+0x44>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d6:	4a08      	ldr	r2, [pc, #32]	@ (80012f8 <HAL_MspInit+0x44>)
 80012d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012de:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <HAL_MspInit+0x44>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800

080012fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	@ 0x28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a15      	ldr	r2, [pc, #84]	@ (8001370 <HAL_ADC_MspInit+0x74>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d123      	bne.n	8001366 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800131e:	4b15      	ldr	r3, [pc, #84]	@ (8001374 <HAL_ADC_MspInit+0x78>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001322:	4a14      	ldr	r2, [pc, #80]	@ (8001374 <HAL_ADC_MspInit+0x78>)
 8001324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001328:	6453      	str	r3, [r2, #68]	@ 0x44
 800132a:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <HAL_ADC_MspInit+0x78>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001336:	4b0f      	ldr	r3, [pc, #60]	@ (8001374 <HAL_ADC_MspInit+0x78>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	4a0e      	ldr	r2, [pc, #56]	@ (8001374 <HAL_ADC_MspInit+0x78>)
 800133c:	f043 0304 	orr.w	r3, r3, #4
 8001340:	6313      	str	r3, [r2, #48]	@ 0x30
 8001342:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <HAL_ADC_MspInit+0x78>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = VBAT_SENSE_Pin;
 800134e:	2301      	movs	r3, #1
 8001350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001352:	2303      	movs	r3, #3
 8001354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBAT_SENSE_GPIO_Port, &GPIO_InitStruct);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	4805      	ldr	r0, [pc, #20]	@ (8001378 <HAL_ADC_MspInit+0x7c>)
 8001362:	f001 fdf9 	bl	8002f58 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001366:	bf00      	nop
 8001368:	3728      	adds	r7, #40	@ 0x28
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40012000 	.word	0x40012000
 8001374:	40023800 	.word	0x40023800
 8001378:	40020800 	.word	0x40020800

0800137c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b0aa      	sub	sp, #168	@ 0xa8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	2280      	movs	r2, #128	@ 0x80
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f00c fcd5 	bl	800dd4c <memset>
  if(hi2c->Instance==I2C1)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a21      	ldr	r2, [pc, #132]	@ (800142c <HAL_I2C_MspInit+0xb0>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d13b      	bne.n	8001424 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013ac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80013b0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013b2:	2300      	movs	r3, #0
 80013b4:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	4618      	mov	r0, r3
 80013bc:	f004 f89c 	bl	80054f8 <HAL_RCCEx_PeriphCLKConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80013c6:	f7ff ff6f 	bl	80012a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ca:	4b19      	ldr	r3, [pc, #100]	@ (8001430 <HAL_I2C_MspInit+0xb4>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	4a18      	ldr	r2, [pc, #96]	@ (8001430 <HAL_I2C_MspInit+0xb4>)
 80013d0:	f043 0302 	orr.w	r3, r3, #2
 80013d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d6:	4b16      	ldr	r3, [pc, #88]	@ (8001430 <HAL_I2C_MspInit+0xb4>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013e2:	23c0      	movs	r3, #192	@ 0xc0
 80013e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013e8:	2312      	movs	r3, #18
 80013ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f4:	2303      	movs	r3, #3
 80013f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013fa:	2304      	movs	r3, #4
 80013fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001400:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001404:	4619      	mov	r1, r3
 8001406:	480b      	ldr	r0, [pc, #44]	@ (8001434 <HAL_I2C_MspInit+0xb8>)
 8001408:	f001 fda6 	bl	8002f58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800140c:	4b08      	ldr	r3, [pc, #32]	@ (8001430 <HAL_I2C_MspInit+0xb4>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001410:	4a07      	ldr	r2, [pc, #28]	@ (8001430 <HAL_I2C_MspInit+0xb4>)
 8001412:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001416:	6413      	str	r3, [r2, #64]	@ 0x40
 8001418:	4b05      	ldr	r3, [pc, #20]	@ (8001430 <HAL_I2C_MspInit+0xb4>)
 800141a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001424:	bf00      	nop
 8001426:	37a8      	adds	r7, #168	@ 0xa8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40005400 	.word	0x40005400
 8001430:	40023800 	.word	0x40023800
 8001434:	40020400 	.word	0x40020400

08001438 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b0aa      	sub	sp, #168	@ 0xa8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	2280      	movs	r2, #128	@ 0x80
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f00c fc77 	bl	800dd4c <memset>
  if(hsd->Instance==SDMMC1)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a34      	ldr	r2, [pc, #208]	@ (8001534 <HAL_SD_MspInit+0xfc>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d161      	bne.n	800152c <HAL_SD_MspInit+0xf4>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8001468:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 800146c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001474:	2300      	movs	r3, #0
 8001476:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4618      	mov	r0, r3
 8001480:	f004 f83a 	bl	80054f8 <HAL_RCCEx_PeriphCLKConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 800148a:	f7ff ff0d 	bl	80012a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800148e:	4b2a      	ldr	r3, [pc, #168]	@ (8001538 <HAL_SD_MspInit+0x100>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001492:	4a29      	ldr	r2, [pc, #164]	@ (8001538 <HAL_SD_MspInit+0x100>)
 8001494:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001498:	6453      	str	r3, [r2, #68]	@ 0x44
 800149a:	4b27      	ldr	r3, [pc, #156]	@ (8001538 <HAL_SD_MspInit+0x100>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a6:	4b24      	ldr	r3, [pc, #144]	@ (8001538 <HAL_SD_MspInit+0x100>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	4a23      	ldr	r2, [pc, #140]	@ (8001538 <HAL_SD_MspInit+0x100>)
 80014ac:	f043 0304 	orr.w	r3, r3, #4
 80014b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b2:	4b21      	ldr	r3, [pc, #132]	@ (8001538 <HAL_SD_MspInit+0x100>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014be:	4b1e      	ldr	r3, [pc, #120]	@ (8001538 <HAL_SD_MspInit+0x100>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	4a1d      	ldr	r2, [pc, #116]	@ (8001538 <HAL_SD_MspInit+0x100>)
 80014c4:	f043 0308 	orr.w	r3, r3, #8
 80014c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001538 <HAL_SD_MspInit+0x100>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80014d6:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80014da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014de:	2302      	movs	r3, #2
 80014e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ea:	2303      	movs	r3, #3
 80014ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80014f0:	230c      	movs	r3, #12
 80014f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80014fa:	4619      	mov	r1, r3
 80014fc:	480f      	ldr	r0, [pc, #60]	@ (800153c <HAL_SD_MspInit+0x104>)
 80014fe:	f001 fd2b 	bl	8002f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001502:	2304      	movs	r3, #4
 8001504:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001514:	2303      	movs	r3, #3
 8001516:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800151a:	230c      	movs	r3, #12
 800151c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001520:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001524:	4619      	mov	r1, r3
 8001526:	4806      	ldr	r0, [pc, #24]	@ (8001540 <HAL_SD_MspInit+0x108>)
 8001528:	f001 fd16 	bl	8002f58 <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 800152c:	bf00      	nop
 800152e:	37a8      	adds	r7, #168	@ 0xa8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40012c00 	.word	0x40012c00
 8001538:	40023800 	.word	0x40023800
 800153c:	40020800 	.word	0x40020800
 8001540:	40020c00 	.word	0x40020c00

08001544 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08c      	sub	sp, #48	@ 0x30
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a3c      	ldr	r2, [pc, #240]	@ (8001654 <HAL_SPI_MspInit+0x110>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d128      	bne.n	80015b8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001566:	4b3c      	ldr	r3, [pc, #240]	@ (8001658 <HAL_SPI_MspInit+0x114>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156a:	4a3b      	ldr	r2, [pc, #236]	@ (8001658 <HAL_SPI_MspInit+0x114>)
 800156c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001570:	6453      	str	r3, [r2, #68]	@ 0x44
 8001572:	4b39      	ldr	r3, [pc, #228]	@ (8001658 <HAL_SPI_MspInit+0x114>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001576:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800157a:	61bb      	str	r3, [r7, #24]
 800157c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157e:	4b36      	ldr	r3, [pc, #216]	@ (8001658 <HAL_SPI_MspInit+0x114>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a35      	ldr	r2, [pc, #212]	@ (8001658 <HAL_SPI_MspInit+0x114>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	4b33      	ldr	r3, [pc, #204]	@ (8001658 <HAL_SPI_MspInit+0x114>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001596:	23e0      	movs	r3, #224	@ 0xe0
 8001598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a2:	2303      	movs	r3, #3
 80015a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015a6:	2305      	movs	r3, #5
 80015a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015aa:	f107 031c 	add.w	r3, r7, #28
 80015ae:	4619      	mov	r1, r3
 80015b0:	482a      	ldr	r0, [pc, #168]	@ (800165c <HAL_SPI_MspInit+0x118>)
 80015b2:	f001 fcd1 	bl	8002f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80015b6:	e049      	b.n	800164c <HAL_SPI_MspInit+0x108>
  else if(hspi->Instance==SPI2)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a28      	ldr	r2, [pc, #160]	@ (8001660 <HAL_SPI_MspInit+0x11c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d144      	bne.n	800164c <HAL_SPI_MspInit+0x108>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015c2:	4b25      	ldr	r3, [pc, #148]	@ (8001658 <HAL_SPI_MspInit+0x114>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c6:	4a24      	ldr	r2, [pc, #144]	@ (8001658 <HAL_SPI_MspInit+0x114>)
 80015c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ce:	4b22      	ldr	r3, [pc, #136]	@ (8001658 <HAL_SPI_MspInit+0x114>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015da:	4b1f      	ldr	r3, [pc, #124]	@ (8001658 <HAL_SPI_MspInit+0x114>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	4a1e      	ldr	r2, [pc, #120]	@ (8001658 <HAL_SPI_MspInit+0x114>)
 80015e0:	f043 0304 	orr.w	r3, r3, #4
 80015e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001658 <HAL_SPI_MspInit+0x114>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	f003 0304 	and.w	r3, r3, #4
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f2:	4b19      	ldr	r3, [pc, #100]	@ (8001658 <HAL_SPI_MspInit+0x114>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	4a18      	ldr	r2, [pc, #96]	@ (8001658 <HAL_SPI_MspInit+0x114>)
 80015f8:	f043 0302 	orr.w	r3, r3, #2
 80015fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fe:	4b16      	ldr	r3, [pc, #88]	@ (8001658 <HAL_SPI_MspInit+0x114>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800160a:	2306      	movs	r3, #6
 800160c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800161a:	2305      	movs	r3, #5
 800161c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161e:	f107 031c 	add.w	r3, r7, #28
 8001622:	4619      	mov	r1, r3
 8001624:	480f      	ldr	r0, [pc, #60]	@ (8001664 <HAL_SPI_MspInit+0x120>)
 8001626:	f001 fc97 	bl	8002f58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800162a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800162e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800163c:	2305      	movs	r3, #5
 800163e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001640:	f107 031c 	add.w	r3, r7, #28
 8001644:	4619      	mov	r1, r3
 8001646:	4808      	ldr	r0, [pc, #32]	@ (8001668 <HAL_SPI_MspInit+0x124>)
 8001648:	f001 fc86 	bl	8002f58 <HAL_GPIO_Init>
}
 800164c:	bf00      	nop
 800164e:	3730      	adds	r7, #48	@ 0x30
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40013000 	.word	0x40013000
 8001658:	40023800 	.word	0x40023800
 800165c:	40020000 	.word	0x40020000
 8001660:	40003800 	.word	0x40003800
 8001664:	40020800 	.word	0x40020800
 8001668:	40020400 	.word	0x40020400

0800166c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a22      	ldr	r2, [pc, #136]	@ (8001704 <HAL_TIM_PWM_MspInit+0x98>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d13d      	bne.n	80016fa <HAL_TIM_PWM_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800167e:	4b22      	ldr	r3, [pc, #136]	@ (8001708 <HAL_TIM_PWM_MspInit+0x9c>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001682:	4a21      	ldr	r2, [pc, #132]	@ (8001708 <HAL_TIM_PWM_MspInit+0x9c>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6453      	str	r3, [r2, #68]	@ 0x44
 800168a:	4b1f      	ldr	r3, [pc, #124]	@ (8001708 <HAL_TIM_PWM_MspInit+0x9c>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream3;
 8001696:	4b1d      	ldr	r3, [pc, #116]	@ (800170c <HAL_TIM_PWM_MspInit+0xa0>)
 8001698:	4a1d      	ldr	r2, [pc, #116]	@ (8001710 <HAL_TIM_PWM_MspInit+0xa4>)
 800169a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 800169c:	4b1b      	ldr	r3, [pc, #108]	@ (800170c <HAL_TIM_PWM_MspInit+0xa0>)
 800169e:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80016a2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016a4:	4b19      	ldr	r3, [pc, #100]	@ (800170c <HAL_TIM_PWM_MspInit+0xa0>)
 80016a6:	2240      	movs	r2, #64	@ 0x40
 80016a8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016aa:	4b18      	ldr	r3, [pc, #96]	@ (800170c <HAL_TIM_PWM_MspInit+0xa0>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80016b0:	4b16      	ldr	r3, [pc, #88]	@ (800170c <HAL_TIM_PWM_MspInit+0xa0>)
 80016b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016b6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016b8:	4b14      	ldr	r3, [pc, #80]	@ (800170c <HAL_TIM_PWM_MspInit+0xa0>)
 80016ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016be:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016c0:	4b12      	ldr	r3, [pc, #72]	@ (800170c <HAL_TIM_PWM_MspInit+0xa0>)
 80016c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016c6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 80016c8:	4b10      	ldr	r3, [pc, #64]	@ (800170c <HAL_TIM_PWM_MspInit+0xa0>)
 80016ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016ce:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80016d0:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <HAL_TIM_PWM_MspInit+0xa0>)
 80016d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016d6:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <HAL_TIM_PWM_MspInit+0xa0>)
 80016da:	2200      	movs	r2, #0
 80016dc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80016de:	480b      	ldr	r0, [pc, #44]	@ (800170c <HAL_TIM_PWM_MspInit+0xa0>)
 80016e0:	f001 f8c2 	bl	8002868 <HAL_DMA_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 80016ea:	f7ff fddd 	bl	80012a8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a06      	ldr	r2, [pc, #24]	@ (800170c <HAL_TIM_PWM_MspInit+0xa0>)
 80016f2:	625a      	str	r2, [r3, #36]	@ 0x24
 80016f4:	4a05      	ldr	r2, [pc, #20]	@ (800170c <HAL_TIM_PWM_MspInit+0xa0>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80016fa:	bf00      	nop
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40010000 	.word	0x40010000
 8001708:	40023800 	.word	0x40023800
 800170c:	200004a8 	.word	0x200004a8
 8001710:	40026458 	.word	0x40026458

08001714 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001724:	d10c      	bne.n	8001740 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001726:	4b12      	ldr	r3, [pc, #72]	@ (8001770 <HAL_TIM_Base_MspInit+0x5c>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	4a11      	ldr	r2, [pc, #68]	@ (8001770 <HAL_TIM_Base_MspInit+0x5c>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6413      	str	r3, [r2, #64]	@ 0x40
 8001732:	4b0f      	ldr	r3, [pc, #60]	@ (8001770 <HAL_TIM_Base_MspInit+0x5c>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800173e:	e010      	b.n	8001762 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM6)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0b      	ldr	r2, [pc, #44]	@ (8001774 <HAL_TIM_Base_MspInit+0x60>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d10b      	bne.n	8001762 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800174a:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <HAL_TIM_Base_MspInit+0x5c>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174e:	4a08      	ldr	r2, [pc, #32]	@ (8001770 <HAL_TIM_Base_MspInit+0x5c>)
 8001750:	f043 0310 	orr.w	r3, r3, #16
 8001754:	6413      	str	r3, [r2, #64]	@ 0x40
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <HAL_TIM_Base_MspInit+0x5c>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	f003 0310 	and.w	r3, r3, #16
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
}
 8001762:	bf00      	nop
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800
 8001774:	40001000 	.word	0x40001000

08001778 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 030c 	add.w	r3, r7, #12
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a11      	ldr	r2, [pc, #68]	@ (80017dc <HAL_TIM_MspPostInit+0x64>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d11c      	bne.n	80017d4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	4b11      	ldr	r3, [pc, #68]	@ (80017e0 <HAL_TIM_MspPostInit+0x68>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a10      	ldr	r2, [pc, #64]	@ (80017e0 <HAL_TIM_MspPostInit+0x68>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b0e      	ldr	r3, [pc, #56]	@ (80017e0 <HAL_TIM_MspPostInit+0x68>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DSHOT_PIN_Pin;
 80017b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b8:	2302      	movs	r3, #2
 80017ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c0:	2303      	movs	r3, #3
 80017c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017c4:	2301      	movs	r3, #1
 80017c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DSHOT_PIN_GPIO_Port, &GPIO_InitStruct);
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	4619      	mov	r1, r3
 80017ce:	4805      	ldr	r0, [pc, #20]	@ (80017e4 <HAL_TIM_MspPostInit+0x6c>)
 80017d0:	f001 fbc2 	bl	8002f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017d4:	bf00      	nop
 80017d6:	3720      	adds	r7, #32
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40010000 	.word	0x40010000
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40020000 	.word	0x40020000

080017e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b0b2      	sub	sp, #200	@ 0xc8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001800:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001804:	2280      	movs	r2, #128	@ 0x80
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f00c fa9f 	bl	800dd4c <memset>
  if(huart->Instance==UART4)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a89      	ldr	r2, [pc, #548]	@ (8001a38 <HAL_UART_MspInit+0x250>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d16b      	bne.n	80018f0 <HAL_UART_MspInit+0x108>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001818:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800181c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800181e:	2300      	movs	r3, #0
 8001820:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001822:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001826:	4618      	mov	r0, r3
 8001828:	f003 fe66 	bl	80054f8 <HAL_RCCEx_PeriphCLKConfig>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001832:	f7ff fd39 	bl	80012a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001836:	4b81      	ldr	r3, [pc, #516]	@ (8001a3c <HAL_UART_MspInit+0x254>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183a:	4a80      	ldr	r2, [pc, #512]	@ (8001a3c <HAL_UART_MspInit+0x254>)
 800183c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001840:	6413      	str	r3, [r2, #64]	@ 0x40
 8001842:	4b7e      	ldr	r3, [pc, #504]	@ (8001a3c <HAL_UART_MspInit+0x254>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001846:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800184a:	633b      	str	r3, [r7, #48]	@ 0x30
 800184c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	4b7b      	ldr	r3, [pc, #492]	@ (8001a3c <HAL_UART_MspInit+0x254>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	4a7a      	ldr	r2, [pc, #488]	@ (8001a3c <HAL_UART_MspInit+0x254>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6313      	str	r3, [r2, #48]	@ 0x30
 800185a:	4b78      	ldr	r3, [pc, #480]	@ (8001a3c <HAL_UART_MspInit+0x254>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001866:	2303      	movs	r3, #3
 8001868:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001878:	2303      	movs	r3, #3
 800187a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800187e:	2308      	movs	r3, #8
 8001880:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001884:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001888:	4619      	mov	r1, r3
 800188a:	486d      	ldr	r0, [pc, #436]	@ (8001a40 <HAL_UART_MspInit+0x258>)
 800188c:	f001 fb64 	bl	8002f58 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001890:	4b6c      	ldr	r3, [pc, #432]	@ (8001a44 <HAL_UART_MspInit+0x25c>)
 8001892:	4a6d      	ldr	r2, [pc, #436]	@ (8001a48 <HAL_UART_MspInit+0x260>)
 8001894:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001896:	4b6b      	ldr	r3, [pc, #428]	@ (8001a44 <HAL_UART_MspInit+0x25c>)
 8001898:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800189c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800189e:	4b69      	ldr	r3, [pc, #420]	@ (8001a44 <HAL_UART_MspInit+0x25c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018a4:	4b67      	ldr	r3, [pc, #412]	@ (8001a44 <HAL_UART_MspInit+0x25c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018aa:	4b66      	ldr	r3, [pc, #408]	@ (8001a44 <HAL_UART_MspInit+0x25c>)
 80018ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018b0:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018b2:	4b64      	ldr	r3, [pc, #400]	@ (8001a44 <HAL_UART_MspInit+0x25c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018b8:	4b62      	ldr	r3, [pc, #392]	@ (8001a44 <HAL_UART_MspInit+0x25c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80018be:	4b61      	ldr	r3, [pc, #388]	@ (8001a44 <HAL_UART_MspInit+0x25c>)
 80018c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018c4:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018c6:	4b5f      	ldr	r3, [pc, #380]	@ (8001a44 <HAL_UART_MspInit+0x25c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018cc:	4b5d      	ldr	r3, [pc, #372]	@ (8001a44 <HAL_UART_MspInit+0x25c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80018d2:	485c      	ldr	r0, [pc, #368]	@ (8001a44 <HAL_UART_MspInit+0x25c>)
 80018d4:	f000 ffc8 	bl	8002868 <HAL_DMA_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 80018de:	f7ff fce3 	bl	80012a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a57      	ldr	r2, [pc, #348]	@ (8001a44 <HAL_UART_MspInit+0x25c>)
 80018e6:	675a      	str	r2, [r3, #116]	@ 0x74
 80018e8:	4a56      	ldr	r2, [pc, #344]	@ (8001a44 <HAL_UART_MspInit+0x25c>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80018ee:	e20a      	b.n	8001d06 <HAL_UART_MspInit+0x51e>
  else if(huart->Instance==USART1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a55      	ldr	r2, [pc, #340]	@ (8001a4c <HAL_UART_MspInit+0x264>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	f040 80b2 	bne.w	8001a60 <HAL_UART_MspInit+0x278>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018fc:	2340      	movs	r3, #64	@ 0x40
 80018fe:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001900:	2300      	movs	r3, #0
 8001902:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001904:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001908:	4618      	mov	r0, r3
 800190a:	f003 fdf5 	bl	80054f8 <HAL_RCCEx_PeriphCLKConfig>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8001914:	f7ff fcc8 	bl	80012a8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001918:	4b48      	ldr	r3, [pc, #288]	@ (8001a3c <HAL_UART_MspInit+0x254>)
 800191a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191c:	4a47      	ldr	r2, [pc, #284]	@ (8001a3c <HAL_UART_MspInit+0x254>)
 800191e:	f043 0310 	orr.w	r3, r3, #16
 8001922:	6453      	str	r3, [r2, #68]	@ 0x44
 8001924:	4b45      	ldr	r3, [pc, #276]	@ (8001a3c <HAL_UART_MspInit+0x254>)
 8001926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001928:	f003 0310 	and.w	r3, r3, #16
 800192c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800192e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001930:	4b42      	ldr	r3, [pc, #264]	@ (8001a3c <HAL_UART_MspInit+0x254>)
 8001932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001934:	4a41      	ldr	r2, [pc, #260]	@ (8001a3c <HAL_UART_MspInit+0x254>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6313      	str	r3, [r2, #48]	@ 0x30
 800193c:	4b3f      	ldr	r3, [pc, #252]	@ (8001a3c <HAL_UART_MspInit+0x254>)
 800193e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	627b      	str	r3, [r7, #36]	@ 0x24
 8001946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001948:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800194c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195c:	2303      	movs	r3, #3
 800195e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001962:	2307      	movs	r3, #7
 8001964:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001968:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800196c:	4619      	mov	r1, r3
 800196e:	4834      	ldr	r0, [pc, #208]	@ (8001a40 <HAL_UART_MspInit+0x258>)
 8001970:	f001 faf2 	bl	8002f58 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001974:	4b36      	ldr	r3, [pc, #216]	@ (8001a50 <HAL_UART_MspInit+0x268>)
 8001976:	4a37      	ldr	r2, [pc, #220]	@ (8001a54 <HAL_UART_MspInit+0x26c>)
 8001978:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800197a:	4b35      	ldr	r3, [pc, #212]	@ (8001a50 <HAL_UART_MspInit+0x268>)
 800197c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001980:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001982:	4b33      	ldr	r3, [pc, #204]	@ (8001a50 <HAL_UART_MspInit+0x268>)
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001988:	4b31      	ldr	r3, [pc, #196]	@ (8001a50 <HAL_UART_MspInit+0x268>)
 800198a:	2200      	movs	r2, #0
 800198c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800198e:	4b30      	ldr	r3, [pc, #192]	@ (8001a50 <HAL_UART_MspInit+0x268>)
 8001990:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001994:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001996:	4b2e      	ldr	r3, [pc, #184]	@ (8001a50 <HAL_UART_MspInit+0x268>)
 8001998:	2200      	movs	r2, #0
 800199a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800199c:	4b2c      	ldr	r3, [pc, #176]	@ (8001a50 <HAL_UART_MspInit+0x268>)
 800199e:	2200      	movs	r2, #0
 80019a0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80019a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a50 <HAL_UART_MspInit+0x268>)
 80019a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019a8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80019aa:	4b29      	ldr	r3, [pc, #164]	@ (8001a50 <HAL_UART_MspInit+0x268>)
 80019ac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019b0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019b2:	4b27      	ldr	r3, [pc, #156]	@ (8001a50 <HAL_UART_MspInit+0x268>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80019b8:	4825      	ldr	r0, [pc, #148]	@ (8001a50 <HAL_UART_MspInit+0x268>)
 80019ba:	f000 ff55 	bl	8002868 <HAL_DMA_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 80019c4:	f7ff fc70 	bl	80012a8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a21      	ldr	r2, [pc, #132]	@ (8001a50 <HAL_UART_MspInit+0x268>)
 80019cc:	675a      	str	r2, [r3, #116]	@ 0x74
 80019ce:	4a20      	ldr	r2, [pc, #128]	@ (8001a50 <HAL_UART_MspInit+0x268>)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80019d4:	4b20      	ldr	r3, [pc, #128]	@ (8001a58 <HAL_UART_MspInit+0x270>)
 80019d6:	4a21      	ldr	r2, [pc, #132]	@ (8001a5c <HAL_UART_MspInit+0x274>)
 80019d8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80019da:	4b1f      	ldr	r3, [pc, #124]	@ (8001a58 <HAL_UART_MspInit+0x270>)
 80019dc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80019e0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a58 <HAL_UART_MspInit+0x270>)
 80019e4:	2240      	movs	r2, #64	@ 0x40
 80019e6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a58 <HAL_UART_MspInit+0x270>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001a58 <HAL_UART_MspInit+0x270>)
 80019f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019f4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019f6:	4b18      	ldr	r3, [pc, #96]	@ (8001a58 <HAL_UART_MspInit+0x270>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019fc:	4b16      	ldr	r3, [pc, #88]	@ (8001a58 <HAL_UART_MspInit+0x270>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8001a02:	4b15      	ldr	r3, [pc, #84]	@ (8001a58 <HAL_UART_MspInit+0x270>)
 8001a04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a08:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001a0a:	4b13      	ldr	r3, [pc, #76]	@ (8001a58 <HAL_UART_MspInit+0x270>)
 8001a0c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a10:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a12:	4b11      	ldr	r3, [pc, #68]	@ (8001a58 <HAL_UART_MspInit+0x270>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001a18:	480f      	ldr	r0, [pc, #60]	@ (8001a58 <HAL_UART_MspInit+0x270>)
 8001a1a:	f000 ff25 	bl	8002868 <HAL_DMA_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_UART_MspInit+0x240>
      Error_Handler();
 8001a24:	f7ff fc40 	bl	80012a8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a58 <HAL_UART_MspInit+0x270>)
 8001a2c:	671a      	str	r2, [r3, #112]	@ 0x70
 8001a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a58 <HAL_UART_MspInit+0x270>)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001a34:	e167      	b.n	8001d06 <HAL_UART_MspInit+0x51e>
 8001a36:	bf00      	nop
 8001a38:	40004c00 	.word	0x40004c00
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40020000 	.word	0x40020000
 8001a44:	200007b0 	.word	0x200007b0
 8001a48:	40026040 	.word	0x40026040
 8001a4c:	40011000 	.word	0x40011000
 8001a50:	20000810 	.word	0x20000810
 8001a54:	40026440 	.word	0x40026440
 8001a58:	20000870 	.word	0x20000870
 8001a5c:	400264b8 	.word	0x400264b8
  else if(huart->Instance==USART2)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4aaa      	ldr	r2, [pc, #680]	@ (8001d10 <HAL_UART_MspInit+0x528>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d16a      	bne.n	8001b40 <HAL_UART_MspInit+0x358>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a6a:	2380      	movs	r3, #128	@ 0x80
 8001a6c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a72:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001a76:	4618      	mov	r0, r3
 8001a78:	f003 fd3e 	bl	80054f8 <HAL_RCCEx_PeriphCLKConfig>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <HAL_UART_MspInit+0x29e>
      Error_Handler();
 8001a82:	f7ff fc11 	bl	80012a8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a86:	4ba3      	ldr	r3, [pc, #652]	@ (8001d14 <HAL_UART_MspInit+0x52c>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	4aa2      	ldr	r2, [pc, #648]	@ (8001d14 <HAL_UART_MspInit+0x52c>)
 8001a8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a92:	4ba0      	ldr	r3, [pc, #640]	@ (8001d14 <HAL_UART_MspInit+0x52c>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9a:	623b      	str	r3, [r7, #32]
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9e:	4b9d      	ldr	r3, [pc, #628]	@ (8001d14 <HAL_UART_MspInit+0x52c>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	4a9c      	ldr	r2, [pc, #624]	@ (8001d14 <HAL_UART_MspInit+0x52c>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aaa:	4b9a      	ldr	r3, [pc, #616]	@ (8001d14 <HAL_UART_MspInit+0x52c>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	61fb      	str	r3, [r7, #28]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ab6:	230c      	movs	r3, #12
 8001ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abc:	2302      	movs	r3, #2
 8001abe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ace:	2307      	movs	r3, #7
 8001ad0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad4:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001ad8:	4619      	mov	r1, r3
 8001ada:	488f      	ldr	r0, [pc, #572]	@ (8001d18 <HAL_UART_MspInit+0x530>)
 8001adc:	f001 fa3c 	bl	8002f58 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001ae0:	4b8e      	ldr	r3, [pc, #568]	@ (8001d1c <HAL_UART_MspInit+0x534>)
 8001ae2:	4a8f      	ldr	r2, [pc, #572]	@ (8001d20 <HAL_UART_MspInit+0x538>)
 8001ae4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001ae6:	4b8d      	ldr	r3, [pc, #564]	@ (8001d1c <HAL_UART_MspInit+0x534>)
 8001ae8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001aec:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aee:	4b8b      	ldr	r3, [pc, #556]	@ (8001d1c <HAL_UART_MspInit+0x534>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af4:	4b89      	ldr	r3, [pc, #548]	@ (8001d1c <HAL_UART_MspInit+0x534>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001afa:	4b88      	ldr	r3, [pc, #544]	@ (8001d1c <HAL_UART_MspInit+0x534>)
 8001afc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b00:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b02:	4b86      	ldr	r3, [pc, #536]	@ (8001d1c <HAL_UART_MspInit+0x534>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b08:	4b84      	ldr	r3, [pc, #528]	@ (8001d1c <HAL_UART_MspInit+0x534>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001b0e:	4b83      	ldr	r3, [pc, #524]	@ (8001d1c <HAL_UART_MspInit+0x534>)
 8001b10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b14:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b16:	4b81      	ldr	r3, [pc, #516]	@ (8001d1c <HAL_UART_MspInit+0x534>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b1c:	4b7f      	ldr	r3, [pc, #508]	@ (8001d1c <HAL_UART_MspInit+0x534>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b22:	487e      	ldr	r0, [pc, #504]	@ (8001d1c <HAL_UART_MspInit+0x534>)
 8001b24:	f000 fea0 	bl	8002868 <HAL_DMA_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_UART_MspInit+0x34a>
      Error_Handler();
 8001b2e:	f7ff fbbb 	bl	80012a8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a79      	ldr	r2, [pc, #484]	@ (8001d1c <HAL_UART_MspInit+0x534>)
 8001b36:	675a      	str	r2, [r3, #116]	@ 0x74
 8001b38:	4a78      	ldr	r2, [pc, #480]	@ (8001d1c <HAL_UART_MspInit+0x534>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001b3e:	e0e2      	b.n	8001d06 <HAL_UART_MspInit+0x51e>
  else if(huart->Instance==USART3)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a77      	ldr	r2, [pc, #476]	@ (8001d24 <HAL_UART_MspInit+0x53c>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d16c      	bne.n	8001c24 <HAL_UART_MspInit+0x43c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b4e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b50:	2300      	movs	r3, #0
 8001b52:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b54:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f003 fccd 	bl	80054f8 <HAL_RCCEx_PeriphCLKConfig>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <HAL_UART_MspInit+0x380>
      Error_Handler();
 8001b64:	f7ff fba0 	bl	80012a8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b68:	4b6a      	ldr	r3, [pc, #424]	@ (8001d14 <HAL_UART_MspInit+0x52c>)
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6c:	4a69      	ldr	r2, [pc, #420]	@ (8001d14 <HAL_UART_MspInit+0x52c>)
 8001b6e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b72:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b74:	4b67      	ldr	r3, [pc, #412]	@ (8001d14 <HAL_UART_MspInit+0x52c>)
 8001b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b7c:	61bb      	str	r3, [r7, #24]
 8001b7e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b80:	4b64      	ldr	r3, [pc, #400]	@ (8001d14 <HAL_UART_MspInit+0x52c>)
 8001b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b84:	4a63      	ldr	r2, [pc, #396]	@ (8001d14 <HAL_UART_MspInit+0x52c>)
 8001b86:	f043 0302 	orr.w	r3, r3, #2
 8001b8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b8c:	4b61      	ldr	r3, [pc, #388]	@ (8001d14 <HAL_UART_MspInit+0x52c>)
 8001b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b98:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bac:	2303      	movs	r3, #3
 8001bae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bb2:	2307      	movs	r3, #7
 8001bb4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb8:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	485a      	ldr	r0, [pc, #360]	@ (8001d28 <HAL_UART_MspInit+0x540>)
 8001bc0:	f001 f9ca 	bl	8002f58 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001bc4:	4b59      	ldr	r3, [pc, #356]	@ (8001d2c <HAL_UART_MspInit+0x544>)
 8001bc6:	4a5a      	ldr	r2, [pc, #360]	@ (8001d30 <HAL_UART_MspInit+0x548>)
 8001bc8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001bca:	4b58      	ldr	r3, [pc, #352]	@ (8001d2c <HAL_UART_MspInit+0x544>)
 8001bcc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001bd0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bd2:	4b56      	ldr	r3, [pc, #344]	@ (8001d2c <HAL_UART_MspInit+0x544>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bd8:	4b54      	ldr	r3, [pc, #336]	@ (8001d2c <HAL_UART_MspInit+0x544>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bde:	4b53      	ldr	r3, [pc, #332]	@ (8001d2c <HAL_UART_MspInit+0x544>)
 8001be0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001be4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001be6:	4b51      	ldr	r3, [pc, #324]	@ (8001d2c <HAL_UART_MspInit+0x544>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bec:	4b4f      	ldr	r3, [pc, #316]	@ (8001d2c <HAL_UART_MspInit+0x544>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001bf2:	4b4e      	ldr	r3, [pc, #312]	@ (8001d2c <HAL_UART_MspInit+0x544>)
 8001bf4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bf8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bfa:	4b4c      	ldr	r3, [pc, #304]	@ (8001d2c <HAL_UART_MspInit+0x544>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c00:	4b4a      	ldr	r3, [pc, #296]	@ (8001d2c <HAL_UART_MspInit+0x544>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001c06:	4849      	ldr	r0, [pc, #292]	@ (8001d2c <HAL_UART_MspInit+0x544>)
 8001c08:	f000 fe2e 	bl	8002868 <HAL_DMA_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_UART_MspInit+0x42e>
      Error_Handler();
 8001c12:	f7ff fb49 	bl	80012a8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a44      	ldr	r2, [pc, #272]	@ (8001d2c <HAL_UART_MspInit+0x544>)
 8001c1a:	675a      	str	r2, [r3, #116]	@ 0x74
 8001c1c:	4a43      	ldr	r2, [pc, #268]	@ (8001d2c <HAL_UART_MspInit+0x544>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001c22:	e070      	b.n	8001d06 <HAL_UART_MspInit+0x51e>
  else if(huart->Instance==USART6)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a42      	ldr	r2, [pc, #264]	@ (8001d34 <HAL_UART_MspInit+0x54c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d16b      	bne.n	8001d06 <HAL_UART_MspInit+0x51e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001c2e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c32:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c3a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f003 fc5a 	bl	80054f8 <HAL_RCCEx_PeriphCLKConfig>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_UART_MspInit+0x466>
      Error_Handler();
 8001c4a:	f7ff fb2d 	bl	80012a8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001c4e:	4b31      	ldr	r3, [pc, #196]	@ (8001d14 <HAL_UART_MspInit+0x52c>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c52:	4a30      	ldr	r2, [pc, #192]	@ (8001d14 <HAL_UART_MspInit+0x52c>)
 8001c54:	f043 0320 	orr.w	r3, r3, #32
 8001c58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c5a:	4b2e      	ldr	r3, [pc, #184]	@ (8001d14 <HAL_UART_MspInit+0x52c>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5e:	f003 0320 	and.w	r3, r3, #32
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c66:	4b2b      	ldr	r3, [pc, #172]	@ (8001d14 <HAL_UART_MspInit+0x52c>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	4a2a      	ldr	r2, [pc, #168]	@ (8001d14 <HAL_UART_MspInit+0x52c>)
 8001c6c:	f043 0304 	orr.w	r3, r3, #4
 8001c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c72:	4b28      	ldr	r3, [pc, #160]	@ (8001d14 <HAL_UART_MspInit+0x52c>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c76:	f003 0304 	and.w	r3, r3, #4
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c7e:	23c0      	movs	r3, #192	@ 0xc0
 8001c80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c90:	2303      	movs	r3, #3
 8001c92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001c96:	2308      	movs	r3, #8
 8001c98:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c9c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4825      	ldr	r0, [pc, #148]	@ (8001d38 <HAL_UART_MspInit+0x550>)
 8001ca4:	f001 f958 	bl	8002f58 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001ca8:	4b24      	ldr	r3, [pc, #144]	@ (8001d3c <HAL_UART_MspInit+0x554>)
 8001caa:	4a25      	ldr	r2, [pc, #148]	@ (8001d40 <HAL_UART_MspInit+0x558>)
 8001cac:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001cae:	4b23      	ldr	r3, [pc, #140]	@ (8001d3c <HAL_UART_MspInit+0x554>)
 8001cb0:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001cb4:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cb6:	4b21      	ldr	r3, [pc, #132]	@ (8001d3c <HAL_UART_MspInit+0x554>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8001d3c <HAL_UART_MspInit+0x554>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d3c <HAL_UART_MspInit+0x554>)
 8001cc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cc8:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cca:	4b1c      	ldr	r3, [pc, #112]	@ (8001d3c <HAL_UART_MspInit+0x554>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d3c <HAL_UART_MspInit+0x554>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8001cd6:	4b19      	ldr	r3, [pc, #100]	@ (8001d3c <HAL_UART_MspInit+0x554>)
 8001cd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cdc:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cde:	4b17      	ldr	r3, [pc, #92]	@ (8001d3c <HAL_UART_MspInit+0x554>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ce4:	4b15      	ldr	r3, [pc, #84]	@ (8001d3c <HAL_UART_MspInit+0x554>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001cea:	4814      	ldr	r0, [pc, #80]	@ (8001d3c <HAL_UART_MspInit+0x554>)
 8001cec:	f000 fdbc 	bl	8002868 <HAL_DMA_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <HAL_UART_MspInit+0x512>
      Error_Handler();
 8001cf6:	f7ff fad7 	bl	80012a8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a0f      	ldr	r2, [pc, #60]	@ (8001d3c <HAL_UART_MspInit+0x554>)
 8001cfe:	675a      	str	r2, [r3, #116]	@ 0x74
 8001d00:	4a0e      	ldr	r2, [pc, #56]	@ (8001d3c <HAL_UART_MspInit+0x554>)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001d06:	bf00      	nop
 8001d08:	37c8      	adds	r7, #200	@ 0xc8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40004400 	.word	0x40004400
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40020000 	.word	0x40020000
 8001d1c:	200008d0 	.word	0x200008d0
 8001d20:	40026088 	.word	0x40026088
 8001d24:	40004800 	.word	0x40004800
 8001d28:	40020400 	.word	0x40020400
 8001d2c:	20000930 	.word	0x20000930
 8001d30:	40026028 	.word	0x40026028
 8001d34:	40011400 	.word	0x40011400
 8001d38:	40020800 	.word	0x40020800
 8001d3c:	20000990 	.word	0x20000990
 8001d40:	40026428 	.word	0x40026428

08001d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001d48:	f003 fbba 	bl	80054c0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d4c:	bf00      	nop
 8001d4e:	e7fd      	b.n	8001d4c <NMI_Handler+0x8>

08001d50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d54:	bf00      	nop
 8001d56:	e7fd      	b.n	8001d54 <HardFault_Handler+0x4>

08001d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d5c:	bf00      	nop
 8001d5e:	e7fd      	b.n	8001d5c <MemManage_Handler+0x4>

08001d60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d64:	bf00      	nop
 8001d66:	e7fd      	b.n	8001d64 <BusFault_Handler+0x4>

08001d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <UsageFault_Handler+0x4>

08001d70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d9e:	f000 f901 	bl	8001fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001dac:	4802      	ldr	r0, [pc, #8]	@ (8001db8 <DMA1_Stream1_IRQHandler+0x10>)
 8001dae:	f000 fe69 	bl	8002a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000930 	.word	0x20000930

08001dbc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001dc0:	4802      	ldr	r0, [pc, #8]	@ (8001dcc <DMA1_Stream2_IRQHandler+0x10>)
 8001dc2:	f000 fe5f 	bl	8002a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200007b0 	.word	0x200007b0

08001dd0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001dd4:	4802      	ldr	r0, [pc, #8]	@ (8001de0 <DMA1_Stream5_IRQHandler+0x10>)
 8001dd6:	f000 fe55 	bl	8002a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200008d0 	.word	0x200008d0

08001de4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001de8:	4802      	ldr	r0, [pc, #8]	@ (8001df4 <DMA2_Stream1_IRQHandler+0x10>)
 8001dea:	f000 fe4b 	bl	8002a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000990 	.word	0x20000990

08001df8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001dfc:	4802      	ldr	r0, [pc, #8]	@ (8001e08 <DMA2_Stream2_IRQHandler+0x10>)
 8001dfe:	f000 fe41 	bl	8002a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000810 	.word	0x20000810

08001e0c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001e10:	4802      	ldr	r0, [pc, #8]	@ (8001e1c <DMA2_Stream3_IRQHandler+0x10>)
 8001e12:	f000 fe37 	bl	8002a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200004a8 	.word	0x200004a8

08001e20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001e24:	4802      	ldr	r0, [pc, #8]	@ (8001e30 <OTG_FS_IRQHandler+0x10>)
 8001e26:	f001 fcd0 	bl	80037ca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20001eec 	.word	0x20001eec

08001e34 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001e38:	4802      	ldr	r0, [pc, #8]	@ (8001e44 <DMA2_Stream7_IRQHandler+0x10>)
 8001e3a:	f000 fe23 	bl	8002a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000870 	.word	0x20000870

08001e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e50:	4a14      	ldr	r2, [pc, #80]	@ (8001ea4 <_sbrk+0x5c>)
 8001e52:	4b15      	ldr	r3, [pc, #84]	@ (8001ea8 <_sbrk+0x60>)
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e5c:	4b13      	ldr	r3, [pc, #76]	@ (8001eac <_sbrk+0x64>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e64:	4b11      	ldr	r3, [pc, #68]	@ (8001eac <_sbrk+0x64>)
 8001e66:	4a12      	ldr	r2, [pc, #72]	@ (8001eb0 <_sbrk+0x68>)
 8001e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e6a:	4b10      	ldr	r3, [pc, #64]	@ (8001eac <_sbrk+0x64>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d207      	bcs.n	8001e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e78:	f00b ff80 	bl	800dd7c <__errno>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	220c      	movs	r2, #12
 8001e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e86:	e009      	b.n	8001e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e88:	4b08      	ldr	r3, [pc, #32]	@ (8001eac <_sbrk+0x64>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e8e:	4b07      	ldr	r3, [pc, #28]	@ (8001eac <_sbrk+0x64>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	4a05      	ldr	r2, [pc, #20]	@ (8001eac <_sbrk+0x64>)
 8001e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20040000 	.word	0x20040000
 8001ea8:	00000400 	.word	0x00000400
 8001eac:	200009f0 	.word	0x200009f0
 8001eb0:	20002518 	.word	0x20002518

08001eb4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eb8:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <SystemInit+0x20>)
 8001eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ebe:	4a05      	ldr	r2, [pc, #20]	@ (8001ed4 <SystemInit+0x20>)
 8001ec0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ec4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ed8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f10 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 8001edc:	f7ff ffea 	bl	8001eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ee0:	480c      	ldr	r0, [pc, #48]	@ (8001f14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ee2:	490d      	ldr	r1, [pc, #52]	@ (8001f18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8001f1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee8:	e002      	b.n	8001ef0 <LoopCopyDataInit>

08001eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eee:	3304      	adds	r3, #4

08001ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef4:	d3f9      	bcc.n	8001eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ef8:	4c0a      	ldr	r4, [pc, #40]	@ (8001f24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001efc:	e001      	b.n	8001f02 <LoopFillZerobss>

08001efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f00:	3204      	adds	r2, #4

08001f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f04:	d3fb      	bcc.n	8001efe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f06:	f00b ff3f 	bl	800dd88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f0a:	f7fe fc7f 	bl	800080c <main>
  bx  lr    
 8001f0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f10:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f18:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8001f1c:	0800df0c 	.word	0x0800df0c
  ldr r2, =_sbss
 8001f20:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8001f24:	20002514 	.word	0x20002514

08001f28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f28:	e7fe      	b.n	8001f28 <ADC_IRQHandler>

08001f2a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f2e:	2003      	movs	r0, #3
 8001f30:	f000 fbe0 	bl	80026f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f34:	200f      	movs	r0, #15
 8001f36:	f000 f805 	bl	8001f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f3a:	f7ff f9bb 	bl	80012b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f4c:	4b12      	ldr	r3, [pc, #72]	@ (8001f98 <HAL_InitTick+0x54>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4b12      	ldr	r3, [pc, #72]	@ (8001f9c <HAL_InitTick+0x58>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	4619      	mov	r1, r3
 8001f56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 fbfb 	bl	800275e <HAL_SYSTICK_Config>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e00e      	b.n	8001f90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b0f      	cmp	r3, #15
 8001f76:	d80a      	bhi.n	8001f8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f80:	f000 fbc3 	bl	800270a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f84:	4a06      	ldr	r2, [pc, #24]	@ (8001fa0 <HAL_InitTick+0x5c>)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	e000      	b.n	8001f90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000000 	.word	0x20000000
 8001f9c:	20000008 	.word	0x20000008
 8001fa0:	20000004 	.word	0x20000004

08001fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	@ (8001fc4 <HAL_IncTick+0x20>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b06      	ldr	r3, [pc, #24]	@ (8001fc8 <HAL_IncTick+0x24>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4a04      	ldr	r2, [pc, #16]	@ (8001fc8 <HAL_IncTick+0x24>)
 8001fb6:	6013      	str	r3, [r2, #0]
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000008 	.word	0x20000008
 8001fc8:	200009f4 	.word	0x200009f4

08001fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd0:	4b03      	ldr	r3, [pc, #12]	@ (8001fe0 <HAL_GetTick+0x14>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	200009f4 	.word	0x200009f4

08001fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fec:	f7ff ffee 	bl	8001fcc <HAL_GetTick>
 8001ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ffc:	d005      	beq.n	800200a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8002028 <HAL_Delay+0x44>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4413      	add	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800200a:	bf00      	nop
 800200c:	f7ff ffde 	bl	8001fcc <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	429a      	cmp	r2, r3
 800201a:	d8f7      	bhi.n	800200c <HAL_Delay+0x28>
  {
  }
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000008 	.word	0x20000008

0800202c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e031      	b.n	80020a6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002046:	2b00      	cmp	r3, #0
 8002048:	d109      	bne.n	800205e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff f956 	bl	80012fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	2b00      	cmp	r3, #0
 8002068:	d116      	bne.n	8002098 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800206e:	4b10      	ldr	r3, [pc, #64]	@ (80020b0 <HAL_ADC_Init+0x84>)
 8002070:	4013      	ands	r3, r2
 8002072:	f043 0202 	orr.w	r2, r3, #2
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f970 	bl	8002360 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	f023 0303 	bic.w	r3, r3, #3
 800208e:	f043 0201 	orr.w	r2, r3, #1
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	641a      	str	r2, [r3, #64]	@ 0x40
 8002096:	e001      	b.n	800209c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	ffffeefd 	.word	0xffffeefd

080020b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x1c>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e136      	b.n	800233e <HAL_ADC_ConfigChannel+0x28a>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b09      	cmp	r3, #9
 80020de:	d93a      	bls.n	8002156 <HAL_ADC_ConfigChannel+0xa2>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80020e8:	d035      	beq.n	8002156 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68d9      	ldr	r1, [r3, #12]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	461a      	mov	r2, r3
 80020f8:	4613      	mov	r3, r2
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4413      	add	r3, r2
 80020fe:	3b1e      	subs	r3, #30
 8002100:	2207      	movs	r2, #7
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43da      	mvns	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	400a      	ands	r2, r1
 800210e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a8d      	ldr	r2, [pc, #564]	@ (800234c <HAL_ADC_ConfigChannel+0x298>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d10a      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68d9      	ldr	r1, [r3, #12]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	061a      	lsls	r2, r3, #24
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800212e:	e035      	b.n	800219c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68d9      	ldr	r1, [r3, #12]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	b29b      	uxth	r3, r3
 8002140:	4618      	mov	r0, r3
 8002142:	4603      	mov	r3, r0
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4403      	add	r3, r0
 8002148:	3b1e      	subs	r3, #30
 800214a:	409a      	lsls	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002154:	e022      	b.n	800219c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6919      	ldr	r1, [r3, #16]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	b29b      	uxth	r3, r3
 8002162:	461a      	mov	r2, r3
 8002164:	4613      	mov	r3, r2
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	4413      	add	r3, r2
 800216a:	2207      	movs	r2, #7
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43da      	mvns	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	400a      	ands	r2, r1
 8002178:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6919      	ldr	r1, [r3, #16]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	b29b      	uxth	r3, r3
 800218a:	4618      	mov	r0, r3
 800218c:	4603      	mov	r3, r0
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	4403      	add	r3, r0
 8002192:	409a      	lsls	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b06      	cmp	r3, #6
 80021a2:	d824      	bhi.n	80021ee <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	3b05      	subs	r3, #5
 80021b6:	221f      	movs	r2, #31
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43da      	mvns	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	400a      	ands	r2, r1
 80021c4:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	4618      	mov	r0, r3
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	4613      	mov	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	3b05      	subs	r3, #5
 80021e0:	fa00 f203 	lsl.w	r2, r0, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	635a      	str	r2, [r3, #52]	@ 0x34
 80021ec:	e04c      	b.n	8002288 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b0c      	cmp	r3, #12
 80021f4:	d824      	bhi.n	8002240 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	3b23      	subs	r3, #35	@ 0x23
 8002208:	221f      	movs	r2, #31
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43da      	mvns	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	400a      	ands	r2, r1
 8002216:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	b29b      	uxth	r3, r3
 8002224:	4618      	mov	r0, r3
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	3b23      	subs	r3, #35	@ 0x23
 8002232:	fa00 f203 	lsl.w	r2, r0, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	631a      	str	r2, [r3, #48]	@ 0x30
 800223e:	e023      	b.n	8002288 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	3b41      	subs	r3, #65	@ 0x41
 8002252:	221f      	movs	r2, #31
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43da      	mvns	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	400a      	ands	r2, r1
 8002260:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	b29b      	uxth	r3, r3
 800226e:	4618      	mov	r0, r3
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	3b41      	subs	r3, #65	@ 0x41
 800227c:	fa00 f203 	lsl.w	r2, r0, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a30      	ldr	r2, [pc, #192]	@ (8002350 <HAL_ADC_ConfigChannel+0x29c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d10a      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x1f4>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800229a:	d105      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800229c:	4b2d      	ldr	r3, [pc, #180]	@ (8002354 <HAL_ADC_ConfigChannel+0x2a0>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4a2c      	ldr	r2, [pc, #176]	@ (8002354 <HAL_ADC_ConfigChannel+0x2a0>)
 80022a2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80022a6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a28      	ldr	r2, [pc, #160]	@ (8002350 <HAL_ADC_ConfigChannel+0x29c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d10f      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x21e>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2b12      	cmp	r3, #18
 80022b8:	d10b      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80022ba:	4b26      	ldr	r3, [pc, #152]	@ (8002354 <HAL_ADC_ConfigChannel+0x2a0>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	4a25      	ldr	r2, [pc, #148]	@ (8002354 <HAL_ADC_ConfigChannel+0x2a0>)
 80022c0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80022c4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80022c6:	4b23      	ldr	r3, [pc, #140]	@ (8002354 <HAL_ADC_ConfigChannel+0x2a0>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	4a22      	ldr	r2, [pc, #136]	@ (8002354 <HAL_ADC_ConfigChannel+0x2a0>)
 80022cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022d0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002350 <HAL_ADC_ConfigChannel+0x29c>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d12b      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x280>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a1a      	ldr	r2, [pc, #104]	@ (800234c <HAL_ADC_ConfigChannel+0x298>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d003      	beq.n	80022ee <HAL_ADC_ConfigChannel+0x23a>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2b11      	cmp	r3, #17
 80022ec:	d122      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80022ee:	4b19      	ldr	r3, [pc, #100]	@ (8002354 <HAL_ADC_ConfigChannel+0x2a0>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	4a18      	ldr	r2, [pc, #96]	@ (8002354 <HAL_ADC_ConfigChannel+0x2a0>)
 80022f4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80022f8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80022fa:	4b16      	ldr	r3, [pc, #88]	@ (8002354 <HAL_ADC_ConfigChannel+0x2a0>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	4a15      	ldr	r2, [pc, #84]	@ (8002354 <HAL_ADC_ConfigChannel+0x2a0>)
 8002300:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002304:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a10      	ldr	r2, [pc, #64]	@ (800234c <HAL_ADC_ConfigChannel+0x298>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d111      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002310:	4b11      	ldr	r3, [pc, #68]	@ (8002358 <HAL_ADC_ConfigChannel+0x2a4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a11      	ldr	r2, [pc, #68]	@ (800235c <HAL_ADC_ConfigChannel+0x2a8>)
 8002316:	fba2 2303 	umull	r2, r3, r2, r3
 800231a:	0c9a      	lsrs	r2, r3, #18
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002326:	e002      	b.n	800232e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	3b01      	subs	r3, #1
 800232c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f9      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	10000012 	.word	0x10000012
 8002350:	40012000 	.word	0x40012000
 8002354:	40012300 	.word	0x40012300
 8002358:	20000000 	.word	0x20000000
 800235c:	431bde83 	.word	0x431bde83

08002360 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002368:	4b78      	ldr	r3, [pc, #480]	@ (800254c <ADC_Init+0x1ec>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	4a77      	ldr	r2, [pc, #476]	@ (800254c <ADC_Init+0x1ec>)
 800236e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002372:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002374:	4b75      	ldr	r3, [pc, #468]	@ (800254c <ADC_Init+0x1ec>)
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	4973      	ldr	r1, [pc, #460]	@ (800254c <ADC_Init+0x1ec>)
 800237e:	4313      	orrs	r3, r2
 8002380:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002390:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6859      	ldr	r1, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	021a      	lsls	r2, r3, #8
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80023b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6859      	ldr	r1, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6899      	ldr	r1, [r3, #8]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ee:	4a58      	ldr	r2, [pc, #352]	@ (8002550 <ADC_Init+0x1f0>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d022      	beq.n	800243a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002402:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6899      	ldr	r1, [r3, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002424:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6899      	ldr	r1, [r3, #8]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	e00f      	b.n	800245a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002448:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002458:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0202 	bic.w	r2, r2, #2
 8002468:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6899      	ldr	r1, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	005a      	lsls	r2, r3, #1
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d01b      	beq.n	80024c0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002496:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80024a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6859      	ldr	r1, [r3, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b2:	3b01      	subs	r3, #1
 80024b4:	035a      	lsls	r2, r3, #13
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	e007      	b.n	80024d0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80024de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	051a      	lsls	r2, r3, #20
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002504:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6899      	ldr	r1, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002512:	025a      	lsls	r2, r3, #9
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800252a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6899      	ldr	r1, [r3, #8]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	029a      	lsls	r2, r3, #10
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	609a      	str	r2, [r3, #8]
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	40012300 	.word	0x40012300
 8002550:	0f000001 	.word	0x0f000001

08002554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002564:	4b0b      	ldr	r3, [pc, #44]	@ (8002594 <__NVIC_SetPriorityGrouping+0x40>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002570:	4013      	ands	r3, r2
 8002572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800257c:	4b06      	ldr	r3, [pc, #24]	@ (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 800257e:	4313      	orrs	r3, r2
 8002580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002582:	4a04      	ldr	r2, [pc, #16]	@ (8002594 <__NVIC_SetPriorityGrouping+0x40>)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	60d3      	str	r3, [r2, #12]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000ed00 	.word	0xe000ed00
 8002598:	05fa0000 	.word	0x05fa0000

0800259c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a0:	4b04      	ldr	r3, [pc, #16]	@ (80025b4 <__NVIC_GetPriorityGrouping+0x18>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	0a1b      	lsrs	r3, r3, #8
 80025a6:	f003 0307 	and.w	r3, r3, #7
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	db0b      	blt.n	80025e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	f003 021f 	and.w	r2, r3, #31
 80025d0:	4907      	ldr	r1, [pc, #28]	@ (80025f0 <__NVIC_EnableIRQ+0x38>)
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	2001      	movs	r0, #1
 80025da:	fa00 f202 	lsl.w	r2, r0, r2
 80025de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	e000e100 	.word	0xe000e100

080025f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	6039      	str	r1, [r7, #0]
 80025fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002604:	2b00      	cmp	r3, #0
 8002606:	db0a      	blt.n	800261e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	b2da      	uxtb	r2, r3
 800260c:	490c      	ldr	r1, [pc, #48]	@ (8002640 <__NVIC_SetPriority+0x4c>)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	0112      	lsls	r2, r2, #4
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	440b      	add	r3, r1
 8002618:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800261c:	e00a      	b.n	8002634 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4908      	ldr	r1, [pc, #32]	@ (8002644 <__NVIC_SetPriority+0x50>)
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	3b04      	subs	r3, #4
 800262c:	0112      	lsls	r2, r2, #4
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	440b      	add	r3, r1
 8002632:	761a      	strb	r2, [r3, #24]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000e100 	.word	0xe000e100
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002648:	b480      	push	{r7}
 800264a:	b089      	sub	sp, #36	@ 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f1c3 0307 	rsb	r3, r3, #7
 8002662:	2b04      	cmp	r3, #4
 8002664:	bf28      	it	cs
 8002666:	2304      	movcs	r3, #4
 8002668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3304      	adds	r3, #4
 800266e:	2b06      	cmp	r3, #6
 8002670:	d902      	bls.n	8002678 <NVIC_EncodePriority+0x30>
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3b03      	subs	r3, #3
 8002676:	e000      	b.n	800267a <NVIC_EncodePriority+0x32>
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43da      	mvns	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	401a      	ands	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002690:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	43d9      	mvns	r1, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	4313      	orrs	r3, r2
         );
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3724      	adds	r7, #36	@ 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026c0:	d301      	bcc.n	80026c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026c2:	2301      	movs	r3, #1
 80026c4:	e00f      	b.n	80026e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c6:	4a0a      	ldr	r2, [pc, #40]	@ (80026f0 <SysTick_Config+0x40>)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ce:	210f      	movs	r1, #15
 80026d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80026d4:	f7ff ff8e 	bl	80025f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d8:	4b05      	ldr	r3, [pc, #20]	@ (80026f0 <SysTick_Config+0x40>)
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026de:	4b04      	ldr	r3, [pc, #16]	@ (80026f0 <SysTick_Config+0x40>)
 80026e0:	2207      	movs	r2, #7
 80026e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	e000e010 	.word	0xe000e010

080026f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ff29 	bl	8002554 <__NVIC_SetPriorityGrouping>
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800270a:	b580      	push	{r7, lr}
 800270c:	b086      	sub	sp, #24
 800270e:	af00      	add	r7, sp, #0
 8002710:	4603      	mov	r3, r0
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
 8002716:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800271c:	f7ff ff3e 	bl	800259c <__NVIC_GetPriorityGrouping>
 8002720:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68b9      	ldr	r1, [r7, #8]
 8002726:	6978      	ldr	r0, [r7, #20]
 8002728:	f7ff ff8e 	bl	8002648 <NVIC_EncodePriority>
 800272c:	4602      	mov	r2, r0
 800272e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002732:	4611      	mov	r1, r2
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff ff5d 	bl	80025f4 <__NVIC_SetPriority>
}
 800273a:	bf00      	nop
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	4603      	mov	r3, r0
 800274a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800274c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ff31 	bl	80025b8 <__NVIC_EnableIRQ>
}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff ffa2 	bl	80026b0 <SysTick_Config>
 800276c:	4603      	mov	r3, r0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800277c:	f3bf 8f5f 	dmb	sy
}
 8002780:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002782:	4b07      	ldr	r3, [pc, #28]	@ (80027a0 <HAL_MPU_Disable+0x28>)
 8002784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002786:	4a06      	ldr	r2, [pc, #24]	@ (80027a0 <HAL_MPU_Disable+0x28>)
 8002788:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800278c:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800278e:	4b05      	ldr	r3, [pc, #20]	@ (80027a4 <HAL_MPU_Disable+0x2c>)
 8002790:	2200      	movs	r2, #0
 8002792:	605a      	str	r2, [r3, #4]
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	e000ed00 	.word	0xe000ed00
 80027a4:	e000ed90 	.word	0xe000ed90

080027a8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80027b0:	4a0b      	ldr	r2, [pc, #44]	@ (80027e0 <HAL_MPU_Enable+0x38>)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80027ba:	4b0a      	ldr	r3, [pc, #40]	@ (80027e4 <HAL_MPU_Enable+0x3c>)
 80027bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027be:	4a09      	ldr	r2, [pc, #36]	@ (80027e4 <HAL_MPU_Enable+0x3c>)
 80027c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027c4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80027c6:	f3bf 8f4f 	dsb	sy
}
 80027ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80027cc:	f3bf 8f6f 	isb	sy
}
 80027d0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	e000ed90 	.word	0xe000ed90
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	785a      	ldrb	r2, [r3, #1]
 80027f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002864 <HAL_MPU_ConfigRegion+0x7c>)
 80027f6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80027f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002864 <HAL_MPU_ConfigRegion+0x7c>)
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	4a19      	ldr	r2, [pc, #100]	@ (8002864 <HAL_MPU_ConfigRegion+0x7c>)
 80027fe:	f023 0301 	bic.w	r3, r3, #1
 8002802:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002804:	4a17      	ldr	r2, [pc, #92]	@ (8002864 <HAL_MPU_ConfigRegion+0x7c>)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	7b1b      	ldrb	r3, [r3, #12]
 8002810:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	7adb      	ldrb	r3, [r3, #11]
 8002816:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002818:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	7a9b      	ldrb	r3, [r3, #10]
 800281e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002820:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	7b5b      	ldrb	r3, [r3, #13]
 8002826:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002828:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	7b9b      	ldrb	r3, [r3, #14]
 800282e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002830:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	7bdb      	ldrb	r3, [r3, #15]
 8002836:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002838:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	7a5b      	ldrb	r3, [r3, #9]
 800283e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002840:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	7a1b      	ldrb	r3, [r3, #8]
 8002846:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002848:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	7812      	ldrb	r2, [r2, #0]
 800284e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002850:	4a04      	ldr	r2, [pc, #16]	@ (8002864 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002852:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002854:	6113      	str	r3, [r2, #16]
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	e000ed90 	.word	0xe000ed90

08002868 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002874:	f7ff fbaa 	bl	8001fcc <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e099      	b.n	80029b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0201 	bic.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028a4:	e00f      	b.n	80028c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028a6:	f7ff fb91 	bl	8001fcc <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b05      	cmp	r3, #5
 80028b2:	d908      	bls.n	80028c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2220      	movs	r2, #32
 80028b8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2203      	movs	r2, #3
 80028be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e078      	b.n	80029b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1e8      	bne.n	80028a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	4b38      	ldr	r3, [pc, #224]	@ (80029c0 <HAL_DMA_Init+0x158>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800290a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	4313      	orrs	r3, r2
 8002916:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291c:	2b04      	cmp	r3, #4
 800291e:	d107      	bne.n	8002930 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002928:	4313      	orrs	r3, r2
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4313      	orrs	r3, r2
 800292e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f023 0307 	bic.w	r3, r3, #7
 8002946:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	4313      	orrs	r3, r2
 8002950:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002956:	2b04      	cmp	r3, #4
 8002958:	d117      	bne.n	800298a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	4313      	orrs	r3, r2
 8002962:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00e      	beq.n	800298a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 fa77 	bl	8002e60 <DMA_CheckFifoParam>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d008      	beq.n	800298a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2240      	movs	r2, #64	@ 0x40
 800297c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002986:	2301      	movs	r3, #1
 8002988:	e016      	b.n	80029b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 fa2e 	bl	8002df4 <DMA_CalcBaseAndBitshift>
 8002998:	4603      	mov	r3, r0
 800299a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a0:	223f      	movs	r2, #63	@ 0x3f
 80029a2:	409a      	lsls	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	e010803f 	.word	0xe010803f

080029c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
 80029d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <HAL_DMA_Start_IT+0x26>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e048      	b.n	8002a7c <HAL_DMA_Start_IT+0xb8>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d137      	bne.n	8002a6e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2202      	movs	r2, #2
 8002a02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	68b9      	ldr	r1, [r7, #8]
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 f9c0 	bl	8002d98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1c:	223f      	movs	r2, #63	@ 0x3f
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0216 	orr.w	r2, r2, #22
 8002a32:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695a      	ldr	r2, [r3, #20]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002a42:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d007      	beq.n	8002a5c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0208 	orr.w	r2, r2, #8
 8002a5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	e005      	b.n	8002a7a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a76:	2302      	movs	r3, #2
 8002a78:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002a90:	4b8e      	ldr	r3, [pc, #568]	@ (8002ccc <HAL_DMA_IRQHandler+0x248>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a8e      	ldr	r2, [pc, #568]	@ (8002cd0 <HAL_DMA_IRQHandler+0x24c>)
 8002a96:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9a:	0a9b      	lsrs	r3, r3, #10
 8002a9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aae:	2208      	movs	r2, #8
 8002ab0:	409a      	lsls	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d01a      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d013      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0204 	bic.w	r2, r2, #4
 8002ad6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002adc:	2208      	movs	r2, #8
 8002ade:	409a      	lsls	r2, r3
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae8:	f043 0201 	orr.w	r2, r3, #1
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af4:	2201      	movs	r2, #1
 8002af6:	409a      	lsls	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d012      	beq.n	8002b26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00b      	beq.n	8002b26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b12:	2201      	movs	r2, #1
 8002b14:	409a      	lsls	r2, r3
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b1e:	f043 0202 	orr.w	r2, r3, #2
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b2a:	2204      	movs	r2, #4
 8002b2c:	409a      	lsls	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	4013      	ands	r3, r2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d012      	beq.n	8002b5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00b      	beq.n	8002b5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b48:	2204      	movs	r2, #4
 8002b4a:	409a      	lsls	r2, r3
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b54:	f043 0204 	orr.w	r2, r3, #4
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b60:	2210      	movs	r2, #16
 8002b62:	409a      	lsls	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d043      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d03c      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7e:	2210      	movs	r2, #16
 8002b80:	409a      	lsls	r2, r3
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d018      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d108      	bne.n	8002bb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d024      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	4798      	blx	r3
 8002bb2:	e01f      	b.n	8002bf4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d01b      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	4798      	blx	r3
 8002bc4:	e016      	b.n	8002bf4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d107      	bne.n	8002be4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0208 	bic.w	r2, r2, #8
 8002be2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	409a      	lsls	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 808f 	beq.w	8002d24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0310 	and.w	r3, r3, #16
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 8087 	beq.w	8002d24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	409a      	lsls	r2, r3
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b05      	cmp	r3, #5
 8002c2c:	d136      	bne.n	8002c9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0216 	bic.w	r2, r2, #22
 8002c3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695a      	ldr	r2, [r3, #20]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d103      	bne.n	8002c5e <HAL_DMA_IRQHandler+0x1da>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d007      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0208 	bic.w	r2, r2, #8
 8002c6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c72:	223f      	movs	r2, #63	@ 0x3f
 8002c74:	409a      	lsls	r2, r3
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d07e      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	4798      	blx	r3
        }
        return;
 8002c9a:	e079      	b.n	8002d90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d01d      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10d      	bne.n	8002cd4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d031      	beq.n	8002d24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	4798      	blx	r3
 8002cc8:	e02c      	b.n	8002d24 <HAL_DMA_IRQHandler+0x2a0>
 8002cca:	bf00      	nop
 8002ccc:	20000000 	.word	0x20000000
 8002cd0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d023      	beq.n	8002d24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	4798      	blx	r3
 8002ce4:	e01e      	b.n	8002d24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10f      	bne.n	8002d14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0210 	bic.w	r2, r2, #16
 8002d02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d032      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d022      	beq.n	8002d7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2205      	movs	r2, #5
 8002d3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0201 	bic.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	3301      	adds	r3, #1
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d307      	bcc.n	8002d6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f2      	bne.n	8002d50 <HAL_DMA_IRQHandler+0x2cc>
 8002d6a:	e000      	b.n	8002d6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d6c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d005      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	4798      	blx	r3
 8002d8e:	e000      	b.n	8002d92 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d90:	bf00      	nop
    }
  }
}
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
 8002da4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002db4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b40      	cmp	r3, #64	@ 0x40
 8002dc4:	d108      	bne.n	8002dd8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002dd6:	e007      	b.n	8002de8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	60da      	str	r2, [r3, #12]
}
 8002de8:	bf00      	nop
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	3b10      	subs	r3, #16
 8002e04:	4a13      	ldr	r2, [pc, #76]	@ (8002e54 <DMA_CalcBaseAndBitshift+0x60>)
 8002e06:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0a:	091b      	lsrs	r3, r3, #4
 8002e0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e0e:	4a12      	ldr	r2, [pc, #72]	@ (8002e58 <DMA_CalcBaseAndBitshift+0x64>)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	4413      	add	r3, r2
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	461a      	mov	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	d908      	bls.n	8002e34 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	4b0c      	ldr	r3, [pc, #48]	@ (8002e5c <DMA_CalcBaseAndBitshift+0x68>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	1d1a      	adds	r2, r3, #4
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e32:	e006      	b.n	8002e42 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4b08      	ldr	r3, [pc, #32]	@ (8002e5c <DMA_CalcBaseAndBitshift+0x68>)
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	aaaaaaab 	.word	0xaaaaaaab
 8002e58:	0800dee0 	.word	0x0800dee0
 8002e5c:	fffffc00 	.word	0xfffffc00

08002e60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d11f      	bne.n	8002eba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2b03      	cmp	r3, #3
 8002e7e:	d856      	bhi.n	8002f2e <DMA_CheckFifoParam+0xce>
 8002e80:	a201      	add	r2, pc, #4	@ (adr r2, 8002e88 <DMA_CheckFifoParam+0x28>)
 8002e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e86:	bf00      	nop
 8002e88:	08002e99 	.word	0x08002e99
 8002e8c:	08002eab 	.word	0x08002eab
 8002e90:	08002e99 	.word	0x08002e99
 8002e94:	08002f2f 	.word	0x08002f2f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d046      	beq.n	8002f32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea8:	e043      	b.n	8002f32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002eb2:	d140      	bne.n	8002f36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb8:	e03d      	b.n	8002f36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ec2:	d121      	bne.n	8002f08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	d837      	bhi.n	8002f3a <DMA_CheckFifoParam+0xda>
 8002eca:	a201      	add	r2, pc, #4	@ (adr r2, 8002ed0 <DMA_CheckFifoParam+0x70>)
 8002ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed0:	08002ee1 	.word	0x08002ee1
 8002ed4:	08002ee7 	.word	0x08002ee7
 8002ed8:	08002ee1 	.word	0x08002ee1
 8002edc:	08002ef9 	.word	0x08002ef9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ee4:	e030      	b.n	8002f48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d025      	beq.n	8002f3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef6:	e022      	b.n	8002f3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f00:	d11f      	bne.n	8002f42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f06:	e01c      	b.n	8002f42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d903      	bls.n	8002f16 <DMA_CheckFifoParam+0xb6>
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d003      	beq.n	8002f1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f14:	e018      	b.n	8002f48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	73fb      	strb	r3, [r7, #15]
      break;
 8002f1a:	e015      	b.n	8002f48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00e      	beq.n	8002f46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f2c:	e00b      	b.n	8002f46 <DMA_CheckFifoParam+0xe6>
      break;
 8002f2e:	bf00      	nop
 8002f30:	e00a      	b.n	8002f48 <DMA_CheckFifoParam+0xe8>
      break;
 8002f32:	bf00      	nop
 8002f34:	e008      	b.n	8002f48 <DMA_CheckFifoParam+0xe8>
      break;
 8002f36:	bf00      	nop
 8002f38:	e006      	b.n	8002f48 <DMA_CheckFifoParam+0xe8>
      break;
 8002f3a:	bf00      	nop
 8002f3c:	e004      	b.n	8002f48 <DMA_CheckFifoParam+0xe8>
      break;
 8002f3e:	bf00      	nop
 8002f40:	e002      	b.n	8002f48 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f42:	bf00      	nop
 8002f44:	e000      	b.n	8002f48 <DMA_CheckFifoParam+0xe8>
      break;
 8002f46:	bf00      	nop
    }
  } 
  
  return status; 
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop

08002f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b089      	sub	sp, #36	@ 0x24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f62:	2300      	movs	r3, #0
 8002f64:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002f72:	2300      	movs	r3, #0
 8002f74:	61fb      	str	r3, [r7, #28]
 8002f76:	e169      	b.n	800324c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f78:	2201      	movs	r2, #1
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	f040 8158 	bne.w	8003246 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d005      	beq.n	8002fae <HAL_GPIO_Init+0x56>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d130      	bne.n	8003010 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	2203      	movs	r2, #3
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	f003 0201 	and.w	r2, r3, #1
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4313      	orrs	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	2b03      	cmp	r3, #3
 800301a:	d017      	beq.n	800304c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	2203      	movs	r2, #3
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4313      	orrs	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 0303 	and.w	r3, r3, #3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d123      	bne.n	80030a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	08da      	lsrs	r2, r3, #3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3208      	adds	r2, #8
 8003060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	220f      	movs	r2, #15
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	43db      	mvns	r3, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	08da      	lsrs	r2, r3, #3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3208      	adds	r2, #8
 800309a:	69b9      	ldr	r1, [r7, #24]
 800309c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	2203      	movs	r2, #3
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	43db      	mvns	r3, r3
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4013      	ands	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f003 0203 	and.w	r2, r3, #3
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 80b2 	beq.w	8003246 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e2:	4b60      	ldr	r3, [pc, #384]	@ (8003264 <HAL_GPIO_Init+0x30c>)
 80030e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e6:	4a5f      	ldr	r2, [pc, #380]	@ (8003264 <HAL_GPIO_Init+0x30c>)
 80030e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80030ee:	4b5d      	ldr	r3, [pc, #372]	@ (8003264 <HAL_GPIO_Init+0x30c>)
 80030f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80030fa:	4a5b      	ldr	r2, [pc, #364]	@ (8003268 <HAL_GPIO_Init+0x310>)
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	089b      	lsrs	r3, r3, #2
 8003100:	3302      	adds	r3, #2
 8003102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003106:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	220f      	movs	r2, #15
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43db      	mvns	r3, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4013      	ands	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a52      	ldr	r2, [pc, #328]	@ (800326c <HAL_GPIO_Init+0x314>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d02b      	beq.n	800317e <HAL_GPIO_Init+0x226>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a51      	ldr	r2, [pc, #324]	@ (8003270 <HAL_GPIO_Init+0x318>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d025      	beq.n	800317a <HAL_GPIO_Init+0x222>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a50      	ldr	r2, [pc, #320]	@ (8003274 <HAL_GPIO_Init+0x31c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d01f      	beq.n	8003176 <HAL_GPIO_Init+0x21e>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a4f      	ldr	r2, [pc, #316]	@ (8003278 <HAL_GPIO_Init+0x320>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d019      	beq.n	8003172 <HAL_GPIO_Init+0x21a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a4e      	ldr	r2, [pc, #312]	@ (800327c <HAL_GPIO_Init+0x324>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d013      	beq.n	800316e <HAL_GPIO_Init+0x216>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a4d      	ldr	r2, [pc, #308]	@ (8003280 <HAL_GPIO_Init+0x328>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d00d      	beq.n	800316a <HAL_GPIO_Init+0x212>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a4c      	ldr	r2, [pc, #304]	@ (8003284 <HAL_GPIO_Init+0x32c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d007      	beq.n	8003166 <HAL_GPIO_Init+0x20e>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a4b      	ldr	r2, [pc, #300]	@ (8003288 <HAL_GPIO_Init+0x330>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d101      	bne.n	8003162 <HAL_GPIO_Init+0x20a>
 800315e:	2307      	movs	r3, #7
 8003160:	e00e      	b.n	8003180 <HAL_GPIO_Init+0x228>
 8003162:	2308      	movs	r3, #8
 8003164:	e00c      	b.n	8003180 <HAL_GPIO_Init+0x228>
 8003166:	2306      	movs	r3, #6
 8003168:	e00a      	b.n	8003180 <HAL_GPIO_Init+0x228>
 800316a:	2305      	movs	r3, #5
 800316c:	e008      	b.n	8003180 <HAL_GPIO_Init+0x228>
 800316e:	2304      	movs	r3, #4
 8003170:	e006      	b.n	8003180 <HAL_GPIO_Init+0x228>
 8003172:	2303      	movs	r3, #3
 8003174:	e004      	b.n	8003180 <HAL_GPIO_Init+0x228>
 8003176:	2302      	movs	r3, #2
 8003178:	e002      	b.n	8003180 <HAL_GPIO_Init+0x228>
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <HAL_GPIO_Init+0x228>
 800317e:	2300      	movs	r3, #0
 8003180:	69fa      	ldr	r2, [r7, #28]
 8003182:	f002 0203 	and.w	r2, r2, #3
 8003186:	0092      	lsls	r2, r2, #2
 8003188:	4093      	lsls	r3, r2
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4313      	orrs	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003190:	4935      	ldr	r1, [pc, #212]	@ (8003268 <HAL_GPIO_Init+0x310>)
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	089b      	lsrs	r3, r3, #2
 8003196:	3302      	adds	r3, #2
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800319e:	4b3b      	ldr	r3, [pc, #236]	@ (800328c <HAL_GPIO_Init+0x334>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	43db      	mvns	r3, r3
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4013      	ands	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	4313      	orrs	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031c2:	4a32      	ldr	r2, [pc, #200]	@ (800328c <HAL_GPIO_Init+0x334>)
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031c8:	4b30      	ldr	r3, [pc, #192]	@ (800328c <HAL_GPIO_Init+0x334>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	43db      	mvns	r3, r3
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4013      	ands	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031ec:	4a27      	ldr	r2, [pc, #156]	@ (800328c <HAL_GPIO_Init+0x334>)
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031f2:	4b26      	ldr	r3, [pc, #152]	@ (800328c <HAL_GPIO_Init+0x334>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	43db      	mvns	r3, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4013      	ands	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	4313      	orrs	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003216:	4a1d      	ldr	r2, [pc, #116]	@ (800328c <HAL_GPIO_Init+0x334>)
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800321c:	4b1b      	ldr	r3, [pc, #108]	@ (800328c <HAL_GPIO_Init+0x334>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	43db      	mvns	r3, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4013      	ands	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	4313      	orrs	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003240:	4a12      	ldr	r2, [pc, #72]	@ (800328c <HAL_GPIO_Init+0x334>)
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	3301      	adds	r3, #1
 800324a:	61fb      	str	r3, [r7, #28]
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	2b0f      	cmp	r3, #15
 8003250:	f67f ae92 	bls.w	8002f78 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003254:	bf00      	nop
 8003256:	bf00      	nop
 8003258:	3724      	adds	r7, #36	@ 0x24
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40023800 	.word	0x40023800
 8003268:	40013800 	.word	0x40013800
 800326c:	40020000 	.word	0x40020000
 8003270:	40020400 	.word	0x40020400
 8003274:	40020800 	.word	0x40020800
 8003278:	40020c00 	.word	0x40020c00
 800327c:	40021000 	.word	0x40021000
 8003280:	40021400 	.word	0x40021400
 8003284:	40021800 	.word	0x40021800
 8003288:	40021c00 	.word	0x40021c00
 800328c:	40013c00 	.word	0x40013c00

08003290 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	887b      	ldrh	r3, [r7, #2]
 80032a2:	4013      	ands	r3, r2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032a8:	2301      	movs	r3, #1
 80032aa:	73fb      	strb	r3, [r7, #15]
 80032ac:	e001      	b.n	80032b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032ae:	2300      	movs	r3, #0
 80032b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	460b      	mov	r3, r1
 80032ca:	807b      	strh	r3, [r7, #2]
 80032cc:	4613      	mov	r3, r2
 80032ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032d0:	787b      	ldrb	r3, [r7, #1]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032d6:	887a      	ldrh	r2, [r7, #2]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80032dc:	e003      	b.n	80032e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80032de:	887b      	ldrh	r3, [r7, #2]
 80032e0:	041a      	lsls	r2, r3, #16
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	619a      	str	r2, [r3, #24]
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
	...

080032f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e08b      	b.n	800341e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d106      	bne.n	8003320 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7fe f82e 	bl	800137c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2224      	movs	r2, #36	@ 0x24
 8003324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0201 	bic.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003344:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003354:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d107      	bne.n	800336e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800336a:	609a      	str	r2, [r3, #8]
 800336c:	e006      	b.n	800337c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800337a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	2b02      	cmp	r3, #2
 8003382:	d108      	bne.n	8003396 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003392:	605a      	str	r2, [r3, #4]
 8003394:	e007      	b.n	80033a6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6859      	ldr	r1, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003428 <HAL_I2C_Init+0x134>)
 80033b2:	430b      	orrs	r3, r1
 80033b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68da      	ldr	r2, [r3, #12]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691a      	ldr	r2, [r3, #16]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	69d9      	ldr	r1, [r3, #28]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1a      	ldr	r2, [r3, #32]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0201 	orr.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2220      	movs	r2, #32
 800340a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	02008000 	.word	0x02008000

0800342c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b20      	cmp	r3, #32
 8003440:	d138      	bne.n	80034b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800344c:	2302      	movs	r3, #2
 800344e:	e032      	b.n	80034b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2224      	movs	r2, #36	@ 0x24
 800345c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0201 	bic.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800347e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6819      	ldr	r1, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	e000      	b.n	80034b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034b4:	2302      	movs	r3, #2
  }
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b085      	sub	sp, #20
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	d139      	bne.n	800354c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d101      	bne.n	80034e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80034e2:	2302      	movs	r3, #2
 80034e4:	e033      	b.n	800354e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2224      	movs	r2, #36	@ 0x24
 80034f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0201 	bic.w	r2, r2, #1
 8003504:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003514:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	021b      	lsls	r3, r3, #8
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4313      	orrs	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0201 	orr.w	r2, r2, #1
 8003536:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003548:	2300      	movs	r3, #0
 800354a:	e000      	b.n	800354e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800354c:	2302      	movs	r3, #2
  }
}
 800354e:	4618      	mov	r0, r3
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b086      	sub	sp, #24
 800355e:	af02      	add	r7, sp, #8
 8003560:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e108      	b.n	800377e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d106      	bne.n	800358c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f009 ffb0 	bl	800d4ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2203      	movs	r2, #3
 8003590:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800359a:	d102      	bne.n	80035a2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f006 f9b7 	bl	800991a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6818      	ldr	r0, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	7c1a      	ldrb	r2, [r3, #16]
 80035b4:	f88d 2000 	strb.w	r2, [sp]
 80035b8:	3304      	adds	r3, #4
 80035ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035bc:	f006 f86e 	bl	800969c <USB_CoreInit>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d005      	beq.n	80035d2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2202      	movs	r2, #2
 80035ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e0d5      	b.n	800377e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2100      	movs	r1, #0
 80035d8:	4618      	mov	r0, r3
 80035da:	f006 f9af 	bl	800993c <USB_SetCurrentMode>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d005      	beq.n	80035f0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0c6      	b.n	800377e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035f0:	2300      	movs	r3, #0
 80035f2:	73fb      	strb	r3, [r7, #15]
 80035f4:	e04a      	b.n	800368c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035f6:	7bfa      	ldrb	r2, [r7, #15]
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	3315      	adds	r3, #21
 8003606:	2201      	movs	r2, #1
 8003608:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800360a:	7bfa      	ldrb	r2, [r7, #15]
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	4413      	add	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	3314      	adds	r3, #20
 800361a:	7bfa      	ldrb	r2, [r7, #15]
 800361c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800361e:	7bfa      	ldrb	r2, [r7, #15]
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	b298      	uxth	r0, r3
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	4413      	add	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	332e      	adds	r3, #46	@ 0x2e
 8003632:	4602      	mov	r2, r0
 8003634:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003636:	7bfa      	ldrb	r2, [r7, #15]
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	4613      	mov	r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	4413      	add	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	440b      	add	r3, r1
 8003644:	3318      	adds	r3, #24
 8003646:	2200      	movs	r2, #0
 8003648:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800364a:	7bfa      	ldrb	r2, [r7, #15]
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	4413      	add	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	440b      	add	r3, r1
 8003658:	331c      	adds	r3, #28
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800365e:	7bfa      	ldrb	r2, [r7, #15]
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	4413      	add	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	3320      	adds	r3, #32
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003672:	7bfa      	ldrb	r2, [r7, #15]
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	4413      	add	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	440b      	add	r3, r1
 8003680:	3324      	adds	r3, #36	@ 0x24
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	3301      	adds	r3, #1
 800368a:	73fb      	strb	r3, [r7, #15]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	791b      	ldrb	r3, [r3, #4]
 8003690:	7bfa      	ldrb	r2, [r7, #15]
 8003692:	429a      	cmp	r2, r3
 8003694:	d3af      	bcc.n	80035f6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003696:	2300      	movs	r3, #0
 8003698:	73fb      	strb	r3, [r7, #15]
 800369a:	e044      	b.n	8003726 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800369c:	7bfa      	ldrb	r2, [r7, #15]
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	4613      	mov	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	4413      	add	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80036ae:	2200      	movs	r2, #0
 80036b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036b2:	7bfa      	ldrb	r2, [r7, #15]
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	4613      	mov	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	4413      	add	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	440b      	add	r3, r1
 80036c0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80036c4:	7bfa      	ldrb	r2, [r7, #15]
 80036c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036c8:	7bfa      	ldrb	r2, [r7, #15]
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	4413      	add	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80036da:	2200      	movs	r2, #0
 80036dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036de:	7bfa      	ldrb	r2, [r7, #15]
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	4413      	add	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036f4:	7bfa      	ldrb	r2, [r7, #15]
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	4613      	mov	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800370a:	7bfa      	ldrb	r2, [r7, #15]
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	4613      	mov	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	4413      	add	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003720:	7bfb      	ldrb	r3, [r7, #15]
 8003722:	3301      	adds	r3, #1
 8003724:	73fb      	strb	r3, [r7, #15]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	791b      	ldrb	r3, [r3, #4]
 800372a:	7bfa      	ldrb	r2, [r7, #15]
 800372c:	429a      	cmp	r2, r3
 800372e:	d3b5      	bcc.n	800369c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6818      	ldr	r0, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	7c1a      	ldrb	r2, [r3, #16]
 8003738:	f88d 2000 	strb.w	r2, [sp]
 800373c:	3304      	adds	r3, #4
 800373e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003740:	f006 f948 	bl	80099d4 <USB_DevInit>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d005      	beq.n	8003756 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2202      	movs	r2, #2
 800374e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e013      	b.n	800377e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	7b1b      	ldrb	r3, [r3, #12]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d102      	bne.n	8003772 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f001 f959 	bl	8004a24 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f007 f999 	bl	800aaae <USB_DevDisconnect>

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b082      	sub	sp, #8
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003794:	2b01      	cmp	r3, #1
 8003796:	d101      	bne.n	800379c <HAL_PCD_Start+0x16>
 8003798:	2302      	movs	r3, #2
 800379a:	e012      	b.n	80037c2 <HAL_PCD_Start+0x3c>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f006 f8a5 	bl	80098f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f007 f95a 	bl	800aa6c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80037ca:	b590      	push	{r4, r7, lr}
 80037cc:	b08d      	sub	sp, #52	@ 0x34
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f007 fa18 	bl	800ac16 <USB_GetMode>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f040 84b9 	bne.w	8004160 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f007 f97c 	bl	800aaf0 <USB_ReadInterrupts>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 84af 	beq.w	800415e <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	0a1b      	lsrs	r3, r3, #8
 800380a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f007 f969 	bl	800aaf0 <USB_ReadInterrupts>
 800381e:	4603      	mov	r3, r0
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b02      	cmp	r3, #2
 8003826:	d107      	bne.n	8003838 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695a      	ldr	r2, [r3, #20]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f002 0202 	and.w	r2, r2, #2
 8003836:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f007 f957 	bl	800aaf0 <USB_ReadInterrupts>
 8003842:	4603      	mov	r3, r0
 8003844:	f003 0310 	and.w	r3, r3, #16
 8003848:	2b10      	cmp	r3, #16
 800384a:	d161      	bne.n	8003910 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699a      	ldr	r2, [r3, #24]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0210 	bic.w	r2, r2, #16
 800385a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	f003 020f 	and.w	r2, r3, #15
 8003868:	4613      	mov	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	4413      	add	r3, r2
 8003878:	3304      	adds	r3, #4
 800387a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	0c5b      	lsrs	r3, r3, #17
 8003880:	f003 030f 	and.w	r3, r3, #15
 8003884:	2b02      	cmp	r3, #2
 8003886:	d124      	bne.n	80038d2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800388e:	4013      	ands	r3, r2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d035      	beq.n	8003900 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	091b      	lsrs	r3, r3, #4
 800389c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800389e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	461a      	mov	r2, r3
 80038a6:	6a38      	ldr	r0, [r7, #32]
 80038a8:	f006 ff8e 	bl	800a7c8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	091b      	lsrs	r3, r3, #4
 80038b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038b8:	441a      	add	r2, r3
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	695a      	ldr	r2, [r3, #20]
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	091b      	lsrs	r3, r3, #4
 80038c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038ca:	441a      	add	r2, r3
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	615a      	str	r2, [r3, #20]
 80038d0:	e016      	b.n	8003900 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	0c5b      	lsrs	r3, r3, #17
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	2b06      	cmp	r3, #6
 80038dc:	d110      	bne.n	8003900 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80038e4:	2208      	movs	r2, #8
 80038e6:	4619      	mov	r1, r3
 80038e8:	6a38      	ldr	r0, [r7, #32]
 80038ea:	f006 ff6d 	bl	800a7c8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	695a      	ldr	r2, [r3, #20]
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	091b      	lsrs	r3, r3, #4
 80038f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038fa:	441a      	add	r2, r3
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699a      	ldr	r2, [r3, #24]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0210 	orr.w	r2, r2, #16
 800390e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f007 f8eb 	bl	800aaf0 <USB_ReadInterrupts>
 800391a:	4603      	mov	r3, r0
 800391c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003920:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003924:	f040 80a7 	bne.w	8003a76 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f007 f8f0 	bl	800ab16 <USB_ReadDevAllOutEpInterrupt>
 8003936:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003938:	e099      	b.n	8003a6e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800393a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 808e 	beq.w	8003a62 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	4611      	mov	r1, r2
 8003950:	4618      	mov	r0, r3
 8003952:	f007 f914 	bl	800ab7e <USB_ReadDevOutEPInterrupt>
 8003956:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00c      	beq.n	800397c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	4413      	add	r3, r2
 800396a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800396e:	461a      	mov	r2, r3
 8003970:	2301      	movs	r3, #1
 8003972:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003974:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 fece 	bl	8004718 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00c      	beq.n	80039a0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003988:	015a      	lsls	r2, r3, #5
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	4413      	add	r3, r2
 800398e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003992:	461a      	mov	r2, r3
 8003994:	2308      	movs	r3, #8
 8003996:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003998:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 ffa4 	bl	80048e8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f003 0310 	and.w	r3, r3, #16
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d008      	beq.n	80039bc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80039aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ac:	015a      	lsls	r2, r3, #5
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	4413      	add	r3, r2
 80039b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039b6:	461a      	mov	r2, r3
 80039b8:	2310      	movs	r3, #16
 80039ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d030      	beq.n	8003a28 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ce:	2b80      	cmp	r3, #128	@ 0x80
 80039d0:	d109      	bne.n	80039e6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	69fa      	ldr	r2, [r7, #28]
 80039dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039e4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80039e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039e8:	4613      	mov	r3, r2
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	4413      	add	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	4413      	add	r3, r2
 80039f8:	3304      	adds	r3, #4
 80039fa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	78db      	ldrb	r3, [r3, #3]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d108      	bne.n	8003a16 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	2200      	movs	r2, #0
 8003a08:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	4619      	mov	r1, r3
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f009 fe8f 	bl	800d734 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a18:	015a      	lsls	r2, r3, #5
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a22:	461a      	mov	r2, r3
 8003a24:	2302      	movs	r3, #2
 8003a26:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	f003 0320 	and.w	r3, r3, #32
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d008      	beq.n	8003a44 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a3e:	461a      	mov	r2, r3
 8003a40:	2320      	movs	r3, #32
 8003a42:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d009      	beq.n	8003a62 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a60:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a64:	3301      	adds	r3, #1
 8003a66:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a6a:	085b      	lsrs	r3, r3, #1
 8003a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f47f af62 	bne.w	800393a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f007 f838 	bl	800aaf0 <USB_ReadInterrupts>
 8003a80:	4603      	mov	r3, r0
 8003a82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a8a:	f040 80db 	bne.w	8003c44 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f007 f859 	bl	800ab4a <USB_ReadDevAllInEpInterrupt>
 8003a98:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003a9e:	e0cd      	b.n	8003c3c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 80c2 	beq.w	8003c30 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f007 f87f 	bl	800abba <USB_ReadDevInEPInterrupt>
 8003abc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d057      	beq.n	8003b78 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aca:	f003 030f 	and.w	r3, r3, #15
 8003ace:	2201      	movs	r2, #1
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003adc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	69f9      	ldr	r1, [r7, #28]
 8003ae4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ae8:	4013      	ands	r3, r2
 8003aea:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003af8:	461a      	mov	r2, r3
 8003afa:	2301      	movs	r3, #1
 8003afc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	799b      	ldrb	r3, [r3, #6]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d132      	bne.n	8003b6c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	440b      	add	r3, r1
 8003b14:	3320      	adds	r3, #32
 8003b16:	6819      	ldr	r1, [r3, #0]
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4403      	add	r3, r0
 8003b26:	331c      	adds	r3, #28
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4419      	add	r1, r3
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b30:	4613      	mov	r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4403      	add	r3, r0
 8003b3a:	3320      	adds	r3, #32
 8003b3c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d113      	bne.n	8003b6c <HAL_PCD_IRQHandler+0x3a2>
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b48:	4613      	mov	r3, r2
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	440b      	add	r3, r1
 8003b52:	3324      	adds	r3, #36	@ 0x24
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d108      	bne.n	8003b6c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b64:	461a      	mov	r2, r3
 8003b66:	2101      	movs	r1, #1
 8003b68:	f007 f888 	bl	800ac7c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	4619      	mov	r1, r3
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f009 fd59 	bl	800d62a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d008      	beq.n	8003b94 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b84:	015a      	lsls	r2, r3, #5
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b8e:	461a      	mov	r2, r3
 8003b90:	2308      	movs	r3, #8
 8003b92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f003 0310 	and.w	r3, r3, #16
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d008      	beq.n	8003bb0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003baa:	461a      	mov	r2, r3
 8003bac:	2310      	movs	r3, #16
 8003bae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d008      	beq.n	8003bcc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbc:	015a      	lsls	r2, r3, #5
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	2340      	movs	r3, #64	@ 0x40
 8003bca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d023      	beq.n	8003c1e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003bd6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bd8:	6a38      	ldr	r0, [r7, #32]
 8003bda:	f006 f86b 	bl	8009cb4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003be0:	4613      	mov	r3, r2
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	4413      	add	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	3310      	adds	r3, #16
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	4413      	add	r3, r2
 8003bee:	3304      	adds	r3, #4
 8003bf0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	78db      	ldrb	r3, [r3, #3]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d108      	bne.n	8003c0c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	4619      	mov	r1, r3
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f009 fda6 	bl	800d758 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c18:	461a      	mov	r2, r3
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003c28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 fce8 	bl	8004600 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c32:	3301      	adds	r3, #1
 8003c34:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c38:	085b      	lsrs	r3, r3, #1
 8003c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f47f af2e 	bne.w	8003aa0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f006 ff51 	bl	800aaf0 <USB_ReadInterrupts>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c58:	d122      	bne.n	8003ca0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	69fa      	ldr	r2, [r7, #28]
 8003c64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c68:	f023 0301 	bic.w	r3, r3, #1
 8003c6c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d108      	bne.n	8003c8a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c80:	2100      	movs	r1, #0
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f009 ff24 	bl	800dad0 <HAL_PCDEx_LPM_Callback>
 8003c88:	e002      	b.n	8003c90 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f009 fd44 	bl	800d718 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695a      	ldr	r2, [r3, #20]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003c9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f006 ff23 	bl	800aaf0 <USB_ReadInterrupts>
 8003caa:	4603      	mov	r3, r0
 8003cac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cb4:	d112      	bne.n	8003cdc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d102      	bne.n	8003ccc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f009 fd00 	bl	800d6cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695a      	ldr	r2, [r3, #20]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003cda:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f006 ff05 	bl	800aaf0 <USB_ReadInterrupts>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cf0:	d121      	bne.n	8003d36 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695a      	ldr	r2, [r3, #20]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003d00:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d111      	bne.n	8003d30 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d1a:	089b      	lsrs	r3, r3, #2
 8003d1c:	f003 020f 	and.w	r2, r3, #15
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003d26:	2101      	movs	r1, #1
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f009 fed1 	bl	800dad0 <HAL_PCDEx_LPM_Callback>
 8003d2e:	e002      	b.n	8003d36 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f009 fccb 	bl	800d6cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f006 fed8 	bl	800aaf0 <USB_ReadInterrupts>
 8003d40:	4603      	mov	r3, r0
 8003d42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d4a:	f040 80b7 	bne.w	8003ebc <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	69fa      	ldr	r2, [r7, #28]
 8003d58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d5c:	f023 0301 	bic.w	r3, r3, #1
 8003d60:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2110      	movs	r1, #16
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f005 ffa3 	bl	8009cb4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d6e:	2300      	movs	r3, #0
 8003d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d72:	e046      	b.n	8003e02 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d76:	015a      	lsls	r2, r3, #5
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d80:	461a      	mov	r2, r3
 8003d82:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003d86:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d98:	0151      	lsls	r1, r2, #5
 8003d9a:	69fa      	ldr	r2, [r7, #28]
 8003d9c:	440a      	add	r2, r1
 8003d9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003da2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003da6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003db4:	461a      	mov	r2, r3
 8003db6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003dba:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dcc:	0151      	lsls	r1, r2, #5
 8003dce:	69fa      	ldr	r2, [r7, #28]
 8003dd0:	440a      	add	r2, r1
 8003dd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003dd6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003dda:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dec:	0151      	lsls	r1, r2, #5
 8003dee:	69fa      	ldr	r2, [r7, #28]
 8003df0:	440a      	add	r2, r1
 8003df2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003df6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003dfa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dfe:	3301      	adds	r3, #1
 8003e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	791b      	ldrb	r3, [r3, #4]
 8003e06:	461a      	mov	r2, r3
 8003e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d3b2      	bcc.n	8003d74 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	69fa      	ldr	r2, [r7, #28]
 8003e18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e1c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003e20:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	7bdb      	ldrb	r3, [r3, #15]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d016      	beq.n	8003e58 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e34:	69fa      	ldr	r2, [r7, #28]
 8003e36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e3a:	f043 030b 	orr.w	r3, r3, #11
 8003e3e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4a:	69fa      	ldr	r2, [r7, #28]
 8003e4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e50:	f043 030b 	orr.w	r3, r3, #11
 8003e54:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e56:	e015      	b.n	8003e84 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e5e:	695a      	ldr	r2, [r3, #20]
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e66:	4619      	mov	r1, r3
 8003e68:	f242 032b 	movw	r3, #8235	@ 0x202b
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	69fa      	ldr	r2, [r7, #28]
 8003e7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e7e:	f043 030b 	orr.w	r3, r3, #11
 8003e82:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	69fa      	ldr	r2, [r7, #28]
 8003e8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e92:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003e96:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6818      	ldr	r0, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	f006 fee8 	bl	800ac7c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695a      	ldr	r2, [r3, #20]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003eba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f006 fe15 	bl	800aaf0 <USB_ReadInterrupts>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ecc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ed0:	d123      	bne.n	8003f1a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f006 feac 	bl	800ac34 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f005 ff60 	bl	8009da6 <USB_GetDevSpeed>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	461a      	mov	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681c      	ldr	r4, [r3, #0]
 8003ef2:	f001 fab1 	bl	8005458 <HAL_RCC_GetHCLKFreq>
 8003ef6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003efc:	461a      	mov	r2, r3
 8003efe:	4620      	mov	r0, r4
 8003f00:	f005 fc58 	bl	80097b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f009 fbb8 	bl	800d67a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695a      	ldr	r2, [r3, #20]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003f18:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f006 fde6 	bl	800aaf0 <USB_ReadInterrupts>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	2b08      	cmp	r3, #8
 8003f2c:	d10a      	bne.n	8003f44 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f009 fb95 	bl	800d65e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	695a      	ldr	r2, [r3, #20]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f002 0208 	and.w	r2, r2, #8
 8003f42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f006 fdd1 	bl	800aaf0 <USB_ReadInterrupts>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f54:	2b80      	cmp	r3, #128	@ 0x80
 8003f56:	d123      	bne.n	8003fa0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f64:	2301      	movs	r3, #1
 8003f66:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f68:	e014      	b.n	8003f94 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f6e:	4613      	mov	r3, r2
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	4413      	add	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	440b      	add	r3, r1
 8003f78:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d105      	bne.n	8003f8e <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	4619      	mov	r1, r3
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 fb08 	bl	800459e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f90:	3301      	adds	r3, #1
 8003f92:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	791b      	ldrb	r3, [r3, #4]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d3e4      	bcc.n	8003f6a <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f006 fda3 	bl	800aaf0 <USB_ReadInterrupts>
 8003faa:	4603      	mov	r3, r0
 8003fac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fb0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fb4:	d13c      	bne.n	8004030 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fba:	e02b      	b.n	8004014 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	4413      	add	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	3318      	adds	r3, #24
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d115      	bne.n	800400e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003fe2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	da12      	bge.n	800400e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fec:	4613      	mov	r3, r2
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	3317      	adds	r3, #23
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004004:	b2db      	uxtb	r3, r3
 8004006:	4619      	mov	r1, r3
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 fac8 	bl	800459e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800400e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004010:	3301      	adds	r3, #1
 8004012:	627b      	str	r3, [r7, #36]	@ 0x24
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	791b      	ldrb	r3, [r3, #4]
 8004018:	461a      	mov	r2, r3
 800401a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401c:	4293      	cmp	r3, r2
 800401e:	d3cd      	bcc.n	8003fbc <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695a      	ldr	r2, [r3, #20]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800402e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4618      	mov	r0, r3
 8004036:	f006 fd5b 	bl	800aaf0 <USB_ReadInterrupts>
 800403a:	4603      	mov	r3, r0
 800403c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004040:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004044:	d156      	bne.n	80040f4 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004046:	2301      	movs	r3, #1
 8004048:	627b      	str	r3, [r7, #36]	@ 0x24
 800404a:	e045      	b.n	80040d8 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800404c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404e:	015a      	lsls	r2, r3, #5
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	4413      	add	r3, r2
 8004054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004060:	4613      	mov	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	4413      	add	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d12e      	bne.n	80040d2 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004074:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004076:	2b00      	cmp	r3, #0
 8004078:	da2b      	bge.n	80040d2 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004086:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800408a:	429a      	cmp	r2, r3
 800408c:	d121      	bne.n	80040d2 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004092:	4613      	mov	r3, r2
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	4413      	add	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	440b      	add	r3, r1
 800409c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80040a0:	2201      	movs	r2, #1
 80040a2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80040a4:	6a3b      	ldr	r3, [r7, #32]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10a      	bne.n	80040d2 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	69fa      	ldr	r2, [r7, #28]
 80040c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040ce:	6053      	str	r3, [r2, #4]
            break;
 80040d0:	e008      	b.n	80040e4 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d4:	3301      	adds	r3, #1
 80040d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	791b      	ldrb	r3, [r3, #4]
 80040dc:	461a      	mov	r2, r3
 80040de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d3b3      	bcc.n	800404c <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695a      	ldr	r2, [r3, #20]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80040f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f006 fcf9 	bl	800aaf0 <USB_ReadInterrupts>
 80040fe:	4603      	mov	r3, r0
 8004100:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004104:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004108:	d10a      	bne.n	8004120 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f009 fb36 	bl	800d77c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695a      	ldr	r2, [r3, #20]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800411e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f006 fce3 	bl	800aaf0 <USB_ReadInterrupts>
 800412a:	4603      	mov	r3, r0
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b04      	cmp	r3, #4
 8004132:	d115      	bne.n	8004160 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	f003 0304 	and.w	r3, r3, #4
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f009 fb26 	bl	800d798 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6859      	ldr	r1, [r3, #4]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	430a      	orrs	r2, r1
 800415a:	605a      	str	r2, [r3, #4]
 800415c:	e000      	b.n	8004160 <HAL_PCD_IRQHandler+0x996>
      return;
 800415e:	bf00      	nop
    }
  }
}
 8004160:	3734      	adds	r7, #52	@ 0x34
 8004162:	46bd      	mov	sp, r7
 8004164:	bd90      	pop	{r4, r7, pc}

08004166 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	460b      	mov	r3, r1
 8004170:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <HAL_PCD_SetAddress+0x1a>
 800417c:	2302      	movs	r3, #2
 800417e:	e012      	b.n	80041a6 <HAL_PCD_SetAddress+0x40>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	78fa      	ldrb	r2, [r7, #3]
 800418c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	78fa      	ldrb	r2, [r7, #3]
 8004194:	4611      	mov	r1, r2
 8004196:	4618      	mov	r0, r3
 8004198:	f006 fc42 	bl	800aa20 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b084      	sub	sp, #16
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
 80041b6:	4608      	mov	r0, r1
 80041b8:	4611      	mov	r1, r2
 80041ba:	461a      	mov	r2, r3
 80041bc:	4603      	mov	r3, r0
 80041be:	70fb      	strb	r3, [r7, #3]
 80041c0:	460b      	mov	r3, r1
 80041c2:	803b      	strh	r3, [r7, #0]
 80041c4:	4613      	mov	r3, r2
 80041c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	da0f      	bge.n	80041f4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041d4:	78fb      	ldrb	r3, [r7, #3]
 80041d6:	f003 020f 	and.w	r2, r3, #15
 80041da:	4613      	mov	r3, r2
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	4413      	add	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	3310      	adds	r3, #16
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	4413      	add	r3, r2
 80041e8:	3304      	adds	r3, #4
 80041ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2201      	movs	r2, #1
 80041f0:	705a      	strb	r2, [r3, #1]
 80041f2:	e00f      	b.n	8004214 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041f4:	78fb      	ldrb	r3, [r7, #3]
 80041f6:	f003 020f 	and.w	r2, r3, #15
 80041fa:	4613      	mov	r3, r2
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	4413      	add	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	4413      	add	r3, r2
 800420a:	3304      	adds	r3, #4
 800420c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004214:	78fb      	ldrb	r3, [r7, #3]
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	b2da      	uxtb	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004220:	883a      	ldrh	r2, [r7, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	78ba      	ldrb	r2, [r7, #2]
 800422a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	785b      	ldrb	r3, [r3, #1]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d004      	beq.n	800423e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	461a      	mov	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800423e:	78bb      	ldrb	r3, [r7, #2]
 8004240:	2b02      	cmp	r3, #2
 8004242:	d102      	bne.n	800424a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004250:	2b01      	cmp	r3, #1
 8004252:	d101      	bne.n	8004258 <HAL_PCD_EP_Open+0xaa>
 8004254:	2302      	movs	r3, #2
 8004256:	e00e      	b.n	8004276 <HAL_PCD_EP_Open+0xc8>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68f9      	ldr	r1, [r7, #12]
 8004266:	4618      	mov	r0, r3
 8004268:	f005 fdc2 	bl	8009df0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004274:	7afb      	ldrb	r3, [r7, #11]
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b084      	sub	sp, #16
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
 8004286:	460b      	mov	r3, r1
 8004288:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800428a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800428e:	2b00      	cmp	r3, #0
 8004290:	da0f      	bge.n	80042b2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004292:	78fb      	ldrb	r3, [r7, #3]
 8004294:	f003 020f 	and.w	r2, r3, #15
 8004298:	4613      	mov	r3, r2
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	4413      	add	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	3310      	adds	r3, #16
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	4413      	add	r3, r2
 80042a6:	3304      	adds	r3, #4
 80042a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2201      	movs	r2, #1
 80042ae:	705a      	strb	r2, [r3, #1]
 80042b0:	e00f      	b.n	80042d2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042b2:	78fb      	ldrb	r3, [r7, #3]
 80042b4:	f003 020f 	and.w	r2, r3, #15
 80042b8:	4613      	mov	r3, r2
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	4413      	add	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	4413      	add	r3, r2
 80042c8:	3304      	adds	r3, #4
 80042ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80042d2:	78fb      	ldrb	r3, [r7, #3]
 80042d4:	f003 030f 	and.w	r3, r3, #15
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_PCD_EP_Close+0x6e>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e00e      	b.n	800430a <HAL_PCD_EP_Close+0x8c>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68f9      	ldr	r1, [r7, #12]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f005 fe00 	bl	8009f00 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b086      	sub	sp, #24
 8004316:	af00      	add	r7, sp, #0
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	603b      	str	r3, [r7, #0]
 800431e:	460b      	mov	r3, r1
 8004320:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004322:	7afb      	ldrb	r3, [r7, #11]
 8004324:	f003 020f 	and.w	r2, r3, #15
 8004328:	4613      	mov	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	4413      	add	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	4413      	add	r3, r2
 8004338:	3304      	adds	r3, #4
 800433a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	2200      	movs	r2, #0
 800434c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2200      	movs	r2, #0
 8004352:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004354:	7afb      	ldrb	r3, [r7, #11]
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	b2da      	uxtb	r2, r3
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	799b      	ldrb	r3, [r3, #6]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d102      	bne.n	800436e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6818      	ldr	r0, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	799b      	ldrb	r3, [r3, #6]
 8004376:	461a      	mov	r2, r3
 8004378:	6979      	ldr	r1, [r7, #20]
 800437a:	f005 fe9d 	bl	800a0b8 <USB_EPStartXfer>

  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	f003 020f 	and.w	r2, r3, #15
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	4613      	mov	r3, r2
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	4413      	add	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	440b      	add	r3, r1
 80043a6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80043aa:	681b      	ldr	r3, [r3, #0]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	607a      	str	r2, [r7, #4]
 80043c2:	603b      	str	r3, [r7, #0]
 80043c4:	460b      	mov	r3, r1
 80043c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043c8:	7afb      	ldrb	r3, [r7, #11]
 80043ca:	f003 020f 	and.w	r2, r3, #15
 80043ce:	4613      	mov	r3, r2
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	4413      	add	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	3310      	adds	r3, #16
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	4413      	add	r3, r2
 80043dc:	3304      	adds	r3, #4
 80043de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	2200      	movs	r2, #0
 80043f0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	2201      	movs	r2, #1
 80043f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043f8:	7afb      	ldrb	r3, [r7, #11]
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	799b      	ldrb	r3, [r3, #6]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d102      	bne.n	8004412 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6818      	ldr	r0, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	799b      	ldrb	r3, [r3, #6]
 800441a:	461a      	mov	r2, r3
 800441c:	6979      	ldr	r1, [r7, #20]
 800441e:	f005 fe4b 	bl	800a0b8 <USB_EPStartXfer>

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3718      	adds	r7, #24
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	460b      	mov	r3, r1
 8004436:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004438:	78fb      	ldrb	r3, [r7, #3]
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	7912      	ldrb	r2, [r2, #4]
 8004442:	4293      	cmp	r3, r2
 8004444:	d901      	bls.n	800444a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e04f      	b.n	80044ea <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800444a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800444e:	2b00      	cmp	r3, #0
 8004450:	da0f      	bge.n	8004472 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004452:	78fb      	ldrb	r3, [r7, #3]
 8004454:	f003 020f 	and.w	r2, r3, #15
 8004458:	4613      	mov	r3, r2
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	4413      	add	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	3310      	adds	r3, #16
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	4413      	add	r3, r2
 8004466:	3304      	adds	r3, #4
 8004468:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2201      	movs	r2, #1
 800446e:	705a      	strb	r2, [r3, #1]
 8004470:	e00d      	b.n	800448e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004472:	78fa      	ldrb	r2, [r7, #3]
 8004474:	4613      	mov	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	4413      	add	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	4413      	add	r3, r2
 8004484:	3304      	adds	r3, #4
 8004486:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2201      	movs	r2, #1
 8004492:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004494:	78fb      	ldrb	r3, [r7, #3]
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	b2da      	uxtb	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d101      	bne.n	80044ae <HAL_PCD_EP_SetStall+0x82>
 80044aa:	2302      	movs	r3, #2
 80044ac:	e01d      	b.n	80044ea <HAL_PCD_EP_SetStall+0xbe>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68f9      	ldr	r1, [r7, #12]
 80044bc:	4618      	mov	r0, r3
 80044be:	f006 f9db 	bl	800a878 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044c2:	78fb      	ldrb	r3, [r7, #3]
 80044c4:	f003 030f 	and.w	r3, r3, #15
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d109      	bne.n	80044e0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6818      	ldr	r0, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	7999      	ldrb	r1, [r3, #6]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80044da:	461a      	mov	r2, r3
 80044dc:	f006 fbce 	bl	800ac7c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b084      	sub	sp, #16
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	460b      	mov	r3, r1
 80044fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80044fe:	78fb      	ldrb	r3, [r7, #3]
 8004500:	f003 030f 	and.w	r3, r3, #15
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	7912      	ldrb	r2, [r2, #4]
 8004508:	4293      	cmp	r3, r2
 800450a:	d901      	bls.n	8004510 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e042      	b.n	8004596 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004510:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004514:	2b00      	cmp	r3, #0
 8004516:	da0f      	bge.n	8004538 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004518:	78fb      	ldrb	r3, [r7, #3]
 800451a:	f003 020f 	and.w	r2, r3, #15
 800451e:	4613      	mov	r3, r2
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	4413      	add	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	3310      	adds	r3, #16
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	4413      	add	r3, r2
 800452c:	3304      	adds	r3, #4
 800452e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2201      	movs	r2, #1
 8004534:	705a      	strb	r2, [r3, #1]
 8004536:	e00f      	b.n	8004558 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004538:	78fb      	ldrb	r3, [r7, #3]
 800453a:	f003 020f 	and.w	r2, r3, #15
 800453e:	4613      	mov	r3, r2
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	4413      	add	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	4413      	add	r3, r2
 800454e:	3304      	adds	r3, #4
 8004550:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800455e:	78fb      	ldrb	r3, [r7, #3]
 8004560:	f003 030f 	and.w	r3, r3, #15
 8004564:	b2da      	uxtb	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_PCD_EP_ClrStall+0x86>
 8004574:	2302      	movs	r3, #2
 8004576:	e00e      	b.n	8004596 <HAL_PCD_EP_ClrStall+0xa4>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68f9      	ldr	r1, [r7, #12]
 8004586:	4618      	mov	r0, r3
 8004588:	f006 f9e4 	bl	800a954 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b084      	sub	sp, #16
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	460b      	mov	r3, r1
 80045a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80045aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	da0c      	bge.n	80045cc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045b2:	78fb      	ldrb	r3, [r7, #3]
 80045b4:	f003 020f 	and.w	r2, r3, #15
 80045b8:	4613      	mov	r3, r2
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	4413      	add	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	3310      	adds	r3, #16
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	4413      	add	r3, r2
 80045c6:	3304      	adds	r3, #4
 80045c8:	60fb      	str	r3, [r7, #12]
 80045ca:	e00c      	b.n	80045e6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045cc:	78fb      	ldrb	r3, [r7, #3]
 80045ce:	f003 020f 	and.w	r2, r3, #15
 80045d2:	4613      	mov	r3, r2
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	4413      	add	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	4413      	add	r3, r2
 80045e2:	3304      	adds	r3, #4
 80045e4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68f9      	ldr	r1, [r7, #12]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f006 f803 	bl	800a5f8 <USB_EPStopXfer>
 80045f2:	4603      	mov	r3, r0
 80045f4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80045f6:	7afb      	ldrb	r3, [r7, #11]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b08a      	sub	sp, #40	@ 0x28
 8004604:	af02      	add	r7, sp, #8
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	4613      	mov	r3, r2
 8004618:	00db      	lsls	r3, r3, #3
 800461a:	4413      	add	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	3310      	adds	r3, #16
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	4413      	add	r3, r2
 8004624:	3304      	adds	r3, #4
 8004626:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	695a      	ldr	r2, [r3, #20]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	429a      	cmp	r2, r3
 8004632:	d901      	bls.n	8004638 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e06b      	b.n	8004710 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	691a      	ldr	r2, [r3, #16]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	69fa      	ldr	r2, [r7, #28]
 800464a:	429a      	cmp	r2, r3
 800464c:	d902      	bls.n	8004654 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	3303      	adds	r3, #3
 8004658:	089b      	lsrs	r3, r3, #2
 800465a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800465c:	e02a      	b.n	80046b4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	691a      	ldr	r2, [r3, #16]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	69fa      	ldr	r2, [r7, #28]
 8004670:	429a      	cmp	r2, r3
 8004672:	d902      	bls.n	800467a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	3303      	adds	r3, #3
 800467e:	089b      	lsrs	r3, r3, #2
 8004680:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	68d9      	ldr	r1, [r3, #12]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	b2da      	uxtb	r2, r3
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	4603      	mov	r3, r0
 8004696:	6978      	ldr	r0, [r7, #20]
 8004698:	f006 f858 	bl	800a74c <USB_WritePacket>

    ep->xfer_buff  += len;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	441a      	add	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	695a      	ldr	r2, [r3, #20]
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	441a      	add	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d809      	bhi.n	80046de <PCD_WriteEmptyTxFifo+0xde>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	695a      	ldr	r2, [r3, #20]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d203      	bcs.n	80046de <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1bf      	bne.n	800465e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	691a      	ldr	r2, [r3, #16]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d811      	bhi.n	800470e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	f003 030f 	and.w	r3, r3, #15
 80046f0:	2201      	movs	r2, #1
 80046f2:	fa02 f303 	lsl.w	r3, r2, r3
 80046f6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	43db      	mvns	r3, r3
 8004704:	6939      	ldr	r1, [r7, #16]
 8004706:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800470a:	4013      	ands	r3, r2
 800470c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3720      	adds	r7, #32
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b088      	sub	sp, #32
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	333c      	adds	r3, #60	@ 0x3c
 8004730:	3304      	adds	r3, #4
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	4413      	add	r3, r2
 800473e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	799b      	ldrb	r3, [r3, #6]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d17b      	bne.n	8004846 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b00      	cmp	r3, #0
 8004756:	d015      	beq.n	8004784 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	4a61      	ldr	r2, [pc, #388]	@ (80048e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800475c:	4293      	cmp	r3, r2
 800475e:	f240 80b9 	bls.w	80048d4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 80b3 	beq.w	80048d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	015a      	lsls	r2, r3, #5
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	4413      	add	r3, r2
 8004776:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800477a:	461a      	mov	r2, r3
 800477c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004780:	6093      	str	r3, [r2, #8]
 8004782:	e0a7      	b.n	80048d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f003 0320 	and.w	r3, r3, #32
 800478a:	2b00      	cmp	r3, #0
 800478c:	d009      	beq.n	80047a2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800479a:	461a      	mov	r2, r3
 800479c:	2320      	movs	r3, #32
 800479e:	6093      	str	r3, [r2, #8]
 80047a0:	e098      	b.n	80048d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f040 8093 	bne.w	80048d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	4a4b      	ldr	r2, [pc, #300]	@ (80048e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d90f      	bls.n	80047d6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00a      	beq.n	80047d6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047cc:	461a      	mov	r2, r3
 80047ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047d2:	6093      	str	r3, [r2, #8]
 80047d4:	e07e      	b.n	80048d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	4613      	mov	r3, r2
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	4413      	add	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	4413      	add	r3, r2
 80047e8:	3304      	adds	r3, #4
 80047ea:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6a1a      	ldr	r2, [r3, #32]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	0159      	lsls	r1, r3, #5
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	440b      	add	r3, r1
 80047f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004802:	1ad2      	subs	r2, r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d114      	bne.n	8004838 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d109      	bne.n	800482a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004820:	461a      	mov	r2, r3
 8004822:	2101      	movs	r1, #1
 8004824:	f006 fa2a 	bl	800ac7c <USB_EP0_OutStart>
 8004828:	e006      	b.n	8004838 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	441a      	add	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	b2db      	uxtb	r3, r3
 800483c:	4619      	mov	r1, r3
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f008 fed8 	bl	800d5f4 <HAL_PCD_DataOutStageCallback>
 8004844:	e046      	b.n	80048d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	4a26      	ldr	r2, [pc, #152]	@ (80048e4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d124      	bne.n	8004898 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	4413      	add	r3, r2
 8004860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004864:	461a      	mov	r2, r3
 8004866:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800486a:	6093      	str	r3, [r2, #8]
 800486c:	e032      	b.n	80048d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f003 0320 	and.w	r3, r3, #32
 8004874:	2b00      	cmp	r3, #0
 8004876:	d008      	beq.n	800488a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	4413      	add	r3, r2
 8004880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004884:	461a      	mov	r2, r3
 8004886:	2320      	movs	r3, #32
 8004888:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	b2db      	uxtb	r3, r3
 800488e:	4619      	mov	r1, r3
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f008 feaf 	bl	800d5f4 <HAL_PCD_DataOutStageCallback>
 8004896:	e01d      	b.n	80048d4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d114      	bne.n	80048c8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	4613      	mov	r3, r2
 80048a4:	00db      	lsls	r3, r3, #3
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	440b      	add	r3, r1
 80048ac:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d108      	bne.n	80048c8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6818      	ldr	r0, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80048c0:	461a      	mov	r2, r3
 80048c2:	2100      	movs	r1, #0
 80048c4:	f006 f9da 	bl	800ac7c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	4619      	mov	r1, r3
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f008 fe90 	bl	800d5f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3720      	adds	r7, #32
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	4f54300a 	.word	0x4f54300a
 80048e4:	4f54310a 	.word	0x4f54310a

080048e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	333c      	adds	r3, #60	@ 0x3c
 8004900:	3304      	adds	r3, #4
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	4413      	add	r3, r2
 800490e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4a15      	ldr	r2, [pc, #84]	@ (8004970 <PCD_EP_OutSetupPacket_int+0x88>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d90e      	bls.n	800493c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004924:	2b00      	cmp	r3, #0
 8004926:	d009      	beq.n	800493c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004934:	461a      	mov	r2, r3
 8004936:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800493a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f008 fe47 	bl	800d5d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	4a0a      	ldr	r2, [pc, #40]	@ (8004970 <PCD_EP_OutSetupPacket_int+0x88>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d90c      	bls.n	8004964 <PCD_EP_OutSetupPacket_int+0x7c>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	799b      	ldrb	r3, [r3, #6]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d108      	bne.n	8004964 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6818      	ldr	r0, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800495c:	461a      	mov	r2, r3
 800495e:	2101      	movs	r1, #1
 8004960:	f006 f98c 	bl	800ac7c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	4f54300a 	.word	0x4f54300a

08004974 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	460b      	mov	r3, r1
 800497e:	70fb      	strb	r3, [r7, #3]
 8004980:	4613      	mov	r3, r2
 8004982:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800498c:	78fb      	ldrb	r3, [r7, #3]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d107      	bne.n	80049a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004992:	883b      	ldrh	r3, [r7, #0]
 8004994:	0419      	lsls	r1, r3, #16
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	430a      	orrs	r2, r1
 800499e:	629a      	str	r2, [r3, #40]	@ 0x28
 80049a0:	e028      	b.n	80049f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a8:	0c1b      	lsrs	r3, r3, #16
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	4413      	add	r3, r2
 80049ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049b0:	2300      	movs	r3, #0
 80049b2:	73fb      	strb	r3, [r7, #15]
 80049b4:	e00d      	b.n	80049d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	7bfb      	ldrb	r3, [r7, #15]
 80049bc:	3340      	adds	r3, #64	@ 0x40
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	0c1b      	lsrs	r3, r3, #16
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	4413      	add	r3, r2
 80049ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
 80049ce:	3301      	adds	r3, #1
 80049d0:	73fb      	strb	r3, [r7, #15]
 80049d2:	7bfa      	ldrb	r2, [r7, #15]
 80049d4:	78fb      	ldrb	r3, [r7, #3]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	429a      	cmp	r2, r3
 80049da:	d3ec      	bcc.n	80049b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80049dc:	883b      	ldrh	r3, [r7, #0]
 80049de:	0418      	lsls	r0, r3, #16
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6819      	ldr	r1, [r3, #0]
 80049e4:	78fb      	ldrb	r3, [r7, #3]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	4302      	orrs	r2, r0
 80049ec:	3340      	adds	r3, #64	@ 0x40
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	440b      	add	r3, r1
 80049f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	887a      	ldrh	r2, [r7, #2]
 8004a14:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a52:	4b05      	ldr	r3, [pc, #20]	@ (8004a68 <HAL_PCDEx_ActivateLPM+0x44>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	10000003 	.word	0x10000003

08004a6c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004a72:	2300      	movs	r3, #0
 8004a74:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a76:	4b23      	ldr	r3, [pc, #140]	@ (8004b04 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7a:	4a22      	ldr	r2, [pc, #136]	@ (8004b04 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a80:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a82:	4b20      	ldr	r3, [pc, #128]	@ (8004b04 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a8a:	603b      	str	r3, [r7, #0]
 8004a8c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8004b08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a1d      	ldr	r2, [pc, #116]	@ (8004b08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a98:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a9a:	f7fd fa97 	bl	8001fcc <HAL_GetTick>
 8004a9e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004aa0:	e009      	b.n	8004ab6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004aa2:	f7fd fa93 	bl	8001fcc <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ab0:	d901      	bls.n	8004ab6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e022      	b.n	8004afc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ab6:	4b14      	ldr	r3, [pc, #80]	@ (8004b08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004abe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ac2:	d1ee      	bne.n	8004aa2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004ac4:	4b10      	ldr	r3, [pc, #64]	@ (8004b08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a0f      	ldr	r2, [pc, #60]	@ (8004b08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004aca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ace:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ad0:	f7fd fa7c 	bl	8001fcc <HAL_GetTick>
 8004ad4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ad6:	e009      	b.n	8004aec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ad8:	f7fd fa78 	bl	8001fcc <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ae6:	d901      	bls.n	8004aec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e007      	b.n	8004afc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004aec:	4b06      	ldr	r3, [pc, #24]	@ (8004b08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004af4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004af8:	d1ee      	bne.n	8004ad8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3708      	adds	r7, #8
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	40023800 	.word	0x40023800
 8004b08:	40007000 	.word	0x40007000

08004b0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004b14:	2300      	movs	r3, #0
 8004b16:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e291      	b.n	8005046 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 8087 	beq.w	8004c3e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b30:	4b96      	ldr	r3, [pc, #600]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f003 030c 	and.w	r3, r3, #12
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	d00c      	beq.n	8004b56 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b3c:	4b93      	ldr	r3, [pc, #588]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f003 030c 	and.w	r3, r3, #12
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d112      	bne.n	8004b6e <HAL_RCC_OscConfig+0x62>
 8004b48:	4b90      	ldr	r3, [pc, #576]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b54:	d10b      	bne.n	8004b6e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b56:	4b8d      	ldr	r3, [pc, #564]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d06c      	beq.n	8004c3c <HAL_RCC_OscConfig+0x130>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d168      	bne.n	8004c3c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e26b      	b.n	8005046 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b76:	d106      	bne.n	8004b86 <HAL_RCC_OscConfig+0x7a>
 8004b78:	4b84      	ldr	r3, [pc, #528]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a83      	ldr	r2, [pc, #524]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004b7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b82:	6013      	str	r3, [r2, #0]
 8004b84:	e02e      	b.n	8004be4 <HAL_RCC_OscConfig+0xd8>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10c      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x9c>
 8004b8e:	4b7f      	ldr	r3, [pc, #508]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a7e      	ldr	r2, [pc, #504]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004b94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	4b7c      	ldr	r3, [pc, #496]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a7b      	ldr	r2, [pc, #492]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004ba0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ba4:	6013      	str	r3, [r2, #0]
 8004ba6:	e01d      	b.n	8004be4 <HAL_RCC_OscConfig+0xd8>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bb0:	d10c      	bne.n	8004bcc <HAL_RCC_OscConfig+0xc0>
 8004bb2:	4b76      	ldr	r3, [pc, #472]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a75      	ldr	r2, [pc, #468]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004bb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	4b73      	ldr	r3, [pc, #460]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a72      	ldr	r2, [pc, #456]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004bc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	e00b      	b.n	8004be4 <HAL_RCC_OscConfig+0xd8>
 8004bcc:	4b6f      	ldr	r3, [pc, #444]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a6e      	ldr	r2, [pc, #440]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004bd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	4b6c      	ldr	r3, [pc, #432]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a6b      	ldr	r2, [pc, #428]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004bde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004be2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d013      	beq.n	8004c14 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bec:	f7fd f9ee 	bl	8001fcc <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bf4:	f7fd f9ea 	bl	8001fcc <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b64      	cmp	r3, #100	@ 0x64
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e21f      	b.n	8005046 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c06:	4b61      	ldr	r3, [pc, #388]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0f0      	beq.n	8004bf4 <HAL_RCC_OscConfig+0xe8>
 8004c12:	e014      	b.n	8004c3e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c14:	f7fd f9da 	bl	8001fcc <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c1c:	f7fd f9d6 	bl	8001fcc <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b64      	cmp	r3, #100	@ 0x64
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e20b      	b.n	8005046 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c2e:	4b57      	ldr	r3, [pc, #348]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1f0      	bne.n	8004c1c <HAL_RCC_OscConfig+0x110>
 8004c3a:	e000      	b.n	8004c3e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d069      	beq.n	8004d1e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c4a:	4b50      	ldr	r3, [pc, #320]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 030c 	and.w	r3, r3, #12
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00b      	beq.n	8004c6e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c56:	4b4d      	ldr	r3, [pc, #308]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f003 030c 	and.w	r3, r3, #12
 8004c5e:	2b08      	cmp	r3, #8
 8004c60:	d11c      	bne.n	8004c9c <HAL_RCC_OscConfig+0x190>
 8004c62:	4b4a      	ldr	r3, [pc, #296]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d116      	bne.n	8004c9c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c6e:	4b47      	ldr	r3, [pc, #284]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d005      	beq.n	8004c86 <HAL_RCC_OscConfig+0x17a>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d001      	beq.n	8004c86 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e1df      	b.n	8005046 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c86:	4b41      	ldr	r3, [pc, #260]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	493d      	ldr	r1, [pc, #244]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c9a:	e040      	b.n	8004d1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d023      	beq.n	8004cec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ca4:	4b39      	ldr	r3, [pc, #228]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a38      	ldr	r2, [pc, #224]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004caa:	f043 0301 	orr.w	r3, r3, #1
 8004cae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb0:	f7fd f98c 	bl	8001fcc <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cb6:	e008      	b.n	8004cca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cb8:	f7fd f988 	bl	8001fcc <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e1bd      	b.n	8005046 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cca:	4b30      	ldr	r3, [pc, #192]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0f0      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cd6:	4b2d      	ldr	r3, [pc, #180]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	4929      	ldr	r1, [pc, #164]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	600b      	str	r3, [r1, #0]
 8004cea:	e018      	b.n	8004d1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cec:	4b27      	ldr	r3, [pc, #156]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a26      	ldr	r2, [pc, #152]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004cf2:	f023 0301 	bic.w	r3, r3, #1
 8004cf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf8:	f7fd f968 	bl	8001fcc <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d00:	f7fd f964 	bl	8001fcc <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e199      	b.n	8005046 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d12:	4b1e      	ldr	r3, [pc, #120]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1f0      	bne.n	8004d00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0308 	and.w	r3, r3, #8
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d038      	beq.n	8004d9c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d019      	beq.n	8004d66 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d32:	4b16      	ldr	r3, [pc, #88]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004d34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d36:	4a15      	ldr	r2, [pc, #84]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004d38:	f043 0301 	orr.w	r3, r3, #1
 8004d3c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d3e:	f7fd f945 	bl	8001fcc <HAL_GetTick>
 8004d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d44:	e008      	b.n	8004d58 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d46:	f7fd f941 	bl	8001fcc <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d901      	bls.n	8004d58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e176      	b.n	8005046 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d58:	4b0c      	ldr	r3, [pc, #48]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004d5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d0f0      	beq.n	8004d46 <HAL_RCC_OscConfig+0x23a>
 8004d64:	e01a      	b.n	8004d9c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d66:	4b09      	ldr	r3, [pc, #36]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004d68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d6a:	4a08      	ldr	r2, [pc, #32]	@ (8004d8c <HAL_RCC_OscConfig+0x280>)
 8004d6c:	f023 0301 	bic.w	r3, r3, #1
 8004d70:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d72:	f7fd f92b 	bl	8001fcc <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d78:	e00a      	b.n	8004d90 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d7a:	f7fd f927 	bl	8001fcc <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d903      	bls.n	8004d90 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e15c      	b.n	8005046 <HAL_RCC_OscConfig+0x53a>
 8004d8c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d90:	4b91      	ldr	r3, [pc, #580]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004d92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1ee      	bne.n	8004d7a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0304 	and.w	r3, r3, #4
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 80a4 	beq.w	8004ef2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004daa:	4b8b      	ldr	r3, [pc, #556]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10d      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004db6:	4b88      	ldr	r3, [pc, #544]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dba:	4a87      	ldr	r2, [pc, #540]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004dbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004dc2:	4b85      	ldr	r3, [pc, #532]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dca:	60bb      	str	r3, [r7, #8]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dd2:	4b82      	ldr	r3, [pc, #520]	@ (8004fdc <HAL_RCC_OscConfig+0x4d0>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d118      	bne.n	8004e10 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004dde:	4b7f      	ldr	r3, [pc, #508]	@ (8004fdc <HAL_RCC_OscConfig+0x4d0>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a7e      	ldr	r2, [pc, #504]	@ (8004fdc <HAL_RCC_OscConfig+0x4d0>)
 8004de4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004de8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dea:	f7fd f8ef 	bl	8001fcc <HAL_GetTick>
 8004dee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004df0:	e008      	b.n	8004e04 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004df2:	f7fd f8eb 	bl	8001fcc <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b64      	cmp	r3, #100	@ 0x64
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e120      	b.n	8005046 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e04:	4b75      	ldr	r3, [pc, #468]	@ (8004fdc <HAL_RCC_OscConfig+0x4d0>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0f0      	beq.n	8004df2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d106      	bne.n	8004e26 <HAL_RCC_OscConfig+0x31a>
 8004e18:	4b6f      	ldr	r3, [pc, #444]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e1c:	4a6e      	ldr	r2, [pc, #440]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004e1e:	f043 0301 	orr.w	r3, r3, #1
 8004e22:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e24:	e02d      	b.n	8004e82 <HAL_RCC_OscConfig+0x376>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10c      	bne.n	8004e48 <HAL_RCC_OscConfig+0x33c>
 8004e2e:	4b6a      	ldr	r3, [pc, #424]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e32:	4a69      	ldr	r2, [pc, #420]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004e34:	f023 0301 	bic.w	r3, r3, #1
 8004e38:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e3a:	4b67      	ldr	r3, [pc, #412]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e3e:	4a66      	ldr	r2, [pc, #408]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004e40:	f023 0304 	bic.w	r3, r3, #4
 8004e44:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e46:	e01c      	b.n	8004e82 <HAL_RCC_OscConfig+0x376>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	2b05      	cmp	r3, #5
 8004e4e:	d10c      	bne.n	8004e6a <HAL_RCC_OscConfig+0x35e>
 8004e50:	4b61      	ldr	r3, [pc, #388]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e54:	4a60      	ldr	r2, [pc, #384]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004e56:	f043 0304 	orr.w	r3, r3, #4
 8004e5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e5c:	4b5e      	ldr	r3, [pc, #376]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e60:	4a5d      	ldr	r2, [pc, #372]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004e62:	f043 0301 	orr.w	r3, r3, #1
 8004e66:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e68:	e00b      	b.n	8004e82 <HAL_RCC_OscConfig+0x376>
 8004e6a:	4b5b      	ldr	r3, [pc, #364]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e6e:	4a5a      	ldr	r2, [pc, #360]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004e70:	f023 0301 	bic.w	r3, r3, #1
 8004e74:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e76:	4b58      	ldr	r3, [pc, #352]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e7a:	4a57      	ldr	r2, [pc, #348]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004e7c:	f023 0304 	bic.w	r3, r3, #4
 8004e80:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d015      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e8a:	f7fd f89f 	bl	8001fcc <HAL_GetTick>
 8004e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e90:	e00a      	b.n	8004ea8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e92:	f7fd f89b 	bl	8001fcc <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e0ce      	b.n	8005046 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea8:	4b4b      	ldr	r3, [pc, #300]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0ee      	beq.n	8004e92 <HAL_RCC_OscConfig+0x386>
 8004eb4:	e014      	b.n	8004ee0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb6:	f7fd f889 	bl	8001fcc <HAL_GetTick>
 8004eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ebc:	e00a      	b.n	8004ed4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ebe:	f7fd f885 	bl	8001fcc <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e0b8      	b.n	8005046 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ed4:	4b40      	ldr	r3, [pc, #256]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1ee      	bne.n	8004ebe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ee0:	7dfb      	ldrb	r3, [r7, #23]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d105      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee6:	4b3c      	ldr	r3, [pc, #240]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eea:	4a3b      	ldr	r2, [pc, #236]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004eec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ef0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 80a4 	beq.w	8005044 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004efc:	4b36      	ldr	r3, [pc, #216]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f003 030c 	and.w	r3, r3, #12
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d06b      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d149      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f10:	4b31      	ldr	r3, [pc, #196]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a30      	ldr	r2, [pc, #192]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004f16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f1c:	f7fd f856 	bl	8001fcc <HAL_GetTick>
 8004f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f22:	e008      	b.n	8004f36 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f24:	f7fd f852 	bl	8001fcc <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e087      	b.n	8005046 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f36:	4b28      	ldr	r3, [pc, #160]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1f0      	bne.n	8004f24 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69da      	ldr	r2, [r3, #28]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f50:	019b      	lsls	r3, r3, #6
 8004f52:	431a      	orrs	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f58:	085b      	lsrs	r3, r3, #1
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	041b      	lsls	r3, r3, #16
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f64:	061b      	lsls	r3, r3, #24
 8004f66:	4313      	orrs	r3, r2
 8004f68:	4a1b      	ldr	r2, [pc, #108]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004f6a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004f6e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f70:	4b19      	ldr	r3, [pc, #100]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a18      	ldr	r2, [pc, #96]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004f76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f7c:	f7fd f826 	bl	8001fcc <HAL_GetTick>
 8004f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f84:	f7fd f822 	bl	8001fcc <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e057      	b.n	8005046 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f96:	4b10      	ldr	r3, [pc, #64]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d0f0      	beq.n	8004f84 <HAL_RCC_OscConfig+0x478>
 8004fa2:	e04f      	b.n	8005044 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a0b      	ldr	r2, [pc, #44]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004faa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb0:	f7fd f80c 	bl	8001fcc <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb8:	f7fd f808 	bl	8001fcc <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e03d      	b.n	8005046 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fca:	4b03      	ldr	r3, [pc, #12]	@ (8004fd8 <HAL_RCC_OscConfig+0x4cc>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1f0      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x4ac>
 8004fd6:	e035      	b.n	8005044 <HAL_RCC_OscConfig+0x538>
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8005050 <HAL_RCC_OscConfig+0x544>)
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d028      	beq.n	8005040 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d121      	bne.n	8005040 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005006:	429a      	cmp	r2, r3
 8005008:	d11a      	bne.n	8005040 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005010:	4013      	ands	r3, r2
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005016:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005018:	4293      	cmp	r3, r2
 800501a:	d111      	bne.n	8005040 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005026:	085b      	lsrs	r3, r3, #1
 8005028:	3b01      	subs	r3, #1
 800502a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800502c:	429a      	cmp	r2, r3
 800502e:	d107      	bne.n	8005040 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800503c:	429a      	cmp	r2, r3
 800503e:	d001      	beq.n	8005044 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e000      	b.n	8005046 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3718      	adds	r7, #24
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	40023800 	.word	0x40023800

08005054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800505e:	2300      	movs	r3, #0
 8005060:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d101      	bne.n	800506c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e0d0      	b.n	800520e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800506c:	4b6a      	ldr	r3, [pc, #424]	@ (8005218 <HAL_RCC_ClockConfig+0x1c4>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 030f 	and.w	r3, r3, #15
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	429a      	cmp	r2, r3
 8005078:	d910      	bls.n	800509c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800507a:	4b67      	ldr	r3, [pc, #412]	@ (8005218 <HAL_RCC_ClockConfig+0x1c4>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f023 020f 	bic.w	r2, r3, #15
 8005082:	4965      	ldr	r1, [pc, #404]	@ (8005218 <HAL_RCC_ClockConfig+0x1c4>)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	4313      	orrs	r3, r2
 8005088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800508a:	4b63      	ldr	r3, [pc, #396]	@ (8005218 <HAL_RCC_ClockConfig+0x1c4>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 030f 	and.w	r3, r3, #15
 8005092:	683a      	ldr	r2, [r7, #0]
 8005094:	429a      	cmp	r2, r3
 8005096:	d001      	beq.n	800509c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e0b8      	b.n	800520e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d020      	beq.n	80050ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0304 	and.w	r3, r3, #4
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d005      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050b4:	4b59      	ldr	r3, [pc, #356]	@ (800521c <HAL_RCC_ClockConfig+0x1c8>)
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	4a58      	ldr	r2, [pc, #352]	@ (800521c <HAL_RCC_ClockConfig+0x1c8>)
 80050ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80050be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0308 	and.w	r3, r3, #8
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d005      	beq.n	80050d8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050cc:	4b53      	ldr	r3, [pc, #332]	@ (800521c <HAL_RCC_ClockConfig+0x1c8>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	4a52      	ldr	r2, [pc, #328]	@ (800521c <HAL_RCC_ClockConfig+0x1c8>)
 80050d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80050d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050d8:	4b50      	ldr	r3, [pc, #320]	@ (800521c <HAL_RCC_ClockConfig+0x1c8>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	494d      	ldr	r1, [pc, #308]	@ (800521c <HAL_RCC_ClockConfig+0x1c8>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d040      	beq.n	8005178 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d107      	bne.n	800510e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050fe:	4b47      	ldr	r3, [pc, #284]	@ (800521c <HAL_RCC_ClockConfig+0x1c8>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d115      	bne.n	8005136 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e07f      	b.n	800520e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	2b02      	cmp	r3, #2
 8005114:	d107      	bne.n	8005126 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005116:	4b41      	ldr	r3, [pc, #260]	@ (800521c <HAL_RCC_ClockConfig+0x1c8>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d109      	bne.n	8005136 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e073      	b.n	800520e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005126:	4b3d      	ldr	r3, [pc, #244]	@ (800521c <HAL_RCC_ClockConfig+0x1c8>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e06b      	b.n	800520e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005136:	4b39      	ldr	r3, [pc, #228]	@ (800521c <HAL_RCC_ClockConfig+0x1c8>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f023 0203 	bic.w	r2, r3, #3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	4936      	ldr	r1, [pc, #216]	@ (800521c <HAL_RCC_ClockConfig+0x1c8>)
 8005144:	4313      	orrs	r3, r2
 8005146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005148:	f7fc ff40 	bl	8001fcc <HAL_GetTick>
 800514c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800514e:	e00a      	b.n	8005166 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005150:	f7fc ff3c 	bl	8001fcc <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800515e:	4293      	cmp	r3, r2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e053      	b.n	800520e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005166:	4b2d      	ldr	r3, [pc, #180]	@ (800521c <HAL_RCC_ClockConfig+0x1c8>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 020c 	and.w	r2, r3, #12
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	429a      	cmp	r2, r3
 8005176:	d1eb      	bne.n	8005150 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005178:	4b27      	ldr	r3, [pc, #156]	@ (8005218 <HAL_RCC_ClockConfig+0x1c4>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 030f 	and.w	r3, r3, #15
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	429a      	cmp	r2, r3
 8005184:	d210      	bcs.n	80051a8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005186:	4b24      	ldr	r3, [pc, #144]	@ (8005218 <HAL_RCC_ClockConfig+0x1c4>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f023 020f 	bic.w	r2, r3, #15
 800518e:	4922      	ldr	r1, [pc, #136]	@ (8005218 <HAL_RCC_ClockConfig+0x1c4>)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	4313      	orrs	r3, r2
 8005194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005196:	4b20      	ldr	r3, [pc, #128]	@ (8005218 <HAL_RCC_ClockConfig+0x1c4>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d001      	beq.n	80051a8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e032      	b.n	800520e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d008      	beq.n	80051c6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051b4:	4b19      	ldr	r3, [pc, #100]	@ (800521c <HAL_RCC_ClockConfig+0x1c8>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	4916      	ldr	r1, [pc, #88]	@ (800521c <HAL_RCC_ClockConfig+0x1c8>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0308 	and.w	r3, r3, #8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d009      	beq.n	80051e6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051d2:	4b12      	ldr	r3, [pc, #72]	@ (800521c <HAL_RCC_ClockConfig+0x1c8>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	490e      	ldr	r1, [pc, #56]	@ (800521c <HAL_RCC_ClockConfig+0x1c8>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051e6:	f000 f831 	bl	800524c <HAL_RCC_GetSysClockFreq>
 80051ea:	4602      	mov	r2, r0
 80051ec:	4b0b      	ldr	r3, [pc, #44]	@ (800521c <HAL_RCC_ClockConfig+0x1c8>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	091b      	lsrs	r3, r3, #4
 80051f2:	f003 030f 	and.w	r3, r3, #15
 80051f6:	490a      	ldr	r1, [pc, #40]	@ (8005220 <HAL_RCC_ClockConfig+0x1cc>)
 80051f8:	5ccb      	ldrb	r3, [r1, r3]
 80051fa:	fa22 f303 	lsr.w	r3, r2, r3
 80051fe:	4a09      	ldr	r2, [pc, #36]	@ (8005224 <HAL_RCC_ClockConfig+0x1d0>)
 8005200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005202:	4b09      	ldr	r3, [pc, #36]	@ (8005228 <HAL_RCC_ClockConfig+0x1d4>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4618      	mov	r0, r3
 8005208:	f7fc fe9c 	bl	8001f44 <HAL_InitTick>

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	40023c00 	.word	0x40023c00
 800521c:	40023800 	.word	0x40023800
 8005220:	0800dec8 	.word	0x0800dec8
 8005224:	20000000 	.word	0x20000000
 8005228:	20000004 	.word	0x20000004

0800522c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8005230:	4b05      	ldr	r3, [pc, #20]	@ (8005248 <HAL_RCC_EnableCSS+0x1c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a04      	ldr	r2, [pc, #16]	@ (8005248 <HAL_RCC_EnableCSS+0x1c>)
 8005236:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800523a:	6013      	str	r3, [r2, #0]
}
 800523c:	bf00      	nop
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40023800 	.word	0x40023800

0800524c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800524c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005250:	b094      	sub	sp, #80	@ 0x50
 8005252:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005254:	2300      	movs	r3, #0
 8005256:	647b      	str	r3, [r7, #68]	@ 0x44
 8005258:	2300      	movs	r3, #0
 800525a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800525c:	2300      	movs	r3, #0
 800525e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8005260:	2300      	movs	r3, #0
 8005262:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005264:	4b79      	ldr	r3, [pc, #484]	@ (800544c <HAL_RCC_GetSysClockFreq+0x200>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f003 030c 	and.w	r3, r3, #12
 800526c:	2b08      	cmp	r3, #8
 800526e:	d00d      	beq.n	800528c <HAL_RCC_GetSysClockFreq+0x40>
 8005270:	2b08      	cmp	r3, #8
 8005272:	f200 80e1 	bhi.w	8005438 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005276:	2b00      	cmp	r3, #0
 8005278:	d002      	beq.n	8005280 <HAL_RCC_GetSysClockFreq+0x34>
 800527a:	2b04      	cmp	r3, #4
 800527c:	d003      	beq.n	8005286 <HAL_RCC_GetSysClockFreq+0x3a>
 800527e:	e0db      	b.n	8005438 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005280:	4b73      	ldr	r3, [pc, #460]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x204>)
 8005282:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005284:	e0db      	b.n	800543e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005286:	4b73      	ldr	r3, [pc, #460]	@ (8005454 <HAL_RCC_GetSysClockFreq+0x208>)
 8005288:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800528a:	e0d8      	b.n	800543e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800528c:	4b6f      	ldr	r3, [pc, #444]	@ (800544c <HAL_RCC_GetSysClockFreq+0x200>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005294:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005296:	4b6d      	ldr	r3, [pc, #436]	@ (800544c <HAL_RCC_GetSysClockFreq+0x200>)
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d063      	beq.n	800536a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052a2:	4b6a      	ldr	r3, [pc, #424]	@ (800544c <HAL_RCC_GetSysClockFreq+0x200>)
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	099b      	lsrs	r3, r3, #6
 80052a8:	2200      	movs	r2, #0
 80052aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80052ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80052b6:	2300      	movs	r3, #0
 80052b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80052ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80052be:	4622      	mov	r2, r4
 80052c0:	462b      	mov	r3, r5
 80052c2:	f04f 0000 	mov.w	r0, #0
 80052c6:	f04f 0100 	mov.w	r1, #0
 80052ca:	0159      	lsls	r1, r3, #5
 80052cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052d0:	0150      	lsls	r0, r2, #5
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	4621      	mov	r1, r4
 80052d8:	1a51      	subs	r1, r2, r1
 80052da:	6139      	str	r1, [r7, #16]
 80052dc:	4629      	mov	r1, r5
 80052de:	eb63 0301 	sbc.w	r3, r3, r1
 80052e2:	617b      	str	r3, [r7, #20]
 80052e4:	f04f 0200 	mov.w	r2, #0
 80052e8:	f04f 0300 	mov.w	r3, #0
 80052ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052f0:	4659      	mov	r1, fp
 80052f2:	018b      	lsls	r3, r1, #6
 80052f4:	4651      	mov	r1, sl
 80052f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052fa:	4651      	mov	r1, sl
 80052fc:	018a      	lsls	r2, r1, #6
 80052fe:	4651      	mov	r1, sl
 8005300:	ebb2 0801 	subs.w	r8, r2, r1
 8005304:	4659      	mov	r1, fp
 8005306:	eb63 0901 	sbc.w	r9, r3, r1
 800530a:	f04f 0200 	mov.w	r2, #0
 800530e:	f04f 0300 	mov.w	r3, #0
 8005312:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005316:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800531a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800531e:	4690      	mov	r8, r2
 8005320:	4699      	mov	r9, r3
 8005322:	4623      	mov	r3, r4
 8005324:	eb18 0303 	adds.w	r3, r8, r3
 8005328:	60bb      	str	r3, [r7, #8]
 800532a:	462b      	mov	r3, r5
 800532c:	eb49 0303 	adc.w	r3, r9, r3
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	f04f 0200 	mov.w	r2, #0
 8005336:	f04f 0300 	mov.w	r3, #0
 800533a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800533e:	4629      	mov	r1, r5
 8005340:	024b      	lsls	r3, r1, #9
 8005342:	4621      	mov	r1, r4
 8005344:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005348:	4621      	mov	r1, r4
 800534a:	024a      	lsls	r2, r1, #9
 800534c:	4610      	mov	r0, r2
 800534e:	4619      	mov	r1, r3
 8005350:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005352:	2200      	movs	r2, #0
 8005354:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005356:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005358:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800535c:	f7fa ff60 	bl	8000220 <__aeabi_uldivmod>
 8005360:	4602      	mov	r2, r0
 8005362:	460b      	mov	r3, r1
 8005364:	4613      	mov	r3, r2
 8005366:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005368:	e058      	b.n	800541c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800536a:	4b38      	ldr	r3, [pc, #224]	@ (800544c <HAL_RCC_GetSysClockFreq+0x200>)
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	099b      	lsrs	r3, r3, #6
 8005370:	2200      	movs	r2, #0
 8005372:	4618      	mov	r0, r3
 8005374:	4611      	mov	r1, r2
 8005376:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800537a:	623b      	str	r3, [r7, #32]
 800537c:	2300      	movs	r3, #0
 800537e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005380:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005384:	4642      	mov	r2, r8
 8005386:	464b      	mov	r3, r9
 8005388:	f04f 0000 	mov.w	r0, #0
 800538c:	f04f 0100 	mov.w	r1, #0
 8005390:	0159      	lsls	r1, r3, #5
 8005392:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005396:	0150      	lsls	r0, r2, #5
 8005398:	4602      	mov	r2, r0
 800539a:	460b      	mov	r3, r1
 800539c:	4641      	mov	r1, r8
 800539e:	ebb2 0a01 	subs.w	sl, r2, r1
 80053a2:	4649      	mov	r1, r9
 80053a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80053a8:	f04f 0200 	mov.w	r2, #0
 80053ac:	f04f 0300 	mov.w	r3, #0
 80053b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053bc:	ebb2 040a 	subs.w	r4, r2, sl
 80053c0:	eb63 050b 	sbc.w	r5, r3, fp
 80053c4:	f04f 0200 	mov.w	r2, #0
 80053c8:	f04f 0300 	mov.w	r3, #0
 80053cc:	00eb      	lsls	r3, r5, #3
 80053ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053d2:	00e2      	lsls	r2, r4, #3
 80053d4:	4614      	mov	r4, r2
 80053d6:	461d      	mov	r5, r3
 80053d8:	4643      	mov	r3, r8
 80053da:	18e3      	adds	r3, r4, r3
 80053dc:	603b      	str	r3, [r7, #0]
 80053de:	464b      	mov	r3, r9
 80053e0:	eb45 0303 	adc.w	r3, r5, r3
 80053e4:	607b      	str	r3, [r7, #4]
 80053e6:	f04f 0200 	mov.w	r2, #0
 80053ea:	f04f 0300 	mov.w	r3, #0
 80053ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053f2:	4629      	mov	r1, r5
 80053f4:	028b      	lsls	r3, r1, #10
 80053f6:	4621      	mov	r1, r4
 80053f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053fc:	4621      	mov	r1, r4
 80053fe:	028a      	lsls	r2, r1, #10
 8005400:	4610      	mov	r0, r2
 8005402:	4619      	mov	r1, r3
 8005404:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005406:	2200      	movs	r2, #0
 8005408:	61bb      	str	r3, [r7, #24]
 800540a:	61fa      	str	r2, [r7, #28]
 800540c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005410:	f7fa ff06 	bl	8000220 <__aeabi_uldivmod>
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	4613      	mov	r3, r2
 800541a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800541c:	4b0b      	ldr	r3, [pc, #44]	@ (800544c <HAL_RCC_GetSysClockFreq+0x200>)
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	0c1b      	lsrs	r3, r3, #16
 8005422:	f003 0303 	and.w	r3, r3, #3
 8005426:	3301      	adds	r3, #1
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800542c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800542e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005430:	fbb2 f3f3 	udiv	r3, r2, r3
 8005434:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005436:	e002      	b.n	800543e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005438:	4b05      	ldr	r3, [pc, #20]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x204>)
 800543a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800543c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800543e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005440:	4618      	mov	r0, r3
 8005442:	3750      	adds	r7, #80	@ 0x50
 8005444:	46bd      	mov	sp, r7
 8005446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800544a:	bf00      	nop
 800544c:	40023800 	.word	0x40023800
 8005450:	00f42400 	.word	0x00f42400
 8005454:	007a1200 	.word	0x007a1200

08005458 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800545c:	4b03      	ldr	r3, [pc, #12]	@ (800546c <HAL_RCC_GetHCLKFreq+0x14>)
 800545e:	681b      	ldr	r3, [r3, #0]
}
 8005460:	4618      	mov	r0, r3
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	20000000 	.word	0x20000000

08005470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005474:	f7ff fff0 	bl	8005458 <HAL_RCC_GetHCLKFreq>
 8005478:	4602      	mov	r2, r0
 800547a:	4b05      	ldr	r3, [pc, #20]	@ (8005490 <HAL_RCC_GetPCLK1Freq+0x20>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	0a9b      	lsrs	r3, r3, #10
 8005480:	f003 0307 	and.w	r3, r3, #7
 8005484:	4903      	ldr	r1, [pc, #12]	@ (8005494 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005486:	5ccb      	ldrb	r3, [r1, r3]
 8005488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800548c:	4618      	mov	r0, r3
 800548e:	bd80      	pop	{r7, pc}
 8005490:	40023800 	.word	0x40023800
 8005494:	0800ded8 	.word	0x0800ded8

08005498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800549c:	f7ff ffdc 	bl	8005458 <HAL_RCC_GetHCLKFreq>
 80054a0:	4602      	mov	r2, r0
 80054a2:	4b05      	ldr	r3, [pc, #20]	@ (80054b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	0b5b      	lsrs	r3, r3, #13
 80054a8:	f003 0307 	and.w	r3, r3, #7
 80054ac:	4903      	ldr	r1, [pc, #12]	@ (80054bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80054ae:	5ccb      	ldrb	r3, [r1, r3]
 80054b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	40023800 	.word	0x40023800
 80054bc:	0800ded8 	.word	0x0800ded8

080054c0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80054c4:	4b06      	ldr	r3, [pc, #24]	@ (80054e0 <HAL_RCC_NMI_IRQHandler+0x20>)
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054cc:	2b80      	cmp	r3, #128	@ 0x80
 80054ce:	d104      	bne.n	80054da <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80054d0:	f000 f80a 	bl	80054e8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80054d4:	4b03      	ldr	r3, [pc, #12]	@ (80054e4 <HAL_RCC_NMI_IRQHandler+0x24>)
 80054d6:	2280      	movs	r2, #128	@ 0x80
 80054d8:	701a      	strb	r2, [r3, #0]
  }
}
 80054da:	bf00      	nop
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	40023800 	.word	0x40023800
 80054e4:	4002380e 	.word	0x4002380e

080054e8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80054e8:	b480      	push	{r7}
 80054ea:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
	...

080054f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b088      	sub	sp, #32
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005500:	2300      	movs	r3, #0
 8005502:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005504:	2300      	movs	r3, #0
 8005506:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8005508:	2300      	movs	r3, #0
 800550a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800550c:	2300      	movs	r3, #0
 800550e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b00      	cmp	r3, #0
 800551a:	d012      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800551c:	4b65      	ldr	r3, [pc, #404]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	4a64      	ldr	r2, [pc, #400]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005522:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005526:	6093      	str	r3, [r2, #8]
 8005528:	4b62      	ldr	r3, [pc, #392]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800552a:	689a      	ldr	r2, [r3, #8]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005530:	4960      	ldr	r1, [pc, #384]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005532:	4313      	orrs	r3, r2
 8005534:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800553e:	2301      	movs	r3, #1
 8005540:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d017      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800554e:	4b59      	ldr	r3, [pc, #356]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005550:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005554:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800555c:	4955      	ldr	r1, [pc, #340]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800555e:	4313      	orrs	r3, r2
 8005560:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005568:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800556c:	d101      	bne.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800556e:	2301      	movs	r3, #1
 8005570:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800557a:	2301      	movs	r3, #1
 800557c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d017      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800558a:	4b4a      	ldr	r3, [pc, #296]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800558c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005590:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005598:	4946      	ldr	r1, [pc, #280]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800559a:	4313      	orrs	r3, r2
 800559c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055a8:	d101      	bne.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80055aa:	2301      	movs	r3, #1
 80055ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80055b6:	2301      	movs	r3, #1
 80055b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0320 	and.w	r3, r3, #32
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f000 808b 	beq.w	80056de <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80055c8:	4b3a      	ldr	r3, [pc, #232]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055cc:	4a39      	ldr	r2, [pc, #228]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80055d4:	4b37      	ldr	r3, [pc, #220]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055dc:	60fb      	str	r3, [r7, #12]
 80055de:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80055e0:	4b35      	ldr	r3, [pc, #212]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a34      	ldr	r2, [pc, #208]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80055e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055ec:	f7fc fcee 	bl	8001fcc <HAL_GetTick>
 80055f0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80055f2:	e008      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055f4:	f7fc fcea 	bl	8001fcc <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b64      	cmp	r3, #100	@ 0x64
 8005600:	d901      	bls.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e2bc      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005606:	4b2c      	ldr	r3, [pc, #176]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800560e:	2b00      	cmp	r3, #0
 8005610:	d0f0      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005612:	4b28      	ldr	r3, [pc, #160]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800561a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d035      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005626:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	429a      	cmp	r2, r3
 800562e:	d02e      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005630:	4b20      	ldr	r3, [pc, #128]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005634:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005638:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800563a:	4b1e      	ldr	r3, [pc, #120]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800563c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800563e:	4a1d      	ldr	r2, [pc, #116]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005644:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005646:	4b1b      	ldr	r3, [pc, #108]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800564a:	4a1a      	ldr	r2, [pc, #104]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800564c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005650:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005652:	4a18      	ldr	r2, [pc, #96]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005658:	4b16      	ldr	r3, [pc, #88]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800565a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	2b01      	cmp	r3, #1
 8005662:	d114      	bne.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005664:	f7fc fcb2 	bl	8001fcc <HAL_GetTick>
 8005668:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800566a:	e00a      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800566c:	f7fc fcae 	bl	8001fcc <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800567a:	4293      	cmp	r3, r2
 800567c:	d901      	bls.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e27e      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005682:	4b0c      	ldr	r3, [pc, #48]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d0ee      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005692:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005696:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800569a:	d111      	bne.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800569c:	4b05      	ldr	r3, [pc, #20]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80056a8:	4b04      	ldr	r3, [pc, #16]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80056aa:	400b      	ands	r3, r1
 80056ac:	4901      	ldr	r1, [pc, #4]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	608b      	str	r3, [r1, #8]
 80056b2:	e00b      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80056b4:	40023800 	.word	0x40023800
 80056b8:	40007000 	.word	0x40007000
 80056bc:	0ffffcff 	.word	0x0ffffcff
 80056c0:	4ba4      	ldr	r3, [pc, #656]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	4aa3      	ldr	r2, [pc, #652]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80056c6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80056ca:	6093      	str	r3, [r2, #8]
 80056cc:	4ba1      	ldr	r3, [pc, #644]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80056ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056d8:	499e      	ldr	r1, [pc, #632]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0310 	and.w	r3, r3, #16
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d010      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80056ea:	4b9a      	ldr	r3, [pc, #616]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80056ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056f0:	4a98      	ldr	r2, [pc, #608]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80056f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80056fa:	4b96      	ldr	r3, [pc, #600]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80056fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005704:	4993      	ldr	r1, [pc, #588]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005706:	4313      	orrs	r3, r2
 8005708:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00a      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005718:	4b8e      	ldr	r3, [pc, #568]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800571a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800571e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005726:	498b      	ldr	r1, [pc, #556]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005728:	4313      	orrs	r3, r2
 800572a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00a      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800573a:	4b86      	ldr	r3, [pc, #536]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800573c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005740:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005748:	4982      	ldr	r1, [pc, #520]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800574a:	4313      	orrs	r3, r2
 800574c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00a      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800575c:	4b7d      	ldr	r3, [pc, #500]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800575e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005762:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800576a:	497a      	ldr	r1, [pc, #488]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800576c:	4313      	orrs	r3, r2
 800576e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00a      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800577e:	4b75      	ldr	r3, [pc, #468]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005784:	f023 0203 	bic.w	r2, r3, #3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800578c:	4971      	ldr	r1, [pc, #452]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800578e:	4313      	orrs	r3, r2
 8005790:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00a      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057a0:	4b6c      	ldr	r3, [pc, #432]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80057a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057a6:	f023 020c 	bic.w	r2, r3, #12
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ae:	4969      	ldr	r1, [pc, #420]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00a      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80057c2:	4b64      	ldr	r3, [pc, #400]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80057c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057d0:	4960      	ldr	r1, [pc, #384]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00a      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80057e4:	4b5b      	ldr	r3, [pc, #364]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80057e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057f2:	4958      	ldr	r1, [pc, #352]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00a      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005806:	4b53      	ldr	r3, [pc, #332]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800580c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005814:	494f      	ldr	r1, [pc, #316]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005816:	4313      	orrs	r3, r2
 8005818:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00a      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005828:	4b4a      	ldr	r3, [pc, #296]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800582a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800582e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005836:	4947      	ldr	r1, [pc, #284]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005838:	4313      	orrs	r3, r2
 800583a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00a      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800584a:	4b42      	ldr	r3, [pc, #264]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800584c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005850:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005858:	493e      	ldr	r1, [pc, #248]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800585a:	4313      	orrs	r3, r2
 800585c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00a      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800586c:	4b39      	ldr	r3, [pc, #228]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800586e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005872:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800587a:	4936      	ldr	r1, [pc, #216]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800587c:	4313      	orrs	r3, r2
 800587e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d011      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800588e:	4b31      	ldr	r3, [pc, #196]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005894:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800589c:	492d      	ldr	r1, [pc, #180]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058ac:	d101      	bne.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80058ae:	2301      	movs	r3, #1
 80058b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00a      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058be:	4b25      	ldr	r3, [pc, #148]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80058c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058c4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058cc:	4921      	ldr	r1, [pc, #132]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00a      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80058e0:	4b1c      	ldr	r3, [pc, #112]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80058e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058e6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058ee:	4919      	ldr	r1, [pc, #100]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00a      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005902:	4b14      	ldr	r3, [pc, #80]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005908:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005910:	4910      	ldr	r1, [pc, #64]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005912:	4313      	orrs	r3, r2
 8005914:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d006      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x434>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005926:	2b00      	cmp	r3, #0
 8005928:	f000 809d 	beq.w	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800592c:	4b09      	ldr	r3, [pc, #36]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a08      	ldr	r2, [pc, #32]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005932:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005936:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005938:	f7fc fb48 	bl	8001fcc <HAL_GetTick>
 800593c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800593e:	e00b      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005940:	f7fc fb44 	bl	8001fcc <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b64      	cmp	r3, #100	@ 0x64
 800594c:	d904      	bls.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e116      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8005952:	bf00      	nop
 8005954:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005958:	4b8b      	ldr	r3, [pc, #556]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1ed      	bne.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b00      	cmp	r3, #0
 800596e:	d017      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005974:	2b00      	cmp	r3, #0
 8005976:	d113      	bne.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005978:	4b83      	ldr	r3, [pc, #524]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800597a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800597e:	0e1b      	lsrs	r3, r3, #24
 8005980:	f003 030f 	and.w	r3, r3, #15
 8005984:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	019a      	lsls	r2, r3, #6
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	061b      	lsls	r3, r3, #24
 8005990:	431a      	orrs	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	071b      	lsls	r3, r3, #28
 8005998:	497b      	ldr	r1, [pc, #492]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800599a:	4313      	orrs	r3, r2
 800599c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d004      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059b4:	d00a      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d024      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059ca:	d11f      	bne.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80059cc:	4b6e      	ldr	r3, [pc, #440]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80059ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059d2:	0f1b      	lsrs	r3, r3, #28
 80059d4:	f003 0307 	and.w	r3, r3, #7
 80059d8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	019a      	lsls	r2, r3, #6
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	061b      	lsls	r3, r3, #24
 80059e6:	431a      	orrs	r2, r3
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	071b      	lsls	r3, r3, #28
 80059ec:	4966      	ldr	r1, [pc, #408]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80059f4:	4b64      	ldr	r3, [pc, #400]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80059f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059fa:	f023 021f 	bic.w	r2, r3, #31
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	4960      	ldr	r1, [pc, #384]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00d      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	019a      	lsls	r2, r3, #6
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	061b      	lsls	r3, r3, #24
 8005a24:	431a      	orrs	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	071b      	lsls	r3, r3, #28
 8005a2c:	4956      	ldr	r1, [pc, #344]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a34:	4b54      	ldr	r3, [pc, #336]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a53      	ldr	r2, [pc, #332]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005a3a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005a3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a40:	f7fc fac4 	bl	8001fcc <HAL_GetTick>
 8005a44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a46:	e008      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a48:	f7fc fac0 	bl	8001fcc <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b64      	cmp	r3, #100	@ 0x64
 8005a54:	d901      	bls.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e092      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a5a:	4b4b      	ldr	r3, [pc, #300]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d0f0      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	f040 8088 	bne.w	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005a6e:	4b46      	ldr	r3, [pc, #280]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a45      	ldr	r2, [pc, #276]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005a74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a7a:	f7fc faa7 	bl	8001fcc <HAL_GetTick>
 8005a7e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a80:	e008      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a82:	f7fc faa3 	bl	8001fcc <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b64      	cmp	r3, #100	@ 0x64
 8005a8e:	d901      	bls.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e075      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a94:	4b3c      	ldr	r3, [pc, #240]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005aa0:	d0ef      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d009      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d024      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d120      	bne.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005aca:	4b2f      	ldr	r3, [pc, #188]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad0:	0c1b      	lsrs	r3, r3, #16
 8005ad2:	f003 0303 	and.w	r3, r3, #3
 8005ad6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	019a      	lsls	r2, r3, #6
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	041b      	lsls	r3, r3, #16
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	061b      	lsls	r3, r3, #24
 8005aea:	4927      	ldr	r1, [pc, #156]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005af2:	4b25      	ldr	r3, [pc, #148]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005af8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	3b01      	subs	r3, #1
 8005b02:	021b      	lsls	r3, r3, #8
 8005b04:	4920      	ldr	r1, [pc, #128]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d018      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x652>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b20:	d113      	bne.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b22:	4b19      	ldr	r3, [pc, #100]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b28:	0e1b      	lsrs	r3, r3, #24
 8005b2a:	f003 030f 	and.w	r3, r3, #15
 8005b2e:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	019a      	lsls	r2, r3, #6
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	041b      	lsls	r3, r3, #16
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	061b      	lsls	r3, r3, #24
 8005b42:	4911      	ldr	r1, [pc, #68]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a0e      	ldr	r2, [pc, #56]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005b50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b56:	f7fc fa39 	bl	8001fcc <HAL_GetTick>
 8005b5a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b5c:	e008      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b5e:	f7fc fa35 	bl	8001fcc <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	2b64      	cmp	r3, #100	@ 0x64
 8005b6a:	d901      	bls.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e007      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b70:	4b05      	ldr	r3, [pc, #20]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b7c:	d1ef      	bne.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3720      	adds	r7, #32
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	40023800 	.word	0x40023800

08005b8c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e022      	b.n	8005be4 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d105      	bne.n	8005bb6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f7fb fc41 	bl	8001438 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2203      	movs	r2, #3
 8005bba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f814 	bl	8005bec <HAL_SD_InitCard>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d001      	beq.n	8005bce <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e00a      	b.n	8005be4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3708      	adds	r7, #8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005bec:	b5b0      	push	{r4, r5, r7, lr}
 8005bee:	b08e      	sub	sp, #56	@ 0x38
 8005bf0:	af04      	add	r7, sp, #16
 8005bf2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005c00:	2300      	movs	r3, #0
 8005c02:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005c04:	2300      	movs	r3, #0
 8005c06:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8005c08:	2376      	movs	r3, #118	@ 0x76
 8005c0a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681d      	ldr	r5, [r3, #0]
 8005c10:	466c      	mov	r4, sp
 8005c12:	f107 0314 	add.w	r3, r7, #20
 8005c16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005c1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005c1e:	f107 0308 	add.w	r3, r7, #8
 8005c22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c24:	4628      	mov	r0, r5
 8005c26:	f002 ffc3 	bl	8008bb0 <SDMMC_Init>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8005c30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d001      	beq.n	8005c3c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e059      	b.n	8005cf0 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c4a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f002 fff7 	bl	8008c44 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c64:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8005c66:	2002      	movs	r0, #2
 8005c68:	f7fc f9bc 	bl	8001fe4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 ff01 	bl	8006a74 <SD_PowerON>
 8005c72:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00b      	beq.n	8005c92 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c86:	6a3b      	ldr	r3, [r7, #32]
 8005c88:	431a      	orrs	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e02e      	b.n	8005cf0 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fe20 	bl	80068d8 <SD_InitCard>
 8005c98:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00b      	beq.n	8005cb8 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	431a      	orrs	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e01b      	b.n	8005cf0 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f003 f851 	bl	8008d68 <SDMMC_CmdBlockLength>
 8005cc6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005cc8:	6a3b      	ldr	r3, [r7, #32]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00f      	beq.n	8005cee <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a09      	ldr	r2, [pc, #36]	@ (8005cf8 <HAL_SD_InitCard+0x10c>)
 8005cd4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e000      	b.n	8005cf0 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3728      	adds	r7, #40	@ 0x28
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bdb0      	pop	{r4, r5, r7, pc}
 8005cf8:	004005ff 	.word	0x004005ff

08005cfc <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b092      	sub	sp, #72	@ 0x48
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
 8005d08:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005d0a:	f7fc f95f 	bl	8001fcc <HAL_GetTick>
 8005d0e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d107      	bne.n	8005d2e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d22:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e1bd      	b.n	80060aa <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	f040 81b0 	bne.w	800609c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005d42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	441a      	add	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d907      	bls.n	8005d60 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d54:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e1a4      	b.n	80060aa <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2203      	movs	r2, #3
 8005d64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d002      	beq.n	8005d7e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d7a:	025b      	lsls	r3, r3, #9
 8005d7c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005d7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005d82:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	025b      	lsls	r3, r3, #9
 8005d88:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005d8a:	2390      	movs	r3, #144	@ 0x90
 8005d8c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005d8e:	2302      	movs	r3, #2
 8005d90:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005d92:	2300      	movs	r3, #0
 8005d94:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8005d96:	2301      	movs	r3, #1
 8005d98:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f107 0214 	add.w	r2, r7, #20
 8005da2:	4611      	mov	r1, r2
 8005da4:	4618      	mov	r0, r3
 8005da6:	f002 ffb3 	bl	8008d10 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d90a      	bls.n	8005dc6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2202      	movs	r2, #2
 8005db4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f003 f817 	bl	8008df0 <SDMMC_CmdReadMultiBlock>
 8005dc2:	6478      	str	r0, [r7, #68]	@ 0x44
 8005dc4:	e009      	b.n	8005dda <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f002 ffea 	bl	8008dac <SDMMC_CmdReadSingleBlock>
 8005dd8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005dda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d012      	beq.n	8005e06 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a7a      	ldr	r2, [pc, #488]	@ (8005fd0 <HAL_SD_ReadBlocks+0x2d4>)
 8005de6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dee:	431a      	orrs	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e151      	b.n	80060aa <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005e0a:	e061      	b.n	8005ed0 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d03c      	beq.n	8005e94 <HAL_SD_ReadBlocks+0x198>
 8005e1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d039      	beq.n	8005e94 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005e20:	2300      	movs	r3, #0
 8005e22:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e24:	e033      	b.n	8005e8e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f002 feec 	bl	8008c08 <SDMMC_ReadFIFO>
 8005e30:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e34:	b2da      	uxtb	r2, r3
 8005e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e38:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005e40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e42:	3b01      	subs	r3, #1
 8005e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e48:	0a1b      	lsrs	r3, r3, #8
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e4e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e52:	3301      	adds	r3, #1
 8005e54:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005e56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e5e:	0c1b      	lsrs	r3, r3, #16
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e64:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e68:	3301      	adds	r3, #1
 8005e6a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005e6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e74:	0e1b      	lsrs	r3, r3, #24
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e7a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e7e:	3301      	adds	r3, #1
 8005e80:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005e82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e84:	3b01      	subs	r3, #1
 8005e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8005e88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e90:	2b07      	cmp	r3, #7
 8005e92:	d9c8      	bls.n	8005e26 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005e94:	f7fc f89a 	bl	8001fcc <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d902      	bls.n	8005eaa <HAL_SD_ReadBlocks+0x1ae>
 8005ea4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d112      	bne.n	8005ed0 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a48      	ldr	r2, [pc, #288]	@ (8005fd0 <HAL_SD_ReadBlocks+0x2d4>)
 8005eb0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e0ec      	b.n	80060aa <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ed6:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d096      	beq.n	8005e0c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d022      	beq.n	8005f32 <HAL_SD_ReadBlocks+0x236>
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d91f      	bls.n	8005f32 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	d01b      	beq.n	8005f32 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4618      	mov	r0, r3
 8005f00:	f002 ffdc 	bl	8008ebc <SDMMC_CmdStopTransfer>
 8005f04:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005f06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d012      	beq.n	8005f32 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a2f      	ldr	r2, [pc, #188]	@ (8005fd0 <HAL_SD_ReadBlocks+0x2d4>)
 8005f12:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f1a:	431a      	orrs	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e0bb      	b.n	80060aa <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f38:	f003 0308 	and.w	r3, r3, #8
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d012      	beq.n	8005f66 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a22      	ldr	r2, [pc, #136]	@ (8005fd0 <HAL_SD_ReadBlocks+0x2d4>)
 8005f46:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f4c:	f043 0208 	orr.w	r2, r3, #8
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e0a1      	b.n	80060aa <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d012      	beq.n	8005f9a <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a15      	ldr	r2, [pc, #84]	@ (8005fd0 <HAL_SD_ReadBlocks+0x2d4>)
 8005f7a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f80:	f043 0202 	orr.w	r2, r3, #2
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e087      	b.n	80060aa <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fa0:	f003 0320 	and.w	r3, r3, #32
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d064      	beq.n	8006072 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a08      	ldr	r2, [pc, #32]	@ (8005fd0 <HAL_SD_ReadBlocks+0x2d4>)
 8005fae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb4:	f043 0220 	orr.w	r2, r3, #32
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e06d      	b.n	80060aa <HAL_SD_ReadBlocks+0x3ae>
 8005fce:	bf00      	nop
 8005fd0:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f002 fe15 	bl	8008c08 <SDMMC_ReadFIFO>
 8005fde:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe2:	b2da      	uxtb	r2, r3
 8005fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fe6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fea:	3301      	adds	r3, #1
 8005fec:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff6:	0a1b      	lsrs	r3, r3, #8
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ffc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006000:	3301      	adds	r3, #1
 8006002:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006006:	3b01      	subs	r3, #1
 8006008:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800600a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800600c:	0c1b      	lsrs	r3, r3, #16
 800600e:	b2da      	uxtb	r2, r3
 8006010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006012:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006016:	3301      	adds	r3, #1
 8006018:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800601a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800601c:	3b01      	subs	r3, #1
 800601e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006022:	0e1b      	lsrs	r3, r3, #24
 8006024:	b2da      	uxtb	r2, r3
 8006026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006028:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800602a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800602c:	3301      	adds	r3, #1
 800602e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006032:	3b01      	subs	r3, #1
 8006034:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006036:	f7fb ffc9 	bl	8001fcc <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006042:	429a      	cmp	r2, r3
 8006044:	d902      	bls.n	800604c <HAL_SD_ReadBlocks+0x350>
 8006046:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006048:	2b00      	cmp	r3, #0
 800604a:	d112      	bne.n	8006072 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a18      	ldr	r2, [pc, #96]	@ (80060b4 <HAL_SD_ReadBlocks+0x3b8>)
 8006052:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006058:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e01b      	b.n	80060aa <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006078:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d002      	beq.n	8006086 <HAL_SD_ReadBlocks+0x38a>
 8006080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1a6      	bne.n	8005fd4 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800608e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8006098:	2300      	movs	r3, #0
 800609a:	e006      	b.n	80060aa <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
  }
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3748      	adds	r7, #72	@ 0x48
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	004005ff 	.word	0x004005ff

080060b8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b092      	sub	sp, #72	@ 0x48
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
 80060c4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80060c6:	f7fb ff81 	bl	8001fcc <HAL_GetTick>
 80060ca:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d107      	bne.n	80060ea <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060de:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e165      	b.n	80063b6 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	f040 8158 	bne.w	80063a8 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80060fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	441a      	add	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006108:	429a      	cmp	r2, r3
 800610a:	d907      	bls.n	800611c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006110:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e14c      	b.n	80063b6 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2203      	movs	r2, #3
 8006120:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2200      	movs	r2, #0
 800612a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006130:	2b01      	cmp	r3, #1
 8006132:	d002      	beq.n	800613a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006136:	025b      	lsls	r3, r3, #9
 8006138:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800613a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800613e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	025b      	lsls	r3, r3, #9
 8006144:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006146:	2390      	movs	r3, #144	@ 0x90
 8006148:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800614a:	2300      	movs	r3, #0
 800614c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800614e:	2300      	movs	r3, #0
 8006150:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8006152:	2301      	movs	r3, #1
 8006154:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f107 0218 	add.w	r2, r7, #24
 800615e:	4611      	mov	r1, r2
 8006160:	4618      	mov	r0, r3
 8006162:	f002 fdd5 	bl	8008d10 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d90a      	bls.n	8006182 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2220      	movs	r2, #32
 8006170:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006178:	4618      	mov	r0, r3
 800617a:	f002 fe7d 	bl	8008e78 <SDMMC_CmdWriteMultiBlock>
 800617e:	6478      	str	r0, [r7, #68]	@ 0x44
 8006180:	e009      	b.n	8006196 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2210      	movs	r2, #16
 8006186:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800618e:	4618      	mov	r0, r3
 8006190:	f002 fe50 	bl	8008e34 <SDMMC_CmdWriteSingleBlock>
 8006194:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006196:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006198:	2b00      	cmp	r3, #0
 800619a:	d012      	beq.n	80061c2 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a87      	ldr	r2, [pc, #540]	@ (80063c0 <HAL_SD_WriteBlocks+0x308>)
 80061a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061aa:	431a      	orrs	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e0f9      	b.n	80063b6 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80061c6:	e065      	b.n	8006294 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d040      	beq.n	8006258 <HAL_SD_WriteBlocks+0x1a0>
 80061d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d03d      	beq.n	8006258 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80061dc:	2300      	movs	r3, #0
 80061de:	643b      	str	r3, [r7, #64]	@ 0x40
 80061e0:	e037      	b.n	8006252 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80061e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80061e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ea:	3301      	adds	r3, #1
 80061ec:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80061ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061f0:	3b01      	subs	r3, #1
 80061f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80061f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	021a      	lsls	r2, r3, #8
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006202:	3301      	adds	r3, #1
 8006204:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006208:	3b01      	subs	r3, #1
 800620a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800620c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	041a      	lsls	r2, r3, #16
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	4313      	orrs	r3, r2
 8006216:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800621a:	3301      	adds	r3, #1
 800621c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800621e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006220:	3b01      	subs	r3, #1
 8006222:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	061a      	lsls	r2, r3, #24
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	4313      	orrs	r3, r2
 800622e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006232:	3301      	adds	r3, #1
 8006234:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006236:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006238:	3b01      	subs	r3, #1
 800623a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f107 0214 	add.w	r2, r7, #20
 8006244:	4611      	mov	r1, r2
 8006246:	4618      	mov	r0, r3
 8006248:	f002 fceb 	bl	8008c22 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800624c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800624e:	3301      	adds	r3, #1
 8006250:	643b      	str	r3, [r7, #64]	@ 0x40
 8006252:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006254:	2b07      	cmp	r3, #7
 8006256:	d9c4      	bls.n	80061e2 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006258:	f7fb feb8 	bl	8001fcc <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006264:	429a      	cmp	r2, r3
 8006266:	d902      	bls.n	800626e <HAL_SD_WriteBlocks+0x1b6>
 8006268:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800626a:	2b00      	cmp	r3, #0
 800626c:	d112      	bne.n	8006294 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a53      	ldr	r2, [pc, #332]	@ (80063c0 <HAL_SD_WriteBlocks+0x308>)
 8006274:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800627a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800627c:	431a      	orrs	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e090      	b.n	80063b6 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800629a:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d092      	beq.n	80061c8 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d022      	beq.n	80062f6 <HAL_SD_WriteBlocks+0x23e>
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d91f      	bls.n	80062f6 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ba:	2b03      	cmp	r3, #3
 80062bc:	d01b      	beq.n	80062f6 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4618      	mov	r0, r3
 80062c4:	f002 fdfa 	bl	8008ebc <SDMMC_CmdStopTransfer>
 80062c8:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80062ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d012      	beq.n	80062f6 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a3a      	ldr	r2, [pc, #232]	@ (80063c0 <HAL_SD_WriteBlocks+0x308>)
 80062d6:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062de:	431a      	orrs	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e05f      	b.n	80063b6 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062fc:	f003 0308 	and.w	r3, r3, #8
 8006300:	2b00      	cmp	r3, #0
 8006302:	d012      	beq.n	800632a <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a2d      	ldr	r2, [pc, #180]	@ (80063c0 <HAL_SD_WriteBlocks+0x308>)
 800630a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006310:	f043 0208 	orr.w	r2, r3, #8
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e045      	b.n	80063b6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006330:	f003 0302 	and.w	r3, r3, #2
 8006334:	2b00      	cmp	r3, #0
 8006336:	d012      	beq.n	800635e <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a20      	ldr	r2, [pc, #128]	@ (80063c0 <HAL_SD_WriteBlocks+0x308>)
 800633e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006344:	f043 0202 	orr.w	r2, r3, #2
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e02b      	b.n	80063b6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006364:	f003 0310 	and.w	r3, r3, #16
 8006368:	2b00      	cmp	r3, #0
 800636a:	d012      	beq.n	8006392 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a13      	ldr	r2, [pc, #76]	@ (80063c0 <HAL_SD_WriteBlocks+0x308>)
 8006372:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006378:	f043 0210 	orr.w	r2, r3, #16
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e011      	b.n	80063b6 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f240 523a 	movw	r2, #1338	@ 0x53a
 800639a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80063a4:	2300      	movs	r3, #0
 80063a6:	e006      	b.n	80063b6 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ac:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
  }
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3748      	adds	r7, #72	@ 0x48
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	004005ff 	.word	0x004005ff

080063c4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063d2:	0f9b      	lsrs	r3, r3, #30
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063de:	0e9b      	lsrs	r3, r3, #26
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	f003 030f 	and.w	r3, r3, #15
 80063e6:	b2da      	uxtb	r2, r3
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063f0:	0e1b      	lsrs	r3, r3, #24
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	f003 0303 	and.w	r3, r3, #3
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006402:	0c1b      	lsrs	r3, r3, #16
 8006404:	b2da      	uxtb	r2, r3
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800640e:	0a1b      	lsrs	r3, r3, #8
 8006410:	b2da      	uxtb	r2, r3
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800641a:	b2da      	uxtb	r2, r3
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006424:	0d1b      	lsrs	r3, r3, #20
 8006426:	b29a      	uxth	r2, r3
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006430:	0c1b      	lsrs	r3, r3, #16
 8006432:	b2db      	uxtb	r3, r3
 8006434:	f003 030f 	and.w	r3, r3, #15
 8006438:	b2da      	uxtb	r2, r3
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006442:	0bdb      	lsrs	r3, r3, #15
 8006444:	b2db      	uxtb	r3, r3
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	b2da      	uxtb	r2, r3
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006454:	0b9b      	lsrs	r3, r3, #14
 8006456:	b2db      	uxtb	r3, r3
 8006458:	f003 0301 	and.w	r3, r3, #1
 800645c:	b2da      	uxtb	r2, r3
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006466:	0b5b      	lsrs	r3, r3, #13
 8006468:	b2db      	uxtb	r3, r3
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	b2da      	uxtb	r2, r3
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006478:	0b1b      	lsrs	r3, r3, #12
 800647a:	b2db      	uxtb	r3, r3
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	b2da      	uxtb	r2, r3
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2200      	movs	r2, #0
 800648a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006490:	2b00      	cmp	r3, #0
 8006492:	d163      	bne.n	800655c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006498:	009a      	lsls	r2, r3, #2
 800649a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800649e:	4013      	ands	r3, r2
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80064a4:	0f92      	lsrs	r2, r2, #30
 80064a6:	431a      	orrs	r2, r3
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064b0:	0edb      	lsrs	r3, r3, #27
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	f003 0307 	and.w	r3, r3, #7
 80064b8:	b2da      	uxtb	r2, r3
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064c2:	0e1b      	lsrs	r3, r3, #24
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	f003 0307 	and.w	r3, r3, #7
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064d4:	0d5b      	lsrs	r3, r3, #21
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	f003 0307 	and.w	r3, r3, #7
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064e6:	0c9b      	lsrs	r3, r3, #18
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	f003 0307 	and.w	r3, r3, #7
 80064ee:	b2da      	uxtb	r2, r3
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064f8:	0bdb      	lsrs	r3, r3, #15
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	f003 0307 	and.w	r3, r3, #7
 8006500:	b2da      	uxtb	r2, r3
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	1c5a      	adds	r2, r3, #1
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	7e1b      	ldrb	r3, [r3, #24]
 8006514:	b2db      	uxtb	r3, r3
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	3302      	adds	r3, #2
 800651c:	2201      	movs	r2, #1
 800651e:	fa02 f303 	lsl.w	r3, r2, r3
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006526:	fb03 f202 	mul.w	r2, r3, r2
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	7a1b      	ldrb	r3, [r3, #8]
 8006532:	b2db      	uxtb	r3, r3
 8006534:	f003 030f 	and.w	r3, r3, #15
 8006538:	2201      	movs	r2, #1
 800653a:	409a      	lsls	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8006548:	0a52      	lsrs	r2, r2, #9
 800654a:	fb03 f202 	mul.w	r2, r3, r2
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006558:	661a      	str	r2, [r3, #96]	@ 0x60
 800655a:	e031      	b.n	80065c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006560:	2b01      	cmp	r3, #1
 8006562:	d11d      	bne.n	80065a0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006568:	041b      	lsls	r3, r3, #16
 800656a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006572:	0c1b      	lsrs	r3, r3, #16
 8006574:	431a      	orrs	r2, r3
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	3301      	adds	r3, #1
 8006580:	029a      	lsls	r2, r3, #10
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006594:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	661a      	str	r2, [r3, #96]	@ 0x60
 800659e:	e00f      	b.n	80065c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a58      	ldr	r2, [pc, #352]	@ (8006708 <HAL_SD_GetCardCSD+0x344>)
 80065a6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e09d      	b.n	80066fc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065c4:	0b9b      	lsrs	r3, r3, #14
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065d6:	09db      	lsrs	r3, r3, #7
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065de:	b2da      	uxtb	r2, r3
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065ee:	b2da      	uxtb	r2, r3
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065f8:	0fdb      	lsrs	r3, r3, #31
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006604:	0f5b      	lsrs	r3, r3, #29
 8006606:	b2db      	uxtb	r3, r3
 8006608:	f003 0303 	and.w	r3, r3, #3
 800660c:	b2da      	uxtb	r2, r3
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006616:	0e9b      	lsrs	r3, r3, #26
 8006618:	b2db      	uxtb	r3, r3
 800661a:	f003 0307 	and.w	r3, r3, #7
 800661e:	b2da      	uxtb	r2, r3
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006628:	0d9b      	lsrs	r3, r3, #22
 800662a:	b2db      	uxtb	r3, r3
 800662c:	f003 030f 	and.w	r3, r3, #15
 8006630:	b2da      	uxtb	r2, r3
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800663a:	0d5b      	lsrs	r3, r3, #21
 800663c:	b2db      	uxtb	r3, r3
 800663e:	f003 0301 	and.w	r3, r3, #1
 8006642:	b2da      	uxtb	r2, r3
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006656:	0c1b      	lsrs	r3, r3, #16
 8006658:	b2db      	uxtb	r3, r3
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	b2da      	uxtb	r2, r3
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800666a:	0bdb      	lsrs	r3, r3, #15
 800666c:	b2db      	uxtb	r3, r3
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	b2da      	uxtb	r2, r3
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800667e:	0b9b      	lsrs	r3, r3, #14
 8006680:	b2db      	uxtb	r3, r3
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	b2da      	uxtb	r2, r3
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006692:	0b5b      	lsrs	r3, r3, #13
 8006694:	b2db      	uxtb	r3, r3
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	b2da      	uxtb	r2, r3
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066a6:	0b1b      	lsrs	r3, r3, #12
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ba:	0a9b      	lsrs	r3, r3, #10
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	f003 0303 	and.w	r3, r3, #3
 80066c2:	b2da      	uxtb	r2, r3
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ce:	0a1b      	lsrs	r3, r3, #8
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	f003 0303 	and.w	r3, r3, #3
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066e2:	085b      	lsrs	r3, r3, #1
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066ea:	b2da      	uxtb	r2, r3
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	004005ff 	.word	0x004005ff

0800670c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006764:	b5b0      	push	{r4, r5, r7, lr}
 8006766:	b08e      	sub	sp, #56	@ 0x38
 8006768:	af04      	add	r7, sp, #16
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2203      	movs	r2, #3
 8006778:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006780:	2b03      	cmp	r3, #3
 8006782:	d02e      	beq.n	80067e2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800678a:	d106      	bne.n	800679a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006790:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	639a      	str	r2, [r3, #56]	@ 0x38
 8006798:	e029      	b.n	80067ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067a0:	d10a      	bne.n	80067b8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fa1c 	bl	8006be0 <SD_WideBus_Enable>
 80067a8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067ae:	6a3b      	ldr	r3, [r7, #32]
 80067b0:	431a      	orrs	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80067b6:	e01a      	b.n	80067ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10a      	bne.n	80067d4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fa59 	bl	8006c76 <SD_WideBus_Disable>
 80067c4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	431a      	orrs	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80067d2:	e00c      	b.n	80067ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	639a      	str	r2, [r3, #56]	@ 0x38
 80067e0:	e005      	b.n	80067ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067e6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00b      	beq.n	800680e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a26      	ldr	r2, [pc, #152]	@ (8006894 <HAL_SD_ConfigWideBusOperation+0x130>)
 80067fc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800680c:	e01f      	b.n	800684e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681d      	ldr	r5, [r3, #0]
 8006834:	466c      	mov	r4, sp
 8006836:	f107 0314 	add.w	r3, r7, #20
 800683a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800683e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006842:	f107 0308 	add.w	r3, r7, #8
 8006846:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006848:	4628      	mov	r0, r5
 800684a:	f002 f9b1 	bl	8008bb0 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006856:	4618      	mov	r0, r3
 8006858:	f002 fa86 	bl	8008d68 <SDMMC_CmdBlockLength>
 800685c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00c      	beq.n	800687e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a0a      	ldr	r2, [pc, #40]	@ (8006894 <HAL_SD_ConfigWideBusOperation+0x130>)
 800686a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	431a      	orrs	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8006886:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800688a:	4618      	mov	r0, r3
 800688c:	3728      	adds	r7, #40	@ 0x28
 800688e:	46bd      	mov	sp, r7
 8006890:	bdb0      	pop	{r4, r5, r7, pc}
 8006892:	bf00      	nop
 8006894:	004005ff 	.word	0x004005ff

08006898 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b086      	sub	sp, #24
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80068a0:	2300      	movs	r3, #0
 80068a2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80068a4:	f107 030c 	add.w	r3, r7, #12
 80068a8:	4619      	mov	r1, r3
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f970 	bl	8006b90 <SD_SendStatus>
 80068b0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d005      	beq.n	80068c4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	431a      	orrs	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	0a5b      	lsrs	r3, r3, #9
 80068c8:	f003 030f 	and.w	r3, r3, #15
 80068cc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80068ce:	693b      	ldr	r3, [r7, #16]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3718      	adds	r7, #24
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80068d8:	b5b0      	push	{r4, r5, r7, lr}
 80068da:	b094      	sub	sp, #80	@ 0x50
 80068dc:	af04      	add	r7, sp, #16
 80068de:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80068e0:	2301      	movs	r3, #1
 80068e2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4618      	mov	r0, r3
 80068ea:	f002 f9b9 	bl	8008c60 <SDMMC_GetPowerState>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d102      	bne.n	80068fa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80068f4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80068f8:	e0b8      	b.n	8006a6c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068fe:	2b03      	cmp	r3, #3
 8006900:	d02f      	beq.n	8006962 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4618      	mov	r0, r3
 8006908:	f002 fbe3 	bl	80090d2 <SDMMC_CmdSendCID>
 800690c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800690e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <SD_InitCard+0x40>
    {
      return errorstate;
 8006914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006916:	e0a9      	b.n	8006a6c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2100      	movs	r1, #0
 800691e:	4618      	mov	r0, r3
 8006920:	f002 f9e3 	bl	8008cea <SDMMC_GetResponse>
 8006924:	4602      	mov	r2, r0
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2104      	movs	r1, #4
 8006930:	4618      	mov	r0, r3
 8006932:	f002 f9da 	bl	8008cea <SDMMC_GetResponse>
 8006936:	4602      	mov	r2, r0
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2108      	movs	r1, #8
 8006942:	4618      	mov	r0, r3
 8006944:	f002 f9d1 	bl	8008cea <SDMMC_GetResponse>
 8006948:	4602      	mov	r2, r0
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	210c      	movs	r1, #12
 8006954:	4618      	mov	r0, r3
 8006956:	f002 f9c8 	bl	8008cea <SDMMC_GetResponse>
 800695a:	4602      	mov	r2, r0
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006966:	2b03      	cmp	r3, #3
 8006968:	d00d      	beq.n	8006986 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f107 020e 	add.w	r2, r7, #14
 8006972:	4611      	mov	r1, r2
 8006974:	4618      	mov	r0, r3
 8006976:	f002 fbe9 	bl	800914c <SDMMC_CmdSetRelAdd>
 800697a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800697c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800697e:	2b00      	cmp	r3, #0
 8006980:	d001      	beq.n	8006986 <SD_InitCard+0xae>
    {
      return errorstate;
 8006982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006984:	e072      	b.n	8006a6c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800698a:	2b03      	cmp	r3, #3
 800698c:	d036      	beq.n	80069fc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800698e:	89fb      	ldrh	r3, [r7, #14]
 8006990:	461a      	mov	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800699e:	041b      	lsls	r3, r3, #16
 80069a0:	4619      	mov	r1, r3
 80069a2:	4610      	mov	r0, r2
 80069a4:	f002 fbb3 	bl	800910e <SDMMC_CmdSendCSD>
 80069a8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80069aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d001      	beq.n	80069b4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80069b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069b2:	e05b      	b.n	8006a6c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2100      	movs	r1, #0
 80069ba:	4618      	mov	r0, r3
 80069bc:	f002 f995 	bl	8008cea <SDMMC_GetResponse>
 80069c0:	4602      	mov	r2, r0
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2104      	movs	r1, #4
 80069cc:	4618      	mov	r0, r3
 80069ce:	f002 f98c 	bl	8008cea <SDMMC_GetResponse>
 80069d2:	4602      	mov	r2, r0
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2108      	movs	r1, #8
 80069de:	4618      	mov	r0, r3
 80069e0:	f002 f983 	bl	8008cea <SDMMC_GetResponse>
 80069e4:	4602      	mov	r2, r0
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	210c      	movs	r1, #12
 80069f0:	4618      	mov	r0, r3
 80069f2:	f002 f97a 	bl	8008cea <SDMMC_GetResponse>
 80069f6:	4602      	mov	r2, r0
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2104      	movs	r1, #4
 8006a02:	4618      	mov	r0, r3
 8006a04:	f002 f971 	bl	8008cea <SDMMC_GetResponse>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	0d1a      	lsrs	r2, r3, #20
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006a10:	f107 0310 	add.w	r3, r7, #16
 8006a14:	4619      	mov	r1, r3
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7ff fcd4 	bl	80063c4 <HAL_SD_GetCardCSD>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d002      	beq.n	8006a28 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a22:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006a26:	e021      	b.n	8006a6c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6819      	ldr	r1, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a30:	041b      	lsls	r3, r3, #16
 8006a32:	2200      	movs	r2, #0
 8006a34:	461c      	mov	r4, r3
 8006a36:	4615      	mov	r5, r2
 8006a38:	4622      	mov	r2, r4
 8006a3a:	462b      	mov	r3, r5
 8006a3c:	4608      	mov	r0, r1
 8006a3e:	f002 fa5f 	bl	8008f00 <SDMMC_CmdSelDesel>
 8006a42:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d001      	beq.n	8006a4e <SD_InitCard+0x176>
  {
    return errorstate;
 8006a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a4c:	e00e      	b.n	8006a6c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681d      	ldr	r5, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	466c      	mov	r4, sp
 8006a56:	f103 0210 	add.w	r2, r3, #16
 8006a5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8006a5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006a60:	3304      	adds	r3, #4
 8006a62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a64:	4628      	mov	r0, r5
 8006a66:	f002 f8a3 	bl	8008bb0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3740      	adds	r7, #64	@ 0x40
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bdb0      	pop	{r4, r5, r7, pc}

08006a74 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006a80:	2300      	movs	r3, #0
 8006a82:	617b      	str	r3, [r7, #20]
 8006a84:	2300      	movs	r3, #0
 8006a86:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f002 fa5a 	bl	8008f46 <SDMMC_CmdGoIdleState>
 8006a92:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d001      	beq.n	8006a9e <SD_PowerON+0x2a>
  {
    return errorstate;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	e072      	b.n	8006b84 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f002 fa6d 	bl	8008f82 <SDMMC_CmdOperCond>
 8006aa8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00d      	beq.n	8006acc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4618      	mov	r0, r3
 8006abc:	f002 fa43 	bl	8008f46 <SDMMC_CmdGoIdleState>
 8006ac0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d004      	beq.n	8006ad2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	e05b      	b.n	8006b84 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d137      	bne.n	8006b4a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2100      	movs	r1, #0
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f002 fa6d 	bl	8008fc0 <SDMMC_CmdAppCommand>
 8006ae6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d02d      	beq.n	8006b4a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006aee:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006af2:	e047      	b.n	8006b84 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2100      	movs	r1, #0
 8006afa:	4618      	mov	r0, r3
 8006afc:	f002 fa60 	bl	8008fc0 <SDMMC_CmdAppCommand>
 8006b00:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d001      	beq.n	8006b0c <SD_PowerON+0x98>
    {
      return errorstate;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	e03b      	b.n	8006b84 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	491e      	ldr	r1, [pc, #120]	@ (8006b8c <SD_PowerON+0x118>)
 8006b12:	4618      	mov	r0, r3
 8006b14:	f002 fa76 	bl	8009004 <SDMMC_CmdAppOperCommand>
 8006b18:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b20:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006b24:	e02e      	b.n	8006b84 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f002 f8dc 	bl	8008cea <SDMMC_GetResponse>
 8006b32:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	0fdb      	lsrs	r3, r3, #31
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d101      	bne.n	8006b40 <SD_PowerON+0xcc>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e000      	b.n	8006b42 <SD_PowerON+0xce>
 8006b40:	2300      	movs	r3, #0
 8006b42:	613b      	str	r3, [r7, #16]

    count++;
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	3301      	adds	r3, #1
 8006b48:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d802      	bhi.n	8006b5a <SD_PowerON+0xe6>
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d0cc      	beq.n	8006af4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d902      	bls.n	8006b6a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006b64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006b68:	e00c      	b.n	8006b84 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d003      	beq.n	8006b7c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	645a      	str	r2, [r3, #68]	@ 0x44
 8006b7a:	e002      	b.n	8006b82 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3718      	adds	r7, #24
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	c1100000 	.word	0xc1100000

08006b90 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d102      	bne.n	8006ba6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006ba0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006ba4:	e018      	b.n	8006bd8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bae:	041b      	lsls	r3, r3, #16
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	4610      	mov	r0, r2
 8006bb4:	f002 faeb 	bl	800918e <SDMMC_CmdSendStatus>
 8006bb8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d001      	beq.n	8006bc4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	e009      	b.n	8006bd8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2100      	movs	r1, #0
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f002 f88d 	bl	8008cea <SDMMC_GetResponse>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006be8:	2300      	movs	r3, #0
 8006bea:	60fb      	str	r3, [r7, #12]
 8006bec:	2300      	movs	r3, #0
 8006bee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f002 f877 	bl	8008cea <SDMMC_GetResponse>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c06:	d102      	bne.n	8006c0e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006c08:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006c0c:	e02f      	b.n	8006c6e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006c0e:	f107 030c 	add.w	r3, r7, #12
 8006c12:	4619      	mov	r1, r3
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 f879 	bl	8006d0c <SD_FindSCR>
 8006c1a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	e023      	b.n	8006c6e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d01c      	beq.n	8006c6a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c38:	041b      	lsls	r3, r3, #16
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	4610      	mov	r0, r2
 8006c3e:	f002 f9bf 	bl	8008fc0 <SDMMC_CmdAppCommand>
 8006c42:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d001      	beq.n	8006c4e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	e00f      	b.n	8006c6e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2102      	movs	r1, #2
 8006c54:	4618      	mov	r0, r3
 8006c56:	f002 f9f9 	bl	800904c <SDMMC_CmdBusWidth>
 8006c5a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d001      	beq.n	8006c66 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	e003      	b.n	8006c6e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006c66:	2300      	movs	r3, #0
 8006c68:	e001      	b.n	8006c6e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006c6a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3718      	adds	r7, #24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b086      	sub	sp, #24
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006c7e:	2300      	movs	r3, #0
 8006c80:	60fb      	str	r3, [r7, #12]
 8006c82:	2300      	movs	r3, #0
 8006c84:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f002 f82c 	bl	8008cea <SDMMC_GetResponse>
 8006c92:	4603      	mov	r3, r0
 8006c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c9c:	d102      	bne.n	8006ca4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006c9e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006ca2:	e02f      	b.n	8006d04 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006ca4:	f107 030c 	add.w	r3, r7, #12
 8006ca8:	4619      	mov	r1, r3
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f82e 	bl	8006d0c <SD_FindSCR>
 8006cb0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d001      	beq.n	8006cbc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	e023      	b.n	8006d04 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d01c      	beq.n	8006d00 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cce:	041b      	lsls	r3, r3, #16
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	4610      	mov	r0, r2
 8006cd4:	f002 f974 	bl	8008fc0 <SDMMC_CmdAppCommand>
 8006cd8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	e00f      	b.n	8006d04 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2100      	movs	r1, #0
 8006cea:	4618      	mov	r0, r3
 8006cec:	f002 f9ae 	bl	800904c <SDMMC_CmdBusWidth>
 8006cf0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d001      	beq.n	8006cfc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	e003      	b.n	8006d04 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	e001      	b.n	8006d04 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006d00:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3718      	adds	r7, #24
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006d0c:	b590      	push	{r4, r7, lr}
 8006d0e:	b08f      	sub	sp, #60	@ 0x3c
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006d16:	f7fb f959 	bl	8001fcc <HAL_GetTick>
 8006d1a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006d20:	2300      	movs	r3, #0
 8006d22:	60bb      	str	r3, [r7, #8]
 8006d24:	2300      	movs	r3, #0
 8006d26:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2108      	movs	r1, #8
 8006d32:	4618      	mov	r0, r3
 8006d34:	f002 f818 	bl	8008d68 <SDMMC_CmdBlockLength>
 8006d38:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d001      	beq.n	8006d44 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d42:	e0b2      	b.n	8006eaa <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d4c:	041b      	lsls	r3, r3, #16
 8006d4e:	4619      	mov	r1, r3
 8006d50:	4610      	mov	r0, r2
 8006d52:	f002 f935 	bl	8008fc0 <SDMMC_CmdAppCommand>
 8006d56:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d60:	e0a3      	b.n	8006eaa <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006d62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006d66:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006d68:	2308      	movs	r3, #8
 8006d6a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006d6c:	2330      	movs	r3, #48	@ 0x30
 8006d6e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006d70:	2302      	movs	r3, #2
 8006d72:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006d74:	2300      	movs	r3, #0
 8006d76:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f107 0210 	add.w	r2, r7, #16
 8006d84:	4611      	mov	r1, r2
 8006d86:	4618      	mov	r0, r3
 8006d88:	f001 ffc2 	bl	8008d10 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4618      	mov	r0, r3
 8006d92:	f002 f97d 	bl	8009090 <SDMMC_CmdSendSCR>
 8006d96:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d02a      	beq.n	8006df4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8006d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da0:	e083      	b.n	8006eaa <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006da8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00f      	beq.n	8006dd0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6819      	ldr	r1, [r3, #0]
 8006db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	f107 0208 	add.w	r2, r7, #8
 8006dbc:	18d4      	adds	r4, r2, r3
 8006dbe:	4608      	mov	r0, r1
 8006dc0:	f001 ff22 	bl	8008c08 <SDMMC_ReadFIFO>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	6023      	str	r3, [r4, #0]
      index++;
 8006dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dca:	3301      	adds	r3, #1
 8006dcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dce:	e006      	b.n	8006dde <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d012      	beq.n	8006e04 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006dde:	f7fb f8f5 	bl	8001fcc <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006dec:	d102      	bne.n	8006df4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006dee:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006df2:	e05a      	b.n	8006eaa <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dfa:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d0cf      	beq.n	8006da2 <SD_FindSCR+0x96>
 8006e02:	e000      	b.n	8006e06 <SD_FindSCR+0xfa>
      break;
 8006e04:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e0c:	f003 0308 	and.w	r3, r3, #8
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d005      	beq.n	8006e20 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2208      	movs	r2, #8
 8006e1a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006e1c:	2308      	movs	r3, #8
 8006e1e:	e044      	b.n	8006eaa <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e26:	f003 0302 	and.w	r3, r3, #2
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d005      	beq.n	8006e3a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2202      	movs	r2, #2
 8006e34:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006e36:	2302      	movs	r3, #2
 8006e38:	e037      	b.n	8006eaa <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e40:	f003 0320 	and.w	r3, r3, #32
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d005      	beq.n	8006e54 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2220      	movs	r2, #32
 8006e4e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006e50:	2320      	movs	r3, #32
 8006e52:	e02a      	b.n	8006eaa <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006e5c:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	061a      	lsls	r2, r3, #24
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	021b      	lsls	r3, r3, #8
 8006e66:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006e6a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	0a1b      	lsrs	r3, r3, #8
 8006e70:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006e74:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	0e1b      	lsrs	r3, r3, #24
 8006e7a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e7e:	601a      	str	r2, [r3, #0]
    scr++;
 8006e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e82:	3304      	adds	r3, #4
 8006e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	061a      	lsls	r2, r3, #24
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	021b      	lsls	r3, r3, #8
 8006e8e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006e92:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	0a1b      	lsrs	r3, r3, #8
 8006e98:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006e9c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	0e1b      	lsrs	r3, r3, #24
 8006ea2:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ea6:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	373c      	adds	r7, #60	@ 0x3c
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd90      	pop	{r4, r7, pc}

08006eb2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b084      	sub	sp, #16
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d101      	bne.n	8006ec4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e09d      	b.n	8007000 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d108      	bne.n	8006ede <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ed4:	d009      	beq.n	8006eea <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	61da      	str	r2, [r3, #28]
 8006edc:	e005      	b.n	8006eea <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d106      	bne.n	8006f0a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f7fa fb1d 	bl	8001544 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f20:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006f2a:	d902      	bls.n	8006f32 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	e002      	b.n	8006f38 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006f32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006f36:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006f40:	d007      	beq.n	8006f52 <HAL_SPI_Init+0xa0>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006f4a:	d002      	beq.n	8006f52 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006f62:	431a      	orrs	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	f003 0302 	and.w	r3, r3, #2
 8006f6c:	431a      	orrs	r2, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	431a      	orrs	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f80:	431a      	orrs	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	69db      	ldr	r3, [r3, #28]
 8006f86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a1b      	ldr	r3, [r3, #32]
 8006f90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f94:	ea42 0103 	orr.w	r1, r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f9c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	430a      	orrs	r2, r1
 8006fa6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	0c1b      	lsrs	r3, r3, #16
 8006fae:	f003 0204 	and.w	r2, r3, #4
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb6:	f003 0310 	and.w	r3, r3, #16
 8006fba:	431a      	orrs	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fc0:	f003 0308 	and.w	r3, r3, #8
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006fce:	ea42 0103 	orr.w	r1, r2, r3
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	430a      	orrs	r2, r1
 8006fde:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	69da      	ldr	r2, [r3, #28]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006fee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d101      	bne.n	800701a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e049      	b.n	80070ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b00      	cmp	r3, #0
 8007024:	d106      	bne.n	8007034 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7fa fb70 	bl	8001714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	3304      	adds	r3, #4
 8007044:	4619      	mov	r1, r3
 8007046:	4610      	mov	r0, r2
 8007048:	f000 fa6a 	bl	8007520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3708      	adds	r7, #8
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b082      	sub	sp, #8
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e049      	b.n	800715c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d106      	bne.n	80070e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f7fa fac5 	bl	800166c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2202      	movs	r2, #2
 80070e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	3304      	adds	r3, #4
 80070f2:	4619      	mov	r1, r3
 80070f4:	4610      	mov	r0, r2
 80070f6:	f000 fa13 	bl	8007520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007170:	2300      	movs	r3, #0
 8007172:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800717a:	2b01      	cmp	r3, #1
 800717c:	d101      	bne.n	8007182 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800717e:	2302      	movs	r3, #2
 8007180:	e0ff      	b.n	8007382 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b14      	cmp	r3, #20
 800718e:	f200 80f0 	bhi.w	8007372 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007192:	a201      	add	r2, pc, #4	@ (adr r2, 8007198 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007198:	080071ed 	.word	0x080071ed
 800719c:	08007373 	.word	0x08007373
 80071a0:	08007373 	.word	0x08007373
 80071a4:	08007373 	.word	0x08007373
 80071a8:	0800722d 	.word	0x0800722d
 80071ac:	08007373 	.word	0x08007373
 80071b0:	08007373 	.word	0x08007373
 80071b4:	08007373 	.word	0x08007373
 80071b8:	0800726f 	.word	0x0800726f
 80071bc:	08007373 	.word	0x08007373
 80071c0:	08007373 	.word	0x08007373
 80071c4:	08007373 	.word	0x08007373
 80071c8:	080072af 	.word	0x080072af
 80071cc:	08007373 	.word	0x08007373
 80071d0:	08007373 	.word	0x08007373
 80071d4:	08007373 	.word	0x08007373
 80071d8:	080072f1 	.word	0x080072f1
 80071dc:	08007373 	.word	0x08007373
 80071e0:	08007373 	.word	0x08007373
 80071e4:	08007373 	.word	0x08007373
 80071e8:	08007331 	.word	0x08007331
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68b9      	ldr	r1, [r7, #8]
 80071f2:	4618      	mov	r0, r3
 80071f4:	f000 fa40 	bl	8007678 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	699a      	ldr	r2, [r3, #24]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f042 0208 	orr.w	r2, r2, #8
 8007206:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	699a      	ldr	r2, [r3, #24]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f022 0204 	bic.w	r2, r2, #4
 8007216:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6999      	ldr	r1, [r3, #24]
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	691a      	ldr	r2, [r3, #16]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	619a      	str	r2, [r3, #24]
      break;
 800722a:	e0a5      	b.n	8007378 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68b9      	ldr	r1, [r7, #8]
 8007232:	4618      	mov	r0, r3
 8007234:	f000 fa92 	bl	800775c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	699a      	ldr	r2, [r3, #24]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	699a      	ldr	r2, [r3, #24]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6999      	ldr	r1, [r3, #24]
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	021a      	lsls	r2, r3, #8
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	430a      	orrs	r2, r1
 800726a:	619a      	str	r2, [r3, #24]
      break;
 800726c:	e084      	b.n	8007378 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68b9      	ldr	r1, [r7, #8]
 8007274:	4618      	mov	r0, r3
 8007276:	f000 fae9 	bl	800784c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	69da      	ldr	r2, [r3, #28]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f042 0208 	orr.w	r2, r2, #8
 8007288:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	69da      	ldr	r2, [r3, #28]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f022 0204 	bic.w	r2, r2, #4
 8007298:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	69d9      	ldr	r1, [r3, #28]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	691a      	ldr	r2, [r3, #16]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	430a      	orrs	r2, r1
 80072aa:	61da      	str	r2, [r3, #28]
      break;
 80072ac:	e064      	b.n	8007378 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68b9      	ldr	r1, [r7, #8]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f000 fb3f 	bl	8007938 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	69da      	ldr	r2, [r3, #28]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	69da      	ldr	r2, [r3, #28]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	69d9      	ldr	r1, [r3, #28]
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	021a      	lsls	r2, r3, #8
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	430a      	orrs	r2, r1
 80072ec:	61da      	str	r2, [r3, #28]
      break;
 80072ee:	e043      	b.n	8007378 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68b9      	ldr	r1, [r7, #8]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 fb76 	bl	80079e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f042 0208 	orr.w	r2, r2, #8
 800730a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f022 0204 	bic.w	r2, r2, #4
 800731a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	691a      	ldr	r2, [r3, #16]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	430a      	orrs	r2, r1
 800732c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800732e:	e023      	b.n	8007378 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68b9      	ldr	r1, [r7, #8]
 8007336:	4618      	mov	r0, r3
 8007338:	f000 fba8 	bl	8007a8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800734a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800735a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	021a      	lsls	r2, r3, #8
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	430a      	orrs	r2, r1
 800736e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007370:	e002      	b.n	8007378 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	75fb      	strb	r3, [r7, #23]
      break;
 8007376:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007380:	7dfb      	ldrb	r3, [r7, #23]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3718      	adds	r7, #24
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop

0800738c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007396:	2300      	movs	r3, #0
 8007398:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d101      	bne.n	80073a8 <HAL_TIM_ConfigClockSource+0x1c>
 80073a4:	2302      	movs	r3, #2
 80073a6:	e0b4      	b.n	8007512 <HAL_TIM_ConfigClockSource+0x186>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2202      	movs	r2, #2
 80073b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	4b56      	ldr	r3, [pc, #344]	@ (800751c <HAL_TIM_ConfigClockSource+0x190>)
 80073c4:	4013      	ands	r3, r2
 80073c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80073ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073e0:	d03e      	beq.n	8007460 <HAL_TIM_ConfigClockSource+0xd4>
 80073e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073e6:	f200 8087 	bhi.w	80074f8 <HAL_TIM_ConfigClockSource+0x16c>
 80073ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073ee:	f000 8086 	beq.w	80074fe <HAL_TIM_ConfigClockSource+0x172>
 80073f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073f6:	d87f      	bhi.n	80074f8 <HAL_TIM_ConfigClockSource+0x16c>
 80073f8:	2b70      	cmp	r3, #112	@ 0x70
 80073fa:	d01a      	beq.n	8007432 <HAL_TIM_ConfigClockSource+0xa6>
 80073fc:	2b70      	cmp	r3, #112	@ 0x70
 80073fe:	d87b      	bhi.n	80074f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007400:	2b60      	cmp	r3, #96	@ 0x60
 8007402:	d050      	beq.n	80074a6 <HAL_TIM_ConfigClockSource+0x11a>
 8007404:	2b60      	cmp	r3, #96	@ 0x60
 8007406:	d877      	bhi.n	80074f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007408:	2b50      	cmp	r3, #80	@ 0x50
 800740a:	d03c      	beq.n	8007486 <HAL_TIM_ConfigClockSource+0xfa>
 800740c:	2b50      	cmp	r3, #80	@ 0x50
 800740e:	d873      	bhi.n	80074f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007410:	2b40      	cmp	r3, #64	@ 0x40
 8007412:	d058      	beq.n	80074c6 <HAL_TIM_ConfigClockSource+0x13a>
 8007414:	2b40      	cmp	r3, #64	@ 0x40
 8007416:	d86f      	bhi.n	80074f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007418:	2b30      	cmp	r3, #48	@ 0x30
 800741a:	d064      	beq.n	80074e6 <HAL_TIM_ConfigClockSource+0x15a>
 800741c:	2b30      	cmp	r3, #48	@ 0x30
 800741e:	d86b      	bhi.n	80074f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007420:	2b20      	cmp	r3, #32
 8007422:	d060      	beq.n	80074e6 <HAL_TIM_ConfigClockSource+0x15a>
 8007424:	2b20      	cmp	r3, #32
 8007426:	d867      	bhi.n	80074f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007428:	2b00      	cmp	r3, #0
 800742a:	d05c      	beq.n	80074e6 <HAL_TIM_ConfigClockSource+0x15a>
 800742c:	2b10      	cmp	r3, #16
 800742e:	d05a      	beq.n	80074e6 <HAL_TIM_ConfigClockSource+0x15a>
 8007430:	e062      	b.n	80074f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007442:	f000 fbf1 	bl	8007c28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007454:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	609a      	str	r2, [r3, #8]
      break;
 800745e:	e04f      	b.n	8007500 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007470:	f000 fbda 	bl	8007c28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	689a      	ldr	r2, [r3, #8]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007482:	609a      	str	r2, [r3, #8]
      break;
 8007484:	e03c      	b.n	8007500 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007492:	461a      	mov	r2, r3
 8007494:	f000 fb4e 	bl	8007b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2150      	movs	r1, #80	@ 0x50
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 fba7 	bl	8007bf2 <TIM_ITRx_SetConfig>
      break;
 80074a4:	e02c      	b.n	8007500 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80074b2:	461a      	mov	r2, r3
 80074b4:	f000 fb6d 	bl	8007b92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2160      	movs	r1, #96	@ 0x60
 80074be:	4618      	mov	r0, r3
 80074c0:	f000 fb97 	bl	8007bf2 <TIM_ITRx_SetConfig>
      break;
 80074c4:	e01c      	b.n	8007500 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074d2:	461a      	mov	r2, r3
 80074d4:	f000 fb2e 	bl	8007b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2140      	movs	r1, #64	@ 0x40
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 fb87 	bl	8007bf2 <TIM_ITRx_SetConfig>
      break;
 80074e4:	e00c      	b.n	8007500 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4619      	mov	r1, r3
 80074f0:	4610      	mov	r0, r2
 80074f2:	f000 fb7e 	bl	8007bf2 <TIM_ITRx_SetConfig>
      break;
 80074f6:	e003      	b.n	8007500 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	73fb      	strb	r3, [r7, #15]
      break;
 80074fc:	e000      	b.n	8007500 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80074fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007510:	7bfb      	ldrb	r3, [r7, #15]
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	fffeff88 	.word	0xfffeff88

08007520 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a46      	ldr	r2, [pc, #280]	@ (800764c <TIM_Base_SetConfig+0x12c>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d013      	beq.n	8007560 <TIM_Base_SetConfig+0x40>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800753e:	d00f      	beq.n	8007560 <TIM_Base_SetConfig+0x40>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a43      	ldr	r2, [pc, #268]	@ (8007650 <TIM_Base_SetConfig+0x130>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d00b      	beq.n	8007560 <TIM_Base_SetConfig+0x40>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a42      	ldr	r2, [pc, #264]	@ (8007654 <TIM_Base_SetConfig+0x134>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d007      	beq.n	8007560 <TIM_Base_SetConfig+0x40>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a41      	ldr	r2, [pc, #260]	@ (8007658 <TIM_Base_SetConfig+0x138>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d003      	beq.n	8007560 <TIM_Base_SetConfig+0x40>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a40      	ldr	r2, [pc, #256]	@ (800765c <TIM_Base_SetConfig+0x13c>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d108      	bne.n	8007572 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007566:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	4313      	orrs	r3, r2
 8007570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a35      	ldr	r2, [pc, #212]	@ (800764c <TIM_Base_SetConfig+0x12c>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d02b      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007580:	d027      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a32      	ldr	r2, [pc, #200]	@ (8007650 <TIM_Base_SetConfig+0x130>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d023      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a31      	ldr	r2, [pc, #196]	@ (8007654 <TIM_Base_SetConfig+0x134>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d01f      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a30      	ldr	r2, [pc, #192]	@ (8007658 <TIM_Base_SetConfig+0x138>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d01b      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a2f      	ldr	r2, [pc, #188]	@ (800765c <TIM_Base_SetConfig+0x13c>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d017      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a2e      	ldr	r2, [pc, #184]	@ (8007660 <TIM_Base_SetConfig+0x140>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d013      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a2d      	ldr	r2, [pc, #180]	@ (8007664 <TIM_Base_SetConfig+0x144>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d00f      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a2c      	ldr	r2, [pc, #176]	@ (8007668 <TIM_Base_SetConfig+0x148>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d00b      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a2b      	ldr	r2, [pc, #172]	@ (800766c <TIM_Base_SetConfig+0x14c>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d007      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a2a      	ldr	r2, [pc, #168]	@ (8007670 <TIM_Base_SetConfig+0x150>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d003      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a29      	ldr	r2, [pc, #164]	@ (8007674 <TIM_Base_SetConfig+0x154>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d108      	bne.n	80075e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	689a      	ldr	r2, [r3, #8]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a10      	ldr	r2, [pc, #64]	@ (800764c <TIM_Base_SetConfig+0x12c>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d003      	beq.n	8007618 <TIM_Base_SetConfig+0xf8>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a12      	ldr	r2, [pc, #72]	@ (800765c <TIM_Base_SetConfig+0x13c>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d103      	bne.n	8007620 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	691a      	ldr	r2, [r3, #16]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	2b01      	cmp	r3, #1
 8007630:	d105      	bne.n	800763e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	f023 0201 	bic.w	r2, r3, #1
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	611a      	str	r2, [r3, #16]
  }
}
 800763e:	bf00      	nop
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	40010000 	.word	0x40010000
 8007650:	40000400 	.word	0x40000400
 8007654:	40000800 	.word	0x40000800
 8007658:	40000c00 	.word	0x40000c00
 800765c:	40010400 	.word	0x40010400
 8007660:	40014000 	.word	0x40014000
 8007664:	40014400 	.word	0x40014400
 8007668:	40014800 	.word	0x40014800
 800766c:	40001800 	.word	0x40001800
 8007670:	40001c00 	.word	0x40001c00
 8007674:	40002000 	.word	0x40002000

08007678 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007678:	b480      	push	{r7}
 800767a:	b087      	sub	sp, #28
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a1b      	ldr	r3, [r3, #32]
 800768c:	f023 0201 	bic.w	r2, r3, #1
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	4b2b      	ldr	r3, [pc, #172]	@ (8007750 <TIM_OC1_SetConfig+0xd8>)
 80076a4:	4013      	ands	r3, r2
 80076a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f023 0303 	bic.w	r3, r3, #3
 80076ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	f023 0302 	bic.w	r3, r3, #2
 80076c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	697a      	ldr	r2, [r7, #20]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a21      	ldr	r2, [pc, #132]	@ (8007754 <TIM_OC1_SetConfig+0xdc>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d003      	beq.n	80076dc <TIM_OC1_SetConfig+0x64>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a20      	ldr	r2, [pc, #128]	@ (8007758 <TIM_OC1_SetConfig+0xe0>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d10c      	bne.n	80076f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	f023 0308 	bic.w	r3, r3, #8
 80076e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	697a      	ldr	r2, [r7, #20]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	f023 0304 	bic.w	r3, r3, #4
 80076f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a16      	ldr	r2, [pc, #88]	@ (8007754 <TIM_OC1_SetConfig+0xdc>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d003      	beq.n	8007706 <TIM_OC1_SetConfig+0x8e>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a15      	ldr	r2, [pc, #84]	@ (8007758 <TIM_OC1_SetConfig+0xe0>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d111      	bne.n	800772a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800770c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	695b      	ldr	r3, [r3, #20]
 800771a:	693a      	ldr	r2, [r7, #16]
 800771c:	4313      	orrs	r3, r2
 800771e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	699b      	ldr	r3, [r3, #24]
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	4313      	orrs	r3, r2
 8007728:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	693a      	ldr	r2, [r7, #16]
 800772e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	685a      	ldr	r2, [r3, #4]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	697a      	ldr	r2, [r7, #20]
 8007742:	621a      	str	r2, [r3, #32]
}
 8007744:	bf00      	nop
 8007746:	371c      	adds	r7, #28
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr
 8007750:	fffeff8f 	.word	0xfffeff8f
 8007754:	40010000 	.word	0x40010000
 8007758:	40010400 	.word	0x40010400

0800775c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800775c:	b480      	push	{r7}
 800775e:	b087      	sub	sp, #28
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a1b      	ldr	r3, [r3, #32]
 800776a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a1b      	ldr	r3, [r3, #32]
 8007770:	f023 0210 	bic.w	r2, r3, #16
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	4b2e      	ldr	r3, [pc, #184]	@ (8007840 <TIM_OC2_SetConfig+0xe4>)
 8007788:	4013      	ands	r3, r2
 800778a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	021b      	lsls	r3, r3, #8
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	4313      	orrs	r3, r2
 800779e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	f023 0320 	bic.w	r3, r3, #32
 80077a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	011b      	lsls	r3, r3, #4
 80077ae:	697a      	ldr	r2, [r7, #20]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a23      	ldr	r2, [pc, #140]	@ (8007844 <TIM_OC2_SetConfig+0xe8>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d003      	beq.n	80077c4 <TIM_OC2_SetConfig+0x68>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a22      	ldr	r2, [pc, #136]	@ (8007848 <TIM_OC2_SetConfig+0xec>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d10d      	bne.n	80077e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	011b      	lsls	r3, r3, #4
 80077d2:	697a      	ldr	r2, [r7, #20]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a18      	ldr	r2, [pc, #96]	@ (8007844 <TIM_OC2_SetConfig+0xe8>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d003      	beq.n	80077f0 <TIM_OC2_SetConfig+0x94>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a17      	ldr	r2, [pc, #92]	@ (8007848 <TIM_OC2_SetConfig+0xec>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d113      	bne.n	8007818 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80077f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80077fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	695b      	ldr	r3, [r3, #20]
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	693a      	ldr	r2, [r7, #16]
 8007808:	4313      	orrs	r3, r2
 800780a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	699b      	ldr	r3, [r3, #24]
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	693a      	ldr	r2, [r7, #16]
 8007814:	4313      	orrs	r3, r2
 8007816:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	693a      	ldr	r2, [r7, #16]
 800781c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	621a      	str	r2, [r3, #32]
}
 8007832:	bf00      	nop
 8007834:	371c      	adds	r7, #28
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	feff8fff 	.word	0xfeff8fff
 8007844:	40010000 	.word	0x40010000
 8007848:	40010400 	.word	0x40010400

0800784c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800784c:	b480      	push	{r7}
 800784e:	b087      	sub	sp, #28
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a1b      	ldr	r3, [r3, #32]
 800785a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6a1b      	ldr	r3, [r3, #32]
 8007860:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	69db      	ldr	r3, [r3, #28]
 8007872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	4b2d      	ldr	r3, [pc, #180]	@ (800792c <TIM_OC3_SetConfig+0xe0>)
 8007878:	4013      	ands	r3, r2
 800787a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f023 0303 	bic.w	r3, r3, #3
 8007882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	4313      	orrs	r3, r2
 800788c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007894:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	021b      	lsls	r3, r3, #8
 800789c:	697a      	ldr	r2, [r7, #20]
 800789e:	4313      	orrs	r3, r2
 80078a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a22      	ldr	r2, [pc, #136]	@ (8007930 <TIM_OC3_SetConfig+0xe4>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d003      	beq.n	80078b2 <TIM_OC3_SetConfig+0x66>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a21      	ldr	r2, [pc, #132]	@ (8007934 <TIM_OC3_SetConfig+0xe8>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d10d      	bne.n	80078ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80078b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	021b      	lsls	r3, r3, #8
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80078cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a17      	ldr	r2, [pc, #92]	@ (8007930 <TIM_OC3_SetConfig+0xe4>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d003      	beq.n	80078de <TIM_OC3_SetConfig+0x92>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a16      	ldr	r2, [pc, #88]	@ (8007934 <TIM_OC3_SetConfig+0xe8>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d113      	bne.n	8007906 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80078ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	011b      	lsls	r3, r3, #4
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	011b      	lsls	r3, r3, #4
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	4313      	orrs	r3, r2
 8007904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	685a      	ldr	r2, [r3, #4]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	621a      	str	r2, [r3, #32]
}
 8007920:	bf00      	nop
 8007922:	371c      	adds	r7, #28
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	fffeff8f 	.word	0xfffeff8f
 8007930:	40010000 	.word	0x40010000
 8007934:	40010400 	.word	0x40010400

08007938 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007938:	b480      	push	{r7}
 800793a:	b087      	sub	sp, #28
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a1b      	ldr	r3, [r3, #32]
 800794c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	4b1e      	ldr	r3, [pc, #120]	@ (80079dc <TIM_OC4_SetConfig+0xa4>)
 8007964:	4013      	ands	r3, r2
 8007966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800796e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	021b      	lsls	r3, r3, #8
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	4313      	orrs	r3, r2
 800797a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007982:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	031b      	lsls	r3, r3, #12
 800798a:	693a      	ldr	r2, [r7, #16]
 800798c:	4313      	orrs	r3, r2
 800798e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a13      	ldr	r2, [pc, #76]	@ (80079e0 <TIM_OC4_SetConfig+0xa8>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d003      	beq.n	80079a0 <TIM_OC4_SetConfig+0x68>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a12      	ldr	r2, [pc, #72]	@ (80079e4 <TIM_OC4_SetConfig+0xac>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d109      	bne.n	80079b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80079a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	019b      	lsls	r3, r3, #6
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	685a      	ldr	r2, [r3, #4]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	621a      	str	r2, [r3, #32]
}
 80079ce:	bf00      	nop
 80079d0:	371c      	adds	r7, #28
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	feff8fff 	.word	0xfeff8fff
 80079e0:	40010000 	.word	0x40010000
 80079e4:	40010400 	.word	0x40010400

080079e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b087      	sub	sp, #28
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a1b      	ldr	r3, [r3, #32]
 80079f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a1b      	ldr	r3, [r3, #32]
 80079fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	4b1b      	ldr	r3, [pc, #108]	@ (8007a80 <TIM_OC5_SetConfig+0x98>)
 8007a14:	4013      	ands	r3, r2
 8007a16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007a28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	041b      	lsls	r3, r3, #16
 8007a30:	693a      	ldr	r2, [r7, #16]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a12      	ldr	r2, [pc, #72]	@ (8007a84 <TIM_OC5_SetConfig+0x9c>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d003      	beq.n	8007a46 <TIM_OC5_SetConfig+0x5e>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a11      	ldr	r2, [pc, #68]	@ (8007a88 <TIM_OC5_SetConfig+0xa0>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d109      	bne.n	8007a5a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	695b      	ldr	r3, [r3, #20]
 8007a52:	021b      	lsls	r3, r3, #8
 8007a54:	697a      	ldr	r2, [r7, #20]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	697a      	ldr	r2, [r7, #20]
 8007a5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	685a      	ldr	r2, [r3, #4]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	693a      	ldr	r2, [r7, #16]
 8007a72:	621a      	str	r2, [r3, #32]
}
 8007a74:	bf00      	nop
 8007a76:	371c      	adds	r7, #28
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr
 8007a80:	fffeff8f 	.word	0xfffeff8f
 8007a84:	40010000 	.word	0x40010000
 8007a88:	40010400 	.word	0x40010400

08007a8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a1b      	ldr	r3, [r3, #32]
 8007aa0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8007b28 <TIM_OC6_SetConfig+0x9c>)
 8007ab8:	4013      	ands	r3, r2
 8007aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	021b      	lsls	r3, r3, #8
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007ace:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	051b      	lsls	r3, r3, #20
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a13      	ldr	r2, [pc, #76]	@ (8007b2c <TIM_OC6_SetConfig+0xa0>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d003      	beq.n	8007aec <TIM_OC6_SetConfig+0x60>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a12      	ldr	r2, [pc, #72]	@ (8007b30 <TIM_OC6_SetConfig+0xa4>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d109      	bne.n	8007b00 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007af2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	695b      	ldr	r3, [r3, #20]
 8007af8:	029b      	lsls	r3, r3, #10
 8007afa:	697a      	ldr	r2, [r7, #20]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	621a      	str	r2, [r3, #32]
}
 8007b1a:	bf00      	nop
 8007b1c:	371c      	adds	r7, #28
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	feff8fff 	.word	0xfeff8fff
 8007b2c:	40010000 	.word	0x40010000
 8007b30:	40010400 	.word	0x40010400

08007b34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b087      	sub	sp, #28
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6a1b      	ldr	r3, [r3, #32]
 8007b44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6a1b      	ldr	r3, [r3, #32]
 8007b4a:	f023 0201 	bic.w	r2, r3, #1
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	011b      	lsls	r3, r3, #4
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	f023 030a 	bic.w	r3, r3, #10
 8007b70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	693a      	ldr	r2, [r7, #16]
 8007b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	621a      	str	r2, [r3, #32]
}
 8007b86:	bf00      	nop
 8007b88:	371c      	adds	r7, #28
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b087      	sub	sp, #28
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	60f8      	str	r0, [r7, #12]
 8007b9a:	60b9      	str	r1, [r7, #8]
 8007b9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
 8007ba2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6a1b      	ldr	r3, [r3, #32]
 8007ba8:	f023 0210 	bic.w	r2, r3, #16
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	699b      	ldr	r3, [r3, #24]
 8007bb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007bbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	031b      	lsls	r3, r3, #12
 8007bc2:	693a      	ldr	r2, [r7, #16]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007bce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	011b      	lsls	r3, r3, #4
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	697a      	ldr	r2, [r7, #20]
 8007be4:	621a      	str	r2, [r3, #32]
}
 8007be6:	bf00      	nop
 8007be8:	371c      	adds	r7, #28
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b085      	sub	sp, #20
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	f043 0307 	orr.w	r3, r3, #7
 8007c14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	609a      	str	r2, [r3, #8]
}
 8007c1c:	bf00      	nop
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b087      	sub	sp, #28
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
 8007c34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	021a      	lsls	r2, r3, #8
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	431a      	orrs	r2, r3
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	609a      	str	r2, [r3, #8]
}
 8007c5c:	bf00      	nop
 8007c5e:	371c      	adds	r7, #28
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d101      	bne.n	8007c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	e06d      	b.n	8007d5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a30      	ldr	r2, [pc, #192]	@ (8007d68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d004      	beq.n	8007cb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a2f      	ldr	r2, [pc, #188]	@ (8007d6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d108      	bne.n	8007cc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007cba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ccc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a20      	ldr	r2, [pc, #128]	@ (8007d68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d022      	beq.n	8007d30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cf2:	d01d      	beq.n	8007d30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8007d70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d018      	beq.n	8007d30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a1c      	ldr	r2, [pc, #112]	@ (8007d74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d013      	beq.n	8007d30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a1a      	ldr	r2, [pc, #104]	@ (8007d78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d00e      	beq.n	8007d30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a15      	ldr	r2, [pc, #84]	@ (8007d6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d009      	beq.n	8007d30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a16      	ldr	r2, [pc, #88]	@ (8007d7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d004      	beq.n	8007d30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a15      	ldr	r2, [pc, #84]	@ (8007d80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d10c      	bne.n	8007d4a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	68ba      	ldr	r2, [r7, #8]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr
 8007d68:	40010000 	.word	0x40010000
 8007d6c:	40010400 	.word	0x40010400
 8007d70:	40000400 	.word	0x40000400
 8007d74:	40000800 	.word	0x40000800
 8007d78:	40000c00 	.word	0x40000c00
 8007d7c:	40014000 	.word	0x40014000
 8007d80:	40001800 	.word	0x40001800

08007d84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d101      	bne.n	8007da0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	e065      	b.n	8007e6c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	695b      	ldr	r3, [r3, #20]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e06:	4313      	orrs	r3, r2
 8007e08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	699b      	ldr	r3, [r3, #24]
 8007e14:	041b      	lsls	r3, r3, #16
 8007e16:	4313      	orrs	r3, r2
 8007e18:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a16      	ldr	r2, [pc, #88]	@ (8007e78 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d004      	beq.n	8007e2e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a14      	ldr	r2, [pc, #80]	@ (8007e7c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d115      	bne.n	8007e5a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e38:	051b      	lsls	r3, r3, #20
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	69db      	ldr	r3, [r3, #28]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	6a1b      	ldr	r3, [r3, #32]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3714      	adds	r7, #20
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr
 8007e78:	40010000 	.word	0x40010000
 8007e7c:	40010400 	.word	0x40010400

08007e80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d101      	bne.n	8007e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e040      	b.n	8007f14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d106      	bne.n	8007ea8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7f9 fca0 	bl	80017e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2224      	movs	r2, #36	@ 0x24
 8007eac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f022 0201 	bic.w	r2, r2, #1
 8007ebc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d002      	beq.n	8007ecc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 faf0 	bl	80084ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f889 	bl	8007fe4 <UART_SetConfig>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d101      	bne.n	8007edc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e01b      	b.n	8007f14 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	685a      	ldr	r2, [r3, #4]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007eea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	689a      	ldr	r2, [r3, #8]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007efa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f042 0201 	orr.w	r2, r2, #1
 8007f0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 fb6f 	bl	80085f0 <UART_CheckIdleState>
 8007f12:	4603      	mov	r3, r0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b08a      	sub	sp, #40	@ 0x28
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	4613      	mov	r3, r2
 8007f28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f30:	2b20      	cmp	r3, #32
 8007f32:	d132      	bne.n	8007f9a <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d002      	beq.n	8007f40 <HAL_UART_Receive_DMA+0x24>
 8007f3a:	88fb      	ldrh	r3, [r7, #6]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d101      	bne.n	8007f44 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	e02b      	b.n	8007f9c <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d018      	beq.n	8007f8a <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	e853 3f00 	ldrex	r3, [r3]
 8007f64:	613b      	str	r3, [r7, #16]
   return(result);
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007f6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	461a      	mov	r2, r3
 8007f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f76:	623b      	str	r3, [r7, #32]
 8007f78:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f7a:	69f9      	ldr	r1, [r7, #28]
 8007f7c:	6a3a      	ldr	r2, [r7, #32]
 8007f7e:	e841 2300 	strex	r3, r2, [r1]
 8007f82:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1e6      	bne.n	8007f58 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007f8a:	88fb      	ldrh	r3, [r7, #6]
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	68b9      	ldr	r1, [r7, #8]
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 fbf1 	bl	8008778 <UART_Start_Receive_DMA>
 8007f96:	4603      	mov	r3, r0
 8007f98:	e000      	b.n	8007f9c <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007f9a:	2302      	movs	r3, #2
  }
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3728      	adds	r7, #40	@ 0x28
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007fac:	bf00      	nop
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007fd8:	bf00      	nop
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b088      	sub	sp, #32
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007fec:	2300      	movs	r3, #0
 8007fee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	689a      	ldr	r2, [r3, #8]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	431a      	orrs	r2, r3
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	695b      	ldr	r3, [r3, #20]
 8007ffe:	431a      	orrs	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	69db      	ldr	r3, [r3, #28]
 8008004:	4313      	orrs	r3, r2
 8008006:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	4ba6      	ldr	r3, [pc, #664]	@ (80082a8 <UART_SetConfig+0x2c4>)
 8008010:	4013      	ands	r3, r2
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	6812      	ldr	r2, [r2, #0]
 8008016:	6979      	ldr	r1, [r7, #20]
 8008018:	430b      	orrs	r3, r1
 800801a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	68da      	ldr	r2, [r3, #12]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	430a      	orrs	r2, r1
 8008030:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6a1b      	ldr	r3, [r3, #32]
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	4313      	orrs	r3, r2
 8008040:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	697a      	ldr	r2, [r7, #20]
 8008052:	430a      	orrs	r2, r1
 8008054:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a94      	ldr	r2, [pc, #592]	@ (80082ac <UART_SetConfig+0x2c8>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d120      	bne.n	80080a2 <UART_SetConfig+0xbe>
 8008060:	4b93      	ldr	r3, [pc, #588]	@ (80082b0 <UART_SetConfig+0x2cc>)
 8008062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008066:	f003 0303 	and.w	r3, r3, #3
 800806a:	2b03      	cmp	r3, #3
 800806c:	d816      	bhi.n	800809c <UART_SetConfig+0xb8>
 800806e:	a201      	add	r2, pc, #4	@ (adr r2, 8008074 <UART_SetConfig+0x90>)
 8008070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008074:	08008085 	.word	0x08008085
 8008078:	08008091 	.word	0x08008091
 800807c:	0800808b 	.word	0x0800808b
 8008080:	08008097 	.word	0x08008097
 8008084:	2301      	movs	r3, #1
 8008086:	77fb      	strb	r3, [r7, #31]
 8008088:	e150      	b.n	800832c <UART_SetConfig+0x348>
 800808a:	2302      	movs	r3, #2
 800808c:	77fb      	strb	r3, [r7, #31]
 800808e:	e14d      	b.n	800832c <UART_SetConfig+0x348>
 8008090:	2304      	movs	r3, #4
 8008092:	77fb      	strb	r3, [r7, #31]
 8008094:	e14a      	b.n	800832c <UART_SetConfig+0x348>
 8008096:	2308      	movs	r3, #8
 8008098:	77fb      	strb	r3, [r7, #31]
 800809a:	e147      	b.n	800832c <UART_SetConfig+0x348>
 800809c:	2310      	movs	r3, #16
 800809e:	77fb      	strb	r3, [r7, #31]
 80080a0:	e144      	b.n	800832c <UART_SetConfig+0x348>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a83      	ldr	r2, [pc, #524]	@ (80082b4 <UART_SetConfig+0x2d0>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d132      	bne.n	8008112 <UART_SetConfig+0x12e>
 80080ac:	4b80      	ldr	r3, [pc, #512]	@ (80082b0 <UART_SetConfig+0x2cc>)
 80080ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080b2:	f003 030c 	and.w	r3, r3, #12
 80080b6:	2b0c      	cmp	r3, #12
 80080b8:	d828      	bhi.n	800810c <UART_SetConfig+0x128>
 80080ba:	a201      	add	r2, pc, #4	@ (adr r2, 80080c0 <UART_SetConfig+0xdc>)
 80080bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c0:	080080f5 	.word	0x080080f5
 80080c4:	0800810d 	.word	0x0800810d
 80080c8:	0800810d 	.word	0x0800810d
 80080cc:	0800810d 	.word	0x0800810d
 80080d0:	08008101 	.word	0x08008101
 80080d4:	0800810d 	.word	0x0800810d
 80080d8:	0800810d 	.word	0x0800810d
 80080dc:	0800810d 	.word	0x0800810d
 80080e0:	080080fb 	.word	0x080080fb
 80080e4:	0800810d 	.word	0x0800810d
 80080e8:	0800810d 	.word	0x0800810d
 80080ec:	0800810d 	.word	0x0800810d
 80080f0:	08008107 	.word	0x08008107
 80080f4:	2300      	movs	r3, #0
 80080f6:	77fb      	strb	r3, [r7, #31]
 80080f8:	e118      	b.n	800832c <UART_SetConfig+0x348>
 80080fa:	2302      	movs	r3, #2
 80080fc:	77fb      	strb	r3, [r7, #31]
 80080fe:	e115      	b.n	800832c <UART_SetConfig+0x348>
 8008100:	2304      	movs	r3, #4
 8008102:	77fb      	strb	r3, [r7, #31]
 8008104:	e112      	b.n	800832c <UART_SetConfig+0x348>
 8008106:	2308      	movs	r3, #8
 8008108:	77fb      	strb	r3, [r7, #31]
 800810a:	e10f      	b.n	800832c <UART_SetConfig+0x348>
 800810c:	2310      	movs	r3, #16
 800810e:	77fb      	strb	r3, [r7, #31]
 8008110:	e10c      	b.n	800832c <UART_SetConfig+0x348>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a68      	ldr	r2, [pc, #416]	@ (80082b8 <UART_SetConfig+0x2d4>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d120      	bne.n	800815e <UART_SetConfig+0x17a>
 800811c:	4b64      	ldr	r3, [pc, #400]	@ (80082b0 <UART_SetConfig+0x2cc>)
 800811e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008122:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008126:	2b30      	cmp	r3, #48	@ 0x30
 8008128:	d013      	beq.n	8008152 <UART_SetConfig+0x16e>
 800812a:	2b30      	cmp	r3, #48	@ 0x30
 800812c:	d814      	bhi.n	8008158 <UART_SetConfig+0x174>
 800812e:	2b20      	cmp	r3, #32
 8008130:	d009      	beq.n	8008146 <UART_SetConfig+0x162>
 8008132:	2b20      	cmp	r3, #32
 8008134:	d810      	bhi.n	8008158 <UART_SetConfig+0x174>
 8008136:	2b00      	cmp	r3, #0
 8008138:	d002      	beq.n	8008140 <UART_SetConfig+0x15c>
 800813a:	2b10      	cmp	r3, #16
 800813c:	d006      	beq.n	800814c <UART_SetConfig+0x168>
 800813e:	e00b      	b.n	8008158 <UART_SetConfig+0x174>
 8008140:	2300      	movs	r3, #0
 8008142:	77fb      	strb	r3, [r7, #31]
 8008144:	e0f2      	b.n	800832c <UART_SetConfig+0x348>
 8008146:	2302      	movs	r3, #2
 8008148:	77fb      	strb	r3, [r7, #31]
 800814a:	e0ef      	b.n	800832c <UART_SetConfig+0x348>
 800814c:	2304      	movs	r3, #4
 800814e:	77fb      	strb	r3, [r7, #31]
 8008150:	e0ec      	b.n	800832c <UART_SetConfig+0x348>
 8008152:	2308      	movs	r3, #8
 8008154:	77fb      	strb	r3, [r7, #31]
 8008156:	e0e9      	b.n	800832c <UART_SetConfig+0x348>
 8008158:	2310      	movs	r3, #16
 800815a:	77fb      	strb	r3, [r7, #31]
 800815c:	e0e6      	b.n	800832c <UART_SetConfig+0x348>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a56      	ldr	r2, [pc, #344]	@ (80082bc <UART_SetConfig+0x2d8>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d120      	bne.n	80081aa <UART_SetConfig+0x1c6>
 8008168:	4b51      	ldr	r3, [pc, #324]	@ (80082b0 <UART_SetConfig+0x2cc>)
 800816a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800816e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008172:	2bc0      	cmp	r3, #192	@ 0xc0
 8008174:	d013      	beq.n	800819e <UART_SetConfig+0x1ba>
 8008176:	2bc0      	cmp	r3, #192	@ 0xc0
 8008178:	d814      	bhi.n	80081a4 <UART_SetConfig+0x1c0>
 800817a:	2b80      	cmp	r3, #128	@ 0x80
 800817c:	d009      	beq.n	8008192 <UART_SetConfig+0x1ae>
 800817e:	2b80      	cmp	r3, #128	@ 0x80
 8008180:	d810      	bhi.n	80081a4 <UART_SetConfig+0x1c0>
 8008182:	2b00      	cmp	r3, #0
 8008184:	d002      	beq.n	800818c <UART_SetConfig+0x1a8>
 8008186:	2b40      	cmp	r3, #64	@ 0x40
 8008188:	d006      	beq.n	8008198 <UART_SetConfig+0x1b4>
 800818a:	e00b      	b.n	80081a4 <UART_SetConfig+0x1c0>
 800818c:	2300      	movs	r3, #0
 800818e:	77fb      	strb	r3, [r7, #31]
 8008190:	e0cc      	b.n	800832c <UART_SetConfig+0x348>
 8008192:	2302      	movs	r3, #2
 8008194:	77fb      	strb	r3, [r7, #31]
 8008196:	e0c9      	b.n	800832c <UART_SetConfig+0x348>
 8008198:	2304      	movs	r3, #4
 800819a:	77fb      	strb	r3, [r7, #31]
 800819c:	e0c6      	b.n	800832c <UART_SetConfig+0x348>
 800819e:	2308      	movs	r3, #8
 80081a0:	77fb      	strb	r3, [r7, #31]
 80081a2:	e0c3      	b.n	800832c <UART_SetConfig+0x348>
 80081a4:	2310      	movs	r3, #16
 80081a6:	77fb      	strb	r3, [r7, #31]
 80081a8:	e0c0      	b.n	800832c <UART_SetConfig+0x348>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a44      	ldr	r2, [pc, #272]	@ (80082c0 <UART_SetConfig+0x2dc>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d125      	bne.n	8008200 <UART_SetConfig+0x21c>
 80081b4:	4b3e      	ldr	r3, [pc, #248]	@ (80082b0 <UART_SetConfig+0x2cc>)
 80081b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081c2:	d017      	beq.n	80081f4 <UART_SetConfig+0x210>
 80081c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081c8:	d817      	bhi.n	80081fa <UART_SetConfig+0x216>
 80081ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081ce:	d00b      	beq.n	80081e8 <UART_SetConfig+0x204>
 80081d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081d4:	d811      	bhi.n	80081fa <UART_SetConfig+0x216>
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d003      	beq.n	80081e2 <UART_SetConfig+0x1fe>
 80081da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081de:	d006      	beq.n	80081ee <UART_SetConfig+0x20a>
 80081e0:	e00b      	b.n	80081fa <UART_SetConfig+0x216>
 80081e2:	2300      	movs	r3, #0
 80081e4:	77fb      	strb	r3, [r7, #31]
 80081e6:	e0a1      	b.n	800832c <UART_SetConfig+0x348>
 80081e8:	2302      	movs	r3, #2
 80081ea:	77fb      	strb	r3, [r7, #31]
 80081ec:	e09e      	b.n	800832c <UART_SetConfig+0x348>
 80081ee:	2304      	movs	r3, #4
 80081f0:	77fb      	strb	r3, [r7, #31]
 80081f2:	e09b      	b.n	800832c <UART_SetConfig+0x348>
 80081f4:	2308      	movs	r3, #8
 80081f6:	77fb      	strb	r3, [r7, #31]
 80081f8:	e098      	b.n	800832c <UART_SetConfig+0x348>
 80081fa:	2310      	movs	r3, #16
 80081fc:	77fb      	strb	r3, [r7, #31]
 80081fe:	e095      	b.n	800832c <UART_SetConfig+0x348>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a2f      	ldr	r2, [pc, #188]	@ (80082c4 <UART_SetConfig+0x2e0>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d125      	bne.n	8008256 <UART_SetConfig+0x272>
 800820a:	4b29      	ldr	r3, [pc, #164]	@ (80082b0 <UART_SetConfig+0x2cc>)
 800820c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008210:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008214:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008218:	d017      	beq.n	800824a <UART_SetConfig+0x266>
 800821a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800821e:	d817      	bhi.n	8008250 <UART_SetConfig+0x26c>
 8008220:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008224:	d00b      	beq.n	800823e <UART_SetConfig+0x25a>
 8008226:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800822a:	d811      	bhi.n	8008250 <UART_SetConfig+0x26c>
 800822c:	2b00      	cmp	r3, #0
 800822e:	d003      	beq.n	8008238 <UART_SetConfig+0x254>
 8008230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008234:	d006      	beq.n	8008244 <UART_SetConfig+0x260>
 8008236:	e00b      	b.n	8008250 <UART_SetConfig+0x26c>
 8008238:	2301      	movs	r3, #1
 800823a:	77fb      	strb	r3, [r7, #31]
 800823c:	e076      	b.n	800832c <UART_SetConfig+0x348>
 800823e:	2302      	movs	r3, #2
 8008240:	77fb      	strb	r3, [r7, #31]
 8008242:	e073      	b.n	800832c <UART_SetConfig+0x348>
 8008244:	2304      	movs	r3, #4
 8008246:	77fb      	strb	r3, [r7, #31]
 8008248:	e070      	b.n	800832c <UART_SetConfig+0x348>
 800824a:	2308      	movs	r3, #8
 800824c:	77fb      	strb	r3, [r7, #31]
 800824e:	e06d      	b.n	800832c <UART_SetConfig+0x348>
 8008250:	2310      	movs	r3, #16
 8008252:	77fb      	strb	r3, [r7, #31]
 8008254:	e06a      	b.n	800832c <UART_SetConfig+0x348>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a1b      	ldr	r2, [pc, #108]	@ (80082c8 <UART_SetConfig+0x2e4>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d138      	bne.n	80082d2 <UART_SetConfig+0x2ee>
 8008260:	4b13      	ldr	r3, [pc, #76]	@ (80082b0 <UART_SetConfig+0x2cc>)
 8008262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008266:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800826a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800826e:	d017      	beq.n	80082a0 <UART_SetConfig+0x2bc>
 8008270:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008274:	d82a      	bhi.n	80082cc <UART_SetConfig+0x2e8>
 8008276:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800827a:	d00b      	beq.n	8008294 <UART_SetConfig+0x2b0>
 800827c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008280:	d824      	bhi.n	80082cc <UART_SetConfig+0x2e8>
 8008282:	2b00      	cmp	r3, #0
 8008284:	d003      	beq.n	800828e <UART_SetConfig+0x2aa>
 8008286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800828a:	d006      	beq.n	800829a <UART_SetConfig+0x2b6>
 800828c:	e01e      	b.n	80082cc <UART_SetConfig+0x2e8>
 800828e:	2300      	movs	r3, #0
 8008290:	77fb      	strb	r3, [r7, #31]
 8008292:	e04b      	b.n	800832c <UART_SetConfig+0x348>
 8008294:	2302      	movs	r3, #2
 8008296:	77fb      	strb	r3, [r7, #31]
 8008298:	e048      	b.n	800832c <UART_SetConfig+0x348>
 800829a:	2304      	movs	r3, #4
 800829c:	77fb      	strb	r3, [r7, #31]
 800829e:	e045      	b.n	800832c <UART_SetConfig+0x348>
 80082a0:	2308      	movs	r3, #8
 80082a2:	77fb      	strb	r3, [r7, #31]
 80082a4:	e042      	b.n	800832c <UART_SetConfig+0x348>
 80082a6:	bf00      	nop
 80082a8:	efff69f3 	.word	0xefff69f3
 80082ac:	40011000 	.word	0x40011000
 80082b0:	40023800 	.word	0x40023800
 80082b4:	40004400 	.word	0x40004400
 80082b8:	40004800 	.word	0x40004800
 80082bc:	40004c00 	.word	0x40004c00
 80082c0:	40005000 	.word	0x40005000
 80082c4:	40011400 	.word	0x40011400
 80082c8:	40007800 	.word	0x40007800
 80082cc:	2310      	movs	r3, #16
 80082ce:	77fb      	strb	r3, [r7, #31]
 80082d0:	e02c      	b.n	800832c <UART_SetConfig+0x348>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a72      	ldr	r2, [pc, #456]	@ (80084a0 <UART_SetConfig+0x4bc>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d125      	bne.n	8008328 <UART_SetConfig+0x344>
 80082dc:	4b71      	ldr	r3, [pc, #452]	@ (80084a4 <UART_SetConfig+0x4c0>)
 80082de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082e2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80082e6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80082ea:	d017      	beq.n	800831c <UART_SetConfig+0x338>
 80082ec:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80082f0:	d817      	bhi.n	8008322 <UART_SetConfig+0x33e>
 80082f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082f6:	d00b      	beq.n	8008310 <UART_SetConfig+0x32c>
 80082f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082fc:	d811      	bhi.n	8008322 <UART_SetConfig+0x33e>
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d003      	beq.n	800830a <UART_SetConfig+0x326>
 8008302:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008306:	d006      	beq.n	8008316 <UART_SetConfig+0x332>
 8008308:	e00b      	b.n	8008322 <UART_SetConfig+0x33e>
 800830a:	2300      	movs	r3, #0
 800830c:	77fb      	strb	r3, [r7, #31]
 800830e:	e00d      	b.n	800832c <UART_SetConfig+0x348>
 8008310:	2302      	movs	r3, #2
 8008312:	77fb      	strb	r3, [r7, #31]
 8008314:	e00a      	b.n	800832c <UART_SetConfig+0x348>
 8008316:	2304      	movs	r3, #4
 8008318:	77fb      	strb	r3, [r7, #31]
 800831a:	e007      	b.n	800832c <UART_SetConfig+0x348>
 800831c:	2308      	movs	r3, #8
 800831e:	77fb      	strb	r3, [r7, #31]
 8008320:	e004      	b.n	800832c <UART_SetConfig+0x348>
 8008322:	2310      	movs	r3, #16
 8008324:	77fb      	strb	r3, [r7, #31]
 8008326:	e001      	b.n	800832c <UART_SetConfig+0x348>
 8008328:	2310      	movs	r3, #16
 800832a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	69db      	ldr	r3, [r3, #28]
 8008330:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008334:	d15b      	bne.n	80083ee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008336:	7ffb      	ldrb	r3, [r7, #31]
 8008338:	2b08      	cmp	r3, #8
 800833a:	d828      	bhi.n	800838e <UART_SetConfig+0x3aa>
 800833c:	a201      	add	r2, pc, #4	@ (adr r2, 8008344 <UART_SetConfig+0x360>)
 800833e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008342:	bf00      	nop
 8008344:	08008369 	.word	0x08008369
 8008348:	08008371 	.word	0x08008371
 800834c:	08008379 	.word	0x08008379
 8008350:	0800838f 	.word	0x0800838f
 8008354:	0800837f 	.word	0x0800837f
 8008358:	0800838f 	.word	0x0800838f
 800835c:	0800838f 	.word	0x0800838f
 8008360:	0800838f 	.word	0x0800838f
 8008364:	08008387 	.word	0x08008387
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008368:	f7fd f882 	bl	8005470 <HAL_RCC_GetPCLK1Freq>
 800836c:	61b8      	str	r0, [r7, #24]
        break;
 800836e:	e013      	b.n	8008398 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008370:	f7fd f892 	bl	8005498 <HAL_RCC_GetPCLK2Freq>
 8008374:	61b8      	str	r0, [r7, #24]
        break;
 8008376:	e00f      	b.n	8008398 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008378:	4b4b      	ldr	r3, [pc, #300]	@ (80084a8 <UART_SetConfig+0x4c4>)
 800837a:	61bb      	str	r3, [r7, #24]
        break;
 800837c:	e00c      	b.n	8008398 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800837e:	f7fc ff65 	bl	800524c <HAL_RCC_GetSysClockFreq>
 8008382:	61b8      	str	r0, [r7, #24]
        break;
 8008384:	e008      	b.n	8008398 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008386:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800838a:	61bb      	str	r3, [r7, #24]
        break;
 800838c:	e004      	b.n	8008398 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800838e:	2300      	movs	r3, #0
 8008390:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	77bb      	strb	r3, [r7, #30]
        break;
 8008396:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d074      	beq.n	8008488 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	005a      	lsls	r2, r3, #1
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	085b      	lsrs	r3, r3, #1
 80083a8:	441a      	add	r2, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80083b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	2b0f      	cmp	r3, #15
 80083b8:	d916      	bls.n	80083e8 <UART_SetConfig+0x404>
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083c0:	d212      	bcs.n	80083e8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	f023 030f 	bic.w	r3, r3, #15
 80083ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	085b      	lsrs	r3, r3, #1
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	f003 0307 	and.w	r3, r3, #7
 80083d6:	b29a      	uxth	r2, r3
 80083d8:	89fb      	ldrh	r3, [r7, #14]
 80083da:	4313      	orrs	r3, r2
 80083dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	89fa      	ldrh	r2, [r7, #14]
 80083e4:	60da      	str	r2, [r3, #12]
 80083e6:	e04f      	b.n	8008488 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	77bb      	strb	r3, [r7, #30]
 80083ec:	e04c      	b.n	8008488 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80083ee:	7ffb      	ldrb	r3, [r7, #31]
 80083f0:	2b08      	cmp	r3, #8
 80083f2:	d828      	bhi.n	8008446 <UART_SetConfig+0x462>
 80083f4:	a201      	add	r2, pc, #4	@ (adr r2, 80083fc <UART_SetConfig+0x418>)
 80083f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083fa:	bf00      	nop
 80083fc:	08008421 	.word	0x08008421
 8008400:	08008429 	.word	0x08008429
 8008404:	08008431 	.word	0x08008431
 8008408:	08008447 	.word	0x08008447
 800840c:	08008437 	.word	0x08008437
 8008410:	08008447 	.word	0x08008447
 8008414:	08008447 	.word	0x08008447
 8008418:	08008447 	.word	0x08008447
 800841c:	0800843f 	.word	0x0800843f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008420:	f7fd f826 	bl	8005470 <HAL_RCC_GetPCLK1Freq>
 8008424:	61b8      	str	r0, [r7, #24]
        break;
 8008426:	e013      	b.n	8008450 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008428:	f7fd f836 	bl	8005498 <HAL_RCC_GetPCLK2Freq>
 800842c:	61b8      	str	r0, [r7, #24]
        break;
 800842e:	e00f      	b.n	8008450 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008430:	4b1d      	ldr	r3, [pc, #116]	@ (80084a8 <UART_SetConfig+0x4c4>)
 8008432:	61bb      	str	r3, [r7, #24]
        break;
 8008434:	e00c      	b.n	8008450 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008436:	f7fc ff09 	bl	800524c <HAL_RCC_GetSysClockFreq>
 800843a:	61b8      	str	r0, [r7, #24]
        break;
 800843c:	e008      	b.n	8008450 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800843e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008442:	61bb      	str	r3, [r7, #24]
        break;
 8008444:	e004      	b.n	8008450 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008446:	2300      	movs	r3, #0
 8008448:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	77bb      	strb	r3, [r7, #30]
        break;
 800844e:	bf00      	nop
    }

    if (pclk != 0U)
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d018      	beq.n	8008488 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	085a      	lsrs	r2, r3, #1
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	441a      	add	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	fbb2 f3f3 	udiv	r3, r2, r3
 8008468:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	2b0f      	cmp	r3, #15
 800846e:	d909      	bls.n	8008484 <UART_SetConfig+0x4a0>
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008476:	d205      	bcs.n	8008484 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	b29a      	uxth	r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	60da      	str	r2, [r3, #12]
 8008482:	e001      	b.n	8008488 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008494:	7fbb      	ldrb	r3, [r7, #30]
}
 8008496:	4618      	mov	r0, r3
 8008498:	3720      	adds	r7, #32
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	40007c00 	.word	0x40007c00
 80084a4:	40023800 	.word	0x40023800
 80084a8:	00f42400 	.word	0x00f42400

080084ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084b8:	f003 0308 	and.w	r3, r3, #8
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d00a      	beq.n	80084d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	430a      	orrs	r2, r1
 80084d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084da:	f003 0301 	and.w	r3, r3, #1
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00a      	beq.n	80084f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	430a      	orrs	r2, r1
 80084f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084fc:	f003 0302 	and.w	r3, r3, #2
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00a      	beq.n	800851a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	430a      	orrs	r2, r1
 8008518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800851e:	f003 0304 	and.w	r3, r3, #4
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00a      	beq.n	800853c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	430a      	orrs	r2, r1
 800853a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008540:	f003 0310 	and.w	r3, r3, #16
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00a      	beq.n	800855e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	430a      	orrs	r2, r1
 800855c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008562:	f003 0320 	and.w	r3, r3, #32
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00a      	beq.n	8008580 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	430a      	orrs	r2, r1
 800857e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008588:	2b00      	cmp	r3, #0
 800858a:	d01a      	beq.n	80085c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	430a      	orrs	r2, r1
 80085a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085aa:	d10a      	bne.n	80085c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	430a      	orrs	r2, r1
 80085c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00a      	beq.n	80085e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	430a      	orrs	r2, r1
 80085e2:	605a      	str	r2, [r3, #4]
  }
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b08c      	sub	sp, #48	@ 0x30
 80085f4:	af02      	add	r7, sp, #8
 80085f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008600:	f7f9 fce4 	bl	8001fcc <HAL_GetTick>
 8008604:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 0308 	and.w	r3, r3, #8
 8008610:	2b08      	cmp	r3, #8
 8008612:	d12e      	bne.n	8008672 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008614:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800861c:	2200      	movs	r2, #0
 800861e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f83b 	bl	800869e <UART_WaitOnFlagUntilTimeout>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d021      	beq.n	8008672 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	e853 3f00 	ldrex	r3, [r3]
 800863a:	60fb      	str	r3, [r7, #12]
   return(result);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008642:	623b      	str	r3, [r7, #32]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	461a      	mov	r2, r3
 800864a:	6a3b      	ldr	r3, [r7, #32]
 800864c:	61fb      	str	r3, [r7, #28]
 800864e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008650:	69b9      	ldr	r1, [r7, #24]
 8008652:	69fa      	ldr	r2, [r7, #28]
 8008654:	e841 2300 	strex	r3, r2, [r1]
 8008658:	617b      	str	r3, [r7, #20]
   return(result);
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1e6      	bne.n	800862e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2220      	movs	r2, #32
 8008664:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800866e:	2303      	movs	r3, #3
 8008670:	e011      	b.n	8008696 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2220      	movs	r2, #32
 8008676:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2220      	movs	r2, #32
 800867c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3728      	adds	r7, #40	@ 0x28
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b084      	sub	sp, #16
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	60f8      	str	r0, [r7, #12]
 80086a6:	60b9      	str	r1, [r7, #8]
 80086a8:	603b      	str	r3, [r7, #0]
 80086aa:	4613      	mov	r3, r2
 80086ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086ae:	e04f      	b.n	8008750 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086b6:	d04b      	beq.n	8008750 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086b8:	f7f9 fc88 	bl	8001fcc <HAL_GetTick>
 80086bc:	4602      	mov	r2, r0
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	69ba      	ldr	r2, [r7, #24]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d302      	bcc.n	80086ce <UART_WaitOnFlagUntilTimeout+0x30>
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d101      	bne.n	80086d2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80086ce:	2303      	movs	r3, #3
 80086d0:	e04e      	b.n	8008770 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 0304 	and.w	r3, r3, #4
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d037      	beq.n	8008750 <UART_WaitOnFlagUntilTimeout+0xb2>
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	2b80      	cmp	r3, #128	@ 0x80
 80086e4:	d034      	beq.n	8008750 <UART_WaitOnFlagUntilTimeout+0xb2>
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	2b40      	cmp	r3, #64	@ 0x40
 80086ea:	d031      	beq.n	8008750 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	69db      	ldr	r3, [r3, #28]
 80086f2:	f003 0308 	and.w	r3, r3, #8
 80086f6:	2b08      	cmp	r3, #8
 80086f8:	d110      	bne.n	800871c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2208      	movs	r2, #8
 8008700:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f000 f8fe 	bl	8008904 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2208      	movs	r2, #8
 800870c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2200      	movs	r2, #0
 8008714:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	e029      	b.n	8008770 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	69db      	ldr	r3, [r3, #28]
 8008722:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008726:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800872a:	d111      	bne.n	8008750 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008734:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f000 f8e4 	bl	8008904 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2220      	movs	r2, #32
 8008740:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2200      	movs	r2, #0
 8008748:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800874c:	2303      	movs	r3, #3
 800874e:	e00f      	b.n	8008770 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	69da      	ldr	r2, [r3, #28]
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	4013      	ands	r3, r2
 800875a:	68ba      	ldr	r2, [r7, #8]
 800875c:	429a      	cmp	r2, r3
 800875e:	bf0c      	ite	eq
 8008760:	2301      	moveq	r3, #1
 8008762:	2300      	movne	r3, #0
 8008764:	b2db      	uxtb	r3, r3
 8008766:	461a      	mov	r2, r3
 8008768:	79fb      	ldrb	r3, [r7, #7]
 800876a:	429a      	cmp	r2, r3
 800876c:	d0a0      	beq.n	80086b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b096      	sub	sp, #88	@ 0x58
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	4613      	mov	r3, r2
 8008784:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	68ba      	ldr	r2, [r7, #8]
 800878a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	88fa      	ldrh	r2, [r7, #6]
 8008790:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2200      	movs	r2, #0
 8008798:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2222      	movs	r2, #34	@ 0x22
 80087a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d028      	beq.n	80087fe <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087b0:	4a3e      	ldr	r2, [pc, #248]	@ (80088ac <UART_Start_Receive_DMA+0x134>)
 80087b2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087b8:	4a3d      	ldr	r2, [pc, #244]	@ (80088b0 <UART_Start_Receive_DMA+0x138>)
 80087ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087c0:	4a3c      	ldr	r2, [pc, #240]	@ (80088b4 <UART_Start_Receive_DMA+0x13c>)
 80087c2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087c8:	2200      	movs	r2, #0
 80087ca:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	3324      	adds	r3, #36	@ 0x24
 80087d6:	4619      	mov	r1, r3
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087dc:	461a      	mov	r2, r3
 80087de:	88fb      	ldrh	r3, [r7, #6]
 80087e0:	f7fa f8f0 	bl	80029c4 <HAL_DMA_Start_IT>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d009      	beq.n	80087fe <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2210      	movs	r2, #16
 80087ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2220      	movs	r2, #32
 80087f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	e051      	b.n	80088a2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d018      	beq.n	8008838 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800880e:	e853 3f00 	ldrex	r3, [r3]
 8008812:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008816:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800881a:	657b      	str	r3, [r7, #84]	@ 0x54
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	461a      	mov	r2, r3
 8008822:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008824:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008826:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008828:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800882a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800882c:	e841 2300 	strex	r3, r2, [r1]
 8008830:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008834:	2b00      	cmp	r3, #0
 8008836:	d1e6      	bne.n	8008806 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	3308      	adds	r3, #8
 800883e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008842:	e853 3f00 	ldrex	r3, [r3]
 8008846:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800884a:	f043 0301 	orr.w	r3, r3, #1
 800884e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	3308      	adds	r3, #8
 8008856:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008858:	637a      	str	r2, [r7, #52]	@ 0x34
 800885a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800885e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008860:	e841 2300 	strex	r3, r2, [r1]
 8008864:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1e5      	bne.n	8008838 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	3308      	adds	r3, #8
 8008872:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	e853 3f00 	ldrex	r3, [r3]
 800887a:	613b      	str	r3, [r7, #16]
   return(result);
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008882:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	3308      	adds	r3, #8
 800888a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800888c:	623a      	str	r2, [r7, #32]
 800888e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008890:	69f9      	ldr	r1, [r7, #28]
 8008892:	6a3a      	ldr	r2, [r7, #32]
 8008894:	e841 2300 	strex	r3, r2, [r1]
 8008898:	61bb      	str	r3, [r7, #24]
   return(result);
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1e5      	bne.n	800886c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3758      	adds	r7, #88	@ 0x58
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	080089cd 	.word	0x080089cd
 80088b0:	08008af5 	.word	0x08008af5
 80088b4:	08008b33 	.word	0x08008b33

080088b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b089      	sub	sp, #36	@ 0x24
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	e853 3f00 	ldrex	r3, [r3]
 80088cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80088d4:	61fb      	str	r3, [r7, #28]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	461a      	mov	r2, r3
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	61bb      	str	r3, [r7, #24]
 80088e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e2:	6979      	ldr	r1, [r7, #20]
 80088e4:	69ba      	ldr	r2, [r7, #24]
 80088e6:	e841 2300 	strex	r3, r2, [r1]
 80088ea:	613b      	str	r3, [r7, #16]
   return(result);
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d1e6      	bne.n	80088c0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2220      	movs	r2, #32
 80088f6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80088f8:	bf00      	nop
 80088fa:	3724      	adds	r7, #36	@ 0x24
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008904:	b480      	push	{r7}
 8008906:	b095      	sub	sp, #84	@ 0x54
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008914:	e853 3f00 	ldrex	r3, [r3]
 8008918:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800891a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800891c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008920:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	461a      	mov	r2, r3
 8008928:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800892a:	643b      	str	r3, [r7, #64]	@ 0x40
 800892c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008930:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008932:	e841 2300 	strex	r3, r2, [r1]
 8008936:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1e6      	bne.n	800890c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	3308      	adds	r3, #8
 8008944:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008946:	6a3b      	ldr	r3, [r7, #32]
 8008948:	e853 3f00 	ldrex	r3, [r3]
 800894c:	61fb      	str	r3, [r7, #28]
   return(result);
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	f023 0301 	bic.w	r3, r3, #1
 8008954:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	3308      	adds	r3, #8
 800895c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800895e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008960:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008962:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008964:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008966:	e841 2300 	strex	r3, r2, [r1]
 800896a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800896c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1e5      	bne.n	800893e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008976:	2b01      	cmp	r3, #1
 8008978:	d118      	bne.n	80089ac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	e853 3f00 	ldrex	r3, [r3]
 8008986:	60bb      	str	r3, [r7, #8]
   return(result);
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	f023 0310 	bic.w	r3, r3, #16
 800898e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	461a      	mov	r2, r3
 8008996:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008998:	61bb      	str	r3, [r7, #24]
 800899a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899c:	6979      	ldr	r1, [r7, #20]
 800899e:	69ba      	ldr	r2, [r7, #24]
 80089a0:	e841 2300 	strex	r3, r2, [r1]
 80089a4:	613b      	str	r3, [r7, #16]
   return(result);
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d1e6      	bne.n	800897a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2220      	movs	r2, #32
 80089b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80089c0:	bf00      	nop
 80089c2:	3754      	adds	r7, #84	@ 0x54
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b09c      	sub	sp, #112	@ 0x70
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089d8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	69db      	ldr	r3, [r3, #28]
 80089de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089e2:	d071      	beq.n	8008ac8 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80089e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089e6:	2200      	movs	r2, #0
 80089e8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089f4:	e853 3f00 	ldrex	r3, [r3]
 80089f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80089fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	461a      	mov	r2, r3
 8008a08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a0c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a12:	e841 2300 	strex	r3, r2, [r1]
 8008a16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008a18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d1e6      	bne.n	80089ec <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	3308      	adds	r3, #8
 8008a24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a28:	e853 3f00 	ldrex	r3, [r3]
 8008a2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a30:	f023 0301 	bic.w	r3, r3, #1
 8008a34:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	3308      	adds	r3, #8
 8008a3c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008a3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008a40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a46:	e841 2300 	strex	r3, r2, [r1]
 8008a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d1e5      	bne.n	8008a1e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	3308      	adds	r3, #8
 8008a58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a5c:	e853 3f00 	ldrex	r3, [r3]
 8008a60:	623b      	str	r3, [r7, #32]
   return(result);
 8008a62:	6a3b      	ldr	r3, [r7, #32]
 8008a64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a68:	663b      	str	r3, [r7, #96]	@ 0x60
 8008a6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	3308      	adds	r3, #8
 8008a70:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008a72:	633a      	str	r2, [r7, #48]	@ 0x30
 8008a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a7a:	e841 2300 	strex	r3, r2, [r1]
 8008a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1e5      	bne.n	8008a52 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008a86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a88:	2220      	movs	r2, #32
 8008a8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d118      	bne.n	8008ac8 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	e853 3f00 	ldrex	r3, [r3]
 8008aa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f023 0310 	bic.w	r3, r3, #16
 8008aaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008aac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ab4:	61fb      	str	r3, [r7, #28]
 8008ab6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab8:	69b9      	ldr	r1, [r7, #24]
 8008aba:	69fa      	ldr	r2, [r7, #28]
 8008abc:	e841 2300 	strex	r3, r2, [r1]
 8008ac0:	617b      	str	r3, [r7, #20]
   return(result);
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d1e6      	bne.n	8008a96 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ac8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008aca:	2200      	movs	r2, #0
 8008acc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ace:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d107      	bne.n	8008ae6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ad6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ad8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008adc:	4619      	mov	r1, r3
 8008ade:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008ae0:	f7ff fa74 	bl	8007fcc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ae4:	e002      	b.n	8008aec <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8008ae6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008ae8:	f7f7 fe76 	bl	80007d8 <HAL_UART_RxCpltCallback>
}
 8008aec:	bf00      	nop
 8008aee:	3770      	adds	r7, #112	@ 0x70
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b00:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2201      	movs	r2, #1
 8008b06:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d109      	bne.n	8008b24 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008b16:	085b      	lsrs	r3, r3, #1
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f7ff fa55 	bl	8007fcc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008b22:	e002      	b.n	8008b2a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f7ff fa3d 	bl	8007fa4 <HAL_UART_RxHalfCpltCallback>
}
 8008b2a:	bf00      	nop
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b086      	sub	sp, #24
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b3e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b44:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b4c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b58:	2b80      	cmp	r3, #128	@ 0x80
 8008b5a:	d109      	bne.n	8008b70 <UART_DMAError+0x3e>
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	2b21      	cmp	r3, #33	@ 0x21
 8008b60:	d106      	bne.n	8008b70 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8008b6a:	6978      	ldr	r0, [r7, #20]
 8008b6c:	f7ff fea4 	bl	80088b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b7a:	2b40      	cmp	r3, #64	@ 0x40
 8008b7c:	d109      	bne.n	8008b92 <UART_DMAError+0x60>
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2b22      	cmp	r3, #34	@ 0x22
 8008b82:	d106      	bne.n	8008b92 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	2200      	movs	r2, #0
 8008b88:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8008b8c:	6978      	ldr	r0, [r7, #20]
 8008b8e:	f7ff feb9 	bl	8008904 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b98:	f043 0210 	orr.w	r2, r3, #16
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ba2:	6978      	ldr	r0, [r7, #20]
 8008ba4:	f7ff fa08 	bl	8007fb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ba8:	bf00      	nop
 8008baa:	3718      	adds	r7, #24
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008bb0:	b084      	sub	sp, #16
 8008bb2:	b480      	push	{r7}
 8008bb4:	b085      	sub	sp, #20
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
 8008bba:	f107 001c 	add.w	r0, r7, #28
 8008bbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008bc6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008bc8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008bca:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8008bce:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8008bd2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8008bd6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8008bda:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	685a      	ldr	r2, [r3, #4]
 8008be6:	4b07      	ldr	r3, [pc, #28]	@ (8008c04 <SDMMC_Init+0x54>)
 8008be8:	4013      	ands	r3, r2
 8008bea:	68fa      	ldr	r2, [r7, #12]
 8008bec:	431a      	orrs	r2, r3
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3714      	adds	r7, #20
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	b004      	add	sp, #16
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	ffff8100 	.word	0xffff8100

08008c08 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	370c      	adds	r7, #12
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr

08008c22 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8008c22:	b480      	push	{r7}
 8008c24:	b083      	sub	sp, #12
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
 8008c2a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008c36:	2300      	movs	r3, #0
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2203      	movs	r2, #3
 8008c50:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f003 0303 	and.w	r3, r3, #3
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b085      	sub	sp, #20
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008c86:	2300      	movs	r3, #0
 8008c88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008c9a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008ca0:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008ca6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	68da      	ldr	r2, [r3, #12]
 8008cb2:	4b06      	ldr	r3, [pc, #24]	@ (8008ccc <SDMMC_SendCommand+0x50>)
 8008cb4:	4013      	ands	r3, r2
 8008cb6:	68fa      	ldr	r2, [r7, #12]
 8008cb8:	431a      	orrs	r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3714      	adds	r7, #20
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr
 8008ccc:	fffff000 	.word	0xfffff000

08008cd0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	b2db      	uxtb	r3, r3
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	370c      	adds	r7, #12
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b085      	sub	sp, #20
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	3314      	adds	r3, #20
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
}  
 8008d04:	4618      	mov	r0, r3
 8008d06:	3714      	adds	r7, #20
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b085      	sub	sp, #20
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	685a      	ldr	r2, [r3, #4]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d36:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008d3c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008d42:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d4e:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	431a      	orrs	r2, r3
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008d5a:	2300      	movs	r3, #0

}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3714      	adds	r7, #20
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b088      	sub	sp, #32
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008d76:	2310      	movs	r3, #16
 8008d78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d7a:	2340      	movs	r3, #64	@ 0x40
 8008d7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d88:	f107 0308 	add.w	r3, r7, #8
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f7ff ff74 	bl	8008c7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008d94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d98:	2110      	movs	r1, #16
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 fa1a 	bl	80091d4 <SDMMC_GetCmdResp1>
 8008da0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008da2:	69fb      	ldr	r3, [r7, #28]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3720      	adds	r7, #32
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b088      	sub	sp, #32
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008dba:	2311      	movs	r3, #17
 8008dbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008dbe:	2340      	movs	r3, #64	@ 0x40
 8008dc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008dca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008dcc:	f107 0308 	add.w	r3, r7, #8
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f7ff ff52 	bl	8008c7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ddc:	2111      	movs	r1, #17
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 f9f8 	bl	80091d4 <SDMMC_GetCmdResp1>
 8008de4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008de6:	69fb      	ldr	r3, [r7, #28]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3720      	adds	r7, #32
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b088      	sub	sp, #32
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008dfe:	2312      	movs	r3, #18
 8008e00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e02:	2340      	movs	r3, #64	@ 0x40
 8008e04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e06:	2300      	movs	r3, #0
 8008e08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e10:	f107 0308 	add.w	r3, r7, #8
 8008e14:	4619      	mov	r1, r3
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f7ff ff30 	bl	8008c7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008e1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e20:	2112      	movs	r1, #18
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 f9d6 	bl	80091d4 <SDMMC_GetCmdResp1>
 8008e28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e2a:	69fb      	ldr	r3, [r7, #28]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3720      	adds	r7, #32
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b088      	sub	sp, #32
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008e42:	2318      	movs	r3, #24
 8008e44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e46:	2340      	movs	r3, #64	@ 0x40
 8008e48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e54:	f107 0308 	add.w	r3, r7, #8
 8008e58:	4619      	mov	r1, r3
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f7ff ff0e 	bl	8008c7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008e60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e64:	2118      	movs	r1, #24
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f9b4 	bl	80091d4 <SDMMC_GetCmdResp1>
 8008e6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e6e:	69fb      	ldr	r3, [r7, #28]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3720      	adds	r7, #32
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b088      	sub	sp, #32
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008e86:	2319      	movs	r3, #25
 8008e88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e8a:	2340      	movs	r3, #64	@ 0x40
 8008e8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e98:	f107 0308 	add.w	r3, r7, #8
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f7ff feec 	bl	8008c7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008ea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ea8:	2119      	movs	r1, #25
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f992 	bl	80091d4 <SDMMC_GetCmdResp1>
 8008eb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008eb2:	69fb      	ldr	r3, [r7, #28]
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3720      	adds	r7, #32
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b088      	sub	sp, #32
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008ec8:	230c      	movs	r3, #12
 8008eca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ecc:	2340      	movs	r3, #64	@ 0x40
 8008ece:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ed4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ed8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008eda:	f107 0308 	add.w	r3, r7, #8
 8008ede:	4619      	mov	r1, r3
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f7ff fecb 	bl	8008c7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008ee6:	4a05      	ldr	r2, [pc, #20]	@ (8008efc <SDMMC_CmdStopTransfer+0x40>)
 8008ee8:	210c      	movs	r1, #12
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 f972 	bl	80091d4 <SDMMC_GetCmdResp1>
 8008ef0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ef2:	69fb      	ldr	r3, [r7, #28]
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3720      	adds	r7, #32
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	05f5e100 	.word	0x05f5e100

08008f00 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b08a      	sub	sp, #40	@ 0x28
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008f10:	2307      	movs	r3, #7
 8008f12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f14:	2340      	movs	r3, #64	@ 0x40
 8008f16:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f20:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f22:	f107 0310 	add.w	r3, r7, #16
 8008f26:	4619      	mov	r1, r3
 8008f28:	68f8      	ldr	r0, [r7, #12]
 8008f2a:	f7ff fea7 	bl	8008c7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f32:	2107      	movs	r1, #7
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f000 f94d 	bl	80091d4 <SDMMC_GetCmdResp1>
 8008f3a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8008f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3728      	adds	r7, #40	@ 0x28
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b088      	sub	sp, #32
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008f52:	2300      	movs	r3, #0
 8008f54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008f56:	2300      	movs	r3, #0
 8008f58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f64:	f107 0308 	add.w	r3, r7, #8
 8008f68:	4619      	mov	r1, r3
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f7ff fe86 	bl	8008c7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 fb67 	bl	8009644 <SDMMC_GetCmdError>
 8008f76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f78:	69fb      	ldr	r3, [r7, #28]
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3720      	adds	r7, #32
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b088      	sub	sp, #32
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008f8a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8008f8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008f90:	2308      	movs	r3, #8
 8008f92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f94:	2340      	movs	r3, #64	@ 0x40
 8008f96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008fa0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fa2:	f107 0308 	add.w	r3, r7, #8
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f7ff fe67 	bl	8008c7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 fafa 	bl	80095a8 <SDMMC_GetCmdResp7>
 8008fb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fb6:	69fb      	ldr	r3, [r7, #28]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3720      	adds	r7, #32
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b088      	sub	sp, #32
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008fce:	2337      	movs	r3, #55	@ 0x37
 8008fd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fd2:	2340      	movs	r3, #64	@ 0x40
 8008fd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008fde:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fe0:	f107 0308 	add.w	r3, r7, #8
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f7ff fe48 	bl	8008c7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008fec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ff0:	2137      	movs	r1, #55	@ 0x37
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 f8ee 	bl	80091d4 <SDMMC_GetCmdResp1>
 8008ff8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ffa:	69fb      	ldr	r3, [r7, #28]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3720      	adds	r7, #32
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b088      	sub	sp, #32
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800900e:	683a      	ldr	r2, [r7, #0]
 8009010:	4b0d      	ldr	r3, [pc, #52]	@ (8009048 <SDMMC_CmdAppOperCommand+0x44>)
 8009012:	4313      	orrs	r3, r2
 8009014:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009016:	2329      	movs	r3, #41	@ 0x29
 8009018:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800901a:	2340      	movs	r3, #64	@ 0x40
 800901c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800901e:	2300      	movs	r3, #0
 8009020:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009022:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009026:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009028:	f107 0308 	add.w	r3, r7, #8
 800902c:	4619      	mov	r1, r3
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f7ff fe24 	bl	8008c7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 fa03 	bl	8009440 <SDMMC_GetCmdResp3>
 800903a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800903c:	69fb      	ldr	r3, [r7, #28]
}
 800903e:	4618      	mov	r0, r3
 8009040:	3720      	adds	r7, #32
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	80100000 	.word	0x80100000

0800904c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b088      	sub	sp, #32
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800905a:	2306      	movs	r3, #6
 800905c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800905e:	2340      	movs	r3, #64	@ 0x40
 8009060:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009062:	2300      	movs	r3, #0
 8009064:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009066:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800906a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800906c:	f107 0308 	add.w	r3, r7, #8
 8009070:	4619      	mov	r1, r3
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f7ff fe02 	bl	8008c7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009078:	f241 3288 	movw	r2, #5000	@ 0x1388
 800907c:	2106      	movs	r1, #6
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 f8a8 	bl	80091d4 <SDMMC_GetCmdResp1>
 8009084:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009086:	69fb      	ldr	r3, [r7, #28]
}
 8009088:	4618      	mov	r0, r3
 800908a:	3720      	adds	r7, #32
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b088      	sub	sp, #32
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009098:	2300      	movs	r3, #0
 800909a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800909c:	2333      	movs	r3, #51	@ 0x33
 800909e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090a0:	2340      	movs	r3, #64	@ 0x40
 80090a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090a4:	2300      	movs	r3, #0
 80090a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090ae:	f107 0308 	add.w	r3, r7, #8
 80090b2:	4619      	mov	r1, r3
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f7ff fde1 	bl	8008c7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80090ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090be:	2133      	movs	r1, #51	@ 0x33
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 f887 	bl	80091d4 <SDMMC_GetCmdResp1>
 80090c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090c8:	69fb      	ldr	r3, [r7, #28]
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3720      	adds	r7, #32
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b088      	sub	sp, #32
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80090da:	2300      	movs	r3, #0
 80090dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80090de:	2302      	movs	r3, #2
 80090e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80090e2:	23c0      	movs	r3, #192	@ 0xc0
 80090e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090e6:	2300      	movs	r3, #0
 80090e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090f0:	f107 0308 	add.w	r3, r7, #8
 80090f4:	4619      	mov	r1, r3
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f7ff fdc0 	bl	8008c7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 f957 	bl	80093b0 <SDMMC_GetCmdResp2>
 8009102:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009104:	69fb      	ldr	r3, [r7, #28]
}
 8009106:	4618      	mov	r0, r3
 8009108:	3720      	adds	r7, #32
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800910e:	b580      	push	{r7, lr}
 8009110:	b088      	sub	sp, #32
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
 8009116:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800911c:	2309      	movs	r3, #9
 800911e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009120:	23c0      	movs	r3, #192	@ 0xc0
 8009122:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009124:	2300      	movs	r3, #0
 8009126:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009128:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800912c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800912e:	f107 0308 	add.w	r3, r7, #8
 8009132:	4619      	mov	r1, r3
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f7ff fda1 	bl	8008c7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f938 	bl	80093b0 <SDMMC_GetCmdResp2>
 8009140:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009142:	69fb      	ldr	r3, [r7, #28]
}
 8009144:	4618      	mov	r0, r3
 8009146:	3720      	adds	r7, #32
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b088      	sub	sp, #32
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009156:	2300      	movs	r3, #0
 8009158:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800915a:	2303      	movs	r3, #3
 800915c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800915e:	2340      	movs	r3, #64	@ 0x40
 8009160:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009162:	2300      	movs	r3, #0
 8009164:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009166:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800916a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800916c:	f107 0308 	add.w	r3, r7, #8
 8009170:	4619      	mov	r1, r3
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f7ff fd82 	bl	8008c7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009178:	683a      	ldr	r2, [r7, #0]
 800917a:	2103      	movs	r1, #3
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 f99d 	bl	80094bc <SDMMC_GetCmdResp6>
 8009182:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009184:	69fb      	ldr	r3, [r7, #28]
}
 8009186:	4618      	mov	r0, r3
 8009188:	3720      	adds	r7, #32
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}

0800918e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800918e:	b580      	push	{r7, lr}
 8009190:	b088      	sub	sp, #32
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
 8009196:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800919c:	230d      	movs	r3, #13
 800919e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091a0:	2340      	movs	r3, #64	@ 0x40
 80091a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091a4:	2300      	movs	r3, #0
 80091a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80091ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091ae:	f107 0308 	add.w	r3, r7, #8
 80091b2:	4619      	mov	r1, r3
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f7ff fd61 	bl	8008c7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80091ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091be:	210d      	movs	r1, #13
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 f807 	bl	80091d4 <SDMMC_GetCmdResp1>
 80091c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091c8:	69fb      	ldr	r3, [r7, #28]
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3720      	adds	r7, #32
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
	...

080091d4 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b088      	sub	sp, #32
 80091d8:	af00      	add	r7, sp, #0
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	460b      	mov	r3, r1
 80091de:	607a      	str	r2, [r7, #4]
 80091e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80091e2:	4b70      	ldr	r3, [pc, #448]	@ (80093a4 <SDMMC_GetCmdResp1+0x1d0>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a70      	ldr	r2, [pc, #448]	@ (80093a8 <SDMMC_GetCmdResp1+0x1d4>)
 80091e8:	fba2 2303 	umull	r2, r3, r2, r3
 80091ec:	0a5a      	lsrs	r2, r3, #9
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	fb02 f303 	mul.w	r3, r2, r3
 80091f4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	1e5a      	subs	r2, r3, #1
 80091fa:	61fa      	str	r2, [r7, #28]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d102      	bne.n	8009206 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009200:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009204:	e0c9      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800920a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009212:	2b00      	cmp	r3, #0
 8009214:	d0ef      	beq.n	80091f6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1ea      	bne.n	80091f6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009224:	f003 0304 	and.w	r3, r3, #4
 8009228:	2b00      	cmp	r3, #0
 800922a:	d004      	beq.n	8009236 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2204      	movs	r2, #4
 8009230:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009232:	2304      	movs	r3, #4
 8009234:	e0b1      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800923a:	f003 0301 	and.w	r3, r3, #1
 800923e:	2b00      	cmp	r3, #0
 8009240:	d004      	beq.n	800924c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2201      	movs	r2, #1
 8009246:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009248:	2301      	movs	r3, #1
 800924a:	e0a6      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	22c5      	movs	r2, #197	@ 0xc5
 8009250:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009252:	68f8      	ldr	r0, [r7, #12]
 8009254:	f7ff fd3c 	bl	8008cd0 <SDMMC_GetCommandResponse>
 8009258:	4603      	mov	r3, r0
 800925a:	461a      	mov	r2, r3
 800925c:	7afb      	ldrb	r3, [r7, #11]
 800925e:	4293      	cmp	r3, r2
 8009260:	d001      	beq.n	8009266 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009262:	2301      	movs	r3, #1
 8009264:	e099      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009266:	2100      	movs	r1, #0
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	f7ff fd3e 	bl	8008cea <SDMMC_GetResponse>
 800926e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009270:	697a      	ldr	r2, [r7, #20]
 8009272:	4b4e      	ldr	r3, [pc, #312]	@ (80093ac <SDMMC_GetCmdResp1+0x1d8>)
 8009274:	4013      	ands	r3, r2
 8009276:	2b00      	cmp	r3, #0
 8009278:	d101      	bne.n	800927e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800927a:	2300      	movs	r3, #0
 800927c:	e08d      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	2b00      	cmp	r3, #0
 8009282:	da02      	bge.n	800928a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009284:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009288:	e087      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009290:	2b00      	cmp	r3, #0
 8009292:	d001      	beq.n	8009298 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009294:	2340      	movs	r3, #64	@ 0x40
 8009296:	e080      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d001      	beq.n	80092a6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80092a2:	2380      	movs	r3, #128	@ 0x80
 80092a4:	e079      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d002      	beq.n	80092b6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80092b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80092b4:	e071      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d002      	beq.n	80092c6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80092c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80092c4:	e069      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d002      	beq.n	80092d6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80092d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092d4:	e061      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d002      	beq.n	80092e6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80092e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80092e4:	e059      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d002      	beq.n	80092f6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80092f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80092f4:	e051      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d002      	beq.n	8009306 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009300:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009304:	e049      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800930c:	2b00      	cmp	r3, #0
 800930e:	d002      	beq.n	8009316 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009310:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009314:	e041      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800931c:	2b00      	cmp	r3, #0
 800931e:	d002      	beq.n	8009326 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009320:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009324:	e039      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800932c:	2b00      	cmp	r3, #0
 800932e:	d002      	beq.n	8009336 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009330:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009334:	e031      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800933c:	2b00      	cmp	r3, #0
 800933e:	d002      	beq.n	8009346 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009340:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009344:	e029      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800934c:	2b00      	cmp	r3, #0
 800934e:	d002      	beq.n	8009356 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009350:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009354:	e021      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800935c:	2b00      	cmp	r3, #0
 800935e:	d002      	beq.n	8009366 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009360:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009364:	e019      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800936c:	2b00      	cmp	r3, #0
 800936e:	d002      	beq.n	8009376 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009370:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009374:	e011      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800937c:	2b00      	cmp	r3, #0
 800937e:	d002      	beq.n	8009386 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009380:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009384:	e009      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	f003 0308 	and.w	r3, r3, #8
 800938c:	2b00      	cmp	r3, #0
 800938e:	d002      	beq.n	8009396 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009390:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8009394:	e001      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009396:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800939a:	4618      	mov	r0, r3
 800939c:	3720      	adds	r7, #32
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	20000000 	.word	0x20000000
 80093a8:	10624dd3 	.word	0x10624dd3
 80093ac:	fdffe008 	.word	0xfdffe008

080093b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b085      	sub	sp, #20
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80093b8:	4b1f      	ldr	r3, [pc, #124]	@ (8009438 <SDMMC_GetCmdResp2+0x88>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a1f      	ldr	r2, [pc, #124]	@ (800943c <SDMMC_GetCmdResp2+0x8c>)
 80093be:	fba2 2303 	umull	r2, r3, r2, r3
 80093c2:	0a5b      	lsrs	r3, r3, #9
 80093c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093c8:	fb02 f303 	mul.w	r3, r2, r3
 80093cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	1e5a      	subs	r2, r3, #1
 80093d2:	60fa      	str	r2, [r7, #12]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d102      	bne.n	80093de <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80093d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80093dc:	e026      	b.n	800942c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d0ef      	beq.n	80093ce <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1ea      	bne.n	80093ce <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093fc:	f003 0304 	and.w	r3, r3, #4
 8009400:	2b00      	cmp	r3, #0
 8009402:	d004      	beq.n	800940e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2204      	movs	r2, #4
 8009408:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800940a:	2304      	movs	r3, #4
 800940c:	e00e      	b.n	800942c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009412:	f003 0301 	and.w	r3, r3, #1
 8009416:	2b00      	cmp	r3, #0
 8009418:	d004      	beq.n	8009424 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2201      	movs	r2, #1
 800941e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009420:	2301      	movs	r3, #1
 8009422:	e003      	b.n	800942c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	22c5      	movs	r2, #197	@ 0xc5
 8009428:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800942a:	2300      	movs	r3, #0
}
 800942c:	4618      	mov	r0, r3
 800942e:	3714      	adds	r7, #20
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr
 8009438:	20000000 	.word	0x20000000
 800943c:	10624dd3 	.word	0x10624dd3

08009440 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009440:	b480      	push	{r7}
 8009442:	b085      	sub	sp, #20
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009448:	4b1a      	ldr	r3, [pc, #104]	@ (80094b4 <SDMMC_GetCmdResp3+0x74>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a1a      	ldr	r2, [pc, #104]	@ (80094b8 <SDMMC_GetCmdResp3+0x78>)
 800944e:	fba2 2303 	umull	r2, r3, r2, r3
 8009452:	0a5b      	lsrs	r3, r3, #9
 8009454:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009458:	fb02 f303 	mul.w	r3, r2, r3
 800945c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	1e5a      	subs	r2, r3, #1
 8009462:	60fa      	str	r2, [r7, #12]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d102      	bne.n	800946e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009468:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800946c:	e01b      	b.n	80094a6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009472:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800947a:	2b00      	cmp	r3, #0
 800947c:	d0ef      	beq.n	800945e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009484:	2b00      	cmp	r3, #0
 8009486:	d1ea      	bne.n	800945e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800948c:	f003 0304 	and.w	r3, r3, #4
 8009490:	2b00      	cmp	r3, #0
 8009492:	d004      	beq.n	800949e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2204      	movs	r2, #4
 8009498:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800949a:	2304      	movs	r3, #4
 800949c:	e003      	b.n	80094a6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	22c5      	movs	r2, #197	@ 0xc5
 80094a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3714      	adds	r7, #20
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	20000000 	.word	0x20000000
 80094b8:	10624dd3 	.word	0x10624dd3

080094bc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b088      	sub	sp, #32
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	460b      	mov	r3, r1
 80094c6:	607a      	str	r2, [r7, #4]
 80094c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80094ca:	4b35      	ldr	r3, [pc, #212]	@ (80095a0 <SDMMC_GetCmdResp6+0xe4>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a35      	ldr	r2, [pc, #212]	@ (80095a4 <SDMMC_GetCmdResp6+0xe8>)
 80094d0:	fba2 2303 	umull	r2, r3, r2, r3
 80094d4:	0a5b      	lsrs	r3, r3, #9
 80094d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094da:	fb02 f303 	mul.w	r3, r2, r3
 80094de:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	1e5a      	subs	r2, r3, #1
 80094e4:	61fa      	str	r2, [r7, #28]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d102      	bne.n	80094f0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094ea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80094ee:	e052      	b.n	8009596 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094f4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d0ef      	beq.n	80094e0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009500:	69bb      	ldr	r3, [r7, #24]
 8009502:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009506:	2b00      	cmp	r3, #0
 8009508:	d1ea      	bne.n	80094e0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800950e:	f003 0304 	and.w	r3, r3, #4
 8009512:	2b00      	cmp	r3, #0
 8009514:	d004      	beq.n	8009520 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2204      	movs	r2, #4
 800951a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800951c:	2304      	movs	r3, #4
 800951e:	e03a      	b.n	8009596 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009524:	f003 0301 	and.w	r3, r3, #1
 8009528:	2b00      	cmp	r3, #0
 800952a:	d004      	beq.n	8009536 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2201      	movs	r2, #1
 8009530:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009532:	2301      	movs	r3, #1
 8009534:	e02f      	b.n	8009596 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f7ff fbca 	bl	8008cd0 <SDMMC_GetCommandResponse>
 800953c:	4603      	mov	r3, r0
 800953e:	461a      	mov	r2, r3
 8009540:	7afb      	ldrb	r3, [r7, #11]
 8009542:	4293      	cmp	r3, r2
 8009544:	d001      	beq.n	800954a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009546:	2301      	movs	r3, #1
 8009548:	e025      	b.n	8009596 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	22c5      	movs	r2, #197	@ 0xc5
 800954e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009550:	2100      	movs	r1, #0
 8009552:	68f8      	ldr	r0, [r7, #12]
 8009554:	f7ff fbc9 	bl	8008cea <SDMMC_GetResponse>
 8009558:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8009560:	2b00      	cmp	r3, #0
 8009562:	d106      	bne.n	8009572 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	0c1b      	lsrs	r3, r3, #16
 8009568:	b29a      	uxth	r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800956e:	2300      	movs	r3, #0
 8009570:	e011      	b.n	8009596 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009578:	2b00      	cmp	r3, #0
 800957a:	d002      	beq.n	8009582 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800957c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009580:	e009      	b.n	8009596 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009588:	2b00      	cmp	r3, #0
 800958a:	d002      	beq.n	8009592 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800958c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009590:	e001      	b.n	8009596 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009592:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009596:	4618      	mov	r0, r3
 8009598:	3720      	adds	r7, #32
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	20000000 	.word	0x20000000
 80095a4:	10624dd3 	.word	0x10624dd3

080095a8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80095b0:	4b22      	ldr	r3, [pc, #136]	@ (800963c <SDMMC_GetCmdResp7+0x94>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a22      	ldr	r2, [pc, #136]	@ (8009640 <SDMMC_GetCmdResp7+0x98>)
 80095b6:	fba2 2303 	umull	r2, r3, r2, r3
 80095ba:	0a5b      	lsrs	r3, r3, #9
 80095bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095c0:	fb02 f303 	mul.w	r3, r2, r3
 80095c4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	1e5a      	subs	r2, r3, #1
 80095ca:	60fa      	str	r2, [r7, #12]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d102      	bne.n	80095d6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80095d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80095d4:	e02c      	b.n	8009630 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d0ef      	beq.n	80095c6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1ea      	bne.n	80095c6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095f4:	f003 0304 	and.w	r3, r3, #4
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d004      	beq.n	8009606 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2204      	movs	r2, #4
 8009600:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009602:	2304      	movs	r3, #4
 8009604:	e014      	b.n	8009630 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	2b00      	cmp	r3, #0
 8009610:	d004      	beq.n	800961c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2201      	movs	r2, #1
 8009616:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009618:	2301      	movs	r3, #1
 800961a:	e009      	b.n	8009630 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009624:	2b00      	cmp	r3, #0
 8009626:	d002      	beq.n	800962e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2240      	movs	r2, #64	@ 0x40
 800962c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800962e:	2300      	movs	r3, #0
  
}
 8009630:	4618      	mov	r0, r3
 8009632:	3714      	adds	r7, #20
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr
 800963c:	20000000 	.word	0x20000000
 8009640:	10624dd3 	.word	0x10624dd3

08009644 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009644:	b480      	push	{r7}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800964c:	4b11      	ldr	r3, [pc, #68]	@ (8009694 <SDMMC_GetCmdError+0x50>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a11      	ldr	r2, [pc, #68]	@ (8009698 <SDMMC_GetCmdError+0x54>)
 8009652:	fba2 2303 	umull	r2, r3, r2, r3
 8009656:	0a5b      	lsrs	r3, r3, #9
 8009658:	f241 3288 	movw	r2, #5000	@ 0x1388
 800965c:	fb02 f303 	mul.w	r3, r2, r3
 8009660:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	1e5a      	subs	r2, r3, #1
 8009666:	60fa      	str	r2, [r7, #12]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d102      	bne.n	8009672 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800966c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009670:	e009      	b.n	8009686 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800967a:	2b00      	cmp	r3, #0
 800967c:	d0f1      	beq.n	8009662 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	22c5      	movs	r2, #197	@ 0xc5
 8009682:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3714      	adds	r7, #20
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	20000000 	.word	0x20000000
 8009698:	10624dd3 	.word	0x10624dd3

0800969c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800969c:	b084      	sub	sp, #16
 800969e:	b580      	push	{r7, lr}
 80096a0:	b084      	sub	sp, #16
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
 80096a6:	f107 001c 	add.w	r0, r7, #28
 80096aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80096ae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d127      	bne.n	8009706 <USB_CoreInit+0x6a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096ba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	68da      	ldr	r2, [r3, #12]
 80096c6:	4b3a      	ldr	r3, [pc, #232]	@ (80097b0 <USB_CoreInit+0x114>)
 80096c8:	4013      	ands	r3, r2
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	f043 0210 	orr.w	r2, r3, #16
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80096e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d105      	bne.n	80096fa <USB_CoreInit+0x5e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f001 fb1c 	bl	800ad38 <USB_CoreReset>
 8009700:	4603      	mov	r3, r0
 8009702:	73fb      	strb	r3, [r7, #15]
 8009704:	e03c      	b.n	8009780 <USB_CoreInit+0xe4>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8009706:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800970a:	2b03      	cmp	r3, #3
 800970c:	d127      	bne.n	800975e <USB_CoreInit+0xc2>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009712:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	68da      	ldr	r2, [r3, #12]
 800971e:	4b24      	ldr	r3, [pc, #144]	@ (80097b0 <USB_CoreInit+0x114>)
 8009720:	4013      	ands	r3, r2
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	f023 0210 	bic.w	r2, r3, #16
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 800973e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009742:	2b01      	cmp	r3, #1
 8009744:	d105      	bne.n	8009752 <USB_CoreInit+0xb6>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f001 faf0 	bl	800ad38 <USB_CoreReset>
 8009758:	4603      	mov	r3, r0
 800975a:	73fb      	strb	r3, [r7, #15]
 800975c:	e010      	b.n	8009780 <USB_CoreInit+0xe4>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f001 fae4 	bl	800ad38 <USB_CoreReset>
 8009770:	4603      	mov	r3, r0
 8009772:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009778:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8009780:	7fbb      	ldrb	r3, [r7, #30]
 8009782:	2b01      	cmp	r3, #1
 8009784:	d10b      	bne.n	800979e <USB_CoreInit+0x102>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	f043 0206 	orr.w	r2, r3, #6
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	f043 0220 	orr.w	r2, r3, #32
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800979e:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80097aa:	b004      	add	sp, #16
 80097ac:	4770      	bx	lr
 80097ae:	bf00      	nop
 80097b0:	ffbdffbf 	.word	0xffbdffbf

080097b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b087      	sub	sp, #28
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	4613      	mov	r3, r2
 80097c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80097c2:	79fb      	ldrb	r3, [r7, #7]
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d165      	bne.n	8009894 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	4a41      	ldr	r2, [pc, #260]	@ (80098d0 <USB_SetTurnaroundTime+0x11c>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d906      	bls.n	80097de <USB_SetTurnaroundTime+0x2a>
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	4a40      	ldr	r2, [pc, #256]	@ (80098d4 <USB_SetTurnaroundTime+0x120>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d202      	bcs.n	80097de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80097d8:	230f      	movs	r3, #15
 80097da:	617b      	str	r3, [r7, #20]
 80097dc:	e062      	b.n	80098a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	4a3c      	ldr	r2, [pc, #240]	@ (80098d4 <USB_SetTurnaroundTime+0x120>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d306      	bcc.n	80097f4 <USB_SetTurnaroundTime+0x40>
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	4a3b      	ldr	r2, [pc, #236]	@ (80098d8 <USB_SetTurnaroundTime+0x124>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d202      	bcs.n	80097f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80097ee:	230e      	movs	r3, #14
 80097f0:	617b      	str	r3, [r7, #20]
 80097f2:	e057      	b.n	80098a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	4a38      	ldr	r2, [pc, #224]	@ (80098d8 <USB_SetTurnaroundTime+0x124>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d306      	bcc.n	800980a <USB_SetTurnaroundTime+0x56>
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	4a37      	ldr	r2, [pc, #220]	@ (80098dc <USB_SetTurnaroundTime+0x128>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d202      	bcs.n	800980a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009804:	230d      	movs	r3, #13
 8009806:	617b      	str	r3, [r7, #20]
 8009808:	e04c      	b.n	80098a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	4a33      	ldr	r2, [pc, #204]	@ (80098dc <USB_SetTurnaroundTime+0x128>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d306      	bcc.n	8009820 <USB_SetTurnaroundTime+0x6c>
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	4a32      	ldr	r2, [pc, #200]	@ (80098e0 <USB_SetTurnaroundTime+0x12c>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d802      	bhi.n	8009820 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800981a:	230c      	movs	r3, #12
 800981c:	617b      	str	r3, [r7, #20]
 800981e:	e041      	b.n	80098a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	4a2f      	ldr	r2, [pc, #188]	@ (80098e0 <USB_SetTurnaroundTime+0x12c>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d906      	bls.n	8009836 <USB_SetTurnaroundTime+0x82>
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	4a2e      	ldr	r2, [pc, #184]	@ (80098e4 <USB_SetTurnaroundTime+0x130>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d802      	bhi.n	8009836 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009830:	230b      	movs	r3, #11
 8009832:	617b      	str	r3, [r7, #20]
 8009834:	e036      	b.n	80098a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	4a2a      	ldr	r2, [pc, #168]	@ (80098e4 <USB_SetTurnaroundTime+0x130>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d906      	bls.n	800984c <USB_SetTurnaroundTime+0x98>
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	4a29      	ldr	r2, [pc, #164]	@ (80098e8 <USB_SetTurnaroundTime+0x134>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d802      	bhi.n	800984c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009846:	230a      	movs	r3, #10
 8009848:	617b      	str	r3, [r7, #20]
 800984a:	e02b      	b.n	80098a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	4a26      	ldr	r2, [pc, #152]	@ (80098e8 <USB_SetTurnaroundTime+0x134>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d906      	bls.n	8009862 <USB_SetTurnaroundTime+0xae>
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	4a25      	ldr	r2, [pc, #148]	@ (80098ec <USB_SetTurnaroundTime+0x138>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d202      	bcs.n	8009862 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800985c:	2309      	movs	r3, #9
 800985e:	617b      	str	r3, [r7, #20]
 8009860:	e020      	b.n	80098a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	4a21      	ldr	r2, [pc, #132]	@ (80098ec <USB_SetTurnaroundTime+0x138>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d306      	bcc.n	8009878 <USB_SetTurnaroundTime+0xc4>
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	4a20      	ldr	r2, [pc, #128]	@ (80098f0 <USB_SetTurnaroundTime+0x13c>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d802      	bhi.n	8009878 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009872:	2308      	movs	r3, #8
 8009874:	617b      	str	r3, [r7, #20]
 8009876:	e015      	b.n	80098a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	4a1d      	ldr	r2, [pc, #116]	@ (80098f0 <USB_SetTurnaroundTime+0x13c>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d906      	bls.n	800988e <USB_SetTurnaroundTime+0xda>
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	4a1c      	ldr	r2, [pc, #112]	@ (80098f4 <USB_SetTurnaroundTime+0x140>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d202      	bcs.n	800988e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009888:	2307      	movs	r3, #7
 800988a:	617b      	str	r3, [r7, #20]
 800988c:	e00a      	b.n	80098a4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800988e:	2306      	movs	r3, #6
 8009890:	617b      	str	r3, [r7, #20]
 8009892:	e007      	b.n	80098a4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009894:	79fb      	ldrb	r3, [r7, #7]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d102      	bne.n	80098a0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800989a:	2309      	movs	r3, #9
 800989c:	617b      	str	r3, [r7, #20]
 800989e:	e001      	b.n	80098a4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80098a0:	2309      	movs	r3, #9
 80098a2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	68da      	ldr	r2, [r3, #12]
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	029b      	lsls	r3, r3, #10
 80098b8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80098bc:	431a      	orrs	r2, r3
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	371c      	adds	r7, #28
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr
 80098d0:	00d8acbf 	.word	0x00d8acbf
 80098d4:	00e4e1c0 	.word	0x00e4e1c0
 80098d8:	00f42400 	.word	0x00f42400
 80098dc:	01067380 	.word	0x01067380
 80098e0:	011a499f 	.word	0x011a499f
 80098e4:	01312cff 	.word	0x01312cff
 80098e8:	014ca43f 	.word	0x014ca43f
 80098ec:	016e3600 	.word	0x016e3600
 80098f0:	01a6ab1f 	.word	0x01a6ab1f
 80098f4:	01e84800 	.word	0x01e84800

080098f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	f043 0201 	orr.w	r2, r3, #1
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	370c      	adds	r7, #12
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr

0800991a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800991a:	b480      	push	{r7}
 800991c:	b083      	sub	sp, #12
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	f023 0201 	bic.w	r2, r3, #1
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800992e:	2300      	movs	r3, #0
}
 8009930:	4618      	mov	r0, r3
 8009932:	370c      	adds	r7, #12
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	460b      	mov	r3, r1
 8009946:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009948:	2300      	movs	r3, #0
 800994a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009958:	78fb      	ldrb	r3, [r7, #3]
 800995a:	2b01      	cmp	r3, #1
 800995c:	d115      	bne.n	800998a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800996a:	200a      	movs	r0, #10
 800996c:	f7f8 fb3a 	bl	8001fe4 <HAL_Delay>
      ms += 10U;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	330a      	adds	r3, #10
 8009974:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f001 f94d 	bl	800ac16 <USB_GetMode>
 800997c:	4603      	mov	r3, r0
 800997e:	2b01      	cmp	r3, #1
 8009980:	d01e      	beq.n	80099c0 <USB_SetCurrentMode+0x84>
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2bc7      	cmp	r3, #199	@ 0xc7
 8009986:	d9f0      	bls.n	800996a <USB_SetCurrentMode+0x2e>
 8009988:	e01a      	b.n	80099c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800998a:	78fb      	ldrb	r3, [r7, #3]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d115      	bne.n	80099bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800999c:	200a      	movs	r0, #10
 800999e:	f7f8 fb21 	bl	8001fe4 <HAL_Delay>
      ms += 10U;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	330a      	adds	r3, #10
 80099a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f001 f934 	bl	800ac16 <USB_GetMode>
 80099ae:	4603      	mov	r3, r0
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d005      	beq.n	80099c0 <USB_SetCurrentMode+0x84>
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2bc7      	cmp	r3, #199	@ 0xc7
 80099b8:	d9f0      	bls.n	800999c <USB_SetCurrentMode+0x60>
 80099ba:	e001      	b.n	80099c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80099bc:	2301      	movs	r3, #1
 80099be:	e005      	b.n	80099cc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2bc8      	cmp	r3, #200	@ 0xc8
 80099c4:	d101      	bne.n	80099ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	e000      	b.n	80099cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80099ca:	2300      	movs	r3, #0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3710      	adds	r7, #16
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80099d4:	b084      	sub	sp, #16
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b086      	sub	sp, #24
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
 80099de:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80099e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80099e6:	2300      	movs	r3, #0
 80099e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80099ee:	2300      	movs	r3, #0
 80099f0:	613b      	str	r3, [r7, #16]
 80099f2:	e009      	b.n	8009a08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	3340      	adds	r3, #64	@ 0x40
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	4413      	add	r3, r2
 80099fe:	2200      	movs	r2, #0
 8009a00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	3301      	adds	r3, #1
 8009a06:	613b      	str	r3, [r7, #16]
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	2b0e      	cmp	r3, #14
 8009a0c:	d9f2      	bls.n	80099f4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009a0e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d11c      	bne.n	8009a50 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a24:	f043 0302 	orr.w	r3, r3, #2
 8009a28:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a2e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	601a      	str	r2, [r3, #0]
 8009a4e:	e005      	b.n	8009a5c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a54:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009a62:	461a      	mov	r2, r3
 8009a64:	2300      	movs	r3, #0
 8009a66:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009a68:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d10d      	bne.n	8009a8c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009a70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d104      	bne.n	8009a82 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009a78:	2100      	movs	r1, #0
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 f97a 	bl	8009d74 <USB_SetDevSpeed>
 8009a80:	e01a      	b.n	8009ab8 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009a82:	2101      	movs	r1, #1
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 f975 	bl	8009d74 <USB_SetDevSpeed>
 8009a8a:	e015      	b.n	8009ab8 <USB_DevInit+0xe4>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8009a8c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009a90:	2b03      	cmp	r3, #3
 8009a92:	d10d      	bne.n	8009ab0 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009a94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d104      	bne.n	8009aa6 <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009a9c:	2100      	movs	r1, #0
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 f968 	bl	8009d74 <USB_SetDevSpeed>
 8009aa4:	e008      	b.n	8009ab8 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009aa6:	2101      	movs	r1, #1
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 f963 	bl	8009d74 <USB_SetDevSpeed>
 8009aae:	e003      	b.n	8009ab8 <USB_DevInit+0xe4>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009ab0:	2103      	movs	r1, #3
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 f95e 	bl	8009d74 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009ab8:	2110      	movs	r1, #16
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 f8fa 	bl	8009cb4 <USB_FlushTxFifo>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d001      	beq.n	8009aca <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f924 	bl	8009d18 <USB_FlushRxFifo>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d001      	beq.n	8009ada <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009aec:	461a      	mov	r2, r3
 8009aee:	2300      	movs	r3, #0
 8009af0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009af8:	461a      	mov	r2, r3
 8009afa:	2300      	movs	r3, #0
 8009afc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009afe:	2300      	movs	r3, #0
 8009b00:	613b      	str	r3, [r7, #16]
 8009b02:	e043      	b.n	8009b8c <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	015a      	lsls	r2, r3, #5
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b1a:	d118      	bne.n	8009b4e <USB_DevInit+0x17a>
    {
      if (i == 0U)
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d10a      	bne.n	8009b38 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	015a      	lsls	r2, r3, #5
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	4413      	add	r3, r2
 8009b2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b2e:	461a      	mov	r2, r3
 8009b30:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009b34:	6013      	str	r3, [r2, #0]
 8009b36:	e013      	b.n	8009b60 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	015a      	lsls	r2, r3, #5
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	4413      	add	r3, r2
 8009b40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b44:	461a      	mov	r2, r3
 8009b46:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009b4a:	6013      	str	r3, [r2, #0]
 8009b4c:	e008      	b.n	8009b60 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	015a      	lsls	r2, r3, #5
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	4413      	add	r3, r2
 8009b56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	015a      	lsls	r2, r3, #5
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	4413      	add	r3, r2
 8009b68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	2300      	movs	r3, #0
 8009b70:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	015a      	lsls	r2, r3, #5
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	4413      	add	r3, r2
 8009b7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b7e:	461a      	mov	r2, r3
 8009b80:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009b84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	3301      	adds	r3, #1
 8009b8a:	613b      	str	r3, [r7, #16]
 8009b8c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009b90:	461a      	mov	r2, r3
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d3b5      	bcc.n	8009b04 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b98:	2300      	movs	r3, #0
 8009b9a:	613b      	str	r3, [r7, #16]
 8009b9c:	e043      	b.n	8009c26 <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	015a      	lsls	r2, r3, #5
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009bb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009bb4:	d118      	bne.n	8009be8 <USB_DevInit+0x214>
    {
      if (i == 0U)
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d10a      	bne.n	8009bd2 <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	015a      	lsls	r2, r3, #5
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bc8:	461a      	mov	r2, r3
 8009bca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009bce:	6013      	str	r3, [r2, #0]
 8009bd0:	e013      	b.n	8009bfa <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	015a      	lsls	r2, r3, #5
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	4413      	add	r3, r2
 8009bda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bde:	461a      	mov	r2, r3
 8009be0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009be4:	6013      	str	r3, [r2, #0]
 8009be6:	e008      	b.n	8009bfa <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	015a      	lsls	r2, r3, #5
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	4413      	add	r3, r2
 8009bf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	015a      	lsls	r2, r3, #5
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	4413      	add	r3, r2
 8009c02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c06:	461a      	mov	r2, r3
 8009c08:	2300      	movs	r3, #0
 8009c0a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	015a      	lsls	r2, r3, #5
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	4413      	add	r3, r2
 8009c14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c18:	461a      	mov	r2, r3
 8009c1a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009c1e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	3301      	adds	r3, #1
 8009c24:	613b      	str	r3, [r7, #16]
 8009c26:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d3b5      	bcc.n	8009b9e <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c38:	691b      	ldr	r3, [r3, #16]
 8009c3a:	68fa      	ldr	r2, [r7, #12]
 8009c3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009c40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c44:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009c52:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009c54:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d105      	bne.n	8009c68 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	699b      	ldr	r3, [r3, #24]
 8009c60:	f043 0210 	orr.w	r2, r3, #16
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	699a      	ldr	r2, [r3, #24]
 8009c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8009cac <USB_DevInit+0x2d8>)
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009c74:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d005      	beq.n	8009c88 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	699b      	ldr	r3, [r3, #24]
 8009c80:	f043 0208 	orr.w	r2, r3, #8
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009c88:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d105      	bne.n	8009c9c <USB_DevInit+0x2c8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	699a      	ldr	r2, [r3, #24]
 8009c94:	4b06      	ldr	r3, [pc, #24]	@ (8009cb0 <USB_DevInit+0x2dc>)
 8009c96:	4313      	orrs	r3, r2
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3718      	adds	r7, #24
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ca8:	b004      	add	sp, #16
 8009caa:	4770      	bx	lr
 8009cac:	803c3800 	.word	0x803c3800
 8009cb0:	40000004 	.word	0x40000004

08009cb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009cce:	d901      	bls.n	8009cd4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009cd0:	2303      	movs	r3, #3
 8009cd2:	e01b      	b.n	8009d0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	691b      	ldr	r3, [r3, #16]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	daf2      	bge.n	8009cc2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	019b      	lsls	r3, r3, #6
 8009ce4:	f043 0220 	orr.w	r2, r3, #32
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	3301      	adds	r3, #1
 8009cf0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009cf8:	d901      	bls.n	8009cfe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009cfa:	2303      	movs	r3, #3
 8009cfc:	e006      	b.n	8009d0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	691b      	ldr	r3, [r3, #16]
 8009d02:	f003 0320 	and.w	r3, r3, #32
 8009d06:	2b20      	cmp	r3, #32
 8009d08:	d0f0      	beq.n	8009cec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3714      	adds	r7, #20
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr

08009d18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b085      	sub	sp, #20
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009d20:	2300      	movs	r3, #0
 8009d22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	3301      	adds	r3, #1
 8009d28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009d30:	d901      	bls.n	8009d36 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009d32:	2303      	movs	r3, #3
 8009d34:	e018      	b.n	8009d68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	691b      	ldr	r3, [r3, #16]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	daf2      	bge.n	8009d24 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2210      	movs	r2, #16
 8009d46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009d54:	d901      	bls.n	8009d5a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009d56:	2303      	movs	r3, #3
 8009d58:	e006      	b.n	8009d68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	691b      	ldr	r3, [r3, #16]
 8009d5e:	f003 0310 	and.w	r3, r3, #16
 8009d62:	2b10      	cmp	r3, #16
 8009d64:	d0f0      	beq.n	8009d48 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009d66:	2300      	movs	r3, #0
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3714      	adds	r7, #20
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b085      	sub	sp, #20
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	78fb      	ldrb	r3, [r7, #3]
 8009d8e:	68f9      	ldr	r1, [r7, #12]
 8009d90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d94:	4313      	orrs	r3, r2
 8009d96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009d98:	2300      	movs	r3, #0
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3714      	adds	r7, #20
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr

08009da6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009da6:	b480      	push	{r7}
 8009da8:	b087      	sub	sp, #28
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	f003 0306 	and.w	r3, r3, #6
 8009dbe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d102      	bne.n	8009dcc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	75fb      	strb	r3, [r7, #23]
 8009dca:	e00a      	b.n	8009de2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	d002      	beq.n	8009dd8 <USB_GetDevSpeed+0x32>
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2b06      	cmp	r3, #6
 8009dd6:	d102      	bne.n	8009dde <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009dd8:	2302      	movs	r3, #2
 8009dda:	75fb      	strb	r3, [r7, #23]
 8009ddc:	e001      	b.n	8009de2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009dde:	230f      	movs	r3, #15
 8009de0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	371c      	adds	r7, #28
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b085      	sub	sp, #20
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	785b      	ldrb	r3, [r3, #1]
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d139      	bne.n	8009e80 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e12:	69da      	ldr	r2, [r3, #28]
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	f003 030f 	and.w	r3, r3, #15
 8009e1c:	2101      	movs	r1, #1
 8009e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	68f9      	ldr	r1, [r7, #12]
 8009e26:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	015a      	lsls	r2, r3, #5
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	4413      	add	r3, r2
 8009e36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d153      	bne.n	8009eec <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	015a      	lsls	r2, r3, #5
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	791b      	ldrb	r3, [r3, #4]
 8009e5e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009e60:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	059b      	lsls	r3, r3, #22
 8009e66:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009e68:	431a      	orrs	r2, r3
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	0159      	lsls	r1, r3, #5
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	440b      	add	r3, r1
 8009e72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e76:	4619      	mov	r1, r3
 8009e78:	4b20      	ldr	r3, [pc, #128]	@ (8009efc <USB_ActivateEndpoint+0x10c>)
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	600b      	str	r3, [r1, #0]
 8009e7e:	e035      	b.n	8009eec <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e86:	69da      	ldr	r2, [r3, #28]
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	f003 030f 	and.w	r3, r3, #15
 8009e90:	2101      	movs	r1, #1
 8009e92:	fa01 f303 	lsl.w	r3, r1, r3
 8009e96:	041b      	lsls	r3, r3, #16
 8009e98:	68f9      	ldr	r1, [r7, #12]
 8009e9a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	015a      	lsls	r2, r3, #5
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	4413      	add	r3, r2
 8009eaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d119      	bne.n	8009eec <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	015a      	lsls	r2, r3, #5
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	4413      	add	r3, r2
 8009ec0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	791b      	ldrb	r3, [r3, #4]
 8009ed2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009ed4:	430b      	orrs	r3, r1
 8009ed6:	431a      	orrs	r2, r3
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	0159      	lsls	r1, r3, #5
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	440b      	add	r3, r1
 8009ee0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	4b05      	ldr	r3, [pc, #20]	@ (8009efc <USB_ActivateEndpoint+0x10c>)
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3714      	adds	r7, #20
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	10008000 	.word	0x10008000

08009f00 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b085      	sub	sp, #20
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	785b      	ldrb	r3, [r3, #1]
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d161      	bne.n	8009fe0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	015a      	lsls	r2, r3, #5
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	4413      	add	r3, r2
 8009f24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f32:	d11f      	bne.n	8009f74 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	015a      	lsls	r2, r3, #5
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	4413      	add	r3, r2
 8009f3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	68ba      	ldr	r2, [r7, #8]
 8009f44:	0151      	lsls	r1, r2, #5
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	440a      	add	r2, r1
 8009f4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f4e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009f52:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	015a      	lsls	r2, r3, #5
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	68ba      	ldr	r2, [r7, #8]
 8009f64:	0151      	lsls	r1, r2, #5
 8009f66:	68fa      	ldr	r2, [r7, #12]
 8009f68:	440a      	add	r2, r1
 8009f6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009f72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	f003 030f 	and.w	r3, r3, #15
 8009f84:	2101      	movs	r1, #1
 8009f86:	fa01 f303 	lsl.w	r3, r1, r3
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	43db      	mvns	r3, r3
 8009f8e:	68f9      	ldr	r1, [r7, #12]
 8009f90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f94:	4013      	ands	r3, r2
 8009f96:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f9e:	69da      	ldr	r2, [r3, #28]
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	f003 030f 	and.w	r3, r3, #15
 8009fa8:	2101      	movs	r1, #1
 8009faa:	fa01 f303 	lsl.w	r3, r1, r3
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	43db      	mvns	r3, r3
 8009fb2:	68f9      	ldr	r1, [r7, #12]
 8009fb4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009fb8:	4013      	ands	r3, r2
 8009fba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	015a      	lsls	r2, r3, #5
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	0159      	lsls	r1, r3, #5
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	440b      	add	r3, r1
 8009fd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	4b35      	ldr	r3, [pc, #212]	@ (800a0b0 <USB_DeactivateEndpoint+0x1b0>)
 8009fda:	4013      	ands	r3, r2
 8009fdc:	600b      	str	r3, [r1, #0]
 8009fde:	e060      	b.n	800a0a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	015a      	lsls	r2, r3, #5
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ff6:	d11f      	bne.n	800a038 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	015a      	lsls	r2, r3, #5
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	4413      	add	r3, r2
 800a000:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	68ba      	ldr	r2, [r7, #8]
 800a008:	0151      	lsls	r1, r2, #5
 800a00a:	68fa      	ldr	r2, [r7, #12]
 800a00c:	440a      	add	r2, r1
 800a00e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a012:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a016:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	015a      	lsls	r2, r3, #5
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	4413      	add	r3, r2
 800a020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	68ba      	ldr	r2, [r7, #8]
 800a028:	0151      	lsls	r1, r2, #5
 800a02a:	68fa      	ldr	r2, [r7, #12]
 800a02c:	440a      	add	r2, r1
 800a02e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a032:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a036:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a03e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	f003 030f 	and.w	r3, r3, #15
 800a048:	2101      	movs	r1, #1
 800a04a:	fa01 f303 	lsl.w	r3, r1, r3
 800a04e:	041b      	lsls	r3, r3, #16
 800a050:	43db      	mvns	r3, r3
 800a052:	68f9      	ldr	r1, [r7, #12]
 800a054:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a058:	4013      	ands	r3, r2
 800a05a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a062:	69da      	ldr	r2, [r3, #28]
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	f003 030f 	and.w	r3, r3, #15
 800a06c:	2101      	movs	r1, #1
 800a06e:	fa01 f303 	lsl.w	r3, r1, r3
 800a072:	041b      	lsls	r3, r3, #16
 800a074:	43db      	mvns	r3, r3
 800a076:	68f9      	ldr	r1, [r7, #12]
 800a078:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a07c:	4013      	ands	r3, r2
 800a07e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	015a      	lsls	r2, r3, #5
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	4413      	add	r3, r2
 800a088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	0159      	lsls	r1, r3, #5
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	440b      	add	r3, r1
 800a096:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a09a:	4619      	mov	r1, r3
 800a09c:	4b05      	ldr	r3, [pc, #20]	@ (800a0b4 <USB_DeactivateEndpoint+0x1b4>)
 800a09e:	4013      	ands	r3, r2
 800a0a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a0a2:	2300      	movs	r3, #0
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3714      	adds	r7, #20
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr
 800a0b0:	ec337800 	.word	0xec337800
 800a0b4:	eff37800 	.word	0xeff37800

0800a0b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b08a      	sub	sp, #40	@ 0x28
 800a0bc:	af02      	add	r7, sp, #8
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	4613      	mov	r3, r2
 800a0c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	785b      	ldrb	r3, [r3, #1]
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	f040 8181 	bne.w	800a3dc <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d132      	bne.n	800a148 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a0e2:	69bb      	ldr	r3, [r7, #24]
 800a0e4:	015a      	lsls	r2, r3, #5
 800a0e6:	69fb      	ldr	r3, [r7, #28]
 800a0e8:	4413      	add	r3, r2
 800a0ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0ee:	691a      	ldr	r2, [r3, #16]
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	0159      	lsls	r1, r3, #5
 800a0f4:	69fb      	ldr	r3, [r7, #28]
 800a0f6:	440b      	add	r3, r1
 800a0f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	4ba5      	ldr	r3, [pc, #660]	@ (800a394 <USB_EPStartXfer+0x2dc>)
 800a100:	4013      	ands	r3, r2
 800a102:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a104:	69bb      	ldr	r3, [r7, #24]
 800a106:	015a      	lsls	r2, r3, #5
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	4413      	add	r3, r2
 800a10c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a110:	691b      	ldr	r3, [r3, #16]
 800a112:	69ba      	ldr	r2, [r7, #24]
 800a114:	0151      	lsls	r1, r2, #5
 800a116:	69fa      	ldr	r2, [r7, #28]
 800a118:	440a      	add	r2, r1
 800a11a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a11e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a122:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a124:	69bb      	ldr	r3, [r7, #24]
 800a126:	015a      	lsls	r2, r3, #5
 800a128:	69fb      	ldr	r3, [r7, #28]
 800a12a:	4413      	add	r3, r2
 800a12c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a130:	691a      	ldr	r2, [r3, #16]
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	0159      	lsls	r1, r3, #5
 800a136:	69fb      	ldr	r3, [r7, #28]
 800a138:	440b      	add	r3, r1
 800a13a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a13e:	4619      	mov	r1, r3
 800a140:	4b95      	ldr	r3, [pc, #596]	@ (800a398 <USB_EPStartXfer+0x2e0>)
 800a142:	4013      	ands	r3, r2
 800a144:	610b      	str	r3, [r1, #16]
 800a146:	e092      	b.n	800a26e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a148:	69bb      	ldr	r3, [r7, #24]
 800a14a:	015a      	lsls	r2, r3, #5
 800a14c:	69fb      	ldr	r3, [r7, #28]
 800a14e:	4413      	add	r3, r2
 800a150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a154:	691a      	ldr	r2, [r3, #16]
 800a156:	69bb      	ldr	r3, [r7, #24]
 800a158:	0159      	lsls	r1, r3, #5
 800a15a:	69fb      	ldr	r3, [r7, #28]
 800a15c:	440b      	add	r3, r1
 800a15e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a162:	4619      	mov	r1, r3
 800a164:	4b8c      	ldr	r3, [pc, #560]	@ (800a398 <USB_EPStartXfer+0x2e0>)
 800a166:	4013      	ands	r3, r2
 800a168:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	015a      	lsls	r2, r3, #5
 800a16e:	69fb      	ldr	r3, [r7, #28]
 800a170:	4413      	add	r3, r2
 800a172:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a176:	691a      	ldr	r2, [r3, #16]
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	0159      	lsls	r1, r3, #5
 800a17c:	69fb      	ldr	r3, [r7, #28]
 800a17e:	440b      	add	r3, r1
 800a180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a184:	4619      	mov	r1, r3
 800a186:	4b83      	ldr	r3, [pc, #524]	@ (800a394 <USB_EPStartXfer+0x2dc>)
 800a188:	4013      	ands	r3, r2
 800a18a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d11a      	bne.n	800a1c8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	691a      	ldr	r2, [r3, #16]
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	689b      	ldr	r3, [r3, #8]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d903      	bls.n	800a1a6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	689a      	ldr	r2, [r3, #8]
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	015a      	lsls	r2, r3, #5
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1b2:	691b      	ldr	r3, [r3, #16]
 800a1b4:	69ba      	ldr	r2, [r7, #24]
 800a1b6:	0151      	lsls	r1, r2, #5
 800a1b8:	69fa      	ldr	r2, [r7, #28]
 800a1ba:	440a      	add	r2, r1
 800a1bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a1c4:	6113      	str	r3, [r2, #16]
 800a1c6:	e01b      	b.n	800a200 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	015a      	lsls	r2, r3, #5
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	4413      	add	r3, r2
 800a1d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1d4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	6919      	ldr	r1, [r3, #16]
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	440b      	add	r3, r1
 800a1e0:	1e59      	subs	r1, r3, #1
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	689b      	ldr	r3, [r3, #8]
 800a1e6:	fbb1 f3f3 	udiv	r3, r1, r3
 800a1ea:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a1ec:	4b6b      	ldr	r3, [pc, #428]	@ (800a39c <USB_EPStartXfer+0x2e4>)
 800a1ee:	400b      	ands	r3, r1
 800a1f0:	69b9      	ldr	r1, [r7, #24]
 800a1f2:	0148      	lsls	r0, r1, #5
 800a1f4:	69f9      	ldr	r1, [r7, #28]
 800a1f6:	4401      	add	r1, r0
 800a1f8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	015a      	lsls	r2, r3, #5
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	4413      	add	r3, r2
 800a208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a20c:	691a      	ldr	r2, [r3, #16]
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	691b      	ldr	r3, [r3, #16]
 800a212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a216:	69b9      	ldr	r1, [r7, #24]
 800a218:	0148      	lsls	r0, r1, #5
 800a21a:	69f9      	ldr	r1, [r7, #28]
 800a21c:	4401      	add	r1, r0
 800a21e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a222:	4313      	orrs	r3, r2
 800a224:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	791b      	ldrb	r3, [r3, #4]
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d11f      	bne.n	800a26e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a22e:	69bb      	ldr	r3, [r7, #24]
 800a230:	015a      	lsls	r2, r3, #5
 800a232:	69fb      	ldr	r3, [r7, #28]
 800a234:	4413      	add	r3, r2
 800a236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a23a:	691b      	ldr	r3, [r3, #16]
 800a23c:	69ba      	ldr	r2, [r7, #24]
 800a23e:	0151      	lsls	r1, r2, #5
 800a240:	69fa      	ldr	r2, [r7, #28]
 800a242:	440a      	add	r2, r1
 800a244:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a248:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a24c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a24e:	69bb      	ldr	r3, [r7, #24]
 800a250:	015a      	lsls	r2, r3, #5
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	4413      	add	r3, r2
 800a256:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a25a:	691b      	ldr	r3, [r3, #16]
 800a25c:	69ba      	ldr	r2, [r7, #24]
 800a25e:	0151      	lsls	r1, r2, #5
 800a260:	69fa      	ldr	r2, [r7, #28]
 800a262:	440a      	add	r2, r1
 800a264:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a268:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a26c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a26e:	79fb      	ldrb	r3, [r7, #7]
 800a270:	2b01      	cmp	r3, #1
 800a272:	d14b      	bne.n	800a30c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	69db      	ldr	r3, [r3, #28]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d009      	beq.n	800a290 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	015a      	lsls	r2, r3, #5
 800a280:	69fb      	ldr	r3, [r7, #28]
 800a282:	4413      	add	r3, r2
 800a284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a288:	461a      	mov	r2, r3
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	69db      	ldr	r3, [r3, #28]
 800a28e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	791b      	ldrb	r3, [r3, #4]
 800a294:	2b01      	cmp	r3, #1
 800a296:	d128      	bne.n	800a2ea <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a298:	69fb      	ldr	r3, [r7, #28]
 800a29a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a29e:	689b      	ldr	r3, [r3, #8]
 800a2a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d110      	bne.n	800a2ca <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a2a8:	69bb      	ldr	r3, [r7, #24]
 800a2aa:	015a      	lsls	r2, r3, #5
 800a2ac:	69fb      	ldr	r3, [r7, #28]
 800a2ae:	4413      	add	r3, r2
 800a2b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	69ba      	ldr	r2, [r7, #24]
 800a2b8:	0151      	lsls	r1, r2, #5
 800a2ba:	69fa      	ldr	r2, [r7, #28]
 800a2bc:	440a      	add	r2, r1
 800a2be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2c2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a2c6:	6013      	str	r3, [r2, #0]
 800a2c8:	e00f      	b.n	800a2ea <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	015a      	lsls	r2, r3, #5
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	69ba      	ldr	r2, [r7, #24]
 800a2da:	0151      	lsls	r1, r2, #5
 800a2dc:	69fa      	ldr	r2, [r7, #28]
 800a2de:	440a      	add	r2, r1
 800a2e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a2e8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	015a      	lsls	r2, r3, #5
 800a2ee:	69fb      	ldr	r3, [r7, #28]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	69ba      	ldr	r2, [r7, #24]
 800a2fa:	0151      	lsls	r1, r2, #5
 800a2fc:	69fa      	ldr	r2, [r7, #28]
 800a2fe:	440a      	add	r2, r1
 800a300:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a304:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a308:	6013      	str	r3, [r2, #0]
 800a30a:	e16a      	b.n	800a5e2 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a30c:	69bb      	ldr	r3, [r7, #24]
 800a30e:	015a      	lsls	r2, r3, #5
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	4413      	add	r3, r2
 800a314:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	69ba      	ldr	r2, [r7, #24]
 800a31c:	0151      	lsls	r1, r2, #5
 800a31e:	69fa      	ldr	r2, [r7, #28]
 800a320:	440a      	add	r2, r1
 800a322:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a326:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a32a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	791b      	ldrb	r3, [r3, #4]
 800a330:	2b01      	cmp	r3, #1
 800a332:	d015      	beq.n	800a360 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	691b      	ldr	r3, [r3, #16]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	f000 8152 	beq.w	800a5e2 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a344:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	f003 030f 	and.w	r3, r3, #15
 800a34e:	2101      	movs	r1, #1
 800a350:	fa01 f303 	lsl.w	r3, r1, r3
 800a354:	69f9      	ldr	r1, [r7, #28]
 800a356:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a35a:	4313      	orrs	r3, r2
 800a35c:	634b      	str	r3, [r1, #52]	@ 0x34
 800a35e:	e140      	b.n	800a5e2 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a360:	69fb      	ldr	r3, [r7, #28]
 800a362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d117      	bne.n	800a3a0 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a370:	69bb      	ldr	r3, [r7, #24]
 800a372:	015a      	lsls	r2, r3, #5
 800a374:	69fb      	ldr	r3, [r7, #28]
 800a376:	4413      	add	r3, r2
 800a378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	69ba      	ldr	r2, [r7, #24]
 800a380:	0151      	lsls	r1, r2, #5
 800a382:	69fa      	ldr	r2, [r7, #28]
 800a384:	440a      	add	r2, r1
 800a386:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a38a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a38e:	6013      	str	r3, [r2, #0]
 800a390:	e016      	b.n	800a3c0 <USB_EPStartXfer+0x308>
 800a392:	bf00      	nop
 800a394:	e007ffff 	.word	0xe007ffff
 800a398:	fff80000 	.word	0xfff80000
 800a39c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	015a      	lsls	r2, r3, #5
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	4413      	add	r3, r2
 800a3a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	69ba      	ldr	r2, [r7, #24]
 800a3b0:	0151      	lsls	r1, r2, #5
 800a3b2:	69fa      	ldr	r2, [r7, #28]
 800a3b4:	440a      	add	r2, r1
 800a3b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3be:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	68d9      	ldr	r1, [r3, #12]
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	781a      	ldrb	r2, [r3, #0]
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	691b      	ldr	r3, [r3, #16]
 800a3cc:	b298      	uxth	r0, r3
 800a3ce:	79fb      	ldrb	r3, [r7, #7]
 800a3d0:	9300      	str	r3, [sp, #0]
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	68f8      	ldr	r0, [r7, #12]
 800a3d6:	f000 f9b9 	bl	800a74c <USB_WritePacket>
 800a3da:	e102      	b.n	800a5e2 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	015a      	lsls	r2, r3, #5
 800a3e0:	69fb      	ldr	r3, [r7, #28]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3e8:	691a      	ldr	r2, [r3, #16]
 800a3ea:	69bb      	ldr	r3, [r7, #24]
 800a3ec:	0159      	lsls	r1, r3, #5
 800a3ee:	69fb      	ldr	r3, [r7, #28]
 800a3f0:	440b      	add	r3, r1
 800a3f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	4b7c      	ldr	r3, [pc, #496]	@ (800a5ec <USB_EPStartXfer+0x534>)
 800a3fa:	4013      	ands	r3, r2
 800a3fc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a3fe:	69bb      	ldr	r3, [r7, #24]
 800a400:	015a      	lsls	r2, r3, #5
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	4413      	add	r3, r2
 800a406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a40a:	691a      	ldr	r2, [r3, #16]
 800a40c:	69bb      	ldr	r3, [r7, #24]
 800a40e:	0159      	lsls	r1, r3, #5
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	440b      	add	r3, r1
 800a414:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a418:	4619      	mov	r1, r3
 800a41a:	4b75      	ldr	r3, [pc, #468]	@ (800a5f0 <USB_EPStartXfer+0x538>)
 800a41c:	4013      	ands	r3, r2
 800a41e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800a420:	69bb      	ldr	r3, [r7, #24]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d12f      	bne.n	800a486 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	691b      	ldr	r3, [r3, #16]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d003      	beq.n	800a436 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	689a      	ldr	r2, [r3, #8]
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	689a      	ldr	r2, [r3, #8]
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a43e:	69bb      	ldr	r3, [r7, #24]
 800a440:	015a      	lsls	r2, r3, #5
 800a442:	69fb      	ldr	r3, [r7, #28]
 800a444:	4413      	add	r3, r2
 800a446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a44a:	691a      	ldr	r2, [r3, #16]
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	6a1b      	ldr	r3, [r3, #32]
 800a450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a454:	69b9      	ldr	r1, [r7, #24]
 800a456:	0148      	lsls	r0, r1, #5
 800a458:	69f9      	ldr	r1, [r7, #28]
 800a45a:	4401      	add	r1, r0
 800a45c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a460:	4313      	orrs	r3, r2
 800a462:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a464:	69bb      	ldr	r3, [r7, #24]
 800a466:	015a      	lsls	r2, r3, #5
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	4413      	add	r3, r2
 800a46c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a470:	691b      	ldr	r3, [r3, #16]
 800a472:	69ba      	ldr	r2, [r7, #24]
 800a474:	0151      	lsls	r1, r2, #5
 800a476:	69fa      	ldr	r2, [r7, #28]
 800a478:	440a      	add	r2, r1
 800a47a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a47e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a482:	6113      	str	r3, [r2, #16]
 800a484:	e05f      	b.n	800a546 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d123      	bne.n	800a4d6 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	015a      	lsls	r2, r3, #5
 800a492:	69fb      	ldr	r3, [r7, #28]
 800a494:	4413      	add	r3, r2
 800a496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a49a:	691a      	ldr	r2, [r3, #16]
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4a4:	69b9      	ldr	r1, [r7, #24]
 800a4a6:	0148      	lsls	r0, r1, #5
 800a4a8:	69f9      	ldr	r1, [r7, #28]
 800a4aa:	4401      	add	r1, r0
 800a4ac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a4b4:	69bb      	ldr	r3, [r7, #24]
 800a4b6:	015a      	lsls	r2, r3, #5
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	4413      	add	r3, r2
 800a4bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4c0:	691b      	ldr	r3, [r3, #16]
 800a4c2:	69ba      	ldr	r2, [r7, #24]
 800a4c4:	0151      	lsls	r1, r2, #5
 800a4c6:	69fa      	ldr	r2, [r7, #28]
 800a4c8:	440a      	add	r2, r1
 800a4ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a4d2:	6113      	str	r3, [r2, #16]
 800a4d4:	e037      	b.n	800a546 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	691a      	ldr	r2, [r3, #16]
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	689b      	ldr	r3, [r3, #8]
 800a4de:	4413      	add	r3, r2
 800a4e0:	1e5a      	subs	r2, r3, #1
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4ea:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	8afa      	ldrh	r2, [r7, #22]
 800a4f2:	fb03 f202 	mul.w	r2, r3, r2
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	015a      	lsls	r2, r3, #5
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	4413      	add	r3, r2
 800a502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a506:	691a      	ldr	r2, [r3, #16]
 800a508:	8afb      	ldrh	r3, [r7, #22]
 800a50a:	04d9      	lsls	r1, r3, #19
 800a50c:	4b39      	ldr	r3, [pc, #228]	@ (800a5f4 <USB_EPStartXfer+0x53c>)
 800a50e:	400b      	ands	r3, r1
 800a510:	69b9      	ldr	r1, [r7, #24]
 800a512:	0148      	lsls	r0, r1, #5
 800a514:	69f9      	ldr	r1, [r7, #28]
 800a516:	4401      	add	r1, r0
 800a518:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a51c:	4313      	orrs	r3, r2
 800a51e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	015a      	lsls	r2, r3, #5
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	4413      	add	r3, r2
 800a528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a52c:	691a      	ldr	r2, [r3, #16]
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	6a1b      	ldr	r3, [r3, #32]
 800a532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a536:	69b9      	ldr	r1, [r7, #24]
 800a538:	0148      	lsls	r0, r1, #5
 800a53a:	69f9      	ldr	r1, [r7, #28]
 800a53c:	4401      	add	r1, r0
 800a53e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a542:	4313      	orrs	r3, r2
 800a544:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a546:	79fb      	ldrb	r3, [r7, #7]
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d10d      	bne.n	800a568 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d009      	beq.n	800a568 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	68d9      	ldr	r1, [r3, #12]
 800a558:	69bb      	ldr	r3, [r7, #24]
 800a55a:	015a      	lsls	r2, r3, #5
 800a55c:	69fb      	ldr	r3, [r7, #28]
 800a55e:	4413      	add	r3, r2
 800a560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a564:	460a      	mov	r2, r1
 800a566:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	791b      	ldrb	r3, [r3, #4]
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d128      	bne.n	800a5c2 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a576:	689b      	ldr	r3, [r3, #8]
 800a578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d110      	bne.n	800a5a2 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	015a      	lsls	r2, r3, #5
 800a584:	69fb      	ldr	r3, [r7, #28]
 800a586:	4413      	add	r3, r2
 800a588:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	69ba      	ldr	r2, [r7, #24]
 800a590:	0151      	lsls	r1, r2, #5
 800a592:	69fa      	ldr	r2, [r7, #28]
 800a594:	440a      	add	r2, r1
 800a596:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a59a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a59e:	6013      	str	r3, [r2, #0]
 800a5a0:	e00f      	b.n	800a5c2 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	015a      	lsls	r2, r3, #5
 800a5a6:	69fb      	ldr	r3, [r7, #28]
 800a5a8:	4413      	add	r3, r2
 800a5aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	69ba      	ldr	r2, [r7, #24]
 800a5b2:	0151      	lsls	r1, r2, #5
 800a5b4:	69fa      	ldr	r2, [r7, #28]
 800a5b6:	440a      	add	r2, r1
 800a5b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a5c0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a5c2:	69bb      	ldr	r3, [r7, #24]
 800a5c4:	015a      	lsls	r2, r3, #5
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	69ba      	ldr	r2, [r7, #24]
 800a5d2:	0151      	lsls	r1, r2, #5
 800a5d4:	69fa      	ldr	r2, [r7, #28]
 800a5d6:	440a      	add	r2, r1
 800a5d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5dc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a5e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a5e2:	2300      	movs	r3, #0
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3720      	adds	r7, #32
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	fff80000 	.word	0xfff80000
 800a5f0:	e007ffff 	.word	0xe007ffff
 800a5f4:	1ff80000 	.word	0x1ff80000

0800a5f8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b087      	sub	sp, #28
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a602:	2300      	movs	r3, #0
 800a604:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a606:	2300      	movs	r3, #0
 800a608:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	785b      	ldrb	r3, [r3, #1]
 800a612:	2b01      	cmp	r3, #1
 800a614:	d14a      	bne.n	800a6ac <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	015a      	lsls	r2, r3, #5
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	4413      	add	r3, r2
 800a620:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a62a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a62e:	f040 8086 	bne.w	800a73e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	015a      	lsls	r2, r3, #5
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	4413      	add	r3, r2
 800a63c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	683a      	ldr	r2, [r7, #0]
 800a644:	7812      	ldrb	r2, [r2, #0]
 800a646:	0151      	lsls	r1, r2, #5
 800a648:	693a      	ldr	r2, [r7, #16]
 800a64a:	440a      	add	r2, r1
 800a64c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a650:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a654:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	015a      	lsls	r2, r3, #5
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	4413      	add	r3, r2
 800a660:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	683a      	ldr	r2, [r7, #0]
 800a668:	7812      	ldrb	r2, [r2, #0]
 800a66a:	0151      	lsls	r1, r2, #5
 800a66c:	693a      	ldr	r2, [r7, #16]
 800a66e:	440a      	add	r2, r1
 800a670:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a674:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a678:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	3301      	adds	r3, #1
 800a67e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a686:	4293      	cmp	r3, r2
 800a688:	d902      	bls.n	800a690 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a68a:	2301      	movs	r3, #1
 800a68c:	75fb      	strb	r3, [r7, #23]
          break;
 800a68e:	e056      	b.n	800a73e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	015a      	lsls	r2, r3, #5
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	4413      	add	r3, r2
 800a69a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a6a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a6a8:	d0e7      	beq.n	800a67a <USB_EPStopXfer+0x82>
 800a6aa:	e048      	b.n	800a73e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	015a      	lsls	r2, r3, #5
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a6c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a6c4:	d13b      	bne.n	800a73e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	015a      	lsls	r2, r3, #5
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	683a      	ldr	r2, [r7, #0]
 800a6d8:	7812      	ldrb	r2, [r2, #0]
 800a6da:	0151      	lsls	r1, r2, #5
 800a6dc:	693a      	ldr	r2, [r7, #16]
 800a6de:	440a      	add	r2, r1
 800a6e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6e4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a6e8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	015a      	lsls	r2, r3, #5
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	4413      	add	r3, r2
 800a6f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	683a      	ldr	r2, [r7, #0]
 800a6fc:	7812      	ldrb	r2, [r2, #0]
 800a6fe:	0151      	lsls	r1, r2, #5
 800a700:	693a      	ldr	r2, [r7, #16]
 800a702:	440a      	add	r2, r1
 800a704:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a708:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a70c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	3301      	adds	r3, #1
 800a712:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d902      	bls.n	800a724 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a71e:	2301      	movs	r3, #1
 800a720:	75fb      	strb	r3, [r7, #23]
          break;
 800a722:	e00c      	b.n	800a73e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	015a      	lsls	r2, r3, #5
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	4413      	add	r3, r2
 800a72e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a738:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a73c:	d0e7      	beq.n	800a70e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a73e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a740:	4618      	mov	r0, r3
 800a742:	371c      	adds	r7, #28
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr

0800a74c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b089      	sub	sp, #36	@ 0x24
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	4611      	mov	r1, r2
 800a758:	461a      	mov	r2, r3
 800a75a:	460b      	mov	r3, r1
 800a75c:	71fb      	strb	r3, [r7, #7]
 800a75e:	4613      	mov	r3, r2
 800a760:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a76a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d123      	bne.n	800a7ba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a772:	88bb      	ldrh	r3, [r7, #4]
 800a774:	3303      	adds	r3, #3
 800a776:	089b      	lsrs	r3, r3, #2
 800a778:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a77a:	2300      	movs	r3, #0
 800a77c:	61bb      	str	r3, [r7, #24]
 800a77e:	e018      	b.n	800a7b2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a780:	79fb      	ldrb	r3, [r7, #7]
 800a782:	031a      	lsls	r2, r3, #12
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	4413      	add	r3, r2
 800a788:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a78c:	461a      	mov	r2, r3
 800a78e:	69fb      	ldr	r3, [r7, #28]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	3301      	adds	r3, #1
 800a798:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a79a:	69fb      	ldr	r3, [r7, #28]
 800a79c:	3301      	adds	r3, #1
 800a79e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a7a0:	69fb      	ldr	r3, [r7, #28]
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a7a6:	69fb      	ldr	r3, [r7, #28]
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a7ac:	69bb      	ldr	r3, [r7, #24]
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	61bb      	str	r3, [r7, #24]
 800a7b2:	69ba      	ldr	r2, [r7, #24]
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d3e2      	bcc.n	800a780 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a7ba:	2300      	movs	r3, #0
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3724      	adds	r7, #36	@ 0x24
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b08b      	sub	sp, #44	@ 0x2c
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	4613      	mov	r3, r2
 800a7d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a7de:	88fb      	ldrh	r3, [r7, #6]
 800a7e0:	089b      	lsrs	r3, r3, #2
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a7e6:	88fb      	ldrh	r3, [r7, #6]
 800a7e8:	f003 0303 	and.w	r3, r3, #3
 800a7ec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	623b      	str	r3, [r7, #32]
 800a7f2:	e014      	b.n	800a81e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a7f4:	69bb      	ldr	r3, [r7, #24]
 800a7f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7fe:	601a      	str	r2, [r3, #0]
    pDest++;
 800a800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a802:	3301      	adds	r3, #1
 800a804:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a808:	3301      	adds	r3, #1
 800a80a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a80c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a80e:	3301      	adds	r3, #1
 800a810:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a814:	3301      	adds	r3, #1
 800a816:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a818:	6a3b      	ldr	r3, [r7, #32]
 800a81a:	3301      	adds	r3, #1
 800a81c:	623b      	str	r3, [r7, #32]
 800a81e:	6a3a      	ldr	r2, [r7, #32]
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	429a      	cmp	r2, r3
 800a824:	d3e6      	bcc.n	800a7f4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a826:	8bfb      	ldrh	r3, [r7, #30]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d01e      	beq.n	800a86a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a82c:	2300      	movs	r3, #0
 800a82e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a830:	69bb      	ldr	r3, [r7, #24]
 800a832:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a836:	461a      	mov	r2, r3
 800a838:	f107 0310 	add.w	r3, r7, #16
 800a83c:	6812      	ldr	r2, [r2, #0]
 800a83e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a840:	693a      	ldr	r2, [r7, #16]
 800a842:	6a3b      	ldr	r3, [r7, #32]
 800a844:	b2db      	uxtb	r3, r3
 800a846:	00db      	lsls	r3, r3, #3
 800a848:	fa22 f303 	lsr.w	r3, r2, r3
 800a84c:	b2da      	uxtb	r2, r3
 800a84e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a850:	701a      	strb	r2, [r3, #0]
      i++;
 800a852:	6a3b      	ldr	r3, [r7, #32]
 800a854:	3301      	adds	r3, #1
 800a856:	623b      	str	r3, [r7, #32]
      pDest++;
 800a858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a85a:	3301      	adds	r3, #1
 800a85c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a85e:	8bfb      	ldrh	r3, [r7, #30]
 800a860:	3b01      	subs	r3, #1
 800a862:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a864:	8bfb      	ldrh	r3, [r7, #30]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d1ea      	bne.n	800a840 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	372c      	adds	r7, #44	@ 0x2c
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a878:	b480      	push	{r7}
 800a87a:	b085      	sub	sp, #20
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	785b      	ldrb	r3, [r3, #1]
 800a890:	2b01      	cmp	r3, #1
 800a892:	d12c      	bne.n	800a8ee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	015a      	lsls	r2, r3, #5
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	4413      	add	r3, r2
 800a89c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	db12      	blt.n	800a8cc <USB_EPSetStall+0x54>
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d00f      	beq.n	800a8cc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	015a      	lsls	r2, r3, #5
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	4413      	add	r3, r2
 800a8b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	68ba      	ldr	r2, [r7, #8]
 800a8bc:	0151      	lsls	r1, r2, #5
 800a8be:	68fa      	ldr	r2, [r7, #12]
 800a8c0:	440a      	add	r2, r1
 800a8c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a8ca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	015a      	lsls	r2, r3, #5
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	4413      	add	r3, r2
 800a8d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	68ba      	ldr	r2, [r7, #8]
 800a8dc:	0151      	lsls	r1, r2, #5
 800a8de:	68fa      	ldr	r2, [r7, #12]
 800a8e0:	440a      	add	r2, r1
 800a8e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a8ea:	6013      	str	r3, [r2, #0]
 800a8ec:	e02b      	b.n	800a946 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	015a      	lsls	r2, r3, #5
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	4413      	add	r3, r2
 800a8f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	db12      	blt.n	800a926 <USB_EPSetStall+0xae>
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d00f      	beq.n	800a926 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	015a      	lsls	r2, r3, #5
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	4413      	add	r3, r2
 800a90e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	68ba      	ldr	r2, [r7, #8]
 800a916:	0151      	lsls	r1, r2, #5
 800a918:	68fa      	ldr	r2, [r7, #12]
 800a91a:	440a      	add	r2, r1
 800a91c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a920:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a924:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	015a      	lsls	r2, r3, #5
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	4413      	add	r3, r2
 800a92e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	68ba      	ldr	r2, [r7, #8]
 800a936:	0151      	lsls	r1, r2, #5
 800a938:	68fa      	ldr	r2, [r7, #12]
 800a93a:	440a      	add	r2, r1
 800a93c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a940:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a944:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a946:	2300      	movs	r3, #0
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3714      	adds	r7, #20
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr

0800a954 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a954:	b480      	push	{r7}
 800a956:	b085      	sub	sp, #20
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	785b      	ldrb	r3, [r3, #1]
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d128      	bne.n	800a9c2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	015a      	lsls	r2, r3, #5
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	4413      	add	r3, r2
 800a978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	68ba      	ldr	r2, [r7, #8]
 800a980:	0151      	lsls	r1, r2, #5
 800a982:	68fa      	ldr	r2, [r7, #12]
 800a984:	440a      	add	r2, r1
 800a986:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a98a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a98e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	791b      	ldrb	r3, [r3, #4]
 800a994:	2b03      	cmp	r3, #3
 800a996:	d003      	beq.n	800a9a0 <USB_EPClearStall+0x4c>
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	791b      	ldrb	r3, [r3, #4]
 800a99c:	2b02      	cmp	r3, #2
 800a99e:	d138      	bne.n	800aa12 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	015a      	lsls	r2, r3, #5
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	4413      	add	r3, r2
 800a9a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	68ba      	ldr	r2, [r7, #8]
 800a9b0:	0151      	lsls	r1, r2, #5
 800a9b2:	68fa      	ldr	r2, [r7, #12]
 800a9b4:	440a      	add	r2, r1
 800a9b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a9be:	6013      	str	r3, [r2, #0]
 800a9c0:	e027      	b.n	800aa12 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	015a      	lsls	r2, r3, #5
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	4413      	add	r3, r2
 800a9ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	68ba      	ldr	r2, [r7, #8]
 800a9d2:	0151      	lsls	r1, r2, #5
 800a9d4:	68fa      	ldr	r2, [r7, #12]
 800a9d6:	440a      	add	r2, r1
 800a9d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9dc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a9e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	791b      	ldrb	r3, [r3, #4]
 800a9e6:	2b03      	cmp	r3, #3
 800a9e8:	d003      	beq.n	800a9f2 <USB_EPClearStall+0x9e>
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	791b      	ldrb	r3, [r3, #4]
 800a9ee:	2b02      	cmp	r3, #2
 800a9f0:	d10f      	bne.n	800aa12 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	015a      	lsls	r2, r3, #5
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	68ba      	ldr	r2, [r7, #8]
 800aa02:	0151      	lsls	r1, r2, #5
 800aa04:	68fa      	ldr	r2, [r7, #12]
 800aa06:	440a      	add	r2, r1
 800aa08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa10:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800aa12:	2300      	movs	r3, #0
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3714      	adds	r7, #20
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b085      	sub	sp, #20
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	460b      	mov	r3, r1
 800aa2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	68fa      	ldr	r2, [r7, #12]
 800aa3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa3e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800aa42:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	78fb      	ldrb	r3, [r7, #3]
 800aa4e:	011b      	lsls	r3, r3, #4
 800aa50:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800aa54:	68f9      	ldr	r1, [r7, #12]
 800aa56:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800aa5e:	2300      	movs	r3, #0
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3714      	adds	r7, #20
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b085      	sub	sp, #20
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800aa86:	f023 0303 	bic.w	r3, r3, #3
 800aa8a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	68fa      	ldr	r2, [r7, #12]
 800aa96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa9a:	f023 0302 	bic.w	r3, r3, #2
 800aa9e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aaa0:	2300      	movs	r3, #0
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3714      	adds	r7, #20
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr

0800aaae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800aaae:	b480      	push	{r7}
 800aab0:	b085      	sub	sp, #20
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800aac8:	f023 0303 	bic.w	r3, r3, #3
 800aacc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aadc:	f043 0302 	orr.w	r3, r3, #2
 800aae0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aae2:	2300      	movs	r3, #0
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3714      	adds	r7, #20
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr

0800aaf0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b085      	sub	sp, #20
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	695b      	ldr	r3, [r3, #20]
 800aafc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	699b      	ldr	r3, [r3, #24]
 800ab02:	68fa      	ldr	r2, [r7, #12]
 800ab04:	4013      	ands	r3, r2
 800ab06:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ab08:	68fb      	ldr	r3, [r7, #12]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3714      	adds	r7, #20
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr

0800ab16 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ab16:	b480      	push	{r7}
 800ab18:	b085      	sub	sp, #20
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab28:	699b      	ldr	r3, [r3, #24]
 800ab2a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab32:	69db      	ldr	r3, [r3, #28]
 800ab34:	68ba      	ldr	r2, [r7, #8]
 800ab36:	4013      	ands	r3, r2
 800ab38:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	0c1b      	lsrs	r3, r3, #16
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3714      	adds	r7, #20
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr

0800ab4a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ab4a:	b480      	push	{r7}
 800ab4c:	b085      	sub	sp, #20
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab5c:	699b      	ldr	r3, [r3, #24]
 800ab5e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab66:	69db      	ldr	r3, [r3, #28]
 800ab68:	68ba      	ldr	r2, [r7, #8]
 800ab6a:	4013      	ands	r3, r2
 800ab6c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	b29b      	uxth	r3, r3
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3714      	adds	r7, #20
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr

0800ab7e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ab7e:	b480      	push	{r7}
 800ab80:	b085      	sub	sp, #20
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
 800ab86:	460b      	mov	r3, r1
 800ab88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ab8e:	78fb      	ldrb	r3, [r7, #3]
 800ab90:	015a      	lsls	r2, r3, #5
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	4413      	add	r3, r2
 800ab96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab9a:	689b      	ldr	r3, [r3, #8]
 800ab9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aba4:	695b      	ldr	r3, [r3, #20]
 800aba6:	68ba      	ldr	r2, [r7, #8]
 800aba8:	4013      	ands	r3, r2
 800abaa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800abac:	68bb      	ldr	r3, [r7, #8]
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3714      	adds	r7, #20
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr

0800abba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800abba:	b480      	push	{r7}
 800abbc:	b087      	sub	sp, #28
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
 800abc2:	460b      	mov	r3, r1
 800abc4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abd0:	691b      	ldr	r3, [r3, #16]
 800abd2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abdc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800abde:	78fb      	ldrb	r3, [r7, #3]
 800abe0:	f003 030f 	and.w	r3, r3, #15
 800abe4:	68fa      	ldr	r2, [r7, #12]
 800abe6:	fa22 f303 	lsr.w	r3, r2, r3
 800abea:	01db      	lsls	r3, r3, #7
 800abec:	b2db      	uxtb	r3, r3
 800abee:	693a      	ldr	r2, [r7, #16]
 800abf0:	4313      	orrs	r3, r2
 800abf2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800abf4:	78fb      	ldrb	r3, [r7, #3]
 800abf6:	015a      	lsls	r2, r3, #5
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	4413      	add	r3, r2
 800abfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac00:	689b      	ldr	r3, [r3, #8]
 800ac02:	693a      	ldr	r2, [r7, #16]
 800ac04:	4013      	ands	r3, r2
 800ac06:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ac08:	68bb      	ldr	r3, [r7, #8]
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	371c      	adds	r7, #28
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac14:	4770      	bx	lr

0800ac16 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ac16:	b480      	push	{r7}
 800ac18:	b083      	sub	sp, #12
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	695b      	ldr	r3, [r3, #20]
 800ac22:	f003 0301 	and.w	r3, r3, #1
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	370c      	adds	r7, #12
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr
	...

0800ac34 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b085      	sub	sp, #20
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac46:	681a      	ldr	r2, [r3, #0]
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac4e:	4619      	mov	r1, r3
 800ac50:	4b09      	ldr	r3, [pc, #36]	@ (800ac78 <USB_ActivateSetup+0x44>)
 800ac52:	4013      	ands	r3, r2
 800ac54:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	68fa      	ldr	r2, [r7, #12]
 800ac60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac6a:	2300      	movs	r3, #0
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3714      	adds	r7, #20
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr
 800ac78:	fffff800 	.word	0xfffff800

0800ac7c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b087      	sub	sp, #28
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	460b      	mov	r3, r1
 800ac86:	607a      	str	r2, [r7, #4]
 800ac88:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	333c      	adds	r3, #60	@ 0x3c
 800ac92:	3304      	adds	r3, #4
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	4a26      	ldr	r2, [pc, #152]	@ (800ad34 <USB_EP0_OutStart+0xb8>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d90a      	bls.n	800acb6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800acac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800acb0:	d101      	bne.n	800acb6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800acb2:	2300      	movs	r3, #0
 800acb4:	e037      	b.n	800ad26 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acbc:	461a      	mov	r2, r3
 800acbe:	2300      	movs	r3, #0
 800acc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acc8:	691b      	ldr	r3, [r3, #16]
 800acca:	697a      	ldr	r2, [r7, #20]
 800accc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800acd0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800acd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acdc:	691b      	ldr	r3, [r3, #16]
 800acde:	697a      	ldr	r2, [r7, #20]
 800ace0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ace4:	f043 0318 	orr.w	r3, r3, #24
 800ace8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acf0:	691b      	ldr	r3, [r3, #16]
 800acf2:	697a      	ldr	r2, [r7, #20]
 800acf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800acf8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800acfc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800acfe:	7afb      	ldrb	r3, [r7, #11]
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d10f      	bne.n	800ad24 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	697a      	ldr	r2, [r7, #20]
 800ad1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad1e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800ad22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ad24:	2300      	movs	r3, #0
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	371c      	adds	r7, #28
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop
 800ad34:	4f54300a 	.word	0x4f54300a

0800ad38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ad40:	2300      	movs	r3, #0
 800ad42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	3301      	adds	r3, #1
 800ad48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ad50:	d901      	bls.n	800ad56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ad52:	2303      	movs	r3, #3
 800ad54:	e01b      	b.n	800ad8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	691b      	ldr	r3, [r3, #16]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	daf2      	bge.n	800ad44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	691b      	ldr	r3, [r3, #16]
 800ad66:	f043 0201 	orr.w	r2, r3, #1
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	3301      	adds	r3, #1
 800ad72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ad7a:	d901      	bls.n	800ad80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ad7c:	2303      	movs	r3, #3
 800ad7e:	e006      	b.n	800ad8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	691b      	ldr	r3, [r3, #16]
 800ad84:	f003 0301 	and.w	r3, r3, #1
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d0f0      	beq.n	800ad6e <USB_CoreReset+0x36>

  return HAL_OK;
 800ad8c:	2300      	movs	r3, #0
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3714      	adds	r7, #20
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr
	...

0800ad9c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ada0:	4904      	ldr	r1, [pc, #16]	@ (800adb4 <MX_FATFS_Init+0x18>)
 800ada2:	4805      	ldr	r0, [pc, #20]	@ (800adb8 <MX_FATFS_Init+0x1c>)
 800ada4:	f002 f9a0 	bl	800d0e8 <FATFS_LinkDriver>
 800ada8:	4603      	mov	r3, r0
 800adaa:	461a      	mov	r2, r3
 800adac:	4b03      	ldr	r3, [pc, #12]	@ (800adbc <MX_FATFS_Init+0x20>)
 800adae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800adb0:	bf00      	nop
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	200009fc 	.word	0x200009fc
 800adb8:	0800dee8 	.word	0x0800dee8
 800adbc:	200009f8 	.word	0x200009f8

0800adc0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800adc6:	2300      	movs	r3, #0
 800adc8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800adca:	f000 f879 	bl	800aec0 <BSP_SD_IsDetected>
 800adce:	4603      	mov	r3, r0
 800add0:	2b01      	cmp	r3, #1
 800add2:	d001      	beq.n	800add8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800add4:	2302      	movs	r3, #2
 800add6:	e012      	b.n	800adfe <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800add8:	480b      	ldr	r0, [pc, #44]	@ (800ae08 <BSP_SD_Init+0x48>)
 800adda:	f7fa fed7 	bl	8005b8c <HAL_SD_Init>
 800adde:	4603      	mov	r3, r0
 800ade0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ade2:	79fb      	ldrb	r3, [r7, #7]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d109      	bne.n	800adfc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ade8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800adec:	4806      	ldr	r0, [pc, #24]	@ (800ae08 <BSP_SD_Init+0x48>)
 800adee:	f7fb fcb9 	bl	8006764 <HAL_SD_ConfigWideBusOperation>
 800adf2:	4603      	mov	r3, r0
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d001      	beq.n	800adfc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800adf8:	2301      	movs	r3, #1
 800adfa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800adfc:	79fb      	ldrb	r3, [r7, #7]
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3708      	adds	r7, #8
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}
 800ae06:	bf00      	nop
 800ae08:	20000278 	.word	0x20000278

0800ae0c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b088      	sub	sp, #32
 800ae10:	af02      	add	r7, sp, #8
 800ae12:	60f8      	str	r0, [r7, #12]
 800ae14:	60b9      	str	r1, [r7, #8]
 800ae16:	607a      	str	r2, [r7, #4]
 800ae18:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	9300      	str	r3, [sp, #0]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	68ba      	ldr	r2, [r7, #8]
 800ae26:	68f9      	ldr	r1, [r7, #12]
 800ae28:	4806      	ldr	r0, [pc, #24]	@ (800ae44 <BSP_SD_ReadBlocks+0x38>)
 800ae2a:	f7fa ff67 	bl	8005cfc <HAL_SD_ReadBlocks>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d001      	beq.n	800ae38 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ae34:	2301      	movs	r3, #1
 800ae36:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ae38:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3718      	adds	r7, #24
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	20000278 	.word	0x20000278

0800ae48 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b088      	sub	sp, #32
 800ae4c:	af02      	add	r7, sp, #8
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
 800ae54:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ae56:	2300      	movs	r3, #0
 800ae58:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	9300      	str	r3, [sp, #0]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	68ba      	ldr	r2, [r7, #8]
 800ae62:	68f9      	ldr	r1, [r7, #12]
 800ae64:	4806      	ldr	r0, [pc, #24]	@ (800ae80 <BSP_SD_WriteBlocks+0x38>)
 800ae66:	f7fb f927 	bl	80060b8 <HAL_SD_WriteBlocks>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d001      	beq.n	800ae74 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ae70:	2301      	movs	r3, #1
 800ae72:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ae74:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3718      	adds	r7, #24
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	20000278 	.word	0x20000278

0800ae84 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ae88:	4805      	ldr	r0, [pc, #20]	@ (800aea0 <BSP_SD_GetCardState+0x1c>)
 800ae8a:	f7fb fd05 	bl	8006898 <HAL_SD_GetCardState>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	2b04      	cmp	r3, #4
 800ae92:	bf14      	ite	ne
 800ae94:	2301      	movne	r3, #1
 800ae96:	2300      	moveq	r3, #0
 800ae98:	b2db      	uxtb	r3, r3
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	20000278 	.word	0x20000278

0800aea4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b082      	sub	sp, #8
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800aeac:	6879      	ldr	r1, [r7, #4]
 800aeae:	4803      	ldr	r0, [pc, #12]	@ (800aebc <BSP_SD_GetCardInfo+0x18>)
 800aeb0:	f7fb fc2c 	bl	800670c <HAL_SD_GetCardInfo>
}
 800aeb4:	bf00      	nop
 800aeb6:	3708      	adds	r7, #8
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}
 800aebc:	20000278 	.word	0x20000278

0800aec0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800aec6:	2301      	movs	r3, #1
 800aec8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800aeca:	f000 f80b 	bl	800aee4 <BSP_PlatformIsDetected>
 800aece:	4603      	mov	r3, r0
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d101      	bne.n	800aed8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800aed4:	2300      	movs	r3, #0
 800aed6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800aed8:	79fb      	ldrb	r3, [r7, #7]
 800aeda:	b2db      	uxtb	r3, r3
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3708      	adds	r7, #8
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800aeea:	2301      	movs	r3, #1
 800aeec:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800aeee:	2110      	movs	r1, #16
 800aef0:	4806      	ldr	r0, [pc, #24]	@ (800af0c <BSP_PlatformIsDetected+0x28>)
 800aef2:	f7f8 f9cd 	bl	8003290 <HAL_GPIO_ReadPin>
 800aef6:	4603      	mov	r3, r0
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d001      	beq.n	800af00 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800aefc:	2300      	movs	r3, #0
 800aefe:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800af00:	79fb      	ldrb	r3, [r7, #7]
}
 800af02:	4618      	mov	r0, r3
 800af04:	3708      	adds	r7, #8
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop
 800af0c:	40020000 	.word	0x40020000

0800af10 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b082      	sub	sp, #8
 800af14:	af00      	add	r7, sp, #0
 800af16:	4603      	mov	r3, r0
 800af18:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800af1a:	4b0b      	ldr	r3, [pc, #44]	@ (800af48 <SD_CheckStatus+0x38>)
 800af1c:	2201      	movs	r2, #1
 800af1e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800af20:	f7ff ffb0 	bl	800ae84 <BSP_SD_GetCardState>
 800af24:	4603      	mov	r3, r0
 800af26:	2b00      	cmp	r3, #0
 800af28:	d107      	bne.n	800af3a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800af2a:	4b07      	ldr	r3, [pc, #28]	@ (800af48 <SD_CheckStatus+0x38>)
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	b2db      	uxtb	r3, r3
 800af30:	f023 0301 	bic.w	r3, r3, #1
 800af34:	b2da      	uxtb	r2, r3
 800af36:	4b04      	ldr	r3, [pc, #16]	@ (800af48 <SD_CheckStatus+0x38>)
 800af38:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800af3a:	4b03      	ldr	r3, [pc, #12]	@ (800af48 <SD_CheckStatus+0x38>)
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	b2db      	uxtb	r3, r3
}
 800af40:	4618      	mov	r0, r3
 800af42:	3708      	adds	r7, #8
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}
 800af48:	20000009 	.word	0x20000009

0800af4c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	4603      	mov	r3, r0
 800af54:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800af56:	4b0b      	ldr	r3, [pc, #44]	@ (800af84 <SD_initialize+0x38>)
 800af58:	2201      	movs	r2, #1
 800af5a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800af5c:	f7ff ff30 	bl	800adc0 <BSP_SD_Init>
 800af60:	4603      	mov	r3, r0
 800af62:	2b00      	cmp	r3, #0
 800af64:	d107      	bne.n	800af76 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800af66:	79fb      	ldrb	r3, [r7, #7]
 800af68:	4618      	mov	r0, r3
 800af6a:	f7ff ffd1 	bl	800af10 <SD_CheckStatus>
 800af6e:	4603      	mov	r3, r0
 800af70:	461a      	mov	r2, r3
 800af72:	4b04      	ldr	r3, [pc, #16]	@ (800af84 <SD_initialize+0x38>)
 800af74:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800af76:	4b03      	ldr	r3, [pc, #12]	@ (800af84 <SD_initialize+0x38>)
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	b2db      	uxtb	r3, r3
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}
 800af84:	20000009 	.word	0x20000009

0800af88 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b082      	sub	sp, #8
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	4603      	mov	r3, r0
 800af90:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800af92:	79fb      	ldrb	r3, [r7, #7]
 800af94:	4618      	mov	r0, r3
 800af96:	f7ff ffbb 	bl	800af10 <SD_CheckStatus>
 800af9a:	4603      	mov	r3, r0
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b086      	sub	sp, #24
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	60b9      	str	r1, [r7, #8]
 800afac:	607a      	str	r2, [r7, #4]
 800afae:	603b      	str	r3, [r7, #0]
 800afb0:	4603      	mov	r3, r0
 800afb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800afb4:	2301      	movs	r3, #1
 800afb6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800afb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800afbc:	683a      	ldr	r2, [r7, #0]
 800afbe:	6879      	ldr	r1, [r7, #4]
 800afc0:	68b8      	ldr	r0, [r7, #8]
 800afc2:	f7ff ff23 	bl	800ae0c <BSP_SD_ReadBlocks>
 800afc6:	4603      	mov	r3, r0
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d107      	bne.n	800afdc <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800afcc:	bf00      	nop
 800afce:	f7ff ff59 	bl	800ae84 <BSP_SD_GetCardState>
 800afd2:	4603      	mov	r3, r0
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d1fa      	bne.n	800afce <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800afd8:	2300      	movs	r3, #0
 800afda:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800afdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3718      	adds	r7, #24
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}

0800afe6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800afe6:	b580      	push	{r7, lr}
 800afe8:	b086      	sub	sp, #24
 800afea:	af00      	add	r7, sp, #0
 800afec:	60b9      	str	r1, [r7, #8]
 800afee:	607a      	str	r2, [r7, #4]
 800aff0:	603b      	str	r3, [r7, #0]
 800aff2:	4603      	mov	r3, r0
 800aff4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800aff6:	2301      	movs	r3, #1
 800aff8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800affa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800affe:	683a      	ldr	r2, [r7, #0]
 800b000:	6879      	ldr	r1, [r7, #4]
 800b002:	68b8      	ldr	r0, [r7, #8]
 800b004:	f7ff ff20 	bl	800ae48 <BSP_SD_WriteBlocks>
 800b008:	4603      	mov	r3, r0
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d107      	bne.n	800b01e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800b00e:	bf00      	nop
 800b010:	f7ff ff38 	bl	800ae84 <BSP_SD_GetCardState>
 800b014:	4603      	mov	r3, r0
 800b016:	2b00      	cmp	r3, #0
 800b018:	d1fa      	bne.n	800b010 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800b01a:	2300      	movs	r3, #0
 800b01c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b01e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b020:	4618      	mov	r0, r3
 800b022:	3718      	adds	r7, #24
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}

0800b028 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b08c      	sub	sp, #48	@ 0x30
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	4603      	mov	r3, r0
 800b030:	603a      	str	r2, [r7, #0]
 800b032:	71fb      	strb	r3, [r7, #7]
 800b034:	460b      	mov	r3, r1
 800b036:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b03e:	4b25      	ldr	r3, [pc, #148]	@ (800b0d4 <SD_ioctl+0xac>)
 800b040:	781b      	ldrb	r3, [r3, #0]
 800b042:	b2db      	uxtb	r3, r3
 800b044:	f003 0301 	and.w	r3, r3, #1
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d001      	beq.n	800b050 <SD_ioctl+0x28>
 800b04c:	2303      	movs	r3, #3
 800b04e:	e03c      	b.n	800b0ca <SD_ioctl+0xa2>

  switch (cmd)
 800b050:	79bb      	ldrb	r3, [r7, #6]
 800b052:	2b03      	cmp	r3, #3
 800b054:	d834      	bhi.n	800b0c0 <SD_ioctl+0x98>
 800b056:	a201      	add	r2, pc, #4	@ (adr r2, 800b05c <SD_ioctl+0x34>)
 800b058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b05c:	0800b06d 	.word	0x0800b06d
 800b060:	0800b075 	.word	0x0800b075
 800b064:	0800b08d 	.word	0x0800b08d
 800b068:	0800b0a7 	.word	0x0800b0a7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b06c:	2300      	movs	r3, #0
 800b06e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b072:	e028      	b.n	800b0c6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b074:	f107 030c 	add.w	r3, r7, #12
 800b078:	4618      	mov	r0, r3
 800b07a:	f7ff ff13 	bl	800aea4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b07e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b084:	2300      	movs	r3, #0
 800b086:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b08a:	e01c      	b.n	800b0c6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b08c:	f107 030c 	add.w	r3, r7, #12
 800b090:	4618      	mov	r0, r3
 800b092:	f7ff ff07 	bl	800aea4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b098:	b29a      	uxth	r2, r3
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b0a4:	e00f      	b.n	800b0c6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b0a6:	f107 030c 	add.w	r3, r7, #12
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f7ff fefa 	bl	800aea4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b0b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0b2:	0a5a      	lsrs	r2, r3, #9
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b0be:	e002      	b.n	800b0c6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b0c0:	2304      	movs	r3, #4
 800b0c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800b0c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3730      	adds	r7, #48	@ 0x30
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	20000009 	.word	0x20000009

0800b0d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b084      	sub	sp, #16
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	460b      	mov	r3, r1
 800b0e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b0e4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b0e8:	f002 fd72 	bl	800dbd0 <malloc>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d109      	bne.n	800b10a <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	32b0      	adds	r2, #176	@ 0xb0
 800b100:	2100      	movs	r1, #0
 800b102:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b106:	2302      	movs	r3, #2
 800b108:	e0d4      	b.n	800b2b4 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b10a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b10e:	2100      	movs	r1, #0
 800b110:	68f8      	ldr	r0, [r7, #12]
 800b112:	f002 fe1b 	bl	800dd4c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	32b0      	adds	r2, #176	@ 0xb0
 800b120:	68f9      	ldr	r1, [r7, #12]
 800b122:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	32b0      	adds	r2, #176	@ 0xb0
 800b130:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	7c1b      	ldrb	r3, [r3, #16]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d138      	bne.n	800b1b4 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b142:	4b5e      	ldr	r3, [pc, #376]	@ (800b2bc <USBD_CDC_Init+0x1e4>)
 800b144:	7819      	ldrb	r1, [r3, #0]
 800b146:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b14a:	2202      	movs	r2, #2
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f002 fb9c 	bl	800d88a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b152:	4b5a      	ldr	r3, [pc, #360]	@ (800b2bc <USBD_CDC_Init+0x1e4>)
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	f003 020f 	and.w	r2, r3, #15
 800b15a:	6879      	ldr	r1, [r7, #4]
 800b15c:	4613      	mov	r3, r2
 800b15e:	009b      	lsls	r3, r3, #2
 800b160:	4413      	add	r3, r2
 800b162:	009b      	lsls	r3, r3, #2
 800b164:	440b      	add	r3, r1
 800b166:	3324      	adds	r3, #36	@ 0x24
 800b168:	2201      	movs	r2, #1
 800b16a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b16c:	4b54      	ldr	r3, [pc, #336]	@ (800b2c0 <USBD_CDC_Init+0x1e8>)
 800b16e:	7819      	ldrb	r1, [r3, #0]
 800b170:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b174:	2202      	movs	r2, #2
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f002 fb87 	bl	800d88a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b17c:	4b50      	ldr	r3, [pc, #320]	@ (800b2c0 <USBD_CDC_Init+0x1e8>)
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	f003 020f 	and.w	r2, r3, #15
 800b184:	6879      	ldr	r1, [r7, #4]
 800b186:	4613      	mov	r3, r2
 800b188:	009b      	lsls	r3, r3, #2
 800b18a:	4413      	add	r3, r2
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	440b      	add	r3, r1
 800b190:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b194:	2201      	movs	r2, #1
 800b196:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b198:	4b4a      	ldr	r3, [pc, #296]	@ (800b2c4 <USBD_CDC_Init+0x1ec>)
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	f003 020f 	and.w	r2, r3, #15
 800b1a0:	6879      	ldr	r1, [r7, #4]
 800b1a2:	4613      	mov	r3, r2
 800b1a4:	009b      	lsls	r3, r3, #2
 800b1a6:	4413      	add	r3, r2
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	440b      	add	r3, r1
 800b1ac:	3326      	adds	r3, #38	@ 0x26
 800b1ae:	2210      	movs	r2, #16
 800b1b0:	801a      	strh	r2, [r3, #0]
 800b1b2:	e035      	b.n	800b220 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b1b4:	4b41      	ldr	r3, [pc, #260]	@ (800b2bc <USBD_CDC_Init+0x1e4>)
 800b1b6:	7819      	ldrb	r1, [r3, #0]
 800b1b8:	2340      	movs	r3, #64	@ 0x40
 800b1ba:	2202      	movs	r2, #2
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f002 fb64 	bl	800d88a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b1c2:	4b3e      	ldr	r3, [pc, #248]	@ (800b2bc <USBD_CDC_Init+0x1e4>)
 800b1c4:	781b      	ldrb	r3, [r3, #0]
 800b1c6:	f003 020f 	and.w	r2, r3, #15
 800b1ca:	6879      	ldr	r1, [r7, #4]
 800b1cc:	4613      	mov	r3, r2
 800b1ce:	009b      	lsls	r3, r3, #2
 800b1d0:	4413      	add	r3, r2
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	440b      	add	r3, r1
 800b1d6:	3324      	adds	r3, #36	@ 0x24
 800b1d8:	2201      	movs	r2, #1
 800b1da:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b1dc:	4b38      	ldr	r3, [pc, #224]	@ (800b2c0 <USBD_CDC_Init+0x1e8>)
 800b1de:	7819      	ldrb	r1, [r3, #0]
 800b1e0:	2340      	movs	r3, #64	@ 0x40
 800b1e2:	2202      	movs	r2, #2
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f002 fb50 	bl	800d88a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b1ea:	4b35      	ldr	r3, [pc, #212]	@ (800b2c0 <USBD_CDC_Init+0x1e8>)
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	f003 020f 	and.w	r2, r3, #15
 800b1f2:	6879      	ldr	r1, [r7, #4]
 800b1f4:	4613      	mov	r3, r2
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	4413      	add	r3, r2
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	440b      	add	r3, r1
 800b1fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b202:	2201      	movs	r2, #1
 800b204:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b206:	4b2f      	ldr	r3, [pc, #188]	@ (800b2c4 <USBD_CDC_Init+0x1ec>)
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	f003 020f 	and.w	r2, r3, #15
 800b20e:	6879      	ldr	r1, [r7, #4]
 800b210:	4613      	mov	r3, r2
 800b212:	009b      	lsls	r3, r3, #2
 800b214:	4413      	add	r3, r2
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	440b      	add	r3, r1
 800b21a:	3326      	adds	r3, #38	@ 0x26
 800b21c:	2210      	movs	r2, #16
 800b21e:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b220:	4b28      	ldr	r3, [pc, #160]	@ (800b2c4 <USBD_CDC_Init+0x1ec>)
 800b222:	7819      	ldrb	r1, [r3, #0]
 800b224:	2308      	movs	r3, #8
 800b226:	2203      	movs	r2, #3
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f002 fb2e 	bl	800d88a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b22e:	4b25      	ldr	r3, [pc, #148]	@ (800b2c4 <USBD_CDC_Init+0x1ec>)
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	f003 020f 	and.w	r2, r3, #15
 800b236:	6879      	ldr	r1, [r7, #4]
 800b238:	4613      	mov	r3, r2
 800b23a:	009b      	lsls	r3, r3, #2
 800b23c:	4413      	add	r3, r2
 800b23e:	009b      	lsls	r3, r3, #2
 800b240:	440b      	add	r3, r1
 800b242:	3324      	adds	r3, #36	@ 0x24
 800b244:	2201      	movs	r2, #1
 800b246:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2200      	movs	r2, #0
 800b24c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	33b0      	adds	r3, #176	@ 0xb0
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	4413      	add	r3, r2
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	2200      	movs	r2, #0
 800b268:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	2200      	movs	r2, #0
 800b270:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d101      	bne.n	800b282 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800b27e:	2302      	movs	r3, #2
 800b280:	e018      	b.n	800b2b4 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	7c1b      	ldrb	r3, [r3, #16]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d10a      	bne.n	800b2a0 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b28a:	4b0d      	ldr	r3, [pc, #52]	@ (800b2c0 <USBD_CDC_Init+0x1e8>)
 800b28c:	7819      	ldrb	r1, [r3, #0]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b294:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f002 fbe5 	bl	800da68 <USBD_LL_PrepareReceive>
 800b29e:	e008      	b.n	800b2b2 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b2a0:	4b07      	ldr	r3, [pc, #28]	@ (800b2c0 <USBD_CDC_Init+0x1e8>)
 800b2a2:	7819      	ldrb	r1, [r3, #0]
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b2aa:	2340      	movs	r3, #64	@ 0x40
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f002 fbdb 	bl	800da68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b2b2:	2300      	movs	r3, #0
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3710      	adds	r7, #16
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}
 800b2bc:	20000093 	.word	0x20000093
 800b2c0:	20000094 	.word	0x20000094
 800b2c4:	20000095 	.word	0x20000095

0800b2c8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b2d4:	4b3a      	ldr	r3, [pc, #232]	@ (800b3c0 <USBD_CDC_DeInit+0xf8>)
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	4619      	mov	r1, r3
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f002 fafb 	bl	800d8d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b2e0:	4b37      	ldr	r3, [pc, #220]	@ (800b3c0 <USBD_CDC_DeInit+0xf8>)
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	f003 020f 	and.w	r2, r3, #15
 800b2e8:	6879      	ldr	r1, [r7, #4]
 800b2ea:	4613      	mov	r3, r2
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	4413      	add	r3, r2
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	440b      	add	r3, r1
 800b2f4:	3324      	adds	r3, #36	@ 0x24
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b2fa:	4b32      	ldr	r3, [pc, #200]	@ (800b3c4 <USBD_CDC_DeInit+0xfc>)
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	4619      	mov	r1, r3
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f002 fae8 	bl	800d8d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b306:	4b2f      	ldr	r3, [pc, #188]	@ (800b3c4 <USBD_CDC_DeInit+0xfc>)
 800b308:	781b      	ldrb	r3, [r3, #0]
 800b30a:	f003 020f 	and.w	r2, r3, #15
 800b30e:	6879      	ldr	r1, [r7, #4]
 800b310:	4613      	mov	r3, r2
 800b312:	009b      	lsls	r3, r3, #2
 800b314:	4413      	add	r3, r2
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	440b      	add	r3, r1
 800b31a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b31e:	2200      	movs	r2, #0
 800b320:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b322:	4b29      	ldr	r3, [pc, #164]	@ (800b3c8 <USBD_CDC_DeInit+0x100>)
 800b324:	781b      	ldrb	r3, [r3, #0]
 800b326:	4619      	mov	r1, r3
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f002 fad4 	bl	800d8d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b32e:	4b26      	ldr	r3, [pc, #152]	@ (800b3c8 <USBD_CDC_DeInit+0x100>)
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	f003 020f 	and.w	r2, r3, #15
 800b336:	6879      	ldr	r1, [r7, #4]
 800b338:	4613      	mov	r3, r2
 800b33a:	009b      	lsls	r3, r3, #2
 800b33c:	4413      	add	r3, r2
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	440b      	add	r3, r1
 800b342:	3324      	adds	r3, #36	@ 0x24
 800b344:	2200      	movs	r2, #0
 800b346:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b348:	4b1f      	ldr	r3, [pc, #124]	@ (800b3c8 <USBD_CDC_DeInit+0x100>)
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	f003 020f 	and.w	r2, r3, #15
 800b350:	6879      	ldr	r1, [r7, #4]
 800b352:	4613      	mov	r3, r2
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	4413      	add	r3, r2
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	440b      	add	r3, r1
 800b35c:	3326      	adds	r3, #38	@ 0x26
 800b35e:	2200      	movs	r2, #0
 800b360:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	32b0      	adds	r2, #176	@ 0xb0
 800b36c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d01f      	beq.n	800b3b4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b37a:	687a      	ldr	r2, [r7, #4]
 800b37c:	33b0      	adds	r3, #176	@ 0xb0
 800b37e:	009b      	lsls	r3, r3, #2
 800b380:	4413      	add	r3, r2
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	32b0      	adds	r2, #176	@ 0xb0
 800b392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b396:	4618      	mov	r0, r3
 800b398:	f002 fc22 	bl	800dbe0 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	32b0      	adds	r2, #176	@ 0xb0
 800b3a6:	2100      	movs	r1, #0
 800b3a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b3b4:	2300      	movs	r3, #0
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3708      	adds	r7, #8
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	20000093 	.word	0x20000093
 800b3c4:	20000094 	.word	0x20000094
 800b3c8:	20000095 	.word	0x20000095

0800b3cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b086      	sub	sp, #24
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	32b0      	adds	r2, #176	@ 0xb0
 800b3e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3e4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d101      	bne.n	800b3fc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b3f8:	2303      	movs	r3, #3
 800b3fa:	e0bf      	b.n	800b57c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b404:	2b00      	cmp	r3, #0
 800b406:	d050      	beq.n	800b4aa <USBD_CDC_Setup+0xde>
 800b408:	2b20      	cmp	r3, #32
 800b40a:	f040 80af 	bne.w	800b56c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	88db      	ldrh	r3, [r3, #6]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d03a      	beq.n	800b48c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	b25b      	sxtb	r3, r3
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	da1b      	bge.n	800b458 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b426:	687a      	ldr	r2, [r7, #4]
 800b428:	33b0      	adds	r3, #176	@ 0xb0
 800b42a:	009b      	lsls	r3, r3, #2
 800b42c:	4413      	add	r3, r2
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	689b      	ldr	r3, [r3, #8]
 800b432:	683a      	ldr	r2, [r7, #0]
 800b434:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b436:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b438:	683a      	ldr	r2, [r7, #0]
 800b43a:	88d2      	ldrh	r2, [r2, #6]
 800b43c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	88db      	ldrh	r3, [r3, #6]
 800b442:	2b07      	cmp	r3, #7
 800b444:	bf28      	it	cs
 800b446:	2307      	movcs	r3, #7
 800b448:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	89fa      	ldrh	r2, [r7, #14]
 800b44e:	4619      	mov	r1, r3
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f001 fd7d 	bl	800cf50 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b456:	e090      	b.n	800b57a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	785a      	ldrb	r2, [r3, #1]
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	88db      	ldrh	r3, [r3, #6]
 800b466:	2b3f      	cmp	r3, #63	@ 0x3f
 800b468:	d803      	bhi.n	800b472 <USBD_CDC_Setup+0xa6>
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	88db      	ldrh	r3, [r3, #6]
 800b46e:	b2da      	uxtb	r2, r3
 800b470:	e000      	b.n	800b474 <USBD_CDC_Setup+0xa8>
 800b472:	2240      	movs	r2, #64	@ 0x40
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b47a:	6939      	ldr	r1, [r7, #16]
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b482:	461a      	mov	r2, r3
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f001 fd8f 	bl	800cfa8 <USBD_CtlPrepareRx>
      break;
 800b48a:	e076      	b.n	800b57a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	33b0      	adds	r3, #176	@ 0xb0
 800b496:	009b      	lsls	r3, r3, #2
 800b498:	4413      	add	r3, r2
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	689b      	ldr	r3, [r3, #8]
 800b49e:	683a      	ldr	r2, [r7, #0]
 800b4a0:	7850      	ldrb	r0, [r2, #1]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	6839      	ldr	r1, [r7, #0]
 800b4a6:	4798      	blx	r3
      break;
 800b4a8:	e067      	b.n	800b57a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	785b      	ldrb	r3, [r3, #1]
 800b4ae:	2b0b      	cmp	r3, #11
 800b4b0:	d851      	bhi.n	800b556 <USBD_CDC_Setup+0x18a>
 800b4b2:	a201      	add	r2, pc, #4	@ (adr r2, 800b4b8 <USBD_CDC_Setup+0xec>)
 800b4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4b8:	0800b4e9 	.word	0x0800b4e9
 800b4bc:	0800b565 	.word	0x0800b565
 800b4c0:	0800b557 	.word	0x0800b557
 800b4c4:	0800b557 	.word	0x0800b557
 800b4c8:	0800b557 	.word	0x0800b557
 800b4cc:	0800b557 	.word	0x0800b557
 800b4d0:	0800b557 	.word	0x0800b557
 800b4d4:	0800b557 	.word	0x0800b557
 800b4d8:	0800b557 	.word	0x0800b557
 800b4dc:	0800b557 	.word	0x0800b557
 800b4e0:	0800b513 	.word	0x0800b513
 800b4e4:	0800b53d 	.word	0x0800b53d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	2b03      	cmp	r3, #3
 800b4f2:	d107      	bne.n	800b504 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b4f4:	f107 030a 	add.w	r3, r7, #10
 800b4f8:	2202      	movs	r2, #2
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f001 fd27 	bl	800cf50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b502:	e032      	b.n	800b56a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b504:	6839      	ldr	r1, [r7, #0]
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f001 fca5 	bl	800ce56 <USBD_CtlError>
            ret = USBD_FAIL;
 800b50c:	2303      	movs	r3, #3
 800b50e:	75fb      	strb	r3, [r7, #23]
          break;
 800b510:	e02b      	b.n	800b56a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	2b03      	cmp	r3, #3
 800b51c:	d107      	bne.n	800b52e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b51e:	f107 030d 	add.w	r3, r7, #13
 800b522:	2201      	movs	r2, #1
 800b524:	4619      	mov	r1, r3
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f001 fd12 	bl	800cf50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b52c:	e01d      	b.n	800b56a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b52e:	6839      	ldr	r1, [r7, #0]
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f001 fc90 	bl	800ce56 <USBD_CtlError>
            ret = USBD_FAIL;
 800b536:	2303      	movs	r3, #3
 800b538:	75fb      	strb	r3, [r7, #23]
          break;
 800b53a:	e016      	b.n	800b56a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b542:	b2db      	uxtb	r3, r3
 800b544:	2b03      	cmp	r3, #3
 800b546:	d00f      	beq.n	800b568 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b548:	6839      	ldr	r1, [r7, #0]
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f001 fc83 	bl	800ce56 <USBD_CtlError>
            ret = USBD_FAIL;
 800b550:	2303      	movs	r3, #3
 800b552:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b554:	e008      	b.n	800b568 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b556:	6839      	ldr	r1, [r7, #0]
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f001 fc7c 	bl	800ce56 <USBD_CtlError>
          ret = USBD_FAIL;
 800b55e:	2303      	movs	r3, #3
 800b560:	75fb      	strb	r3, [r7, #23]
          break;
 800b562:	e002      	b.n	800b56a <USBD_CDC_Setup+0x19e>
          break;
 800b564:	bf00      	nop
 800b566:	e008      	b.n	800b57a <USBD_CDC_Setup+0x1ae>
          break;
 800b568:	bf00      	nop
      }
      break;
 800b56a:	e006      	b.n	800b57a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b56c:	6839      	ldr	r1, [r7, #0]
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f001 fc71 	bl	800ce56 <USBD_CtlError>
      ret = USBD_FAIL;
 800b574:	2303      	movs	r3, #3
 800b576:	75fb      	strb	r3, [r7, #23]
      break;
 800b578:	bf00      	nop
  }

  return (uint8_t)ret;
 800b57a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3718      	adds	r7, #24
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	460b      	mov	r3, r1
 800b58e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b596:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	32b0      	adds	r2, #176	@ 0xb0
 800b5a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d101      	bne.n	800b5ae <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b5aa:	2303      	movs	r3, #3
 800b5ac:	e065      	b.n	800b67a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	32b0      	adds	r2, #176	@ 0xb0
 800b5b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5bc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b5be:	78fb      	ldrb	r3, [r7, #3]
 800b5c0:	f003 020f 	and.w	r2, r3, #15
 800b5c4:	6879      	ldr	r1, [r7, #4]
 800b5c6:	4613      	mov	r3, r2
 800b5c8:	009b      	lsls	r3, r3, #2
 800b5ca:	4413      	add	r3, r2
 800b5cc:	009b      	lsls	r3, r3, #2
 800b5ce:	440b      	add	r3, r1
 800b5d0:	3318      	adds	r3, #24
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d02f      	beq.n	800b638 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b5d8:	78fb      	ldrb	r3, [r7, #3]
 800b5da:	f003 020f 	and.w	r2, r3, #15
 800b5de:	6879      	ldr	r1, [r7, #4]
 800b5e0:	4613      	mov	r3, r2
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	4413      	add	r3, r2
 800b5e6:	009b      	lsls	r3, r3, #2
 800b5e8:	440b      	add	r3, r1
 800b5ea:	3318      	adds	r3, #24
 800b5ec:	681a      	ldr	r2, [r3, #0]
 800b5ee:	78fb      	ldrb	r3, [r7, #3]
 800b5f0:	f003 010f 	and.w	r1, r3, #15
 800b5f4:	68f8      	ldr	r0, [r7, #12]
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	00db      	lsls	r3, r3, #3
 800b5fa:	440b      	add	r3, r1
 800b5fc:	009b      	lsls	r3, r3, #2
 800b5fe:	4403      	add	r3, r0
 800b600:	331c      	adds	r3, #28
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	fbb2 f1f3 	udiv	r1, r2, r3
 800b608:	fb01 f303 	mul.w	r3, r1, r3
 800b60c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d112      	bne.n	800b638 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b612:	78fb      	ldrb	r3, [r7, #3]
 800b614:	f003 020f 	and.w	r2, r3, #15
 800b618:	6879      	ldr	r1, [r7, #4]
 800b61a:	4613      	mov	r3, r2
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	4413      	add	r3, r2
 800b620:	009b      	lsls	r3, r3, #2
 800b622:	440b      	add	r3, r1
 800b624:	3318      	adds	r3, #24
 800b626:	2200      	movs	r2, #0
 800b628:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b62a:	78f9      	ldrb	r1, [r7, #3]
 800b62c:	2300      	movs	r3, #0
 800b62e:	2200      	movs	r2, #0
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f002 f9f8 	bl	800da26 <USBD_LL_Transmit>
 800b636:	e01f      	b.n	800b678 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	2200      	movs	r2, #0
 800b63c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b646:	687a      	ldr	r2, [r7, #4]
 800b648:	33b0      	adds	r3, #176	@ 0xb0
 800b64a:	009b      	lsls	r3, r3, #2
 800b64c:	4413      	add	r3, r2
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	691b      	ldr	r3, [r3, #16]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d010      	beq.n	800b678 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b65c:	687a      	ldr	r2, [r7, #4]
 800b65e:	33b0      	adds	r3, #176	@ 0xb0
 800b660:	009b      	lsls	r3, r3, #2
 800b662:	4413      	add	r3, r2
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	691b      	ldr	r3, [r3, #16]
 800b668:	68ba      	ldr	r2, [r7, #8]
 800b66a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b66e:	68ba      	ldr	r2, [r7, #8]
 800b670:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b674:	78fa      	ldrb	r2, [r7, #3]
 800b676:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b678:	2300      	movs	r3, #0
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3710      	adds	r7, #16
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}

0800b682 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b682:	b580      	push	{r7, lr}
 800b684:	b084      	sub	sp, #16
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]
 800b68a:	460b      	mov	r3, r1
 800b68c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	32b0      	adds	r2, #176	@ 0xb0
 800b698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b69c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	32b0      	adds	r2, #176	@ 0xb0
 800b6a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d101      	bne.n	800b6b4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b6b0:	2303      	movs	r3, #3
 800b6b2:	e01a      	b.n	800b6ea <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b6b4:	78fb      	ldrb	r3, [r7, #3]
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f002 f9f6 	bl	800daaa <USBD_LL_GetRxDataSize>
 800b6be:	4602      	mov	r2, r0
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b6cc:	687a      	ldr	r2, [r7, #4]
 800b6ce:	33b0      	adds	r3, #176	@ 0xb0
 800b6d0:	009b      	lsls	r3, r3, #2
 800b6d2:	4413      	add	r3, r2
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	68db      	ldr	r3, [r3, #12]
 800b6d8:	68fa      	ldr	r2, [r7, #12]
 800b6da:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b6de:	68fa      	ldr	r2, [r7, #12]
 800b6e0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b6e4:	4611      	mov	r1, r2
 800b6e6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b6e8:	2300      	movs	r3, #0
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3710      	adds	r7, #16
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}

0800b6f2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b6f2:	b580      	push	{r7, lr}
 800b6f4:	b084      	sub	sp, #16
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	32b0      	adds	r2, #176	@ 0xb0
 800b704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b708:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d101      	bne.n	800b714 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b710:	2303      	movs	r3, #3
 800b712:	e024      	b.n	800b75e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b71a:	687a      	ldr	r2, [r7, #4]
 800b71c:	33b0      	adds	r3, #176	@ 0xb0
 800b71e:	009b      	lsls	r3, r3, #2
 800b720:	4413      	add	r3, r2
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d019      	beq.n	800b75c <USBD_CDC_EP0_RxReady+0x6a>
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b72e:	2bff      	cmp	r3, #255	@ 0xff
 800b730:	d014      	beq.n	800b75c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b738:	687a      	ldr	r2, [r7, #4]
 800b73a:	33b0      	adds	r3, #176	@ 0xb0
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	4413      	add	r3, r2
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	689b      	ldr	r3, [r3, #8]
 800b744:	68fa      	ldr	r2, [r7, #12]
 800b746:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b74a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b74c:	68fa      	ldr	r2, [r7, #12]
 800b74e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b752:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	22ff      	movs	r2, #255	@ 0xff
 800b758:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b75c:	2300      	movs	r3, #0
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3710      	adds	r7, #16
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
	...

0800b768 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b086      	sub	sp, #24
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b770:	2182      	movs	r1, #130	@ 0x82
 800b772:	4818      	ldr	r0, [pc, #96]	@ (800b7d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b774:	f000 fd0f 	bl	800c196 <USBD_GetEpDesc>
 800b778:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b77a:	2101      	movs	r1, #1
 800b77c:	4815      	ldr	r0, [pc, #84]	@ (800b7d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b77e:	f000 fd0a 	bl	800c196 <USBD_GetEpDesc>
 800b782:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b784:	2181      	movs	r1, #129	@ 0x81
 800b786:	4813      	ldr	r0, [pc, #76]	@ (800b7d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b788:	f000 fd05 	bl	800c196 <USBD_GetEpDesc>
 800b78c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d002      	beq.n	800b79a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	2210      	movs	r2, #16
 800b798:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d006      	beq.n	800b7ae <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b7a8:	711a      	strb	r2, [r3, #4]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d006      	beq.n	800b7c2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b7bc:	711a      	strb	r2, [r3, #4]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2243      	movs	r2, #67	@ 0x43
 800b7c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b7c8:	4b02      	ldr	r3, [pc, #8]	@ (800b7d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3718      	adds	r7, #24
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
 800b7d2:	bf00      	nop
 800b7d4:	20000050 	.word	0x20000050

0800b7d8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b086      	sub	sp, #24
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b7e0:	2182      	movs	r1, #130	@ 0x82
 800b7e2:	4818      	ldr	r0, [pc, #96]	@ (800b844 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b7e4:	f000 fcd7 	bl	800c196 <USBD_GetEpDesc>
 800b7e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b7ea:	2101      	movs	r1, #1
 800b7ec:	4815      	ldr	r0, [pc, #84]	@ (800b844 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b7ee:	f000 fcd2 	bl	800c196 <USBD_GetEpDesc>
 800b7f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b7f4:	2181      	movs	r1, #129	@ 0x81
 800b7f6:	4813      	ldr	r0, [pc, #76]	@ (800b844 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b7f8:	f000 fccd 	bl	800c196 <USBD_GetEpDesc>
 800b7fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d002      	beq.n	800b80a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	2210      	movs	r2, #16
 800b808:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d006      	beq.n	800b81e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	2200      	movs	r2, #0
 800b814:	711a      	strb	r2, [r3, #4]
 800b816:	2200      	movs	r2, #0
 800b818:	f042 0202 	orr.w	r2, r2, #2
 800b81c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d006      	beq.n	800b832 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2200      	movs	r2, #0
 800b828:	711a      	strb	r2, [r3, #4]
 800b82a:	2200      	movs	r2, #0
 800b82c:	f042 0202 	orr.w	r2, r2, #2
 800b830:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2243      	movs	r2, #67	@ 0x43
 800b836:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b838:	4b02      	ldr	r3, [pc, #8]	@ (800b844 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3718      	adds	r7, #24
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop
 800b844:	20000050 	.word	0x20000050

0800b848 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b086      	sub	sp, #24
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b850:	2182      	movs	r1, #130	@ 0x82
 800b852:	4818      	ldr	r0, [pc, #96]	@ (800b8b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b854:	f000 fc9f 	bl	800c196 <USBD_GetEpDesc>
 800b858:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b85a:	2101      	movs	r1, #1
 800b85c:	4815      	ldr	r0, [pc, #84]	@ (800b8b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b85e:	f000 fc9a 	bl	800c196 <USBD_GetEpDesc>
 800b862:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b864:	2181      	movs	r1, #129	@ 0x81
 800b866:	4813      	ldr	r0, [pc, #76]	@ (800b8b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b868:	f000 fc95 	bl	800c196 <USBD_GetEpDesc>
 800b86c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d002      	beq.n	800b87a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	2210      	movs	r2, #16
 800b878:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d006      	beq.n	800b88e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	2200      	movs	r2, #0
 800b884:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b888:	711a      	strb	r2, [r3, #4]
 800b88a:	2200      	movs	r2, #0
 800b88c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d006      	beq.n	800b8a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2200      	movs	r2, #0
 800b898:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b89c:	711a      	strb	r2, [r3, #4]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2243      	movs	r2, #67	@ 0x43
 800b8a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b8a8:	4b02      	ldr	r3, [pc, #8]	@ (800b8b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3718      	adds	r7, #24
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	20000050 	.word	0x20000050

0800b8b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b083      	sub	sp, #12
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	220a      	movs	r2, #10
 800b8c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b8c6:	4b03      	ldr	r3, [pc, #12]	@ (800b8d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	370c      	adds	r7, #12
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr
 800b8d4:	2000000c 	.word	0x2000000c

0800b8d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b083      	sub	sp, #12
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d101      	bne.n	800b8ec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b8e8:	2303      	movs	r3, #3
 800b8ea:	e009      	b.n	800b900 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	33b0      	adds	r3, #176	@ 0xb0
 800b8f6:	009b      	lsls	r3, r3, #2
 800b8f8:	4413      	add	r3, r2
 800b8fa:	683a      	ldr	r2, [r7, #0]
 800b8fc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b8fe:	2300      	movs	r3, #0
}
 800b900:	4618      	mov	r0, r3
 800b902:	370c      	adds	r7, #12
 800b904:	46bd      	mov	sp, r7
 800b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90a:	4770      	bx	lr

0800b90c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b087      	sub	sp, #28
 800b910:	af00      	add	r7, sp, #0
 800b912:	60f8      	str	r0, [r7, #12]
 800b914:	60b9      	str	r1, [r7, #8]
 800b916:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	32b0      	adds	r2, #176	@ 0xb0
 800b922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b926:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d101      	bne.n	800b932 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b92e:	2303      	movs	r3, #3
 800b930:	e008      	b.n	800b944 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	68ba      	ldr	r2, [r7, #8]
 800b936:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b942:	2300      	movs	r3, #0
}
 800b944:	4618      	mov	r0, r3
 800b946:	371c      	adds	r7, #28
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr

0800b950 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b950:	b480      	push	{r7}
 800b952:	b085      	sub	sp, #20
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	32b0      	adds	r2, #176	@ 0xb0
 800b964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b968:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d101      	bne.n	800b974 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b970:	2303      	movs	r3, #3
 800b972:	e004      	b.n	800b97e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	683a      	ldr	r2, [r7, #0]
 800b978:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b97c:	2300      	movs	r3, #0
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3714      	adds	r7, #20
 800b982:	46bd      	mov	sp, r7
 800b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b988:	4770      	bx	lr
	...

0800b98c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	32b0      	adds	r2, #176	@ 0xb0
 800b99e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9a2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	32b0      	adds	r2, #176	@ 0xb0
 800b9ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d101      	bne.n	800b9ba <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b9b6:	2303      	movs	r3, #3
 800b9b8:	e018      	b.n	800b9ec <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	7c1b      	ldrb	r3, [r3, #16]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d10a      	bne.n	800b9d8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b9c2:	4b0c      	ldr	r3, [pc, #48]	@ (800b9f4 <USBD_CDC_ReceivePacket+0x68>)
 800b9c4:	7819      	ldrb	r1, [r3, #0]
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b9cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f002 f849 	bl	800da68 <USBD_LL_PrepareReceive>
 800b9d6:	e008      	b.n	800b9ea <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b9d8:	4b06      	ldr	r3, [pc, #24]	@ (800b9f4 <USBD_CDC_ReceivePacket+0x68>)
 800b9da:	7819      	ldrb	r1, [r3, #0]
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b9e2:	2340      	movs	r3, #64	@ 0x40
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f002 f83f 	bl	800da68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b9ea:	2300      	movs	r3, #0
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3710      	adds	r7, #16
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}
 800b9f4:	20000094 	.word	0x20000094

0800b9f8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b086      	sub	sp, #24
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	4613      	mov	r3, r2
 800ba04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d101      	bne.n	800ba10 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ba0c:	2303      	movs	r3, #3
 800ba0e:	e01f      	b.n	800ba50 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	2200      	movs	r2, #0
 800ba14:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2200      	movs	r2, #0
 800ba24:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d003      	beq.n	800ba36 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	68ba      	ldr	r2, [r7, #8]
 800ba32:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2201      	movs	r2, #1
 800ba3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	79fa      	ldrb	r2, [r7, #7]
 800ba42:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ba44:	68f8      	ldr	r0, [r7, #12]
 800ba46:	f001 feb5 	bl	800d7b4 <USBD_LL_Init>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ba4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3718      	adds	r7, #24
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba62:	2300      	movs	r3, #0
 800ba64:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d101      	bne.n	800ba70 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ba6c:	2303      	movs	r3, #3
 800ba6e:	e025      	b.n	800babc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	683a      	ldr	r2, [r7, #0]
 800ba74:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	32ae      	adds	r2, #174	@ 0xae
 800ba82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d00f      	beq.n	800baac <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	32ae      	adds	r2, #174	@ 0xae
 800ba96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba9c:	f107 020e 	add.w	r2, r7, #14
 800baa0:	4610      	mov	r0, r2
 800baa2:	4798      	blx	r3
 800baa4:	4602      	mov	r2, r0
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bab2:	1c5a      	adds	r2, r3, #1
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800baba:	2300      	movs	r3, #0
}
 800babc:	4618      	mov	r0, r3
 800babe:	3710      	adds	r7, #16
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b082      	sub	sp, #8
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f001 fec1 	bl	800d854 <USBD_LL_Start>
 800bad2:	4603      	mov	r3, r0
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3708      	adds	r7, #8
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800badc:	b480      	push	{r7}
 800bade:	b083      	sub	sp, #12
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bae4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	370c      	adds	r7, #12
 800baea:	46bd      	mov	sp, r7
 800baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf0:	4770      	bx	lr

0800baf2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800baf2:	b580      	push	{r7, lr}
 800baf4:	b084      	sub	sp, #16
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
 800bafa:	460b      	mov	r3, r1
 800bafc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bafe:	2300      	movs	r3, #0
 800bb00:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d009      	beq.n	800bb20 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	78fa      	ldrb	r2, [r7, #3]
 800bb16:	4611      	mov	r1, r2
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	4798      	blx	r3
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bb20:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3710      	adds	r7, #16
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}

0800bb2a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb2a:	b580      	push	{r7, lr}
 800bb2c:	b084      	sub	sp, #16
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	6078      	str	r0, [r7, #4]
 800bb32:	460b      	mov	r3, r1
 800bb34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb36:	2300      	movs	r3, #0
 800bb38:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	78fa      	ldrb	r2, [r7, #3]
 800bb44:	4611      	mov	r1, r2
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	4798      	blx	r3
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d001      	beq.n	800bb54 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bb50:	2303      	movs	r3, #3
 800bb52:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bb54:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3710      	adds	r7, #16
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}

0800bb5e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bb5e:	b580      	push	{r7, lr}
 800bb60:	b084      	sub	sp, #16
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	6078      	str	r0, [r7, #4]
 800bb66:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb6e:	6839      	ldr	r1, [r7, #0]
 800bb70:	4618      	mov	r0, r3
 800bb72:	f001 f936 	bl	800cde2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2201      	movs	r2, #1
 800bb7a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800bb84:	461a      	mov	r2, r3
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bb92:	f003 031f 	and.w	r3, r3, #31
 800bb96:	2b02      	cmp	r3, #2
 800bb98:	d01a      	beq.n	800bbd0 <USBD_LL_SetupStage+0x72>
 800bb9a:	2b02      	cmp	r3, #2
 800bb9c:	d822      	bhi.n	800bbe4 <USBD_LL_SetupStage+0x86>
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d002      	beq.n	800bba8 <USBD_LL_SetupStage+0x4a>
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d00a      	beq.n	800bbbc <USBD_LL_SetupStage+0x5e>
 800bba6:	e01d      	b.n	800bbe4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bbae:	4619      	mov	r1, r3
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f000 fb63 	bl	800c27c <USBD_StdDevReq>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	73fb      	strb	r3, [r7, #15]
      break;
 800bbba:	e020      	b.n	800bbfe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f000 fbcb 	bl	800c360 <USBD_StdItfReq>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	73fb      	strb	r3, [r7, #15]
      break;
 800bbce:	e016      	b.n	800bbfe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f000 fc2d 	bl	800c438 <USBD_StdEPReq>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	73fb      	strb	r3, [r7, #15]
      break;
 800bbe2:	e00c      	b.n	800bbfe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bbea:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bbee:	b2db      	uxtb	r3, r3
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f001 fe8e 	bl	800d914 <USBD_LL_StallEP>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	73fb      	strb	r3, [r7, #15]
      break;
 800bbfc:	bf00      	nop
  }

  return ret;
 800bbfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3710      	adds	r7, #16
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b086      	sub	sp, #24
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	460b      	mov	r3, r1
 800bc12:	607a      	str	r2, [r7, #4]
 800bc14:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bc16:	2300      	movs	r3, #0
 800bc18:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800bc1a:	7afb      	ldrb	r3, [r7, #11]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d16e      	bne.n	800bcfe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bc26:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bc2e:	2b03      	cmp	r3, #3
 800bc30:	f040 8098 	bne.w	800bd64 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	689a      	ldr	r2, [r3, #8]
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	68db      	ldr	r3, [r3, #12]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d913      	bls.n	800bc68 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	689a      	ldr	r2, [r3, #8]
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	68db      	ldr	r3, [r3, #12]
 800bc48:	1ad2      	subs	r2, r2, r3
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	68da      	ldr	r2, [r3, #12]
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	689b      	ldr	r3, [r3, #8]
 800bc56:	4293      	cmp	r3, r2
 800bc58:	bf28      	it	cs
 800bc5a:	4613      	movcs	r3, r2
 800bc5c:	461a      	mov	r2, r3
 800bc5e:	6879      	ldr	r1, [r7, #4]
 800bc60:	68f8      	ldr	r0, [r7, #12]
 800bc62:	f001 f9be 	bl	800cfe2 <USBD_CtlContinueRx>
 800bc66:	e07d      	b.n	800bd64 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bc6e:	f003 031f 	and.w	r3, r3, #31
 800bc72:	2b02      	cmp	r3, #2
 800bc74:	d014      	beq.n	800bca0 <USBD_LL_DataOutStage+0x98>
 800bc76:	2b02      	cmp	r3, #2
 800bc78:	d81d      	bhi.n	800bcb6 <USBD_LL_DataOutStage+0xae>
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d002      	beq.n	800bc84 <USBD_LL_DataOutStage+0x7c>
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d003      	beq.n	800bc8a <USBD_LL_DataOutStage+0x82>
 800bc82:	e018      	b.n	800bcb6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bc84:	2300      	movs	r3, #0
 800bc86:	75bb      	strb	r3, [r7, #22]
            break;
 800bc88:	e018      	b.n	800bcbc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bc90:	b2db      	uxtb	r3, r3
 800bc92:	4619      	mov	r1, r3
 800bc94:	68f8      	ldr	r0, [r7, #12]
 800bc96:	f000 fa64 	bl	800c162 <USBD_CoreFindIF>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	75bb      	strb	r3, [r7, #22]
            break;
 800bc9e:	e00d      	b.n	800bcbc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bca6:	b2db      	uxtb	r3, r3
 800bca8:	4619      	mov	r1, r3
 800bcaa:	68f8      	ldr	r0, [r7, #12]
 800bcac:	f000 fa66 	bl	800c17c <USBD_CoreFindEP>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	75bb      	strb	r3, [r7, #22]
            break;
 800bcb4:	e002      	b.n	800bcbc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	75bb      	strb	r3, [r7, #22]
            break;
 800bcba:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bcbc:	7dbb      	ldrb	r3, [r7, #22]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d119      	bne.n	800bcf6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcc8:	b2db      	uxtb	r3, r3
 800bcca:	2b03      	cmp	r3, #3
 800bccc:	d113      	bne.n	800bcf6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bcce:	7dba      	ldrb	r2, [r7, #22]
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	32ae      	adds	r2, #174	@ 0xae
 800bcd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcd8:	691b      	ldr	r3, [r3, #16]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d00b      	beq.n	800bcf6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bcde:	7dba      	ldrb	r2, [r7, #22]
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bce6:	7dba      	ldrb	r2, [r7, #22]
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	32ae      	adds	r2, #174	@ 0xae
 800bcec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcf0:	691b      	ldr	r3, [r3, #16]
 800bcf2:	68f8      	ldr	r0, [r7, #12]
 800bcf4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bcf6:	68f8      	ldr	r0, [r7, #12]
 800bcf8:	f001 f984 	bl	800d004 <USBD_CtlSendStatus>
 800bcfc:	e032      	b.n	800bd64 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bcfe:	7afb      	ldrb	r3, [r7, #11]
 800bd00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd04:	b2db      	uxtb	r3, r3
 800bd06:	4619      	mov	r1, r3
 800bd08:	68f8      	ldr	r0, [r7, #12]
 800bd0a:	f000 fa37 	bl	800c17c <USBD_CoreFindEP>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bd12:	7dbb      	ldrb	r3, [r7, #22]
 800bd14:	2bff      	cmp	r3, #255	@ 0xff
 800bd16:	d025      	beq.n	800bd64 <USBD_LL_DataOutStage+0x15c>
 800bd18:	7dbb      	ldrb	r3, [r7, #22]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d122      	bne.n	800bd64 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd24:	b2db      	uxtb	r3, r3
 800bd26:	2b03      	cmp	r3, #3
 800bd28:	d117      	bne.n	800bd5a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bd2a:	7dba      	ldrb	r2, [r7, #22]
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	32ae      	adds	r2, #174	@ 0xae
 800bd30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd34:	699b      	ldr	r3, [r3, #24]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d00f      	beq.n	800bd5a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bd3a:	7dba      	ldrb	r2, [r7, #22]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bd42:	7dba      	ldrb	r2, [r7, #22]
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	32ae      	adds	r2, #174	@ 0xae
 800bd48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd4c:	699b      	ldr	r3, [r3, #24]
 800bd4e:	7afa      	ldrb	r2, [r7, #11]
 800bd50:	4611      	mov	r1, r2
 800bd52:	68f8      	ldr	r0, [r7, #12]
 800bd54:	4798      	blx	r3
 800bd56:	4603      	mov	r3, r0
 800bd58:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bd5a:	7dfb      	ldrb	r3, [r7, #23]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d001      	beq.n	800bd64 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bd60:	7dfb      	ldrb	r3, [r7, #23]
 800bd62:	e000      	b.n	800bd66 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bd64:	2300      	movs	r3, #0
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3718      	adds	r7, #24
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}

0800bd6e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bd6e:	b580      	push	{r7, lr}
 800bd70:	b086      	sub	sp, #24
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	60f8      	str	r0, [r7, #12]
 800bd76:	460b      	mov	r3, r1
 800bd78:	607a      	str	r2, [r7, #4]
 800bd7a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bd7c:	7afb      	ldrb	r3, [r7, #11]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d16f      	bne.n	800be62 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	3314      	adds	r3, #20
 800bd86:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bd8e:	2b02      	cmp	r3, #2
 800bd90:	d15a      	bne.n	800be48 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	689a      	ldr	r2, [r3, #8]
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d914      	bls.n	800bdc8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	689a      	ldr	r2, [r3, #8]
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	68db      	ldr	r3, [r3, #12]
 800bda6:	1ad2      	subs	r2, r2, r3
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	689b      	ldr	r3, [r3, #8]
 800bdb0:	461a      	mov	r2, r3
 800bdb2:	6879      	ldr	r1, [r7, #4]
 800bdb4:	68f8      	ldr	r0, [r7, #12]
 800bdb6:	f001 f8e6 	bl	800cf86 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bdba:	2300      	movs	r3, #0
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	2100      	movs	r1, #0
 800bdc0:	68f8      	ldr	r0, [r7, #12]
 800bdc2:	f001 fe51 	bl	800da68 <USBD_LL_PrepareReceive>
 800bdc6:	e03f      	b.n	800be48 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	68da      	ldr	r2, [r3, #12]
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	689b      	ldr	r3, [r3, #8]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d11c      	bne.n	800be0e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	685a      	ldr	r2, [r3, #4]
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d316      	bcc.n	800be0e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	685a      	ldr	r2, [r3, #4]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d20f      	bcs.n	800be0e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bdee:	2200      	movs	r2, #0
 800bdf0:	2100      	movs	r1, #0
 800bdf2:	68f8      	ldr	r0, [r7, #12]
 800bdf4:	f001 f8c7 	bl	800cf86 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800be00:	2300      	movs	r3, #0
 800be02:	2200      	movs	r2, #0
 800be04:	2100      	movs	r1, #0
 800be06:	68f8      	ldr	r0, [r7, #12]
 800be08:	f001 fe2e 	bl	800da68 <USBD_LL_PrepareReceive>
 800be0c:	e01c      	b.n	800be48 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be14:	b2db      	uxtb	r3, r3
 800be16:	2b03      	cmp	r3, #3
 800be18:	d10f      	bne.n	800be3a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be20:	68db      	ldr	r3, [r3, #12]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d009      	beq.n	800be3a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	2200      	movs	r2, #0
 800be2a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be34:	68db      	ldr	r3, [r3, #12]
 800be36:	68f8      	ldr	r0, [r7, #12]
 800be38:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800be3a:	2180      	movs	r1, #128	@ 0x80
 800be3c:	68f8      	ldr	r0, [r7, #12]
 800be3e:	f001 fd69 	bl	800d914 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800be42:	68f8      	ldr	r0, [r7, #12]
 800be44:	f001 f8f1 	bl	800d02a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d03a      	beq.n	800bec8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800be52:	68f8      	ldr	r0, [r7, #12]
 800be54:	f7ff fe42 	bl	800badc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2200      	movs	r2, #0
 800be5c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800be60:	e032      	b.n	800bec8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800be62:	7afb      	ldrb	r3, [r7, #11]
 800be64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	4619      	mov	r1, r3
 800be6c:	68f8      	ldr	r0, [r7, #12]
 800be6e:	f000 f985 	bl	800c17c <USBD_CoreFindEP>
 800be72:	4603      	mov	r3, r0
 800be74:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be76:	7dfb      	ldrb	r3, [r7, #23]
 800be78:	2bff      	cmp	r3, #255	@ 0xff
 800be7a:	d025      	beq.n	800bec8 <USBD_LL_DataInStage+0x15a>
 800be7c:	7dfb      	ldrb	r3, [r7, #23]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d122      	bne.n	800bec8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	2b03      	cmp	r3, #3
 800be8c:	d11c      	bne.n	800bec8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800be8e:	7dfa      	ldrb	r2, [r7, #23]
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	32ae      	adds	r2, #174	@ 0xae
 800be94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be98:	695b      	ldr	r3, [r3, #20]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d014      	beq.n	800bec8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800be9e:	7dfa      	ldrb	r2, [r7, #23]
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bea6:	7dfa      	ldrb	r2, [r7, #23]
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	32ae      	adds	r2, #174	@ 0xae
 800beac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beb0:	695b      	ldr	r3, [r3, #20]
 800beb2:	7afa      	ldrb	r2, [r7, #11]
 800beb4:	4611      	mov	r1, r2
 800beb6:	68f8      	ldr	r0, [r7, #12]
 800beb8:	4798      	blx	r3
 800beba:	4603      	mov	r3, r0
 800bebc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bebe:	7dbb      	ldrb	r3, [r7, #22]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d001      	beq.n	800bec8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bec4:	7dbb      	ldrb	r3, [r7, #22]
 800bec6:	e000      	b.n	800beca <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bec8:	2300      	movs	r3, #0
}
 800beca:	4618      	mov	r0, r3
 800becc:	3718      	adds	r7, #24
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}

0800bed2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bed2:	b580      	push	{r7, lr}
 800bed4:	b084      	sub	sp, #16
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800beda:	2300      	movs	r3, #0
 800bedc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2201      	movs	r2, #1
 800bee2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2200      	movs	r2, #0
 800beea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2200      	movs	r2, #0
 800bef2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2200      	movs	r2, #0
 800bef8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2200      	movs	r2, #0
 800bf00:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d014      	beq.n	800bf38 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d00e      	beq.n	800bf38 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf20:	685b      	ldr	r3, [r3, #4]
 800bf22:	687a      	ldr	r2, [r7, #4]
 800bf24:	6852      	ldr	r2, [r2, #4]
 800bf26:	b2d2      	uxtb	r2, r2
 800bf28:	4611      	mov	r1, r2
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	4798      	blx	r3
 800bf2e:	4603      	mov	r3, r0
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d001      	beq.n	800bf38 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bf34:	2303      	movs	r3, #3
 800bf36:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf38:	2340      	movs	r3, #64	@ 0x40
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	2100      	movs	r1, #0
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f001 fca3 	bl	800d88a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2201      	movs	r2, #1
 800bf48:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2240      	movs	r2, #64	@ 0x40
 800bf50:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf54:	2340      	movs	r3, #64	@ 0x40
 800bf56:	2200      	movs	r2, #0
 800bf58:	2180      	movs	r1, #128	@ 0x80
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f001 fc95 	bl	800d88a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2201      	movs	r2, #1
 800bf64:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2240      	movs	r2, #64	@ 0x40
 800bf6a:	621a      	str	r2, [r3, #32]

  return ret;
 800bf6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3710      	adds	r7, #16
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}

0800bf76 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bf76:	b480      	push	{r7}
 800bf78:	b083      	sub	sp, #12
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
 800bf7e:	460b      	mov	r3, r1
 800bf80:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	78fa      	ldrb	r2, [r7, #3]
 800bf86:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bf88:	2300      	movs	r3, #0
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	370c      	adds	r7, #12
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf94:	4770      	bx	lr

0800bf96 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bf96:	b480      	push	{r7}
 800bf98:	b083      	sub	sp, #12
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfa4:	b2db      	uxtb	r3, r3
 800bfa6:	2b04      	cmp	r3, #4
 800bfa8:	d006      	beq.n	800bfb8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfb0:	b2da      	uxtb	r2, r3
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2204      	movs	r2, #4
 800bfbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bfc0:	2300      	movs	r3, #0
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	370c      	adds	r7, #12
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfcc:	4770      	bx	lr

0800bfce <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bfce:	b480      	push	{r7}
 800bfd0:	b083      	sub	sp, #12
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	2b04      	cmp	r3, #4
 800bfe0:	d106      	bne.n	800bff0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bfe8:	b2da      	uxtb	r2, r3
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bff0:	2300      	movs	r3, #0
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	370c      	adds	r7, #12
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr

0800bffe <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bffe:	b580      	push	{r7, lr}
 800c000:	b082      	sub	sp, #8
 800c002:	af00      	add	r7, sp, #0
 800c004:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c00c:	b2db      	uxtb	r3, r3
 800c00e:	2b03      	cmp	r3, #3
 800c010:	d110      	bne.n	800c034 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d00b      	beq.n	800c034 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c022:	69db      	ldr	r3, [r3, #28]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d005      	beq.n	800c034 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c02e:	69db      	ldr	r3, [r3, #28]
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c034:	2300      	movs	r3, #0
}
 800c036:	4618      	mov	r0, r3
 800c038:	3708      	adds	r7, #8
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}

0800c03e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c03e:	b580      	push	{r7, lr}
 800c040:	b082      	sub	sp, #8
 800c042:	af00      	add	r7, sp, #0
 800c044:	6078      	str	r0, [r7, #4]
 800c046:	460b      	mov	r3, r1
 800c048:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	32ae      	adds	r2, #174	@ 0xae
 800c054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d101      	bne.n	800c060 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c05c:	2303      	movs	r3, #3
 800c05e:	e01c      	b.n	800c09a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c066:	b2db      	uxtb	r3, r3
 800c068:	2b03      	cmp	r3, #3
 800c06a:	d115      	bne.n	800c098 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	32ae      	adds	r2, #174	@ 0xae
 800c076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c07a:	6a1b      	ldr	r3, [r3, #32]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d00b      	beq.n	800c098 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	32ae      	adds	r2, #174	@ 0xae
 800c08a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c08e:	6a1b      	ldr	r3, [r3, #32]
 800c090:	78fa      	ldrb	r2, [r7, #3]
 800c092:	4611      	mov	r1, r2
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c098:	2300      	movs	r3, #0
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3708      	adds	r7, #8
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}

0800c0a2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c0a2:	b580      	push	{r7, lr}
 800c0a4:	b082      	sub	sp, #8
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	6078      	str	r0, [r7, #4]
 800c0aa:	460b      	mov	r3, r1
 800c0ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	32ae      	adds	r2, #174	@ 0xae
 800c0b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d101      	bne.n	800c0c4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c0c0:	2303      	movs	r3, #3
 800c0c2:	e01c      	b.n	800c0fe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0ca:	b2db      	uxtb	r3, r3
 800c0cc:	2b03      	cmp	r3, #3
 800c0ce:	d115      	bne.n	800c0fc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	32ae      	adds	r2, #174	@ 0xae
 800c0da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d00b      	beq.n	800c0fc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	32ae      	adds	r2, #174	@ 0xae
 800c0ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0f4:	78fa      	ldrb	r2, [r7, #3]
 800c0f6:	4611      	mov	r1, r2
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c0fc:	2300      	movs	r3, #0
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3708      	adds	r7, #8
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}

0800c106 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c106:	b480      	push	{r7}
 800c108:	b083      	sub	sp, #12
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c10e:	2300      	movs	r3, #0
}
 800c110:	4618      	mov	r0, r3
 800c112:	370c      	adds	r7, #12
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr

0800c11c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c124:	2300      	movs	r3, #0
 800c126:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2201      	movs	r2, #1
 800c12c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c136:	2b00      	cmp	r3, #0
 800c138:	d00e      	beq.n	800c158 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	687a      	ldr	r2, [r7, #4]
 800c144:	6852      	ldr	r2, [r2, #4]
 800c146:	b2d2      	uxtb	r2, r2
 800c148:	4611      	mov	r1, r2
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	4798      	blx	r3
 800c14e:	4603      	mov	r3, r0
 800c150:	2b00      	cmp	r3, #0
 800c152:	d001      	beq.n	800c158 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c154:	2303      	movs	r3, #3
 800c156:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c158:	7bfb      	ldrb	r3, [r7, #15]
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3710      	adds	r7, #16
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}

0800c162 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c162:	b480      	push	{r7}
 800c164:	b083      	sub	sp, #12
 800c166:	af00      	add	r7, sp, #0
 800c168:	6078      	str	r0, [r7, #4]
 800c16a:	460b      	mov	r3, r1
 800c16c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c16e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c170:	4618      	mov	r0, r3
 800c172:	370c      	adds	r7, #12
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr

0800c17c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b083      	sub	sp, #12
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	460b      	mov	r3, r1
 800c186:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c188:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	370c      	adds	r7, #12
 800c18e:	46bd      	mov	sp, r7
 800c190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c194:	4770      	bx	lr

0800c196 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c196:	b580      	push	{r7, lr}
 800c198:	b086      	sub	sp, #24
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6078      	str	r0, [r7, #4]
 800c19e:	460b      	mov	r3, r1
 800c1a0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	885b      	ldrh	r3, [r3, #2]
 800c1b2:	b29b      	uxth	r3, r3
 800c1b4:	68fa      	ldr	r2, [r7, #12]
 800c1b6:	7812      	ldrb	r2, [r2, #0]
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	d91f      	bls.n	800c1fc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c1c2:	e013      	b.n	800c1ec <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c1c4:	f107 030a 	add.w	r3, r7, #10
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	6978      	ldr	r0, [r7, #20]
 800c1cc:	f000 f81b 	bl	800c206 <USBD_GetNextDesc>
 800c1d0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	785b      	ldrb	r3, [r3, #1]
 800c1d6:	2b05      	cmp	r3, #5
 800c1d8:	d108      	bne.n	800c1ec <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	789b      	ldrb	r3, [r3, #2]
 800c1e2:	78fa      	ldrb	r2, [r7, #3]
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d008      	beq.n	800c1fa <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	885b      	ldrh	r3, [r3, #2]
 800c1f0:	b29a      	uxth	r2, r3
 800c1f2:	897b      	ldrh	r3, [r7, #10]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d8e5      	bhi.n	800c1c4 <USBD_GetEpDesc+0x2e>
 800c1f8:	e000      	b.n	800c1fc <USBD_GetEpDesc+0x66>
          break;
 800c1fa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c1fc:	693b      	ldr	r3, [r7, #16]
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3718      	adds	r7, #24
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}

0800c206 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c206:	b480      	push	{r7}
 800c208:	b085      	sub	sp, #20
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	6078      	str	r0, [r7, #4]
 800c20e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	881b      	ldrh	r3, [r3, #0]
 800c218:	68fa      	ldr	r2, [r7, #12]
 800c21a:	7812      	ldrb	r2, [r2, #0]
 800c21c:	4413      	add	r3, r2
 800c21e:	b29a      	uxth	r2, r3
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	461a      	mov	r2, r3
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	4413      	add	r3, r2
 800c22e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c230:	68fb      	ldr	r3, [r7, #12]
}
 800c232:	4618      	mov	r0, r3
 800c234:	3714      	adds	r7, #20
 800c236:	46bd      	mov	sp, r7
 800c238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23c:	4770      	bx	lr

0800c23e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c23e:	b480      	push	{r7}
 800c240:	b087      	sub	sp, #28
 800c242:	af00      	add	r7, sp, #0
 800c244:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	781b      	ldrb	r3, [r3, #0]
 800c24e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	3301      	adds	r3, #1
 800c254:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c256:	697b      	ldr	r3, [r7, #20]
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c25c:	8a3b      	ldrh	r3, [r7, #16]
 800c25e:	021b      	lsls	r3, r3, #8
 800c260:	b21a      	sxth	r2, r3
 800c262:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c266:	4313      	orrs	r3, r2
 800c268:	b21b      	sxth	r3, r3
 800c26a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c26c:	89fb      	ldrh	r3, [r7, #14]
}
 800c26e:	4618      	mov	r0, r3
 800c270:	371c      	adds	r7, #28
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr
	...

0800c27c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c286:	2300      	movs	r3, #0
 800c288:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	781b      	ldrb	r3, [r3, #0]
 800c28e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c292:	2b40      	cmp	r3, #64	@ 0x40
 800c294:	d005      	beq.n	800c2a2 <USBD_StdDevReq+0x26>
 800c296:	2b40      	cmp	r3, #64	@ 0x40
 800c298:	d857      	bhi.n	800c34a <USBD_StdDevReq+0xce>
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d00f      	beq.n	800c2be <USBD_StdDevReq+0x42>
 800c29e:	2b20      	cmp	r3, #32
 800c2a0:	d153      	bne.n	800c34a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	32ae      	adds	r2, #174	@ 0xae
 800c2ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2b0:	689b      	ldr	r3, [r3, #8]
 800c2b2:	6839      	ldr	r1, [r7, #0]
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	4798      	blx	r3
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	73fb      	strb	r3, [r7, #15]
      break;
 800c2bc:	e04a      	b.n	800c354 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	785b      	ldrb	r3, [r3, #1]
 800c2c2:	2b09      	cmp	r3, #9
 800c2c4:	d83b      	bhi.n	800c33e <USBD_StdDevReq+0xc2>
 800c2c6:	a201      	add	r2, pc, #4	@ (adr r2, 800c2cc <USBD_StdDevReq+0x50>)
 800c2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2cc:	0800c321 	.word	0x0800c321
 800c2d0:	0800c335 	.word	0x0800c335
 800c2d4:	0800c33f 	.word	0x0800c33f
 800c2d8:	0800c32b 	.word	0x0800c32b
 800c2dc:	0800c33f 	.word	0x0800c33f
 800c2e0:	0800c2ff 	.word	0x0800c2ff
 800c2e4:	0800c2f5 	.word	0x0800c2f5
 800c2e8:	0800c33f 	.word	0x0800c33f
 800c2ec:	0800c317 	.word	0x0800c317
 800c2f0:	0800c309 	.word	0x0800c309
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c2f4:	6839      	ldr	r1, [r7, #0]
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 fa3c 	bl	800c774 <USBD_GetDescriptor>
          break;
 800c2fc:	e024      	b.n	800c348 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c2fe:	6839      	ldr	r1, [r7, #0]
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f000 fbcb 	bl	800ca9c <USBD_SetAddress>
          break;
 800c306:	e01f      	b.n	800c348 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c308:	6839      	ldr	r1, [r7, #0]
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 fc0a 	bl	800cb24 <USBD_SetConfig>
 800c310:	4603      	mov	r3, r0
 800c312:	73fb      	strb	r3, [r7, #15]
          break;
 800c314:	e018      	b.n	800c348 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c316:	6839      	ldr	r1, [r7, #0]
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f000 fcad 	bl	800cc78 <USBD_GetConfig>
          break;
 800c31e:	e013      	b.n	800c348 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c320:	6839      	ldr	r1, [r7, #0]
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 fcde 	bl	800cce4 <USBD_GetStatus>
          break;
 800c328:	e00e      	b.n	800c348 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c32a:	6839      	ldr	r1, [r7, #0]
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f000 fd0d 	bl	800cd4c <USBD_SetFeature>
          break;
 800c332:	e009      	b.n	800c348 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c334:	6839      	ldr	r1, [r7, #0]
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f000 fd31 	bl	800cd9e <USBD_ClrFeature>
          break;
 800c33c:	e004      	b.n	800c348 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c33e:	6839      	ldr	r1, [r7, #0]
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 fd88 	bl	800ce56 <USBD_CtlError>
          break;
 800c346:	bf00      	nop
      }
      break;
 800c348:	e004      	b.n	800c354 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c34a:	6839      	ldr	r1, [r7, #0]
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 fd82 	bl	800ce56 <USBD_CtlError>
      break;
 800c352:	bf00      	nop
  }

  return ret;
 800c354:	7bfb      	ldrb	r3, [r7, #15]
}
 800c356:	4618      	mov	r0, r3
 800c358:	3710      	adds	r7, #16
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop

0800c360 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c36a:	2300      	movs	r3, #0
 800c36c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c376:	2b40      	cmp	r3, #64	@ 0x40
 800c378:	d005      	beq.n	800c386 <USBD_StdItfReq+0x26>
 800c37a:	2b40      	cmp	r3, #64	@ 0x40
 800c37c:	d852      	bhi.n	800c424 <USBD_StdItfReq+0xc4>
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d001      	beq.n	800c386 <USBD_StdItfReq+0x26>
 800c382:	2b20      	cmp	r3, #32
 800c384:	d14e      	bne.n	800c424 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c38c:	b2db      	uxtb	r3, r3
 800c38e:	3b01      	subs	r3, #1
 800c390:	2b02      	cmp	r3, #2
 800c392:	d840      	bhi.n	800c416 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	889b      	ldrh	r3, [r3, #4]
 800c398:	b2db      	uxtb	r3, r3
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d836      	bhi.n	800c40c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	889b      	ldrh	r3, [r3, #4]
 800c3a2:	b2db      	uxtb	r3, r3
 800c3a4:	4619      	mov	r1, r3
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f7ff fedb 	bl	800c162 <USBD_CoreFindIF>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c3b0:	7bbb      	ldrb	r3, [r7, #14]
 800c3b2:	2bff      	cmp	r3, #255	@ 0xff
 800c3b4:	d01d      	beq.n	800c3f2 <USBD_StdItfReq+0x92>
 800c3b6:	7bbb      	ldrb	r3, [r7, #14]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d11a      	bne.n	800c3f2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c3bc:	7bba      	ldrb	r2, [r7, #14]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	32ae      	adds	r2, #174	@ 0xae
 800c3c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3c6:	689b      	ldr	r3, [r3, #8]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d00f      	beq.n	800c3ec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c3cc:	7bba      	ldrb	r2, [r7, #14]
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c3d4:	7bba      	ldrb	r2, [r7, #14]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	32ae      	adds	r2, #174	@ 0xae
 800c3da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3de:	689b      	ldr	r3, [r3, #8]
 800c3e0:	6839      	ldr	r1, [r7, #0]
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	4798      	blx	r3
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c3ea:	e004      	b.n	800c3f6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c3ec:	2303      	movs	r3, #3
 800c3ee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c3f0:	e001      	b.n	800c3f6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c3f2:	2303      	movs	r3, #3
 800c3f4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	88db      	ldrh	r3, [r3, #6]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d110      	bne.n	800c420 <USBD_StdItfReq+0xc0>
 800c3fe:	7bfb      	ldrb	r3, [r7, #15]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d10d      	bne.n	800c420 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f000 fdfd 	bl	800d004 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c40a:	e009      	b.n	800c420 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c40c:	6839      	ldr	r1, [r7, #0]
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f000 fd21 	bl	800ce56 <USBD_CtlError>
          break;
 800c414:	e004      	b.n	800c420 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c416:	6839      	ldr	r1, [r7, #0]
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f000 fd1c 	bl	800ce56 <USBD_CtlError>
          break;
 800c41e:	e000      	b.n	800c422 <USBD_StdItfReq+0xc2>
          break;
 800c420:	bf00      	nop
      }
      break;
 800c422:	e004      	b.n	800c42e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c424:	6839      	ldr	r1, [r7, #0]
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 fd15 	bl	800ce56 <USBD_CtlError>
      break;
 800c42c:	bf00      	nop
  }

  return ret;
 800c42e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c430:	4618      	mov	r0, r3
 800c432:	3710      	adds	r7, #16
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}

0800c438 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b084      	sub	sp, #16
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c442:	2300      	movs	r3, #0
 800c444:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	889b      	ldrh	r3, [r3, #4]
 800c44a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c454:	2b40      	cmp	r3, #64	@ 0x40
 800c456:	d007      	beq.n	800c468 <USBD_StdEPReq+0x30>
 800c458:	2b40      	cmp	r3, #64	@ 0x40
 800c45a:	f200 817f 	bhi.w	800c75c <USBD_StdEPReq+0x324>
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d02a      	beq.n	800c4b8 <USBD_StdEPReq+0x80>
 800c462:	2b20      	cmp	r3, #32
 800c464:	f040 817a 	bne.w	800c75c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c468:	7bbb      	ldrb	r3, [r7, #14]
 800c46a:	4619      	mov	r1, r3
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f7ff fe85 	bl	800c17c <USBD_CoreFindEP>
 800c472:	4603      	mov	r3, r0
 800c474:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c476:	7b7b      	ldrb	r3, [r7, #13]
 800c478:	2bff      	cmp	r3, #255	@ 0xff
 800c47a:	f000 8174 	beq.w	800c766 <USBD_StdEPReq+0x32e>
 800c47e:	7b7b      	ldrb	r3, [r7, #13]
 800c480:	2b00      	cmp	r3, #0
 800c482:	f040 8170 	bne.w	800c766 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c486:	7b7a      	ldrb	r2, [r7, #13]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c48e:	7b7a      	ldrb	r2, [r7, #13]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	32ae      	adds	r2, #174	@ 0xae
 800c494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c498:	689b      	ldr	r3, [r3, #8]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	f000 8163 	beq.w	800c766 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c4a0:	7b7a      	ldrb	r2, [r7, #13]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	32ae      	adds	r2, #174	@ 0xae
 800c4a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4aa:	689b      	ldr	r3, [r3, #8]
 800c4ac:	6839      	ldr	r1, [r7, #0]
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	4798      	blx	r3
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c4b6:	e156      	b.n	800c766 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	785b      	ldrb	r3, [r3, #1]
 800c4bc:	2b03      	cmp	r3, #3
 800c4be:	d008      	beq.n	800c4d2 <USBD_StdEPReq+0x9a>
 800c4c0:	2b03      	cmp	r3, #3
 800c4c2:	f300 8145 	bgt.w	800c750 <USBD_StdEPReq+0x318>
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	f000 809b 	beq.w	800c602 <USBD_StdEPReq+0x1ca>
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	d03c      	beq.n	800c54a <USBD_StdEPReq+0x112>
 800c4d0:	e13e      	b.n	800c750 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4d8:	b2db      	uxtb	r3, r3
 800c4da:	2b02      	cmp	r3, #2
 800c4dc:	d002      	beq.n	800c4e4 <USBD_StdEPReq+0xac>
 800c4de:	2b03      	cmp	r3, #3
 800c4e0:	d016      	beq.n	800c510 <USBD_StdEPReq+0xd8>
 800c4e2:	e02c      	b.n	800c53e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c4e4:	7bbb      	ldrb	r3, [r7, #14]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d00d      	beq.n	800c506 <USBD_StdEPReq+0xce>
 800c4ea:	7bbb      	ldrb	r3, [r7, #14]
 800c4ec:	2b80      	cmp	r3, #128	@ 0x80
 800c4ee:	d00a      	beq.n	800c506 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c4f0:	7bbb      	ldrb	r3, [r7, #14]
 800c4f2:	4619      	mov	r1, r3
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f001 fa0d 	bl	800d914 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4fa:	2180      	movs	r1, #128	@ 0x80
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f001 fa09 	bl	800d914 <USBD_LL_StallEP>
 800c502:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c504:	e020      	b.n	800c548 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c506:	6839      	ldr	r1, [r7, #0]
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f000 fca4 	bl	800ce56 <USBD_CtlError>
              break;
 800c50e:	e01b      	b.n	800c548 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	885b      	ldrh	r3, [r3, #2]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d10e      	bne.n	800c536 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c518:	7bbb      	ldrb	r3, [r7, #14]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d00b      	beq.n	800c536 <USBD_StdEPReq+0xfe>
 800c51e:	7bbb      	ldrb	r3, [r7, #14]
 800c520:	2b80      	cmp	r3, #128	@ 0x80
 800c522:	d008      	beq.n	800c536 <USBD_StdEPReq+0xfe>
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	88db      	ldrh	r3, [r3, #6]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d104      	bne.n	800c536 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c52c:	7bbb      	ldrb	r3, [r7, #14]
 800c52e:	4619      	mov	r1, r3
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f001 f9ef 	bl	800d914 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f000 fd64 	bl	800d004 <USBD_CtlSendStatus>

              break;
 800c53c:	e004      	b.n	800c548 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c53e:	6839      	ldr	r1, [r7, #0]
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f000 fc88 	bl	800ce56 <USBD_CtlError>
              break;
 800c546:	bf00      	nop
          }
          break;
 800c548:	e107      	b.n	800c75a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c550:	b2db      	uxtb	r3, r3
 800c552:	2b02      	cmp	r3, #2
 800c554:	d002      	beq.n	800c55c <USBD_StdEPReq+0x124>
 800c556:	2b03      	cmp	r3, #3
 800c558:	d016      	beq.n	800c588 <USBD_StdEPReq+0x150>
 800c55a:	e04b      	b.n	800c5f4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c55c:	7bbb      	ldrb	r3, [r7, #14]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d00d      	beq.n	800c57e <USBD_StdEPReq+0x146>
 800c562:	7bbb      	ldrb	r3, [r7, #14]
 800c564:	2b80      	cmp	r3, #128	@ 0x80
 800c566:	d00a      	beq.n	800c57e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c568:	7bbb      	ldrb	r3, [r7, #14]
 800c56a:	4619      	mov	r1, r3
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f001 f9d1 	bl	800d914 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c572:	2180      	movs	r1, #128	@ 0x80
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f001 f9cd 	bl	800d914 <USBD_LL_StallEP>
 800c57a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c57c:	e040      	b.n	800c600 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c57e:	6839      	ldr	r1, [r7, #0]
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f000 fc68 	bl	800ce56 <USBD_CtlError>
              break;
 800c586:	e03b      	b.n	800c600 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	885b      	ldrh	r3, [r3, #2]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d136      	bne.n	800c5fe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c590:	7bbb      	ldrb	r3, [r7, #14]
 800c592:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c596:	2b00      	cmp	r3, #0
 800c598:	d004      	beq.n	800c5a4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c59a:	7bbb      	ldrb	r3, [r7, #14]
 800c59c:	4619      	mov	r1, r3
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f001 f9d7 	bl	800d952 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f000 fd2d 	bl	800d004 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c5aa:	7bbb      	ldrb	r3, [r7, #14]
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f7ff fde4 	bl	800c17c <USBD_CoreFindEP>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c5b8:	7b7b      	ldrb	r3, [r7, #13]
 800c5ba:	2bff      	cmp	r3, #255	@ 0xff
 800c5bc:	d01f      	beq.n	800c5fe <USBD_StdEPReq+0x1c6>
 800c5be:	7b7b      	ldrb	r3, [r7, #13]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d11c      	bne.n	800c5fe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c5c4:	7b7a      	ldrb	r2, [r7, #13]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c5cc:	7b7a      	ldrb	r2, [r7, #13]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	32ae      	adds	r2, #174	@ 0xae
 800c5d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5d6:	689b      	ldr	r3, [r3, #8]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d010      	beq.n	800c5fe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c5dc:	7b7a      	ldrb	r2, [r7, #13]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	32ae      	adds	r2, #174	@ 0xae
 800c5e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5e6:	689b      	ldr	r3, [r3, #8]
 800c5e8:	6839      	ldr	r1, [r7, #0]
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	4798      	blx	r3
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c5f2:	e004      	b.n	800c5fe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c5f4:	6839      	ldr	r1, [r7, #0]
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f000 fc2d 	bl	800ce56 <USBD_CtlError>
              break;
 800c5fc:	e000      	b.n	800c600 <USBD_StdEPReq+0x1c8>
              break;
 800c5fe:	bf00      	nop
          }
          break;
 800c600:	e0ab      	b.n	800c75a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	2b02      	cmp	r3, #2
 800c60c:	d002      	beq.n	800c614 <USBD_StdEPReq+0x1dc>
 800c60e:	2b03      	cmp	r3, #3
 800c610:	d032      	beq.n	800c678 <USBD_StdEPReq+0x240>
 800c612:	e097      	b.n	800c744 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c614:	7bbb      	ldrb	r3, [r7, #14]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d007      	beq.n	800c62a <USBD_StdEPReq+0x1f2>
 800c61a:	7bbb      	ldrb	r3, [r7, #14]
 800c61c:	2b80      	cmp	r3, #128	@ 0x80
 800c61e:	d004      	beq.n	800c62a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c620:	6839      	ldr	r1, [r7, #0]
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f000 fc17 	bl	800ce56 <USBD_CtlError>
                break;
 800c628:	e091      	b.n	800c74e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c62a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	da0b      	bge.n	800c64a <USBD_StdEPReq+0x212>
 800c632:	7bbb      	ldrb	r3, [r7, #14]
 800c634:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c638:	4613      	mov	r3, r2
 800c63a:	009b      	lsls	r3, r3, #2
 800c63c:	4413      	add	r3, r2
 800c63e:	009b      	lsls	r3, r3, #2
 800c640:	3310      	adds	r3, #16
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	4413      	add	r3, r2
 800c646:	3304      	adds	r3, #4
 800c648:	e00b      	b.n	800c662 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c64a:	7bbb      	ldrb	r3, [r7, #14]
 800c64c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c650:	4613      	mov	r3, r2
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	4413      	add	r3, r2
 800c656:	009b      	lsls	r3, r3, #2
 800c658:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	4413      	add	r3, r2
 800c660:	3304      	adds	r3, #4
 800c662:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	2200      	movs	r2, #0
 800c668:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	2202      	movs	r2, #2
 800c66e:	4619      	mov	r1, r3
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f000 fc6d 	bl	800cf50 <USBD_CtlSendData>
              break;
 800c676:	e06a      	b.n	800c74e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c678:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	da11      	bge.n	800c6a4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c680:	7bbb      	ldrb	r3, [r7, #14]
 800c682:	f003 020f 	and.w	r2, r3, #15
 800c686:	6879      	ldr	r1, [r7, #4]
 800c688:	4613      	mov	r3, r2
 800c68a:	009b      	lsls	r3, r3, #2
 800c68c:	4413      	add	r3, r2
 800c68e:	009b      	lsls	r3, r3, #2
 800c690:	440b      	add	r3, r1
 800c692:	3324      	adds	r3, #36	@ 0x24
 800c694:	881b      	ldrh	r3, [r3, #0]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d117      	bne.n	800c6ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c69a:	6839      	ldr	r1, [r7, #0]
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f000 fbda 	bl	800ce56 <USBD_CtlError>
                  break;
 800c6a2:	e054      	b.n	800c74e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c6a4:	7bbb      	ldrb	r3, [r7, #14]
 800c6a6:	f003 020f 	and.w	r2, r3, #15
 800c6aa:	6879      	ldr	r1, [r7, #4]
 800c6ac:	4613      	mov	r3, r2
 800c6ae:	009b      	lsls	r3, r3, #2
 800c6b0:	4413      	add	r3, r2
 800c6b2:	009b      	lsls	r3, r3, #2
 800c6b4:	440b      	add	r3, r1
 800c6b6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c6ba:	881b      	ldrh	r3, [r3, #0]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d104      	bne.n	800c6ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c6c0:	6839      	ldr	r1, [r7, #0]
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f000 fbc7 	bl	800ce56 <USBD_CtlError>
                  break;
 800c6c8:	e041      	b.n	800c74e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	da0b      	bge.n	800c6ea <USBD_StdEPReq+0x2b2>
 800c6d2:	7bbb      	ldrb	r3, [r7, #14]
 800c6d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c6d8:	4613      	mov	r3, r2
 800c6da:	009b      	lsls	r3, r3, #2
 800c6dc:	4413      	add	r3, r2
 800c6de:	009b      	lsls	r3, r3, #2
 800c6e0:	3310      	adds	r3, #16
 800c6e2:	687a      	ldr	r2, [r7, #4]
 800c6e4:	4413      	add	r3, r2
 800c6e6:	3304      	adds	r3, #4
 800c6e8:	e00b      	b.n	800c702 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c6ea:	7bbb      	ldrb	r3, [r7, #14]
 800c6ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6f0:	4613      	mov	r3, r2
 800c6f2:	009b      	lsls	r3, r3, #2
 800c6f4:	4413      	add	r3, r2
 800c6f6:	009b      	lsls	r3, r3, #2
 800c6f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c6fc:	687a      	ldr	r2, [r7, #4]
 800c6fe:	4413      	add	r3, r2
 800c700:	3304      	adds	r3, #4
 800c702:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c704:	7bbb      	ldrb	r3, [r7, #14]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d002      	beq.n	800c710 <USBD_StdEPReq+0x2d8>
 800c70a:	7bbb      	ldrb	r3, [r7, #14]
 800c70c:	2b80      	cmp	r3, #128	@ 0x80
 800c70e:	d103      	bne.n	800c718 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	2200      	movs	r2, #0
 800c714:	601a      	str	r2, [r3, #0]
 800c716:	e00e      	b.n	800c736 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c718:	7bbb      	ldrb	r3, [r7, #14]
 800c71a:	4619      	mov	r1, r3
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f001 f937 	bl	800d990 <USBD_LL_IsStallEP>
 800c722:	4603      	mov	r3, r0
 800c724:	2b00      	cmp	r3, #0
 800c726:	d003      	beq.n	800c730 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	2201      	movs	r2, #1
 800c72c:	601a      	str	r2, [r3, #0]
 800c72e:	e002      	b.n	800c736 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	2200      	movs	r2, #0
 800c734:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	2202      	movs	r2, #2
 800c73a:	4619      	mov	r1, r3
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f000 fc07 	bl	800cf50 <USBD_CtlSendData>
              break;
 800c742:	e004      	b.n	800c74e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c744:	6839      	ldr	r1, [r7, #0]
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 fb85 	bl	800ce56 <USBD_CtlError>
              break;
 800c74c:	bf00      	nop
          }
          break;
 800c74e:	e004      	b.n	800c75a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c750:	6839      	ldr	r1, [r7, #0]
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f000 fb7f 	bl	800ce56 <USBD_CtlError>
          break;
 800c758:	bf00      	nop
      }
      break;
 800c75a:	e005      	b.n	800c768 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c75c:	6839      	ldr	r1, [r7, #0]
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f000 fb79 	bl	800ce56 <USBD_CtlError>
      break;
 800c764:	e000      	b.n	800c768 <USBD_StdEPReq+0x330>
      break;
 800c766:	bf00      	nop
  }

  return ret;
 800c768:	7bfb      	ldrb	r3, [r7, #15]
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	3710      	adds	r7, #16
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}
	...

0800c774 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b084      	sub	sp, #16
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c77e:	2300      	movs	r3, #0
 800c780:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c782:	2300      	movs	r3, #0
 800c784:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c786:	2300      	movs	r3, #0
 800c788:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	885b      	ldrh	r3, [r3, #2]
 800c78e:	0a1b      	lsrs	r3, r3, #8
 800c790:	b29b      	uxth	r3, r3
 800c792:	3b01      	subs	r3, #1
 800c794:	2b0e      	cmp	r3, #14
 800c796:	f200 8152 	bhi.w	800ca3e <USBD_GetDescriptor+0x2ca>
 800c79a:	a201      	add	r2, pc, #4	@ (adr r2, 800c7a0 <USBD_GetDescriptor+0x2c>)
 800c79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7a0:	0800c811 	.word	0x0800c811
 800c7a4:	0800c829 	.word	0x0800c829
 800c7a8:	0800c869 	.word	0x0800c869
 800c7ac:	0800ca3f 	.word	0x0800ca3f
 800c7b0:	0800ca3f 	.word	0x0800ca3f
 800c7b4:	0800c9df 	.word	0x0800c9df
 800c7b8:	0800ca0b 	.word	0x0800ca0b
 800c7bc:	0800ca3f 	.word	0x0800ca3f
 800c7c0:	0800ca3f 	.word	0x0800ca3f
 800c7c4:	0800ca3f 	.word	0x0800ca3f
 800c7c8:	0800ca3f 	.word	0x0800ca3f
 800c7cc:	0800ca3f 	.word	0x0800ca3f
 800c7d0:	0800ca3f 	.word	0x0800ca3f
 800c7d4:	0800ca3f 	.word	0x0800ca3f
 800c7d8:	0800c7dd 	.word	0x0800c7dd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7e2:	69db      	ldr	r3, [r3, #28]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d00b      	beq.n	800c800 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7ee:	69db      	ldr	r3, [r3, #28]
 800c7f0:	687a      	ldr	r2, [r7, #4]
 800c7f2:	7c12      	ldrb	r2, [r2, #16]
 800c7f4:	f107 0108 	add.w	r1, r7, #8
 800c7f8:	4610      	mov	r0, r2
 800c7fa:	4798      	blx	r3
 800c7fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c7fe:	e126      	b.n	800ca4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c800:	6839      	ldr	r1, [r7, #0]
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f000 fb27 	bl	800ce56 <USBD_CtlError>
        err++;
 800c808:	7afb      	ldrb	r3, [r7, #11]
 800c80a:	3301      	adds	r3, #1
 800c80c:	72fb      	strb	r3, [r7, #11]
      break;
 800c80e:	e11e      	b.n	800ca4e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	7c12      	ldrb	r2, [r2, #16]
 800c81c:	f107 0108 	add.w	r1, r7, #8
 800c820:	4610      	mov	r0, r2
 800c822:	4798      	blx	r3
 800c824:	60f8      	str	r0, [r7, #12]
      break;
 800c826:	e112      	b.n	800ca4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	7c1b      	ldrb	r3, [r3, #16]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d10d      	bne.n	800c84c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c838:	f107 0208 	add.w	r2, r7, #8
 800c83c:	4610      	mov	r0, r2
 800c83e:	4798      	blx	r3
 800c840:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	3301      	adds	r3, #1
 800c846:	2202      	movs	r2, #2
 800c848:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c84a:	e100      	b.n	800ca4e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c854:	f107 0208 	add.w	r2, r7, #8
 800c858:	4610      	mov	r0, r2
 800c85a:	4798      	blx	r3
 800c85c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	3301      	adds	r3, #1
 800c862:	2202      	movs	r2, #2
 800c864:	701a      	strb	r2, [r3, #0]
      break;
 800c866:	e0f2      	b.n	800ca4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	885b      	ldrh	r3, [r3, #2]
 800c86c:	b2db      	uxtb	r3, r3
 800c86e:	2b05      	cmp	r3, #5
 800c870:	f200 80ac 	bhi.w	800c9cc <USBD_GetDescriptor+0x258>
 800c874:	a201      	add	r2, pc, #4	@ (adr r2, 800c87c <USBD_GetDescriptor+0x108>)
 800c876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c87a:	bf00      	nop
 800c87c:	0800c895 	.word	0x0800c895
 800c880:	0800c8c9 	.word	0x0800c8c9
 800c884:	0800c8fd 	.word	0x0800c8fd
 800c888:	0800c931 	.word	0x0800c931
 800c88c:	0800c965 	.word	0x0800c965
 800c890:	0800c999 	.word	0x0800c999
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c89a:	685b      	ldr	r3, [r3, #4]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d00b      	beq.n	800c8b8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8a6:	685b      	ldr	r3, [r3, #4]
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	7c12      	ldrb	r2, [r2, #16]
 800c8ac:	f107 0108 	add.w	r1, r7, #8
 800c8b0:	4610      	mov	r0, r2
 800c8b2:	4798      	blx	r3
 800c8b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8b6:	e091      	b.n	800c9dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c8b8:	6839      	ldr	r1, [r7, #0]
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f000 facb 	bl	800ce56 <USBD_CtlError>
            err++;
 800c8c0:	7afb      	ldrb	r3, [r7, #11]
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	72fb      	strb	r3, [r7, #11]
          break;
 800c8c6:	e089      	b.n	800c9dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8ce:	689b      	ldr	r3, [r3, #8]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d00b      	beq.n	800c8ec <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8da:	689b      	ldr	r3, [r3, #8]
 800c8dc:	687a      	ldr	r2, [r7, #4]
 800c8de:	7c12      	ldrb	r2, [r2, #16]
 800c8e0:	f107 0108 	add.w	r1, r7, #8
 800c8e4:	4610      	mov	r0, r2
 800c8e6:	4798      	blx	r3
 800c8e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8ea:	e077      	b.n	800c9dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c8ec:	6839      	ldr	r1, [r7, #0]
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f000 fab1 	bl	800ce56 <USBD_CtlError>
            err++;
 800c8f4:	7afb      	ldrb	r3, [r7, #11]
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	72fb      	strb	r3, [r7, #11]
          break;
 800c8fa:	e06f      	b.n	800c9dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c902:	68db      	ldr	r3, [r3, #12]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d00b      	beq.n	800c920 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c90e:	68db      	ldr	r3, [r3, #12]
 800c910:	687a      	ldr	r2, [r7, #4]
 800c912:	7c12      	ldrb	r2, [r2, #16]
 800c914:	f107 0108 	add.w	r1, r7, #8
 800c918:	4610      	mov	r0, r2
 800c91a:	4798      	blx	r3
 800c91c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c91e:	e05d      	b.n	800c9dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c920:	6839      	ldr	r1, [r7, #0]
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f000 fa97 	bl	800ce56 <USBD_CtlError>
            err++;
 800c928:	7afb      	ldrb	r3, [r7, #11]
 800c92a:	3301      	adds	r3, #1
 800c92c:	72fb      	strb	r3, [r7, #11]
          break;
 800c92e:	e055      	b.n	800c9dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c936:	691b      	ldr	r3, [r3, #16]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d00b      	beq.n	800c954 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c942:	691b      	ldr	r3, [r3, #16]
 800c944:	687a      	ldr	r2, [r7, #4]
 800c946:	7c12      	ldrb	r2, [r2, #16]
 800c948:	f107 0108 	add.w	r1, r7, #8
 800c94c:	4610      	mov	r0, r2
 800c94e:	4798      	blx	r3
 800c950:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c952:	e043      	b.n	800c9dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c954:	6839      	ldr	r1, [r7, #0]
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f000 fa7d 	bl	800ce56 <USBD_CtlError>
            err++;
 800c95c:	7afb      	ldrb	r3, [r7, #11]
 800c95e:	3301      	adds	r3, #1
 800c960:	72fb      	strb	r3, [r7, #11]
          break;
 800c962:	e03b      	b.n	800c9dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c96a:	695b      	ldr	r3, [r3, #20]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d00b      	beq.n	800c988 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c976:	695b      	ldr	r3, [r3, #20]
 800c978:	687a      	ldr	r2, [r7, #4]
 800c97a:	7c12      	ldrb	r2, [r2, #16]
 800c97c:	f107 0108 	add.w	r1, r7, #8
 800c980:	4610      	mov	r0, r2
 800c982:	4798      	blx	r3
 800c984:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c986:	e029      	b.n	800c9dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c988:	6839      	ldr	r1, [r7, #0]
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f000 fa63 	bl	800ce56 <USBD_CtlError>
            err++;
 800c990:	7afb      	ldrb	r3, [r7, #11]
 800c992:	3301      	adds	r3, #1
 800c994:	72fb      	strb	r3, [r7, #11]
          break;
 800c996:	e021      	b.n	800c9dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c99e:	699b      	ldr	r3, [r3, #24]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d00b      	beq.n	800c9bc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9aa:	699b      	ldr	r3, [r3, #24]
 800c9ac:	687a      	ldr	r2, [r7, #4]
 800c9ae:	7c12      	ldrb	r2, [r2, #16]
 800c9b0:	f107 0108 	add.w	r1, r7, #8
 800c9b4:	4610      	mov	r0, r2
 800c9b6:	4798      	blx	r3
 800c9b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c9ba:	e00f      	b.n	800c9dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c9bc:	6839      	ldr	r1, [r7, #0]
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	f000 fa49 	bl	800ce56 <USBD_CtlError>
            err++;
 800c9c4:	7afb      	ldrb	r3, [r7, #11]
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	72fb      	strb	r3, [r7, #11]
          break;
 800c9ca:	e007      	b.n	800c9dc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c9cc:	6839      	ldr	r1, [r7, #0]
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f000 fa41 	bl	800ce56 <USBD_CtlError>
          err++;
 800c9d4:	7afb      	ldrb	r3, [r7, #11]
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c9da:	bf00      	nop
      }
      break;
 800c9dc:	e037      	b.n	800ca4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	7c1b      	ldrb	r3, [r3, #16]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d109      	bne.n	800c9fa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9ee:	f107 0208 	add.w	r2, r7, #8
 800c9f2:	4610      	mov	r0, r2
 800c9f4:	4798      	blx	r3
 800c9f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c9f8:	e029      	b.n	800ca4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c9fa:	6839      	ldr	r1, [r7, #0]
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f000 fa2a 	bl	800ce56 <USBD_CtlError>
        err++;
 800ca02:	7afb      	ldrb	r3, [r7, #11]
 800ca04:	3301      	adds	r3, #1
 800ca06:	72fb      	strb	r3, [r7, #11]
      break;
 800ca08:	e021      	b.n	800ca4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	7c1b      	ldrb	r3, [r3, #16]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d10d      	bne.n	800ca2e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca1a:	f107 0208 	add.w	r2, r7, #8
 800ca1e:	4610      	mov	r0, r2
 800ca20:	4798      	blx	r3
 800ca22:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	3301      	adds	r3, #1
 800ca28:	2207      	movs	r2, #7
 800ca2a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ca2c:	e00f      	b.n	800ca4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ca2e:	6839      	ldr	r1, [r7, #0]
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f000 fa10 	bl	800ce56 <USBD_CtlError>
        err++;
 800ca36:	7afb      	ldrb	r3, [r7, #11]
 800ca38:	3301      	adds	r3, #1
 800ca3a:	72fb      	strb	r3, [r7, #11]
      break;
 800ca3c:	e007      	b.n	800ca4e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ca3e:	6839      	ldr	r1, [r7, #0]
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f000 fa08 	bl	800ce56 <USBD_CtlError>
      err++;
 800ca46:	7afb      	ldrb	r3, [r7, #11]
 800ca48:	3301      	adds	r3, #1
 800ca4a:	72fb      	strb	r3, [r7, #11]
      break;
 800ca4c:	bf00      	nop
  }

  if (err != 0U)
 800ca4e:	7afb      	ldrb	r3, [r7, #11]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d11e      	bne.n	800ca92 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	88db      	ldrh	r3, [r3, #6]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d016      	beq.n	800ca8a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ca5c:	893b      	ldrh	r3, [r7, #8]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d00e      	beq.n	800ca80 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	88da      	ldrh	r2, [r3, #6]
 800ca66:	893b      	ldrh	r3, [r7, #8]
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	bf28      	it	cs
 800ca6c:	4613      	movcs	r3, r2
 800ca6e:	b29b      	uxth	r3, r3
 800ca70:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ca72:	893b      	ldrh	r3, [r7, #8]
 800ca74:	461a      	mov	r2, r3
 800ca76:	68f9      	ldr	r1, [r7, #12]
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f000 fa69 	bl	800cf50 <USBD_CtlSendData>
 800ca7e:	e009      	b.n	800ca94 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ca80:	6839      	ldr	r1, [r7, #0]
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f000 f9e7 	bl	800ce56 <USBD_CtlError>
 800ca88:	e004      	b.n	800ca94 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f000 faba 	bl	800d004 <USBD_CtlSendStatus>
 800ca90:	e000      	b.n	800ca94 <USBD_GetDescriptor+0x320>
    return;
 800ca92:	bf00      	nop
  }
}
 800ca94:	3710      	adds	r7, #16
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}
 800ca9a:	bf00      	nop

0800ca9c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b084      	sub	sp, #16
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	889b      	ldrh	r3, [r3, #4]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d131      	bne.n	800cb12 <USBD_SetAddress+0x76>
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	88db      	ldrh	r3, [r3, #6]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d12d      	bne.n	800cb12 <USBD_SetAddress+0x76>
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	885b      	ldrh	r3, [r3, #2]
 800caba:	2b7f      	cmp	r3, #127	@ 0x7f
 800cabc:	d829      	bhi.n	800cb12 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	885b      	ldrh	r3, [r3, #2]
 800cac2:	b2db      	uxtb	r3, r3
 800cac4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cac8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cad0:	b2db      	uxtb	r3, r3
 800cad2:	2b03      	cmp	r3, #3
 800cad4:	d104      	bne.n	800cae0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cad6:	6839      	ldr	r1, [r7, #0]
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f000 f9bc 	bl	800ce56 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cade:	e01d      	b.n	800cb1c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	7bfa      	ldrb	r2, [r7, #15]
 800cae4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cae8:	7bfb      	ldrb	r3, [r7, #15]
 800caea:	4619      	mov	r1, r3
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f000 ff7b 	bl	800d9e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f000 fa86 	bl	800d004 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800caf8:	7bfb      	ldrb	r3, [r7, #15]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d004      	beq.n	800cb08 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2202      	movs	r2, #2
 800cb02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb06:	e009      	b.n	800cb1c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb10:	e004      	b.n	800cb1c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cb12:	6839      	ldr	r1, [r7, #0]
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f000 f99e 	bl	800ce56 <USBD_CtlError>
  }
}
 800cb1a:	bf00      	nop
 800cb1c:	bf00      	nop
 800cb1e:	3710      	adds	r7, #16
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}

0800cb24 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b084      	sub	sp, #16
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	885b      	ldrh	r3, [r3, #2]
 800cb36:	b2da      	uxtb	r2, r3
 800cb38:	4b4e      	ldr	r3, [pc, #312]	@ (800cc74 <USBD_SetConfig+0x150>)
 800cb3a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cb3c:	4b4d      	ldr	r3, [pc, #308]	@ (800cc74 <USBD_SetConfig+0x150>)
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	2b01      	cmp	r3, #1
 800cb42:	d905      	bls.n	800cb50 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cb44:	6839      	ldr	r1, [r7, #0]
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f000 f985 	bl	800ce56 <USBD_CtlError>
    return USBD_FAIL;
 800cb4c:	2303      	movs	r3, #3
 800cb4e:	e08c      	b.n	800cc6a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb56:	b2db      	uxtb	r3, r3
 800cb58:	2b02      	cmp	r3, #2
 800cb5a:	d002      	beq.n	800cb62 <USBD_SetConfig+0x3e>
 800cb5c:	2b03      	cmp	r3, #3
 800cb5e:	d029      	beq.n	800cbb4 <USBD_SetConfig+0x90>
 800cb60:	e075      	b.n	800cc4e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cb62:	4b44      	ldr	r3, [pc, #272]	@ (800cc74 <USBD_SetConfig+0x150>)
 800cb64:	781b      	ldrb	r3, [r3, #0]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d020      	beq.n	800cbac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cb6a:	4b42      	ldr	r3, [pc, #264]	@ (800cc74 <USBD_SetConfig+0x150>)
 800cb6c:	781b      	ldrb	r3, [r3, #0]
 800cb6e:	461a      	mov	r2, r3
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cb74:	4b3f      	ldr	r3, [pc, #252]	@ (800cc74 <USBD_SetConfig+0x150>)
 800cb76:	781b      	ldrb	r3, [r3, #0]
 800cb78:	4619      	mov	r1, r3
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f7fe ffb9 	bl	800baf2 <USBD_SetClassConfig>
 800cb80:	4603      	mov	r3, r0
 800cb82:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cb84:	7bfb      	ldrb	r3, [r7, #15]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d008      	beq.n	800cb9c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cb8a:	6839      	ldr	r1, [r7, #0]
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f000 f962 	bl	800ce56 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2202      	movs	r2, #2
 800cb96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cb9a:	e065      	b.n	800cc68 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f000 fa31 	bl	800d004 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2203      	movs	r2, #3
 800cba6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cbaa:	e05d      	b.n	800cc68 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f000 fa29 	bl	800d004 <USBD_CtlSendStatus>
      break;
 800cbb2:	e059      	b.n	800cc68 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cbb4:	4b2f      	ldr	r3, [pc, #188]	@ (800cc74 <USBD_SetConfig+0x150>)
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d112      	bne.n	800cbe2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2202      	movs	r2, #2
 800cbc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800cbc4:	4b2b      	ldr	r3, [pc, #172]	@ (800cc74 <USBD_SetConfig+0x150>)
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	461a      	mov	r2, r3
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cbce:	4b29      	ldr	r3, [pc, #164]	@ (800cc74 <USBD_SetConfig+0x150>)
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	4619      	mov	r1, r3
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f7fe ffa8 	bl	800bb2a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f000 fa12 	bl	800d004 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cbe0:	e042      	b.n	800cc68 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cbe2:	4b24      	ldr	r3, [pc, #144]	@ (800cc74 <USBD_SetConfig+0x150>)
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d02a      	beq.n	800cc46 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	685b      	ldr	r3, [r3, #4]
 800cbf4:	b2db      	uxtb	r3, r3
 800cbf6:	4619      	mov	r1, r3
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f7fe ff96 	bl	800bb2a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cbfe:	4b1d      	ldr	r3, [pc, #116]	@ (800cc74 <USBD_SetConfig+0x150>)
 800cc00:	781b      	ldrb	r3, [r3, #0]
 800cc02:	461a      	mov	r2, r3
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cc08:	4b1a      	ldr	r3, [pc, #104]	@ (800cc74 <USBD_SetConfig+0x150>)
 800cc0a:	781b      	ldrb	r3, [r3, #0]
 800cc0c:	4619      	mov	r1, r3
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f7fe ff6f 	bl	800baf2 <USBD_SetClassConfig>
 800cc14:	4603      	mov	r3, r0
 800cc16:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cc18:	7bfb      	ldrb	r3, [r7, #15]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d00f      	beq.n	800cc3e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cc1e:	6839      	ldr	r1, [r7, #0]
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f000 f918 	bl	800ce56 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	685b      	ldr	r3, [r3, #4]
 800cc2a:	b2db      	uxtb	r3, r3
 800cc2c:	4619      	mov	r1, r3
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f7fe ff7b 	bl	800bb2a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2202      	movs	r2, #2
 800cc38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cc3c:	e014      	b.n	800cc68 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f000 f9e0 	bl	800d004 <USBD_CtlSendStatus>
      break;
 800cc44:	e010      	b.n	800cc68 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f000 f9dc 	bl	800d004 <USBD_CtlSendStatus>
      break;
 800cc4c:	e00c      	b.n	800cc68 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cc4e:	6839      	ldr	r1, [r7, #0]
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f000 f900 	bl	800ce56 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cc56:	4b07      	ldr	r3, [pc, #28]	@ (800cc74 <USBD_SetConfig+0x150>)
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f7fe ff64 	bl	800bb2a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cc62:	2303      	movs	r3, #3
 800cc64:	73fb      	strb	r3, [r7, #15]
      break;
 800cc66:	bf00      	nop
  }

  return ret;
 800cc68:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3710      	adds	r7, #16
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	bf00      	nop
 800cc74:	20000a00 	.word	0x20000a00

0800cc78 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b082      	sub	sp, #8
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	88db      	ldrh	r3, [r3, #6]
 800cc86:	2b01      	cmp	r3, #1
 800cc88:	d004      	beq.n	800cc94 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cc8a:	6839      	ldr	r1, [r7, #0]
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f000 f8e2 	bl	800ce56 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cc92:	e023      	b.n	800ccdc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc9a:	b2db      	uxtb	r3, r3
 800cc9c:	2b02      	cmp	r3, #2
 800cc9e:	dc02      	bgt.n	800cca6 <USBD_GetConfig+0x2e>
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	dc03      	bgt.n	800ccac <USBD_GetConfig+0x34>
 800cca4:	e015      	b.n	800ccd2 <USBD_GetConfig+0x5a>
 800cca6:	2b03      	cmp	r3, #3
 800cca8:	d00b      	beq.n	800ccc2 <USBD_GetConfig+0x4a>
 800ccaa:	e012      	b.n	800ccd2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	3308      	adds	r3, #8
 800ccb6:	2201      	movs	r2, #1
 800ccb8:	4619      	mov	r1, r3
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f000 f948 	bl	800cf50 <USBD_CtlSendData>
        break;
 800ccc0:	e00c      	b.n	800ccdc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	3304      	adds	r3, #4
 800ccc6:	2201      	movs	r2, #1
 800ccc8:	4619      	mov	r1, r3
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f000 f940 	bl	800cf50 <USBD_CtlSendData>
        break;
 800ccd0:	e004      	b.n	800ccdc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ccd2:	6839      	ldr	r1, [r7, #0]
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f000 f8be 	bl	800ce56 <USBD_CtlError>
        break;
 800ccda:	bf00      	nop
}
 800ccdc:	bf00      	nop
 800ccde:	3708      	adds	r7, #8
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}

0800cce4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b082      	sub	sp, #8
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ccf4:	b2db      	uxtb	r3, r3
 800ccf6:	3b01      	subs	r3, #1
 800ccf8:	2b02      	cmp	r3, #2
 800ccfa:	d81e      	bhi.n	800cd3a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	88db      	ldrh	r3, [r3, #6]
 800cd00:	2b02      	cmp	r3, #2
 800cd02:	d004      	beq.n	800cd0e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cd04:	6839      	ldr	r1, [r7, #0]
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f000 f8a5 	bl	800ce56 <USBD_CtlError>
        break;
 800cd0c:	e01a      	b.n	800cd44 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2201      	movs	r2, #1
 800cd12:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d005      	beq.n	800cd2a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	68db      	ldr	r3, [r3, #12]
 800cd22:	f043 0202 	orr.w	r2, r3, #2
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	330c      	adds	r3, #12
 800cd2e:	2202      	movs	r2, #2
 800cd30:	4619      	mov	r1, r3
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f000 f90c 	bl	800cf50 <USBD_CtlSendData>
      break;
 800cd38:	e004      	b.n	800cd44 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cd3a:	6839      	ldr	r1, [r7, #0]
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f000 f88a 	bl	800ce56 <USBD_CtlError>
      break;
 800cd42:	bf00      	nop
  }
}
 800cd44:	bf00      	nop
 800cd46:	3708      	adds	r7, #8
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}

0800cd4c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b082      	sub	sp, #8
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	885b      	ldrh	r3, [r3, #2]
 800cd5a:	2b01      	cmp	r3, #1
 800cd5c:	d107      	bne.n	800cd6e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2201      	movs	r2, #1
 800cd62:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f000 f94c 	bl	800d004 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cd6c:	e013      	b.n	800cd96 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	885b      	ldrh	r3, [r3, #2]
 800cd72:	2b02      	cmp	r3, #2
 800cd74:	d10b      	bne.n	800cd8e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	889b      	ldrh	r3, [r3, #4]
 800cd7a:	0a1b      	lsrs	r3, r3, #8
 800cd7c:	b29b      	uxth	r3, r3
 800cd7e:	b2da      	uxtb	r2, r3
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f000 f93c 	bl	800d004 <USBD_CtlSendStatus>
}
 800cd8c:	e003      	b.n	800cd96 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cd8e:	6839      	ldr	r1, [r7, #0]
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f000 f860 	bl	800ce56 <USBD_CtlError>
}
 800cd96:	bf00      	nop
 800cd98:	3708      	adds	r7, #8
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}

0800cd9e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd9e:	b580      	push	{r7, lr}
 800cda0:	b082      	sub	sp, #8
 800cda2:	af00      	add	r7, sp, #0
 800cda4:	6078      	str	r0, [r7, #4]
 800cda6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cdae:	b2db      	uxtb	r3, r3
 800cdb0:	3b01      	subs	r3, #1
 800cdb2:	2b02      	cmp	r3, #2
 800cdb4:	d80b      	bhi.n	800cdce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	885b      	ldrh	r3, [r3, #2]
 800cdba:	2b01      	cmp	r3, #1
 800cdbc:	d10c      	bne.n	800cdd8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f000 f91c 	bl	800d004 <USBD_CtlSendStatus>
      }
      break;
 800cdcc:	e004      	b.n	800cdd8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cdce:	6839      	ldr	r1, [r7, #0]
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f000 f840 	bl	800ce56 <USBD_CtlError>
      break;
 800cdd6:	e000      	b.n	800cdda <USBD_ClrFeature+0x3c>
      break;
 800cdd8:	bf00      	nop
  }
}
 800cdda:	bf00      	nop
 800cddc:	3708      	adds	r7, #8
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}

0800cde2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cde2:	b580      	push	{r7, lr}
 800cde4:	b084      	sub	sp, #16
 800cde6:	af00      	add	r7, sp, #0
 800cde8:	6078      	str	r0, [r7, #4]
 800cdea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	781a      	ldrb	r2, [r3, #0]
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	3301      	adds	r3, #1
 800cdfc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	781a      	ldrb	r2, [r3, #0]
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	3301      	adds	r3, #1
 800ce0a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ce0c:	68f8      	ldr	r0, [r7, #12]
 800ce0e:	f7ff fa16 	bl	800c23e <SWAPBYTE>
 800ce12:	4603      	mov	r3, r0
 800ce14:	461a      	mov	r2, r3
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	3301      	adds	r3, #1
 800ce24:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ce26:	68f8      	ldr	r0, [r7, #12]
 800ce28:	f7ff fa09 	bl	800c23e <SWAPBYTE>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	461a      	mov	r2, r3
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	3301      	adds	r3, #1
 800ce38:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	3301      	adds	r3, #1
 800ce3e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ce40:	68f8      	ldr	r0, [r7, #12]
 800ce42:	f7ff f9fc 	bl	800c23e <SWAPBYTE>
 800ce46:	4603      	mov	r3, r0
 800ce48:	461a      	mov	r2, r3
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	80da      	strh	r2, [r3, #6]
}
 800ce4e:	bf00      	nop
 800ce50:	3710      	adds	r7, #16
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}

0800ce56 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce56:	b580      	push	{r7, lr}
 800ce58:	b082      	sub	sp, #8
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	6078      	str	r0, [r7, #4]
 800ce5e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce60:	2180      	movs	r1, #128	@ 0x80
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f000 fd56 	bl	800d914 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ce68:	2100      	movs	r1, #0
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f000 fd52 	bl	800d914 <USBD_LL_StallEP>
}
 800ce70:	bf00      	nop
 800ce72:	3708      	adds	r7, #8
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}

0800ce78 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b086      	sub	sp, #24
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	60b9      	str	r1, [r7, #8]
 800ce82:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ce84:	2300      	movs	r3, #0
 800ce86:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d042      	beq.n	800cf14 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ce92:	6938      	ldr	r0, [r7, #16]
 800ce94:	f000 f842 	bl	800cf1c <USBD_GetLen>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	005b      	lsls	r3, r3, #1
 800ce9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cea2:	d808      	bhi.n	800ceb6 <USBD_GetString+0x3e>
 800cea4:	6938      	ldr	r0, [r7, #16]
 800cea6:	f000 f839 	bl	800cf1c <USBD_GetLen>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	3301      	adds	r3, #1
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	005b      	lsls	r3, r3, #1
 800ceb2:	b29a      	uxth	r2, r3
 800ceb4:	e001      	b.n	800ceba <USBD_GetString+0x42>
 800ceb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cebe:	7dfb      	ldrb	r3, [r7, #23]
 800cec0:	68ba      	ldr	r2, [r7, #8]
 800cec2:	4413      	add	r3, r2
 800cec4:	687a      	ldr	r2, [r7, #4]
 800cec6:	7812      	ldrb	r2, [r2, #0]
 800cec8:	701a      	strb	r2, [r3, #0]
  idx++;
 800ceca:	7dfb      	ldrb	r3, [r7, #23]
 800cecc:	3301      	adds	r3, #1
 800cece:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ced0:	7dfb      	ldrb	r3, [r7, #23]
 800ced2:	68ba      	ldr	r2, [r7, #8]
 800ced4:	4413      	add	r3, r2
 800ced6:	2203      	movs	r2, #3
 800ced8:	701a      	strb	r2, [r3, #0]
  idx++;
 800ceda:	7dfb      	ldrb	r3, [r7, #23]
 800cedc:	3301      	adds	r3, #1
 800cede:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cee0:	e013      	b.n	800cf0a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800cee2:	7dfb      	ldrb	r3, [r7, #23]
 800cee4:	68ba      	ldr	r2, [r7, #8]
 800cee6:	4413      	add	r3, r2
 800cee8:	693a      	ldr	r2, [r7, #16]
 800ceea:	7812      	ldrb	r2, [r2, #0]
 800ceec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	3301      	adds	r3, #1
 800cef2:	613b      	str	r3, [r7, #16]
    idx++;
 800cef4:	7dfb      	ldrb	r3, [r7, #23]
 800cef6:	3301      	adds	r3, #1
 800cef8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cefa:	7dfb      	ldrb	r3, [r7, #23]
 800cefc:	68ba      	ldr	r2, [r7, #8]
 800cefe:	4413      	add	r3, r2
 800cf00:	2200      	movs	r2, #0
 800cf02:	701a      	strb	r2, [r3, #0]
    idx++;
 800cf04:	7dfb      	ldrb	r3, [r7, #23]
 800cf06:	3301      	adds	r3, #1
 800cf08:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	781b      	ldrb	r3, [r3, #0]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d1e7      	bne.n	800cee2 <USBD_GetString+0x6a>
 800cf12:	e000      	b.n	800cf16 <USBD_GetString+0x9e>
    return;
 800cf14:	bf00      	nop
  }
}
 800cf16:	3718      	adds	r7, #24
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}

0800cf1c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b085      	sub	sp, #20
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cf24:	2300      	movs	r3, #0
 800cf26:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cf2c:	e005      	b.n	800cf3a <USBD_GetLen+0x1e>
  {
    len++;
 800cf2e:	7bfb      	ldrb	r3, [r7, #15]
 800cf30:	3301      	adds	r3, #1
 800cf32:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	3301      	adds	r3, #1
 800cf38:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	781b      	ldrb	r3, [r3, #0]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d1f5      	bne.n	800cf2e <USBD_GetLen+0x12>
  }

  return len;
 800cf42:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	3714      	adds	r7, #20
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr

0800cf50 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b084      	sub	sp, #16
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	60f8      	str	r0, [r7, #12]
 800cf58:	60b9      	str	r1, [r7, #8]
 800cf5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	2202      	movs	r2, #2
 800cf60:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	687a      	ldr	r2, [r7, #4]
 800cf68:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	687a      	ldr	r2, [r7, #4]
 800cf6e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	68ba      	ldr	r2, [r7, #8]
 800cf74:	2100      	movs	r1, #0
 800cf76:	68f8      	ldr	r0, [r7, #12]
 800cf78:	f000 fd55 	bl	800da26 <USBD_LL_Transmit>

  return USBD_OK;
 800cf7c:	2300      	movs	r3, #0
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3710      	adds	r7, #16
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}

0800cf86 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cf86:	b580      	push	{r7, lr}
 800cf88:	b084      	sub	sp, #16
 800cf8a:	af00      	add	r7, sp, #0
 800cf8c:	60f8      	str	r0, [r7, #12]
 800cf8e:	60b9      	str	r1, [r7, #8]
 800cf90:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	68ba      	ldr	r2, [r7, #8]
 800cf96:	2100      	movs	r1, #0
 800cf98:	68f8      	ldr	r0, [r7, #12]
 800cf9a:	f000 fd44 	bl	800da26 <USBD_LL_Transmit>

  return USBD_OK;
 800cf9e:	2300      	movs	r3, #0
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3710      	adds	r7, #16
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}

0800cfa8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b084      	sub	sp, #16
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	60f8      	str	r0, [r7, #12]
 800cfb0:	60b9      	str	r1, [r7, #8]
 800cfb2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	2203      	movs	r2, #3
 800cfb8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	687a      	ldr	r2, [r7, #4]
 800cfc0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	687a      	ldr	r2, [r7, #4]
 800cfc8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	68ba      	ldr	r2, [r7, #8]
 800cfd0:	2100      	movs	r1, #0
 800cfd2:	68f8      	ldr	r0, [r7, #12]
 800cfd4:	f000 fd48 	bl	800da68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cfd8:	2300      	movs	r3, #0
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3710      	adds	r7, #16
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}

0800cfe2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cfe2:	b580      	push	{r7, lr}
 800cfe4:	b084      	sub	sp, #16
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	60f8      	str	r0, [r7, #12]
 800cfea:	60b9      	str	r1, [r7, #8]
 800cfec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	68ba      	ldr	r2, [r7, #8]
 800cff2:	2100      	movs	r1, #0
 800cff4:	68f8      	ldr	r0, [r7, #12]
 800cff6:	f000 fd37 	bl	800da68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cffa:	2300      	movs	r3, #0
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3710      	adds	r7, #16
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}

0800d004 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b082      	sub	sp, #8
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2204      	movs	r2, #4
 800d010:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d014:	2300      	movs	r3, #0
 800d016:	2200      	movs	r2, #0
 800d018:	2100      	movs	r1, #0
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f000 fd03 	bl	800da26 <USBD_LL_Transmit>

  return USBD_OK;
 800d020:	2300      	movs	r3, #0
}
 800d022:	4618      	mov	r0, r3
 800d024:	3708      	adds	r7, #8
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}

0800d02a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d02a:	b580      	push	{r7, lr}
 800d02c:	b082      	sub	sp, #8
 800d02e:	af00      	add	r7, sp, #0
 800d030:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2205      	movs	r2, #5
 800d036:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d03a:	2300      	movs	r3, #0
 800d03c:	2200      	movs	r2, #0
 800d03e:	2100      	movs	r1, #0
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f000 fd11 	bl	800da68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d046:	2300      	movs	r3, #0
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3708      	adds	r7, #8
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}

0800d050 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d050:	b480      	push	{r7}
 800d052:	b087      	sub	sp, #28
 800d054:	af00      	add	r7, sp, #0
 800d056:	60f8      	str	r0, [r7, #12]
 800d058:	60b9      	str	r1, [r7, #8]
 800d05a:	4613      	mov	r3, r2
 800d05c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d05e:	2301      	movs	r3, #1
 800d060:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d062:	2300      	movs	r3, #0
 800d064:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d066:	4b1f      	ldr	r3, [pc, #124]	@ (800d0e4 <FATFS_LinkDriverEx+0x94>)
 800d068:	7a5b      	ldrb	r3, [r3, #9]
 800d06a:	b2db      	uxtb	r3, r3
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d131      	bne.n	800d0d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d070:	4b1c      	ldr	r3, [pc, #112]	@ (800d0e4 <FATFS_LinkDriverEx+0x94>)
 800d072:	7a5b      	ldrb	r3, [r3, #9]
 800d074:	b2db      	uxtb	r3, r3
 800d076:	461a      	mov	r2, r3
 800d078:	4b1a      	ldr	r3, [pc, #104]	@ (800d0e4 <FATFS_LinkDriverEx+0x94>)
 800d07a:	2100      	movs	r1, #0
 800d07c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d07e:	4b19      	ldr	r3, [pc, #100]	@ (800d0e4 <FATFS_LinkDriverEx+0x94>)
 800d080:	7a5b      	ldrb	r3, [r3, #9]
 800d082:	b2db      	uxtb	r3, r3
 800d084:	4a17      	ldr	r2, [pc, #92]	@ (800d0e4 <FATFS_LinkDriverEx+0x94>)
 800d086:	009b      	lsls	r3, r3, #2
 800d088:	4413      	add	r3, r2
 800d08a:	68fa      	ldr	r2, [r7, #12]
 800d08c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d08e:	4b15      	ldr	r3, [pc, #84]	@ (800d0e4 <FATFS_LinkDriverEx+0x94>)
 800d090:	7a5b      	ldrb	r3, [r3, #9]
 800d092:	b2db      	uxtb	r3, r3
 800d094:	461a      	mov	r2, r3
 800d096:	4b13      	ldr	r3, [pc, #76]	@ (800d0e4 <FATFS_LinkDriverEx+0x94>)
 800d098:	4413      	add	r3, r2
 800d09a:	79fa      	ldrb	r2, [r7, #7]
 800d09c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d09e:	4b11      	ldr	r3, [pc, #68]	@ (800d0e4 <FATFS_LinkDriverEx+0x94>)
 800d0a0:	7a5b      	ldrb	r3, [r3, #9]
 800d0a2:	b2db      	uxtb	r3, r3
 800d0a4:	1c5a      	adds	r2, r3, #1
 800d0a6:	b2d1      	uxtb	r1, r2
 800d0a8:	4a0e      	ldr	r2, [pc, #56]	@ (800d0e4 <FATFS_LinkDriverEx+0x94>)
 800d0aa:	7251      	strb	r1, [r2, #9]
 800d0ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d0ae:	7dbb      	ldrb	r3, [r7, #22]
 800d0b0:	3330      	adds	r3, #48	@ 0x30
 800d0b2:	b2da      	uxtb	r2, r3
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	223a      	movs	r2, #58	@ 0x3a
 800d0be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	3302      	adds	r3, #2
 800d0c4:	222f      	movs	r2, #47	@ 0x2f
 800d0c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	3303      	adds	r3, #3
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d0d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	371c      	adds	r7, #28
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr
 800d0e2:	bf00      	nop
 800d0e4:	20000a04 	.word	0x20000a04

0800d0e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b082      	sub	sp, #8
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	6839      	ldr	r1, [r7, #0]
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f7ff ffaa 	bl	800d050 <FATFS_LinkDriverEx>
 800d0fc:	4603      	mov	r3, r0
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3708      	adds	r7, #8
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
	...

0800d108 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d10c:	2200      	movs	r2, #0
 800d10e:	4912      	ldr	r1, [pc, #72]	@ (800d158 <MX_USB_DEVICE_Init+0x50>)
 800d110:	4812      	ldr	r0, [pc, #72]	@ (800d15c <MX_USB_DEVICE_Init+0x54>)
 800d112:	f7fe fc71 	bl	800b9f8 <USBD_Init>
 800d116:	4603      	mov	r3, r0
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d001      	beq.n	800d120 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d11c:	f7f4 f8c4 	bl	80012a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d120:	490f      	ldr	r1, [pc, #60]	@ (800d160 <MX_USB_DEVICE_Init+0x58>)
 800d122:	480e      	ldr	r0, [pc, #56]	@ (800d15c <MX_USB_DEVICE_Init+0x54>)
 800d124:	f7fe fc98 	bl	800ba58 <USBD_RegisterClass>
 800d128:	4603      	mov	r3, r0
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d001      	beq.n	800d132 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d12e:	f7f4 f8bb 	bl	80012a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d132:	490c      	ldr	r1, [pc, #48]	@ (800d164 <MX_USB_DEVICE_Init+0x5c>)
 800d134:	4809      	ldr	r0, [pc, #36]	@ (800d15c <MX_USB_DEVICE_Init+0x54>)
 800d136:	f7fe fbcf 	bl	800b8d8 <USBD_CDC_RegisterInterface>
 800d13a:	4603      	mov	r3, r0
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d001      	beq.n	800d144 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d140:	f7f4 f8b2 	bl	80012a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d144:	4805      	ldr	r0, [pc, #20]	@ (800d15c <MX_USB_DEVICE_Init+0x54>)
 800d146:	f7fe fcbd 	bl	800bac4 <USBD_Start>
 800d14a:	4603      	mov	r3, r0
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d001      	beq.n	800d154 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d150:	f7f4 f8aa 	bl	80012a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d154:	bf00      	nop
 800d156:	bd80      	pop	{r7, pc}
 800d158:	200000ac 	.word	0x200000ac
 800d15c:	20000a10 	.word	0x20000a10
 800d160:	20000018 	.word	0x20000018
 800d164:	20000098 	.word	0x20000098

0800d168 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d16c:	2200      	movs	r2, #0
 800d16e:	4905      	ldr	r1, [pc, #20]	@ (800d184 <CDC_Init_FS+0x1c>)
 800d170:	4805      	ldr	r0, [pc, #20]	@ (800d188 <CDC_Init_FS+0x20>)
 800d172:	f7fe fbcb 	bl	800b90c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d176:	4905      	ldr	r1, [pc, #20]	@ (800d18c <CDC_Init_FS+0x24>)
 800d178:	4803      	ldr	r0, [pc, #12]	@ (800d188 <CDC_Init_FS+0x20>)
 800d17a:	f7fe fbe9 	bl	800b950 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d17e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d180:	4618      	mov	r0, r3
 800d182:	bd80      	pop	{r7, pc}
 800d184:	200014ec 	.word	0x200014ec
 800d188:	20000a10 	.word	0x20000a10
 800d18c:	20000cec 	.word	0x20000cec

0800d190 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d190:	b480      	push	{r7}
 800d192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d194:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d196:	4618      	mov	r0, r3
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr

0800d1a0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b083      	sub	sp, #12
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	6039      	str	r1, [r7, #0]
 800d1aa:	71fb      	strb	r3, [r7, #7]
 800d1ac:	4613      	mov	r3, r2
 800d1ae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d1b0:	79fb      	ldrb	r3, [r7, #7]
 800d1b2:	2b23      	cmp	r3, #35	@ 0x23
 800d1b4:	d84a      	bhi.n	800d24c <CDC_Control_FS+0xac>
 800d1b6:	a201      	add	r2, pc, #4	@ (adr r2, 800d1bc <CDC_Control_FS+0x1c>)
 800d1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1bc:	0800d24d 	.word	0x0800d24d
 800d1c0:	0800d24d 	.word	0x0800d24d
 800d1c4:	0800d24d 	.word	0x0800d24d
 800d1c8:	0800d24d 	.word	0x0800d24d
 800d1cc:	0800d24d 	.word	0x0800d24d
 800d1d0:	0800d24d 	.word	0x0800d24d
 800d1d4:	0800d24d 	.word	0x0800d24d
 800d1d8:	0800d24d 	.word	0x0800d24d
 800d1dc:	0800d24d 	.word	0x0800d24d
 800d1e0:	0800d24d 	.word	0x0800d24d
 800d1e4:	0800d24d 	.word	0x0800d24d
 800d1e8:	0800d24d 	.word	0x0800d24d
 800d1ec:	0800d24d 	.word	0x0800d24d
 800d1f0:	0800d24d 	.word	0x0800d24d
 800d1f4:	0800d24d 	.word	0x0800d24d
 800d1f8:	0800d24d 	.word	0x0800d24d
 800d1fc:	0800d24d 	.word	0x0800d24d
 800d200:	0800d24d 	.word	0x0800d24d
 800d204:	0800d24d 	.word	0x0800d24d
 800d208:	0800d24d 	.word	0x0800d24d
 800d20c:	0800d24d 	.word	0x0800d24d
 800d210:	0800d24d 	.word	0x0800d24d
 800d214:	0800d24d 	.word	0x0800d24d
 800d218:	0800d24d 	.word	0x0800d24d
 800d21c:	0800d24d 	.word	0x0800d24d
 800d220:	0800d24d 	.word	0x0800d24d
 800d224:	0800d24d 	.word	0x0800d24d
 800d228:	0800d24d 	.word	0x0800d24d
 800d22c:	0800d24d 	.word	0x0800d24d
 800d230:	0800d24d 	.word	0x0800d24d
 800d234:	0800d24d 	.word	0x0800d24d
 800d238:	0800d24d 	.word	0x0800d24d
 800d23c:	0800d24d 	.word	0x0800d24d
 800d240:	0800d24d 	.word	0x0800d24d
 800d244:	0800d24d 	.word	0x0800d24d
 800d248:	0800d24d 	.word	0x0800d24d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d24c:	bf00      	nop
  }

  return (USBD_OK);
 800d24e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d250:	4618      	mov	r0, r3
 800d252:	370c      	adds	r7, #12
 800d254:	46bd      	mov	sp, r7
 800d256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25a:	4770      	bx	lr

0800d25c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d266:	6879      	ldr	r1, [r7, #4]
 800d268:	4805      	ldr	r0, [pc, #20]	@ (800d280 <CDC_Receive_FS+0x24>)
 800d26a:	f7fe fb71 	bl	800b950 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d26e:	4804      	ldr	r0, [pc, #16]	@ (800d280 <CDC_Receive_FS+0x24>)
 800d270:	f7fe fb8c 	bl	800b98c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d274:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d276:	4618      	mov	r0, r3
 800d278:	3708      	adds	r7, #8
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}
 800d27e:	bf00      	nop
 800d280:	20000a10 	.word	0x20000a10

0800d284 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d284:	b480      	push	{r7}
 800d286:	b087      	sub	sp, #28
 800d288:	af00      	add	r7, sp, #0
 800d28a:	60f8      	str	r0, [r7, #12]
 800d28c:	60b9      	str	r1, [r7, #8]
 800d28e:	4613      	mov	r3, r2
 800d290:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d292:	2300      	movs	r3, #0
 800d294:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d296:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	371c      	adds	r7, #28
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a4:	4770      	bx	lr
	...

0800d2a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b083      	sub	sp, #12
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	6039      	str	r1, [r7, #0]
 800d2b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	2212      	movs	r2, #18
 800d2b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d2ba:	4b03      	ldr	r3, [pc, #12]	@ (800d2c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	370c      	adds	r7, #12
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c6:	4770      	bx	lr
 800d2c8:	200000cc 	.word	0x200000cc

0800d2cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b083      	sub	sp, #12
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	6039      	str	r1, [r7, #0]
 800d2d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	2204      	movs	r2, #4
 800d2dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d2de:	4b03      	ldr	r3, [pc, #12]	@ (800d2ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	370c      	adds	r7, #12
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr
 800d2ec:	200000ec 	.word	0x200000ec

0800d2f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b082      	sub	sp, #8
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	6039      	str	r1, [r7, #0]
 800d2fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d2fc:	79fb      	ldrb	r3, [r7, #7]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d105      	bne.n	800d30e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d302:	683a      	ldr	r2, [r7, #0]
 800d304:	4907      	ldr	r1, [pc, #28]	@ (800d324 <USBD_FS_ProductStrDescriptor+0x34>)
 800d306:	4808      	ldr	r0, [pc, #32]	@ (800d328 <USBD_FS_ProductStrDescriptor+0x38>)
 800d308:	f7ff fdb6 	bl	800ce78 <USBD_GetString>
 800d30c:	e004      	b.n	800d318 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d30e:	683a      	ldr	r2, [r7, #0]
 800d310:	4904      	ldr	r1, [pc, #16]	@ (800d324 <USBD_FS_ProductStrDescriptor+0x34>)
 800d312:	4805      	ldr	r0, [pc, #20]	@ (800d328 <USBD_FS_ProductStrDescriptor+0x38>)
 800d314:	f7ff fdb0 	bl	800ce78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d318:	4b02      	ldr	r3, [pc, #8]	@ (800d324 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3708      	adds	r7, #8
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	20001cec 	.word	0x20001cec
 800d328:	0800de80 	.word	0x0800de80

0800d32c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b082      	sub	sp, #8
 800d330:	af00      	add	r7, sp, #0
 800d332:	4603      	mov	r3, r0
 800d334:	6039      	str	r1, [r7, #0]
 800d336:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d338:	683a      	ldr	r2, [r7, #0]
 800d33a:	4904      	ldr	r1, [pc, #16]	@ (800d34c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d33c:	4804      	ldr	r0, [pc, #16]	@ (800d350 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d33e:	f7ff fd9b 	bl	800ce78 <USBD_GetString>
  return USBD_StrDesc;
 800d342:	4b02      	ldr	r3, [pc, #8]	@ (800d34c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d344:	4618      	mov	r0, r3
 800d346:	3708      	adds	r7, #8
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}
 800d34c:	20001cec 	.word	0x20001cec
 800d350:	0800de98 	.word	0x0800de98

0800d354 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b082      	sub	sp, #8
 800d358:	af00      	add	r7, sp, #0
 800d35a:	4603      	mov	r3, r0
 800d35c:	6039      	str	r1, [r7, #0]
 800d35e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	221a      	movs	r2, #26
 800d364:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d366:	f000 f855 	bl	800d414 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d36a:	4b02      	ldr	r3, [pc, #8]	@ (800d374 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3708      	adds	r7, #8
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}
 800d374:	200000f0 	.word	0x200000f0

0800d378 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b082      	sub	sp, #8
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	4603      	mov	r3, r0
 800d380:	6039      	str	r1, [r7, #0]
 800d382:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d384:	79fb      	ldrb	r3, [r7, #7]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d105      	bne.n	800d396 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d38a:	683a      	ldr	r2, [r7, #0]
 800d38c:	4907      	ldr	r1, [pc, #28]	@ (800d3ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800d38e:	4808      	ldr	r0, [pc, #32]	@ (800d3b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d390:	f7ff fd72 	bl	800ce78 <USBD_GetString>
 800d394:	e004      	b.n	800d3a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d396:	683a      	ldr	r2, [r7, #0]
 800d398:	4904      	ldr	r1, [pc, #16]	@ (800d3ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800d39a:	4805      	ldr	r0, [pc, #20]	@ (800d3b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d39c:	f7ff fd6c 	bl	800ce78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d3a0:	4b02      	ldr	r3, [pc, #8]	@ (800d3ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3708      	adds	r7, #8
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}
 800d3aa:	bf00      	nop
 800d3ac:	20001cec 	.word	0x20001cec
 800d3b0:	0800deac 	.word	0x0800deac

0800d3b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b082      	sub	sp, #8
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	6039      	str	r1, [r7, #0]
 800d3be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d3c0:	79fb      	ldrb	r3, [r7, #7]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d105      	bne.n	800d3d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d3c6:	683a      	ldr	r2, [r7, #0]
 800d3c8:	4907      	ldr	r1, [pc, #28]	@ (800d3e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d3ca:	4808      	ldr	r0, [pc, #32]	@ (800d3ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d3cc:	f7ff fd54 	bl	800ce78 <USBD_GetString>
 800d3d0:	e004      	b.n	800d3dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d3d2:	683a      	ldr	r2, [r7, #0]
 800d3d4:	4904      	ldr	r1, [pc, #16]	@ (800d3e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d3d6:	4805      	ldr	r0, [pc, #20]	@ (800d3ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d3d8:	f7ff fd4e 	bl	800ce78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d3dc:	4b02      	ldr	r3, [pc, #8]	@ (800d3e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3708      	adds	r7, #8
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}
 800d3e6:	bf00      	nop
 800d3e8:	20001cec 	.word	0x20001cec
 800d3ec:	0800deb8 	.word	0x0800deb8

0800d3f0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	b083      	sub	sp, #12
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	6039      	str	r1, [r7, #0]
 800d3fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	220c      	movs	r2, #12
 800d400:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d402:	4b03      	ldr	r3, [pc, #12]	@ (800d410 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d404:	4618      	mov	r0, r3
 800d406:	370c      	adds	r7, #12
 800d408:	46bd      	mov	sp, r7
 800d40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40e:	4770      	bx	lr
 800d410:	200000e0 	.word	0x200000e0

0800d414 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b084      	sub	sp, #16
 800d418:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d41a:	4b0f      	ldr	r3, [pc, #60]	@ (800d458 <Get_SerialNum+0x44>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d420:	4b0e      	ldr	r3, [pc, #56]	@ (800d45c <Get_SerialNum+0x48>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d426:	4b0e      	ldr	r3, [pc, #56]	@ (800d460 <Get_SerialNum+0x4c>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d42c:	68fa      	ldr	r2, [r7, #12]
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	4413      	add	r3, r2
 800d432:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d009      	beq.n	800d44e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d43a:	2208      	movs	r2, #8
 800d43c:	4909      	ldr	r1, [pc, #36]	@ (800d464 <Get_SerialNum+0x50>)
 800d43e:	68f8      	ldr	r0, [r7, #12]
 800d440:	f000 f814 	bl	800d46c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d444:	2204      	movs	r2, #4
 800d446:	4908      	ldr	r1, [pc, #32]	@ (800d468 <Get_SerialNum+0x54>)
 800d448:	68b8      	ldr	r0, [r7, #8]
 800d44a:	f000 f80f 	bl	800d46c <IntToUnicode>
  }
}
 800d44e:	bf00      	nop
 800d450:	3710      	adds	r7, #16
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}
 800d456:	bf00      	nop
 800d458:	1ff07a10 	.word	0x1ff07a10
 800d45c:	1ff07a14 	.word	0x1ff07a14
 800d460:	1ff07a18 	.word	0x1ff07a18
 800d464:	200000f2 	.word	0x200000f2
 800d468:	20000102 	.word	0x20000102

0800d46c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d46c:	b480      	push	{r7}
 800d46e:	b087      	sub	sp, #28
 800d470:	af00      	add	r7, sp, #0
 800d472:	60f8      	str	r0, [r7, #12]
 800d474:	60b9      	str	r1, [r7, #8]
 800d476:	4613      	mov	r3, r2
 800d478:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d47a:	2300      	movs	r3, #0
 800d47c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d47e:	2300      	movs	r3, #0
 800d480:	75fb      	strb	r3, [r7, #23]
 800d482:	e027      	b.n	800d4d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	0f1b      	lsrs	r3, r3, #28
 800d488:	2b09      	cmp	r3, #9
 800d48a:	d80b      	bhi.n	800d4a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	0f1b      	lsrs	r3, r3, #28
 800d490:	b2da      	uxtb	r2, r3
 800d492:	7dfb      	ldrb	r3, [r7, #23]
 800d494:	005b      	lsls	r3, r3, #1
 800d496:	4619      	mov	r1, r3
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	440b      	add	r3, r1
 800d49c:	3230      	adds	r2, #48	@ 0x30
 800d49e:	b2d2      	uxtb	r2, r2
 800d4a0:	701a      	strb	r2, [r3, #0]
 800d4a2:	e00a      	b.n	800d4ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	0f1b      	lsrs	r3, r3, #28
 800d4a8:	b2da      	uxtb	r2, r3
 800d4aa:	7dfb      	ldrb	r3, [r7, #23]
 800d4ac:	005b      	lsls	r3, r3, #1
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	440b      	add	r3, r1
 800d4b4:	3237      	adds	r2, #55	@ 0x37
 800d4b6:	b2d2      	uxtb	r2, r2
 800d4b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	011b      	lsls	r3, r3, #4
 800d4be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d4c0:	7dfb      	ldrb	r3, [r7, #23]
 800d4c2:	005b      	lsls	r3, r3, #1
 800d4c4:	3301      	adds	r3, #1
 800d4c6:	68ba      	ldr	r2, [r7, #8]
 800d4c8:	4413      	add	r3, r2
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d4ce:	7dfb      	ldrb	r3, [r7, #23]
 800d4d0:	3301      	adds	r3, #1
 800d4d2:	75fb      	strb	r3, [r7, #23]
 800d4d4:	7dfa      	ldrb	r2, [r7, #23]
 800d4d6:	79fb      	ldrb	r3, [r7, #7]
 800d4d8:	429a      	cmp	r2, r3
 800d4da:	d3d3      	bcc.n	800d484 <IntToUnicode+0x18>
  }
}
 800d4dc:	bf00      	nop
 800d4de:	bf00      	nop
 800d4e0:	371c      	adds	r7, #28
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e8:	4770      	bx	lr
	...

0800d4ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b0aa      	sub	sp, #168	@ 0xa8
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d4f4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	601a      	str	r2, [r3, #0]
 800d4fc:	605a      	str	r2, [r3, #4]
 800d4fe:	609a      	str	r2, [r3, #8]
 800d500:	60da      	str	r2, [r3, #12]
 800d502:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d504:	f107 0314 	add.w	r3, r7, #20
 800d508:	2280      	movs	r2, #128	@ 0x80
 800d50a:	2100      	movs	r1, #0
 800d50c:	4618      	mov	r0, r3
 800d50e:	f000 fc1d 	bl	800dd4c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d51a:	d151      	bne.n	800d5c0 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800d51c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d520:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800d522:	2300      	movs	r3, #0
 800d524:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d528:	f107 0314 	add.w	r3, r7, #20
 800d52c:	4618      	mov	r0, r3
 800d52e:	f7f7 ffe3 	bl	80054f8 <HAL_RCCEx_PeriphCLKConfig>
 800d532:	4603      	mov	r3, r0
 800d534:	2b00      	cmp	r3, #0
 800d536:	d001      	beq.n	800d53c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800d538:	f7f3 feb6 	bl	80012a8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d53c:	4b22      	ldr	r3, [pc, #136]	@ (800d5c8 <HAL_PCD_MspInit+0xdc>)
 800d53e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d540:	4a21      	ldr	r2, [pc, #132]	@ (800d5c8 <HAL_PCD_MspInit+0xdc>)
 800d542:	f043 0301 	orr.w	r3, r3, #1
 800d546:	6313      	str	r3, [r2, #48]	@ 0x30
 800d548:	4b1f      	ldr	r3, [pc, #124]	@ (800d5c8 <HAL_PCD_MspInit+0xdc>)
 800d54a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d54c:	f003 0301 	and.w	r3, r3, #1
 800d550:	613b      	str	r3, [r7, #16]
 800d552:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d554:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d558:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d55c:	2302      	movs	r3, #2
 800d55e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d562:	2300      	movs	r3, #0
 800d564:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d568:	2303      	movs	r3, #3
 800d56a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d56e:	230a      	movs	r3, #10
 800d570:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d574:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800d578:	4619      	mov	r1, r3
 800d57a:	4814      	ldr	r0, [pc, #80]	@ (800d5cc <HAL_PCD_MspInit+0xe0>)
 800d57c:	f7f5 fcec 	bl	8002f58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d580:	4b11      	ldr	r3, [pc, #68]	@ (800d5c8 <HAL_PCD_MspInit+0xdc>)
 800d582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d584:	4a10      	ldr	r2, [pc, #64]	@ (800d5c8 <HAL_PCD_MspInit+0xdc>)
 800d586:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d58a:	6353      	str	r3, [r2, #52]	@ 0x34
 800d58c:	4b0e      	ldr	r3, [pc, #56]	@ (800d5c8 <HAL_PCD_MspInit+0xdc>)
 800d58e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d590:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d594:	60fb      	str	r3, [r7, #12]
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	4b0b      	ldr	r3, [pc, #44]	@ (800d5c8 <HAL_PCD_MspInit+0xdc>)
 800d59a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d59c:	4a0a      	ldr	r2, [pc, #40]	@ (800d5c8 <HAL_PCD_MspInit+0xdc>)
 800d59e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d5a2:	6453      	str	r3, [r2, #68]	@ 0x44
 800d5a4:	4b08      	ldr	r3, [pc, #32]	@ (800d5c8 <HAL_PCD_MspInit+0xdc>)
 800d5a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d5ac:	60bb      	str	r3, [r7, #8]
 800d5ae:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	2100      	movs	r1, #0
 800d5b4:	2043      	movs	r0, #67	@ 0x43
 800d5b6:	f7f5 f8a8 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d5ba:	2043      	movs	r0, #67	@ 0x43
 800d5bc:	f7f5 f8c1 	bl	8002742 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d5c0:	bf00      	nop
 800d5c2:	37a8      	adds	r7, #168	@ 0xa8
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}
 800d5c8:	40023800 	.word	0x40023800
 800d5cc:	40020000 	.word	0x40020000

0800d5d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b082      	sub	sp, #8
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d5e4:	4619      	mov	r1, r3
 800d5e6:	4610      	mov	r0, r2
 800d5e8:	f7fe fab9 	bl	800bb5e <USBD_LL_SetupStage>
}
 800d5ec:	bf00      	nop
 800d5ee:	3708      	adds	r7, #8
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800d606:	78fa      	ldrb	r2, [r7, #3]
 800d608:	6879      	ldr	r1, [r7, #4]
 800d60a:	4613      	mov	r3, r2
 800d60c:	00db      	lsls	r3, r3, #3
 800d60e:	4413      	add	r3, r2
 800d610:	009b      	lsls	r3, r3, #2
 800d612:	440b      	add	r3, r1
 800d614:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d618:	681a      	ldr	r2, [r3, #0]
 800d61a:	78fb      	ldrb	r3, [r7, #3]
 800d61c:	4619      	mov	r1, r3
 800d61e:	f7fe faf3 	bl	800bc08 <USBD_LL_DataOutStage>
}
 800d622:	bf00      	nop
 800d624:	3708      	adds	r7, #8
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}

0800d62a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d62a:	b580      	push	{r7, lr}
 800d62c:	b082      	sub	sp, #8
 800d62e:	af00      	add	r7, sp, #0
 800d630:	6078      	str	r0, [r7, #4]
 800d632:	460b      	mov	r3, r1
 800d634:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800d63c:	78fa      	ldrb	r2, [r7, #3]
 800d63e:	6879      	ldr	r1, [r7, #4]
 800d640:	4613      	mov	r3, r2
 800d642:	00db      	lsls	r3, r3, #3
 800d644:	4413      	add	r3, r2
 800d646:	009b      	lsls	r3, r3, #2
 800d648:	440b      	add	r3, r1
 800d64a:	3320      	adds	r3, #32
 800d64c:	681a      	ldr	r2, [r3, #0]
 800d64e:	78fb      	ldrb	r3, [r7, #3]
 800d650:	4619      	mov	r1, r3
 800d652:	f7fe fb8c 	bl	800bd6e <USBD_LL_DataInStage>
}
 800d656:	bf00      	nop
 800d658:	3708      	adds	r7, #8
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}

0800d65e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d65e:	b580      	push	{r7, lr}
 800d660:	b082      	sub	sp, #8
 800d662:	af00      	add	r7, sp, #0
 800d664:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d66c:	4618      	mov	r0, r3
 800d66e:	f7fe fcc6 	bl	800bffe <USBD_LL_SOF>
}
 800d672:	bf00      	nop
 800d674:	3708      	adds	r7, #8
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}

0800d67a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d67a:	b580      	push	{r7, lr}
 800d67c:	b084      	sub	sp, #16
 800d67e:	af00      	add	r7, sp, #0
 800d680:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d682:	2301      	movs	r3, #1
 800d684:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	79db      	ldrb	r3, [r3, #7]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d102      	bne.n	800d694 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d68e:	2300      	movs	r3, #0
 800d690:	73fb      	strb	r3, [r7, #15]
 800d692:	e008      	b.n	800d6a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	79db      	ldrb	r3, [r3, #7]
 800d698:	2b02      	cmp	r3, #2
 800d69a:	d102      	bne.n	800d6a2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d69c:	2301      	movs	r3, #1
 800d69e:	73fb      	strb	r3, [r7, #15]
 800d6a0:	e001      	b.n	800d6a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d6a2:	f7f3 fe01 	bl	80012a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d6ac:	7bfa      	ldrb	r2, [r7, #15]
 800d6ae:	4611      	mov	r1, r2
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f7fe fc60 	bl	800bf76 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7fe fc08 	bl	800bed2 <USBD_LL_Reset>
}
 800d6c2:	bf00      	nop
 800d6c4:	3710      	adds	r7, #16
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
	...

0800d6cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b082      	sub	sp, #8
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f7fe fc5b 	bl	800bf96 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	687a      	ldr	r2, [r7, #4]
 800d6ec:	6812      	ldr	r2, [r2, #0]
 800d6ee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d6f2:	f043 0301 	orr.w	r3, r3, #1
 800d6f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	7adb      	ldrb	r3, [r3, #11]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d005      	beq.n	800d70c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d700:	4b04      	ldr	r3, [pc, #16]	@ (800d714 <HAL_PCD_SuspendCallback+0x48>)
 800d702:	691b      	ldr	r3, [r3, #16]
 800d704:	4a03      	ldr	r2, [pc, #12]	@ (800d714 <HAL_PCD_SuspendCallback+0x48>)
 800d706:	f043 0306 	orr.w	r3, r3, #6
 800d70a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d70c:	bf00      	nop
 800d70e:	3708      	adds	r7, #8
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}
 800d714:	e000ed00 	.word	0xe000ed00

0800d718 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b082      	sub	sp, #8
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d726:	4618      	mov	r0, r3
 800d728:	f7fe fc51 	bl	800bfce <USBD_LL_Resume>
}
 800d72c:	bf00      	nop
 800d72e:	3708      	adds	r7, #8
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}

0800d734 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b082      	sub	sp, #8
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	460b      	mov	r3, r1
 800d73e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d746:	78fa      	ldrb	r2, [r7, #3]
 800d748:	4611      	mov	r1, r2
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7fe fca9 	bl	800c0a2 <USBD_LL_IsoOUTIncomplete>
}
 800d750:	bf00      	nop
 800d752:	3708      	adds	r7, #8
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}

0800d758 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b082      	sub	sp, #8
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	460b      	mov	r3, r1
 800d762:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d76a:	78fa      	ldrb	r2, [r7, #3]
 800d76c:	4611      	mov	r1, r2
 800d76e:	4618      	mov	r0, r3
 800d770:	f7fe fc65 	bl	800c03e <USBD_LL_IsoINIncomplete>
}
 800d774:	bf00      	nop
 800d776:	3708      	adds	r7, #8
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b082      	sub	sp, #8
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d78a:	4618      	mov	r0, r3
 800d78c:	f7fe fcbb 	bl	800c106 <USBD_LL_DevConnected>
}
 800d790:	bf00      	nop
 800d792:	3708      	adds	r7, #8
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}

0800d798 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7fe fcb8 	bl	800c11c <USBD_LL_DevDisconnected>
}
 800d7ac:	bf00      	nop
 800d7ae:	3708      	adds	r7, #8
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b082      	sub	sp, #8
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	781b      	ldrb	r3, [r3, #0]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d13f      	bne.n	800d844 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d7c4:	4a22      	ldr	r2, [pc, #136]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	4a20      	ldr	r2, [pc, #128]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d7d0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d7d4:	4b1e      	ldr	r3, [pc, #120]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d7d6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d7da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d7dc:	4b1c      	ldr	r3, [pc, #112]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d7de:	2206      	movs	r2, #6
 800d7e0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d7e2:	4b1b      	ldr	r3, [pc, #108]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d7e4:	2202      	movs	r2, #2
 800d7e6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d7e8:	4b19      	ldr	r3, [pc, #100]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d7ee:	4b18      	ldr	r3, [pc, #96]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d7f0:	2202      	movs	r2, #2
 800d7f2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d7f4:	4b16      	ldr	r3, [pc, #88]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d7fa:	4b15      	ldr	r3, [pc, #84]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d800:	4b13      	ldr	r3, [pc, #76]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d802:	2200      	movs	r2, #0
 800d804:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800d806:	4b12      	ldr	r3, [pc, #72]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d808:	2200      	movs	r2, #0
 800d80a:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d80c:	4b10      	ldr	r3, [pc, #64]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d80e:	2200      	movs	r2, #0
 800d810:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d812:	4b0f      	ldr	r3, [pc, #60]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d814:	2200      	movs	r2, #0
 800d816:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d818:	480d      	ldr	r0, [pc, #52]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d81a:	f7f5 fe9e 	bl	800355a <HAL_PCD_Init>
 800d81e:	4603      	mov	r3, r0
 800d820:	2b00      	cmp	r3, #0
 800d822:	d001      	beq.n	800d828 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800d824:	f7f3 fd40 	bl	80012a8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d828:	2180      	movs	r1, #128	@ 0x80
 800d82a:	4809      	ldr	r0, [pc, #36]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d82c:	f7f7 f8e9 	bl	8004a02 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d830:	2240      	movs	r2, #64	@ 0x40
 800d832:	2100      	movs	r1, #0
 800d834:	4806      	ldr	r0, [pc, #24]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d836:	f7f7 f89d 	bl	8004974 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d83a:	2280      	movs	r2, #128	@ 0x80
 800d83c:	2101      	movs	r1, #1
 800d83e:	4804      	ldr	r0, [pc, #16]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d840:	f7f7 f898 	bl	8004974 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d844:	2300      	movs	r3, #0
}
 800d846:	4618      	mov	r0, r3
 800d848:	3708      	adds	r7, #8
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}
 800d84e:	bf00      	nop
 800d850:	20001eec 	.word	0x20001eec

0800d854 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b084      	sub	sp, #16
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d85c:	2300      	movs	r3, #0
 800d85e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d860:	2300      	movs	r3, #0
 800d862:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7f5 ff8b 	bl	8003786 <HAL_PCD_Start>
 800d870:	4603      	mov	r3, r0
 800d872:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d874:	7bfb      	ldrb	r3, [r7, #15]
 800d876:	4618      	mov	r0, r3
 800d878:	f000 f97e 	bl	800db78 <USBD_Get_USB_Status>
 800d87c:	4603      	mov	r3, r0
 800d87e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d880:	7bbb      	ldrb	r3, [r7, #14]
}
 800d882:	4618      	mov	r0, r3
 800d884:	3710      	adds	r7, #16
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}

0800d88a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d88a:	b580      	push	{r7, lr}
 800d88c:	b084      	sub	sp, #16
 800d88e:	af00      	add	r7, sp, #0
 800d890:	6078      	str	r0, [r7, #4]
 800d892:	4608      	mov	r0, r1
 800d894:	4611      	mov	r1, r2
 800d896:	461a      	mov	r2, r3
 800d898:	4603      	mov	r3, r0
 800d89a:	70fb      	strb	r3, [r7, #3]
 800d89c:	460b      	mov	r3, r1
 800d89e:	70bb      	strb	r3, [r7, #2]
 800d8a0:	4613      	mov	r3, r2
 800d8a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d8b2:	78bb      	ldrb	r3, [r7, #2]
 800d8b4:	883a      	ldrh	r2, [r7, #0]
 800d8b6:	78f9      	ldrb	r1, [r7, #3]
 800d8b8:	f7f6 fc79 	bl	80041ae <HAL_PCD_EP_Open>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8c0:	7bfb      	ldrb	r3, [r7, #15]
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f000 f958 	bl	800db78 <USBD_Get_USB_Status>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3710      	adds	r7, #16
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}

0800d8d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8d6:	b580      	push	{r7, lr}
 800d8d8:	b084      	sub	sp, #16
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	6078      	str	r0, [r7, #4]
 800d8de:	460b      	mov	r3, r1
 800d8e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d8f0:	78fa      	ldrb	r2, [r7, #3]
 800d8f2:	4611      	mov	r1, r2
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f7f6 fcc2 	bl	800427e <HAL_PCD_EP_Close>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8fe:	7bfb      	ldrb	r3, [r7, #15]
 800d900:	4618      	mov	r0, r3
 800d902:	f000 f939 	bl	800db78 <USBD_Get_USB_Status>
 800d906:	4603      	mov	r3, r0
 800d908:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d90a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3710      	adds	r7, #16
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}

0800d914 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b084      	sub	sp, #16
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
 800d91c:	460b      	mov	r3, r1
 800d91e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d920:	2300      	movs	r3, #0
 800d922:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d924:	2300      	movs	r3, #0
 800d926:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d92e:	78fa      	ldrb	r2, [r7, #3]
 800d930:	4611      	mov	r1, r2
 800d932:	4618      	mov	r0, r3
 800d934:	f7f6 fd7a 	bl	800442c <HAL_PCD_EP_SetStall>
 800d938:	4603      	mov	r3, r0
 800d93a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d93c:	7bfb      	ldrb	r3, [r7, #15]
 800d93e:	4618      	mov	r0, r3
 800d940:	f000 f91a 	bl	800db78 <USBD_Get_USB_Status>
 800d944:	4603      	mov	r3, r0
 800d946:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d948:	7bbb      	ldrb	r3, [r7, #14]
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3710      	adds	r7, #16
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}

0800d952 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d952:	b580      	push	{r7, lr}
 800d954:	b084      	sub	sp, #16
 800d956:	af00      	add	r7, sp, #0
 800d958:	6078      	str	r0, [r7, #4]
 800d95a:	460b      	mov	r3, r1
 800d95c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d95e:	2300      	movs	r3, #0
 800d960:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d962:	2300      	movs	r3, #0
 800d964:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d96c:	78fa      	ldrb	r2, [r7, #3]
 800d96e:	4611      	mov	r1, r2
 800d970:	4618      	mov	r0, r3
 800d972:	f7f6 fdbe 	bl	80044f2 <HAL_PCD_EP_ClrStall>
 800d976:	4603      	mov	r3, r0
 800d978:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d97a:	7bfb      	ldrb	r3, [r7, #15]
 800d97c:	4618      	mov	r0, r3
 800d97e:	f000 f8fb 	bl	800db78 <USBD_Get_USB_Status>
 800d982:	4603      	mov	r3, r0
 800d984:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d986:	7bbb      	ldrb	r3, [r7, #14]
}
 800d988:	4618      	mov	r0, r3
 800d98a:	3710      	adds	r7, #16
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}

0800d990 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d990:	b480      	push	{r7}
 800d992:	b085      	sub	sp, #20
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	460b      	mov	r3, r1
 800d99a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d9a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d9a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	da0b      	bge.n	800d9c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d9ac:	78fb      	ldrb	r3, [r7, #3]
 800d9ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d9b2:	68f9      	ldr	r1, [r7, #12]
 800d9b4:	4613      	mov	r3, r2
 800d9b6:	00db      	lsls	r3, r3, #3
 800d9b8:	4413      	add	r3, r2
 800d9ba:	009b      	lsls	r3, r3, #2
 800d9bc:	440b      	add	r3, r1
 800d9be:	3316      	adds	r3, #22
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	e00b      	b.n	800d9dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d9c4:	78fb      	ldrb	r3, [r7, #3]
 800d9c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d9ca:	68f9      	ldr	r1, [r7, #12]
 800d9cc:	4613      	mov	r3, r2
 800d9ce:	00db      	lsls	r3, r3, #3
 800d9d0:	4413      	add	r3, r2
 800d9d2:	009b      	lsls	r3, r3, #2
 800d9d4:	440b      	add	r3, r1
 800d9d6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d9da:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d9dc:	4618      	mov	r0, r3
 800d9de:	3714      	adds	r7, #20
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e6:	4770      	bx	lr

0800d9e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b084      	sub	sp, #16
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
 800d9f0:	460b      	mov	r3, r1
 800d9f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da02:	78fa      	ldrb	r2, [r7, #3]
 800da04:	4611      	mov	r1, r2
 800da06:	4618      	mov	r0, r3
 800da08:	f7f6 fbad 	bl	8004166 <HAL_PCD_SetAddress>
 800da0c:	4603      	mov	r3, r0
 800da0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da10:	7bfb      	ldrb	r3, [r7, #15]
 800da12:	4618      	mov	r0, r3
 800da14:	f000 f8b0 	bl	800db78 <USBD_Get_USB_Status>
 800da18:	4603      	mov	r3, r0
 800da1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3710      	adds	r7, #16
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}

0800da26 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800da26:	b580      	push	{r7, lr}
 800da28:	b086      	sub	sp, #24
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	60f8      	str	r0, [r7, #12]
 800da2e:	607a      	str	r2, [r7, #4]
 800da30:	603b      	str	r3, [r7, #0]
 800da32:	460b      	mov	r3, r1
 800da34:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da36:	2300      	movs	r3, #0
 800da38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da3a:	2300      	movs	r3, #0
 800da3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800da44:	7af9      	ldrb	r1, [r7, #11]
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	687a      	ldr	r2, [r7, #4]
 800da4a:	f7f6 fcb5 	bl	80043b8 <HAL_PCD_EP_Transmit>
 800da4e:	4603      	mov	r3, r0
 800da50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da52:	7dfb      	ldrb	r3, [r7, #23]
 800da54:	4618      	mov	r0, r3
 800da56:	f000 f88f 	bl	800db78 <USBD_Get_USB_Status>
 800da5a:	4603      	mov	r3, r0
 800da5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da5e:	7dbb      	ldrb	r3, [r7, #22]
}
 800da60:	4618      	mov	r0, r3
 800da62:	3718      	adds	r7, #24
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}

0800da68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b086      	sub	sp, #24
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	60f8      	str	r0, [r7, #12]
 800da70:	607a      	str	r2, [r7, #4]
 800da72:	603b      	str	r3, [r7, #0]
 800da74:	460b      	mov	r3, r1
 800da76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da78:	2300      	movs	r3, #0
 800da7a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da7c:	2300      	movs	r3, #0
 800da7e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800da86:	7af9      	ldrb	r1, [r7, #11]
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	687a      	ldr	r2, [r7, #4]
 800da8c:	f7f6 fc41 	bl	8004312 <HAL_PCD_EP_Receive>
 800da90:	4603      	mov	r3, r0
 800da92:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da94:	7dfb      	ldrb	r3, [r7, #23]
 800da96:	4618      	mov	r0, r3
 800da98:	f000 f86e 	bl	800db78 <USBD_Get_USB_Status>
 800da9c:	4603      	mov	r3, r0
 800da9e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800daa0:	7dbb      	ldrb	r3, [r7, #22]
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3718      	adds	r7, #24
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}

0800daaa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800daaa:	b580      	push	{r7, lr}
 800daac:	b082      	sub	sp, #8
 800daae:	af00      	add	r7, sp, #0
 800dab0:	6078      	str	r0, [r7, #4]
 800dab2:	460b      	mov	r3, r1
 800dab4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dabc:	78fa      	ldrb	r2, [r7, #3]
 800dabe:	4611      	mov	r1, r2
 800dac0:	4618      	mov	r0, r3
 800dac2:	f7f6 fc61 	bl	8004388 <HAL_PCD_EP_GetRxCount>
 800dac6:	4603      	mov	r3, r0
}
 800dac8:	4618      	mov	r0, r3
 800daca:	3708      	adds	r7, #8
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}

0800dad0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b082      	sub	sp, #8
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	460b      	mov	r3, r1
 800dada:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800dadc:	78fb      	ldrb	r3, [r7, #3]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d002      	beq.n	800dae8 <HAL_PCDEx_LPM_Callback+0x18>
 800dae2:	2b01      	cmp	r3, #1
 800dae4:	d01f      	beq.n	800db26 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800dae6:	e03b      	b.n	800db60 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	7adb      	ldrb	r3, [r3, #11]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d007      	beq.n	800db00 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800daf0:	f000 f83c 	bl	800db6c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800daf4:	4b1c      	ldr	r3, [pc, #112]	@ (800db68 <HAL_PCDEx_LPM_Callback+0x98>)
 800daf6:	691b      	ldr	r3, [r3, #16]
 800daf8:	4a1b      	ldr	r2, [pc, #108]	@ (800db68 <HAL_PCDEx_LPM_Callback+0x98>)
 800dafa:	f023 0306 	bic.w	r3, r3, #6
 800dafe:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	687a      	ldr	r2, [r7, #4]
 800db0c:	6812      	ldr	r2, [r2, #0]
 800db0e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800db12:	f023 0301 	bic.w	r3, r3, #1
 800db16:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800db1e:	4618      	mov	r0, r3
 800db20:	f7fe fa55 	bl	800bfce <USBD_LL_Resume>
    break;
 800db24:	e01c      	b.n	800db60 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	687a      	ldr	r2, [r7, #4]
 800db32:	6812      	ldr	r2, [r2, #0]
 800db34:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800db38:	f043 0301 	orr.w	r3, r3, #1
 800db3c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800db44:	4618      	mov	r0, r3
 800db46:	f7fe fa26 	bl	800bf96 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	7adb      	ldrb	r3, [r3, #11]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d005      	beq.n	800db5e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800db52:	4b05      	ldr	r3, [pc, #20]	@ (800db68 <HAL_PCDEx_LPM_Callback+0x98>)
 800db54:	691b      	ldr	r3, [r3, #16]
 800db56:	4a04      	ldr	r2, [pc, #16]	@ (800db68 <HAL_PCDEx_LPM_Callback+0x98>)
 800db58:	f043 0306 	orr.w	r3, r3, #6
 800db5c:	6113      	str	r3, [r2, #16]
    break;
 800db5e:	bf00      	nop
}
 800db60:	bf00      	nop
 800db62:	3708      	adds	r7, #8
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}
 800db68:	e000ed00 	.word	0xe000ed00

0800db6c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800db70:	f7f2 fea0 	bl	80008b4 <SystemClock_Config>
}
 800db74:	bf00      	nop
 800db76:	bd80      	pop	{r7, pc}

0800db78 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800db78:	b480      	push	{r7}
 800db7a:	b085      	sub	sp, #20
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	4603      	mov	r3, r0
 800db80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db82:	2300      	movs	r3, #0
 800db84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800db86:	79fb      	ldrb	r3, [r7, #7]
 800db88:	2b03      	cmp	r3, #3
 800db8a:	d817      	bhi.n	800dbbc <USBD_Get_USB_Status+0x44>
 800db8c:	a201      	add	r2, pc, #4	@ (adr r2, 800db94 <USBD_Get_USB_Status+0x1c>)
 800db8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db92:	bf00      	nop
 800db94:	0800dba5 	.word	0x0800dba5
 800db98:	0800dbab 	.word	0x0800dbab
 800db9c:	0800dbb1 	.word	0x0800dbb1
 800dba0:	0800dbb7 	.word	0x0800dbb7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dba4:	2300      	movs	r3, #0
 800dba6:	73fb      	strb	r3, [r7, #15]
    break;
 800dba8:	e00b      	b.n	800dbc2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dbaa:	2303      	movs	r3, #3
 800dbac:	73fb      	strb	r3, [r7, #15]
    break;
 800dbae:	e008      	b.n	800dbc2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	73fb      	strb	r3, [r7, #15]
    break;
 800dbb4:	e005      	b.n	800dbc2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dbb6:	2303      	movs	r3, #3
 800dbb8:	73fb      	strb	r3, [r7, #15]
    break;
 800dbba:	e002      	b.n	800dbc2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dbbc:	2303      	movs	r3, #3
 800dbbe:	73fb      	strb	r3, [r7, #15]
    break;
 800dbc0:	bf00      	nop
  }
  return usb_status;
 800dbc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	3714      	adds	r7, #20
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbce:	4770      	bx	lr

0800dbd0 <malloc>:
 800dbd0:	4b02      	ldr	r3, [pc, #8]	@ (800dbdc <malloc+0xc>)
 800dbd2:	4601      	mov	r1, r0
 800dbd4:	6818      	ldr	r0, [r3, #0]
 800dbd6:	f000 b82d 	b.w	800dc34 <_malloc_r>
 800dbda:	bf00      	nop
 800dbdc:	2000010c 	.word	0x2000010c

0800dbe0 <free>:
 800dbe0:	4b02      	ldr	r3, [pc, #8]	@ (800dbec <free+0xc>)
 800dbe2:	4601      	mov	r1, r0
 800dbe4:	6818      	ldr	r0, [r3, #0]
 800dbe6:	f000 b8f5 	b.w	800ddd4 <_free_r>
 800dbea:	bf00      	nop
 800dbec:	2000010c 	.word	0x2000010c

0800dbf0 <sbrk_aligned>:
 800dbf0:	b570      	push	{r4, r5, r6, lr}
 800dbf2:	4e0f      	ldr	r6, [pc, #60]	@ (800dc30 <sbrk_aligned+0x40>)
 800dbf4:	460c      	mov	r4, r1
 800dbf6:	6831      	ldr	r1, [r6, #0]
 800dbf8:	4605      	mov	r5, r0
 800dbfa:	b911      	cbnz	r1, 800dc02 <sbrk_aligned+0x12>
 800dbfc:	f000 f8ae 	bl	800dd5c <_sbrk_r>
 800dc00:	6030      	str	r0, [r6, #0]
 800dc02:	4621      	mov	r1, r4
 800dc04:	4628      	mov	r0, r5
 800dc06:	f000 f8a9 	bl	800dd5c <_sbrk_r>
 800dc0a:	1c43      	adds	r3, r0, #1
 800dc0c:	d103      	bne.n	800dc16 <sbrk_aligned+0x26>
 800dc0e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800dc12:	4620      	mov	r0, r4
 800dc14:	bd70      	pop	{r4, r5, r6, pc}
 800dc16:	1cc4      	adds	r4, r0, #3
 800dc18:	f024 0403 	bic.w	r4, r4, #3
 800dc1c:	42a0      	cmp	r0, r4
 800dc1e:	d0f8      	beq.n	800dc12 <sbrk_aligned+0x22>
 800dc20:	1a21      	subs	r1, r4, r0
 800dc22:	4628      	mov	r0, r5
 800dc24:	f000 f89a 	bl	800dd5c <_sbrk_r>
 800dc28:	3001      	adds	r0, #1
 800dc2a:	d1f2      	bne.n	800dc12 <sbrk_aligned+0x22>
 800dc2c:	e7ef      	b.n	800dc0e <sbrk_aligned+0x1e>
 800dc2e:	bf00      	nop
 800dc30:	200023cc 	.word	0x200023cc

0800dc34 <_malloc_r>:
 800dc34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc38:	1ccd      	adds	r5, r1, #3
 800dc3a:	f025 0503 	bic.w	r5, r5, #3
 800dc3e:	3508      	adds	r5, #8
 800dc40:	2d0c      	cmp	r5, #12
 800dc42:	bf38      	it	cc
 800dc44:	250c      	movcc	r5, #12
 800dc46:	2d00      	cmp	r5, #0
 800dc48:	4606      	mov	r6, r0
 800dc4a:	db01      	blt.n	800dc50 <_malloc_r+0x1c>
 800dc4c:	42a9      	cmp	r1, r5
 800dc4e:	d904      	bls.n	800dc5a <_malloc_r+0x26>
 800dc50:	230c      	movs	r3, #12
 800dc52:	6033      	str	r3, [r6, #0]
 800dc54:	2000      	movs	r0, #0
 800dc56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dd30 <_malloc_r+0xfc>
 800dc5e:	f000 f869 	bl	800dd34 <__malloc_lock>
 800dc62:	f8d8 3000 	ldr.w	r3, [r8]
 800dc66:	461c      	mov	r4, r3
 800dc68:	bb44      	cbnz	r4, 800dcbc <_malloc_r+0x88>
 800dc6a:	4629      	mov	r1, r5
 800dc6c:	4630      	mov	r0, r6
 800dc6e:	f7ff ffbf 	bl	800dbf0 <sbrk_aligned>
 800dc72:	1c43      	adds	r3, r0, #1
 800dc74:	4604      	mov	r4, r0
 800dc76:	d158      	bne.n	800dd2a <_malloc_r+0xf6>
 800dc78:	f8d8 4000 	ldr.w	r4, [r8]
 800dc7c:	4627      	mov	r7, r4
 800dc7e:	2f00      	cmp	r7, #0
 800dc80:	d143      	bne.n	800dd0a <_malloc_r+0xd6>
 800dc82:	2c00      	cmp	r4, #0
 800dc84:	d04b      	beq.n	800dd1e <_malloc_r+0xea>
 800dc86:	6823      	ldr	r3, [r4, #0]
 800dc88:	4639      	mov	r1, r7
 800dc8a:	4630      	mov	r0, r6
 800dc8c:	eb04 0903 	add.w	r9, r4, r3
 800dc90:	f000 f864 	bl	800dd5c <_sbrk_r>
 800dc94:	4581      	cmp	r9, r0
 800dc96:	d142      	bne.n	800dd1e <_malloc_r+0xea>
 800dc98:	6821      	ldr	r1, [r4, #0]
 800dc9a:	1a6d      	subs	r5, r5, r1
 800dc9c:	4629      	mov	r1, r5
 800dc9e:	4630      	mov	r0, r6
 800dca0:	f7ff ffa6 	bl	800dbf0 <sbrk_aligned>
 800dca4:	3001      	adds	r0, #1
 800dca6:	d03a      	beq.n	800dd1e <_malloc_r+0xea>
 800dca8:	6823      	ldr	r3, [r4, #0]
 800dcaa:	442b      	add	r3, r5
 800dcac:	6023      	str	r3, [r4, #0]
 800dcae:	f8d8 3000 	ldr.w	r3, [r8]
 800dcb2:	685a      	ldr	r2, [r3, #4]
 800dcb4:	bb62      	cbnz	r2, 800dd10 <_malloc_r+0xdc>
 800dcb6:	f8c8 7000 	str.w	r7, [r8]
 800dcba:	e00f      	b.n	800dcdc <_malloc_r+0xa8>
 800dcbc:	6822      	ldr	r2, [r4, #0]
 800dcbe:	1b52      	subs	r2, r2, r5
 800dcc0:	d420      	bmi.n	800dd04 <_malloc_r+0xd0>
 800dcc2:	2a0b      	cmp	r2, #11
 800dcc4:	d917      	bls.n	800dcf6 <_malloc_r+0xc2>
 800dcc6:	1961      	adds	r1, r4, r5
 800dcc8:	42a3      	cmp	r3, r4
 800dcca:	6025      	str	r5, [r4, #0]
 800dccc:	bf18      	it	ne
 800dcce:	6059      	strne	r1, [r3, #4]
 800dcd0:	6863      	ldr	r3, [r4, #4]
 800dcd2:	bf08      	it	eq
 800dcd4:	f8c8 1000 	streq.w	r1, [r8]
 800dcd8:	5162      	str	r2, [r4, r5]
 800dcda:	604b      	str	r3, [r1, #4]
 800dcdc:	4630      	mov	r0, r6
 800dcde:	f000 f82f 	bl	800dd40 <__malloc_unlock>
 800dce2:	f104 000b 	add.w	r0, r4, #11
 800dce6:	1d23      	adds	r3, r4, #4
 800dce8:	f020 0007 	bic.w	r0, r0, #7
 800dcec:	1ac2      	subs	r2, r0, r3
 800dcee:	bf1c      	itt	ne
 800dcf0:	1a1b      	subne	r3, r3, r0
 800dcf2:	50a3      	strne	r3, [r4, r2]
 800dcf4:	e7af      	b.n	800dc56 <_malloc_r+0x22>
 800dcf6:	6862      	ldr	r2, [r4, #4]
 800dcf8:	42a3      	cmp	r3, r4
 800dcfa:	bf0c      	ite	eq
 800dcfc:	f8c8 2000 	streq.w	r2, [r8]
 800dd00:	605a      	strne	r2, [r3, #4]
 800dd02:	e7eb      	b.n	800dcdc <_malloc_r+0xa8>
 800dd04:	4623      	mov	r3, r4
 800dd06:	6864      	ldr	r4, [r4, #4]
 800dd08:	e7ae      	b.n	800dc68 <_malloc_r+0x34>
 800dd0a:	463c      	mov	r4, r7
 800dd0c:	687f      	ldr	r7, [r7, #4]
 800dd0e:	e7b6      	b.n	800dc7e <_malloc_r+0x4a>
 800dd10:	461a      	mov	r2, r3
 800dd12:	685b      	ldr	r3, [r3, #4]
 800dd14:	42a3      	cmp	r3, r4
 800dd16:	d1fb      	bne.n	800dd10 <_malloc_r+0xdc>
 800dd18:	2300      	movs	r3, #0
 800dd1a:	6053      	str	r3, [r2, #4]
 800dd1c:	e7de      	b.n	800dcdc <_malloc_r+0xa8>
 800dd1e:	230c      	movs	r3, #12
 800dd20:	6033      	str	r3, [r6, #0]
 800dd22:	4630      	mov	r0, r6
 800dd24:	f000 f80c 	bl	800dd40 <__malloc_unlock>
 800dd28:	e794      	b.n	800dc54 <_malloc_r+0x20>
 800dd2a:	6005      	str	r5, [r0, #0]
 800dd2c:	e7d6      	b.n	800dcdc <_malloc_r+0xa8>
 800dd2e:	bf00      	nop
 800dd30:	200023d0 	.word	0x200023d0

0800dd34 <__malloc_lock>:
 800dd34:	4801      	ldr	r0, [pc, #4]	@ (800dd3c <__malloc_lock+0x8>)
 800dd36:	f000 b84b 	b.w	800ddd0 <__retarget_lock_acquire_recursive>
 800dd3a:	bf00      	nop
 800dd3c:	20002510 	.word	0x20002510

0800dd40 <__malloc_unlock>:
 800dd40:	4801      	ldr	r0, [pc, #4]	@ (800dd48 <__malloc_unlock+0x8>)
 800dd42:	f000 b846 	b.w	800ddd2 <__retarget_lock_release_recursive>
 800dd46:	bf00      	nop
 800dd48:	20002510 	.word	0x20002510

0800dd4c <memset>:
 800dd4c:	4402      	add	r2, r0
 800dd4e:	4603      	mov	r3, r0
 800dd50:	4293      	cmp	r3, r2
 800dd52:	d100      	bne.n	800dd56 <memset+0xa>
 800dd54:	4770      	bx	lr
 800dd56:	f803 1b01 	strb.w	r1, [r3], #1
 800dd5a:	e7f9      	b.n	800dd50 <memset+0x4>

0800dd5c <_sbrk_r>:
 800dd5c:	b538      	push	{r3, r4, r5, lr}
 800dd5e:	4d06      	ldr	r5, [pc, #24]	@ (800dd78 <_sbrk_r+0x1c>)
 800dd60:	2300      	movs	r3, #0
 800dd62:	4604      	mov	r4, r0
 800dd64:	4608      	mov	r0, r1
 800dd66:	602b      	str	r3, [r5, #0]
 800dd68:	f7f4 f86e 	bl	8001e48 <_sbrk>
 800dd6c:	1c43      	adds	r3, r0, #1
 800dd6e:	d102      	bne.n	800dd76 <_sbrk_r+0x1a>
 800dd70:	682b      	ldr	r3, [r5, #0]
 800dd72:	b103      	cbz	r3, 800dd76 <_sbrk_r+0x1a>
 800dd74:	6023      	str	r3, [r4, #0]
 800dd76:	bd38      	pop	{r3, r4, r5, pc}
 800dd78:	2000250c 	.word	0x2000250c

0800dd7c <__errno>:
 800dd7c:	4b01      	ldr	r3, [pc, #4]	@ (800dd84 <__errno+0x8>)
 800dd7e:	6818      	ldr	r0, [r3, #0]
 800dd80:	4770      	bx	lr
 800dd82:	bf00      	nop
 800dd84:	2000010c 	.word	0x2000010c

0800dd88 <__libc_init_array>:
 800dd88:	b570      	push	{r4, r5, r6, lr}
 800dd8a:	4d0d      	ldr	r5, [pc, #52]	@ (800ddc0 <__libc_init_array+0x38>)
 800dd8c:	4c0d      	ldr	r4, [pc, #52]	@ (800ddc4 <__libc_init_array+0x3c>)
 800dd8e:	1b64      	subs	r4, r4, r5
 800dd90:	10a4      	asrs	r4, r4, #2
 800dd92:	2600      	movs	r6, #0
 800dd94:	42a6      	cmp	r6, r4
 800dd96:	d109      	bne.n	800ddac <__libc_init_array+0x24>
 800dd98:	4d0b      	ldr	r5, [pc, #44]	@ (800ddc8 <__libc_init_array+0x40>)
 800dd9a:	4c0c      	ldr	r4, [pc, #48]	@ (800ddcc <__libc_init_array+0x44>)
 800dd9c:	f000 f864 	bl	800de68 <_init>
 800dda0:	1b64      	subs	r4, r4, r5
 800dda2:	10a4      	asrs	r4, r4, #2
 800dda4:	2600      	movs	r6, #0
 800dda6:	42a6      	cmp	r6, r4
 800dda8:	d105      	bne.n	800ddb6 <__libc_init_array+0x2e>
 800ddaa:	bd70      	pop	{r4, r5, r6, pc}
 800ddac:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddb0:	4798      	blx	r3
 800ddb2:	3601      	adds	r6, #1
 800ddb4:	e7ee      	b.n	800dd94 <__libc_init_array+0xc>
 800ddb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddba:	4798      	blx	r3
 800ddbc:	3601      	adds	r6, #1
 800ddbe:	e7f2      	b.n	800dda6 <__libc_init_array+0x1e>
 800ddc0:	0800df04 	.word	0x0800df04
 800ddc4:	0800df04 	.word	0x0800df04
 800ddc8:	0800df04 	.word	0x0800df04
 800ddcc:	0800df08 	.word	0x0800df08

0800ddd0 <__retarget_lock_acquire_recursive>:
 800ddd0:	4770      	bx	lr

0800ddd2 <__retarget_lock_release_recursive>:
 800ddd2:	4770      	bx	lr

0800ddd4 <_free_r>:
 800ddd4:	b538      	push	{r3, r4, r5, lr}
 800ddd6:	4605      	mov	r5, r0
 800ddd8:	2900      	cmp	r1, #0
 800ddda:	d041      	beq.n	800de60 <_free_r+0x8c>
 800dddc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dde0:	1f0c      	subs	r4, r1, #4
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	bfb8      	it	lt
 800dde6:	18e4      	addlt	r4, r4, r3
 800dde8:	f7ff ffa4 	bl	800dd34 <__malloc_lock>
 800ddec:	4a1d      	ldr	r2, [pc, #116]	@ (800de64 <_free_r+0x90>)
 800ddee:	6813      	ldr	r3, [r2, #0]
 800ddf0:	b933      	cbnz	r3, 800de00 <_free_r+0x2c>
 800ddf2:	6063      	str	r3, [r4, #4]
 800ddf4:	6014      	str	r4, [r2, #0]
 800ddf6:	4628      	mov	r0, r5
 800ddf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddfc:	f7ff bfa0 	b.w	800dd40 <__malloc_unlock>
 800de00:	42a3      	cmp	r3, r4
 800de02:	d908      	bls.n	800de16 <_free_r+0x42>
 800de04:	6820      	ldr	r0, [r4, #0]
 800de06:	1821      	adds	r1, r4, r0
 800de08:	428b      	cmp	r3, r1
 800de0a:	bf01      	itttt	eq
 800de0c:	6819      	ldreq	r1, [r3, #0]
 800de0e:	685b      	ldreq	r3, [r3, #4]
 800de10:	1809      	addeq	r1, r1, r0
 800de12:	6021      	streq	r1, [r4, #0]
 800de14:	e7ed      	b.n	800ddf2 <_free_r+0x1e>
 800de16:	461a      	mov	r2, r3
 800de18:	685b      	ldr	r3, [r3, #4]
 800de1a:	b10b      	cbz	r3, 800de20 <_free_r+0x4c>
 800de1c:	42a3      	cmp	r3, r4
 800de1e:	d9fa      	bls.n	800de16 <_free_r+0x42>
 800de20:	6811      	ldr	r1, [r2, #0]
 800de22:	1850      	adds	r0, r2, r1
 800de24:	42a0      	cmp	r0, r4
 800de26:	d10b      	bne.n	800de40 <_free_r+0x6c>
 800de28:	6820      	ldr	r0, [r4, #0]
 800de2a:	4401      	add	r1, r0
 800de2c:	1850      	adds	r0, r2, r1
 800de2e:	4283      	cmp	r3, r0
 800de30:	6011      	str	r1, [r2, #0]
 800de32:	d1e0      	bne.n	800ddf6 <_free_r+0x22>
 800de34:	6818      	ldr	r0, [r3, #0]
 800de36:	685b      	ldr	r3, [r3, #4]
 800de38:	6053      	str	r3, [r2, #4]
 800de3a:	4408      	add	r0, r1
 800de3c:	6010      	str	r0, [r2, #0]
 800de3e:	e7da      	b.n	800ddf6 <_free_r+0x22>
 800de40:	d902      	bls.n	800de48 <_free_r+0x74>
 800de42:	230c      	movs	r3, #12
 800de44:	602b      	str	r3, [r5, #0]
 800de46:	e7d6      	b.n	800ddf6 <_free_r+0x22>
 800de48:	6820      	ldr	r0, [r4, #0]
 800de4a:	1821      	adds	r1, r4, r0
 800de4c:	428b      	cmp	r3, r1
 800de4e:	bf04      	itt	eq
 800de50:	6819      	ldreq	r1, [r3, #0]
 800de52:	685b      	ldreq	r3, [r3, #4]
 800de54:	6063      	str	r3, [r4, #4]
 800de56:	bf04      	itt	eq
 800de58:	1809      	addeq	r1, r1, r0
 800de5a:	6021      	streq	r1, [r4, #0]
 800de5c:	6054      	str	r4, [r2, #4]
 800de5e:	e7ca      	b.n	800ddf6 <_free_r+0x22>
 800de60:	bd38      	pop	{r3, r4, r5, pc}
 800de62:	bf00      	nop
 800de64:	200023d0 	.word	0x200023d0

0800de68 <_init>:
 800de68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de6a:	bf00      	nop
 800de6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de6e:	bc08      	pop	{r3}
 800de70:	469e      	mov	lr, r3
 800de72:	4770      	bx	lr

0800de74 <_fini>:
 800de74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de76:	bf00      	nop
 800de78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de7a:	bc08      	pop	{r3}
 800de7c:	469e      	mov	lr, r3
 800de7e:	4770      	bx	lr
